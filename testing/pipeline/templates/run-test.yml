parameters:
  jobName: ''
  path: ''

jobs:
- job: ${{ parameters.jobName}}
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    ${{ if eq(variables['IS_PRIVATE_BRANCH'], 'False') }}:
      EXTENSION_NAME: "k8s-extension"
      EXTENSION_FILE_NAME: "k8s_extension"
    ${{ if ne(variables['IS_PRIVATE_BRANCH'], 'False') }}:
      EXTENSION_NAME: "k8s-extension-private"
      EXTENSION_FILE_NAME: "k8s_extension_private"
  steps:
  - bash: |
      echo "Installing helm3"
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
      chmod 700 get_helm.sh
      ./get_helm.sh --version v3.6.3

      echo "Installing kubectl"
      curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x ./kubectl
      sudo mv ./kubectl /usr/local/bin/kubectl
      kubectl version --client
    displayName: "Setup the VM with helm3 and kubectl" 
  - template: ./build-extension.yml
    parameters:
      CLI_REPO_PATH: $(CLI_REPO_PATH)   
  - bash: |
      K8S_EXTENSION_VERSION=$(ls ${EXTENSION_FILE_NAME}* | cut -d "-" -f2)
      echo "##vso[task.setvariable variable=K8S_EXTENSION_VERSION]$K8S_EXTENSION_VERSION"
      cp * $(TEST_PATH)/bin
    workingDirectory: $(CLI_REPO_PATH)/dist
    displayName: "Copy the Built .whl to Extension Test Path"

  - bash: |
      RAND_STR=$RANDOM
      AKS_CLUSTER_NAME="${BASE_CLUSTER_NAME}-${RAND_STR}-aks"
      ARC_CLUSTER_NAME="${BASE_CLUSTER_NAME}-${RAND_STR}-arc"

      JSON_STRING=$(jq -n \
                      --arg SUB_ID "$SUBSCRIPTION_ID" \
                      --arg RG "$RESOURCE_GROUP" \
                      --arg AKS_CLUSTER_NAME "$AKS_CLUSTER_NAME" \
                      --arg ARC_CLUSTER_NAME "$ARC_CLUSTER_NAME" \
                      --arg K8S_EXTENSION_VERSION "$K8S_EXTENSION_VERSION" \
                      '{subscriptionId: $SUB_ID, resourceGroup: $RG, aksClusterName: $AKS_CLUSTER_NAME, arcClusterName: $ARC_CLUSTER_NAME, extensionVersion: {"k8s-extension": $K8S_EXTENSION_VERSION, "k8s-extension-private": $K8S_EXTENSION_VERSION, connectedk8s: "1.0.0"}}')
      echo $JSON_STRING > settings.json
      cat settings.json
    workingDirectory: $(TEST_PATH)
    displayName: "Generate a settings.json file"  

  - bash : |
      echo "Downloading the kind script"
      curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
      chmod +x ./kind
      ./kind create cluster
    displayName: "Create and Start the Kind cluster"
  
  - bash: |
      curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    displayName: "Upgrade az to latest version"

  - task: AzureCLI@2
    displayName: Bootstrap
    inputs:
      azureSubscription: AzureResourceConnection
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        .\Bootstrap.ps1 -CI
      workingDirectory: $(TEST_PATH)
            
  - task: AzureCLI@2
    displayName: Run the Test Suite for ${{ parameters.path }}
    inputs:
      azureSubscription: AzureResourceConnection
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        .\Test.ps1 -CI -Path ${{ parameters.path }} -Type $(EXTENSION_NAME)
      workingDirectory: $(TEST_PATH)
    continueOnError: true

  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '**/testing/results/*.xml'
      failTaskOnFailedTests: true
    condition: succeededOrFailed()

  - task: AzureCLI@2
    displayName: Cleanup
    inputs:
      azureSubscription: AzureResourceConnection
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        .\Cleanup.ps1 -CI
      workingDirectory: $(TEST_PATH)
    condition: succeededOrFailed()