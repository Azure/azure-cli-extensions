# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "billing-benefits savings-plan-order savings-plan validate-update",
)
class ValidateUpdate(AAZCommand):
    """Validate savings plan patch.

    :example: Validate savings plan update request
        az billing-benefits savings-plan-order savings-plan validate-update --savings-plan-order-id 30000000-aaaa-bbbb-cccc-200000000006 --savings-plan-id 30000000-aaaa-bbbb-cccc-200000000004 --benefits "[{applied-scope-type:Shared,display-name:name1}]"
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billingbenefits/savingsplanorders/{}/savingsplans/{}/validate", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.savings_plan_id = AAZStrArg(
            options=["--savings-plan-id"],
            help="ID of the savings plan",
            required=True,
        )
        _args_schema.savings_plan_order_id = AAZStrArg(
            options=["--savings-plan-order-id"],
            help="Order ID of the savings plan",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.benefits = AAZListArg(
            options=["--benefits"],
            arg_group="Body",
        )

        benefits = cls._args_schema.benefits
        benefits.Element = AAZObjectArg()

        _element = cls._args_schema.benefits.Element
        _element.applied_scope_properties = AAZObjectArg(
            options=["applied-scope-properties"],
            help="Properties specific to applied scope type. Not required if not applicable.",
        )
        cls._build_args_applied_scope_properties_create(_element.applied_scope_properties)
        _element.applied_scope_type = AAZStrArg(
            options=["applied-scope-type"],
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        _element.display_name = AAZStrArg(
            options=["display-name"],
            help="Display name",
        )
        _element.renew = AAZBoolArg(
            options=["renew"],
            help="Setting this to true will automatically purchase a new benefit on the expiration date time.",
            default=False,
        )
        _element.renew_properties = AAZObjectArg(
            options=["renew-properties"],
        )

        renew_properties = cls._args_schema.benefits.Element.renew_properties
        renew_properties.purchase_properties = AAZObjectArg(
            options=["purchase-properties"],
        )

        purchase_properties = cls._args_schema.benefits.Element.renew_properties.purchase_properties
        purchase_properties.applied_scope_properties = AAZObjectArg(
            options=["applied-scope-properties"],
        )
        cls._build_args_applied_scope_properties_create(purchase_properties.applied_scope_properties)
        purchase_properties.applied_scope_type = AAZStrArg(
            options=["applied-scope-type"],
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        purchase_properties.billing_plan = AAZStrArg(
            options=["billing-plan"],
            help="Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.",
            enum={"P1M": "P1M"},
        )
        purchase_properties.billing_scope_id = AAZStrArg(
            options=["billing-scope-id"],
            help="Subscription that will be charged for purchasing the benefit",
        )
        purchase_properties.commitment = AAZObjectArg(
            options=["commitment"],
            help="Commitment towards the benefit.",
        )
        purchase_properties.display_name = AAZStrArg(
            options=["display-name"],
            help="Friendly name of the savings plan",
        )
        purchase_properties.renew = AAZBoolArg(
            options=["renew"],
            help="Setting this to true will automatically purchase a new benefit on the expiration date time.",
            default=False,
        )
        purchase_properties.term = AAZStrArg(
            options=["term"],
            help="Represent benefit term in ISO 8601 format.",
            enum={"P1Y": "P1Y", "P3Y": "P3Y", "P5Y": "P5Y"},
        )
        purchase_properties.sku = AAZStrArg(
            options=["sku"],
            help="Name of the SKU to be applied",
        )

        commitment = cls._args_schema.benefits.Element.renew_properties.purchase_properties.commitment
        commitment.amount = AAZFloatArg(
            options=["amount"],
        )
        commitment.currency_code = AAZStrArg(
            options=["currency-code"],
            help="The ISO 4217 3-letter currency code for the currency used by this purchase record.",
        )
        commitment.grain = AAZStrArg(
            options=["grain"],
            help="Commitment grain.",
            enum={"Hourly": "Hourly"},
        )
        return cls._args_schema

    _args_applied_scope_properties_create = None

    @classmethod
    def _build_args_applied_scope_properties_create(cls, _schema):
        if cls._args_applied_scope_properties_create is not None:
            _schema.display_name = cls._args_applied_scope_properties_create.display_name
            _schema.management_group_id = cls._args_applied_scope_properties_create.management_group_id
            _schema.resource_group_id = cls._args_applied_scope_properties_create.resource_group_id
            _schema.subscription_id = cls._args_applied_scope_properties_create.subscription_id
            _schema.tenant_id = cls._args_applied_scope_properties_create.tenant_id
            return

        cls._args_applied_scope_properties_create = AAZObjectArg()

        applied_scope_properties_create = cls._args_applied_scope_properties_create
        applied_scope_properties_create.display_name = AAZStrArg(
            options=["display-name"],
            help="Display name",
        )
        applied_scope_properties_create.management_group_id = AAZStrArg(
            options=["management-group-id"],
            help="Fully-qualified identifier of the management group where the benefit must be applied.",
        )
        applied_scope_properties_create.resource_group_id = AAZStrArg(
            options=["resource-group-id"],
            help="Fully-qualified identifier of the resource group.",
        )
        applied_scope_properties_create.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="Fully-qualified identifier of the subscription.",
        )
        applied_scope_properties_create.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="Tenant ID where the benefit is applied.",
        )

        _schema.display_name = cls._args_applied_scope_properties_create.display_name
        _schema.management_group_id = cls._args_applied_scope_properties_create.management_group_id
        _schema.resource_group_id = cls._args_applied_scope_properties_create.resource_group_id
        _schema.subscription_id = cls._args_applied_scope_properties_create.subscription_id
        _schema.tenant_id = cls._args_applied_scope_properties_create.tenant_id

    def _execute_operations(self):
        self.pre_operations()
        self.SavingsPlanValidateUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SavingsPlanValidateUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "savingsPlanId", self.ctx.args.savings_plan_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "savingsPlanOrderId", self.ctx.args.savings_plan_order_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("benefits", AAZListType, ".benefits")

            benefits = _builder.get(".benefits")
            if benefits is not None:
                benefits.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".benefits[]")
            if _elements is not None:
                _ValidateUpdateHelper._build_schema_applied_scope_properties_create(_elements.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                _elements.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                _elements.set_prop("displayName", AAZStrType, ".display_name")
                _elements.set_prop("renew", AAZBoolType, ".renew")
                _elements.set_prop("renewProperties", AAZObjectType, ".renew_properties")

            renew_properties = _builder.get(".benefits[].renewProperties")
            if renew_properties is not None:
                renew_properties.set_prop("purchaseProperties", AAZObjectType, ".purchase_properties")

            purchase_properties = _builder.get(".benefits[].renewProperties.purchaseProperties")
            if purchase_properties is not None:
                purchase_properties.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                purchase_properties.set_prop("sku", AAZObjectType)

            properties = _builder.get(".benefits[].renewProperties.purchaseProperties.properties")
            if properties is not None:
                _ValidateUpdateHelper._build_schema_applied_scope_properties_create(properties.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                properties.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                properties.set_prop("billingPlan", AAZStrType, ".billing_plan")
                properties.set_prop("billingScopeId", AAZStrType, ".billing_scope_id")
                properties.set_prop("commitment", AAZObjectType, ".commitment")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("renew", AAZBoolType, ".renew")
                properties.set_prop("term", AAZStrType, ".term")

            commitment = _builder.get(".benefits[].renewProperties.purchaseProperties.properties.commitment")
            if commitment is not None:
                commitment.set_prop("amount", AAZFloatType, ".amount")
                commitment.set_prop("currencyCode", AAZStrType, ".currency_code")
                commitment.set_prop("grain", AAZStrType, ".grain")

            sku = _builder.get(".benefits[].renewProperties.purchaseProperties.sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.benefits = AAZListType()
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )

            benefits = cls._schema_on_200.benefits
            benefits.Element = AAZObjectType()

            _element = cls._schema_on_200.benefits.Element
            _element.reason = AAZStrType()
            _element.reason_code = AAZStrType(
                serialized_name="reasonCode",
            )
            _element.valid = AAZBoolType()

            return cls._schema_on_200


class _ValidateUpdateHelper:
    """Helper class for ValidateUpdate"""

    @classmethod
    def _build_schema_applied_scope_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("displayName", AAZStrType, ".display_name")
        _builder.set_prop("managementGroupId", AAZStrType, ".management_group_id")
        _builder.set_prop("resourceGroupId", AAZStrType, ".resource_group_id")
        _builder.set_prop("subscriptionId", AAZStrType, ".subscription_id")
        _builder.set_prop("tenantId", AAZStrType, ".tenant_id")


__all__ = ["ValidateUpdate"]
