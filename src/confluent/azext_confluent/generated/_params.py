# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('confluent organization list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('confluent organization show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('organization_name', options_list=['--name', '-n', '--organization-name'], type=str,
                   help='Organization resource name', id_part='name')

    with self.argument_context('confluent organization create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('organization_name', options_list=['--name', '-n', '--organization-name'], type=str,
                   help='Organization resource name')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('publisher_id', type=str, help='Publisher Id')
        c.argument('offer_id', type=str, help='Offer Id')
        c.argument('plan_id', type=str, help='Offer Plan Id')
        c.argument('plan_name', type=str, help='Offer Plan Name')
        c.argument('term_unit', type=str, help='Offer Plan Term unit')

    with self.argument_context('confluent organization update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('organization_name', options_list=['--name', '-n', '--organization-name'], type=str,
                   help='Organization resource name', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('confluent organization delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('organization_name', options_list=['--name', '-n', '--organization-name'], type=str,
                   help='Organization resource name', id_part='name')

    with self.argument_context('confluent organization wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('organization_name', options_list=['--name', '-n', '--organization-name'], type=str,
                   help='Organization resource name', id_part='name')
