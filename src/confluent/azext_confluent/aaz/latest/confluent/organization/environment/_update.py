# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confluent organization environment update",
)
class Update(AAZCommand):
    """Update confluent environment.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}", "2024-07-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.environment_id = AAZStrArg(
            options=["-n", "--name", "--environment-id"],
            help="Confluent environment id",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group.",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            arg_group="Body",
            help="Type of environment",
            nullable=True,
        )
        _args_schema.type = AAZStrArg(
            options=["--type"],
            arg_group="Body",
            help="Type of the resource",
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.metadata = AAZObjectArg(
            options=["--metadata"],
            arg_group="Properties",
            help="Metadata of the record",
            nullable=True,
        )
        _args_schema.stream_governance_config = AAZObjectArg(
            options=["--stream-governance-config"],
            arg_group="Properties",
            help="Stream governance configuration",
            nullable=True,
        )

        metadata = cls._args_schema.metadata
        metadata.created_timestamp = AAZStrArg(
            options=["created-timestamp"],
            help="Created Date Time",
            nullable=True,
        )
        metadata.deleted_timestamp = AAZStrArg(
            options=["deleted-timestamp"],
            help="Deleted Date time",
            nullable=True,
        )
        metadata.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Resource name of the record",
            nullable=True,
        )
        metadata.self = AAZStrArg(
            options=["self"],
            help="Self lookup url",
            nullable=True,
        )
        metadata.updated_timestamp = AAZStrArg(
            options=["updated-timestamp"],
            help="Updated Date time",
            nullable=True,
        )

        stream_governance_config = cls._args_schema.stream_governance_config
        stream_governance_config.package = AAZStrArg(
            options=["package"],
            help="Stream governance configuration",
            nullable=True,
            enum={"ADVANCED": "ADVANCED", "ESSENTIALS": "ESSENTIALS"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationGetEnvironmentById(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.EnvironmentCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationGetEnvironmentById(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_sc_environment_record_read(cls._schema_on_200)

            return cls._schema_on_200

    class EnvironmentCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_sc_environment_record_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("kind", AAZStrType, ".kind")
            _builder.set_prop("name", AAZStrType, ".environment_id")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("type", AAZStrType, ".type")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("metadata", AAZObjectType, ".metadata")
                properties.set_prop("streamGovernanceConfig", AAZObjectType, ".stream_governance_config")

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_prop("createdTimestamp", AAZStrType, ".created_timestamp")
                metadata.set_prop("deletedTimestamp", AAZStrType, ".deleted_timestamp")
                metadata.set_prop("resourceName", AAZStrType, ".resource_name")
                metadata.set_prop("self", AAZStrType, ".self")
                metadata.set_prop("updatedTimestamp", AAZStrType, ".updated_timestamp")

            stream_governance_config = _builder.get(".properties.streamGovernanceConfig")
            if stream_governance_config is not None:
                stream_governance_config.set_prop("package", AAZStrType, ".package")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_sc_environment_record_read = None

    @classmethod
    def _build_schema_sc_environment_record_read(cls, _schema):
        if cls._schema_sc_environment_record_read is not None:
            _schema.id = cls._schema_sc_environment_record_read.id
            _schema.kind = cls._schema_sc_environment_record_read.kind
            _schema.name = cls._schema_sc_environment_record_read.name
            _schema.properties = cls._schema_sc_environment_record_read.properties
            _schema.type = cls._schema_sc_environment_record_read.type
            return

        cls._schema_sc_environment_record_read = _schema_sc_environment_record_read = AAZObjectType()

        sc_environment_record_read = _schema_sc_environment_record_read
        sc_environment_record_read.id = AAZStrType()
        sc_environment_record_read.kind = AAZStrType()
        sc_environment_record_read.name = AAZStrType()
        sc_environment_record_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        sc_environment_record_read.type = AAZStrType()

        properties = _schema_sc_environment_record_read.properties
        properties.metadata = AAZObjectType()
        properties.stream_governance_config = AAZObjectType(
            serialized_name="streamGovernanceConfig",
        )

        metadata = _schema_sc_environment_record_read.properties.metadata
        metadata.created_timestamp = AAZStrType(
            serialized_name="createdTimestamp",
        )
        metadata.deleted_timestamp = AAZStrType(
            serialized_name="deletedTimestamp",
        )
        metadata.resource_name = AAZStrType(
            serialized_name="resourceName",
        )
        metadata.self = AAZStrType()
        metadata.updated_timestamp = AAZStrType(
            serialized_name="updatedTimestamp",
        )

        stream_governance_config = _schema_sc_environment_record_read.properties.stream_governance_config
        stream_governance_config.package = AAZStrType()

        _schema.id = cls._schema_sc_environment_record_read.id
        _schema.kind = cls._schema_sc_environment_record_read.kind
        _schema.name = cls._schema_sc_environment_record_read.name
        _schema.properties = cls._schema_sc_environment_record_read.properties
        _schema.type = cls._schema_sc_environment_record_read.type


__all__ = ["Update"]
