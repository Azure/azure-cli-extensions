# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confluent organization environment cluster topic update",
)
class Update(AAZCommand):
    """Update Confluent topics by name.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}/clusters/{}/topics/{}", "2024-07-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_id = AAZStrArg(
            options=["--cluster-id"],
            help="Confluent kafka or schema registry cluster id",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.environment_id = AAZStrArg(
            options=["--environment-id"],
            help="Confluent environment ID.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group.",
            required=True,
        )
        _args_schema.topic_name = AAZStrArg(
            options=["-n", "--name", "--topic-name"],
            help="Confluent kafka or schema registry topic name",
            required=True,
            id_part="child_name_3",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.configs = AAZObjectArg(
            options=["--configs"],
            arg_group="Properties",
            help="Config Specification of the topic",
            nullable=True,
        )
        cls._build_args_topics_related_link_update(_args_schema.configs)
        _args_schema.input_configs = AAZListArg(
            options=["--input-configs"],
            arg_group="Properties",
            help="Input Config Specification of the topic",
            nullable=True,
        )
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            arg_group="Properties",
            help="Type of topic",
            nullable=True,
        )
        _args_schema.metadata = AAZObjectArg(
            options=["--metadata"],
            arg_group="Properties",
            help="Metadata of the record",
            nullable=True,
        )
        _args_schema.partitions = AAZObjectArg(
            options=["--partitions"],
            arg_group="Properties",
            help="Partition Specification of the topic",
            nullable=True,
        )
        cls._build_args_topics_related_link_update(_args_schema.partitions)
        _args_schema.partitions_count = AAZStrArg(
            options=["--partitions-count"],
            arg_group="Properties",
            help="Partition count of the topic",
            nullable=True,
        )
        _args_schema.partitions_reassignments = AAZObjectArg(
            options=["--partitions-reassignments"],
            arg_group="Properties",
            help="Partition Reassignment Specification of the topic",
            nullable=True,
        )
        cls._build_args_topics_related_link_update(_args_schema.partitions_reassignments)
        _args_schema.replication_factor = AAZStrArg(
            options=["--replication-factor"],
            arg_group="Properties",
            help="Replication factor of the topic",
            nullable=True,
        )
        _args_schema.topic_id = AAZStrArg(
            options=["--topic-id"],
            arg_group="Properties",
            help="Topic Id returned by Confluent",
            nullable=True,
        )

        input_configs = cls._args_schema.input_configs
        input_configs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.input_configs.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the topic input config",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Value of the topic input config",
            nullable=True,
        )

        metadata = cls._args_schema.metadata
        metadata.resource_name = AAZStrArg(
            options=["resource-name"],
            help="Resource name of the record",
            nullable=True,
        )
        metadata.self = AAZStrArg(
            options=["self"],
            help="Self lookup url",
            nullable=True,
        )
        return cls._args_schema

    _args_topics_related_link_update = None

    @classmethod
    def _build_args_topics_related_link_update(cls, _schema):
        if cls._args_topics_related_link_update is not None:
            _schema.related = cls._args_topics_related_link_update.related
            return

        cls._args_topics_related_link_update = AAZObjectArg(
            nullable=True,
        )

        topics_related_link_update = cls._args_topics_related_link_update
        topics_related_link_update.related = AAZStrArg(
            options=["related"],
            help="Relationship of the topic",
            nullable=True,
        )

        _schema.related = cls._args_topics_related_link_update.related

    def _execute_operations(self):
        self.pre_operations()
        self.TopicsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.TopicsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class TopicsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/topics/{topicName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterId", self.ctx.args.cluster_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_topic_record_read(cls._schema_on_200)

            return cls._schema_on_200

    class TopicsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/topics/{topicName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterId", self.ctx.args.cluster_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_topic_record_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                _UpdateHelper._build_schema_topics_related_link_update(properties.set_prop("configs", AAZObjectType, ".configs"))
                properties.set_prop("inputConfigs", AAZListType, ".input_configs")
                properties.set_prop("kind", AAZStrType, ".kind")
                properties.set_prop("metadata", AAZObjectType, ".metadata")
                _UpdateHelper._build_schema_topics_related_link_update(properties.set_prop("partitions", AAZObjectType, ".partitions"))
                properties.set_prop("partitionsCount", AAZStrType, ".partitions_count")
                _UpdateHelper._build_schema_topics_related_link_update(properties.set_prop("partitionsReassignments", AAZObjectType, ".partitions_reassignments"))
                properties.set_prop("replicationFactor", AAZStrType, ".replication_factor")
                properties.set_prop("topicId", AAZStrType, ".topic_id")

            input_configs = _builder.get(".properties.inputConfigs")
            if input_configs is not None:
                input_configs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.inputConfigs[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_prop("resourceName", AAZStrType, ".resource_name")
                metadata.set_prop("self", AAZStrType, ".self")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_topics_related_link_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("related", AAZStrType, ".related")

    _schema_topic_record_read = None

    @classmethod
    def _build_schema_topic_record_read(cls, _schema):
        if cls._schema_topic_record_read is not None:
            _schema.id = cls._schema_topic_record_read.id
            _schema.name = cls._schema_topic_record_read.name
            _schema.properties = cls._schema_topic_record_read.properties
            _schema.type = cls._schema_topic_record_read.type
            return

        cls._schema_topic_record_read = _schema_topic_record_read = AAZObjectType()

        topic_record_read = _schema_topic_record_read
        topic_record_read.id = AAZStrType(
            flags={"read_only": True},
        )
        topic_record_read.name = AAZStrType(
            flags={"read_only": True},
        )
        topic_record_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        topic_record_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_topic_record_read.properties
        properties.configs = AAZObjectType()
        cls._build_schema_topics_related_link_read(properties.configs)
        properties.input_configs = AAZListType(
            serialized_name="inputConfigs",
        )
        properties.kind = AAZStrType()
        properties.metadata = AAZObjectType()
        properties.partitions = AAZObjectType()
        cls._build_schema_topics_related_link_read(properties.partitions)
        properties.partitions_count = AAZStrType(
            serialized_name="partitionsCount",
        )
        properties.partitions_reassignments = AAZObjectType(
            serialized_name="partitionsReassignments",
        )
        cls._build_schema_topics_related_link_read(properties.partitions_reassignments)
        properties.replication_factor = AAZStrType(
            serialized_name="replicationFactor",
        )
        properties.topic_id = AAZStrType(
            serialized_name="topicId",
        )

        input_configs = _schema_topic_record_read.properties.input_configs
        input_configs.Element = AAZObjectType()

        _element = _schema_topic_record_read.properties.input_configs.Element
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        metadata = _schema_topic_record_read.properties.metadata
        metadata.resource_name = AAZStrType(
            serialized_name="resourceName",
        )
        metadata.self = AAZStrType()

        _schema.id = cls._schema_topic_record_read.id
        _schema.name = cls._schema_topic_record_read.name
        _schema.properties = cls._schema_topic_record_read.properties
        _schema.type = cls._schema_topic_record_read.type

    _schema_topics_related_link_read = None

    @classmethod
    def _build_schema_topics_related_link_read(cls, _schema):
        if cls._schema_topics_related_link_read is not None:
            _schema.related = cls._schema_topics_related_link_read.related
            return

        cls._schema_topics_related_link_read = _schema_topics_related_link_read = AAZObjectType()

        topics_related_link_read = _schema_topics_related_link_read
        topics_related_link_read.related = AAZStrType()

        _schema.related = cls._schema_topics_related_link_read.related


__all__ = ["Update"]
