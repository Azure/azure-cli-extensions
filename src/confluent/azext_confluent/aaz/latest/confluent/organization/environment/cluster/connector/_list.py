# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class List(AAZCommand):
    """List all the connectors in a cluster.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}/clusters/{}/connectors", "2024-07-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_id = AAZStrArg(
            options=["--cluster-id"],
            help="Confluent kafka or schema registry cluster id",
            required=True,
        )
        _args_schema.environment_id = AAZStrArg(
            options=["--environment-id"],
            help="Confluent environment ID.",
            required=True,
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group.",
            required=True,
        )
        _args_schema.page_size = AAZIntArg(
            options=["--page-size"],
            help="Pagination size",
        )
        _args_schema.page_token = AAZStrArg(
            options=["--page-token"],
            help="An opaque pagination token to fetch the next set of records",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ConnectorList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ConnectorList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/connectors",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterId", self.ctx.args.cluster_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "pageSize", self.ctx.args.page_size,
                ),
                **self.serialize_query_param(
                    "pageToken", self.ctx.args.page_token,
                ),
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.connector_basic_info = AAZObjectType(
                serialized_name="connectorBasicInfo",
            )
            properties.connector_service_type_info = AAZObjectType(
                serialized_name="connectorServiceTypeInfo",
            )
            properties.partner_connector_info = AAZObjectType(
                serialized_name="partnerConnectorInfo",
            )

            connector_basic_info = cls._schema_on_200.value.Element.properties.connector_basic_info
            connector_basic_info.connector_class = AAZStrType(
                serialized_name="connectorClass",
            )
            connector_basic_info.connector_id = AAZStrType(
                serialized_name="connectorId",
            )
            connector_basic_info.connector_name = AAZStrType(
                serialized_name="connectorName",
            )
            connector_basic_info.connector_state = AAZStrType(
                serialized_name="connectorState",
            )
            connector_basic_info.connector_type = AAZStrType(
                serialized_name="connectorType",
            )

            connector_service_type_info = cls._schema_on_200.value.Element.properties.connector_service_type_info
            connector_service_type_info.connector_service_type = AAZStrType(
                serialized_name="connectorServiceType",
                flags={"required": True},
            )

            disc_azure_blob_storage_sink_connector = cls._schema_on_200.value.Element.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureBlobStorageSinkConnector")
            disc_azure_blob_storage_sink_connector.storage_account_key = AAZStrType(
                serialized_name="storageAccountKey",
            )
            disc_azure_blob_storage_sink_connector.storage_account_name = AAZStrType(
                serialized_name="storageAccountName",
            )
            disc_azure_blob_storage_sink_connector.storage_container_name = AAZStrType(
                serialized_name="storageContainerName",
            )

            disc_azure_blob_storage_source_connector = cls._schema_on_200.value.Element.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureBlobStorageSourceConnector")
            disc_azure_blob_storage_source_connector.storage_account_key = AAZStrType(
                serialized_name="storageAccountKey",
                flags={"secret": True},
            )
            disc_azure_blob_storage_source_connector.storage_account_name = AAZStrType(
                serialized_name="storageAccountName",
            )
            disc_azure_blob_storage_source_connector.storage_container_name = AAZStrType(
                serialized_name="storageContainerName",
            )

            disc_azure_cosmos_db_sink_connector = cls._schema_on_200.value.Element.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureCosmosDBSinkConnector")
            disc_azure_cosmos_db_sink_connector.cosmos_connection_endpoint = AAZStrType(
                serialized_name="cosmosConnectionEndpoint",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_containers_topic_mapping = AAZStrType(
                serialized_name="cosmosContainersTopicMapping",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_database_name = AAZStrType(
                serialized_name="cosmosDatabaseName",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_id_strategy = AAZStrType(
                serialized_name="cosmosIdStrategy",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_master_key = AAZStrType(
                serialized_name="cosmosMasterKey",
            )

            disc_azure_cosmos_db_source_connector = cls._schema_on_200.value.Element.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureCosmosDBSourceConnector")
            disc_azure_cosmos_db_source_connector.cosmos_connection_endpoint = AAZStrType(
                serialized_name="cosmosConnectionEndpoint",
            )
            disc_azure_cosmos_db_source_connector.cosmos_containers_topic_mapping = AAZStrType(
                serialized_name="cosmosContainersTopicMapping",
            )
            disc_azure_cosmos_db_source_connector.cosmos_database_name = AAZStrType(
                serialized_name="cosmosDatabaseName",
            )
            disc_azure_cosmos_db_source_connector.cosmos_master_key = AAZStrType(
                serialized_name="cosmosMasterKey",
            )
            disc_azure_cosmos_db_source_connector.cosmos_message_key_enabled = AAZBoolType(
                serialized_name="cosmosMessageKeyEnabled",
            )
            disc_azure_cosmos_db_source_connector.cosmos_message_key_field = AAZStrType(
                serialized_name="cosmosMessageKeyField",
            )

            disc_azure_synapse_analytics_sink_connector = cls._schema_on_200.value.Element.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureSynapseAnalyticsSinkConnector")
            disc_azure_synapse_analytics_sink_connector.synapse_sql_database_name = AAZStrType(
                serialized_name="synapseSqlDatabaseName",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_password = AAZStrType(
                serialized_name="synapseSqlPassword",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_server_name = AAZStrType(
                serialized_name="synapseSqlServerName",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_user = AAZStrType(
                serialized_name="synapseSqlUser",
            )

            partner_connector_info = cls._schema_on_200.value.Element.properties.partner_connector_info
            partner_connector_info.partner_connector_type = AAZStrType(
                serialized_name="partnerConnectorType",
                flags={"required": True},
            )

            disc_kafka_azure_blob_storage_sink = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSink")
            disc_kafka_azure_blob_storage_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_blob_storage_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_blob_storage_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_blob_storage_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_blob_storage_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_blob_storage_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_blob_storage_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_blob_storage_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_blob_storage_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_blob_storage_sink.topics = AAZListType()
            disc_kafka_azure_blob_storage_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSink").topics
            topics.Element = AAZStrType()

            disc_kafka_azure_blob_storage_source = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSource")
            disc_kafka_azure_blob_storage_source.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_blob_storage_source.api_secret = AAZStrType(
                serialized_name="apiSecret",
                flags={"secret": True},
            )
            disc_kafka_azure_blob_storage_source.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_blob_storage_source.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_blob_storage_source.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_blob_storage_source.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_blob_storage_source.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_blob_storage_source.topic_regex = AAZStrType(
                serialized_name="topicRegex",
            )
            disc_kafka_azure_blob_storage_source.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            disc_kafka_azure_cosmos_db_sink = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSink")
            disc_kafka_azure_cosmos_db_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_cosmos_db_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_cosmos_db_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_cosmos_db_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_cosmos_db_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_cosmos_db_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_cosmos_db_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_cosmos_db_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_cosmos_db_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_cosmos_db_sink.topics = AAZListType()
            disc_kafka_azure_cosmos_db_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSink").topics
            topics.Element = AAZStrType()

            disc_kafka_azure_cosmos_db_source = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSource")
            disc_kafka_azure_cosmos_db_source.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_cosmos_db_source.api_secret = AAZStrType(
                serialized_name="apiSecret",
                flags={"secret": True},
            )
            disc_kafka_azure_cosmos_db_source.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_cosmos_db_source.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_cosmos_db_source.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_cosmos_db_source.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_cosmos_db_source.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_cosmos_db_source.topic_regex = AAZStrType(
                serialized_name="topicRegex",
            )
            disc_kafka_azure_cosmos_db_source.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            disc_kafka_azure_synapse_analytics_sink = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureSynapseAnalyticsSink")
            disc_kafka_azure_synapse_analytics_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_synapse_analytics_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_synapse_analytics_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_synapse_analytics_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_synapse_analytics_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_synapse_analytics_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_synapse_analytics_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_synapse_analytics_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_synapse_analytics_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_synapse_analytics_sink.topics = AAZListType()
            disc_kafka_azure_synapse_analytics_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200.value.Element.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureSynapseAnalyticsSink").topics
            topics.Element = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
