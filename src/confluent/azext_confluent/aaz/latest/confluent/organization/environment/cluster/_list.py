# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confluent organization environment cluster list",
)
class List(AAZCommand):
    """List of all the clusters in a environment
    """

    _aaz_info = {
        "version": "2024-02-13",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}/clusters", "2024-02-13"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.environment_id = AAZStrArg(
            options=["--environment-id"],
            help="Confluent environment id",
            required=True,
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            options=["--resource-group"],
            help="Resource Group Name",
            required=True,
        )
        _args_schema.page_size = AAZIntArg(
            options=["--page-size"],
            help="Pagination size",
        )
        _args_schema.page_token = AAZStrArg(
            options=["--page-token"],
            help="An opaque pagination token to fetch the next set of records",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationListClusters(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class OrganizationListClusters(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "pageSize", self.ctx.args.page_size,
                ),
                **self.serialize_query_param(
                    "pageToken", self.ctx.args.page_token,
                ),
                **self.serialize_query_param(
                    "api-version", "2024-02-13",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType()
            _element.kind = AAZStrType()
            _element.name = AAZStrType()
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.metadata = AAZObjectType()
            properties.spec = AAZObjectType()
            properties.status = AAZObjectType()

            metadata = cls._schema_on_200.value.Element.properties.metadata
            metadata.created_timestamp = AAZStrType(
                serialized_name="createdTimestamp",
            )
            metadata.deleted_timestamp = AAZStrType(
                serialized_name="deletedTimestamp",
            )
            metadata.resource_name = AAZStrType(
                serialized_name="resourceName",
            )
            metadata.self = AAZStrType()
            metadata.updated_timestamp = AAZStrType(
                serialized_name="updatedTimestamp",
            )

            spec = cls._schema_on_200.value.Element.properties.spec
            spec.api_endpoint = AAZStrType(
                serialized_name="apiEndpoint",
            )
            spec.availability = AAZStrType()
            spec.byok = AAZObjectType()
            spec.cloud = AAZStrType()
            spec.config = AAZObjectType()
            spec.environment = AAZObjectType()
            _ListHelper._build_schema_sc_cluster_network_environment_entity_read(spec.environment)
            spec.http_endpoint = AAZStrType(
                serialized_name="httpEndpoint",
            )
            spec.kafka_bootstrap_endpoint = AAZStrType(
                serialized_name="kafkaBootstrapEndpoint",
            )
            spec.name = AAZStrType()
            spec.network = AAZObjectType()
            _ListHelper._build_schema_sc_cluster_network_environment_entity_read(spec.network)
            spec.region = AAZStrType()
            spec.zone = AAZStrType()

            byok = cls._schema_on_200.value.Element.properties.spec.byok
            byok.id = AAZStrType()
            byok.related = AAZStrType()
            byok.resource_name = AAZStrType(
                serialized_name="resourceName",
            )

            config = cls._schema_on_200.value.Element.properties.spec.config
            config.kind = AAZStrType()

            status = cls._schema_on_200.value.Element.properties.status
            status.cku = AAZIntType()
            status.phase = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_sc_cluster_network_environment_entity_read = None

    @classmethod
    def _build_schema_sc_cluster_network_environment_entity_read(cls, _schema):
        if cls._schema_sc_cluster_network_environment_entity_read is not None:
            _schema.environment = cls._schema_sc_cluster_network_environment_entity_read.environment
            _schema.id = cls._schema_sc_cluster_network_environment_entity_read.id
            _schema.related = cls._schema_sc_cluster_network_environment_entity_read.related
            _schema.resource_name = cls._schema_sc_cluster_network_environment_entity_read.resource_name
            return

        cls._schema_sc_cluster_network_environment_entity_read = _schema_sc_cluster_network_environment_entity_read = AAZObjectType()

        sc_cluster_network_environment_entity_read = _schema_sc_cluster_network_environment_entity_read
        sc_cluster_network_environment_entity_read.environment = AAZStrType()
        sc_cluster_network_environment_entity_read.id = AAZStrType()
        sc_cluster_network_environment_entity_read.related = AAZStrType()
        sc_cluster_network_environment_entity_read.resource_name = AAZStrType(
            serialized_name="resourceName",
        )

        _schema.environment = cls._schema_sc_cluster_network_environment_entity_read.environment
        _schema.id = cls._schema_sc_cluster_network_environment_entity_read.id
        _schema.related = cls._schema_sc_cluster_network_environment_entity_read.related
        _schema.resource_name = cls._schema_sc_cluster_network_environment_entity_read.resource_name


__all__ = ["List"]
