# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confluent organization environment cluster connector create",
)
class Create(AAZCommand):
    """Create Confluent connector by name.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}/clusters/{}/connectors/{}", "2024-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_id = AAZStrArg(
            options=["--cluster-id"],
            help="Confluent kafka or schema registry cluster id",
            required=True,
        )
        _args_schema.connector_name = AAZStrArg(
            options=["-n", "--name", "--connector-name"],
            help="Confluent connector name",
            required=True,
        )
        _args_schema.environment_id = AAZStrArg(
            options=["--environment-id"],
            help="Confluent environment ID.",
            required=True,
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.connector_basic_info = AAZObjectArg(
            options=["--connector-basic-info"],
            arg_group="Properties",
            help="Connector Info Base",
        )
        _args_schema.connector_service_type_info = AAZObjectArg(
            options=["--connector-service-type-info"],
            arg_group="Properties",
            help="Connector Service type info base properties.",
        )
        _args_schema.partner_connector_info = AAZObjectArg(
            options=["--partner-connector-info"],
            arg_group="Properties",
            help="The connection information consumed by applications.",
        )

        connector_basic_info = cls._args_schema.connector_basic_info
        connector_basic_info.connector_class = AAZStrArg(
            options=["connector-class"],
            help="Connector Class",
            enum={"AZUREBLOBSINK": "AZUREBLOBSINK", "AZUREBLOBSOURCE": "AZUREBLOBSOURCE"},
        )
        connector_basic_info.connector_id = AAZStrArg(
            options=["connector-id"],
            help="Connector Id",
        )
        connector_basic_info.connector_name = AAZStrArg(
            options=["connector-name"],
            help="Connector Name",
        )
        connector_basic_info.connector_state = AAZStrArg(
            options=["connector-state"],
            help="Connector Status",
            enum={"FAILED": "FAILED", "PAUSED": "PAUSED", "PROVISIONING": "PROVISIONING", "RUNNING": "RUNNING"},
        )
        connector_basic_info.connector_type = AAZStrArg(
            options=["connector-type"],
            help="Connector Type",
            enum={"SINK": "SINK", "SOURCE": "SOURCE"},
        )

        connector_service_type_info = cls._args_schema.connector_service_type_info
        connector_service_type_info.azure_blob_storage_sink_connector = AAZObjectArg(
            options=["azure-blob-storage-sink-connector"],
        )
        connector_service_type_info.azure_blob_storage_source_connector = AAZObjectArg(
            options=["azure-blob-storage-source-connector"],
        )
        connector_service_type_info.azure_cosmos_db_sink_connector = AAZObjectArg(
            options=["azure-cosmos-db-sink-connector"],
        )
        connector_service_type_info.azure_cosmos_db_source_connector = AAZObjectArg(
            options=["azure-cosmos-db-source-connector"],
        )
        connector_service_type_info.azure_synapse_analytics_sink_connector = AAZObjectArg(
            options=["azure-synapse-analytics-sink-connector"],
        )

        azure_blob_storage_sink_connector = cls._args_schema.connector_service_type_info.azure_blob_storage_sink_connector
        azure_blob_storage_sink_connector.storage_account_key = AAZStrArg(
            options=["storage-account-key"],
            help="Azure Blob Storage Account Key",
        )
        azure_blob_storage_sink_connector.storage_account_name = AAZStrArg(
            options=["storage-account-name"],
            help="Azure Blob Storage Account Name",
        )
        azure_blob_storage_sink_connector.storage_container_name = AAZStrArg(
            options=["storage-container-name"],
            help="Azure Blob Storage Account Container Name",
        )

        azure_blob_storage_source_connector = cls._args_schema.connector_service_type_info.azure_blob_storage_source_connector
        azure_blob_storage_source_connector.storage_account_key = AAZStrArg(
            options=["storage-account-key"],
            help="Azure Blob Storage Account Key",
        )
        azure_blob_storage_source_connector.storage_account_name = AAZStrArg(
            options=["storage-account-name"],
            help="Azure Blob Storage Account Name",
        )
        azure_blob_storage_source_connector.storage_container_name = AAZStrArg(
            options=["storage-container-name"],
            help="Azure Blob Storage Account Container Name",
        )

        azure_cosmos_db_sink_connector = cls._args_schema.connector_service_type_info.azure_cosmos_db_sink_connector
        azure_cosmos_db_sink_connector.cosmos_connection_endpoint = AAZStrArg(
            options=["cosmos-connection-endpoint"],
            help="Azure Cosmos Database Connection Endpoint",
        )
        azure_cosmos_db_sink_connector.cosmos_containers_topic_mapping = AAZStrArg(
            options=["cosmos-containers-topic-mapping"],
            help="Azure Cosmos Database Containers Topic Mapping",
        )
        azure_cosmos_db_sink_connector.cosmos_database_name = AAZStrArg(
            options=["cosmos-database-name"],
            help="Azure Cosmos Database Name",
        )
        azure_cosmos_db_sink_connector.cosmos_id_strategy = AAZStrArg(
            options=["cosmos-id-strategy"],
            help="Azure Cosmos Database Id Strategy",
        )
        azure_cosmos_db_sink_connector.cosmos_master_key = AAZStrArg(
            options=["cosmos-master-key"],
            help="Azure Cosmos Database Master Key",
        )

        azure_cosmos_db_source_connector = cls._args_schema.connector_service_type_info.azure_cosmos_db_source_connector
        azure_cosmos_db_source_connector.cosmos_connection_endpoint = AAZStrArg(
            options=["cosmos-connection-endpoint"],
            help="Azure Cosmos Database Connection Endpoint",
        )
        azure_cosmos_db_source_connector.cosmos_containers_topic_mapping = AAZStrArg(
            options=["cosmos-containers-topic-mapping"],
            help="Azure Cosmos Database Containers Topic Mapping",
        )
        azure_cosmos_db_source_connector.cosmos_database_name = AAZStrArg(
            options=["cosmos-database-name"],
            help="Azure Cosmos Database Name",
        )
        azure_cosmos_db_source_connector.cosmos_master_key = AAZStrArg(
            options=["cosmos-master-key"],
            help="Azure Cosmos Database Master Key",
        )
        azure_cosmos_db_source_connector.cosmos_message_key_enabled = AAZBoolArg(
            options=["cosmos-message-key-enabled"],
            help="Azure Cosmos Database Message Key Enabled",
        )
        azure_cosmos_db_source_connector.cosmos_message_key_field = AAZStrArg(
            options=["cosmos-message-key-field"],
            help="Azure Cosmos Database Message Key Field",
        )

        azure_synapse_analytics_sink_connector = cls._args_schema.connector_service_type_info.azure_synapse_analytics_sink_connector
        azure_synapse_analytics_sink_connector.synapse_sql_database_name = AAZStrArg(
            options=["synapse-sql-database-name"],
            help="Azure Synapse Dedicated SQL Pool Database Name",
        )
        azure_synapse_analytics_sink_connector.synapse_sql_password = AAZStrArg(
            options=["synapse-sql-password"],
            help="Azure Synapse SQL login details",
        )
        azure_synapse_analytics_sink_connector.synapse_sql_server_name = AAZStrArg(
            options=["synapse-sql-server-name"],
            help="Azure Synapse Analytics SQL Server Name",
        )
        azure_synapse_analytics_sink_connector.synapse_sql_user = AAZStrArg(
            options=["synapse-sql-user"],
            help="Azure Synapse SQL login details",
        )

        partner_connector_info = cls._args_schema.partner_connector_info
        partner_connector_info.kafka_azure_blob_storage_sink = AAZObjectArg(
            options=["kafka-azure-blob-storage-sink"],
        )
        partner_connector_info.kafka_azure_blob_storage_source = AAZObjectArg(
            options=["kafka-azure-blob-storage-source"],
        )
        partner_connector_info.kafka_azure_cosmos_db_sink = AAZObjectArg(
            options=["kafka-azure-cosmos-db-sink"],
        )
        partner_connector_info.kafka_azure_cosmos_db_source = AAZObjectArg(
            options=["kafka-azure-cosmos-db-source"],
        )
        partner_connector_info.kafka_azure_synapse_analytics_sink = AAZObjectArg(
            options=["kafka-azure-synapse-analytics-sink"],
        )

        kafka_azure_blob_storage_sink = cls._args_schema.partner_connector_info.kafka_azure_blob_storage_sink
        kafka_azure_blob_storage_sink.api_key = AAZStrArg(
            options=["api-key"],
            help="Kafka API Key",
        )
        kafka_azure_blob_storage_sink.api_secret = AAZStrArg(
            options=["api-secret"],
            help="Kafka API Key Secret",
        )
        kafka_azure_blob_storage_sink.auth_type = AAZStrArg(
            options=["auth-type"],
            help="Kafka Auth Type",
            enum={"KAFKA_API_KEY": "KAFKA_API_KEY", "SERVICE_ACCOUNT": "SERVICE_ACCOUNT"},
        )
        kafka_azure_blob_storage_sink.flush_size = AAZStrArg(
            options=["flush-size"],
            help="Flush size",
        )
        kafka_azure_blob_storage_sink.input_format = AAZStrArg(
            options=["input-format"],
            help="Kafka Input Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_blob_storage_sink.max_tasks = AAZStrArg(
            options=["max-tasks"],
            help="Maximum Tasks",
        )
        kafka_azure_blob_storage_sink.output_format = AAZStrArg(
            options=["output-format"],
            help="Kafka Output Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_blob_storage_sink.service_account_id = AAZStrArg(
            options=["service-account-id"],
            help="Kafka Service Account Id",
        )
        kafka_azure_blob_storage_sink.time_interval = AAZStrArg(
            options=["time-interval"],
            help="Time Interval",
        )
        kafka_azure_blob_storage_sink.topics = AAZListArg(
            options=["topics"],
            help="Kafka topics list",
        )
        kafka_azure_blob_storage_sink.topics_dir = AAZStrArg(
            options=["topics-dir"],
            help="Kafka topics directory",
        )

        topics = cls._args_schema.partner_connector_info.kafka_azure_blob_storage_sink.topics
        topics.Element = AAZStrArg()

        kafka_azure_blob_storage_source = cls._args_schema.partner_connector_info.kafka_azure_blob_storage_source
        kafka_azure_blob_storage_source.api_key = AAZStrArg(
            options=["api-key"],
            help="Kafka API Key",
        )
        kafka_azure_blob_storage_source.api_secret = AAZStrArg(
            options=["api-secret"],
            help="Kafka API Secret",
        )
        kafka_azure_blob_storage_source.auth_type = AAZStrArg(
            options=["auth-type"],
            help="Kafka Auth Type",
            enum={"KAFKA_API_KEY": "KAFKA_API_KEY", "SERVICE_ACCOUNT": "SERVICE_ACCOUNT"},
        )
        kafka_azure_blob_storage_source.input_format = AAZStrArg(
            options=["input-format"],
            help="Kafka Input Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_blob_storage_source.max_tasks = AAZStrArg(
            options=["max-tasks"],
            help="Maximum Tasks",
        )
        kafka_azure_blob_storage_source.output_format = AAZStrArg(
            options=["output-format"],
            help="Kafka Output Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_blob_storage_source.service_account_id = AAZStrArg(
            options=["service-account-id"],
            help="Kafka Service Account Id",
        )
        kafka_azure_blob_storage_source.topic_regex = AAZStrArg(
            options=["topic-regex"],
            help="Kafka topics Regex pattern",
        )
        kafka_azure_blob_storage_source.topics_dir = AAZStrArg(
            options=["topics-dir"],
            help="Kafka topics directory",
        )

        kafka_azure_cosmos_db_sink = cls._args_schema.partner_connector_info.kafka_azure_cosmos_db_sink
        kafka_azure_cosmos_db_sink.api_key = AAZStrArg(
            options=["api-key"],
            help="Kafka API Key",
        )
        kafka_azure_cosmos_db_sink.api_secret = AAZStrArg(
            options=["api-secret"],
            help="Kafka API Key Secret",
        )
        kafka_azure_cosmos_db_sink.auth_type = AAZStrArg(
            options=["auth-type"],
            help="Kafka Auth Type",
            enum={"KAFKA_API_KEY": "KAFKA_API_KEY", "SERVICE_ACCOUNT": "SERVICE_ACCOUNT"},
        )
        kafka_azure_cosmos_db_sink.flush_size = AAZStrArg(
            options=["flush-size"],
            help="Flush size",
        )
        kafka_azure_cosmos_db_sink.input_format = AAZStrArg(
            options=["input-format"],
            help="Kafka Input Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_cosmos_db_sink.max_tasks = AAZStrArg(
            options=["max-tasks"],
            help="Maximum Tasks",
        )
        kafka_azure_cosmos_db_sink.output_format = AAZStrArg(
            options=["output-format"],
            help="Kafka Output Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_cosmos_db_sink.service_account_id = AAZStrArg(
            options=["service-account-id"],
            help="Kafka Service Account Id",
        )
        kafka_azure_cosmos_db_sink.time_interval = AAZStrArg(
            options=["time-interval"],
            help="Time Interval",
        )
        kafka_azure_cosmos_db_sink.topics = AAZListArg(
            options=["topics"],
            help="Kafka topics list",
        )
        kafka_azure_cosmos_db_sink.topics_dir = AAZStrArg(
            options=["topics-dir"],
            help="Kafka topics directory",
        )

        topics = cls._args_schema.partner_connector_info.kafka_azure_cosmos_db_sink.topics
        topics.Element = AAZStrArg()

        kafka_azure_cosmos_db_source = cls._args_schema.partner_connector_info.kafka_azure_cosmos_db_source
        kafka_azure_cosmos_db_source.api_key = AAZStrArg(
            options=["api-key"],
            help="Kafka API Key",
        )
        kafka_azure_cosmos_db_source.api_secret = AAZStrArg(
            options=["api-secret"],
            help="Kafka API Secret",
        )
        kafka_azure_cosmos_db_source.auth_type = AAZStrArg(
            options=["auth-type"],
            help="Kafka Auth Type",
            enum={"KAFKA_API_KEY": "KAFKA_API_KEY", "SERVICE_ACCOUNT": "SERVICE_ACCOUNT"},
        )
        kafka_azure_cosmos_db_source.input_format = AAZStrArg(
            options=["input-format"],
            help="Kafka Input Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_cosmos_db_source.max_tasks = AAZStrArg(
            options=["max-tasks"],
            help="Maximum Tasks",
        )
        kafka_azure_cosmos_db_source.output_format = AAZStrArg(
            options=["output-format"],
            help="Kafka Output Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_cosmos_db_source.service_account_id = AAZStrArg(
            options=["service-account-id"],
            help="Kafka Service Account Id",
        )
        kafka_azure_cosmos_db_source.topic_regex = AAZStrArg(
            options=["topic-regex"],
            help="Kafka topics Regex pattern",
        )
        kafka_azure_cosmos_db_source.topics_dir = AAZStrArg(
            options=["topics-dir"],
            help="Kafka topics directory",
        )

        kafka_azure_synapse_analytics_sink = cls._args_schema.partner_connector_info.kafka_azure_synapse_analytics_sink
        kafka_azure_synapse_analytics_sink.api_key = AAZStrArg(
            options=["api-key"],
            help="Kafka API Key",
        )
        kafka_azure_synapse_analytics_sink.api_secret = AAZStrArg(
            options=["api-secret"],
            help="Kafka API Key Secret",
        )
        kafka_azure_synapse_analytics_sink.auth_type = AAZStrArg(
            options=["auth-type"],
            help="Kafka Auth Type",
            enum={"KAFKA_API_KEY": "KAFKA_API_KEY", "SERVICE_ACCOUNT": "SERVICE_ACCOUNT"},
        )
        kafka_azure_synapse_analytics_sink.flush_size = AAZStrArg(
            options=["flush-size"],
            help="Flush size",
        )
        kafka_azure_synapse_analytics_sink.input_format = AAZStrArg(
            options=["input-format"],
            help="Kafka Input Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_synapse_analytics_sink.max_tasks = AAZStrArg(
            options=["max-tasks"],
            help="Maximum Tasks",
        )
        kafka_azure_synapse_analytics_sink.output_format = AAZStrArg(
            options=["output-format"],
            help="Kafka Output Data Format Type",
            enum={"AVRO": "AVRO", "BYTES": "BYTES", "JSON": "JSON", "PROTOBUF": "PROTOBUF", "STRING": "STRING"},
        )
        kafka_azure_synapse_analytics_sink.service_account_id = AAZStrArg(
            options=["service-account-id"],
            help="Kafka Service Account Id",
        )
        kafka_azure_synapse_analytics_sink.time_interval = AAZStrArg(
            options=["time-interval"],
            help="Time Interval",
        )
        kafka_azure_synapse_analytics_sink.topics = AAZListArg(
            options=["topics"],
            help="Kafka topics list",
        )
        kafka_azure_synapse_analytics_sink.topics_dir = AAZStrArg(
            options=["topics-dir"],
            help="Kafka topics directory",
        )

        topics = cls._args_schema.partner_connector_info.kafka_azure_synapse_analytics_sink.topics
        topics.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ConnectorCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConnectorCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/connectors/{connectorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterId", self.ctx.args.cluster_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "connectorName", self.ctx.args.connector_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("connectorBasicInfo", AAZObjectType, ".connector_basic_info")
                properties.set_prop("connectorServiceTypeInfo", AAZObjectType, ".connector_service_type_info")
                properties.set_prop("partnerConnectorInfo", AAZObjectType, ".partner_connector_info")

            connector_basic_info = _builder.get(".properties.connectorBasicInfo")
            if connector_basic_info is not None:
                connector_basic_info.set_prop("connectorClass", AAZStrType, ".connector_class")
                connector_basic_info.set_prop("connectorId", AAZStrType, ".connector_id")
                connector_basic_info.set_prop("connectorName", AAZStrType, ".connector_name")
                connector_basic_info.set_prop("connectorState", AAZStrType, ".connector_state")
                connector_basic_info.set_prop("connectorType", AAZStrType, ".connector_type")

            connector_service_type_info = _builder.get(".properties.connectorServiceTypeInfo")
            if connector_service_type_info is not None:
                connector_service_type_info.set_const("connectorServiceType", "AzureBlobStorageSinkConnector", AAZStrType, ".azure_blob_storage_sink_connector", typ_kwargs={"flags": {"required": True}})
                connector_service_type_info.set_const("connectorServiceType", "AzureBlobStorageSourceConnector", AAZStrType, ".azure_blob_storage_source_connector", typ_kwargs={"flags": {"required": True}})
                connector_service_type_info.set_const("connectorServiceType", "AzureCosmosDBSinkConnector", AAZStrType, ".azure_cosmos_db_sink_connector", typ_kwargs={"flags": {"required": True}})
                connector_service_type_info.set_const("connectorServiceType", "AzureCosmosDBSourceConnector", AAZStrType, ".azure_cosmos_db_source_connector", typ_kwargs={"flags": {"required": True}})
                connector_service_type_info.set_const("connectorServiceType", "AzureSynapseAnalyticsSinkConnector", AAZStrType, ".azure_synapse_analytics_sink_connector", typ_kwargs={"flags": {"required": True}})
                connector_service_type_info.discriminate_by("connectorServiceType", "AzureBlobStorageSinkConnector")
                connector_service_type_info.discriminate_by("connectorServiceType", "AzureBlobStorageSourceConnector")
                connector_service_type_info.discriminate_by("connectorServiceType", "AzureCosmosDBSinkConnector")
                connector_service_type_info.discriminate_by("connectorServiceType", "AzureCosmosDBSourceConnector")
                connector_service_type_info.discriminate_by("connectorServiceType", "AzureSynapseAnalyticsSinkConnector")

            disc_azure_blob_storage_sink_connector = _builder.get(".properties.connectorServiceTypeInfo{connectorServiceType:AzureBlobStorageSinkConnector}")
            if disc_azure_blob_storage_sink_connector is not None:
                disc_azure_blob_storage_sink_connector.set_prop("storageAccountKey", AAZStrType, ".azure_blob_storage_sink_connector.storage_account_key")
                disc_azure_blob_storage_sink_connector.set_prop("storageAccountName", AAZStrType, ".azure_blob_storage_sink_connector.storage_account_name")
                disc_azure_blob_storage_sink_connector.set_prop("storageContainerName", AAZStrType, ".azure_blob_storage_sink_connector.storage_container_name")

            disc_azure_blob_storage_source_connector = _builder.get(".properties.connectorServiceTypeInfo{connectorServiceType:AzureBlobStorageSourceConnector}")
            if disc_azure_blob_storage_source_connector is not None:
                disc_azure_blob_storage_source_connector.set_prop("storageAccountKey", AAZStrType, ".azure_blob_storage_source_connector.storage_account_key", typ_kwargs={"flags": {"secret": True}})
                disc_azure_blob_storage_source_connector.set_prop("storageAccountName", AAZStrType, ".azure_blob_storage_source_connector.storage_account_name")
                disc_azure_blob_storage_source_connector.set_prop("storageContainerName", AAZStrType, ".azure_blob_storage_source_connector.storage_container_name")

            disc_azure_cosmos_db_sink_connector = _builder.get(".properties.connectorServiceTypeInfo{connectorServiceType:AzureCosmosDBSinkConnector}")
            if disc_azure_cosmos_db_sink_connector is not None:
                disc_azure_cosmos_db_sink_connector.set_prop("cosmosConnectionEndpoint", AAZStrType, ".azure_cosmos_db_sink_connector.cosmos_connection_endpoint")
                disc_azure_cosmos_db_sink_connector.set_prop("cosmosContainersTopicMapping", AAZStrType, ".azure_cosmos_db_sink_connector.cosmos_containers_topic_mapping")
                disc_azure_cosmos_db_sink_connector.set_prop("cosmosDatabaseName", AAZStrType, ".azure_cosmos_db_sink_connector.cosmos_database_name")
                disc_azure_cosmos_db_sink_connector.set_prop("cosmosIdStrategy", AAZStrType, ".azure_cosmos_db_sink_connector.cosmos_id_strategy")
                disc_azure_cosmos_db_sink_connector.set_prop("cosmosMasterKey", AAZStrType, ".azure_cosmos_db_sink_connector.cosmos_master_key")

            disc_azure_cosmos_db_source_connector = _builder.get(".properties.connectorServiceTypeInfo{connectorServiceType:AzureCosmosDBSourceConnector}")
            if disc_azure_cosmos_db_source_connector is not None:
                disc_azure_cosmos_db_source_connector.set_prop("cosmosConnectionEndpoint", AAZStrType, ".azure_cosmos_db_source_connector.cosmos_connection_endpoint")
                disc_azure_cosmos_db_source_connector.set_prop("cosmosContainersTopicMapping", AAZStrType, ".azure_cosmos_db_source_connector.cosmos_containers_topic_mapping")
                disc_azure_cosmos_db_source_connector.set_prop("cosmosDatabaseName", AAZStrType, ".azure_cosmos_db_source_connector.cosmos_database_name")
                disc_azure_cosmos_db_source_connector.set_prop("cosmosMasterKey", AAZStrType, ".azure_cosmos_db_source_connector.cosmos_master_key")
                disc_azure_cosmos_db_source_connector.set_prop("cosmosMessageKeyEnabled", AAZBoolType, ".azure_cosmos_db_source_connector.cosmos_message_key_enabled")
                disc_azure_cosmos_db_source_connector.set_prop("cosmosMessageKeyField", AAZStrType, ".azure_cosmos_db_source_connector.cosmos_message_key_field")

            disc_azure_synapse_analytics_sink_connector = _builder.get(".properties.connectorServiceTypeInfo{connectorServiceType:AzureSynapseAnalyticsSinkConnector}")
            if disc_azure_synapse_analytics_sink_connector is not None:
                disc_azure_synapse_analytics_sink_connector.set_prop("synapseSqlDatabaseName", AAZStrType, ".azure_synapse_analytics_sink_connector.synapse_sql_database_name")
                disc_azure_synapse_analytics_sink_connector.set_prop("synapseSqlPassword", AAZStrType, ".azure_synapse_analytics_sink_connector.synapse_sql_password")
                disc_azure_synapse_analytics_sink_connector.set_prop("synapseSqlServerName", AAZStrType, ".azure_synapse_analytics_sink_connector.synapse_sql_server_name")
                disc_azure_synapse_analytics_sink_connector.set_prop("synapseSqlUser", AAZStrType, ".azure_synapse_analytics_sink_connector.synapse_sql_user")

            partner_connector_info = _builder.get(".properties.partnerConnectorInfo")
            if partner_connector_info is not None:
                partner_connector_info.set_const("partnerConnectorType", "KafkaAzureBlobStorageSink", AAZStrType, ".kafka_azure_blob_storage_sink", typ_kwargs={"flags": {"required": True}})
                partner_connector_info.set_const("partnerConnectorType", "KafkaAzureBlobStorageSource", AAZStrType, ".kafka_azure_blob_storage_source", typ_kwargs={"flags": {"required": True}})
                partner_connector_info.set_const("partnerConnectorType", "KafkaAzureCosmosDBSink", AAZStrType, ".kafka_azure_cosmos_db_sink", typ_kwargs={"flags": {"required": True}})
                partner_connector_info.set_const("partnerConnectorType", "KafkaAzureCosmosDBSource", AAZStrType, ".kafka_azure_cosmos_db_source", typ_kwargs={"flags": {"required": True}})
                partner_connector_info.set_const("partnerConnectorType", "KafkaAzureSynapseAnalyticsSink", AAZStrType, ".kafka_azure_synapse_analytics_sink", typ_kwargs={"flags": {"required": True}})
                partner_connector_info.discriminate_by("partnerConnectorType", "KafkaAzureBlobStorageSink")
                partner_connector_info.discriminate_by("partnerConnectorType", "KafkaAzureBlobStorageSource")
                partner_connector_info.discriminate_by("partnerConnectorType", "KafkaAzureCosmosDBSink")
                partner_connector_info.discriminate_by("partnerConnectorType", "KafkaAzureCosmosDBSource")
                partner_connector_info.discriminate_by("partnerConnectorType", "KafkaAzureSynapseAnalyticsSink")

            disc_kafka_azure_blob_storage_sink = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureBlobStorageSink}")
            if disc_kafka_azure_blob_storage_sink is not None:
                disc_kafka_azure_blob_storage_sink.set_prop("apiKey", AAZStrType, ".kafka_azure_blob_storage_sink.api_key")
                disc_kafka_azure_blob_storage_sink.set_prop("apiSecret", AAZStrType, ".kafka_azure_blob_storage_sink.api_secret")
                disc_kafka_azure_blob_storage_sink.set_prop("authType", AAZStrType, ".kafka_azure_blob_storage_sink.auth_type")
                disc_kafka_azure_blob_storage_sink.set_prop("flushSize", AAZStrType, ".kafka_azure_blob_storage_sink.flush_size")
                disc_kafka_azure_blob_storage_sink.set_prop("inputFormat", AAZStrType, ".kafka_azure_blob_storage_sink.input_format")
                disc_kafka_azure_blob_storage_sink.set_prop("maxTasks", AAZStrType, ".kafka_azure_blob_storage_sink.max_tasks")
                disc_kafka_azure_blob_storage_sink.set_prop("outputFormat", AAZStrType, ".kafka_azure_blob_storage_sink.output_format")
                disc_kafka_azure_blob_storage_sink.set_prop("serviceAccountId", AAZStrType, ".kafka_azure_blob_storage_sink.service_account_id")
                disc_kafka_azure_blob_storage_sink.set_prop("timeInterval", AAZStrType, ".kafka_azure_blob_storage_sink.time_interval")
                disc_kafka_azure_blob_storage_sink.set_prop("topics", AAZListType, ".kafka_azure_blob_storage_sink.topics")
                disc_kafka_azure_blob_storage_sink.set_prop("topicsDir", AAZStrType, ".kafka_azure_blob_storage_sink.topics_dir")

            topics = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureBlobStorageSink}.topics")
            if topics is not None:
                topics.set_elements(AAZStrType, ".")

            disc_kafka_azure_blob_storage_source = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureBlobStorageSource}")
            if disc_kafka_azure_blob_storage_source is not None:
                disc_kafka_azure_blob_storage_source.set_prop("apiKey", AAZStrType, ".kafka_azure_blob_storage_source.api_key")
                disc_kafka_azure_blob_storage_source.set_prop("apiSecret", AAZStrType, ".kafka_azure_blob_storage_source.api_secret", typ_kwargs={"flags": {"secret": True}})
                disc_kafka_azure_blob_storage_source.set_prop("authType", AAZStrType, ".kafka_azure_blob_storage_source.auth_type")
                disc_kafka_azure_blob_storage_source.set_prop("inputFormat", AAZStrType, ".kafka_azure_blob_storage_source.input_format")
                disc_kafka_azure_blob_storage_source.set_prop("maxTasks", AAZStrType, ".kafka_azure_blob_storage_source.max_tasks")
                disc_kafka_azure_blob_storage_source.set_prop("outputFormat", AAZStrType, ".kafka_azure_blob_storage_source.output_format")
                disc_kafka_azure_blob_storage_source.set_prop("serviceAccountId", AAZStrType, ".kafka_azure_blob_storage_source.service_account_id")
                disc_kafka_azure_blob_storage_source.set_prop("topicRegex", AAZStrType, ".kafka_azure_blob_storage_source.topic_regex")
                disc_kafka_azure_blob_storage_source.set_prop("topicsDir", AAZStrType, ".kafka_azure_blob_storage_source.topics_dir")

            disc_kafka_azure_cosmos_db_sink = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureCosmosDBSink}")
            if disc_kafka_azure_cosmos_db_sink is not None:
                disc_kafka_azure_cosmos_db_sink.set_prop("apiKey", AAZStrType, ".kafka_azure_cosmos_db_sink.api_key")
                disc_kafka_azure_cosmos_db_sink.set_prop("apiSecret", AAZStrType, ".kafka_azure_cosmos_db_sink.api_secret")
                disc_kafka_azure_cosmos_db_sink.set_prop("authType", AAZStrType, ".kafka_azure_cosmos_db_sink.auth_type")
                disc_kafka_azure_cosmos_db_sink.set_prop("flushSize", AAZStrType, ".kafka_azure_cosmos_db_sink.flush_size")
                disc_kafka_azure_cosmos_db_sink.set_prop("inputFormat", AAZStrType, ".kafka_azure_cosmos_db_sink.input_format")
                disc_kafka_azure_cosmos_db_sink.set_prop("maxTasks", AAZStrType, ".kafka_azure_cosmos_db_sink.max_tasks")
                disc_kafka_azure_cosmos_db_sink.set_prop("outputFormat", AAZStrType, ".kafka_azure_cosmos_db_sink.output_format")
                disc_kafka_azure_cosmos_db_sink.set_prop("serviceAccountId", AAZStrType, ".kafka_azure_cosmos_db_sink.service_account_id")
                disc_kafka_azure_cosmos_db_sink.set_prop("timeInterval", AAZStrType, ".kafka_azure_cosmos_db_sink.time_interval")
                disc_kafka_azure_cosmos_db_sink.set_prop("topics", AAZListType, ".kafka_azure_cosmos_db_sink.topics")
                disc_kafka_azure_cosmos_db_sink.set_prop("topicsDir", AAZStrType, ".kafka_azure_cosmos_db_sink.topics_dir")

            topics = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureCosmosDBSink}.topics")
            if topics is not None:
                topics.set_elements(AAZStrType, ".")

            disc_kafka_azure_cosmos_db_source = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureCosmosDBSource}")
            if disc_kafka_azure_cosmos_db_source is not None:
                disc_kafka_azure_cosmos_db_source.set_prop("apiKey", AAZStrType, ".kafka_azure_cosmos_db_source.api_key")
                disc_kafka_azure_cosmos_db_source.set_prop("apiSecret", AAZStrType, ".kafka_azure_cosmos_db_source.api_secret", typ_kwargs={"flags": {"secret": True}})
                disc_kafka_azure_cosmos_db_source.set_prop("authType", AAZStrType, ".kafka_azure_cosmos_db_source.auth_type")
                disc_kafka_azure_cosmos_db_source.set_prop("inputFormat", AAZStrType, ".kafka_azure_cosmos_db_source.input_format")
                disc_kafka_azure_cosmos_db_source.set_prop("maxTasks", AAZStrType, ".kafka_azure_cosmos_db_source.max_tasks")
                disc_kafka_azure_cosmos_db_source.set_prop("outputFormat", AAZStrType, ".kafka_azure_cosmos_db_source.output_format")
                disc_kafka_azure_cosmos_db_source.set_prop("serviceAccountId", AAZStrType, ".kafka_azure_cosmos_db_source.service_account_id")
                disc_kafka_azure_cosmos_db_source.set_prop("topicRegex", AAZStrType, ".kafka_azure_cosmos_db_source.topic_regex")
                disc_kafka_azure_cosmos_db_source.set_prop("topicsDir", AAZStrType, ".kafka_azure_cosmos_db_source.topics_dir")

            disc_kafka_azure_synapse_analytics_sink = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureSynapseAnalyticsSink}")
            if disc_kafka_azure_synapse_analytics_sink is not None:
                disc_kafka_azure_synapse_analytics_sink.set_prop("apiKey", AAZStrType, ".kafka_azure_synapse_analytics_sink.api_key")
                disc_kafka_azure_synapse_analytics_sink.set_prop("apiSecret", AAZStrType, ".kafka_azure_synapse_analytics_sink.api_secret")
                disc_kafka_azure_synapse_analytics_sink.set_prop("authType", AAZStrType, ".kafka_azure_synapse_analytics_sink.auth_type")
                disc_kafka_azure_synapse_analytics_sink.set_prop("flushSize", AAZStrType, ".kafka_azure_synapse_analytics_sink.flush_size")
                disc_kafka_azure_synapse_analytics_sink.set_prop("inputFormat", AAZStrType, ".kafka_azure_synapse_analytics_sink.input_format")
                disc_kafka_azure_synapse_analytics_sink.set_prop("maxTasks", AAZStrType, ".kafka_azure_synapse_analytics_sink.max_tasks")
                disc_kafka_azure_synapse_analytics_sink.set_prop("outputFormat", AAZStrType, ".kafka_azure_synapse_analytics_sink.output_format")
                disc_kafka_azure_synapse_analytics_sink.set_prop("serviceAccountId", AAZStrType, ".kafka_azure_synapse_analytics_sink.service_account_id")
                disc_kafka_azure_synapse_analytics_sink.set_prop("timeInterval", AAZStrType, ".kafka_azure_synapse_analytics_sink.time_interval")
                disc_kafka_azure_synapse_analytics_sink.set_prop("topics", AAZListType, ".kafka_azure_synapse_analytics_sink.topics")
                disc_kafka_azure_synapse_analytics_sink.set_prop("topicsDir", AAZStrType, ".kafka_azure_synapse_analytics_sink.topics_dir")

            topics = _builder.get(".properties.partnerConnectorInfo{partnerConnectorType:KafkaAzureSynapseAnalyticsSink}.topics")
            if topics is not None:
                topics.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.connector_basic_info = AAZObjectType(
                serialized_name="connectorBasicInfo",
            )
            properties.connector_service_type_info = AAZObjectType(
                serialized_name="connectorServiceTypeInfo",
            )
            properties.partner_connector_info = AAZObjectType(
                serialized_name="partnerConnectorInfo",
            )

            connector_basic_info = cls._schema_on_200_201.properties.connector_basic_info
            connector_basic_info.connector_class = AAZStrType(
                serialized_name="connectorClass",
            )
            connector_basic_info.connector_id = AAZStrType(
                serialized_name="connectorId",
            )
            connector_basic_info.connector_name = AAZStrType(
                serialized_name="connectorName",
            )
            connector_basic_info.connector_state = AAZStrType(
                serialized_name="connectorState",
            )
            connector_basic_info.connector_type = AAZStrType(
                serialized_name="connectorType",
            )

            connector_service_type_info = cls._schema_on_200_201.properties.connector_service_type_info
            connector_service_type_info.connector_service_type = AAZStrType(
                serialized_name="connectorServiceType",
                flags={"required": True},
            )

            disc_azure_blob_storage_sink_connector = cls._schema_on_200_201.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureBlobStorageSinkConnector")
            disc_azure_blob_storage_sink_connector.storage_account_key = AAZStrType(
                serialized_name="storageAccountKey",
            )
            disc_azure_blob_storage_sink_connector.storage_account_name = AAZStrType(
                serialized_name="storageAccountName",
            )
            disc_azure_blob_storage_sink_connector.storage_container_name = AAZStrType(
                serialized_name="storageContainerName",
            )

            disc_azure_blob_storage_source_connector = cls._schema_on_200_201.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureBlobStorageSourceConnector")
            disc_azure_blob_storage_source_connector.storage_account_key = AAZStrType(
                serialized_name="storageAccountKey",
                flags={"secret": True},
            )
            disc_azure_blob_storage_source_connector.storage_account_name = AAZStrType(
                serialized_name="storageAccountName",
            )
            disc_azure_blob_storage_source_connector.storage_container_name = AAZStrType(
                serialized_name="storageContainerName",
            )

            disc_azure_cosmos_db_sink_connector = cls._schema_on_200_201.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureCosmosDBSinkConnector")
            disc_azure_cosmos_db_sink_connector.cosmos_connection_endpoint = AAZStrType(
                serialized_name="cosmosConnectionEndpoint",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_containers_topic_mapping = AAZStrType(
                serialized_name="cosmosContainersTopicMapping",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_database_name = AAZStrType(
                serialized_name="cosmosDatabaseName",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_id_strategy = AAZStrType(
                serialized_name="cosmosIdStrategy",
            )
            disc_azure_cosmos_db_sink_connector.cosmos_master_key = AAZStrType(
                serialized_name="cosmosMasterKey",
            )

            disc_azure_cosmos_db_source_connector = cls._schema_on_200_201.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureCosmosDBSourceConnector")
            disc_azure_cosmos_db_source_connector.cosmos_connection_endpoint = AAZStrType(
                serialized_name="cosmosConnectionEndpoint",
            )
            disc_azure_cosmos_db_source_connector.cosmos_containers_topic_mapping = AAZStrType(
                serialized_name="cosmosContainersTopicMapping",
            )
            disc_azure_cosmos_db_source_connector.cosmos_database_name = AAZStrType(
                serialized_name="cosmosDatabaseName",
            )
            disc_azure_cosmos_db_source_connector.cosmos_master_key = AAZStrType(
                serialized_name="cosmosMasterKey",
            )
            disc_azure_cosmos_db_source_connector.cosmos_message_key_enabled = AAZBoolType(
                serialized_name="cosmosMessageKeyEnabled",
            )
            disc_azure_cosmos_db_source_connector.cosmos_message_key_field = AAZStrType(
                serialized_name="cosmosMessageKeyField",
            )

            disc_azure_synapse_analytics_sink_connector = cls._schema_on_200_201.properties.connector_service_type_info.discriminate_by("connector_service_type", "AzureSynapseAnalyticsSinkConnector")
            disc_azure_synapse_analytics_sink_connector.synapse_sql_database_name = AAZStrType(
                serialized_name="synapseSqlDatabaseName",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_password = AAZStrType(
                serialized_name="synapseSqlPassword",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_server_name = AAZStrType(
                serialized_name="synapseSqlServerName",
            )
            disc_azure_synapse_analytics_sink_connector.synapse_sql_user = AAZStrType(
                serialized_name="synapseSqlUser",
            )

            partner_connector_info = cls._schema_on_200_201.properties.partner_connector_info
            partner_connector_info.partner_connector_type = AAZStrType(
                serialized_name="partnerConnectorType",
                flags={"required": True},
            )

            disc_kafka_azure_blob_storage_sink = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSink")
            disc_kafka_azure_blob_storage_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_blob_storage_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_blob_storage_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_blob_storage_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_blob_storage_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_blob_storage_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_blob_storage_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_blob_storage_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_blob_storage_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_blob_storage_sink.topics = AAZListType()
            disc_kafka_azure_blob_storage_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSink").topics
            topics.Element = AAZStrType()

            disc_kafka_azure_blob_storage_source = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureBlobStorageSource")
            disc_kafka_azure_blob_storage_source.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_blob_storage_source.api_secret = AAZStrType(
                serialized_name="apiSecret",
                flags={"secret": True},
            )
            disc_kafka_azure_blob_storage_source.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_blob_storage_source.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_blob_storage_source.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_blob_storage_source.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_blob_storage_source.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_blob_storage_source.topic_regex = AAZStrType(
                serialized_name="topicRegex",
            )
            disc_kafka_azure_blob_storage_source.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            disc_kafka_azure_cosmos_db_sink = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSink")
            disc_kafka_azure_cosmos_db_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_cosmos_db_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_cosmos_db_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_cosmos_db_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_cosmos_db_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_cosmos_db_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_cosmos_db_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_cosmos_db_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_cosmos_db_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_cosmos_db_sink.topics = AAZListType()
            disc_kafka_azure_cosmos_db_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSink").topics
            topics.Element = AAZStrType()

            disc_kafka_azure_cosmos_db_source = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureCosmosDBSource")
            disc_kafka_azure_cosmos_db_source.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_cosmos_db_source.api_secret = AAZStrType(
                serialized_name="apiSecret",
                flags={"secret": True},
            )
            disc_kafka_azure_cosmos_db_source.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_cosmos_db_source.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_cosmos_db_source.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_cosmos_db_source.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_cosmos_db_source.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_cosmos_db_source.topic_regex = AAZStrType(
                serialized_name="topicRegex",
            )
            disc_kafka_azure_cosmos_db_source.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            disc_kafka_azure_synapse_analytics_sink = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureSynapseAnalyticsSink")
            disc_kafka_azure_synapse_analytics_sink.api_key = AAZStrType(
                serialized_name="apiKey",
            )
            disc_kafka_azure_synapse_analytics_sink.api_secret = AAZStrType(
                serialized_name="apiSecret",
            )
            disc_kafka_azure_synapse_analytics_sink.auth_type = AAZStrType(
                serialized_name="authType",
            )
            disc_kafka_azure_synapse_analytics_sink.flush_size = AAZStrType(
                serialized_name="flushSize",
            )
            disc_kafka_azure_synapse_analytics_sink.input_format = AAZStrType(
                serialized_name="inputFormat",
            )
            disc_kafka_azure_synapse_analytics_sink.max_tasks = AAZStrType(
                serialized_name="maxTasks",
            )
            disc_kafka_azure_synapse_analytics_sink.output_format = AAZStrType(
                serialized_name="outputFormat",
            )
            disc_kafka_azure_synapse_analytics_sink.service_account_id = AAZStrType(
                serialized_name="serviceAccountId",
            )
            disc_kafka_azure_synapse_analytics_sink.time_interval = AAZStrType(
                serialized_name="timeInterval",
            )
            disc_kafka_azure_synapse_analytics_sink.topics = AAZListType()
            disc_kafka_azure_synapse_analytics_sink.topics_dir = AAZStrType(
                serialized_name="topicsDir",
            )

            topics = cls._schema_on_200_201.properties.partner_connector_info.discriminate_by("partner_connector_type", "KafkaAzureSynapseAnalyticsSink").topics
            topics.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
