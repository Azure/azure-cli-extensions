# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confluent organization environment cluster topic show",
)
class Show(AAZCommand):
    """Get Confluent topics by name.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confluent/organizations/{}/environments/{}/clusters/{}/topics/{}", "2024-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_id = AAZStrArg(
            options=["--cluster-id"],
            help="Confluent kafka or schema registry cluster id",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.environment_id = AAZStrArg(
            options=["--environment-id"],
            help="Confluent environment ID.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Organization resource name",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Resource group.",
            required=True,
        )
        _args_schema.topic_name = AAZStrArg(
            options=["-n", "--name", "--topic-name"],
            help="Confluent kafka or schema registry topic name",
            required=True,
            id_part="child_name_3",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.TopicsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class TopicsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/environments/{environmentId}/clusters/{clusterId}/topics/{topicName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterId", self.ctx.args.cluster_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "environmentId", self.ctx.args.environment_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.configs = AAZObjectType()
            _ShowHelper._build_schema_topics_related_link_read(properties.configs)
            properties.input_configs = AAZListType(
                serialized_name="inputConfigs",
            )
            properties.kind = AAZStrType()
            properties.metadata = AAZObjectType()
            properties.partitions = AAZObjectType()
            _ShowHelper._build_schema_topics_related_link_read(properties.partitions)
            properties.partitions_count = AAZStrType(
                serialized_name="partitionsCount",
            )
            properties.partitions_reassignments = AAZObjectType(
                serialized_name="partitionsReassignments",
            )
            _ShowHelper._build_schema_topics_related_link_read(properties.partitions_reassignments)
            properties.replication_factor = AAZStrType(
                serialized_name="replicationFactor",
            )
            properties.topic_id = AAZStrType(
                serialized_name="topicId",
            )

            input_configs = cls._schema_on_200.properties.input_configs
            input_configs.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.input_configs.Element
            _element.name = AAZStrType()
            _element.value = AAZStrType()

            metadata = cls._schema_on_200.properties.metadata
            metadata.resource_name = AAZStrType(
                serialized_name="resourceName",
            )
            metadata.self = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_topics_related_link_read = None

    @classmethod
    def _build_schema_topics_related_link_read(cls, _schema):
        if cls._schema_topics_related_link_read is not None:
            _schema.related = cls._schema_topics_related_link_read.related
            return

        cls._schema_topics_related_link_read = _schema_topics_related_link_read = AAZObjectType()

        topics_related_link_read = _schema_topics_related_link_read
        topics_related_link_read.related = AAZStrType()

        _schema.related = cls._schema_topics_related_link_read.related


__all__ = ["Show"]
