# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_terms_list
from .example_steps import step_organization_create
from .example_steps import step_organization_show
from .example_steps import step_organization_list
from .example_steps import step_organization_list2
from .example_steps import step_organization_update
from .example_steps import step_organization_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_terms_list(test, rg, checks=[
        test.greater_than('length(@)', 1)
    ])
    step_organization_create(test, rg, checks=[
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("userDetail.emailAddress", "contoso@microsoft.com", case_sensitive=False),
        test.check("userDetail.firstName", "contoso", case_sensitive=False),
        test.check("userDetail.lastName", "zhou", case_sensitive=False),
        test.check("tags.environment", "Dev", case_sensitive=False),
        test.check("name", "{myOrganization}", case_sensitive=False),
    ])
    step_organization_show(test, rg, checks=[
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("userDetail.emailAddress", "contoso@microsoft.com", case_sensitive=False),
        test.check("userDetail.firstName", "contoso", case_sensitive=False),
        test.check("userDetail.lastName", "zhou", case_sensitive=False),
        test.check("tags.environment", "Dev", case_sensitive=False),
        test.check("name", "{myOrganization}", case_sensitive=False),
    ])
    step_organization_list(test, rg, checks=[
        test.greater_than('length(@)', 0),
    ])
    step_organization_list(test, "", checks=[
        test.greater_than('length(@)', 0),
    ])
    step_organization_list2(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_organization_update(test, rg, checks=[
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("userDetail.emailAddress", "contoso@microsoft.com", case_sensitive=False),
        test.check("userDetail.firstName", "contoso", case_sensitive=False),
        test.check("userDetail.lastName", "zhou", case_sensitive=False),
        test.check("name", "{myOrganization}", case_sensitive=False),
        test.check("tags.client", "dev-client", case_sensitive=False),
    ])
    step_organization_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class ConfluentScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(ConfluentScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myOrganization': 'myOrganization',
        })


    @ResourceGroupPreparer(name_prefix='clitestconfluent_myResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_confluent_Scenario(self, rg):
        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()
