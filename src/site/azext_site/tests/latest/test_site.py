# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *


class SiteScenario(ScenarioTest):

    @ResourceGroupPreparer(name_prefix="cli_test_site_", location="eastus")
    def test_edge_site_crud(self):
        self.kwargs.update({
            "city": "San Francisco",
            "country": "US",
            "code": "94107",
            "state": "CA",
            "address1": "16 TOWNSEND ST",
            "address2": "UNIT 1"
        })
        #Create Site at resource group scope
        self.cmd(
            "az site create --site-name TestSiteName --resource-group {rg} "
            "--display-name 'Test Site Display' --description 'Test Site' --labels key1='value1' key2='value2' "
            "--street-address1='{address1}' --street-address2='{address2}' "
            "--city='{city}' --state-or-province={state} --country={country} --postal-code={code} ",
            checks=[
                self.check("name", "TestSiteName"),
                self.check("type", "microsoft.edge/sites"),
                self.check("properties.displayName", "Test Site Display"),
                self.check("properties.description", "Test Site"),
                self.check("properties.labels.key1", "value1"),
                self.check("properties.labels.key2", "value2"),
                self.check("properties.siteAddress.city", "San Francisco"),
                self.check("properties.siteAddress.postalCode", "94107"),
                self.check("properties.siteAddress.streetAddress1", "{address1}"),
            ]
        )

        #Create Site at subscription scope
        self.cmd(
            "az site create --site-name TestSubsSiteName "
            "--display-name 'Test Subs Site Display' --description 'Test Subs Site' --labels key1='value1' key2='value2' "
            "--street-address1='{address1}' --street-address2='{address2}' "
            "--city='{city}' --state-or-province={state} --country={country} --postal-code={code} ",
            checks=[
                self.check("name", "TestSubsSiteName"),
                self.check("type", "microsoft.edge/sites"),
                self.check("properties.displayName", "Test Subs Site Display"),
                self.check("properties.description", "Test Subs Site"),
                self.check("properties.labels.key1", "value1"),
                self.check("properties.labels.key2", "value2"),
                self.check("properties.siteAddress.city", "San Francisco"),
                self.check("properties.siteAddress.postalCode", "94107"),
                self.check("properties.siteAddress.streetAddress1", "{address1}"),
            ]
        )

        #Show Site at resource group scope
        self.cmd(
            "az site show --site-name TestSiteName --resource-group {rg} ",
            checks=[
                self.check("name", "TestSiteName"),
                self.check("type", "microsoft.edge/sites"),
                self.check("properties.displayName", "Test Site Display"),
                self.check("properties.description", "Test Site"),
                self.check("properties.labels.key1", "value1"),
                self.check("properties.siteAddress.streetAddress1", "{address1}"),
                self.check("properties.siteAddress.streetAddress2", "{address2}"),
            ]
        )

        #Show Site at subscription scope
        self.cmd(
            "az site show --site-name TestSubsSiteName ",
            checks=[
                self.check("name", "TestSubsSiteName"),
                self.check("type", "microsoft.edge/sites"),
                self.check("properties.displayName", "Test Subs Site Display"),
                self.check("properties.description", "Test Subs Site"),
                self.check("properties.labels.key1", "value1"),
                self.check("properties.siteAddress.streetAddress1", "{address1}"),
                self.check("properties.siteAddress.streetAddress2", "{address2}"),
            ]
        )

        #Update Site at resource group scope
        self.cmd(
            "az site update --site-name TestSiteName --resource-group {rg} "
            "--description 'Test Site' --labels key1='value1' key2='value2' "
            "--street-address1='18 TOWNSEND ST' --street-address2='{address2}' "
            "--city='{city}' --state-or-province={state} --country={country} --postal-code='94108' ",
            checks=[
                self.check("name", "TestSiteName"),
                self.check("properties.siteAddress.streetAddress1", "18 TOWNSEND ST"),
                self.check("properties.siteAddress.postalCode", "94108"),
                self.check("properties.provisioningState", "Succeeded"),
            ],
        )

        #Update Site at subscription scope
        self.cmd(
            "az site update --site-name TestSubsSiteName "
            "--description 'Test Subs Site' --labels key1='value1' key2='value2' "
            "--street-address1='18 TOWNSEND ST' --street-address2='{address2}' "
            "--city='{city}' --state-or-province={state} --country={country} --postal-code='94108' ",
            checks=[
                self.check("name", "TestSubsSiteName"),
                self.check("properties.siteAddress.streetAddress1", "18 TOWNSEND ST"),
                self.check("properties.siteAddress.postalCode", "94108"),
                self.check("properties.provisioningState", "Succeeded"),
            ],
        )

        #List Sites at resource group scope
        result = self.cmd(
            "az site list -g {rg}"
        ).get_output_in_json()
        assert any(item.get("name") == "TestSiteName" for item in result), f"'TestSiteName' not found in schema list"

        #List Sites at subscription scope
        result = self.cmd(
            "az site list"
        ).get_output_in_json()
        assert any(item.get("name") == "TestSubsSiteName" for item in result), f"'TestSubsSiteName' not found in schema list"

        #Delete Site at resource group scope
        self.cmd("az site delete --site-name TestSiteName -g {rg} --yes")

        #Delete Site at subscription scope
        self.cmd("az site delete --site-name TestSubsSiteName --yes")
