# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site update",
)
class Update(AAZCommand):
    """Updates an existing site resource scoped to a resource group, subscription, or service group.

    Scope Options:
    --resource-group: Update a site within a specific resource group.
    Note: Requires --subscription.
    --subscription: Update a site scoped to a subscription.
    --service-group: Update a site scoped to a service group.

    :example: Update a Site at service group scope
        az site update --site-name TestSiteName --service-group TestSGName --description "Test Site" --labels key1="value1" key2="value2" --street-address1="17 TOWNSEND ST" --street-address2="UNIT 2" --city="newyork" --state-or-province="CA" --country="US" --postal-code="94107"

    :example: Update a Site at resource group scope
        az site update --site-name TestSiteName --resource-group TestMSRG --subscription 00000000-0000-0000-0000-000000000000 --description "Test Site" --labels key1="value1" key2="value2" --street-address1="17 TOWNSEND ST" --street-address2="UNIT 2" --city="newyork" --state-or-province="CA" --country="US" --postal-code="94107"

    :example: Update a Site at subscription scope
        az site update --site-name TestSiteName  --subscription 00000000-0000-0000-0000-000000000000 --description "Test Site" --labels key1="value1" key2="value2" --street-address1="17 TOWNSEND ST" --street-address2="UNIT 2" --city="newyork" --state-or-province="CA" --country="US" --postal-code="94107"
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.management/servicegroups/{}/providers/microsoft.edge/sites/{}", "2025-06-01"],
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.edge/sites/{}", "2025-06-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.edge/sites/{}", "2025-06-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
        )
        _args_schema.service_group = AAZStrArg(
            options=["--sg", "--service-group"],
            help="Name of the service group",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_().]{1,90}$",
            ),
        )
        _args_schema.site_name = AAZStrArg(
            options=["-n", "--name", "--site-name"],
            help="Name of the site resource",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_]{2,22}[a-zA-Z0-9]$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description of Site resource",
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="displayName of Site resource",
        )
        _args_schema.labels = AAZDictArg(
            options=["--labels"],
            arg_group="Properties",
            help="Key-value pairs for labeling the site resource; to delete a label, set its value to null, or to delete all labels, set --labels to null.",
            nullable=True,
        )

        labels = cls._args_schema.labels
        labels.Element = AAZStrArg(nullable=True)

        # define Arg Group "SiteAddress"

        _args_schema = cls._args_schema
        _args_schema.city = AAZStrArg(
            options=["--city"],
            arg_group="SiteAddress",
            help="City of the address",
        )
        _args_schema.country = AAZStrArg(
            options=["--country"],
            arg_group="SiteAddress",
            help="Country of the address",
        )
        _args_schema.postal_code = AAZStrArg(
            options=["--postal-code"],
            arg_group="SiteAddress",
            help="Postal or ZIP code of the address",
        )
        _args_schema.state_or_province = AAZStrArg(
            options=["--state-or-province"],
            arg_group="SiteAddress",
            help="State or province of the address",
        )
        _args_schema.street_address1 = AAZStrArg(
            options=["--street-address1"],
            arg_group="SiteAddress",
            help="First line of the street address",
        )
        _args_schema.street_address2 = AAZStrArg(
            options=["--street-address2"],
            arg_group="SiteAddress",
            help="Second line of the street address",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.service_group) and has_value(self.ctx.args.site_name)
        condition_1 = has_value(self.ctx.args.site_name) and has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        condition_2 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.args.site_name) and has_value(self.ctx.subscription_id)
        if condition_0:
            self.SitesByServiceGroupUpdate(ctx=self.ctx)()
        elif condition_1:
            self.SitesBySubscriptionUpdate(ctx=self.ctx)()
        elif condition_2:
            self.SitesUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SitesByServiceGroupUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Management/serviceGroups/{servicegroupName}/providers/Microsoft.Edge/sites/{siteName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "servicegroupName", self.ctx.args.service_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "siteName", self.ctx.args.site_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("labels", AAZDictType, ".labels", typ_kwargs={"nullable": True})
                properties.set_prop("siteAddress", AAZObjectType)

            labels = _builder.get(".properties.labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".", typ_kwargs={"nullable": True})

            site_address = _builder.get(".properties.siteAddress")
            if site_address is not None:
                site_address.set_prop("city", AAZStrType, ".city")
                site_address.set_prop("country", AAZStrType, ".country")
                site_address.set_prop("postalCode", AAZStrType, ".postal_code")
                site_address.set_prop("stateOrProvince", AAZStrType, ".state_or_province")
                site_address.set_prop("streetAddress1", AAZStrType, ".street_address1")
                site_address.set_prop("streetAddress2", AAZStrType, ".street_address2")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.labels = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.site_address = AAZObjectType(
                serialized_name="siteAddress",
            )

            labels = cls._schema_on_200.properties.labels
            labels.Element = AAZStrType()

            site_address = cls._schema_on_200.properties.site_address
            site_address.city = AAZStrType()
            site_address.country = AAZStrType()
            site_address.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            site_address.state_or_province = AAZStrType(
                serialized_name="stateOrProvince",
            )
            site_address.street_address1 = AAZStrType(
                serialized_name="streetAddress1",
            )
            site_address.street_address2 = AAZStrType(
                serialized_name="streetAddress2",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200

    class SitesBySubscriptionUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Edge/sites/{siteName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "siteName", self.ctx.args.site_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("labels", AAZDictType, ".labels", typ_kwargs={"nullable": True})
                properties.set_prop("siteAddress", AAZObjectType)

            labels = _builder.get(".properties.labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".", typ_kwargs={"nullable": True})

            site_address = _builder.get(".properties.siteAddress")
            if site_address is not None:
                site_address.set_prop("city", AAZStrType, ".city")
                site_address.set_prop("country", AAZStrType, ".country")
                site_address.set_prop("postalCode", AAZStrType, ".postal_code")
                site_address.set_prop("stateOrProvince", AAZStrType, ".state_or_province")
                site_address.set_prop("streetAddress1", AAZStrType, ".street_address1")
                site_address.set_prop("streetAddress2", AAZStrType, ".street_address2")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.labels = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.site_address = AAZObjectType(
                serialized_name="siteAddress",
            )

            labels = cls._schema_on_200.properties.labels
            labels.Element = AAZStrType()

            site_address = cls._schema_on_200.properties.site_address
            site_address.city = AAZStrType()
            site_address.country = AAZStrType()
            site_address.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            site_address.state_or_province = AAZStrType(
                serialized_name="stateOrProvince",
            )
            site_address.street_address1 = AAZStrType(
                serialized_name="streetAddress1",
            )
            site_address.street_address2 = AAZStrType(
                serialized_name="streetAddress2",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200

    class SitesUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/sites/{siteName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "siteName", self.ctx.args.site_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("labels", AAZDictType, ".labels", typ_kwargs={"nullable": True})
                properties.set_prop("siteAddress", AAZObjectType)

            labels = _builder.get(".properties.labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".", typ_kwargs={"nullable": True})

            site_address = _builder.get(".properties.siteAddress")
            if site_address is not None:
                site_address.set_prop("city", AAZStrType, ".city")
                site_address.set_prop("country", AAZStrType, ".country")
                site_address.set_prop("postalCode", AAZStrType, ".postal_code")
                site_address.set_prop("stateOrProvince", AAZStrType, ".state_or_province")
                site_address.set_prop("streetAddress1", AAZStrType, ".street_address1")
                site_address.set_prop("streetAddress2", AAZStrType, ".street_address2")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.labels = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.site_address = AAZObjectType(
                serialized_name="siteAddress",
            )

            labels = cls._schema_on_200.properties.labels
            labels.Element = AAZStrType()

            site_address = cls._schema_on_200.properties.site_address
            site_address.city = AAZStrType()
            site_address.country = AAZStrType()
            site_address.postal_code = AAZStrType(
                serialized_name="postalCode",
            )
            site_address.state_or_province = AAZStrType(
                serialized_name="stateOrProvince",
            )
            site_address.street_address1 = AAZStrType(
                serialized_name="streetAddress1",
            )
            site_address.street_address2 = AAZStrType(
                serialized_name="streetAddress2",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
