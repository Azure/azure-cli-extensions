# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "firmwareanalysis firmware summary",
)
class Summary(AAZCommand):
    """Get an analysis result summary of a firmware by name.

    :example: Get an analysis result summary of a firmware by name.
        az firmwareanalysis firmware summary --resource-group {resourceGroupName} --workspace-name {workspaceName} --firmware-id {firmwareId} -n {analysisType}
    """

    _aaz_info = {
        "version": "2024-01-10",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.iotfirmwaredefense/workspaces/{}/firmwares/{}/summaries/{}", "2024-01-10"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firmware_id = AAZStrArg(
            options=["--firmware-id"],
            help="The id of the firmware.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.summary_name = AAZStrArg(
            options=["-n", "--name", "--summary-name"],
            help="The Firmware analysis summary name describing the type of summary.",
            required=True,
            id_part="child_name_2",
            enum={"BinaryHardening": "BinaryHardening", "CVE": "CVE", "CryptoCertificate": "CryptoCertificate", "CryptoKey": "CryptoKey", "Firmware": "Firmware"},
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]*$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["--workspace-name"],
            help="The name of the firmware analysis workspace.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_.-]*$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SummariesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SummariesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTFirmwareDefense/workspaces/{workspaceName}/firmwares/{firmwareId}/summaries/{summaryName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firmwareId", self.ctx.args.firmware_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "summaryName", self.ctx.args.summary_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-10",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"read_only": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.summary_type = AAZStrType(
                serialized_name="summaryType",
                flags={"required": True},
            )

            disc_binary_hardening = cls._schema_on_200.properties.discriminate_by("summary_type", "BinaryHardening")
            disc_binary_hardening.canary = AAZIntType(
                nullable=True,
            )
            disc_binary_hardening.nx = AAZIntType(
                nullable=True,
            )
            disc_binary_hardening.pie = AAZIntType(
                nullable=True,
            )
            disc_binary_hardening.relro = AAZIntType(
                nullable=True,
            )
            disc_binary_hardening.stripped = AAZIntType(
                nullable=True,
            )
            disc_binary_hardening.total_files = AAZIntType(
                serialized_name="totalFiles",
            )

            disc_cve = cls._schema_on_200.properties.discriminate_by("summary_type", "CVE")
            disc_cve.critical = AAZIntType(
                nullable=True,
            )
            disc_cve.high = AAZIntType(
                nullable=True,
            )
            disc_cve.low = AAZIntType(
                nullable=True,
            )
            disc_cve.medium = AAZIntType(
                nullable=True,
            )
            disc_cve.unknown = AAZIntType(
                nullable=True,
            )

            disc_crypto_certificate = cls._schema_on_200.properties.discriminate_by("summary_type", "CryptoCertificate")
            disc_crypto_certificate.expired = AAZIntType()
            disc_crypto_certificate.expiring_soon = AAZIntType(
                serialized_name="expiringSoon",
            )
            disc_crypto_certificate.paired_keys = AAZIntType(
                serialized_name="pairedKeys",
            )
            disc_crypto_certificate.self_signed = AAZIntType(
                serialized_name="selfSigned",
            )
            disc_crypto_certificate.short_key_size = AAZIntType(
                serialized_name="shortKeySize",
            )
            disc_crypto_certificate.total_certificates = AAZIntType(
                serialized_name="totalCertificates",
            )
            disc_crypto_certificate.weak_signature = AAZIntType(
                serialized_name="weakSignature",
            )

            disc_crypto_key = cls._schema_on_200.properties.discriminate_by("summary_type", "CryptoKey")
            disc_crypto_key.paired_keys = AAZIntType(
                serialized_name="pairedKeys",
            )
            disc_crypto_key.private_keys = AAZIntType(
                serialized_name="privateKeys",
            )
            disc_crypto_key.public_keys = AAZIntType(
                serialized_name="publicKeys",
            )
            disc_crypto_key.short_key_size = AAZIntType(
                serialized_name="shortKeySize",
            )
            disc_crypto_key.total_keys = AAZIntType(
                serialized_name="totalKeys",
            )

            disc_firmware = cls._schema_on_200.properties.discriminate_by("summary_type", "Firmware")
            disc_firmware.analysis_time_seconds = AAZIntType(
                serialized_name="analysisTimeSeconds",
                nullable=True,
            )
            disc_firmware.binary_count = AAZIntType(
                serialized_name="binaryCount",
                nullable=True,
            )
            disc_firmware.component_count = AAZIntType(
                serialized_name="componentCount",
                nullable=True,
            )
            disc_firmware.extracted_file_count = AAZIntType(
                serialized_name="extractedFileCount",
                nullable=True,
            )
            disc_firmware.extracted_size = AAZIntType(
                serialized_name="extractedSize",
                nullable=True,
            )
            disc_firmware.file_size = AAZIntType(
                serialized_name="fileSize",
                nullable=True,
            )
            disc_firmware.root_file_systems = AAZIntType(
                serialized_name="rootFileSystems",
                nullable=True,
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _SummaryHelper:
    """Helper class for Summary"""


__all__ = ["Summary"]
