# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from azure.cli.testsdk.scenario_tests import record_only
from azure.cli.testsdk import ScenarioTest


class FirmwareanalysisScenario(ScenarioTest):
    @record_only()
    def test_generate_upload_url(self):
        self.kwargs.update({
            'firmware_id': 'cd4e9671-72cf-4f78-9c9e-8e8bb2c5eaa4',
            'resource_group': 'FirmwareAnalysisRG',
            'workspace_name': 'default'
        })

        self.cmd('az firmwareanalysis workspace generate-upload-url '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.check('length(@)', 1),
                         self.check("url.contains(@, '{firmware_id}')", True)]).get_output_in_json()

    @record_only()
    @AllowLargeResponse()
    def test_workspace_commands(self):
        self.kwargs.update({
            'resource_group': 'FirmwareAnalysisRG',
            'workspace_name': 'test_workspace',
            'location': 'eastus',
            'resource_type': 'microsoft.iotfirmwaredefense/workspaces'
        })

        self.cmd('az firmwareanalysis workspace create '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--location {location} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('name', '{workspace_name}'),
                         self.check('location', '{location}')]).get_output_in_json()

        self.cmd('az firmwareanalysis workspace  show '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('type', '{resource_type}'),
                         self.check('name', '{workspace_name}'),
                         self.check('resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis workspace  list '
                 '--resource-group {resource_group} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', '{resource_type}'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

    @record_only()
    @AllowLargeResponse()
    def test_firmware_commands(self):
        self.kwargs.update({
            'resource_group': 'FirmwareAnalysisRG',
            'firmware_id': 'cd4e9671-72cf-4f78-9c9e-8e8bb2c5eaa4',
            'workspace_name': 'default',
            'file_name': 'file_name',
            'vendor_name': 'vendor_name',
            'version_name': 'version_name',
            'fw_description': 'fw_description',
            'fwid_model': 'fwid_model',
            'status': 'Pending',
            'file_size': 1,
            'resource_type': 'microsoft.iotfirmwaredefense/workspaces/firmwares'
        })

        self.cmd('az firmwareanalysis firmware create '
                 '--firmware-id {firmware_id} '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--file-name {file_name} '
                 '--file-size {file_size} '
                 '--vendor {vendor_name} '
                 '--status  {status} '
                 '--version {version_name} '
                 '--description {fw_description} '
                 '--model {fwid_model} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('description', '{fw_description}'),
                         self.check('vendor', '{vendor_name}'),
                         self.check('fileName', '{file_name}'),
                         self.check('fileSize', '{file_size}'),
                         self.check('status', '{status}'),
                         self.check('version', '{version_name}'),
                         self.check("id.contains(@, '{firmware_id}')", True),
                         self.check('model', '{fwid_model}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  show '
                 '--resource-group {resource_group} '
                 '--firmware-id {firmware_id} '
                 '--workspace-name {workspace_name} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('type', '{resource_type}'),
                         self.check('resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  list '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} ',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', '{resource_type}'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

    @record_only()
    @AllowLargeResponse()
    def test_analyser_commands(self):
        self.kwargs.update({
            'resource_group': 'FirmwareAnalysisRG',
            'firmware_id': '80ac3a57-b985-888b-ae28-b6eb8c8393a4',
            'workspace_name': 'default'
        })

        self.cmd('az firmwareanalysis firmware  binary-hardening '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/binaryHardeningResults'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  sbom-component '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/sbomComponents'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  cve '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/cves'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  crypto-certificate '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/cryptoCertificates'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  crypto-key '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/cryptoKeys'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()

        self.cmd('az firmwareanalysis firmware  password-hash '
                 '--resource-group {resource_group} '
                 '--workspace-name {workspace_name} '
                 '--firmware-id {firmware_id}',
                 checks=[self.greater_than('length(@)', 1),
                         self.check('[0].type', 'Microsoft.IoTFirmwareDefense/workspaces/firmwares/passwordHashes'),
                         self.check('[0].resourceGroup', '{resource_group}')]).get_output_in_json()
