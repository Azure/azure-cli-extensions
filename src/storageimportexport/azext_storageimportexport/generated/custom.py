# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines


def storageimportexport_location_list(client):
    return client.list()


def storageimportexport_location_show(client,
                                      location_name):
    return client.get(location_name=location_name)


def storageimportexport_job_list(client,
                                 top=None,
                                 filter_=None,
                                 resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(top=top,
                                             filter=filter_,
                                             resource_group_name=resource_group_name)
    return client.list_by_subscription(top=top,
                                       filter=filter_)


def storageimportexport_job_show(client,
                                 job_name,
                                 resource_group_name):
    return client.get(job_name=job_name,
                      resource_group_name=resource_group_name)


def storageimportexport_job_create(client,
                                   job_name,
                                   resource_group_name,
                                   client_tenant_id=None,
                                   location=None,
                                   tags=None,
                                   storage_account_id=None,
                                   job_type=None,
                                   return_address=None,
                                   return_shipping=None,
                                   shipping_information=None,
                                   delivery_package=None,
                                   return_package=None,
                                   diagnostics_path=None,
                                   log_level=None,
                                   backup_drive_manifest=None,
                                   state=None,
                                   cancel_requested=None,
                                   percent_complete=None,
                                   incomplete_blob_list_uri=None,
                                   drive_list=None,
                                   export=None,
                                   provisioning_state=None,
                                   encryption_key=None):
    if backup_drive_manifest is None:
        backup_drive_manifest = False
    if state is None:
        state = "Creating"
    if cancel_requested is None:
        cancel_requested = False
    body = {}
    body['location'] = location
    body['tags'] = tags
    body['properties'] = {}
    body['properties']['storage_account_id'] = storage_account_id
    body['properties']['job_type'] = job_type
    body['properties']['return_address'] = return_address
    body['properties']['return_shipping'] = return_shipping
    body['properties']['shipping_information'] = shipping_information
    body['properties']['delivery_package'] = delivery_package
    body['properties']['return_package'] = return_package
    body['properties']['diagnostics_path'] = diagnostics_path
    body['properties']['log_level'] = log_level
    body['properties']['backup_drive_manifest'] = False if backup_drive_manifest is None else backup_drive_manifest
    body['properties']['state'] = "Creating" if state is None else state
    body['properties']['cancel_requested'] = False if cancel_requested is None else cancel_requested
    body['properties']['percent_complete'] = percent_complete
    body['properties']['incomplete_blob_list_uri'] = incomplete_blob_list_uri
    body['properties']['drive_list'] = drive_list
    body['properties']['export'] = export
    body['properties']['provisioning_state'] = provisioning_state
    body['properties']['encryption_key'] = encryption_key
    return client.create(job_name=job_name,
                         resource_group_name=resource_group_name,
                         client_tenant_id=client_tenant_id,
                         body=body)


def storageimportexport_job_update(client,
                                   job_name,
                                   resource_group_name,
                                   tags=None,
                                   cancel_requested=None,
                                   state=None,
                                   return_address=None,
                                   return_shipping=None,
                                   delivery_package=None,
                                   log_level=None,
                                   backup_drive_manifest=None,
                                   drive_list=None):
    if cancel_requested is None:
        cancel_requested = False
    if backup_drive_manifest is None:
        backup_drive_manifest = False
    body = {}
    body['tags'] = tags
    body['cancel_requested'] = False if cancel_requested is None else cancel_requested
    body['state'] = state
    body['return_address'] = return_address
    body['return_shipping'] = return_shipping
    body['delivery_package'] = delivery_package
    body['log_level'] = log_level
    body['backup_drive_manifest'] = False if backup_drive_manifest is None else backup_drive_manifest
    body['drive_list'] = drive_list
    return client.update(job_name=job_name,
                         resource_group_name=resource_group_name,
                         body=body)


def storageimportexport_job_delete(client,
                                   job_name,
                                   resource_group_name):
    return client.delete(job_name=job_name,
                         resource_group_name=resource_group_name)


def storageimportexport_bit_locker_key_list(client,
                                            job_name,
                                            resource_group_name):
    return client.list(job_name=job_name,
                       resource_group_name=resource_group_name)
