# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "dynatrace monitor update",
)
class Update(AAZCommand):
    """Update a MonitorResource
    """

    _aaz_info = {
        "version": "2021-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/dynatrace.observability/monitors/{}", "2021-09-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["-n", "--name", "--monitor-name"],
            help="Monitor resource name",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Resource",
            help="The managed service identities assigned to this resource.",
            nullable=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of managed identity assigned to this resource.",
            enum={"SystemAndUserAssigned": "SystemAndUserAssigned", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The identities assigned to this resource by the user.",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.identity.user_assigned_identities.Element
        _element.client_id = AAZStrArg(
            options=["client-id"],
            help="The active directory client identifier for this principal.",
        )
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The active directory identifier for this principal.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.MonitorsGet(ctx=self.ctx)()
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        yield self.MonitorsCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitorsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_monitor_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class MonitorsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Dynatrace.Observability/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _build_schema_monitor_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".identity.userAssignedIdentities{}")
            if _elements is not None:
                _elements.set_prop("clientId", AAZStrType, ".client_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("principalId", AAZStrType, ".principal_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


_schema_monitor_resource_read = None


def _build_schema_monitor_resource_read(_schema):
    global _schema_monitor_resource_read
    if _schema_monitor_resource_read is not None:
        _schema.id = _schema_monitor_resource_read.id
        _schema.identity = _schema_monitor_resource_read.identity
        _schema.location = _schema_monitor_resource_read.location
        _schema.name = _schema_monitor_resource_read.name
        _schema.properties = _schema_monitor_resource_read.properties
        _schema.system_data = _schema_monitor_resource_read.system_data
        _schema.tags = _schema_monitor_resource_read.tags
        _schema.type = _schema_monitor_resource_read.type
        return

    _schema_monitor_resource_read = AAZObjectType()

    monitor_resource_read = _schema_monitor_resource_read
    monitor_resource_read.id = AAZStrType(
        flags={"read_only": True},
    )
    monitor_resource_read.identity = AAZObjectType()
    monitor_resource_read.location = AAZStrType(
        flags={"required": True},
    )
    monitor_resource_read.name = AAZStrType(
        flags={"read_only": True},
    )
    monitor_resource_read.properties = AAZObjectType(
        flags={"required": True, "client_flatten": True},
    )
    monitor_resource_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"read_only": True},
    )
    monitor_resource_read.tags = AAZDictType()
    monitor_resource_read.type = AAZStrType(
        flags={"read_only": True},
    )

    identity = _schema_monitor_resource_read.identity
    identity.principal_id = AAZStrType(
        serialized_name="principalId",
        flags={"read_only": True},
    )
    identity.tenant_id = AAZStrType(
        serialized_name="tenantId",
        flags={"read_only": True},
    )
    identity.type = AAZStrType(
        flags={"required": True},
    )
    identity.user_assigned_identities = AAZDictType(
        serialized_name="userAssignedIdentities",
    )

    user_assigned_identities = _schema_monitor_resource_read.identity.user_assigned_identities
    user_assigned_identities.Element = AAZObjectType()

    _element = _schema_monitor_resource_read.identity.user_assigned_identities.Element
    _element.client_id = AAZStrType(
        serialized_name="clientId",
        flags={"required": True},
    )
    _element.principal_id = AAZStrType(
        serialized_name="principalId",
        flags={"required": True},
    )

    properties = _schema_monitor_resource_read.properties
    properties.dynatrace_environment_properties = AAZObjectType(
        serialized_name="dynatraceEnvironmentProperties",
    )
    properties.liftr_resource_category = AAZStrType(
        serialized_name="liftrResourceCategory",
        flags={"read_only": True},
    )
    properties.liftr_resource_preference = AAZIntType(
        serialized_name="liftrResourcePreference",
        flags={"read_only": True},
    )
    properties.marketplace_subscription_status = AAZStrType(
        serialized_name="marketplaceSubscriptionStatus",
    )
    properties.monitoring_status = AAZStrType(
        serialized_name="monitoringStatus",
    )
    properties.plan_data = AAZObjectType(
        serialized_name="planData",
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.user_info = AAZObjectType(
        serialized_name="userInfo",
    )

    dynatrace_environment_properties = _schema_monitor_resource_read.properties.dynatrace_environment_properties
    dynatrace_environment_properties.account_info = AAZObjectType(
        serialized_name="accountInfo",
    )
    dynatrace_environment_properties.environment_info = AAZObjectType(
        serialized_name="environmentInfo",
    )
    dynatrace_environment_properties.single_sign_on_properties = AAZObjectType(
        serialized_name="singleSignOnProperties",
    )
    dynatrace_environment_properties.user_id = AAZStrType(
        serialized_name="userId",
    )

    account_info = _schema_monitor_resource_read.properties.dynatrace_environment_properties.account_info
    account_info.account_id = AAZStrType(
        serialized_name="accountId",
    )
    account_info.region_id = AAZStrType(
        serialized_name="regionId",
    )

    environment_info = _schema_monitor_resource_read.properties.dynatrace_environment_properties.environment_info
    environment_info.environment_id = AAZStrType(
        serialized_name="environmentId",
    )
    environment_info.ingestion_key = AAZStrType(
        serialized_name="ingestionKey",
    )
    environment_info.landing_url = AAZStrType(
        serialized_name="landingURL",
    )
    environment_info.logs_ingestion_endpoint = AAZStrType(
        serialized_name="logsIngestionEndpoint",
    )

    single_sign_on_properties = _schema_monitor_resource_read.properties.dynatrace_environment_properties.single_sign_on_properties
    single_sign_on_properties.aad_domains = AAZListType(
        serialized_name="aadDomains",
    )
    single_sign_on_properties.enterprise_app_id = AAZStrType(
        serialized_name="enterpriseAppId",
    )
    single_sign_on_properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    single_sign_on_properties.single_sign_on_state = AAZStrType(
        serialized_name="singleSignOnState",
    )
    single_sign_on_properties.single_sign_on_url = AAZStrType(
        serialized_name="singleSignOnUrl",
    )

    aad_domains = _schema_monitor_resource_read.properties.dynatrace_environment_properties.single_sign_on_properties.aad_domains
    aad_domains.Element = AAZStrType()

    plan_data = _schema_monitor_resource_read.properties.plan_data
    plan_data.billing_cycle = AAZStrType(
        serialized_name="billingCycle",
    )
    plan_data.effective_date = AAZStrType(
        serialized_name="effectiveDate",
    )
    plan_data.plan_details = AAZStrType(
        serialized_name="planDetails",
    )
    plan_data.usage_type = AAZStrType(
        serialized_name="usageType",
    )

    user_info = _schema_monitor_resource_read.properties.user_info
    user_info.country = AAZStrType()
    user_info.email_address = AAZStrType(
        serialized_name="emailAddress",
    )
    user_info.first_name = AAZStrType(
        serialized_name="firstName",
    )
    user_info.last_name = AAZStrType(
        serialized_name="lastName",
    )
    user_info.phone_number = AAZStrType(
        serialized_name="phoneNumber",
    )

    system_data = _schema_monitor_resource_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
        flags={"read_only": True},
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
        flags={"read_only": True},
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
        flags={"read_only": True},
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
        flags={"read_only": True},
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
        flags={"read_only": True},
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
        flags={"read_only": True},
    )

    tags = _schema_monitor_resource_read.tags
    tags.Element = AAZStrType()

    _schema.id = _schema_monitor_resource_read.id
    _schema.identity = _schema_monitor_resource_read.identity
    _schema.location = _schema_monitor_resource_read.location
    _schema.name = _schema_monitor_resource_read.name
    _schema.properties = _schema_monitor_resource_read.properties
    _schema.system_data = _schema_monitor_resource_read.system_data
    _schema.tags = _schema_monitor_resource_read.tags
    _schema.type = _schema_monitor_resource_read.type


__all__ = ["Update"]
