# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import unittest
from azure.cli.testsdk import *


class DynatraceScenario(ScenarioTest):
    @unittest.skip('draft')
    @ResourceGroupPreparer(name_prefix='cli_test_dynatrace_monitor')
    def test_dynatrace_monitor(self, resorce_group_name):
        self.kwargs.update({
            'monitor': self.create_random_name('monitor', 15),
        })

        self.cmd('dynatrace monitor create -g {rg} -n {monitor} --dynatrace-environment-properties "{account-info:{},environment-info:{},single-sign-on-properties:{}}" --marketplace-subscription-status active --monitoring-status enabled --user-info "{first-name:alice,last-name:bob,email-address:alice@microsoft.com,phone-number:123456,country:westus}" --plan-data "{usage-type:committed,billing-cycle:monthly,plan-details:dynatraceapitestplan,effective-date:2022-07-29}" --identity "{type:SystemAssigned}"')
        self.cmd('dynatrace monitor show -g {rg} -n {monitor}', checks=[
            self.check('name', '{monitor}'),
            self.check('resourceGroup', '{rg}'),
            self.check('dynatraceEnvironmentProperties.singleSignOnProperties.provisioningState', 'Accepted'),
            self.check('dynatraceEnvironmentProperties.singleSignOnProperties.singleSignOnState', 'Initial'),
            self.check('marketplaceSubscriptionStatus', 'Active'),
            self.check('monitoringStatus', 'Enabled'),
            self.check('identity.type', 'SystemAssigned'),
            self.check('planData.billingCycle', 'monthly'),
            self.check('planData.planDetails', 'dynatraceapitestplan'),
            self.check('planData.usageType', 'committed')
        ])
        self.cmd('dynatrace monitor update -g {rg} -n {monitor} --tags "{env:dev}"', checks=[
            self.check('name', '{monitor}'),
            self.check('resourceGroup', '{rg}'),
            self.check('dynatraceEnvironmentProperties.singleSignOnProperties.provisioningState', 'Accepted'),
            self.check('dynatraceEnvironmentProperties.singleSignOnProperties.singleSignOnState', 'Initial'),
            self.check('marketplaceSubscriptionStatus', 'Active'),
            self.check('monitoringStatus', 'Enabled'),
            self.check('identity.type', 'SystemAssigned'),
            self.check('planData.billingCycle', 'monthly'),
            self.check('planData.planDetails', 'dynatraceapitestplan'),
            self.check('planData.usageType', 'committed'),
            self.check('tags', {'env': 'dev'})
        ])
        self.cmd('dynatrace monitor list -g {rg}', checks=[
            self.check('[0].name', '{monitor}'),
            self.check('[0].resourceGroup', '{rg}'),
            self.check('[0].dynatraceEnvironmentProperties.singleSignOnProperties.provisioningState', 'Accepted'),
            self.check('[0].dynatraceEnvironmentProperties.singleSignOnProperties.singleSignOnState', 'Initial'),
            self.check('[0].marketplaceSubscriptionStatus', 'Active'),
            self.check('[0].monitoringStatus', 'Enabled'),
            self.check('[0].identity.type', 'SystemAssigned'),
            self.check('[0].planData.billingCycle', 'monthly'),
            self.check('[0].planData.planDetails', 'dynatraceapitestplan'),
            self.check('[0].planData.usageType', 'committed'),
            self.check('tags', {'env': 'dev'})
        ])
        self.cmd('dynatrace monitor get-account-credential -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor get-sso-detail -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor get-vm-host-payload -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor list-app-service -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor list-host -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor list-linkable-environment -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor list-monitored-resource -g {rg} --monitor-name {monitor}')
        self.cmd('dynatrace monitor delete -g {rg} -y')

    @unittest.skip('draft')
    @ResourceGroupPreparer(name_prefix='cli_test_dynatrace_monitor_single_sign_on_configurations')
    def test_dynatrace_monitor_single_sign_on_configurations(self, resorce_group_name):
        self.kwargs.update({
            'monitor': self.create_random_name('monitor', 15),
            'conf': self.create_random_name('conf', 15)
        })
        self.cmd('dynatrace monitor create -g {rg} -n {monitor} --dynatrace-environment-properties "{account-info:{},environment-info:{},single-sign-on-properties:{}}" --marketplace-subscription-status active --monitoring-status enabled --user-info "{first-name:alice,last-name:bob,email-address:alice@microsoft.com,phone-number:123456,country:westus}" --plan-data "{usage-type:committed,billing-cycle:monthly,plan-details:dynatraceapitestplan,effective-date:2022-07-29}" --identity "{type:SystemAssigned}"')
        self.cmd('dynatrace monitor single-sign-on-configurations create -g {rg} --monitor-name {monitor} -n {conf}', checks=[

        ])
        self.cmd('dynatrace monitor single-sign-on-configurations update -g {rg} --monitor-name {monitor} -n {conf}', checks=[

        ])
        self.cmd('dynatrace monitor single-sign-on-configurations show -g {rg} --monitor-name {monitor} -n {conf}', checks=[

        ])
        self.cmd('dynatrace monitor single-sign-on-configurations list -g {rg} --monitor-name {monitor}', checks=[

        ])
        self.cmd('dynatrace monitor single-sign-on-configurations delete -g {rg} --monitor-name {monitor} -n {conf} -y')

    @unittest.skip('draft')
    @ResourceGroupPreparer(name_prefix='cli_test_dynatrace_monitor_tag_rule')
    def test_dynatrace_monitor_tag_rule(self, resorce_group_name):
        self.kwargs.update({
            'monitor': self.create_random_name('monitor', 15),
            'rule': self.create_random_name('rule', 15)
        })

        self.cmd('dynatrace monitor create -g {rg} -n {monitor} --dynatrace-environment-properties "{account-info:{},environment-info:{},single-sign-on-properties:{}}" --marketplace-subscription-status active --monitoring-status enabled --user-info "{first-name:alice,last-name:bob,email-address:alice@microsoft.com,phone-number:123456,country:westus}" --plan-data "{usage-type:committed,billing-cycle:monthly,plan-details:dynatraceapitestplan,effective-date:2022-07-29}" --identity "{type:SystemAssigned}"')
        self.cmd('dynatrace monitor tag-rule create -g {rg} --monitor-name {monitor} -n {rule}', checks=[

        ])
        self.cmd('dynatrace monitor tag-rule update -g {rg} --monitor-name {monitor} -n {rule}', checks=[

        ])
        self.cmd('dynatrace monitor tag-rule show -g {rg} --monitor-name {monitor} -n {rule}', checks=[

        ])
        self.cmd('dynatrace monitor tag-rule list -g {rg} --monitor-name {monitor}', checks=[

        ])
        self.cmd('dynatrace monitor tag-rule delete -g {rg} --monitor-name {monitor} -n {rule} -y')