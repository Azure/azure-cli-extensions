# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_show
from .example_steps import step_list
from .example_steps import step_extension_create
from .example_steps import step_extension_list
from .example_steps import step_extension_show
from .example_steps import step_extension_update
from .example_steps import step_upgrade_extension
from .example_steps import step_extension_delete
from .example_steps import step_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


@try_manual
def test_machine_and_extension(test):
    test.kwargs.update({
        'machine': 'testMachine',
        'rg': 'az-sdk-test',
        'location': 'eastus2euap',
        'customScriptName': test.create_random_name('custom-', 20),
    })

    test.cmd('az connectedmachine show -n {machine} -g {rg}', checks=[
        test.check('name', '{machine}'),
        test.check('resourceGroup', '{rg}')
    ])

    test.cmd('az connectedmachine list -g {rg}', checks=[
        test.check('length(@)', 2)
    ])

    test.cmd('az connectedmachine extension create '
             '--name "{customScriptName}" '
             '--location "{location}" '
             '--enable-auto-upgrade true '
             '--type "CustomScriptExtension" '
             '--publisher "Microsoft.Compute" '
             '--type-handler-version "1.10.10" '
             '--machine-name "{machine}" '
             '--resource-group "{rg}" '
             '--settings "{{\\"commandToExecute\\":\\"hostname\\"}}"',
            checks=[
                test.check('name', '{customScriptName}'),
                test.check('properties.typeHandlerVersion', '1.10.10'),
                test.check('properties.settings.commandToExecute', 'hostname')
    ])

    test.cmd('az connectedmachine extension list '
             '--machine-name {machine} -g {rg}', 
             checks=[
                test.check('length(@)', 1)
    ])

    test.cmd('az connectedmachine extension show '
             '--name {customScriptName} '
             '--machine-name "{machine}" '
             '--resource-group "{rg}"',
            checks=[
                test.check('name', '{customScriptName}'),
                test.check('properties.typeHandlerVersion', '1.10.10')
    ])

    test.cmd('az connectedmachine upgrade-extension '
             '--extension-targets "{{\\"Microsoft.Compute.CustomScriptExtension\\":{{\\"targetVersion\\":\\"1.10.12\\"}}}}" '
             '--machine-name "{machine}" '
             '--resource-group "{rg}"',
             checks=[])

    test.cmd('az connectedmachine extension update '
             '--name "{customScriptName}" '
             '--settings "{{\\"commandToExecute\\":\\"dir\\"}}" '
             '--machine-name "{machine}" '
             '--resource-group "{rg}"',
             checks=[
                test.check('name', '{customScriptName}'),
                test.check('properties.provisioningState', 'Succeeded'),
                test.check('properties.settings.commandToExecute', 'dir'),
                test.check('properties.typeHandlerVersion', '1.10.12')
    ]) 

    test.cmd('az connectedmachine extension delete -y '
             '--name "{customScriptName}" '
             '--machine-name "{machine}" '
             '--resource-group "{rg}"',
             checks=[])

    test.cmd('az connectedmachine delete -y '
             '--name "{machine}" '
             '--resource-group "{rg}"',
            checks=[])

# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    test_machine_and_extension(test)
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class ConnectedMachineAndExtensionScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(ConnectedMachineAndExtensionScenarioTest, self).__init__(*args, **kwargs)


    def test_ConnectedMachineAndExtension_Scenario(self):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
