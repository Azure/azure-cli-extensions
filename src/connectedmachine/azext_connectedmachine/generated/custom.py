# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def connectedmachine_list(client,
                          resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def connectedmachine_show(client,
                          resource_group_name,
                          machine_name):
    return client.get(resource_group_name=resource_group_name,
                      machine_name=machine_name,
                      expand="instanceView")


def connectedmachine_delete(client,
                            resource_group_name,
                            machine_name):
    return client.delete(resource_group_name=resource_group_name,
                         machine_name=machine_name)


def connectedmachine_extension_list(client,
                                    resource_group_name,
                                    machine_name,
                                    expand=None):
    return client.list(resource_group_name=resource_group_name,
                       machine_name=machine_name,
                       expand=expand)


def connectedmachine_extension_show(client,
                                    resource_group_name,
                                    machine_name,
                                    name):
    return client.get(resource_group_name=resource_group_name,
                      machine_name=machine_name,
                      extension_name=name)


def connectedmachine_extension_create(client,
                                      resource_group_name,
                                      machine_name,
                                      name,
                                      location,
                                      tags=None,
                                      force_update_tag=None,
                                      publisher=None,
                                      type_=None,
                                      type_handler_version=None,
                                      enable_auto_upgrade=None,
                                      auto_upgrade_minor=None,
                                      settings=None,
                                      protected_settings=None,
                                      instance_view_type=None,
                                      inst_handler_version=None,
                                      status=None,
                                      no_wait=False):
    extension_parameters = {}
    if tags is not None:
        extension_parameters['tags'] = tags
    extension_parameters['location'] = location
    extension_parameters['properties'] = {}
    if force_update_tag is not None:
        extension_parameters['properties']['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension_parameters['properties']['publisher'] = publisher
    if type_ is not None:
        extension_parameters['properties']['type'] = type_
    if type_handler_version is not None:
        extension_parameters['properties']['type_handler_version'] = type_handler_version
    if enable_auto_upgrade is not None:
        extension_parameters['properties']['enable_automatic_upgrade'] = enable_auto_upgrade
    if auto_upgrade_minor is not None:
        extension_parameters['properties']['auto_upgrade_minor_version'] = auto_upgrade_minor
    if settings is not None:
        extension_parameters['properties']['settings'] = settings
    if protected_settings is not None:
        extension_parameters['properties']['protected_settings'] = protected_settings
    extension_parameters['properties']['instance_view'] = {}
    extension_parameters['properties']['instance_view']['name'] = name
    if instance_view_type is not None:
        extension_parameters['properties']['instance_view']['type'] = instance_view_type
    if inst_handler_version is not None:
        extension_parameters['properties']['instance_view']['type_handler_version'] = inst_handler_version
    if status is not None:
        extension_parameters['properties']['instance_view']['status'] = status
    if len(extension_parameters['properties']['instance_view']) == 0:
        del extension_parameters['properties']['instance_view']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       machine_name=machine_name,
                       extension_name=name,
                       extension_parameters=extension_parameters)


def connectedmachine_extension_update(client,
                                      resource_group_name,
                                      machine_name,
                                      name,
                                      tags=None,
                                      force_update_tag=None,
                                      publisher=None,
                                      type_=None,
                                      type_handler_version=None,
                                      auto_upgrade_minor=None,
                                      settings=None,
                                      protected_settings=None,
                                      no_wait=False):
    extension_parameters = {}
    if tags is not None:
        extension_parameters['tags'] = tags
    extension_parameters['properties'] = {}
    if force_update_tag is not None:
        extension_parameters['properties']['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension_parameters['properties']['publisher'] = publisher
    if type_ is not None:
        extension_parameters['properties']['type'] = type_
    if type_handler_version is not None:
        extension_parameters['properties']['type_handler_version'] = type_handler_version
    if auto_upgrade_minor is not None:
        extension_parameters['properties']['auto_upgrade_minor_version'] = auto_upgrade_minor
    if settings is not None:
        extension_parameters['properties']['settings'] = settings
    if protected_settings is not None:
        extension_parameters['properties']['protected_settings'] = protected_settings
    if len(extension_parameters['properties']) == 0:
        del extension_parameters['properties']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       machine_name=machine_name,
                       extension_name=name,
                       extension_parameters=extension_parameters)


def connectedmachine_extension_delete(client,
                                      resource_group_name,
                                      machine_name,
                                      name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       machine_name=machine_name,
                       extension_name=name)


def connectedmachine_upgrade_extension(client,
                                       resource_group_name,
                                       machine_name,
                                       extension_targets=None):
    extension_upgrade_parameters = {}
    if extension_targets is not None:
        extension_upgrade_parameters['extension_targets'] = extension_targets
    return client.begin_upgrade_extensions(resource_group_name=resource_group_name,
                                           machine_name=machine_name,
                                           extension_upgrade_parameters=extension_upgrade_parameters)


def connectedmachine_private_link_scope_list(client,
                                             resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def connectedmachine_private_link_scope_show(client,
                                             resource_group_name,
                                             scope_name):
    return client.get(resource_group_name=resource_group_name,
                      scope_name=scope_name)


def connectedmachine_private_link_scope_create(client,
                                               resource_group_name,
                                               scope_name,
                                               location,
                                               tags=None,
                                               public_network_access=None):
    parameters = {}
    parameters['location'] = location
    if tags is not None:
        parameters['tags'] = tags
    parameters['properties'] = {}
    if public_network_access is not None:
        parameters['properties']['public_network_access'] = public_network_access
    else:
        parameters['properties']['public_network_access'] = "Disabled"
    if len(parameters['properties']) == 0:
        del parameters['properties']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   scope_name=scope_name,
                                   parameters=parameters)


def connectedmachine_private_link_scope_update(instance,
                                               resource_group_name,
                                               scope_name,
                                               location,
                                               tags=None,
                                               public_network_access=None):
    instance.location = location
    if tags is not None:
        instance.tags = tags
    if public_network_access is not None:
        instance.properties.public_network_access = public_network_access
    return instance


def connectedmachine_private_link_scope_delete(client,
                                               resource_group_name,
                                               scope_name,
                                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       scope_name=scope_name)


def connectedmachine_private_link_scope_show_validation_detail(client,
                                                               location,
                                                               private_link_scope_id):
    return client.get_validation_details(location=location,
                                         private_link_scope_id=private_link_scope_id)


def connectedmachine_private_link_scope_show_validation_detail_for_machine(client,
                                                                           resource_group_name,
                                                                           machine_name):
    return client.get_validation_details_for_machine(resource_group_name=resource_group_name,
                                                     machine_name=machine_name)


def connectedmachine_private_link_scope_update_tag(client,
                                                   resource_group_name,
                                                   scope_name,
                                                   tags=None):
    private_link_scope_tags = {}
    if tags is not None:
        private_link_scope_tags['tags'] = tags
    return client.update_tags(resource_group_name=resource_group_name,
                              scope_name=scope_name,
                              private_link_scope_tags=private_link_scope_tags)


def connectedmachine_private_link_resource_list(client,
                                                resource_group_name,
                                                scope_name):
    return client.list_by_private_link_scope(resource_group_name=resource_group_name,
                                             scope_name=scope_name)


def connectedmachine_private_link_resource_show(client,
                                                resource_group_name,
                                                scope_name,
                                                group_name):
    return client.get(resource_group_name=resource_group_name,
                      scope_name=scope_name,
                      group_name=group_name)


def connectedmachine_private_endpoint_connection_list(client,
                                                      resource_group_name,
                                                      scope_name):
    return client.list_by_private_link_scope(resource_group_name=resource_group_name,
                                             scope_name=scope_name)


def connectedmachine_private_endpoint_connection_show(client,
                                                      resource_group_name,
                                                      scope_name,
                                                      private_endpoint_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      scope_name=scope_name,
                      private_endpoint_connection_name=private_endpoint_connection_name)


def connectedmachine_private_endpoint_connection_update(client,
                                                        resource_group_name,
                                                        scope_name,
                                                        private_endpoint_connection_name,
                                                        connection_state=None,
                                                        id_=None,
                                                        no_wait=False):
    parameters = {}
    parameters['properties'] = {}
    if connection_state is not None:
        parameters['properties']['private_link_service_connection_state'] = connection_state
    parameters['properties']['private_endpoint'] = {}
    if id_ is not None:
        parameters['properties']['private_endpoint']['id'] = id_
    if len(parameters['properties']['private_endpoint']) == 0:
        del parameters['properties']['private_endpoint']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       scope_name=scope_name,
                       private_endpoint_connection_name=private_endpoint_connection_name,
                       parameters=parameters)


def connectedmachine_private_endpoint_connection_delete(client,
                                                        resource_group_name,
                                                        scope_name,
                                                        private_endpoint_connection_name,
                                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       scope_name=scope_name,
                       private_endpoint_connection_name=private_endpoint_connection_name)
