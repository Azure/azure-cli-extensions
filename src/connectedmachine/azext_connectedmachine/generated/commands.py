# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_connectedmachine.generated._client_factory import cf_machine
    connectedmachine_machine = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._machines_operations#Machines'
        'Operations.{}',
        client_factory=cf_machine)
    with self.command_group('connectedmachine', connectedmachine_machine, client_factory=cf_machine,
                            is_experimental=True) as g:
        g.custom_command('list', 'connectedmachine_list')
        g.custom_show_command('show', 'connectedmachine_show')
        g.custom_command('delete', 'connectedmachine_delete', confirmation=True)

    from azext_connectedmachine.generated._client_factory import cf_machine_extension
    connectedmachine_machine_extension = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._machine_extensions_operation'
        's#MachineExtensionsOperations.{}',
        client_factory=cf_machine_extension)
    with self.command_group('connectedmachine extension', connectedmachine_machine_extension,
                            client_factory=cf_machine_extension) as g:
        g.custom_command('list', 'connectedmachine_extension_list')
        g.custom_show_command('show', 'connectedmachine_extension_show')
        g.custom_command('create', 'connectedmachine_extension_create', supports_no_wait=True)
        g.custom_command('update', 'connectedmachine_extension_update', supports_no_wait=True)
        g.custom_command('delete', 'connectedmachine_extension_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'connectedmachine_extension_show')

    from azext_connectedmachine.generated._client_factory import cf_connectedmachine
    connectedmachine_ = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._model_operations#ConnectedMa'
        'chineOperationsMixin.{}',
        client_factory=cf_connectedmachine)
    with self.command_group('connectedmachine', connectedmachine_, client_factory=cf_connectedmachine,
                            is_experimental=True) as g:
        g.custom_command('upgrade-extension', 'connectedmachine_upgrade_extension')

    from azext_connectedmachine.generated._client_factory import cf_private_link_scope
    connectedmachine_private_link_scope = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._private_link_scopes_operatio'
        'ns#PrivateLinkScopesOperations.{}',
        client_factory=cf_private_link_scope)
    with self.command_group('connectedmachine private-link-scope', connectedmachine_private_link_scope,
                            client_factory=cf_private_link_scope) as g:
        g.custom_command('list', 'connectedmachine_private_link_scope_list')
        g.custom_show_command('show', 'connectedmachine_private_link_scope_show')
        g.custom_command('create', 'connectedmachine_private_link_scope_create')
        g.generic_update_command('update', custom_func_name='connectedmachine_private_link_scope_update')
        g.custom_command('delete', 'connectedmachine_private_link_scope_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_command('show-validation-detail', 'connectedmachine_private_link_scope_show_validation_detail')
        g.custom_command('show-validation-detail-for-machine', 'connectedmachine_private_link_scope_show_validation_det'
                         'ail_for_machine')
        g.custom_command('update-tag', 'connectedmachine_private_link_scope_update_tag')
        g.custom_wait_command('wait', 'connectedmachine_private_link_scope_show')

    from azext_connectedmachine.generated._client_factory import cf_private_link_resource
    connectedmachine_private_link_resource = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._private_link_resources_opera'
        'tions#PrivateLinkResourcesOperations.{}',
        client_factory=cf_private_link_resource)
    with self.command_group('connectedmachine private-link-resource', connectedmachine_private_link_resource,
                            client_factory=cf_private_link_resource) as g:
        g.custom_command('list', 'connectedmachine_private_link_resource_list')
        g.custom_show_command('show', 'connectedmachine_private_link_resource_show')

    from azext_connectedmachine.generated._client_factory import cf_private_endpoint_connection
    connectedmachine_private_endpoint_connection = CliCommandType(
        operations_tmpl='azext_connectedmachine.vendored_sdks.connectedmachine.operations._private_endpoint_connections'
        '_operations#PrivateEndpointConnectionsOperations.{}',
        client_factory=cf_private_endpoint_connection)
    with self.command_group('connectedmachine private-endpoint-connection',
                            connectedmachine_private_endpoint_connection,
                            client_factory=cf_private_endpoint_connection) as g:
        g.custom_command('list', 'connectedmachine_private_endpoint_connection_list')
        g.custom_show_command('show', 'connectedmachine_private_endpoint_connection_show')
        g.custom_command('create', 'connectedmachine_private_endpoint_connection_create', supports_no_wait=True)
        g.generic_update_command('update', setter_name='begin_create_or_update',
                                 custom_func_name='connectedmachine_private_endpoint_connection_update',
                                 supports_no_wait=True)
        g.custom_command('delete', 'connectedmachine_private_endpoint_connection_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_wait_command('wait', 'connectedmachine_private_endpoint_connection_show')
