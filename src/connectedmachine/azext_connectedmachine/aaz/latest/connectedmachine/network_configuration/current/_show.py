# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "connectedmachine network-configuration current show",
    is_preview=True,
)
class Show(AAZCommand):
    """Get a Network Configuration for the target resource.

    :example: Sample command for network-configuration show
        az connectedmachine network-configuration show --resource-uri "myResourceUri"
    """

    _aaz_info = {
        "version": "2023-10-03-preview",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.hybridcompute/networkconfigurations/current", "2023-10-03-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource to be connected.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkConfigurationsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkConfigurationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.HybridCompute/networkConfigurations/current",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-03-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.key_properties = AAZObjectType(
                serialized_name="keyProperties",
            )
            properties.location = AAZStrType()
            properties.network_configuration_scope_id = AAZStrType(
                serialized_name="networkConfigurationScopeId",
            )
            properties.network_configuration_scope_resource_id = AAZStrType(
                serialized_name="networkConfigurationScopeResourceId",
                flags={"required": True},
            )
            properties.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )

            key_properties = cls._schema_on_200.properties.key_properties
            key_properties.candidate_public_key = AAZObjectType(
                serialized_name="candidatePublicKey",
            )
            _ShowHelper._build_schema_key_details_read(key_properties.candidate_public_key)
            key_properties.client_public_key = AAZObjectType(
                serialized_name="clientPublicKey",
            )
            _ShowHelper._build_schema_key_details_read(key_properties.client_public_key)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_key_details_read = None

    @classmethod
    def _build_schema_key_details_read(cls, _schema):
        if cls._schema_key_details_read is not None:
            _schema.not_after = cls._schema_key_details_read.not_after
            _schema.public_key = cls._schema_key_details_read.public_key
            _schema.renew_after = cls._schema_key_details_read.renew_after
            return

        cls._schema_key_details_read = _schema_key_details_read = AAZObjectType()

        key_details_read = _schema_key_details_read
        key_details_read.not_after = AAZStrType(
            serialized_name="notAfter",
            flags={"read_only": True},
        )
        key_details_read.public_key = AAZStrType(
            serialized_name="publicKey",
            flags={"read_only": True},
        )
        key_details_read.renew_after = AAZStrType(
            serialized_name="renewAfter",
            flags={"read_only": True},
        )

        _schema.not_after = cls._schema_key_details_read.not_after
        _schema.public_key = cls._schema_key_details_read.public_key
        _schema.renew_after = cls._schema_key_details_read.renew_after


__all__ = ["Show"]
