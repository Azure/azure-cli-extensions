# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "connectedmachine license-profile create",
)
class Create(AAZCommand):
    """Create operation to create a license profile.

    :example: Create a License Profile
        az connectedmachine license-profile create --resource-group myRg --machine-name myMachine --location eastus --subscription-status Enabled --product-type WindowsServer --product-features "[{name:Hotpatch,subscription-status:Enabled}]"
    """

    _aaz_info = {
        "version": "2024-07-31-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.hybridcompute/machines/{}/licenseprofiles/{}", "2024-07-31-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.license_profile_name = AAZStrArg(
            options=["-n", "--name", "--license-profile-name"],
            help="The name of the license profile.",
            required=True,
            enum={"default": "default"},
            fmt=AAZStrArgFormat(
                pattern="[a-zA-Z0-9-_\.]+",
            ),
        )
        _args_schema.machine_name = AAZStrArg(
            options=["-m", "--machine-name"],
            help="The name of the hybrid machine.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="[a-zA-Z0-9-_\.]+",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.software_assurance_customer = AAZBoolArg(
            options=["--software-assurance", "--software-assurance-customer"],
            help="Specifies if this machine is licensed as part of a Software Assurance agreement.",
        )

        # define Arg Group "EsuProfile"

        _args_schema = cls._args_schema
        _args_schema.assigned_license = AAZStrArg(
            options=["--assigned-license"],
            arg_group="EsuProfile",
            help="The resource id of the license.",
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "ProductProfile"

        _args_schema = cls._args_schema
        _args_schema.product_features = AAZListArg(
            options=["--product-features"],
            arg_group="ProductProfile",
            help="The list of product features.",
        )
        _args_schema.product_type = AAZStrArg(
            options=["--product-type"],
            arg_group="ProductProfile",
            help="Indicates the product type of the license.",
            enum={"WindowsIoTEnterprise": "WindowsIoTEnterprise", "WindowsServer": "WindowsServer"},
        )
        _args_schema.subscription_status = AAZStrArg(
            options=["--subscription-status"],
            arg_group="ProductProfile",
            help="Indicates the subscription status of the product.",
            enum={"Disabled": "Disabled", "Disabling": "Disabling", "Enabled": "Enabled", "Enabling": "Enabling", "Failed": "Failed", "Unknown": "Unknown"},
        )

        product_features = cls._args_schema.product_features
        product_features.Element = AAZObjectArg()

        _element = cls._args_schema.product_features.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Product feature name.",
        )
        _element.subscription_status = AAZStrArg(
            options=["subscription-status"],
            help="Indicates the current status of the product features.",
            enum={"Disabled": "Disabled", "Disabling": "Disabling", "Enabled": "Enabled", "Enabling": "Enabling", "Failed": "Failed", "Unknown": "Unknown"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.LicenseProfilesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class LicenseProfilesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridCompute/machines/{machineName}/licenseProfiles/{licenseProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "licenseProfileName", self.ctx.args.license_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "machineName", self.ctx.args.machine_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-31-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("esuProfile", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("productProfile", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("softwareAssurance", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            esu_profile = _builder.get(".properties.esuProfile")
            if esu_profile is not None:
                esu_profile.set_prop("assignedLicense", AAZStrType, ".assigned_license")

            product_profile = _builder.get(".properties.productProfile")
            if product_profile is not None:
                product_profile.set_prop("productFeatures", AAZListType, ".product_features")
                product_profile.set_prop("productType", AAZStrType, ".product_type")
                product_profile.set_prop("subscriptionStatus", AAZStrType, ".subscription_status")

            product_features = _builder.get(".properties.productProfile.productFeatures")
            if product_features is not None:
                product_features.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.productProfile.productFeatures[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("subscriptionStatus", AAZStrType, ".subscription_status")

            software_assurance = _builder.get(".properties.softwareAssurance")
            if software_assurance is not None:
                software_assurance.set_prop("softwareAssuranceCustomer", AAZBoolType, ".software_assurance_customer")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.esu_profile = AAZObjectType(
                serialized_name="esuProfile",
                flags={"client_flatten": True},
            )
            properties.product_profile = AAZObjectType(
                serialized_name="productProfile",
                flags={"client_flatten": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.software_assurance = AAZObjectType(
                serialized_name="softwareAssurance",
                flags={"client_flatten": True},
            )

            esu_profile = cls._schema_on_200_201.properties.esu_profile
            esu_profile.assigned_license = AAZStrType(
                serialized_name="assignedLicense",
            )
            esu_profile.assigned_license_immutable_id = AAZStrType(
                serialized_name="assignedLicenseImmutableId",
                flags={"read_only": True},
            )
            esu_profile.esu_eligibility = AAZStrType(
                serialized_name="esuEligibility",
                flags={"read_only": True},
            )
            esu_profile.esu_key_state = AAZStrType(
                serialized_name="esuKeyState",
                flags={"read_only": True},
            )
            esu_profile.esu_keys = AAZListType(
                serialized_name="esuKeys",
                flags={"read_only": True},
            )
            esu_profile.server_type = AAZStrType(
                serialized_name="serverType",
                flags={"read_only": True},
            )

            esu_keys = cls._schema_on_200_201.properties.esu_profile.esu_keys
            esu_keys.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.esu_profile.esu_keys.Element
            _element.license_status = AAZIntType(
                serialized_name="licenseStatus",
            )
            _element.sku = AAZStrType()

            product_profile = cls._schema_on_200_201.properties.product_profile
            product_profile.billing_end_date = AAZStrType(
                serialized_name="billingEndDate",
                flags={"read_only": True},
            )
            product_profile.billing_start_date = AAZStrType(
                serialized_name="billingStartDate",
                flags={"read_only": True},
            )
            product_profile.disenrollment_date = AAZStrType(
                serialized_name="disenrollmentDate",
                flags={"read_only": True},
            )
            product_profile.enrollment_date = AAZStrType(
                serialized_name="enrollmentDate",
                flags={"read_only": True},
            )
            product_profile.error = AAZObjectType(
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_error_detail_read(product_profile.error)
            product_profile.product_features = AAZListType(
                serialized_name="productFeatures",
            )
            product_profile.product_type = AAZStrType(
                serialized_name="productType",
            )
            product_profile.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            product_features = cls._schema_on_200_201.properties.product_profile.product_features
            product_features.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.product_profile.product_features.Element
            _element.billing_end_date = AAZStrType(
                serialized_name="billingEndDate",
                flags={"read_only": True},
            )
            _element.billing_start_date = AAZStrType(
                serialized_name="billingStartDate",
                flags={"read_only": True},
            )
            _element.disenrollment_date = AAZStrType(
                serialized_name="disenrollmentDate",
                flags={"read_only": True},
            )
            _element.enrollment_date = AAZStrType(
                serialized_name="enrollmentDate",
                flags={"read_only": True},
            )
            _element.error = AAZObjectType(
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_error_detail_read(_element.error)
            _element.name = AAZStrType()
            _element.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            software_assurance = cls._schema_on_200_201.properties.software_assurance
            software_assurance.software_assurance_customer = AAZBoolType(
                serialized_name="softwareAssuranceCustomer",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType(
            flags={"read_only": True}
        )

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType(
            flags={"read_only": True},
        )
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["Create"]
