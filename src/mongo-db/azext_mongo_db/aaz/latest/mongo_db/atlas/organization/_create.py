# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mongo-db atlas organization create",
)
class Create(AAZCommand):
    """Create an Azure resource that provisions a corresponding MongoDB Atlas organization

    :example: Organizations_CreateOrUpdate
        az mongo-db atlas organization create -name "MyOrganizationResourceName" --resource-group "MyResourceGroup" --location "eastus" --subscription "abcd1234-5678-90ab-cdef-12345678abcd"--user {"first-name":"John","last-name":"Doe","email-address":"test@email.com"}" --marketplace "{"subscription-id":"abcd1234-5678-90ab-cdef-12345678abcd","offer-details":{"publisher-id":"mongodb","offer-id":"mongodb_atlas_azure_native_prod","plan-id":"private_plan","plan-name":"Pay as You Go (Free) (Private)","term-unit":"P1M","term-id":"gmz7xq9ge3py"}}" --partner-properties "{"organization-name":"partner-org-name"}"
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/mongodb.atlas/organizations/{}", "2025-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.organization_name = AAZStrArg(
            options=["-n", "--name", "--organization-name"],
            help="Name of the MongoDB Atlas Organization",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the Azure resource group in which MongoDB Atlas resource is created",
            required=True,
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.marketplace = AAZObjectArg(
            options=["--marketplace"],
            arg_group="Properties",
            help="Marketplace details of the resource.",
        )
        _args_schema.partner_properties = AAZObjectArg(
            options=["--partner-properties"],
            arg_group="Properties",
            help="Properties for MongoDB Atlas Organization",
        )
        _args_schema.user = AAZObjectArg(
            options=["--user"],
            arg_group="Properties",
            help="Details of the user.",
        )

        marketplace = cls._args_schema.marketplace
        marketplace.offer_details = AAZObjectArg(
            options=["offer-details"],
            help="Offer details for MongoDB Atlas offering in Azure Marketplace",
            required=True,
        )
        marketplace.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="Azure subscription id for the the marketplace offer is purchased from",
            required=True,
        )

        offer_details = cls._args_schema.marketplace.offer_details
        offer_details.offer_id = AAZStrArg(
            options=["offer-id"],
            help="Offer Id for the marketplace offer",
            required=True,
        )
        offer_details.plan_id = AAZStrArg(
            options=["plan-id"],
            help="Plan Id for the marketplace offer",
            required=True,
        )
        offer_details.plan_name = AAZStrArg(
            options=["plan-name"],
            help="Plan Name for the marketplace offer",
        )
        offer_details.publisher_id = AAZStrArg(
            options=["publisher-id"],
            help="Publisher Id for the marketplace offer",
            required=True,
        )
        offer_details.term_id = AAZStrArg(
            options=["term-id"],
            help="Term id for the marketplace offer",
        )
        offer_details.term_unit = AAZStrArg(
            options=["term-unit"],
            help="Term Unit for the marketplace offer",
        )

        partner_properties = cls._args_schema.partner_properties
        partner_properties.organization_id = AAZStrArg(
            options=["organization-id"],
            help="Id of the MongoDB Atlas Organization",
        )
        partner_properties.organization_name = AAZStrArg(
            options=["organization-name"],
            help="Name of the MongoDB Atlas Organization",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9 _\\-().,:@+&',]{1,64}$",
                max_length=64,
                min_length=1,
            ),
        )
        partner_properties.redirect_url = AAZStrArg(
            options=["redirect-url"],
            help="Redirect URL for the MongoDB Atlas Organization",
        )

        user = cls._args_schema.user
        user.company_name = AAZStrArg(
            options=["company-name"],
            help="Company Name",
        )
        user.email_address = AAZStrArg(
            options=["email-address"],
            help="Email address of the user",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$",
            ),
        )
        user.first_name = AAZStrArg(
            options=["first-name"],
            help="First name of the user",
            required=True,
        )
        user.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name of the user",
            required=True,
        )
        user.phone_number = AAZStrArg(
            options=["phone-number"],
            help="User's phone number",
        )
        user.upn = AAZStrArg(
            options=["upn"],
            help="User's principal name",
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="MongoDB Atlas Azure Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.OrganizationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/MongoDB.Atlas/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("marketplace", AAZObjectType, ".marketplace", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("partnerProperties", AAZObjectType, ".partner_properties")
                properties.set_prop("user", AAZObjectType, ".user", typ_kwargs={"flags": {"required": True}})

            marketplace = _builder.get(".properties.marketplace")
            if marketplace is not None:
                marketplace.set_prop("offerDetails", AAZObjectType, ".offer_details", typ_kwargs={"flags": {"required": True}})
                marketplace.set_prop("subscriptionId", AAZStrType, ".subscription_id", typ_kwargs={"flags": {"required": True}})

            offer_details = _builder.get(".properties.marketplace.offerDetails")
            if offer_details is not None:
                offer_details.set_prop("offerId", AAZStrType, ".offer_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planId", AAZStrType, ".plan_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planName", AAZStrType, ".plan_name")
                offer_details.set_prop("publisherId", AAZStrType, ".publisher_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("termId", AAZStrType, ".term_id")
                offer_details.set_prop("termUnit", AAZStrType, ".term_unit")

            partner_properties = _builder.get(".properties.partnerProperties")
            if partner_properties is not None:
                partner_properties.set_prop("organizationId", AAZStrType, ".organization_id")
                partner_properties.set_prop("organizationName", AAZStrType, ".organization_name", typ_kwargs={"flags": {"required": True}})
                partner_properties.set_prop("redirectUrl", AAZStrType, ".redirect_url")

            user = _builder.get(".properties.user")
            if user is not None:
                user.set_prop("companyName", AAZStrType, ".company_name")
                user.set_prop("emailAddress", AAZStrType, ".email_address", typ_kwargs={"flags": {"required": True}})
                user.set_prop("firstName", AAZStrType, ".first_name", typ_kwargs={"flags": {"required": True}})
                user.set_prop("lastName", AAZStrType, ".last_name", typ_kwargs={"flags": {"required": True}})
                user.set_prop("phoneNumber", AAZStrType, ".phone_number")
                user.set_prop("upn", AAZStrType, ".upn")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZIdentityObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.marketplace = AAZObjectType(
                flags={"required": True},
            )
            properties.partner_properties = AAZObjectType(
                serialized_name="partnerProperties",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.user = AAZObjectType(
                flags={"required": True},
            )

            marketplace = cls._schema_on_200_201.properties.marketplace
            marketplace.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )
            marketplace.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )
            marketplace.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
                flags={"read_only": True},
            )

            offer_details = cls._schema_on_200_201.properties.marketplace.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            partner_properties = cls._schema_on_200_201.properties.partner_properties
            partner_properties.organization_id = AAZStrType(
                serialized_name="organizationId",
            )
            partner_properties.organization_name = AAZStrType(
                serialized_name="organizationName",
                flags={"required": True},
            )
            partner_properties.redirect_url = AAZStrType(
                serialized_name="redirectUrl",
            )

            user = cls._schema_on_200_201.properties.user
            user.company_name = AAZStrType(
                serialized_name="companyName",
            )
            user.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"required": True},
            )
            user.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            user.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            user.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user.upn = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
