# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Update(AAZCommand):
    """Update blueprint artifact.
    """

    _aaz_info = {
        "version": "2018-11-01-preview",
        "resources": [
            ["mgmt-plane", "/{resourcescope}/providers/microsoft.blueprint/blueprints/{}/artifacts/{}", "2018-11-01-preview"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the blueprint artifact.",
            required=True,
        )
        _args_schema.blueprint_name = AAZStrArg(
            options=["--blueprint-name"],
            help="Name of the blueprint definition.",
            required=True,
        )
        _args_schema.resource_scope = AAZStrArg(
            options=["--resource-scope"],
            help="The scope of the resource. Valid scopes are: management group (format: '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format: '/subscriptions/{subscriptionId}').",
            required=True,
        )

        # define Arg Group "Artifact"

        _args_schema = cls._args_schema
        _args_schema.policy_assignment = AAZObjectArg(
            options=["--policy-assignment"],
            arg_group="Artifact",
        )
        _args_schema.role_assignment = AAZObjectArg(
            options=["--role-assignment"],
            arg_group="Artifact",
        )
        _args_schema.template = AAZObjectArg(
            options=["--template"],
            arg_group="Artifact",
        )

        policy_assignment = cls._args_schema.policy_assignment
        policy_assignment.depends_on = AAZListArg(
            options=["depends-on"],
            help="Artifacts which need to be deployed before the specified artifact.",
            nullable=True,
        )
        policy_assignment.description = AAZStrArg(
            options=["description"],
            help="Multi-line explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=500,
            ),
        )
        policy_assignment.display_name = AAZStrArg(
            options=["display-name"],
            help="One-liner string explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        policy_assignment.parameters = AAZDictArg(
            options=["parameters"],
            help="Parameter values for the policy definition.",
        )
        policy_assignment.policy_definition_id = AAZStrArg(
            options=["policy-definition-id"],
            help="Azure resource ID of the policy definition.",
        )
        policy_assignment.resource_group = AAZStrArg(
            options=["resource-group"],
            help="Name of the resource group placeholder to which the policy will be assigned.",
            nullable=True,
        )

        depends_on = cls._args_schema.policy_assignment.depends_on
        depends_on.Element = AAZStrArg(
            nullable=True,
        )

        parameters = cls._args_schema.policy_assignment.parameters
        parameters.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_parameter_value_update(parameters.Element)

        role_assignment = cls._args_schema.role_assignment
        role_assignment.depends_on = AAZListArg(
            options=["depends-on"],
            help="Artifacts which need to be deployed before the specified artifact.",
            nullable=True,
        )
        role_assignment.description = AAZStrArg(
            options=["description"],
            help="Multi-line explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=500,
            ),
        )
        role_assignment.display_name = AAZStrArg(
            options=["display-name"],
            help="One-liner string explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        role_assignment.resource_group = AAZStrArg(
            options=["resource-group"],
            help="RoleAssignment will be scope to this resourceGroup. If empty, it scopes to the subscription.",
            nullable=True,
        )
        role_assignment.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
            help="Azure resource ID of the RoleDefinition.",
        )

        depends_on = cls._args_schema.role_assignment.depends_on
        depends_on.Element = AAZStrArg(
            nullable=True,
        )

        template = cls._args_schema.template
        template.depends_on = AAZListArg(
            options=["depends-on"],
            help="Artifacts which need to be deployed before the specified artifact.",
            nullable=True,
        )
        template.description = AAZStrArg(
            options=["description"],
            help="Multi-line explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=500,
            ),
        )
        template.display_name = AAZStrArg(
            options=["display-name"],
            help="One-liner string explain this resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        template.parameters = AAZDictArg(
            options=["parameters"],
            help="Resource Manager template blueprint artifact parameter values.",
        )
        template.resource_group = AAZStrArg(
            options=["resource-group"],
            help="If applicable, the name of the resource group placeholder to which the Resource Manager template blueprint artifact will be deployed.",
            nullable=True,
        )

        depends_on = cls._args_schema.template.depends_on
        depends_on.Element = AAZStrArg(
            nullable=True,
        )

        parameters = cls._args_schema.template.parameters
        parameters.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_parameter_value_update(parameters.Element)
        return cls._args_schema

    _args_parameter_value_update = None

    @classmethod
    def _build_args_parameter_value_update(cls, _schema):
        if cls._args_parameter_value_update is not None:
            _schema.reference = cls._args_parameter_value_update.reference
            return

        cls._args_parameter_value_update = AAZObjectArg(
            nullable=True,
        )

        parameter_value_update = cls._args_parameter_value_update
        parameter_value_update.reference = AAZObjectArg(
            options=["reference"],
            help="Parameter value as reference type.",
            nullable=True,
        )

        reference = cls._args_parameter_value_update.reference
        reference.key_vault = AAZObjectArg(
            options=["key-vault"],
            help="Specifies the reference to a given Azure Key Vault.",
        )
        reference.secret_name = AAZStrArg(
            options=["secret-name"],
            help="Name of the secret.",
        )
        reference.secret_version = AAZStrArg(
            options=["secret-version"],
            help="The version of the secret to use. If left blank, the latest version of the secret is used.",
            nullable=True,
        )

        key_vault = cls._args_parameter_value_update.reference.key_vault
        key_vault.id = AAZStrArg(
            options=["id"],
            help="Azure resource ID of the Key Vault.",
        )

        _schema.reference = cls._args_parameter_value_update.reference

    def _execute_operations(self):
        self.pre_operations()
        self.ArtifactsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.ArtifactsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ArtifactsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "artifactName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "blueprintName", self.ctx.args.blueprint_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceScope", self.ctx.args.resource_scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_artifact_read(cls._schema_on_200)

            return cls._schema_on_200

    class ArtifactsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [201]:
                return self.on_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceScope}/providers/Microsoft.Blueprint/blueprints/{blueprintName}/artifacts/{artifactName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "artifactName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "blueprintName", self.ctx.args.blueprint_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceScope", self.ctx.args.resource_scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_201
            )

        _schema_on_201 = None

        @classmethod
        def _build_schema_on_201(cls):
            if cls._schema_on_201 is not None:
                return cls._schema_on_201

            cls._schema_on_201 = AAZObjectType()
            _UpdateHelper._build_schema_artifact_read(cls._schema_on_201)

            return cls._schema_on_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_const("kind", "policyAssignment", AAZStrType, ".policy_assignment", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("kind", "roleAssignment", AAZStrType, ".role_assignment", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("kind", "template", AAZStrType, ".template", typ_kwargs={"flags": {"required": True}})
            _builder.discriminate_by("kind", "policyAssignment")
            _builder.discriminate_by("kind", "roleAssignment")
            _builder.discriminate_by("kind", "template")

            disc_policy_assignment = _builder.get("{kind:policyAssignment}")
            if disc_policy_assignment is not None:
                disc_policy_assignment.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:policyAssignment}.properties")
            if properties is not None:
                properties.set_prop("dependsOn", AAZListType, ".policy_assignment.depends_on")
                properties.set_prop("description", AAZStrType, ".policy_assignment.description")
                properties.set_prop("displayName", AAZStrType, ".policy_assignment.display_name")
                properties.set_prop("parameters", AAZDictType, ".policy_assignment.parameters", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("policyDefinitionId", AAZStrType, ".policy_assignment.policy_definition_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("resourceGroup", AAZStrType, ".policy_assignment.resource_group")

            depends_on = _builder.get("{kind:policyAssignment}.properties.dependsOn")
            if depends_on is not None:
                depends_on.set_elements(AAZStrType, ".")

            parameters = _builder.get("{kind:policyAssignment}.properties.parameters")
            if parameters is not None:
                _UpdateHelper._build_schema_parameter_value_update(parameters.set_elements(AAZObjectType, "."))

            disc_role_assignment = _builder.get("{kind:roleAssignment}")
            if disc_role_assignment is not None:
                disc_role_assignment.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:roleAssignment}.properties")
            if properties is not None:
                properties.set_prop("dependsOn", AAZListType, ".role_assignment.depends_on")
                properties.set_prop("description", AAZStrType, ".role_assignment.description")
                properties.set_prop("displayName", AAZStrType, ".role_assignment.display_name")
                properties.set_prop("resourceGroup", AAZStrType, ".role_assignment.resource_group")
                properties.set_prop("roleDefinitionId", AAZStrType, ".role_assignment.role_definition_id", typ_kwargs={"flags": {"required": True}})

            depends_on = _builder.get("{kind:roleAssignment}.properties.dependsOn")
            if depends_on is not None:
                depends_on.set_elements(AAZStrType, ".")

            disc_template = _builder.get("{kind:template}")
            if disc_template is not None:
                disc_template.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:template}.properties")
            if properties is not None:
                properties.set_prop("dependsOn", AAZListType, ".template.depends_on")
                properties.set_prop("description", AAZStrType, ".template.description")
                properties.set_prop("displayName", AAZStrType, ".template.display_name")
                properties.set_prop("parameters", AAZDictType, ".template.parameters", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("resourceGroup", AAZStrType, ".template.resource_group")

            depends_on = _builder.get("{kind:template}.properties.dependsOn")
            if depends_on is not None:
                depends_on.set_elements(AAZStrType, ".")

            parameters = _builder.get("{kind:template}.properties.parameters")
            if parameters is not None:
                _UpdateHelper._build_schema_parameter_value_update(parameters.set_elements(AAZObjectType, "."))

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_parameter_value_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("reference", AAZObjectType, ".reference")

        reference = _builder.get(".reference")
        if reference is not None:
            reference.set_prop("keyVault", AAZObjectType, ".key_vault", typ_kwargs={"flags": {"required": True}})
            reference.set_prop("secretName", AAZStrType, ".secret_name", typ_kwargs={"flags": {"required": True}})
            reference.set_prop("secretVersion", AAZStrType, ".secret_version")

        key_vault = _builder.get(".reference.keyVault")
        if key_vault is not None:
            key_vault.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

    _schema_artifact_read = None

    @classmethod
    def _build_schema_artifact_read(cls, _schema):
        if cls._schema_artifact_read is not None:
            _schema.id = cls._schema_artifact_read.id
            _schema.kind = cls._schema_artifact_read.kind
            _schema.name = cls._schema_artifact_read.name
            _schema.type = cls._schema_artifact_read.type
            _schema.discriminate_by(
                "kind",
                "policyAssignment",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "policyAssignment",
                )
            )
            _schema.discriminate_by(
                "kind",
                "roleAssignment",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "roleAssignment",
                )
            )
            _schema.discriminate_by(
                "kind",
                "template",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "template",
                )
            )
            return

        cls._schema_artifact_read = _schema_artifact_read = AAZObjectType()

        artifact_read = _schema_artifact_read
        artifact_read.id = AAZStrType(
            flags={"read_only": True},
        )
        artifact_read.kind = AAZStrType(
            flags={"required": True},
        )
        artifact_read.name = AAZStrType(
            flags={"read_only": True},
        )
        artifact_read.type = AAZStrType(
            flags={"read_only": True},
        )

        disc_policy_assignment = _schema_artifact_read.discriminate_by("kind", "policyAssignment")
        disc_policy_assignment.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )

        properties = _schema_artifact_read.discriminate_by("kind", "policyAssignment").properties
        properties.depends_on = AAZListType(
            serialized_name="dependsOn",
        )
        properties.description = AAZStrType()
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.parameters = AAZDictType(
            flags={"required": True},
        )
        properties.policy_definition_id = AAZStrType(
            serialized_name="policyDefinitionId",
            flags={"required": True},
        )
        properties.resource_group = AAZStrType(
            serialized_name="resourceGroup",
        )

        depends_on = _schema_artifact_read.discriminate_by("kind", "policyAssignment").properties.depends_on
        depends_on.Element = AAZStrType()

        parameters = _schema_artifact_read.discriminate_by("kind", "policyAssignment").properties.parameters
        parameters.Element = AAZObjectType()
        cls._build_schema_parameter_value_read(parameters.Element)

        disc_role_assignment = _schema_artifact_read.discriminate_by("kind", "roleAssignment")
        disc_role_assignment.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )

        properties = _schema_artifact_read.discriminate_by("kind", "roleAssignment").properties
        properties.depends_on = AAZListType(
            serialized_name="dependsOn",
        )
        properties.description = AAZStrType()
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.resource_group = AAZStrType(
            serialized_name="resourceGroup",
        )
        properties.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
            flags={"required": True},
        )

        depends_on = _schema_artifact_read.discriminate_by("kind", "roleAssignment").properties.depends_on
        depends_on.Element = AAZStrType()

        disc_template = _schema_artifact_read.discriminate_by("kind", "template")
        disc_template.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )

        properties = _schema_artifact_read.discriminate_by("kind", "template").properties
        properties.depends_on = AAZListType(
            serialized_name="dependsOn",
        )
        properties.description = AAZStrType()
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.parameters = AAZDictType(
            flags={"required": True},
        )
        properties.resource_group = AAZStrType(
            serialized_name="resourceGroup",
        )

        depends_on = _schema_artifact_read.discriminate_by("kind", "template").properties.depends_on
        depends_on.Element = AAZStrType()

        parameters = _schema_artifact_read.discriminate_by("kind", "template").properties.parameters
        parameters.Element = AAZObjectType()
        cls._build_schema_parameter_value_read(parameters.Element)

        _schema.id = cls._schema_artifact_read.id
        _schema.kind = cls._schema_artifact_read.kind
        _schema.name = cls._schema_artifact_read.name
        _schema.type = cls._schema_artifact_read.type
        _schema.discriminate_by(
                "kind",
                "policyAssignment",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "policyAssignment",
                )
            )
        _schema.discriminate_by(
                "kind",
                "roleAssignment",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "roleAssignment",
                )
            )
        _schema.discriminate_by(
                "kind",
                "template",
                cls._schema_artifact_read.discriminate_by(
                    "kind",
                    "template",
                )
            )

    _schema_parameter_value_read = None

    @classmethod
    def _build_schema_parameter_value_read(cls, _schema):
        if cls._schema_parameter_value_read is not None:
            _schema.reference = cls._schema_parameter_value_read.reference
            return

        cls._schema_parameter_value_read = _schema_parameter_value_read = AAZObjectType()

        parameter_value_read = _schema_parameter_value_read
        parameter_value_read.reference = AAZObjectType()

        reference = _schema_parameter_value_read.reference
        reference.key_vault = AAZObjectType(
            serialized_name="keyVault",
            flags={"required": True},
        )
        reference.secret_name = AAZStrType(
            serialized_name="secretName",
            flags={"required": True},
        )
        reference.secret_version = AAZStrType(
            serialized_name="secretVersion",
        )

        key_vault = _schema_parameter_value_read.reference.key_vault
        key_vault.id = AAZStrType(
            flags={"required": True},
        )

        _schema.reference = cls._schema_parameter_value_read.reference


__all__ = ["Update"]
