# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create a script execution in a private cloud
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}/scriptexecutions/{}", "2023-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.private_cloud = AAZStrArg(
            options=["-c", "--private-cloud"],
            help="Name of the private cloud",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.script_execution_name = AAZStrArg(
            options=["-n", "--name", "--script-execution-name"],
            help="Name of the user-invoked script execution resource",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._]+$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.failure_reason = AAZStrArg(
            options=["--failure-reason"],
            arg_group="Properties",
            help="Error message if the script was able to run, but if the script itself had errors or powershell threw an exception",
        )
        _args_schema.hidden_parameters = AAZListArg(
            options=["--hidden-parameters"],
            singular_options=["--hidden-parameter"],
            arg_group="Properties",
            help="Parameters that will be hidden/not visible to ARM, such as passwords and credentials",
        )
        _args_schema.named_outputs = AAZFreeFormDictArg(
            options=["--named-outputs"],
            arg_group="Properties",
            help="User-defined dictionary.",
        )
        _args_schema.output = AAZListArg(
            options=["--out", "--output"],
            arg_group="Properties",
            help="Standard output stream from the powershell execution",
        )
        _args_schema.parameters = AAZListArg(
            options=["--parameters"],
            singular_options=["-p", "--parameter"],
            arg_group="Properties",
            help="Parameters the script will accept",
        )
        _args_schema.retention = AAZStrArg(
            options=["--retention"],
            arg_group="Properties",
            help="Time to live for the resource. If not provided, will be available for 60 days",
        )
        _args_schema.script_cmdlet_id = AAZStrArg(
            options=["--script-cmdlet-id"],
            arg_group="Properties",
            help="A reference to the script cmdlet resource if user is running a AVS script",
        )
        _args_schema.timeout = AAZStrArg(
            options=["--timeout"],
            arg_group="Properties",
            help="Time limit for execution",
            required=True,
        )

        hidden_parameters = cls._args_schema.hidden_parameters
        hidden_parameters.Element = AAZObjectArg()
        cls._build_args_script_execution_parameter_create(hidden_parameters.Element)

        output = cls._args_schema.output
        output.Element = AAZStrArg()

        parameters = cls._args_schema.parameters
        parameters.Element = AAZObjectArg()
        cls._build_args_script_execution_parameter_create(parameters.Element)
        return cls._args_schema

    _args_script_execution_parameter_create = None

    @classmethod
    def _build_args_script_execution_parameter_create(cls, _schema):
        if cls._args_script_execution_parameter_create is not None:
            _schema.credential = cls._args_script_execution_parameter_create.credential
            _schema.name = cls._args_script_execution_parameter_create.name
            _schema.secure_value = cls._args_script_execution_parameter_create.secure_value
            _schema.value = cls._args_script_execution_parameter_create.value
            return

        cls._args_script_execution_parameter_create = AAZObjectArg()

        script_execution_parameter_create = cls._args_script_execution_parameter_create
        script_execution_parameter_create.credential = AAZObjectArg(
            options=["credential"],
        )
        script_execution_parameter_create.secure_value = AAZObjectArg(
            options=["secure-value"],
        )
        script_execution_parameter_create.value = AAZObjectArg(
            options=["value"],
        )
        script_execution_parameter_create.name = AAZStrArg(
            options=["name"],
            help="The parameter name",
            required=True,
        )

        credential = cls._args_script_execution_parameter_create.credential
        credential.password = AAZStrArg(
            options=["password"],
            help="password for login",
        )
        credential.username = AAZStrArg(
            options=["username"],
            help="username for login",
        )

        secure_value = cls._args_script_execution_parameter_create.secure_value
        secure_value.secure_value = AAZStrArg(
            options=["secure-value"],
            help="A secure value for the passed parameter, not to be stored in logs",
        )

        value = cls._args_script_execution_parameter_create.value
        value.value = AAZStrArg(
            options=["value"],
            help="The value for the passed parameter",
        )

        _schema.credential = cls._args_script_execution_parameter_create.credential
        _schema.name = cls._args_script_execution_parameter_create.name
        _schema.secure_value = cls._args_script_execution_parameter_create.secure_value
        _schema.value = cls._args_script_execution_parameter_create.value

    def _execute_operations(self):
        self.pre_operations()
        yield self.ScriptExecutionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ScriptExecutionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/scriptExecutions/{scriptExecutionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "privateCloudName", self.ctx.args.private_cloud,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "scriptExecutionName", self.ctx.args.script_execution_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("failureReason", AAZStrType, ".failure_reason")
                properties.set_prop("hiddenParameters", AAZListType, ".hidden_parameters")
                properties.set_prop("namedOutputs", AAZFreeFormDictType, ".named_outputs")
                properties.set_prop("output", AAZListType, ".output")
                properties.set_prop("parameters", AAZListType, ".parameters")
                properties.set_prop("retention", AAZStrType, ".retention")
                properties.set_prop("scriptCmdletId", AAZStrType, ".script_cmdlet_id")
                properties.set_prop("timeout", AAZStrType, ".timeout", typ_kwargs={"flags": {"required": True}})

            hidden_parameters = _builder.get(".properties.hiddenParameters")
            if hidden_parameters is not None:
                _CreateHelper._build_schema_script_execution_parameter_create(hidden_parameters.set_elements(AAZObjectType, "."))

            named_outputs = _builder.get(".properties.namedOutputs")
            if named_outputs is not None:
                named_outputs.set_anytype_elements(".")

            output = _builder.get(".properties.output")
            if output is not None:
                output.set_elements(AAZStrType, ".")

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                _CreateHelper._build_schema_script_execution_parameter_create(parameters.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.errors = AAZListType(
                flags={"read_only": True},
            )
            properties.failure_reason = AAZStrType(
                serialized_name="failureReason",
            )
            properties.finished_at = AAZStrType(
                serialized_name="finishedAt",
                flags={"read_only": True},
            )
            properties.hidden_parameters = AAZListType(
                serialized_name="hiddenParameters",
            )
            properties.information = AAZListType(
                flags={"read_only": True},
            )
            properties.named_outputs = AAZFreeFormDictType(
                serialized_name="namedOutputs",
            )
            properties.output = AAZListType()
            properties.parameters = AAZListType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.retention = AAZStrType()
            properties.script_cmdlet_id = AAZStrType(
                serialized_name="scriptCmdletId",
            )
            properties.started_at = AAZStrType(
                serialized_name="startedAt",
                flags={"read_only": True},
            )
            properties.submitted_at = AAZStrType(
                serialized_name="submittedAt",
                flags={"read_only": True},
            )
            properties.timeout = AAZStrType(
                flags={"required": True},
            )
            properties.warnings = AAZListType(
                flags={"read_only": True},
            )

            errors = cls._schema_on_200_201.properties.errors
            errors.Element = AAZStrType()

            hidden_parameters = cls._schema_on_200_201.properties.hidden_parameters
            hidden_parameters.Element = AAZObjectType()
            _CreateHelper._build_schema_script_execution_parameter_read(hidden_parameters.Element)

            information = cls._schema_on_200_201.properties.information
            information.Element = AAZStrType()

            output = cls._schema_on_200_201.properties.output
            output.Element = AAZStrType()

            parameters = cls._schema_on_200_201.properties.parameters
            parameters.Element = AAZObjectType()
            _CreateHelper._build_schema_script_execution_parameter_read(parameters.Element)

            warnings = cls._schema_on_200_201.properties.warnings
            warnings.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_script_execution_parameter_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
        _builder.set_const("type", "Credential", AAZStrType, ".credential", typ_kwargs={"flags": {"required": True}})
        _builder.set_const("type", "SecureValue", AAZStrType, ".secure_value", typ_kwargs={"flags": {"required": True}})
        _builder.set_const("type", "Value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})
        _builder.discriminate_by("type", "Credential")
        _builder.discriminate_by("type", "SecureValue")
        _builder.discriminate_by("type", "Value")

        disc_credential = _builder.get("{type:Credential}")
        if disc_credential is not None:
            disc_credential.set_prop("password", AAZStrType, ".credential.password")
            disc_credential.set_prop("username", AAZStrType, ".credential.username")

        disc_secure_value = _builder.get("{type:SecureValue}")
        if disc_secure_value is not None:
            disc_secure_value.set_prop("secureValue", AAZStrType, ".secure_value.secure_value", typ_kwargs={"flags": {"secret": True}})

        disc_value = _builder.get("{type:Value}")
        if disc_value is not None:
            disc_value.set_prop("value", AAZStrType, ".value.value")

    _schema_script_execution_parameter_read = None

    @classmethod
    def _build_schema_script_execution_parameter_read(cls, _schema):
        if cls._schema_script_execution_parameter_read is not None:
            _schema.name = cls._schema_script_execution_parameter_read.name
            _schema.type = cls._schema_script_execution_parameter_read.type
            _schema.discriminate_by(
                "type",
                "Credential",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "Credential",
                )
            )
            _schema.discriminate_by(
                "type",
                "SecureValue",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "SecureValue",
                )
            )
            _schema.discriminate_by(
                "type",
                "Value",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "Value",
                )
            )
            return

        cls._schema_script_execution_parameter_read = _schema_script_execution_parameter_read = AAZObjectType()

        script_execution_parameter_read = _schema_script_execution_parameter_read
        script_execution_parameter_read.name = AAZStrType(
            flags={"required": True},
        )
        script_execution_parameter_read.type = AAZStrType(
            flags={"required": True},
        )

        disc_credential = _schema_script_execution_parameter_read.discriminate_by("type", "Credential")
        disc_credential.password = AAZStrType()
        disc_credential.username = AAZStrType()

        disc_secure_value = _schema_script_execution_parameter_read.discriminate_by("type", "SecureValue")
        disc_secure_value.secure_value = AAZStrType(
            serialized_name="secureValue",
            flags={"secret": True},
        )

        disc_value = _schema_script_execution_parameter_read.discriminate_by("type", "Value")
        disc_value.value = AAZStrType()

        _schema.name = cls._schema_script_execution_parameter_read.name
        _schema.type = cls._schema_script_execution_parameter_read.type
        _schema.discriminate_by(
                "type",
                "Credential",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "Credential",
                )
            )
        _schema.discriminate_by(
                "type",
                "SecureValue",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "SecureValue",
                )
            )
        _schema.discriminate_by(
                "type",
                "Value",
                cls._schema_script_execution_parameter_read.discriminate_by(
                    "type",
                    "Value",
                )
            )


__all__ = ["Create"]
