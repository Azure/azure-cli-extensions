# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create a placement policy in a private cloud cluster
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.avs/privateclouds/{}/clusters/{}/placementpolicies/{}", "2023-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            help="Name of the cluster in the private cloud",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._]+$",
            ),
        )
        _args_schema.placement_policy_name = AAZStrArg(
            options=["-n", "--name", "--placement-policy-name"],
            help="Name of the VMware vSphere Distributed Resource Scheduler (DRS) placement policy",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._]+$",
            ),
        )
        _args_schema.private_cloud = AAZStrArg(
            options=["-c", "--private-cloud"],
            help="Name of the private cloud",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._]+$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.vm_host = AAZObjectArg(
            options=["--vm-host"],
            arg_group="Properties",
            help="VM-Host placement policy properties",
        )
        _args_schema.vm_vm = AAZObjectArg(
            options=["--vm-vm"],
            arg_group="Properties",
            help="vm-vm placement policy properties",
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="Display name of the placement policy",
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="Whether the placement policy is enabled or disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        vm_host = cls._args_schema.vm_host
        vm_host.affinity_strength = AAZStrArg(
            options=["affinity-strength"],
            help="vm-host placement policy affinity strength (should/must)",
            enum={"Must": "Must", "Should": "Should"},
        )
        vm_host.affinity_type = AAZStrArg(
            options=["affinity-type"],
            help="placement policy affinity type",
            required=True,
            enum={"Affinity": "Affinity", "AntiAffinity": "AntiAffinity"},
        )
        vm_host.azure_hybrid_benefit = AAZStrArg(
            options=["azure-hybrid-benefit"],
            help="placement policy azure hybrid benefit opt-in type",
            enum={"None": "None", "SqlHost": "SqlHost"},
        )
        vm_host.host_members = AAZListArg(
            options=["host-members"],
            help="Host members list",
            required=True,
        )
        vm_host.vm_members = AAZListArg(
            options=["vm-members"],
            help="Virtual machine members list",
            required=True,
        )

        host_members = cls._args_schema.vm_host.host_members
        host_members.Element = AAZStrArg()

        vm_members = cls._args_schema.vm_host.vm_members
        vm_members.Element = AAZStrArg()

        vm_vm = cls._args_schema.vm_vm
        vm_vm.affinity_type = AAZStrArg(
            options=["affinity-type"],
            help="placement policy affinity type",
            required=True,
            enum={"Affinity": "Affinity", "AntiAffinity": "AntiAffinity"},
        )
        vm_vm.vm_members = AAZListArg(
            options=["vm-members"],
            help="Virtual machine members list",
            required=True,
        )

        vm_members = cls._args_schema.vm_vm.vm_members
        vm_members.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.PlacementPoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PlacementPoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/clusters/{clusterName}/placementPolicies/{placementPolicyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "placementPolicyName", self.ctx.args.placement_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "privateCloudName", self.ctx.args.private_cloud,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("state", AAZStrType, ".state")
                properties.set_const("type", "VmHost", AAZStrType, ".vm_host", typ_kwargs={"flags": {"required": True}})
                properties.set_const("type", "VmVm", AAZStrType, ".vm_vm", typ_kwargs={"flags": {"required": True}})
                properties.discriminate_by("type", "VmHost")
                properties.discriminate_by("type", "VmVm")

            disc_vm_host = _builder.get(".properties{type:VmHost}")
            if disc_vm_host is not None:
                disc_vm_host.set_prop("affinityStrength", AAZStrType, ".vm_host.affinity_strength")
                disc_vm_host.set_prop("affinityType", AAZStrType, ".vm_host.affinity_type", typ_kwargs={"flags": {"required": True}})
                disc_vm_host.set_prop("azureHybridBenefitType", AAZStrType, ".vm_host.azure_hybrid_benefit")
                disc_vm_host.set_prop("hostMembers", AAZListType, ".vm_host.host_members", typ_kwargs={"flags": {"required": True}})
                disc_vm_host.set_prop("vmMembers", AAZListType, ".vm_host.vm_members", typ_kwargs={"flags": {"required": True}})

            host_members = _builder.get(".properties{type:VmHost}.hostMembers")
            if host_members is not None:
                host_members.set_elements(AAZStrType, ".")

            vm_members = _builder.get(".properties{type:VmHost}.vmMembers")
            if vm_members is not None:
                vm_members.set_elements(AAZStrType, ".")

            disc_vm_vm = _builder.get(".properties{type:VmVm}")
            if disc_vm_vm is not None:
                disc_vm_vm.set_prop("affinityType", AAZStrType, ".vm_vm.affinity_type", typ_kwargs={"flags": {"required": True}})
                disc_vm_vm.set_prop("vmMembers", AAZListType, ".vm_vm.vm_members", typ_kwargs={"flags": {"required": True}})

            vm_members = _builder.get(".properties{type:VmVm}.vmMembers")
            if vm_members is not None:
                vm_members.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.state = AAZStrType()
            properties.type = AAZStrType(
                flags={"required": True},
            )

            disc_vm_host = cls._schema_on_200_201.properties.discriminate_by("type", "VmHost")
            disc_vm_host.affinity_strength = AAZStrType(
                serialized_name="affinityStrength",
            )
            disc_vm_host.affinity_type = AAZStrType(
                serialized_name="affinityType",
                flags={"required": True},
            )
            disc_vm_host.azure_hybrid_benefit_type = AAZStrType(
                serialized_name="azureHybridBenefitType",
            )
            disc_vm_host.host_members = AAZListType(
                serialized_name="hostMembers",
                flags={"required": True},
            )
            disc_vm_host.vm_members = AAZListType(
                serialized_name="vmMembers",
                flags={"required": True},
            )

            host_members = cls._schema_on_200_201.properties.discriminate_by("type", "VmHost").host_members
            host_members.Element = AAZStrType()

            vm_members = cls._schema_on_200_201.properties.discriminate_by("type", "VmHost").vm_members
            vm_members.Element = AAZStrType()

            disc_vm_vm = cls._schema_on_200_201.properties.discriminate_by("type", "VmVm")
            disc_vm_vm.affinity_type = AAZStrType(
                serialized_name="affinityType",
                flags={"required": True},
            )
            disc_vm_vm.vm_members = AAZListType(
                serialized_name="vmMembers",
                flags={"required": True},
            )

            vm_members = cls._schema_on_200_201.properties.discriminate_by("type", "VmVm").vm_members
            vm_members.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
