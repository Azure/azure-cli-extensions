# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import base64
import json
import os

from azext_attestation.generated._client_factory import cf_attestation_provider
from azext_attestation.manual._client_factory import cf_policy_certificates
from azext_attestation.vendored_sdks.azure_attestation.models._attestation_client_enums import TeeKind
from azext_attestation.vendored_sdks.azure_attestation.models._models_py3 import \
    AttestOpenEnclaveRequest, RuntimeData, InitTimeData
from azext_attestation.vendored_sdks.azure_mgmt_attestation.models import JsonWebKey

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.serialization import Encoding
from cryptography.x509 import load_pem_x509_certificate
from jwcrypto.jwk import JWK
from jwcrypto.jws import JWS
from knack.cli import CLIError


tee_mapping = {
    TeeKind.tpm: 'TPM',
    TeeKind.sgx_intel_sdk: 'SgxEnclave',
    TeeKind.sgx_open_enclave_sdk: 'OpenEnclave'
}


def attestation_attestation_provider_show(client,
                                          resource_group_name=None,
                                          provider_name=None):
    """ Show the status of Attestation Provider. """
    return client.get(resource_group_name=resource_group_name,
                      provider_name=provider_name)


def _b64url_to_b64(s):
    return s.replace('-', '+').replace('_', '/') + ('=' * (4 - len(s) % 4) if len(s) % 4 else '')


def _b64_to_b64url(s):
    return s.rstrip('=').replace('+', '-').replace('/', '_')


def _b64_padding(s):
    return s + ('=' * (4 - len(s) % 4) if len(s) % 4 else '')


def attestation_attestation_provider_create(client,
                                            resource_group_name,
                                            provider_name,
                                            location,
                                            tags=None,
                                            certs_input_path=None):

    certs = []
    if not certs_input_path:
        certs_input_path = []

    for p in certs_input_path:
        expand_path = os.path.expanduser(p)
        if not os.path.exists(expand_path):
            raise CLIError('Path "{}" does not exist.'.format(expand_path))
        if not os.path.isfile(expand_path):
            raise CLIError('"{}" is not a valid file path.'.format(expand_path))

        with open(expand_path, 'rb') as f:
            pem_data = f.read()

        raw_jwk = JWK.from_pem(pem_data)
        jwk = JsonWebKey(kty=raw_jwk.key_type, alg='RS256', use='sig')
        cert = load_pem_x509_certificate(pem_data, backend=default_backend())
        jwk.x5c = [base64.b64encode(cert.public_bytes(Encoding.DER)).decode('ascii')]
        certs.append(jwk)

    return client.create(resource_group_name=resource_group_name,
                         provider_name=provider_name,
                         location=location,
                         tags=tags,
                         certs=certs)


def attestation_attestation_provider_delete(client,
                                            resource_group_name=None,
                                            provider_name=None):
    return client.delete(resource_group_name=resource_group_name,
                         provider_name=provider_name)


def add_signer(cmd, client, signer, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    token = client.add(tenant_base_url=provider.attest_uri, policy_certificate_to_add=signer)
    result = {'Jwt': token}

    if token:
        import jwt
        header = jwt.get_unverified_header(token)
        result.update({
            'Algorithm': header.get('alg', ''),
            'JKU': header.get('jku', '')
        })
        body = jwt.decode(token, verify=False)
        result['Certificates'] = body.get('aas-policyCertificates', {}).get('keys', [])
        result['CertificateCount'] = len(result['Certificates'])

    return result


def remove_signer(cmd, client, signer, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    client.remove(tenant_base_url=provider.attest_uri, policy_certificate_to_remove=signer)
    return list_signers(cmd, client, resource_group_name, provider_name)


def list_signers(cmd, client, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    signers = client.get(tenant_base_url=provider.attest_uri)
    token = json.loads(signers.replace('\'', '"')).get('token')
    result = {'Jwt': token}

    if token:
        import jwt
        header = jwt.get_unverified_header(token)
        result.update({
            'Algorithm': header.get('alg', ''),
            'JKU': header.get('jku', '')
        })
        body = jwt.decode(token, verify=False)
        result['Certificates'] = body.get('x-ms-policy-certificates', {}).get('keys', [])
        result['CertificateCount'] = len(result['Certificates'])

    return result


def get_policy(cmd, client, attestation_type, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    token = client.get(tenant_base_url=provider.attest_uri, tee=tee_mapping[attestation_type]).token
    result = {}

    if token:
        import jwt
        policy = jwt.decode(token, verify=False).get('x-ms-policy', '')
        result['Jwt'] = policy
        result['JwtLength'] = len(policy)
        result['Algorithm'] = None

        if policy:
            try:
                decoded_policy = jwt.decode(policy, verify=False)
                decoded_policy = decoded_policy.get('AttestationPolicy', '')
                try:
                    new_decoded_policy = base64.b64decode(_b64url_to_b64(decoded_policy)).decode('ascii')
                    decoded_policy = new_decoded_policy
                except:  # pylint: disable=bare-except
                    pass
                finally:
                    result['Text'] = decoded_policy
                    result['TextLength'] = len(decoded_policy)
                    result['Algorithm'] = jwt.get_unverified_header(policy).get('alg', None)
            except:  # pylint: disable=bare-except
                result['Text'] = ''
                result['TextLength'] = 0

    return result


def set_policy(cmd, client, attestation_type, new_attestation_policy=None, new_attestation_policy_file=None,
               policy_format='Text', resource_group_name=None,
               provider_name=None):

    if new_attestation_policy_file and new_attestation_policy:
        raise CLIError('Please specify just one of --new-attestation-policy and --new-attestation-policy-file/-f')

    if not new_attestation_policy_file and not new_attestation_policy:
        raise CLIError('Please specify --new-attestation-policy or --new-attestation-policy-file/-f')

    if new_attestation_policy_file:
        file_path = os.path.expanduser(new_attestation_policy_file)
        if not os.path.exists(file_path):
            raise CLIError('Policy file "{}" does not exist.'.format(file_path))

        if not os.path.isfile(file_path):
            raise CLIError('"{}" is not a valid file name.'.format(file_path))

        with open(file_path) as f:
            new_attestation_policy = f.read()

    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)

    if policy_format == 'Text':
        import jwt
        try:
            new_attestation_policy = {'AttestationPolicy': new_attestation_policy}
            new_attestation_policy = jwt.encode(
                new_attestation_policy, key=''
            ).decode('ascii')

        except TypeError as e:
            print(e)
            raise CLIError('Failed to encode text content, are you using JWT? If yes, please use --policy-format JWT')

    print(new_attestation_policy)
    raw_result = client.set(
        tenant_base_url=provider.attest_uri,
        tee=tee_mapping[attestation_type],
        new_attestation_policy=new_attestation_policy
    )
    return raw_result


def reset_policy(cmd, client, attestation_type, policy_jws='eyJhbGciOiJub25lIn0..', resource_group_name=None,
                 provider_name=None):

    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    return client.reset(
        tenant_base_url=provider.attest_uri,
        tee=tee_mapping[attestation_type],
        policy_jws=policy_jws
    )


def attest_open_enclave(cmd, client, report=None, runtime_data=None, runtime_data_type=None, init_time_data=None,
                        init_time_data_type=None, resource_group_name=None, provider_name=None):

    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)

    request = AttestOpenEnclaveRequest(
        report=report,
        runtime_data=RuntimeData(
            data=runtime_data,
            data_type=runtime_data_type
        ),
        init_time_data=InitTimeData(
            data=init_time_data,
            data_type=init_time_data_type
        )
    )

    return client.attest_open_enclave(
        tenant_base_url=provider.attest_uri,
        request=request
    )


def attestation_attestation_provider_get_default_by_location(client,
                                                             loc):
    return client.get_default_by_location(location=loc)
