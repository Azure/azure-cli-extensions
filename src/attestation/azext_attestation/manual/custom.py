# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import base64
import codecs
import os

from azext_attestation.vendored_sdks.azure_mgmt_attestation.models import JsonWebKey

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives.serialization import Encoding
from cryptography.x509 import load_pem_x509_certificate
from jwcrypto.jwk import JWK
from knack.cli import CLIError


def attestation_attestation_provider_show(client,
                                          resource_group_name,
                                          provider_name):
    """ Show the status of Attestation Provider. """
    return client.get(resource_group_name=resource_group_name,
                      provider_name=provider_name)


def _int_to_bytes(i):
    h = hex(i)
    if len(h) > 1 and h[0:2] == '0x':
        h = h[2:]
    # need to strip L in python 2.x
    h = h.strip('L')
    if len(h) % 2:
        h = '0' + h
    return codecs.decode(h, 'hex')


def _public_rsa_key_to_jwk(rsa_key, encoding=None):
    jwk = JsonWebKey(kty='RSA', alg='', kid='', use='sig')
    pubv = rsa_key.public_numbers()
    jwk.n = _int_to_bytes(pubv.n)
    if encoding:
        jwk.n = encoding(jwk.n)
    jwk.e = _int_to_bytes(pubv.e)
    if encoding:
        jwk.e = encoding(jwk.e)
    return jwk


def _b64_url_encode(s):
    return base64.b64encode(s).decode('ascii').strip('=').replace('+', '-').replace('/', '_')


def _b64_url_encode_for_x5c(s):
    return base64.b64encode(s).decode('ascii')


def attestation_attestation_provider_create(client,
                                            resource_group_name,
                                            provider_name,
                                            location,
                                            tags=None,
                                            certs_input_path=None):

    jwks = []
    for p in certs_input_path:
        expand_path = os.path.expanduser(p)
        if not os.path.exists(expand_path):
            raise CLIError('Path "{}" does not exist.'.format(expand_path))
        if not os.path.isfile(expand_path):
            raise CLIError('"{}" is not a valid file path.'.format(expand_path))

        with open(expand_path, 'rb') as f:
            pem_data = f.read()

        try:
            jwk = JWK.from_pem(pem_data)
            jwk.x5c = [_b64_url_encode(jwk.public())]
        except:  # pylint: disable=bare-except
            raise CLIError('Failed to load file: {}'.format(expand_path))

        jwks.append(jwk)
        print(jwk)

    return client.create(resource_group_name=resource_group_name,
                         provider_name=provider_name,
                         location=location,
                         tags=tags,
                         keys=jwks)
