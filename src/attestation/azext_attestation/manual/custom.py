# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

import base64
import codecs
import json
import os

from azext_attestation.generated._client_factory import cf_attestation_provider
from azext_attestation.vendored_sdks.azure_attestation.models._attestation_client_enums import TeeKind
from azext_attestation.vendored_sdks.azure_mgmt_attestation.models import JsonWebKey

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.serialization import Encoding
from cryptography.x509 import load_pem_x509_certificate
from jwcrypto.jwk import JWK
from knack.cli import CLIError


tee_mapping = {
    TeeKind.tpm: 'TPM',
    TeeKind.sgx_intel_sdk: 'SgxEnclave',
    TeeKind.sgx_open_enclave_sdk: 'OpenEnclave'
}


def attestation_attestation_provider_show(client,
                                          resource_group_name=None,
                                          provider_name=None):
    """ Show the status of Attestation Provider. """
    return client.get(resource_group_name=resource_group_name,
                      provider_name=provider_name)


def _int_to_bytes(i):
    h = hex(i)
    if len(h) > 1 and h[0:2] == '0x':
        h = h[2:]
    # need to strip L in python 2.x
    h = h.strip('L')
    if len(h) % 2:
        h = '0' + h
    return codecs.decode(h, 'hex')


def _public_rsa_key_to_jwk(rsa_key, encoding=None):
    jwk = JsonWebKey(kty='RSA', alg='', kid='', use='sig')
    pubv = rsa_key.public_numbers()
    jwk.n = _int_to_bytes(pubv.n)
    if encoding:
        jwk.n = encoding(jwk.n)
    jwk.e = _int_to_bytes(pubv.e)
    if encoding:
        jwk.e = encoding(jwk.e)
    return jwk


def _b64_url_encode(s):
    return base64.b64encode(s).decode('ascii').strip('=').replace('+', '-').replace('/', '_')


def attestation_attestation_provider_create(client,
                                            resource_group_name,
                                            provider_name,
                                            location,
                                            tags=None,
                                            certs_input_path=None):

    jwks = []
    if not certs_input_path:
        certs_input_path = []

    for p in certs_input_path:
        expand_path = os.path.expanduser(p)
        if not os.path.exists(expand_path):
            raise CLIError('Path "{}" does not exist.'.format(expand_path))
        if not os.path.isfile(expand_path):
            raise CLIError('"{}" is not a valid file path.'.format(expand_path))

        with open(expand_path, 'rb') as f:
            pem_data = f.read()

        raw_jwk = JWK.from_pem(pem_data)
        jwk = JsonWebKey(kty=raw_jwk.key_type, kid=raw_jwk.key_id, alg='RS256', use='sig')
        pub_json = json.loads(raw_jwk.export_public())
        jwk.e = pub_json['e']
        jwk.n = pub_json['n']
        cert = load_pem_x509_certificate(pem_data, backend=default_backend())
        jwk.x5_c = [base64.b64encode(cert.public_bytes(Encoding.DER)).decode('ascii')]
        print(jwk)
        jwks.append(jwk)

    return client.create(resource_group_name=resource_group_name,
                         provider_name=provider_name,
                         location=location,
                         tags=tags,
                         keys=jwks)


def attestation_attestation_provider_delete(client,
                                            resource_group_name=None,
                                            provider_name=None):
    return client.delete(resource_group_name=resource_group_name,
                         provider_name=provider_name)


def add_signer(cmd, client, signer, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    return client.add(tenant_base_url=provider.attest_uri, policy_certificate_to_add=signer)


def remove_signer(cmd, client, signer, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    return client.remove(tenant_base_url=provider.attest_uri, policy_certificate_to_remove=signer)


def list_signers(cmd, client, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    signers = client.get(tenant_base_url=provider.attest_uri)
    token = json.loads(signers.replace('\'', '"')).get('token')
    result = {'jwt': token}

    if token:
        import jwt
        result.update(jwt.get_unverified_header(token))
        result.update(jwt.decode(token, verify=False))

    return result


def get_policy(cmd, client, tee, resource_group_name=None, provider_name=None):
    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    token = client.get(tenant_base_url=provider.attest_uri, tee=tee_mapping[tee]).token
    result = {'jwk': token}

    if token:
        import jwt
        result.update(jwt.get_unverified_header(token))
        result.update(jwt.decode(token, verify=False))

    return result


def set_policy(cmd, client, tee, new_attestation_policy=None, new_attestation_policy_file=None,
               policy_format='Text', resource_group_name=None,
               provider_name=None):

    if new_attestation_policy_file and new_attestation_policy:
        raise CLIError('Please specify just one of --new-attestation-policy and --new-attestation-policy-file/-f')

    if not new_attestation_policy_file and not new_attestation_policy:
        raise CLIError('Please specify --new-attestation-policy or --new-attestation-policy-file/-f')

    if new_attestation_policy_file:
        file_path = os.path.expanduser(new_attestation_policy_file)
        if not os.path.exists(file_path):
            raise CLIError('Policy file "{}" does not exist.'.format(file_path))

        if not os.path.isfile(file_path):
            raise CLIError('"{}" is not a valid file name.'.format(file_path))

        with open(file_path) as f:
            new_attestation_policy = f.read()

    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)

    if policy_format == 'Text':
        import jwt
        try:
            new_attestation_policy = {k: str(v) for k, v in json.loads(new_attestation_policy).items()}
            print(new_attestation_policy)
            new_attestation_policy = jwt.encode(new_attestation_policy, key='').decode('ascii')
        except TypeError:
            raise CLIError('Failed to encode text content, are you using JWT? If yes, please use --policy-format JWT')

    print(new_attestation_policy)
    raw_result = client.set(
        tenant_base_url=provider.attest_uri,
        tee=tee_mapping[tee],
        new_attestation_policy=new_attestation_policy
    )
    print(raw_result)
    return raw_result


def reset_policy(cmd, client, tee, policy_jws='eyJhbGciOiJub25lIn0..', resource_group_name=None,
                 provider_name=None):

    provider_client = cf_attestation_provider(cmd.cli_ctx)
    provider = provider_client.get(resource_group_name=resource_group_name, provider_name=provider_name)
    return client.reset(
        tenant_base_url=provider.attest_uri,
        tee=tee_mapping[tee],
        policy_jws=policy_jws
    )
