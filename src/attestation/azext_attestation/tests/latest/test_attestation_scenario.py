# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class AttestationManagementClientScenarioTest(ScenarioTest):

    @AllowLargeResponse(size_kb=99999)
    @ResourceGroupPreparer(name_prefix='clitestattestation_testrg1'[:7], key='rg', parameter_name='rg')
    def test_attestation(self, rg):
        self.kwargs.update({
            'att0': self.create_random_name('att0', 16),
        })

        self.cmd('az attestation create -l westus '
                 '-n {att0} '
                 '--resource-group "{rg}"',
                 checks=[
                     self.check('name', '{att0}'),
                     self.check('status', 'Ready'),
                     self.check('trustModel', 'AAD')
                 ])

        self.cmd('az attestation show '
                 '-n {att0} '
                 '--resource-group "{rg}"',
                 checks=[
                     self.check('name', '{att0}'),
                     self.check('status', 'Ready')
                 ])
        self.cmd('az attestation list '
                 '--resource-group "{rg}"',
                 checks=[
                     self.check('length(value)', 1),
                     self.check('value[0].name', '{att0}'),
                     self.check('value[0].status', 'Ready')
                 ])
        self.cmd('az attestation list')

        self.cmd('az attestation update '
                 '-n "{att0}" '
                 '--resource-group "{rg}" '
                 '--tags Property1="Value1" Property2="Value2" Property3="Value3"',
                 checks=[
                     self.check('tags.Property1', 'Value1'),
                     self.check('tags.Property2', 'Value2'),
                     self.check('tags.Property3', 'Value3')
                 ])
        self.cmd('az attestation get-default-by-location -l "West US"', checks=[
            self.check('attestUri', 'https://sharedwus.wus.attest.azure.net'),
            self.check('location', 'West US')
        ])
        self.cmd('az attestation delete -y '
                 '-n "{att0}" '
                 '--resource-group "{rg}"')

    @AllowLargeResponse(size_kb=99999)
    @ResourceGroupPreparer(name_prefix='clitestattestation_testrg1'[:7], key='rg', parameter_name='rg')
    def test_provider_with_signer_1(self, rg):
        self.kwargs.update({
            'init_cert1_file': os.path.join(TEST_DIR, 'cert_group_1', 'init_cert.pem'),
            'new_signer_jwt_file': os.path.join(TEST_DIR, 'cert_group_1', 'new_signer_jwt.txt'),
            'att1': self.create_random_name('att1', 16),
        })
        self.cmd('az attestation create -l westus -n {att1} -g {rg} --certs-input-path "{init_cert1_file}"', checks=[
            self.check('name', '{att1}'),
            self.check('status', 'Ready'),
            self.check('trustModel', 'Isolated')
        ])

        self.cmd('az attestation signer list -n {att1} -g {rg}', checks=[
            self.check('CertificateCount', 1),
            self.check('Certificates[0].use', 'sig'),
            self.exists('Certificates[0].alg'),
            self.exists('Certificates[0].kty'),
            self.exists('Certificates[0].x5c'),
            self.exists('JKU'),
            self.exists('Jwt'),
            self.exists('Algorithm')
        ])

        self.cmd('az attestation policy show -n {att1} -g {rg} --attestation-type SgxEnclave', checks=[
            self.check('Algorithm', 'none'),
            self.check('JwtLength', 1088),
            self.check('TextLength', 582),
            self.exists('Jwt'),
            self.exists('Text')
        ])

        # from azure.core.exceptions import HttpResponseError
        # with test.assertRaisesRegex(HttpResponseError, 'PolicyParsingError'):
        # test.cmd('az attestation policy set -n {att1} -g {rg} --attestation-type SgxEnclave '
        #          '-f "{signed_jwt_policy1_file}" --policy-format JWT',
        #          checks=[
        #              test.check('Algorithm', 'RSA256'),
        #              test.check('JwtLength', 2862),
        #              test.check('TextLength', 608),
        #              test.exists('Jwt'),
        #              test.exists('Text')
        #          ])

        self.cmd('az attestation signer add -n {att1} -g {rg} -f "{new_signer_jwt_file}"')

        self.cmd('az attestation signer list -n {att1} -g {rg}', checks=self.check('CertificateCount', 2))

        self.cmd('az attestation signer remove -n {att1} -g {rg} -f "{new_signer_jwt_file}"',
                 checks=self.check('CertificateCount', 1))

        with open(self.kwargs['new_signer_jwt_file']) as f:
            self.kwargs['new_signer_jwt'] = f.read()

        self.cmd('az attestation signer add -n {att1} -g {rg} --signer {new_signer_jwt}')

        self.cmd('az attestation signer list -n {att1} -g {rg}', checks=self.check('CertificateCount', 2))

        self.cmd('az attestation signer remove -n {att1} -g {rg} --signer {new_signer_jwt}',
                 checks=self.check('CertificateCount', 1))

        self.cmd('az attestation delete -n {att1} -g {rg} -y')

    @AllowLargeResponse(size_kb=99999)
    @ResourceGroupPreparer(name_prefix='clitestattestation_testrg1'[:7], key='rg', parameter_name='rg')
    def test_provider_with_signer_2(self, rg):
        self.kwargs.update({
            'init_cert2_file': os.path.join(TEST_DIR, 'cert_group_2', 'init_cert.pem'),
            'signed_jwt_policy2_file': os.path.join(TEST_DIR, 'policies', 'signed_jwt_sgx_policy_2.txt'),
            'att2': self.create_random_name('att2', 16),
        })
        self.cmd('az attestation create -l westus -n {att2} -g {rg} --certs-input-path "{init_cert2_file}"',
                 checks=[
                     self.check('name', '{att2}'),
                     self.check('status', 'Ready'),
                     self.check('trustModel', 'Isolated')
                 ])

        self.cmd('az attestation policy show -n {att2} -g {rg} --attestation-type SgxEnclave', checks=[
            self.check('Algorithm', 'none'),
            self.check('JwtLength', 1088),
            self.check('TextLength', 582),
            self.exists('Jwt'),
            self.exists('Text')
        ])

        self.cmd('az attestation policy set -n {att2} -g {rg} --attestation-type SgxEnclave '
                 '-f "{signed_jwt_policy2_file}" --policy-format JWT',
                 checks=[
                     self.check('Algorithm', 'RS256'),
                     self.check('JwtLength', 2766),
                     self.check('TextLength', 479),
                     self.exists('Jwt'),
                     self.exists('Text')
                 ])
        self.cmd('az attestation delete -n {att2} -g {rg} -y')

    @AllowLargeResponse(size_kb=99999)
    @ResourceGroupPreparer(name_prefix='clitestattestation_testrg1'[:7], key='rg', parameter_name='rg')
    def test_provider_without_signer(self, rg):
        self.kwargs.update({
            'unsigned_jwt_policy_file': os.path.join(TEST_DIR, 'policies', 'unsigned_jwt_sgx_policy.txt'),
            'text_policy_file': os.path.join(TEST_DIR, 'policies', 'text_sgx_policy.txt'),
            'att3': self.create_random_name('att3', 16)
        })
        self.cmd('az attestation create -l westus -n {att3} -g {rg}', checks=[
            self.check('name', '{att3}'),
            self.check('status', 'Ready'),
            self.check('trustModel', 'AAD')
        ])

        self.cmd('az attestation policy show -n {att3} -g {rg} --attestation-type SgxEnclave', checks=[
            self.check('Algorithm', 'none'),
            self.check('JwtLength', 1088),
            self.check('TextLength', 582),
            self.exists('Jwt'),
            self.exists('Text')
        ])

        self.cmd(
            'az attestation policy set -n {att3} -g {rg} --attestation-type SgxEnclave -f "{text_policy_file}"',
            checks=[
                self.check('Algorithm', 'none'),
                self.check('JwtLength', 835),
                self.check('TextLength', 430),
                self.exists('Jwt'),
                self.exists('Text')
            ])

        self.cmd('az attestation policy set -n {att3} -g {rg} --attestation-type SgxEnclave '
                 '-f "{unsigned_jwt_policy_file}" --policy-format JWT',
                 checks=[
                     self.check('Algorithm', 'none'),
                     self.check('JwtLength', 907),
                     self.check('TextLength', 479),
                     self.exists('Jwt'),
                     self.exists('Text')
                 ])

        self.cmd('az attestation policy set -n {att3} -g {rg} --attestation-type SgxEnclave '
                 '-f "{text_policy_file}"',
                 checks=[
                     self.check('Algorithm', 'none'),
                     self.check('JwtLength', 835),
                     self.check('TextLength', 430),
                     self.exists('Jwt'),
                     self.exists('Text')
                 ])

        with open(self.kwargs['unsigned_jwt_policy_file']) as f:
            self.kwargs['unsigned_jwt_policy'] = f.read()

        self.cmd('az attestation policy set -n {att3} -g {rg} --attestation-type SgxEnclave '
                 '--new-attestation-policy {unsigned_jwt_policy} --policy-format JWT',
                 checks=[
                     self.check('Algorithm', 'none'),
                     self.check('JwtLength', 907),
                     self.check('TextLength', 479),
                     self.exists('Jwt'),
                     self.exists('Text')
                 ])

        self.cmd('az attestation policy reset -n {att3} -g {rg} --attestation-type SgxEnclave', checks=[
            self.check('Algorithm', 'none'),
            self.check('JwtLength', 1088),
            self.check('TextLength', 582),
            self.exists('Jwt'),
            self.exists('Text')
        ])
        self.cmd('az attestation delete -n {att3} -g {rg} -y')
