# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
import unittest

from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import ScenarioTest


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class AttestationMgmtScenarioTest(ScenarioTest):
    def _create(self, rg):
        self.kwargs['cert_path'] = os.path.join(TEST_DIR, 'policySigningCerts.pem')
        self.cmd('az attestation create '
                 '--name "{myattestation}" '
                 '--resource-group "{rg}" '
                 '--location "eastus2" '
                 '--tags aKey=aValue anotherKey=anotherValue '
                 '--certs-input-path "{cert_path}"',
                 checks=[
                     self.check('name', '{myattestation}'),
                     self.check('resourceGroup', rg),
                     self.check('location', 'eastus2'),
                     self.check('tags', '{{\'aKey\': \'aValue\', \'anotherKey\': \'anotherValue\'}}')
                 ])

    def _get(self, rg):
        self.cmd('az attestation show '
                 '--name "{myattestation}" '
                 '--resource-group "{rg}"',
                 checks=[
                     self.check('name', '{myattestation}'),
                     self.check('resourceGroup', rg),
                     self.check('location', 'eastus2')
                 ])

    def _list_by_resource_group(self, rg):
        self.cmd('az attestation list '
                 '--resource-group "{rg}"',
                 checks=self.check('[0].name', '{myattestation}'))

    def _list_by_subscription(self):
        self.cmd('az attestation list', checks=self.check('length(@)', 6))

    def _delete(self, rg):
        self.cmd('az attestation delete '
                 '--name "{myattestation}" '
                 '--resource-group "{rg}" '
                 '--yes')
        self.cmd('az attestation list '
                 '--resource-group "{rg}"',
                 checks=self.check('length(@)', 0))

    @ResourceGroupPreparer(name_prefix='cli_test_att')
    def test_attestation_mgmt(self, resource_group):
        self.kwargs.update({
            'myattestation': self.create_random_name(prefix='clitestatt', length=24)
        })

        self._create(resource_group)
        self._get(resource_group)
        self._list_by_resource_group(resource_group)
        self._list_by_subscription()
        self._delete(resource_group)


class AttestationSignerScenarioTest(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='cli_test_att_signer')
    def test_attestation_signer(self, resource_group):
        self.kwargs.update({
            'att_name': self.create_random_name(prefix='clitestattsigner', length=24),
            'loc': 'eastus2',
        })

        att_json = self.cmd('az attestation create -n {att_name} -g {rg} -l {loc}').get_output_in_json()
        self.kwargs['att_url'] = att_json['attestUri']

        self.cmd('az attestation signer list -n {att_name} -g {rg}', checks=[
            self.exists('jwt'),
            self.exists('iss')
        ])
        self.cmd('az attestation signer list --attestation-base-url {att_url} -g {rg}', checks=[
            self.exists('jwt'),
            self.exists('iss')
        ])


class AttestationPolicyScenarioTest(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='cli_test_att_policy')
    def test_attestation_policy(self, resource_group):
        self.kwargs.update({
            'att_name': self.create_random_name(prefix='clitestattpolicy', length=24),
            'loc': 'eastus2',
        })

        att_json = self.cmd('az attestation create -n {att_name} -g {rg} -l {loc}').get_output_in_json()
        self.kwargs['att_url'] = att_json['attestUri']

        self.cmd('az attestation policy show -n {att_name} -g {rg} --tee CyResComponent', checks=[
            self.exists('jwt'),
            self.exists('AttestationPolicy')
        ])
        self.cmd('az attestation policy show --attestation-base-url {att_url} -g {rg} --tee CyResComponent', checks=[
            self.exists('jwt'),
            self.exists('AttestationPolicy')
        ])
        self.cmd('az attestation policy reset -n {att_name} -g {rg} --tee SgxEnclave '
                 '--policy-jws "eyJhbGciOiJub25lIn0.."')


if __name__ == '__main__':
    unittest.main()
