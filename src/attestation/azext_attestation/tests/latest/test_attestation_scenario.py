# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from .. import try_manual, raise_if
from azure.cli.testsdk import JMESPathCheck
from azure.cli.testsdk import JMESPathCheckExists
from azure.cli.testsdk import NoneCheck
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import ScenarioTest


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg):
    pass


# EXAMPLE: AttestationProviders_Create
@try_manual
def step_attestationproviders_create(test, rg):
    test.cmd('az attestation create '
             '--name "{myattestation}" '
             '--resource-group "{rg}" '
             '--location "eastus2" '
             '--tags aKey=aValue anotherKey=anotherValue '
             '--certs-input-path "src/attestation/azext_attestation/tests/latest/policySigningCerts.pem"',
             checks=[
                 JMESPathCheck('name', test.kwargs.get('myattestation', '')),
                 JMESPathCheck('resourceGroup', rg),
                 JMESPathCheck('location', 'eastus2'),
                 JMESPathCheck(
                     'tags', '{\'aKey\': \'aValue\', \'anotherKey\': \'anotherValue\'}')])


# EXAMPLE: AttestationProviders_Get
@try_manual
def step_attestationproviders_get(test, rg):
    test.cmd('az attestation show '
             '--name "{myattestation}" '
             '--resource-group "{rg}"',
             checks=[
                 JMESPathCheck('name', test.kwargs.get('myattestation', '')),
                 JMESPathCheck('resourceGroup', rg),
                 JMESPathCheck('location', 'eastus2')
             ])


# EXAMPLE: AttestationProviders_List
@try_manual
def step_attestationproviders_list(test, rg):
    test.cmd('az attestation list '
             '--resource-group=',
             checks=[
                 JMESPathCheckExists('value[?name==\'{}\']'.format(
                     test.kwargs.get('myattestation', '')))
             ])


# EXAMPLE: AttestationProviders_ListByResourceGroup
@try_manual
def step_attestationproviders_listbyresourcegroup(test, rg):
    test.cmd('az attestation list '
             '--resource-group "{rg}"',
             checks=[
                 JMESPathCheck('value[0].name',
                               test.kwargs.get('myattestation', ''))
             ])


# EXAMPLE: AttestationProviders_Delete
@try_manual
def step_attestationproviders_delete(test, rg):
    test.cmd('az attestation delete '
             '--name "{myattestation}" '
             '--resource-group "{rg}" '
             '--yes',
             checks=[])
    test.cmd('az attestation list '
             '--resource-group "{rg}"',
             checks=[test.check('length(value)', 0)])


@try_manual
def cleanup(test, rg):
    pass


@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step_attestationproviders_create(test, rg)
    step_attestationproviders_get(test, rg)
    step_attestationproviders_list(test, rg)
    step_attestationproviders_listbyresourcegroup(test, rg)
    step_attestationproviders_delete(test, rg)
    cleanup(test, rg)


@try_manual
class AttestationManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestattestation_MyResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_attestation(self, rg):

        self.kwargs.update({
            'myattestation': self.create_random_name(prefix='clitestattestation'[:9], length=24)
        })

        call_scenario(self, rg)
        raise_if()
