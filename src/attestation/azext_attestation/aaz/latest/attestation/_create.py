# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "attestation create",
)
class Create(AAZCommand):
    """Creates a new Attestation Provider instance.

    :example: AttestationProviders_Create
        az attestation create --name "myattestationprovider" --resource-group "MyResourceGroup" -l westus
    """

    _aaz_info = {
        "version": "2020-10-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.attestation/attestationproviders/{}", "2020-10-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_name = AAZStrArg(
            options=["--provider-name"],
            help="Name of the attestation provider.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="The supported Azure location where the attestation provider should be created.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.certs = AAZListArg(
            options=["--certs"],
            help="The value of the \"keys\" parameter is an array of JWK values.  By default, the order of the JWK values within the array does not imply an order of preference among them, although applications of JWK Sets can choose to assign a meaning to the order for their purposes, if desired.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="The tags that will be assigned to the attestation provider.",
        )

        certs = cls._args_schema.certs
        certs.Element = AAZObjectArg()

        _element = cls._args_schema.certs.Element
        _element.alg = AAZStrArg(
            options=["alg"],
            help="The \"alg\" (algorithm) parameter identifies the algorithm intended for use with the key.  The values used should either be registered in the IANA \"JSON Web Signature and Encryption Algorithms\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.",
        )
        _element.crv = AAZStrArg(
            options=["crv"],
            help="The \"crv\" (curve) parameter identifies the curve type",
        )
        _element.d = AAZStrArg(
            options=["d"],
            help="RSA private exponent or ECC private key",
        )
        _element.dp = AAZStrArg(
            options=["dp"],
            help="RSA Private Key Parameter",
        )
        _element.dq = AAZStrArg(
            options=["dq"],
            help="RSA Private Key Parameter",
        )
        _element.e = AAZStrArg(
            options=["e"],
            help="RSA public exponent, in Base64",
        )
        _element.k = AAZStrArg(
            options=["k"],
            help="Symmetric key",
        )
        _element.kid = AAZStrArg(
            options=["kid"],
            help="The \"kid\" (key ID) parameter is used to match a specific key.  This is used, for instance, to choose among a set of keys within a JWK Set during key rollover.  The structure of the \"kid\" value is unspecified.  When \"kid\" values are used within a JWK Set, different keys within the JWK Set SHOULD use distinct \"kid\" values.  (One example in which different keys might use the same \"kid\" value is if they have different \"kty\" (key type) values but are considered to be equivalent alternatives by the application using them.)  The \"kid\" value is a case-sensitive string.",
        )
        _element.kty = AAZStrArg(
            options=["kty"],
            help="The \"kty\" (key type) parameter identifies the cryptographic algorithm family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should either be registered in the IANA \"JSON Web Key Types\" registry established by [JWA] or be a value that contains a Collision- Resistant Name.  The \"kty\" value is a case-sensitive string.",
            required=True,
        )
        _element.n = AAZStrArg(
            options=["n"],
            help="RSA modulus, in Base64",
        )
        _element.p = AAZStrArg(
            options=["p"],
            help="RSA secret prime",
        )
        _element.q = AAZStrArg(
            options=["q"],
            help="RSA secret prime, with p < q",
        )
        _element.qi = AAZStrArg(
            options=["qi"],
            help="RSA Private Key Parameter",
        )
        _element.use = AAZStrArg(
            options=["use"],
            help="Use (\"public key use\") identifies the intended use of the public key. The \"use\" parameter is employed to indicate whether a public key is used for encrypting data or verifying the signature on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).",
        )
        _element.x = AAZStrArg(
            options=["x"],
            help="X coordinate for the Elliptic Curve point",
        )
        _element.x5c = AAZListArg(
            options=["x5c"],
            help="The \"x5c\" (X.509 certificate chain) parameter contains a chain of one or more PKIX certificates [RFC5280].  The certificate chain is represented as a JSON array of certificate value strings.  Each string in the array is a base64-encoded (Section 4 of [RFC4648] -- not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value. The PKIX certificate containing the key value MUST be the first certificate.",
        )
        _element.y = AAZStrArg(
            options=["y"],
            help="Y coordinate for the Elliptic Curve point",
        )

        x5c = cls._args_schema.certs.Element.x5c
        x5c.Element = AAZStrArg()

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AttestationProvidersCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AttestationProvidersCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerName", self.ctx.args.provider_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-10-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("policySigningCertificates", AAZObjectType)

            policy_signing_certificates = _builder.get(".properties.policySigningCertificates")
            if policy_signing_certificates is not None:
                policy_signing_certificates.set_prop("keys", AAZListType, ".certs")

            keys = _builder.get(".properties.policySigningCertificates.keys")
            if keys is not None:
                keys.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.policySigningCertificates.keys[]")
            if _elements is not None:
                _elements.set_prop("alg", AAZStrType, ".alg")
                _elements.set_prop("crv", AAZStrType, ".crv")
                _elements.set_prop("d", AAZStrType, ".d")
                _elements.set_prop("dp", AAZStrType, ".dp")
                _elements.set_prop("dq", AAZStrType, ".dq")
                _elements.set_prop("e", AAZStrType, ".e")
                _elements.set_prop("k", AAZStrType, ".k")
                _elements.set_prop("kid", AAZStrType, ".kid")
                _elements.set_prop("kty", AAZStrType, ".kty", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("n", AAZStrType, ".n")
                _elements.set_prop("p", AAZStrType, ".p")
                _elements.set_prop("q", AAZStrType, ".q")
                _elements.set_prop("qi", AAZStrType, ".qi")
                _elements.set_prop("use", AAZStrType, ".use")
                _elements.set_prop("x", AAZStrType, ".x")
                _elements.set_prop("x5c", AAZListType, ".x5c")
                _elements.set_prop("y", AAZStrType, ".y")

            x5c = _builder.get(".properties.policySigningCertificates.keys[].x5c")
            if x5c is not None:
                x5c.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.attest_uri = AAZStrType(
                serialized_name="attestUri",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
                flags={"read_only": True},
            )
            properties.status = AAZStrType()
            properties.trust_model = AAZStrType(
                serialized_name="trustModel",
            )

            private_endpoint_connections = cls._schema_on_200_201.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            private_endpoint = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType(
                flags={"read_only": True},
            )

            private_link_service_connection_state = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
            )
            private_link_service_connection_state.description = AAZStrType()
            private_link_service_connection_state.status = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
