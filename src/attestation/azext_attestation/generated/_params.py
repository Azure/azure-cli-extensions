# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from argcomplete.completers import FilesCompleter
from azure.cli.core.commands.parameters import (
    tags_type,
    resource_group_name_type,
    get_location_type,
    file_type,
    get_resource_name_completion_list,
    get_enum_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from knack.arguments import CLIArgumentType


def load_arguments(self, _):
    from ..vendored_sdks.azure_attestation.models import TeeKind

    attestation_name_type = CLIArgumentType(
        help='Name of the attestation.', options_list=['--name', '-n'], metavar='NAME', id_part=None,
        completer=get_resource_name_completion_list('Microsoft.Attestation/attestationProviders'))

    with self.argument_context('attestation list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('attestation show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', options_list=['--name', '-n'], help='Name of the attestation service instance',
                   id_part='name')

    with self.argument_context('attestation create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', options_list=['--name', '-n'], help='Name of the attestation service')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('attestation_policy', help='Name of attestation policy.')
        c.argument('certs_input_path', type=file_type, help='The path to the policy signing certificates PEM file.',
                   completer=FilesCompleter())

    with self.argument_context('attestation delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', options_list=['--name', '-n'], help='Name of the attestation service',
                   id_part='name')

    for item in ['list', 'add', 'remove']:
        with self.argument_context('attestation signer {}'.format(item)) as c:
            c.extra('resource_group_name', resource_group_name_type, required=False)
            c.extra('attestation_name', attestation_name_type, required=False)
            c.argument('tenant_base_url', options_list=['--attestation-base-url', '-u'], required=False,
                       help='URL of the attestation, for example: https://myatt.eus2.attest.azure.net. '
                            'You can ignore --name and --resource-group if you specified the URL.')
            if item in ['add', 'remove']:
                c.argument('policy_certificate_to_{}'.format(item), options_list=['--signer'],
                           help='The policy certificate to {}. An RFC7519 JSON Web Token containing a claim named '
                                '"aas-policyCertificate" whose value is an RFC7517 JSON Web Key which specifies a '
                                'new key to update. The RFC7519 JWT must be signed with one of the existing signing '
                                'certificates'.format(item))

    for item in ['set', 'reset', 'show']:
        with self.argument_context('attestation policy {}'.format(item)) as c:
            c.extra('resource_group_name', resource_group_name_type, required=False)
            c.extra('attestation_name', attestation_name_type, required=False)
            c.argument('tenant_base_url', options_list=['--attestation-base-url', '-u'], required=False,
                       help='URL of the attestation, for example: https://myatt.eus2.attest.azure.net. '
                            'You can ignore --name and --resource-group if you specified the URL.')
            c.argument('tee', arg_type=get_enum_type(TeeKind))

    with self.argument_context('attestation policy set') as c:
        c.argument('new_attestation_policy', options_list=['--new-attestation-policy', '-p'])
