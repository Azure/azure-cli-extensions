# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor data-collection rule list",
)
class List(AAZCommand):
    """List all data collection rules in the specified resource group. And Lists all data collection rules in the specified subscription.

    :example: List data collection rules by resource group
        az monitor data-collection rule list --resource-group "myResourceGroup"

    :example: List data collection rules by subscription
        az monitor data-collection rule list
    """

    _aaz_info = {
        "version": "2022-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.insights/datacollectionrules", "2022-06-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/datacollectionrules", "2022-06-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        condition_1 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        if condition_0:
            self.DataCollectionRulesListByResourceGroup(ctx=self.ctx)()
        if condition_1:
            self.DataCollectionRulesListBySubscription(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class DataCollectionRulesListByResourceGroup(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.identity = AAZObjectType()
            _element.kind = AAZStrType()
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.value.Element.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.value.Element.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200.value.Element.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.data_collection_endpoint_id = AAZStrType(
                serialized_name="dataCollectionEndpointId",
            )
            properties.data_flows = AAZListType(
                serialized_name="dataFlows",
            )
            properties.data_sources = AAZObjectType(
                serialized_name="dataSources",
            )
            properties.description = AAZStrType()
            properties.destinations = AAZObjectType()
            properties.immutable_id = AAZStrType(
                serialized_name="immutableId",
                flags={"read_only": True},
            )
            properties.metadata = AAZObjectType(
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.stream_declarations = AAZDictType(
                serialized_name="streamDeclarations",
            )

            data_flows = cls._schema_on_200.value.Element.properties.data_flows
            data_flows.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_flows.Element
            _element.built_in_transform = AAZStrType(
                serialized_name="builtInTransform",
            )
            _element.destinations = AAZListType()
            _element.output_stream = AAZStrType(
                serialized_name="outputStream",
            )
            _element.streams = AAZListType()
            _element.transform_kql = AAZStrType(
                serialized_name="transformKql",
            )

            destinations = cls._schema_on_200.value.Element.properties.data_flows.Element.destinations
            destinations.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_flows.Element.streams
            streams.Element = AAZStrType()

            data_sources = cls._schema_on_200.value.Element.properties.data_sources
            data_sources.data_imports = AAZObjectType(
                serialized_name="dataImports",
            )
            data_sources.extensions = AAZListType()
            data_sources.iis_logs = AAZListType(
                serialized_name="iisLogs",
            )
            data_sources.log_files = AAZListType(
                serialized_name="logFiles",
            )
            data_sources.performance_counters = AAZListType(
                serialized_name="performanceCounters",
            )
            data_sources.platform_telemetry = AAZListType(
                serialized_name="platformTelemetry",
            )
            data_sources.prometheus_forwarder = AAZListType(
                serialized_name="prometheusForwarder",
            )
            data_sources.syslog = AAZListType()
            data_sources.windows_event_logs = AAZListType(
                serialized_name="windowsEventLogs",
            )
            data_sources.windows_firewall_logs = AAZListType(
                serialized_name="windowsFirewallLogs",
            )

            data_imports = cls._schema_on_200.value.Element.properties.data_sources.data_imports
            data_imports.event_hub = AAZObjectType(
                serialized_name="eventHub",
            )

            event_hub = cls._schema_on_200.value.Element.properties.data_sources.data_imports.event_hub
            event_hub.consumer_group = AAZStrType(
                serialized_name="consumerGroup",
            )
            event_hub.name = AAZStrType()
            event_hub.stream = AAZStrType()

            extensions = cls._schema_on_200.value.Element.properties.data_sources.extensions
            extensions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element
            _element.extension_name = AAZStrType(
                serialized_name="extensionName",
                flags={"required": True},
            )
            _element.extension_settings = AAZObjectType(
                serialized_name="extensionSettings",
            )
            _element.input_data_sources = AAZListType(
                serialized_name="inputDataSources",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            input_data_sources = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element.input_data_sources
            input_data_sources.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element.streams
            streams.Element = AAZStrType()

            iis_logs = cls._schema_on_200.value.Element.properties.data_sources.iis_logs
            iis_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element
            _element.log_directories = AAZListType(
                serialized_name="logDirectories",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            log_directories = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element.log_directories
            log_directories.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element.streams
            streams.Element = AAZStrType()

            log_files = cls._schema_on_200.value.Element.properties.data_sources.log_files
            log_files.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element
            _element.file_patterns = AAZListType(
                serialized_name="filePatterns",
                flags={"required": True},
            )
            _element.format = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType()
            _element.settings = AAZObjectType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            file_patterns = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.file_patterns
            file_patterns.Element = AAZStrType()

            settings = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.settings
            settings.text = AAZObjectType()

            text = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.settings.text
            text.record_start_timestamp_format = AAZStrType(
                serialized_name="recordStartTimestampFormat",
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.streams
            streams.Element = AAZStrType()

            performance_counters = cls._schema_on_200.value.Element.properties.data_sources.performance_counters
            performance_counters.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element
            _element.counter_specifiers = AAZListType(
                serialized_name="counterSpecifiers",
            )
            _element.name = AAZStrType()
            _element.sampling_frequency_in_seconds = AAZIntType(
                serialized_name="samplingFrequencyInSeconds",
            )
            _element.streams = AAZListType()

            counter_specifiers = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element.counter_specifiers
            counter_specifiers.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element.streams
            streams.Element = AAZStrType()

            platform_telemetry = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry
            platform_telemetry.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry.Element.streams
            streams.Element = AAZStrType()

            prometheus_forwarder = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder
            prometheus_forwarder.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element
            _element.label_include_filter = AAZDictType(
                serialized_name="labelIncludeFilter",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            label_include_filter = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element.label_include_filter
            label_include_filter.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element.streams
            streams.Element = AAZStrType()

            syslog = cls._schema_on_200.value.Element.properties.data_sources.syslog
            syslog.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element
            _element.facility_names = AAZListType(
                serialized_name="facilityNames",
            )
            _element.log_levels = AAZListType(
                serialized_name="logLevels",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            facility_names = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.facility_names
            facility_names.Element = AAZStrType()

            log_levels = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.log_levels
            log_levels.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.streams
            streams.Element = AAZStrType()

            windows_event_logs = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs
            windows_event_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType()
            _element.x_path_queries = AAZListType(
                serialized_name="xPathQueries",
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element.streams
            streams.Element = AAZStrType()

            x_path_queries = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element.x_path_queries
            x_path_queries.Element = AAZStrType()

            windows_firewall_logs = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs
            windows_firewall_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs.Element.streams
            streams.Element = AAZStrType()

            destinations = cls._schema_on_200.value.Element.properties.destinations
            destinations.azure_monitor_metrics = AAZObjectType(
                serialized_name="azureMonitorMetrics",
            )
            destinations.event_hubs = AAZListType(
                serialized_name="eventHubs",
            )
            destinations.event_hubs_direct = AAZListType(
                serialized_name="eventHubsDirect",
            )
            destinations.log_analytics = AAZListType(
                serialized_name="logAnalytics",
            )
            destinations.monitoring_accounts = AAZListType(
                serialized_name="monitoringAccounts",
            )
            destinations.storage_accounts = AAZListType(
                serialized_name="storageAccounts",
            )
            destinations.storage_blobs_direct = AAZListType(
                serialized_name="storageBlobsDirect",
            )
            destinations.storage_tables_direct = AAZListType(
                serialized_name="storageTablesDirect",
            )

            azure_monitor_metrics = cls._schema_on_200.value.Element.properties.destinations.azure_monitor_metrics
            azure_monitor_metrics.name = AAZStrType()

            event_hubs = cls._schema_on_200.value.Element.properties.destinations.event_hubs
            event_hubs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.event_hubs.Element
            _element.event_hub_resource_id = AAZStrType(
                serialized_name="eventHubResourceId",
            )
            _element.name = AAZStrType()

            event_hubs_direct = cls._schema_on_200.value.Element.properties.destinations.event_hubs_direct
            event_hubs_direct.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.event_hubs_direct.Element
            _element.event_hub_resource_id = AAZStrType(
                serialized_name="eventHubResourceId",
            )
            _element.name = AAZStrType()

            log_analytics = cls._schema_on_200.value.Element.properties.destinations.log_analytics
            log_analytics.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.log_analytics.Element
            _element.name = AAZStrType()
            _element.workspace_id = AAZStrType(
                serialized_name="workspaceId",
                flags={"read_only": True},
            )
            _element.workspace_resource_id = AAZStrType(
                serialized_name="workspaceResourceId",
            )

            monitoring_accounts = cls._schema_on_200.value.Element.properties.destinations.monitoring_accounts
            monitoring_accounts.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.monitoring_accounts.Element
            _element.account_id = AAZStrType(
                serialized_name="accountId",
                flags={"read_only": True},
            )
            _element.account_resource_id = AAZStrType(
                serialized_name="accountResourceId",
            )
            _element.name = AAZStrType()

            storage_accounts = cls._schema_on_200.value.Element.properties.destinations.storage_accounts
            storage_accounts.Element = AAZObjectType()
            _ListHelper._build_schema_storage_blob_destination_read(storage_accounts.Element)

            storage_blobs_direct = cls._schema_on_200.value.Element.properties.destinations.storage_blobs_direct
            storage_blobs_direct.Element = AAZObjectType()
            _ListHelper._build_schema_storage_blob_destination_read(storage_blobs_direct.Element)

            storage_tables_direct = cls._schema_on_200.value.Element.properties.destinations.storage_tables_direct
            storage_tables_direct.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.storage_tables_direct.Element
            _element.name = AAZStrType()
            _element.storage_account_resource_id = AAZStrType(
                serialized_name="storageAccountResourceId",
            )
            _element.table_name = AAZStrType(
                serialized_name="tableName",
            )

            metadata = cls._schema_on_200.value.Element.properties.metadata
            metadata.provisioned_by = AAZStrType(
                serialized_name="provisionedBy",
                flags={"read_only": True},
            )
            metadata.provisioned_by_resource_id = AAZStrType(
                serialized_name="provisionedByResourceId",
                flags={"read_only": True},
            )

            stream_declarations = cls._schema_on_200.value.Element.properties.stream_declarations
            stream_declarations.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.stream_declarations.Element
            _element.columns = AAZListType()

            columns = cls._schema_on_200.value.Element.properties.stream_declarations.Element.columns
            columns.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.stream_declarations.Element.columns.Element
            _element.name = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

    class DataCollectionRulesListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Insights/dataCollectionRules",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.identity = AAZObjectType()
            _element.kind = AAZStrType()
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.value.Element.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.value.Element.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200.value.Element.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.data_collection_endpoint_id = AAZStrType(
                serialized_name="dataCollectionEndpointId",
            )
            properties.data_flows = AAZListType(
                serialized_name="dataFlows",
            )
            properties.data_sources = AAZObjectType(
                serialized_name="dataSources",
            )
            properties.description = AAZStrType()
            properties.destinations = AAZObjectType()
            properties.immutable_id = AAZStrType(
                serialized_name="immutableId",
                flags={"read_only": True},
            )
            properties.metadata = AAZObjectType(
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.stream_declarations = AAZDictType(
                serialized_name="streamDeclarations",
            )

            data_flows = cls._schema_on_200.value.Element.properties.data_flows
            data_flows.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_flows.Element
            _element.built_in_transform = AAZStrType(
                serialized_name="builtInTransform",
            )
            _element.destinations = AAZListType()
            _element.output_stream = AAZStrType(
                serialized_name="outputStream",
            )
            _element.streams = AAZListType()
            _element.transform_kql = AAZStrType(
                serialized_name="transformKql",
            )

            destinations = cls._schema_on_200.value.Element.properties.data_flows.Element.destinations
            destinations.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_flows.Element.streams
            streams.Element = AAZStrType()

            data_sources = cls._schema_on_200.value.Element.properties.data_sources
            data_sources.data_imports = AAZObjectType(
                serialized_name="dataImports",
            )
            data_sources.extensions = AAZListType()
            data_sources.iis_logs = AAZListType(
                serialized_name="iisLogs",
            )
            data_sources.log_files = AAZListType(
                serialized_name="logFiles",
            )
            data_sources.performance_counters = AAZListType(
                serialized_name="performanceCounters",
            )
            data_sources.platform_telemetry = AAZListType(
                serialized_name="platformTelemetry",
            )
            data_sources.prometheus_forwarder = AAZListType(
                serialized_name="prometheusForwarder",
            )
            data_sources.syslog = AAZListType()
            data_sources.windows_event_logs = AAZListType(
                serialized_name="windowsEventLogs",
            )
            data_sources.windows_firewall_logs = AAZListType(
                serialized_name="windowsFirewallLogs",
            )

            data_imports = cls._schema_on_200.value.Element.properties.data_sources.data_imports
            data_imports.event_hub = AAZObjectType(
                serialized_name="eventHub",
            )

            event_hub = cls._schema_on_200.value.Element.properties.data_sources.data_imports.event_hub
            event_hub.consumer_group = AAZStrType(
                serialized_name="consumerGroup",
            )
            event_hub.name = AAZStrType()
            event_hub.stream = AAZStrType()

            extensions = cls._schema_on_200.value.Element.properties.data_sources.extensions
            extensions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element
            _element.extension_name = AAZStrType(
                serialized_name="extensionName",
                flags={"required": True},
            )
            _element.extension_settings = AAZObjectType(
                serialized_name="extensionSettings",
            )
            _element.input_data_sources = AAZListType(
                serialized_name="inputDataSources",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            input_data_sources = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element.input_data_sources
            input_data_sources.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.extensions.Element.streams
            streams.Element = AAZStrType()

            iis_logs = cls._schema_on_200.value.Element.properties.data_sources.iis_logs
            iis_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element
            _element.log_directories = AAZListType(
                serialized_name="logDirectories",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            log_directories = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element.log_directories
            log_directories.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.iis_logs.Element.streams
            streams.Element = AAZStrType()

            log_files = cls._schema_on_200.value.Element.properties.data_sources.log_files
            log_files.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element
            _element.file_patterns = AAZListType(
                serialized_name="filePatterns",
                flags={"required": True},
            )
            _element.format = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType()
            _element.settings = AAZObjectType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            file_patterns = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.file_patterns
            file_patterns.Element = AAZStrType()

            settings = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.settings
            settings.text = AAZObjectType()

            text = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.settings.text
            text.record_start_timestamp_format = AAZStrType(
                serialized_name="recordStartTimestampFormat",
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.log_files.Element.streams
            streams.Element = AAZStrType()

            performance_counters = cls._schema_on_200.value.Element.properties.data_sources.performance_counters
            performance_counters.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element
            _element.counter_specifiers = AAZListType(
                serialized_name="counterSpecifiers",
            )
            _element.name = AAZStrType()
            _element.sampling_frequency_in_seconds = AAZIntType(
                serialized_name="samplingFrequencyInSeconds",
            )
            _element.streams = AAZListType()

            counter_specifiers = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element.counter_specifiers
            counter_specifiers.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.performance_counters.Element.streams
            streams.Element = AAZStrType()

            platform_telemetry = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry
            platform_telemetry.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.platform_telemetry.Element.streams
            streams.Element = AAZStrType()

            prometheus_forwarder = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder
            prometheus_forwarder.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element
            _element.label_include_filter = AAZDictType(
                serialized_name="labelIncludeFilter",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            label_include_filter = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element.label_include_filter
            label_include_filter.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.prometheus_forwarder.Element.streams
            streams.Element = AAZStrType()

            syslog = cls._schema_on_200.value.Element.properties.data_sources.syslog
            syslog.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element
            _element.facility_names = AAZListType(
                serialized_name="facilityNames",
            )
            _element.log_levels = AAZListType(
                serialized_name="logLevels",
            )
            _element.name = AAZStrType()
            _element.streams = AAZListType()

            facility_names = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.facility_names
            facility_names.Element = AAZStrType()

            log_levels = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.log_levels
            log_levels.Element = AAZStrType()

            streams = cls._schema_on_200.value.Element.properties.data_sources.syslog.Element.streams
            streams.Element = AAZStrType()

            windows_event_logs = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs
            windows_event_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType()
            _element.x_path_queries = AAZListType(
                serialized_name="xPathQueries",
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element.streams
            streams.Element = AAZStrType()

            x_path_queries = cls._schema_on_200.value.Element.properties.data_sources.windows_event_logs.Element.x_path_queries
            x_path_queries.Element = AAZStrType()

            windows_firewall_logs = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs
            windows_firewall_logs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs.Element
            _element.name = AAZStrType()
            _element.streams = AAZListType(
                flags={"required": True},
            )

            streams = cls._schema_on_200.value.Element.properties.data_sources.windows_firewall_logs.Element.streams
            streams.Element = AAZStrType()

            destinations = cls._schema_on_200.value.Element.properties.destinations
            destinations.azure_monitor_metrics = AAZObjectType(
                serialized_name="azureMonitorMetrics",
            )
            destinations.event_hubs = AAZListType(
                serialized_name="eventHubs",
            )
            destinations.event_hubs_direct = AAZListType(
                serialized_name="eventHubsDirect",
            )
            destinations.log_analytics = AAZListType(
                serialized_name="logAnalytics",
            )
            destinations.monitoring_accounts = AAZListType(
                serialized_name="monitoringAccounts",
            )
            destinations.storage_accounts = AAZListType(
                serialized_name="storageAccounts",
            )
            destinations.storage_blobs_direct = AAZListType(
                serialized_name="storageBlobsDirect",
            )
            destinations.storage_tables_direct = AAZListType(
                serialized_name="storageTablesDirect",
            )

            azure_monitor_metrics = cls._schema_on_200.value.Element.properties.destinations.azure_monitor_metrics
            azure_monitor_metrics.name = AAZStrType()

            event_hubs = cls._schema_on_200.value.Element.properties.destinations.event_hubs
            event_hubs.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.event_hubs.Element
            _element.event_hub_resource_id = AAZStrType(
                serialized_name="eventHubResourceId",
            )
            _element.name = AAZStrType()

            event_hubs_direct = cls._schema_on_200.value.Element.properties.destinations.event_hubs_direct
            event_hubs_direct.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.event_hubs_direct.Element
            _element.event_hub_resource_id = AAZStrType(
                serialized_name="eventHubResourceId",
            )
            _element.name = AAZStrType()

            log_analytics = cls._schema_on_200.value.Element.properties.destinations.log_analytics
            log_analytics.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.log_analytics.Element
            _element.name = AAZStrType()
            _element.workspace_id = AAZStrType(
                serialized_name="workspaceId",
                flags={"read_only": True},
            )
            _element.workspace_resource_id = AAZStrType(
                serialized_name="workspaceResourceId",
            )

            monitoring_accounts = cls._schema_on_200.value.Element.properties.destinations.monitoring_accounts
            monitoring_accounts.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.monitoring_accounts.Element
            _element.account_id = AAZStrType(
                serialized_name="accountId",
                flags={"read_only": True},
            )
            _element.account_resource_id = AAZStrType(
                serialized_name="accountResourceId",
            )
            _element.name = AAZStrType()

            storage_accounts = cls._schema_on_200.value.Element.properties.destinations.storage_accounts
            storage_accounts.Element = AAZObjectType()
            _ListHelper._build_schema_storage_blob_destination_read(storage_accounts.Element)

            storage_blobs_direct = cls._schema_on_200.value.Element.properties.destinations.storage_blobs_direct
            storage_blobs_direct.Element = AAZObjectType()
            _ListHelper._build_schema_storage_blob_destination_read(storage_blobs_direct.Element)

            storage_tables_direct = cls._schema_on_200.value.Element.properties.destinations.storage_tables_direct
            storage_tables_direct.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.destinations.storage_tables_direct.Element
            _element.name = AAZStrType()
            _element.storage_account_resource_id = AAZStrType(
                serialized_name="storageAccountResourceId",
            )
            _element.table_name = AAZStrType(
                serialized_name="tableName",
            )

            metadata = cls._schema_on_200.value.Element.properties.metadata
            metadata.provisioned_by = AAZStrType(
                serialized_name="provisionedBy",
                flags={"read_only": True},
            )
            metadata.provisioned_by_resource_id = AAZStrType(
                serialized_name="provisionedByResourceId",
                flags={"read_only": True},
            )

            stream_declarations = cls._schema_on_200.value.Element.properties.stream_declarations
            stream_declarations.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.stream_declarations.Element
            _element.columns = AAZListType()

            columns = cls._schema_on_200.value.Element.properties.stream_declarations.Element.columns
            columns.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.stream_declarations.Element.columns.Element
            _element.name = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_storage_blob_destination_read = None

    @classmethod
    def _build_schema_storage_blob_destination_read(cls, _schema):
        if cls._schema_storage_blob_destination_read is not None:
            _schema.container_name = cls._schema_storage_blob_destination_read.container_name
            _schema.name = cls._schema_storage_blob_destination_read.name
            _schema.storage_account_resource_id = cls._schema_storage_blob_destination_read.storage_account_resource_id
            return

        cls._schema_storage_blob_destination_read = _schema_storage_blob_destination_read = AAZObjectType()

        storage_blob_destination_read = _schema_storage_blob_destination_read
        storage_blob_destination_read.container_name = AAZStrType(
            serialized_name="containerName",
        )
        storage_blob_destination_read.name = AAZStrType()
        storage_blob_destination_read.storage_account_resource_id = AAZStrType(
            serialized_name="storageAccountResourceId",
        )

        _schema.container_name = cls._schema_storage_blob_destination_read.container_name
        _schema.name = cls._schema_storage_blob_destination_read.name
        _schema.storage_account_resource_id = cls._schema_storage_blob_destination_read.storage_account_resource_id


__all__ = ["List"]
