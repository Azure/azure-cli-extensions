# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor data-collection rule update",
)
class Update(AAZCommand):
    """Update a data collection rule.
    """

    _aaz_info = {
        "version": "2022-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/datacollectionrules/{}", "2022-06-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.data_collection_rule_name = AAZStrArg(
            options=["-n", "--name", "--rule-name", "--data-collection-rule-name"],
            help="The name of the data collection rule. The name is case insensitive.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            help="Managed service identity of the resource.",
            nullable=True,
        )
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            help="The kind of the resource.",
            nullable=True,
            enum={"Linux": "Linux", "Windows": "Windows"},
        )
        _args_schema.data_collection_endpoint_id = AAZStrArg(
            options=["--endpoint-id", "--data-collection-endpoint-id"],
            help="The resource ID of the data collection endpoint that is to be associated.",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            help="Description of the association.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned,UserAssigned": "SystemAssigned,UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.data_flows_raw = AAZListArg(
            options=["--data-flows-raw"],
            arg_group="Properties",
            help="The specification of data flows.",
            nullable=True,
        )
        _args_schema.data_sources = AAZObjectArg(
            options=["--data-sources"],
            arg_group="Properties",
            help="The specification of data sources. This property is optional and can be omitted if the rule is meant to be used via direct calls to the provisioned endpoint.",
            nullable=True,
        )
        _args_schema.destinations = AAZObjectArg(
            options=["--destinations"],
            arg_group="Properties",
            help="The specification of destinations.",
            nullable=True,
        )
        _args_schema.stream_declarations = AAZDictArg(
            options=["--stream-declarations"],
            arg_group="Properties",
            help="Declaration of custom streams used in this rule.",
            nullable=True,
        )

        data_flows_raw = cls._args_schema.data_flows_raw
        data_flows_raw.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_flows_raw.Element
        _element.built_in_transform = AAZStrArg(
            options=["built-in-transform"],
            help="The builtIn transform to transform stream data",
            nullable=True,
        )
        _element.destinations = AAZListArg(
            options=["destinations"],
            help="List of destinations for this data flow.",
            nullable=True,
        )
        _element.output_stream = AAZStrArg(
            options=["output-stream"],
            help="The output stream of the transform. Only required if the transform changes data to a different stream.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams for this data flow.",
            nullable=True,
        )
        _element.transform_kql = AAZStrArg(
            options=["transform-kql"],
            help="The KQL query to transform stream data.",
            nullable=True,
        )

        destinations = cls._args_schema.data_flows_raw.Element.destinations
        destinations.Element = AAZStrArg(
            nullable=True,
        )

        streams = cls._args_schema.data_flows_raw.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-Event": "Microsoft-Event", "Microsoft-InsightsMetrics": "Microsoft-InsightsMetrics", "Microsoft-Perf": "Microsoft-Perf", "Microsoft-Syslog": "Microsoft-Syslog", "Microsoft-WindowsEvent": "Microsoft-WindowsEvent"},
        )

        data_sources = cls._args_schema.data_sources
        data_sources.data_imports = AAZObjectArg(
            options=["data-imports"],
            help="Specifications of pull based data sources",
            nullable=True,
        )
        data_sources.extensions = AAZListArg(
            options=["extensions"],
            help="The list of Azure VM extension data source configurations.",
            nullable=True,
        )
        data_sources.iis_logs = AAZListArg(
            options=["iis-logs"],
            help="The list of IIS logs source configurations.",
            nullable=True,
        )
        data_sources.log_files = AAZListArg(
            options=["log-files"],
            help="The list of Log files source configurations.",
            nullable=True,
        )
        data_sources.performance_counters = AAZListArg(
            options=["performance-counters"],
            help="The list of performance counter data source configurations.",
            nullable=True,
        )
        data_sources.platform_telemetry = AAZListArg(
            options=["platform-telemetry"],
            help="The list of platform telemetry configurations",
            nullable=True,
        )
        data_sources.prometheus_forwarder = AAZListArg(
            options=["prometheus-forwarder"],
            help="The list of Prometheus forwarder data source configurations.",
            nullable=True,
        )
        data_sources.syslog = AAZListArg(
            options=["syslog"],
            help="The list of Syslog data source configurations.",
            nullable=True,
        )
        data_sources.windows_event_logs = AAZListArg(
            options=["windows-event-logs"],
            help="The list of Windows Event Log data source configurations.",
            nullable=True,
        )
        data_sources.windows_firewall_logs = AAZListArg(
            options=["windows-firewall-logs"],
            help="The list of Windows Firewall logs source configurations.",
            nullable=True,
        )

        data_imports = cls._args_schema.data_sources.data_imports
        data_imports.event_hub = AAZObjectArg(
            options=["event-hub"],
            help="Definition of Event Hub configuration.",
            nullable=True,
        )

        event_hub = cls._args_schema.data_sources.data_imports.event_hub
        event_hub.consumer_group = AAZStrArg(
            options=["consumer-group"],
            help="Event Hub consumer group name",
            nullable=True,
        )
        event_hub.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        event_hub.stream = AAZStrArg(
            options=["stream"],
            help="The stream to collect from EventHub",
            nullable=True,
        )

        extensions = cls._args_schema.data_sources.extensions
        extensions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.extensions.Element
        _element.extension_name = AAZStrArg(
            options=["extension-name"],
            help="The name of the VM extension.",
        )
        _element.extension_settings = AAZObjectArg(
            options=["extension-settings"],
            help="The extension settings. The format is specific for particular extension.",
            nullable=True,
            blank={},
        )
        _element.input_data_sources = AAZListArg(
            options=["input-data-sources"],
            help="The list of data sources this extension needs data from.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.",
            nullable=True,
        )

        input_data_sources = cls._args_schema.data_sources.extensions.Element.input_data_sources
        input_data_sources.Element = AAZStrArg(
            nullable=True,
        )

        streams = cls._args_schema.data_sources.extensions.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-Event": "Microsoft-Event", "Microsoft-InsightsMetrics": "Microsoft-InsightsMetrics", "Microsoft-Perf": "Microsoft-Perf", "Microsoft-Syslog": "Microsoft-Syslog", "Microsoft-WindowsEvent": "Microsoft-WindowsEvent"},
        )

        iis_logs = cls._args_schema.data_sources.iis_logs
        iis_logs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.iis_logs.Element
        _element.log_directories = AAZListArg(
            options=["log-directories"],
            help="Absolute paths file location",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="IIS streams",
        )

        log_directories = cls._args_schema.data_sources.iis_logs.Element.log_directories
        log_directories.Element = AAZStrArg(
            nullable=True,
        )

        streams = cls._args_schema.data_sources.iis_logs.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
        )

        log_files = cls._args_schema.data_sources.log_files
        log_files.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.log_files.Element
        _element.file_patterns = AAZListArg(
            options=["file-patterns"],
            help="File Patterns where the log files are located",
        )
        _element.format = AAZStrArg(
            options=["format"],
            help="The data format of the log files",
            enum={"text": "text"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.settings = AAZObjectArg(
            options=["settings"],
            help="The log files specific settings.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to. A stream indicates what schema will be used for this data source",
        )

        file_patterns = cls._args_schema.data_sources.log_files.Element.file_patterns
        file_patterns.Element = AAZStrArg(
            nullable=True,
        )

        settings = cls._args_schema.data_sources.log_files.Element.settings
        settings.text = AAZObjectArg(
            options=["text"],
            help="Text settings",
            nullable=True,
        )

        text = cls._args_schema.data_sources.log_files.Element.settings.text
        text.record_start_timestamp_format = AAZStrArg(
            options=["record-start-timestamp-format"],
            help="One of the supported timestamp formats",
            enum={"ISO 8601": "ISO 8601", "M/D/YYYY HH:MM:SS AM/PM": "M/D/YYYY HH:MM:SS AM/PM", "MMM d hh:mm:ss": "MMM d hh:mm:ss", "Mon DD, YYYY HH:MM:SS": "Mon DD, YYYY HH:MM:SS", "YYYY-MM-DD HH:MM:SS": "YYYY-MM-DD HH:MM:SS", "dd/MMM/yyyy:HH:mm:ss zzz": "dd/MMM/yyyy:HH:mm:ss zzz", "ddMMyy HH:mm:ss": "ddMMyy HH:mm:ss", "yyMMdd HH:mm:ss": "yyMMdd HH:mm:ss", "yyyy-MM-ddTHH:mm:ssK": "yyyy-MM-ddTHH:mm:ssK"},
        )

        streams = cls._args_schema.data_sources.log_files.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
        )

        performance_counters = cls._args_schema.data_sources.performance_counters
        performance_counters.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.performance_counters.Element
        _element.counter_specifiers = AAZListArg(
            options=["counter-specifiers"],
            help="A list of specifier names of the performance counters you want to collect. Use a wildcard (*) to collect a counter for all instances. To get a list of performance counters on Windows, run the command 'typeperf'.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.sampling_frequency_in_seconds = AAZIntArg(
            options=["sampling-frequency-in-seconds"],
            help="The number of seconds between consecutive counter measurements (samples).",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.",
            nullable=True,
        )

        counter_specifiers = cls._args_schema.data_sources.performance_counters.Element.counter_specifiers
        counter_specifiers.Element = AAZStrArg(
            nullable=True,
        )

        streams = cls._args_schema.data_sources.performance_counters.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-InsightsMetrics": "Microsoft-InsightsMetrics", "Microsoft-Perf": "Microsoft-Perf"},
        )

        platform_telemetry = cls._args_schema.data_sources.platform_telemetry
        platform_telemetry.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.platform_telemetry.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of platform telemetry streams to collect",
        )

        streams = cls._args_schema.data_sources.platform_telemetry.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
        )

        prometheus_forwarder = cls._args_schema.data_sources.prometheus_forwarder
        prometheus_forwarder.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.prometheus_forwarder.Element
        _element.label_include_filter = AAZDictArg(
            options=["label-include-filter"],
            help="The list of label inclusion filters in the form of label \"name-value\" pairs. Currently only one label is supported: 'microsoft_metrics_include_label'. Label values are matched case-insensitively.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to.",
            nullable=True,
        )

        label_include_filter = cls._args_schema.data_sources.prometheus_forwarder.Element.label_include_filter
        label_include_filter.Element = AAZStrArg(
            nullable=True,
        )

        streams = cls._args_schema.data_sources.prometheus_forwarder.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-PrometheusMetrics": "Microsoft-PrometheusMetrics"},
        )

        syslog = cls._args_schema.data_sources.syslog
        syslog.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.syslog.Element
        _element.facility_names = AAZListArg(
            options=["facility-names"],
            help="The list of facility names.",
            nullable=True,
        )
        _element.log_levels = AAZListArg(
            options=["log-levels"],
            help="The log levels to collect.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.",
            nullable=True,
        )

        facility_names = cls._args_schema.data_sources.syslog.Element.facility_names
        facility_names.Element = AAZStrArg(
            nullable=True,
            enum={"*": "*", "auth": "auth", "authpriv": "authpriv", "cron": "cron", "daemon": "daemon", "kern": "kern", "local0": "local0", "local1": "local1", "local2": "local2", "local3": "local3", "local4": "local4", "local5": "local5", "local6": "local6", "local7": "local7", "lpr": "lpr", "mail": "mail", "mark": "mark", "news": "news", "syslog": "syslog", "user": "user", "uucp": "uucp"},
        )

        log_levels = cls._args_schema.data_sources.syslog.Element.log_levels
        log_levels.Element = AAZStrArg(
            nullable=True,
            enum={"*": "*", "Alert": "Alert", "Critical": "Critical", "Debug": "Debug", "Emergency": "Emergency", "Error": "Error", "Info": "Info", "Notice": "Notice", "Warning": "Warning"},
        )

        streams = cls._args_schema.data_sources.syslog.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-Syslog": "Microsoft-Syslog"},
        )

        windows_event_logs = cls._args_schema.data_sources.windows_event_logs
        windows_event_logs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.windows_event_logs.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="List of streams that this data source will be sent to. A stream indicates what schema will be used for this data and usually what table in Log Analytics the data will be sent to.",
            nullable=True,
        )
        _element.x_path_queries = AAZListArg(
            options=["x-path-queries"],
            help="A list of Windows Event Log queries in XPATH format.",
            nullable=True,
        )

        streams = cls._args_schema.data_sources.windows_event_logs.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
            enum={"Microsoft-Event": "Microsoft-Event", "Microsoft-WindowsEvent": "Microsoft-WindowsEvent"},
        )

        x_path_queries = cls._args_schema.data_sources.windows_event_logs.Element.x_path_queries
        x_path_queries.Element = AAZStrArg(
            nullable=True,
        )

        windows_firewall_logs = cls._args_schema.data_sources.windows_firewall_logs
        windows_firewall_logs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.data_sources.windows_firewall_logs.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the data source. This name should be unique across all data sources (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.streams = AAZListArg(
            options=["streams"],
            help="Firewall logs streams",
        )

        streams = cls._args_schema.data_sources.windows_firewall_logs.Element.streams
        streams.Element = AAZStrArg(
            nullable=True,
        )

        destinations = cls._args_schema.destinations
        destinations.azure_monitor_metrics = AAZObjectArg(
            options=["azure-monitor-metrics"],
            help="Azure Monitor Metrics destination.",
            nullable=True,
        )
        destinations.event_hubs = AAZListArg(
            options=["event-hubs"],
            help="List of Event Hubs destinations.",
            nullable=True,
        )
        destinations.event_hubs_direct = AAZListArg(
            options=["event-hubs-direct"],
            help="List of Event Hubs Direct destinations.",
            nullable=True,
        )
        destinations.log_analytics = AAZListArg(
            options=["log-analytics"],
            help="List of Log Analytics destinations.",
            nullable=True,
        )
        destinations.monitoring_accounts = AAZListArg(
            options=["monitoring-accounts"],
            help="List of monitoring account destinations.",
            nullable=True,
        )
        destinations.storage_accounts = AAZListArg(
            options=["storage-accounts"],
            help="List of storage accounts destinations.",
            nullable=True,
        )
        destinations.storage_blobs_direct = AAZListArg(
            options=["storage-blobs-direct"],
            help="List of Storage Blob Direct destinations. To be used only for sending data directly to store from the agent.",
            nullable=True,
        )
        destinations.storage_tables_direct = AAZListArg(
            options=["storage-tables-direct"],
            help="List of Storage Table Direct destinations.",
            nullable=True,
        )

        azure_monitor_metrics = cls._args_schema.destinations.azure_monitor_metrics
        azure_monitor_metrics.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )

        event_hubs = cls._args_schema.destinations.event_hubs
        event_hubs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.destinations.event_hubs.Element
        _element.event_hub_resource_id = AAZStrArg(
            options=["event-hub-resource-id"],
            help="The resource ID of the event hub.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )

        event_hubs_direct = cls._args_schema.destinations.event_hubs_direct
        event_hubs_direct.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.destinations.event_hubs_direct.Element
        _element.event_hub_resource_id = AAZStrArg(
            options=["event-hub-resource-id"],
            help="The resource ID of the event hub.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )

        log_analytics = cls._args_schema.destinations.log_analytics
        log_analytics.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.destinations.log_analytics.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.workspace_resource_id = AAZStrArg(
            options=["workspace-resource-id"],
            help="The resource ID of the Log Analytics workspace.",
            nullable=True,
        )

        monitoring_accounts = cls._args_schema.destinations.monitoring_accounts
        monitoring_accounts.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.destinations.monitoring_accounts.Element
        _element.account_resource_id = AAZStrArg(
            options=["account-resource-id"],
            help="The resource ID of the monitoring account.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )

        storage_accounts = cls._args_schema.destinations.storage_accounts
        storage_accounts.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_storage_blob_destination_update(storage_accounts.Element)

        storage_blobs_direct = cls._args_schema.destinations.storage_blobs_direct
        storage_blobs_direct.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_storage_blob_destination_update(storage_blobs_direct.Element)

        storage_tables_direct = cls._args_schema.destinations.storage_tables_direct
        storage_tables_direct.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.destinations.storage_tables_direct.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )
        _element.storage_account_resource_id = AAZStrArg(
            options=["storage-account-resource-id"],
            help="The resource ID of the storage account.",
            nullable=True,
        )
        _element.table_name = AAZStrArg(
            options=["table-name"],
            help="The name of the Storage Table.",
            nullable=True,
        )

        stream_declarations = cls._args_schema.stream_declarations
        stream_declarations.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.stream_declarations.Element
        _element.columns = AAZListArg(
            options=["columns"],
            help="List of columns used by data in this stream.",
            nullable=True,
        )

        columns = cls._args_schema.stream_declarations.Element.columns
        columns.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.stream_declarations.Element.columns.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the column.",
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of the column data.",
            nullable=True,
            enum={"boolean": "boolean", "datetime": "datetime", "dynamic": "dynamic", "int": "int", "long": "long", "real": "real", "string": "string"},
        )
        return cls._args_schema

    _args_storage_blob_destination_update = None

    @classmethod
    def _build_args_storage_blob_destination_update(cls, _schema):
        if cls._args_storage_blob_destination_update is not None:
            _schema.container_name = cls._args_storage_blob_destination_update.container_name
            _schema.name = cls._args_storage_blob_destination_update.name
            _schema.storage_account_resource_id = cls._args_storage_blob_destination_update.storage_account_resource_id
            return

        cls._args_storage_blob_destination_update = AAZObjectArg(
            nullable=True,
        )

        storage_blob_destination_update = cls._args_storage_blob_destination_update
        storage_blob_destination_update.container_name = AAZStrArg(
            options=["container-name"],
            help="The container name of the Storage Blob.",
            nullable=True,
        )
        storage_blob_destination_update.name = AAZStrArg(
            options=["name"],
            help="A friendly name for the destination. This name should be unique across all destinations (regardless of type) within the data collection rule.",
            nullable=True,
        )
        storage_blob_destination_update.storage_account_resource_id = AAZStrArg(
            options=["storage-account-resource-id"],
            help="The resource ID of the storage account.",
            nullable=True,
        )

        _schema.container_name = cls._args_storage_blob_destination_update.container_name
        _schema.name = cls._args_storage_blob_destination_update.name
        _schema.storage_account_resource_id = cls._args_storage_blob_destination_update.storage_account_resource_id

    def _execute_operations(self):
        self.pre_operations()
        self.DataCollectionRulesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.DataCollectionRulesCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DataCollectionRulesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dataCollectionRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dataCollectionRuleName", self.ctx.args.data_collection_rule_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_data_collection_rule_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class DataCollectionRulesCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/dataCollectionRules/{dataCollectionRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dataCollectionRuleName", self.ctx.args.data_collection_rule_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_data_collection_rule_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("kind", AAZStrType, ".kind")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".", typ_kwargs={"nullable": True})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("dataCollectionEndpointId", AAZStrType, ".data_collection_endpoint_id")
                properties.set_prop("dataFlows", AAZListType, ".data_flows_raw")
                properties.set_prop("dataSources", AAZObjectType, ".data_sources")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("destinations", AAZObjectType, ".destinations")
                properties.set_prop("streamDeclarations", AAZDictType, ".stream_declarations")

            data_flows = _builder.get(".properties.dataFlows")
            if data_flows is not None:
                data_flows.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataFlows[]")
            if _elements is not None:
                _elements.set_prop("builtInTransform", AAZStrType, ".built_in_transform")
                _elements.set_prop("destinations", AAZListType, ".destinations")
                _elements.set_prop("outputStream", AAZStrType, ".output_stream")
                _elements.set_prop("streams", AAZListType, ".streams")
                _elements.set_prop("transformKql", AAZStrType, ".transform_kql")

            destinations = _builder.get(".properties.dataFlows[].destinations")
            if destinations is not None:
                destinations.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataFlows[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            data_sources = _builder.get(".properties.dataSources")
            if data_sources is not None:
                data_sources.set_prop("dataImports", AAZObjectType, ".data_imports")
                data_sources.set_prop("extensions", AAZListType, ".extensions")
                data_sources.set_prop("iisLogs", AAZListType, ".iis_logs")
                data_sources.set_prop("logFiles", AAZListType, ".log_files")
                data_sources.set_prop("performanceCounters", AAZListType, ".performance_counters")
                data_sources.set_prop("platformTelemetry", AAZListType, ".platform_telemetry")
                data_sources.set_prop("prometheusForwarder", AAZListType, ".prometheus_forwarder")
                data_sources.set_prop("syslog", AAZListType, ".syslog")
                data_sources.set_prop("windowsEventLogs", AAZListType, ".windows_event_logs")
                data_sources.set_prop("windowsFirewallLogs", AAZListType, ".windows_firewall_logs")

            data_imports = _builder.get(".properties.dataSources.dataImports")
            if data_imports is not None:
                data_imports.set_prop("eventHub", AAZObjectType, ".event_hub")

            event_hub = _builder.get(".properties.dataSources.dataImports.eventHub")
            if event_hub is not None:
                event_hub.set_prop("consumerGroup", AAZStrType, ".consumer_group")
                event_hub.set_prop("name", AAZStrType, ".name")
                event_hub.set_prop("stream", AAZStrType, ".stream")

            extensions = _builder.get(".properties.dataSources.extensions")
            if extensions is not None:
                extensions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.extensions[]")
            if _elements is not None:
                _elements.set_prop("extensionName", AAZStrType, ".extension_name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("extensionSettings", AAZObjectType, ".extension_settings")
                _elements.set_prop("inputDataSources", AAZListType, ".input_data_sources")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams")

            input_data_sources = _builder.get(".properties.dataSources.extensions[].inputDataSources")
            if input_data_sources is not None:
                input_data_sources.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataSources.extensions[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            iis_logs = _builder.get(".properties.dataSources.iisLogs")
            if iis_logs is not None:
                iis_logs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.iisLogs[]")
            if _elements is not None:
                _elements.set_prop("logDirectories", AAZListType, ".log_directories")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams", typ_kwargs={"flags": {"required": True}})

            log_directories = _builder.get(".properties.dataSources.iisLogs[].logDirectories")
            if log_directories is not None:
                log_directories.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataSources.iisLogs[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            log_files = _builder.get(".properties.dataSources.logFiles")
            if log_files is not None:
                log_files.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.logFiles[]")
            if _elements is not None:
                _elements.set_prop("filePatterns", AAZListType, ".file_patterns", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("format", AAZStrType, ".format", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("settings", AAZObjectType, ".settings")
                _elements.set_prop("streams", AAZListType, ".streams", typ_kwargs={"flags": {"required": True}})

            file_patterns = _builder.get(".properties.dataSources.logFiles[].filePatterns")
            if file_patterns is not None:
                file_patterns.set_elements(AAZStrType, ".")

            settings = _builder.get(".properties.dataSources.logFiles[].settings")
            if settings is not None:
                settings.set_prop("text", AAZObjectType, ".text")

            text = _builder.get(".properties.dataSources.logFiles[].settings.text")
            if text is not None:
                text.set_prop("recordStartTimestampFormat", AAZStrType, ".record_start_timestamp_format", typ_kwargs={"flags": {"required": True}})

            streams = _builder.get(".properties.dataSources.logFiles[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            performance_counters = _builder.get(".properties.dataSources.performanceCounters")
            if performance_counters is not None:
                performance_counters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.performanceCounters[]")
            if _elements is not None:
                _elements.set_prop("counterSpecifiers", AAZListType, ".counter_specifiers")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("samplingFrequencyInSeconds", AAZIntType, ".sampling_frequency_in_seconds")
                _elements.set_prop("streams", AAZListType, ".streams")

            counter_specifiers = _builder.get(".properties.dataSources.performanceCounters[].counterSpecifiers")
            if counter_specifiers is not None:
                counter_specifiers.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataSources.performanceCounters[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            platform_telemetry = _builder.get(".properties.dataSources.platformTelemetry")
            if platform_telemetry is not None:
                platform_telemetry.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.platformTelemetry[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams", typ_kwargs={"flags": {"required": True}})

            streams = _builder.get(".properties.dataSources.platformTelemetry[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            prometheus_forwarder = _builder.get(".properties.dataSources.prometheusForwarder")
            if prometheus_forwarder is not None:
                prometheus_forwarder.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.prometheusForwarder[]")
            if _elements is not None:
                _elements.set_prop("labelIncludeFilter", AAZDictType, ".label_include_filter")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams")

            label_include_filter = _builder.get(".properties.dataSources.prometheusForwarder[].labelIncludeFilter")
            if label_include_filter is not None:
                label_include_filter.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataSources.prometheusForwarder[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            syslog = _builder.get(".properties.dataSources.syslog")
            if syslog is not None:
                syslog.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.syslog[]")
            if _elements is not None:
                _elements.set_prop("facilityNames", AAZListType, ".facility_names")
                _elements.set_prop("logLevels", AAZListType, ".log_levels")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams")

            facility_names = _builder.get(".properties.dataSources.syslog[].facilityNames")
            if facility_names is not None:
                facility_names.set_elements(AAZStrType, ".")

            log_levels = _builder.get(".properties.dataSources.syslog[].logLevels")
            if log_levels is not None:
                log_levels.set_elements(AAZStrType, ".")

            streams = _builder.get(".properties.dataSources.syslog[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            windows_event_logs = _builder.get(".properties.dataSources.windowsEventLogs")
            if windows_event_logs is not None:
                windows_event_logs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.windowsEventLogs[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams")
                _elements.set_prop("xPathQueries", AAZListType, ".x_path_queries")

            streams = _builder.get(".properties.dataSources.windowsEventLogs[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            x_path_queries = _builder.get(".properties.dataSources.windowsEventLogs[].xPathQueries")
            if x_path_queries is not None:
                x_path_queries.set_elements(AAZStrType, ".")

            windows_firewall_logs = _builder.get(".properties.dataSources.windowsFirewallLogs")
            if windows_firewall_logs is not None:
                windows_firewall_logs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dataSources.windowsFirewallLogs[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("streams", AAZListType, ".streams", typ_kwargs={"flags": {"required": True}})

            streams = _builder.get(".properties.dataSources.windowsFirewallLogs[].streams")
            if streams is not None:
                streams.set_elements(AAZStrType, ".")

            destinations = _builder.get(".properties.destinations")
            if destinations is not None:
                destinations.set_prop("azureMonitorMetrics", AAZObjectType, ".azure_monitor_metrics")
                destinations.set_prop("eventHubs", AAZListType, ".event_hubs")
                destinations.set_prop("eventHubsDirect", AAZListType, ".event_hubs_direct")
                destinations.set_prop("logAnalytics", AAZListType, ".log_analytics")
                destinations.set_prop("monitoringAccounts", AAZListType, ".monitoring_accounts")
                destinations.set_prop("storageAccounts", AAZListType, ".storage_accounts")
                destinations.set_prop("storageBlobsDirect", AAZListType, ".storage_blobs_direct")
                destinations.set_prop("storageTablesDirect", AAZListType, ".storage_tables_direct")

            azure_monitor_metrics = _builder.get(".properties.destinations.azureMonitorMetrics")
            if azure_monitor_metrics is not None:
                azure_monitor_metrics.set_prop("name", AAZStrType, ".name")

            event_hubs = _builder.get(".properties.destinations.eventHubs")
            if event_hubs is not None:
                event_hubs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.destinations.eventHubs[]")
            if _elements is not None:
                _elements.set_prop("eventHubResourceId", AAZStrType, ".event_hub_resource_id")
                _elements.set_prop("name", AAZStrType, ".name")

            event_hubs_direct = _builder.get(".properties.destinations.eventHubsDirect")
            if event_hubs_direct is not None:
                event_hubs_direct.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.destinations.eventHubsDirect[]")
            if _elements is not None:
                _elements.set_prop("eventHubResourceId", AAZStrType, ".event_hub_resource_id")
                _elements.set_prop("name", AAZStrType, ".name")

            log_analytics = _builder.get(".properties.destinations.logAnalytics")
            if log_analytics is not None:
                log_analytics.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.destinations.logAnalytics[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("workspaceResourceId", AAZStrType, ".workspace_resource_id")

            monitoring_accounts = _builder.get(".properties.destinations.monitoringAccounts")
            if monitoring_accounts is not None:
                monitoring_accounts.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.destinations.monitoringAccounts[]")
            if _elements is not None:
                _elements.set_prop("accountResourceId", AAZStrType, ".account_resource_id")
                _elements.set_prop("name", AAZStrType, ".name")

            storage_accounts = _builder.get(".properties.destinations.storageAccounts")
            if storage_accounts is not None:
                _UpdateHelper._build_schema_storage_blob_destination_update(storage_accounts.set_elements(AAZObjectType, "."))

            storage_blobs_direct = _builder.get(".properties.destinations.storageBlobsDirect")
            if storage_blobs_direct is not None:
                _UpdateHelper._build_schema_storage_blob_destination_update(storage_blobs_direct.set_elements(AAZObjectType, "."))

            storage_tables_direct = _builder.get(".properties.destinations.storageTablesDirect")
            if storage_tables_direct is not None:
                storage_tables_direct.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.destinations.storageTablesDirect[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("storageAccountResourceId", AAZStrType, ".storage_account_resource_id")
                _elements.set_prop("tableName", AAZStrType, ".table_name")

            stream_declarations = _builder.get(".properties.streamDeclarations")
            if stream_declarations is not None:
                stream_declarations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.streamDeclarations{}")
            if _elements is not None:
                _elements.set_prop("columns", AAZListType, ".columns")

            columns = _builder.get(".properties.streamDeclarations{}.columns")
            if columns is not None:
                columns.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.streamDeclarations{}.columns[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("type", AAZStrType, ".type")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_storage_blob_destination_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("containerName", AAZStrType, ".container_name")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("storageAccountResourceId", AAZStrType, ".storage_account_resource_id")

    _schema_data_collection_rule_resource_read = None

    @classmethod
    def _build_schema_data_collection_rule_resource_read(cls, _schema):
        if cls._schema_data_collection_rule_resource_read is not None:
            _schema.etag = cls._schema_data_collection_rule_resource_read.etag
            _schema.id = cls._schema_data_collection_rule_resource_read.id
            _schema.identity = cls._schema_data_collection_rule_resource_read.identity
            _schema.kind = cls._schema_data_collection_rule_resource_read.kind
            _schema.location = cls._schema_data_collection_rule_resource_read.location
            _schema.name = cls._schema_data_collection_rule_resource_read.name
            _schema.properties = cls._schema_data_collection_rule_resource_read.properties
            _schema.system_data = cls._schema_data_collection_rule_resource_read.system_data
            _schema.tags = cls._schema_data_collection_rule_resource_read.tags
            _schema.type = cls._schema_data_collection_rule_resource_read.type
            return

        cls._schema_data_collection_rule_resource_read = _schema_data_collection_rule_resource_read = AAZObjectType()

        data_collection_rule_resource_read = _schema_data_collection_rule_resource_read
        data_collection_rule_resource_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        data_collection_rule_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        data_collection_rule_resource_read.identity = AAZObjectType()
        data_collection_rule_resource_read.kind = AAZStrType()
        data_collection_rule_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        data_collection_rule_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        data_collection_rule_resource_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        data_collection_rule_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        data_collection_rule_resource_read.tags = AAZDictType()
        data_collection_rule_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_data_collection_rule_resource_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_data_collection_rule_resource_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_data_collection_rule_resource_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_data_collection_rule_resource_read.properties
        properties.data_collection_endpoint_id = AAZStrType(
            serialized_name="dataCollectionEndpointId",
        )
        properties.data_flows = AAZListType(
            serialized_name="dataFlows",
        )
        properties.data_sources = AAZObjectType(
            serialized_name="dataSources",
        )
        properties.description = AAZStrType()
        properties.destinations = AAZObjectType()
        properties.immutable_id = AAZStrType(
            serialized_name="immutableId",
            flags={"read_only": True},
        )
        properties.metadata = AAZObjectType(
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.stream_declarations = AAZDictType(
            serialized_name="streamDeclarations",
        )

        data_flows = _schema_data_collection_rule_resource_read.properties.data_flows
        data_flows.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_flows.Element
        _element.built_in_transform = AAZStrType(
            serialized_name="builtInTransform",
        )
        _element.destinations = AAZListType()
        _element.output_stream = AAZStrType(
            serialized_name="outputStream",
        )
        _element.streams = AAZListType()
        _element.transform_kql = AAZStrType(
            serialized_name="transformKql",
        )

        destinations = _schema_data_collection_rule_resource_read.properties.data_flows.Element.destinations
        destinations.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_flows.Element.streams
        streams.Element = AAZStrType()

        data_sources = _schema_data_collection_rule_resource_read.properties.data_sources
        data_sources.data_imports = AAZObjectType(
            serialized_name="dataImports",
        )
        data_sources.extensions = AAZListType()
        data_sources.iis_logs = AAZListType(
            serialized_name="iisLogs",
        )
        data_sources.log_files = AAZListType(
            serialized_name="logFiles",
        )
        data_sources.performance_counters = AAZListType(
            serialized_name="performanceCounters",
        )
        data_sources.platform_telemetry = AAZListType(
            serialized_name="platformTelemetry",
        )
        data_sources.prometheus_forwarder = AAZListType(
            serialized_name="prometheusForwarder",
        )
        data_sources.syslog = AAZListType()
        data_sources.windows_event_logs = AAZListType(
            serialized_name="windowsEventLogs",
        )
        data_sources.windows_firewall_logs = AAZListType(
            serialized_name="windowsFirewallLogs",
        )

        data_imports = _schema_data_collection_rule_resource_read.properties.data_sources.data_imports
        data_imports.event_hub = AAZObjectType(
            serialized_name="eventHub",
        )

        event_hub = _schema_data_collection_rule_resource_read.properties.data_sources.data_imports.event_hub
        event_hub.consumer_group = AAZStrType(
            serialized_name="consumerGroup",
        )
        event_hub.name = AAZStrType()
        event_hub.stream = AAZStrType()

        extensions = _schema_data_collection_rule_resource_read.properties.data_sources.extensions
        extensions.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.extensions.Element
        _element.extension_name = AAZStrType(
            serialized_name="extensionName",
            flags={"required": True},
        )
        _element.extension_settings = AAZObjectType(
            serialized_name="extensionSettings",
        )
        _element.input_data_sources = AAZListType(
            serialized_name="inputDataSources",
        )
        _element.name = AAZStrType()
        _element.streams = AAZListType()

        input_data_sources = _schema_data_collection_rule_resource_read.properties.data_sources.extensions.Element.input_data_sources
        input_data_sources.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.extensions.Element.streams
        streams.Element = AAZStrType()

        iis_logs = _schema_data_collection_rule_resource_read.properties.data_sources.iis_logs
        iis_logs.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.iis_logs.Element
        _element.log_directories = AAZListType(
            serialized_name="logDirectories",
        )
        _element.name = AAZStrType()
        _element.streams = AAZListType(
            flags={"required": True},
        )

        log_directories = _schema_data_collection_rule_resource_read.properties.data_sources.iis_logs.Element.log_directories
        log_directories.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.iis_logs.Element.streams
        streams.Element = AAZStrType()

        log_files = _schema_data_collection_rule_resource_read.properties.data_sources.log_files
        log_files.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.log_files.Element
        _element.file_patterns = AAZListType(
            serialized_name="filePatterns",
            flags={"required": True},
        )
        _element.format = AAZStrType(
            flags={"required": True},
        )
        _element.name = AAZStrType()
        _element.settings = AAZObjectType()
        _element.streams = AAZListType(
            flags={"required": True},
        )

        file_patterns = _schema_data_collection_rule_resource_read.properties.data_sources.log_files.Element.file_patterns
        file_patterns.Element = AAZStrType()

        settings = _schema_data_collection_rule_resource_read.properties.data_sources.log_files.Element.settings
        settings.text = AAZObjectType()

        text = _schema_data_collection_rule_resource_read.properties.data_sources.log_files.Element.settings.text
        text.record_start_timestamp_format = AAZStrType(
            serialized_name="recordStartTimestampFormat",
            flags={"required": True},
        )

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.log_files.Element.streams
        streams.Element = AAZStrType()

        performance_counters = _schema_data_collection_rule_resource_read.properties.data_sources.performance_counters
        performance_counters.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.performance_counters.Element
        _element.counter_specifiers = AAZListType(
            serialized_name="counterSpecifiers",
        )
        _element.name = AAZStrType()
        _element.sampling_frequency_in_seconds = AAZIntType(
            serialized_name="samplingFrequencyInSeconds",
        )
        _element.streams = AAZListType()

        counter_specifiers = _schema_data_collection_rule_resource_read.properties.data_sources.performance_counters.Element.counter_specifiers
        counter_specifiers.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.performance_counters.Element.streams
        streams.Element = AAZStrType()

        platform_telemetry = _schema_data_collection_rule_resource_read.properties.data_sources.platform_telemetry
        platform_telemetry.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.platform_telemetry.Element
        _element.name = AAZStrType()
        _element.streams = AAZListType(
            flags={"required": True},
        )

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.platform_telemetry.Element.streams
        streams.Element = AAZStrType()

        prometheus_forwarder = _schema_data_collection_rule_resource_read.properties.data_sources.prometheus_forwarder
        prometheus_forwarder.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.prometheus_forwarder.Element
        _element.label_include_filter = AAZDictType(
            serialized_name="labelIncludeFilter",
        )
        _element.name = AAZStrType()
        _element.streams = AAZListType()

        label_include_filter = _schema_data_collection_rule_resource_read.properties.data_sources.prometheus_forwarder.Element.label_include_filter
        label_include_filter.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.prometheus_forwarder.Element.streams
        streams.Element = AAZStrType()

        syslog = _schema_data_collection_rule_resource_read.properties.data_sources.syslog
        syslog.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.syslog.Element
        _element.facility_names = AAZListType(
            serialized_name="facilityNames",
        )
        _element.log_levels = AAZListType(
            serialized_name="logLevels",
        )
        _element.name = AAZStrType()
        _element.streams = AAZListType()

        facility_names = _schema_data_collection_rule_resource_read.properties.data_sources.syslog.Element.facility_names
        facility_names.Element = AAZStrType()

        log_levels = _schema_data_collection_rule_resource_read.properties.data_sources.syslog.Element.log_levels
        log_levels.Element = AAZStrType()

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.syslog.Element.streams
        streams.Element = AAZStrType()

        windows_event_logs = _schema_data_collection_rule_resource_read.properties.data_sources.windows_event_logs
        windows_event_logs.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.windows_event_logs.Element
        _element.name = AAZStrType()
        _element.streams = AAZListType()
        _element.x_path_queries = AAZListType(
            serialized_name="xPathQueries",
        )

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.windows_event_logs.Element.streams
        streams.Element = AAZStrType()

        x_path_queries = _schema_data_collection_rule_resource_read.properties.data_sources.windows_event_logs.Element.x_path_queries
        x_path_queries.Element = AAZStrType()

        windows_firewall_logs = _schema_data_collection_rule_resource_read.properties.data_sources.windows_firewall_logs
        windows_firewall_logs.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.data_sources.windows_firewall_logs.Element
        _element.name = AAZStrType()
        _element.streams = AAZListType(
            flags={"required": True},
        )

        streams = _schema_data_collection_rule_resource_read.properties.data_sources.windows_firewall_logs.Element.streams
        streams.Element = AAZStrType()

        destinations = _schema_data_collection_rule_resource_read.properties.destinations
        destinations.azure_monitor_metrics = AAZObjectType(
            serialized_name="azureMonitorMetrics",
        )
        destinations.event_hubs = AAZListType(
            serialized_name="eventHubs",
        )
        destinations.event_hubs_direct = AAZListType(
            serialized_name="eventHubsDirect",
        )
        destinations.log_analytics = AAZListType(
            serialized_name="logAnalytics",
        )
        destinations.monitoring_accounts = AAZListType(
            serialized_name="monitoringAccounts",
        )
        destinations.storage_accounts = AAZListType(
            serialized_name="storageAccounts",
        )
        destinations.storage_blobs_direct = AAZListType(
            serialized_name="storageBlobsDirect",
        )
        destinations.storage_tables_direct = AAZListType(
            serialized_name="storageTablesDirect",
        )

        azure_monitor_metrics = _schema_data_collection_rule_resource_read.properties.destinations.azure_monitor_metrics
        azure_monitor_metrics.name = AAZStrType()

        event_hubs = _schema_data_collection_rule_resource_read.properties.destinations.event_hubs
        event_hubs.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.destinations.event_hubs.Element
        _element.event_hub_resource_id = AAZStrType(
            serialized_name="eventHubResourceId",
        )
        _element.name = AAZStrType()

        event_hubs_direct = _schema_data_collection_rule_resource_read.properties.destinations.event_hubs_direct
        event_hubs_direct.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.destinations.event_hubs_direct.Element
        _element.event_hub_resource_id = AAZStrType(
            serialized_name="eventHubResourceId",
        )
        _element.name = AAZStrType()

        log_analytics = _schema_data_collection_rule_resource_read.properties.destinations.log_analytics
        log_analytics.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.destinations.log_analytics.Element
        _element.name = AAZStrType()
        _element.workspace_id = AAZStrType(
            serialized_name="workspaceId",
            flags={"read_only": True},
        )
        _element.workspace_resource_id = AAZStrType(
            serialized_name="workspaceResourceId",
        )

        monitoring_accounts = _schema_data_collection_rule_resource_read.properties.destinations.monitoring_accounts
        monitoring_accounts.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.destinations.monitoring_accounts.Element
        _element.account_id = AAZStrType(
            serialized_name="accountId",
            flags={"read_only": True},
        )
        _element.account_resource_id = AAZStrType(
            serialized_name="accountResourceId",
        )
        _element.name = AAZStrType()

        storage_accounts = _schema_data_collection_rule_resource_read.properties.destinations.storage_accounts
        storage_accounts.Element = AAZObjectType()
        cls._build_schema_storage_blob_destination_read(storage_accounts.Element)

        storage_blobs_direct = _schema_data_collection_rule_resource_read.properties.destinations.storage_blobs_direct
        storage_blobs_direct.Element = AAZObjectType()
        cls._build_schema_storage_blob_destination_read(storage_blobs_direct.Element)

        storage_tables_direct = _schema_data_collection_rule_resource_read.properties.destinations.storage_tables_direct
        storage_tables_direct.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.destinations.storage_tables_direct.Element
        _element.name = AAZStrType()
        _element.storage_account_resource_id = AAZStrType(
            serialized_name="storageAccountResourceId",
        )
        _element.table_name = AAZStrType(
            serialized_name="tableName",
        )

        metadata = _schema_data_collection_rule_resource_read.properties.metadata
        metadata.provisioned_by = AAZStrType(
            serialized_name="provisionedBy",
            flags={"read_only": True},
        )
        metadata.provisioned_by_resource_id = AAZStrType(
            serialized_name="provisionedByResourceId",
            flags={"read_only": True},
        )

        stream_declarations = _schema_data_collection_rule_resource_read.properties.stream_declarations
        stream_declarations.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.stream_declarations.Element
        _element.columns = AAZListType()

        columns = _schema_data_collection_rule_resource_read.properties.stream_declarations.Element.columns
        columns.Element = AAZObjectType()

        _element = _schema_data_collection_rule_resource_read.properties.stream_declarations.Element.columns.Element
        _element.name = AAZStrType()
        _element.type = AAZStrType()

        system_data = _schema_data_collection_rule_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_data_collection_rule_resource_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_data_collection_rule_resource_read.etag
        _schema.id = cls._schema_data_collection_rule_resource_read.id
        _schema.identity = cls._schema_data_collection_rule_resource_read.identity
        _schema.kind = cls._schema_data_collection_rule_resource_read.kind
        _schema.location = cls._schema_data_collection_rule_resource_read.location
        _schema.name = cls._schema_data_collection_rule_resource_read.name
        _schema.properties = cls._schema_data_collection_rule_resource_read.properties
        _schema.system_data = cls._schema_data_collection_rule_resource_read.system_data
        _schema.tags = cls._schema_data_collection_rule_resource_read.tags
        _schema.type = cls._schema_data_collection_rule_resource_read.type

    _schema_storage_blob_destination_read = None

    @classmethod
    def _build_schema_storage_blob_destination_read(cls, _schema):
        if cls._schema_storage_blob_destination_read is not None:
            _schema.container_name = cls._schema_storage_blob_destination_read.container_name
            _schema.name = cls._schema_storage_blob_destination_read.name
            _schema.storage_account_resource_id = cls._schema_storage_blob_destination_read.storage_account_resource_id
            return

        cls._schema_storage_blob_destination_read = _schema_storage_blob_destination_read = AAZObjectType()

        storage_blob_destination_read = _schema_storage_blob_destination_read
        storage_blob_destination_read.container_name = AAZStrType(
            serialized_name="containerName",
        )
        storage_blob_destination_read.name = AAZStrType()
        storage_blob_destination_read.storage_account_resource_id = AAZStrType(
            serialized_name="storageAccountResourceId",
        )

        _schema.container_name = cls._schema_storage_blob_destination_read.container_name
        _schema.name = cls._schema_storage_blob_destination_read.name
        _schema.storage_account_resource_id = cls._schema_storage_blob_destination_read.storage_account_resource_id


__all__ = ["Update"]
