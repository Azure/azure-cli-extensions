# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /DataCollectionRules/put/Create or update data collection rule
@try_manual
def step_data_collection_rule_create(test, rg, checks=None):
    if checks is None:
        checks = []
    rule_json = test.cmd('az monitor data-collection rule create '
             '-g {rg} -n {myDataCollectionRule} --location "{location}" '
             '--data-flow destination="{workspace_name}" stream="Microsoft-Perf" stream="Microsoft-Syslog" '
             'stream="Microsoft-WindowsEvent" '
             '--log-analytics name="{workspace_name}" resource-id="{workspace_id}" '
             '--performance-counter name="cloudTeamCoreCounters" counter-specifier="\\\\Processor(_Total'
             ')\\\\% Processor Time" counter-specifier="\\\\Memory\\\\Committed Bytes" counter-specifier="\\\\Logical'
             'Disk(_Total)\\\\Free Megabytes" counter-specifier="\\\\PhysicalDisk(_Total)\\\\Avg. Disk Queue Length" '
             'sampling-frequency=15 transfer-period="PT1M" stream="Microsoft-Perf" '
             '--performance-counter name="appTeamExtraCounters" counter-specifier="\\\\Process(_Total)\\\\Thread Count"'
             ' sampling-frequency=30 transfer-period="PT5M" stream="Microsoft-Perf" '
             '--syslog name="cronSyslog" facility-name="cron" log-level="Debug" log-level="Critical" '
             'log-level="Emergency" stream="Microsoft-Syslog" '
             '--syslog name="syslogBase" facility-name="syslog" log-level="Alert" log-level="Critical" '
             'log-level="Emergency" stream="Microsoft-Syslog" '
             '--windows-event-log name="cloudSecurityTeamEvents" transfer-period="PT1M" '
             'stream="Microsoft-WindowsEvent" x-path-query="Security!" '
             '--windows-event-log name="appTeam1AppEvents" transfer-period="PT5M" '
             'stream="Microsoft-WindowsEvent" x-path-query="System![System[(Level = 1 or Level = 2 or Level = 3)]]" '
             'x-path-query="Application!*[System[(Level = 1 or Level = 2 or Level = 3)]]" ',
             checks=checks).get_output_in_json()
    test.kwargs['rule_id'] = rule_json['id']


# EXAMPLE: /DataCollectionRules/get/Get data collection rule
@try_manual
def step_data_collection_rule_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule show '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRules/get/List data collection rules by resource group
@try_manual
def step_data_collection_rule_list_by_resource_group(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRules/get/List data collection rules by subscription
@try_manual
def step_data_collection_rule_list_by_subscription(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule list ',
             checks=checks)


# EXAMPLE: /DataCollectionRules/patch/Update data collection rule
@try_manual
def step_data_collection_rule_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule update '
             '--tags tag1="A" tag2="B" tag3="C" '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/put/Create or update association
@try_manual
def step_data_collection_rule_association_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association create '
             '--name "{myAssociation}" '
             '--rule-id "{rule_id}" '
             '--resource "{vm_id}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/Get association
@try_manual
def step_data_collection_rule_association_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association show '
             '--name "{myAssociation}" '
             '--resource "{vm_id}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/List associations for specified data collection rule
@try_manual
def step_data_collection_rule_association_list_by_rule(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association list '
             '--rule-name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/List associations for specified resource
@try_manual
def step_data_collection_rule_association_list_by_resource(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association list '
             '--resource "{vm_id}" ',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/delete/Delete association
@try_manual
def step_data_collection_rule_association_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association delete -y '
             '--name "{myAssociation}" '
             '--resource "{vm_id}" ',
             checks=checks)


# EXAMPLE: /DataCollectionRules/delete/Delete data collection rule
@try_manual
def step_data_collection_rule_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule delete -y '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)

