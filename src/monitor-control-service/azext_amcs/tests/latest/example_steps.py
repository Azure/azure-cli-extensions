# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /DataCollectionRules/put/Create or update data collection rule


# EXAMPLE: /DataCollectionRules/get/Get data collection rule
@try_manual
def step_data_collection_rule_show(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule show '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRules/get/List data collection rules by resource group
@try_manual
def step_data_collection_rule_list_by_resource_group(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRules/get/List data collection rules by subscription
@try_manual
def step_data_collection_rule_list_by_subscription(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule list ',
             checks=checks)


# EXAMPLE: /DataCollectionRules/patch/Update data collection rule
@try_manual
def step_data_collection_rule_update(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule update '
             '--tags tag1="A" tag2="B" tag3="C" '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/put/Create or update association
@try_manual
def step_data_collection_rule_association_create(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association create '
             '--name "{myAssociation}" '
             '--rule-id "{rule_id}" '
             '--resource "{vm_id}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/Get association
@try_manual
def step_data_collection_rule_association_show(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association show '
             '--name "{myAssociation}" '
             '--resource "{vm_id}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/List associations for specified data collection rule
@try_manual
def step_data_collection_rule_association_list_by_rule(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association list '
             '--rule-name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/get/List associations for specified resource
@try_manual
def step_data_collection_rule_association_list_by_resource(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association list '
             '--resource "{vm_id}" ',
             checks=checks)


# EXAMPLE: /DataCollectionRuleAssociations/delete/Delete association
@try_manual
def step_data_collection_rule_association_delete(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule association delete -y '
             '--name "{myAssociation}" '
             '--resource "{vm_id}" ',
             checks=checks)


# EXAMPLE: /DataCollectionRules/delete/Delete data collection rule
@try_manual
def step_data_collection_rule_delete(test, _, checks=None):
    if checks is None:
        checks = []
    test.cmd('az monitor data-collection rule delete -y '
             '--name "{myDataCollectionRule}" '
             '--resource-group "{rg}"',
             checks=checks)
