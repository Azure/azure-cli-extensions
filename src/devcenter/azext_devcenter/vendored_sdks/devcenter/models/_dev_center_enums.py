# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ActionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
    """

    INTERNAL = "Internal"

class CreatedByType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of identity that created the resource.
    """

    USER = "User"
    APPLICATION = "Application"
    MANAGED_IDENTITY = "ManagedIdentity"
    KEY = "Key"

class DomainJoinType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Active Directory join type
    """

    HYBRID_AZURE_AD_JOIN = "HybridAzureADJoin"
    AZURE_AD_JOIN = "AzureADJoin"

class EnableStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enable or disable status. Indicates whether the property applied to is either enabled or
    disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class HealthCheckStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Health check status values
    """

    PENDING = "Pending"
    RUNNING = "Running"
    PASSED = "Passed"
    FAILED = "Failed"
    WARNING = "Warning"
    UNKNOWN = "Unknown"

class ImageValidationStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Image validation status
    """

    UNKNOWN = "Unknown"
    PENDING = "Pending"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    TIMED_OUT = "TimedOut"

class LicenseType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """License Types
    """

    WINDOWS_CLIENT = "Windows_Client"

class LocalAdminStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):

    DISABLED = "Disabled"
    ENABLED = "Enabled"

class ManagedServiceIdentityType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of managed service identity (where both SystemAssigned and UserAssigned types are
    allowed).
    """

    NONE = "None"
    SYSTEM_ASSIGNED = "SystemAssigned"
    USER_ASSIGNED = "UserAssigned"
    SYSTEM_ASSIGNED_USER_ASSIGNED = "SystemAssigned, UserAssigned"

class Origin(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit
    logs UX. Default value is "user,system"
    """

    USER = "user"
    SYSTEM = "system"
    USER_SYSTEM = "user,system"

class ScheduledFrequency(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The frequency of task execution.
    """

    DAILY = "Daily"

class ScheduledType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The supported types for a scheduled task.
    """

    STOP_DEV_BOX = "StopDevBox"

class SkuTier(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """This field is required to be implemented by the Resource Provider if the service has more than
    one tier, but is not required on a PUT.
    """

    FREE = "Free"
    BASIC = "Basic"
    STANDARD = "Standard"
    PREMIUM = "Premium"

class UsageUnit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The unit details.
    """

    COUNT = "Count"
