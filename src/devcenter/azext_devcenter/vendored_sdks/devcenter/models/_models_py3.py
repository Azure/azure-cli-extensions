# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._dev_center_enums import *


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.system_data = None


class AttachedNetworkConnection(Resource):
    """Represents an attached NetworkConnection.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :param network_connection_id: The resource ID of the NetworkConnection you want to attach.
    :type network_connection_id: str
    :ivar network_connection_location: The geo-location where the NetworkConnection resource
     specified in 'networkConnectionResourceId' property lives.
    :vartype network_connection_location: str
    :ivar health_check_status: Health check status values. Possible values include: "Pending",
     "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype health_check_status: str or ~dev_center.models.HealthCheckStatus
    :ivar domain_join_type: AAD Join type of the network. This is populated based on the referenced
     Network Connection. Possible values include: "HybridAzureADJoin", "AzureADJoin".
    :vartype domain_join_type: str or ~dev_center.models.DomainJoinType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'network_connection_location': {'readonly': True},
        'health_check_status': {'readonly': True},
        'domain_join_type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'network_connection_id': {'key': 'properties.networkConnectionId', 'type': 'str'},
        'network_connection_location': {'key': 'properties.networkConnectionLocation', 'type': 'str'},
        'health_check_status': {'key': 'properties.healthCheckStatus', 'type': 'str'},
        'domain_join_type': {'key': 'properties.domainJoinType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        network_connection_id: Optional[str] = None,
        **kwargs
    ):
        super(AttachedNetworkConnection, self).__init__(**kwargs)
        self.provisioning_state = None
        self.network_connection_id = network_connection_id
        self.network_connection_location = None
        self.health_check_status = None
        self.domain_join_type = None


class AttachedNetworkListResult(msrest.serialization.Model):
    """Results of the Attached Networks list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.AttachedNetworkConnection]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AttachedNetworkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AttachedNetworkListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Capability(msrest.serialization.Model):
    """A name/value pair to describe a capability.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the capability.
    :vartype name: str
    :ivar value: Value of the capability.
    :vartype value: str
    """

    _validation = {
        'name': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Capability, self).__init__(**kwargs)
        self.name = None
        self.value = None


class Catalog(Resource):
    """Represents a catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~dev_center.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~dev_center.models.GitCatalog
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar last_sync_time: When the catalog was last synced.
    :vartype last_sync_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'last_sync_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'git_hub': {'key': 'properties.gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'properties.adoGit', 'type': 'GitCatalog'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'last_sync_time': {'key': 'properties.lastSyncTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(Catalog, self).__init__(**kwargs)
        self.git_hub = git_hub
        self.ado_git = ado_git
        self.provisioning_state = None
        self.last_sync_time = None


class CatalogListResult(msrest.serialization.Model):
    """Results of the catalog list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Catalog]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Catalog]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class CatalogUpdateProperties(msrest.serialization.Model):
    """Properties of a catalog. These properties can be updated after the resource has been created.

    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~dev_center.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~dev_center.models.GitCatalog
    """

    _attribute_map = {
        'git_hub': {'key': 'gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'adoGit', 'type': 'GitCatalog'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogUpdateProperties, self).__init__(**kwargs)
        self.git_hub = git_hub
        self.ado_git = ado_git


class CatalogProperties(CatalogUpdateProperties):
    """Properties of a catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~dev_center.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~dev_center.models.GitCatalog
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar last_sync_time: When the catalog was last synced.
    :vartype last_sync_time: ~datetime.datetime
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'last_sync_time': {'readonly': True},
    }

    _attribute_map = {
        'git_hub': {'key': 'gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'adoGit', 'type': 'GitCatalog'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'last_sync_time': {'key': 'lastSyncTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogProperties, self).__init__(git_hub=git_hub, ado_git=ado_git, **kwargs)
        self.provisioning_state = None
        self.last_sync_time = None


class CatalogUpdate(msrest.serialization.Model):
    """The catalog's properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~dev_center.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~dev_center.models.GitCatalog
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'git_hub': {'key': 'properties.gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'properties.adoGit', 'type': 'GitCatalog'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.git_hub = git_hub
        self.ado_git = ado_git


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the DevCenter service.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. An identifier for the error. Codes are invariant and are intended to be
     consumed programmatically.
    :type code: str
    :param message: Required. A message describing the error, intended to be suitable for display
     in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~dev_center.models.CloudErrorBody]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DevBoxDefinition(TrackedResource):
    """Represents a definition for a Developer Machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param image_reference: Image reference information.
    :type image_reference: ~dev_center.models.ImageReference
    :param sku: The SKU for Dev Boxes created using this definition.
    :type sku: ~dev_center.models.Sku
    :param os_storage_type: The storage type used for the Operating System disk of Dev Boxes
     created using this definition.
    :type os_storage_type: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar image_validation_status: Validation status of the configured image. Possible values
     include: "Unknown", "Pending", "Succeeded", "Failed", "TimedOut".
    :vartype image_validation_status: str or ~dev_center.models.ImageValidationStatus
    :ivar image_validation_error_details: Details for image validator error. Populated when the
     image validation is not successful.
    :vartype image_validation_error_details: ~dev_center.models.ImageValidationErrorDetails
    :ivar active_image_reference: Image reference information for the currently active image (only
     populated during updates).
    :vartype active_image_reference: ~dev_center.models.ImageReference
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'image_validation_status': {'readonly': True},
        'image_validation_error_details': {'readonly': True},
        'active_image_reference': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'image_reference': {'key': 'properties.imageReference', 'type': 'ImageReference'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'os_storage_type': {'key': 'properties.osStorageType', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'image_validation_status': {'key': 'properties.imageValidationStatus', 'type': 'str'},
        'image_validation_error_details': {'key': 'properties.imageValidationErrorDetails', 'type': 'ImageValidationErrorDetails'},
        'active_image_reference': {'key': 'properties.activeImageReference', 'type': 'ImageReference'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        image_reference: Optional["ImageReference"] = None,
        sku: Optional["Sku"] = None,
        os_storage_type: Optional[str] = None,
        **kwargs
    ):
        super(DevBoxDefinition, self).__init__(tags=tags, location=location, **kwargs)
        self.image_reference = image_reference
        self.sku = sku
        self.os_storage_type = os_storage_type
        self.provisioning_state = None
        self.image_validation_status = None
        self.image_validation_error_details = None
        self.active_image_reference = None


class DevBoxDefinitionListResult(msrest.serialization.Model):
    """Results of the Dev Box definition list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.DevBoxDefinition]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DevBoxDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DevBoxDefinitionListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class DevBoxDefinitionUpdateProperties(msrest.serialization.Model):
    """Properties of a Dev Box definition. These properties can be updated after the resource has been created.

    :param image_reference: Image reference information.
    :type image_reference: ~dev_center.models.ImageReference
    :param sku: The SKU for Dev Boxes created using this definition.
    :type sku: ~dev_center.models.Sku
    :param os_storage_type: The storage type used for the Operating System disk of Dev Boxes
     created using this definition.
    :type os_storage_type: str
    """

    _attribute_map = {
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'os_storage_type': {'key': 'osStorageType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        image_reference: Optional["ImageReference"] = None,
        sku: Optional["Sku"] = None,
        os_storage_type: Optional[str] = None,
        **kwargs
    ):
        super(DevBoxDefinitionUpdateProperties, self).__init__(**kwargs)
        self.image_reference = image_reference
        self.sku = sku
        self.os_storage_type = os_storage_type


class DevBoxDefinitionProperties(DevBoxDefinitionUpdateProperties):
    """Properties of a Dev Box definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param image_reference: Image reference information.
    :type image_reference: ~dev_center.models.ImageReference
    :param sku: The SKU for Dev Boxes created using this definition.
    :type sku: ~dev_center.models.Sku
    :param os_storage_type: The storage type used for the Operating System disk of Dev Boxes
     created using this definition.
    :type os_storage_type: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar image_validation_status: Validation status of the configured image. Possible values
     include: "Unknown", "Pending", "Succeeded", "Failed", "TimedOut".
    :vartype image_validation_status: str or ~dev_center.models.ImageValidationStatus
    :ivar image_validation_error_details: Details for image validator error. Populated when the
     image validation is not successful.
    :vartype image_validation_error_details: ~dev_center.models.ImageValidationErrorDetails
    :ivar active_image_reference: Image reference information for the currently active image (only
     populated during updates).
    :vartype active_image_reference: ~dev_center.models.ImageReference
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'image_validation_status': {'readonly': True},
        'image_validation_error_details': {'readonly': True},
        'active_image_reference': {'readonly': True},
    }

    _attribute_map = {
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'os_storage_type': {'key': 'osStorageType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'image_validation_status': {'key': 'imageValidationStatus', 'type': 'str'},
        'image_validation_error_details': {'key': 'imageValidationErrorDetails', 'type': 'ImageValidationErrorDetails'},
        'active_image_reference': {'key': 'activeImageReference', 'type': 'ImageReference'},
    }

    def __init__(
        self,
        *,
        image_reference: Optional["ImageReference"] = None,
        sku: Optional["Sku"] = None,
        os_storage_type: Optional[str] = None,
        **kwargs
    ):
        super(DevBoxDefinitionProperties, self).__init__(image_reference=image_reference, sku=sku, os_storage_type=os_storage_type, **kwargs)
        self.provisioning_state = None
        self.image_validation_status = None
        self.image_validation_error_details = None
        self.active_image_reference = None


class TrackedResourceUpdate(msrest.serialization.Model):
    """Base tracked resource type for PATCH updates.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(TrackedResourceUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DevBoxDefinitionUpdate(TrackedResourceUpdate):
    """Partial update of a Dev Box definition resource.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param image_reference: Image reference information.
    :type image_reference: ~dev_center.models.ImageReference
    :param sku: The SKU for Dev Boxes created using this definition.
    :type sku: ~dev_center.models.Sku
    :param os_storage_type: The storage type used for the Operating System disk of Dev Boxes
     created using this definition.
    :type os_storage_type: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'image_reference': {'key': 'properties.imageReference', 'type': 'ImageReference'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'os_storage_type': {'key': 'properties.osStorageType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        image_reference: Optional["ImageReference"] = None,
        sku: Optional["Sku"] = None,
        os_storage_type: Optional[str] = None,
        **kwargs
    ):
        super(DevBoxDefinitionUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.image_reference = image_reference
        self.sku = sku
        self.os_storage_type = os_storage_type


class DevCenter(TrackedResource):
    """Represents a devcenter resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param identity: Managed identity properties.
    :type identity: ~dev_center.models.ManagedServiceIdentity
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        **kwargs
    ):
        super(DevCenter, self).__init__(tags=tags, location=location, **kwargs)
        self.identity = identity
        self.provisioning_state = None


class DevCenterListResult(msrest.serialization.Model):
    """Result of the list devcenters operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.DevCenter]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DevCenter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DevCenterListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Sku(msrest.serialization.Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU. Ex - P3. It is typically a letter+number code.
    :type name: str
    :param tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Possible values include: "Free", "Basic",
     "Standard", "Premium".
    :type tier: str or ~dev_center.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for the same SKU, then
     that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class DevCenterSku(Sku):
    """The resource model definition representing SKU for DevCenter resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU. Ex - P3. It is typically a letter+number code.
    :type name: str
    :param tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Possible values include: "Free", "Basic",
     "Standard", "Premium".
    :type tier: str or ~dev_center.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for the same SKU, then
     that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :type capacity: int
    :ivar resource_type: The name of the resource type.
    :vartype resource_type: str
    :ivar locations: SKU supported locations.
    :vartype locations: list[str]
    :ivar capabilities: Collection of name/value pairs to describe the SKU capabilities.
    :vartype capabilities: list[~dev_center.models.Capability]
    """

    _validation = {
        'name': {'required': True},
        'resource_type': {'readonly': True},
        'locations': {'readonly': True},
        'capabilities': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
        'resource_type': {'key': 'resourceType', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'capabilities': {'key': 'capabilities', 'type': '[Capability]'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(DevCenterSku, self).__init__(name=name, tier=tier, size=size, family=family, capacity=capacity, **kwargs)
        self.resource_type = None
        self.locations = None
        self.capabilities = None


class DevCenterUpdate(TrackedResourceUpdate):
    """The devcenter resource for partial updates. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param identity: Managed identity properties.
    :type identity: ~dev_center.models.ManagedServiceIdentity
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        **kwargs
    ):
        super(DevCenterUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.identity = identity


class EnvironmentRole(msrest.serialization.Model):
    """A role that can be assigned to a user.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar role_name: The common name of the Role Assignment. This is a descriptive name such as
     'AcrPush'.
    :vartype role_name: str
    :ivar description: This is a description of the Role Assignment.
    :vartype description: str
    """

    _validation = {
        'role_name': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'role_name': {'key': 'roleName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EnvironmentRole, self).__init__(**kwargs)
        self.role_name = None
        self.description = None


class EnvironmentType(Resource):
    """Represents an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(EnvironmentType, self).__init__(**kwargs)
        self.tags = tags
        self.provisioning_state = None


class EnvironmentTypeListResult(msrest.serialization.Model):
    """Result of the environment type list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.EnvironmentType]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EnvironmentType]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EnvironmentTypeListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class EnvironmentTypeUpdate(msrest.serialization.Model):
    """The environment type for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(EnvironmentTypeUpdate, self).__init__(**kwargs)
        self.tags = tags


class Gallery(Resource):
    """Represents a gallery.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :param gallery_resource_id: The resource ID of the backing Azure Compute Gallery.
    :type gallery_resource_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'gallery_resource_id': {'key': 'properties.galleryResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        gallery_resource_id: Optional[str] = None,
        **kwargs
    ):
        super(Gallery, self).__init__(**kwargs)
        self.provisioning_state = None
        self.gallery_resource_id = gallery_resource_id


class GalleryListResult(msrest.serialization.Model):
    """Results of the gallery list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Gallery]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Gallery]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(GalleryListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class GitCatalog(msrest.serialization.Model):
    """Properties for a Git repository catalog.

    :param uri: Git URI.
    :type uri: str
    :param branch: Git branch.
    :type branch: str
    :param secret_identifier: A reference to the Key Vault secret containing a security token to
     authenticate to a Git repository.
    :type secret_identifier: str
    :param path: The folder where the catalog items can be found inside the repository.
    :type path: str
    """

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
        'branch': {'key': 'branch', 'type': 'str'},
        'secret_identifier': {'key': 'secretIdentifier', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        branch: Optional[str] = None,
        secret_identifier: Optional[str] = None,
        path: Optional[str] = None,
        **kwargs
    ):
        super(GitCatalog, self).__init__(**kwargs)
        self.uri = uri
        self.branch = branch
        self.secret_identifier = secret_identifier
        self.path = path


class HealthCheck(msrest.serialization.Model):
    """An individual health check item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the health check item. Possible values include: "Pending",
     "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype status: str or ~dev_center.models.HealthCheckStatus
    :ivar display_name: The display name of this health check item.
    :vartype display_name: str
    :ivar start_date_time: Start time of health check item.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: End time of the health check item.
    :vartype end_date_time: ~datetime.datetime
    :ivar error_type: The type of error that occurred during this health check.
    :vartype error_type: str
    :ivar recommended_action: The recommended action to fix the corresponding error.
    :vartype recommended_action: str
    :ivar additional_details: Additional details about the health check or the recommended action.
    :vartype additional_details: str
    """

    _validation = {
        'status': {'readonly': True},
        'display_name': {'readonly': True},
        'start_date_time': {'readonly': True},
        'end_date_time': {'readonly': True},
        'error_type': {'readonly': True},
        'recommended_action': {'readonly': True},
        'additional_details': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'error_type': {'key': 'errorType', 'type': 'str'},
        'recommended_action': {'key': 'recommendedAction', 'type': 'str'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthCheck, self).__init__(**kwargs)
        self.status = None
        self.display_name = None
        self.start_date_time = None
        self.end_date_time = None
        self.error_type = None
        self.recommended_action = None
        self.additional_details = None


class HealthCheckStatusDetails(Resource):
    """Health Check details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :ivar start_date_time: Start time of last execution of the health checks.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: End time of last execution of the health checks.
    :vartype end_date_time: ~datetime.datetime
    :ivar health_checks: Details for each health check item.
    :vartype health_checks: list[~dev_center.models.HealthCheck]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'start_date_time': {'readonly': True},
        'end_date_time': {'readonly': True},
        'health_checks': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'start_date_time': {'key': 'properties.startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'properties.endDateTime', 'type': 'iso-8601'},
        'health_checks': {'key': 'properties.healthChecks', 'type': '[HealthCheck]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthCheckStatusDetails, self).__init__(**kwargs)
        self.start_date_time = None
        self.end_date_time = None
        self.health_checks = None


class HealthCheckStatusDetailsListResult(msrest.serialization.Model):
    """Result of the network health check list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.HealthCheckStatusDetails]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HealthCheckStatusDetails]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthCheckStatusDetailsListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Image(Resource):
    """Represents an image.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :ivar description: The description of the image.
    :vartype description: str
    :ivar publisher: The publisher of the image.
    :vartype publisher: str
    :ivar offer: The name of the image offer.
    :vartype offer: str
    :ivar sku: The SKU name for the image.
    :vartype sku: str
    :ivar recommended_machine_configuration: The recommended machine configuration to use with the
     image.
    :vartype recommended_machine_configuration: ~dev_center.models.RecommendedMachineConfiguration
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'description': {'readonly': True},
        'publisher': {'readonly': True},
        'offer': {'readonly': True},
        'sku': {'readonly': True},
        'recommended_machine_configuration': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'publisher': {'key': 'properties.publisher', 'type': 'str'},
        'offer': {'key': 'properties.offer', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'str'},
        'recommended_machine_configuration': {'key': 'properties.recommendedMachineConfiguration', 'type': 'RecommendedMachineConfiguration'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Image, self).__init__(**kwargs)
        self.description = None
        self.publisher = None
        self.offer = None
        self.sku = None
        self.recommended_machine_configuration = None
        self.provisioning_state = None


class ImageListResult(msrest.serialization.Model):
    """Results of the image list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Image]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Image]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ImageListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ImageReference(msrest.serialization.Model):
    """Image reference information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param id: Image ID, or Image version ID. When Image ID is provided, its latest version will be
     used.
    :type id: str
    :ivar exact_version: The actual version of the image after use. When id references a gallery
     image latest version, this will indicate the actual version in use.
    :vartype exact_version: str
    :param publisher: The image publisher.
    :type publisher: str
    :param offer: The image offer.
    :type offer: str
    :param sku: The image sku.
    :type sku: str
    """

    _validation = {
        'exact_version': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'exact_version': {'key': 'exactVersion', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'offer': {'key': 'offer', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        publisher: Optional[str] = None,
        offer: Optional[str] = None,
        sku: Optional[str] = None,
        **kwargs
    ):
        super(ImageReference, self).__init__(**kwargs)
        self.id = id
        self.exact_version = None
        self.publisher = publisher
        self.offer = offer
        self.sku = sku


class ImageValidationErrorDetails(msrest.serialization.Model):
    """Image validation error details.

    :param code: An identifier for the error.
    :type code: str
    :param message: A message describing the error.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ImageValidationErrorDetails, self).__init__(**kwargs)
        self.code = code
        self.message = message


class ImageVersion(Resource):
    """Represents an image version.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :ivar name_properties_name: The semantic version string.
    :vartype name_properties_name: str
    :ivar published_date: The datetime that the backing image version was published.
    :vartype published_date: ~datetime.datetime
    :ivar exclude_from_latest: If the version should be excluded from being treated as the latest
     version.
    :vartype exclude_from_latest: bool
    :ivar os_disk_image_size_in_gb: The size of the OS disk image, in GB.
    :vartype os_disk_image_size_in_gb: int
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'name_properties_name': {'readonly': True},
        'published_date': {'readonly': True},
        'exclude_from_latest': {'readonly': True},
        'os_disk_image_size_in_gb': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'name_properties_name': {'key': 'properties.name', 'type': 'str'},
        'published_date': {'key': 'properties.publishedDate', 'type': 'iso-8601'},
        'exclude_from_latest': {'key': 'properties.excludeFromLatest', 'type': 'bool'},
        'os_disk_image_size_in_gb': {'key': 'properties.osDiskImageSizeInGb', 'type': 'int'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ImageVersion, self).__init__(**kwargs)
        self.name_properties_name = None
        self.published_date = None
        self.exclude_from_latest = None
        self.os_disk_image_size_in_gb = None
        self.provisioning_state = None


class ImageVersionListResult(msrest.serialization.Model):
    """Results of the image version list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.ImageVersion]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ImageVersion]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ImageVersionListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ListUsagesResult(msrest.serialization.Model):
    """List of Core Usages.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The array page of Usages.
    :vartype value: list[~dev_center.models.Usage]
    :ivar next_link: The link to get the next page of Usage result.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ListUsagesResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ManagedServiceIdentity(msrest.serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :param type: Required. Type of managed service identity (where both SystemAssigned and
     UserAssigned types are allowed). Possible values include: "None", "SystemAssigned",
     "UserAssigned", "SystemAssigned, UserAssigned".
    :type type: str or ~dev_center.models.ManagedServiceIdentityType
    :param user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :type user_assigned_identities: dict[str, ~dev_center.models.UserAssignedIdentity]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentity}'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "UserAssignedIdentity"]] = None,
        **kwargs
    ):
        super(ManagedServiceIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class NetworkConnection(TrackedResource):
    """Network related settings.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar health_check_status: Overall health status of the network connection. Health checks are
     run on creation, update, and periodically to validate the network connection. Possible values
     include: "Pending", "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype health_check_status: str or ~dev_center.models.HealthCheckStatus
    :param networking_resource_group_name: The name for resource group where NICs will be placed.
    :type networking_resource_group_name: str
    :param domain_join_type: AAD Join type. Possible values include: "HybridAzureADJoin",
     "AzureADJoin".
    :type domain_join_type: str or ~dev_center.models.DomainJoinType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'health_check_status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'organization_unit': {'key': 'properties.organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'properties.domainUsername', 'type': 'str'},
        'domain_password': {'key': 'properties.domainPassword', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'health_check_status': {'key': 'properties.healthCheckStatus', 'type': 'str'},
        'networking_resource_group_name': {'key': 'properties.networkingResourceGroupName', 'type': 'str'},
        'domain_join_type': {'key': 'properties.domainJoinType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        subnet_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        networking_resource_group_name: Optional[str] = None,
        domain_join_type: Optional[Union[str, "DomainJoinType"]] = None,
        **kwargs
    ):
        super(NetworkConnection, self).__init__(tags=tags, location=location, **kwargs)
        self.subnet_id = subnet_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password
        self.provisioning_state = None
        self.health_check_status = None
        self.networking_resource_group_name = networking_resource_group_name
        self.domain_join_type = domain_join_type


class NetworkConnectionListResult(msrest.serialization.Model):
    """Result of the network connection list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.NetworkConnection]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkConnection]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkConnectionListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class NetworkConnectionUpdate(TrackedResourceUpdate):
    """The network connection properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'organization_unit': {'key': 'properties.organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'properties.domainUsername', 'type': 'str'},
        'domain_password': {'key': 'properties.domainPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        subnet_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkConnectionUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.subnet_id = subnet_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password


class NetworkConnectionUpdateProperties(msrest.serialization.Model):
    """Properties of network connection. These properties can be updated after the resource has been created.

    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    """

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'organization_unit': {'key': 'organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'domainUsername', 'type': 'str'},
        'domain_password': {'key': 'domainPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkConnectionUpdateProperties, self).__init__(**kwargs)
        self.subnet_id = subnet_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password


class NetworkProperties(NetworkConnectionUpdateProperties):
    """Network properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar health_check_status: Overall health status of the network connection. Health checks are
     run on creation, update, and periodically to validate the network connection. Possible values
     include: "Pending", "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype health_check_status: str or ~dev_center.models.HealthCheckStatus
    :param networking_resource_group_name: The name for resource group where NICs will be placed.
    :type networking_resource_group_name: str
    :param domain_join_type: Required. AAD Join type. Possible values include: "HybridAzureADJoin",
     "AzureADJoin".
    :type domain_join_type: str or ~dev_center.models.DomainJoinType
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'health_check_status': {'readonly': True},
        'domain_join_type': {'required': True},
    }

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'organization_unit': {'key': 'organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'domainUsername', 'type': 'str'},
        'domain_password': {'key': 'domainPassword', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'health_check_status': {'key': 'healthCheckStatus', 'type': 'str'},
        'networking_resource_group_name': {'key': 'networkingResourceGroupName', 'type': 'str'},
        'domain_join_type': {'key': 'domainJoinType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        domain_join_type: Union[str, "DomainJoinType"],
        subnet_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        networking_resource_group_name: Optional[str] = None,
        **kwargs
    ):
        super(NetworkProperties, self).__init__(subnet_id=subnet_id, domain_name=domain_name, organization_unit=organization_unit, domain_username=domain_username, domain_password=domain_password, **kwargs)
        self.provisioning_state = None
        self.health_check_status = None
        self.networking_resource_group_name = networking_resource_group_name
        self.domain_join_type = domain_join_type


class Operation(msrest.serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for data-
     plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :param display: Localized display information for this particular operation.
    :type display: ~dev_center.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Possible values include: "user",
     "system", "user,system".
    :vartype origin: str or ~dev_center.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. Possible values include: "Internal".
    :vartype action_type: str or ~dev_center.models.ActionType
    """

    _validation = {
        'name': {'readonly': True},
        'is_data_action': {'readonly': True},
        'origin': {'readonly': True},
        'action_type': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display: Optional["OperationDisplay"] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = None
        self.display = display
        self.origin = None
        self.action_type = None


class OperationDisplay(msrest.serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationListResult(msrest.serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~dev_center.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationStatus(msrest.serialization.Model):
    """The current status of an async operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified ID for the operation status.
    :vartype id: str
    :ivar name: The operation id name.
    :vartype name: str
    :ivar status: Provisioning state of the resource.
    :vartype status: str
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: float
    :ivar properties: Custom operation properties, populated only for a successful operation.
    :vartype properties: object
    :param error: Operation Error message.
    :type error: ~dev_center.models.OperationStatusError
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'percent_complete': {'readonly': True, 'maximum': 100, 'minimum': 0},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'percent_complete': {'key': 'percentComplete', 'type': 'float'},
        'properties': {'key': 'properties', 'type': 'object'},
        'error': {'key': 'error', 'type': 'OperationStatusError'},
    }

    def __init__(
        self,
        *,
        error: Optional["OperationStatusError"] = None,
        **kwargs
    ):
        super(OperationStatus, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = None
        self.start_time = None
        self.end_time = None
        self.percent_complete = None
        self.properties = None
        self.error = error


class OperationStatusError(msrest.serialization.Model):
    """Operation Error message.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationStatusError, self).__init__(**kwargs)
        self.code = None
        self.message = None


class Pool(TrackedResource):
    """A pool of Virtual Machines.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param dev_box_definition_name: Name of a Dev Box definition in parent Project of this Pool.
    :type dev_box_definition_name: str
    :param network_connection_name: Name of a Network Connection in parent Project of this Pool.
    :type network_connection_name: str
    :param license_type: Specifies the license type indicating the caller has already acquired
     licenses for the Dev Boxes that will be created. Possible values include: "Windows_Client".
    :type license_type: str or ~dev_center.models.LicenseType
    :param local_administrator: Indicates whether owners of Dev Boxes in this pool are added as
     local administrators on the Dev Box. Possible values include: "Disabled", "Enabled".
    :type local_administrator: str or ~dev_center.models.LocalAdminStatus
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'dev_box_definition_name': {'key': 'properties.devBoxDefinitionName', 'type': 'str'},
        'network_connection_name': {'key': 'properties.networkConnectionName', 'type': 'str'},
        'license_type': {'key': 'properties.licenseType', 'type': 'str'},
        'local_administrator': {'key': 'properties.localAdministrator', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        dev_box_definition_name: Optional[str] = None,
        network_connection_name: Optional[str] = None,
        license_type: Optional[Union[str, "LicenseType"]] = None,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(Pool, self).__init__(tags=tags, location=location, **kwargs)
        self.dev_box_definition_name = dev_box_definition_name
        self.network_connection_name = network_connection_name
        self.license_type = license_type
        self.local_administrator = local_administrator
        self.provisioning_state = None


class PoolListResult(msrest.serialization.Model):
    """Results of the machine pool list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Pool]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Pool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PoolListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PoolUpdateProperties(msrest.serialization.Model):
    """Properties of a Pool. These properties can be updated after the resource has been created.

    :param dev_box_definition_name: Name of a Dev Box definition in parent Project of this Pool.
    :type dev_box_definition_name: str
    :param network_connection_name: Name of a Network Connection in parent Project of this Pool.
    :type network_connection_name: str
    :param license_type: Specifies the license type indicating the caller has already acquired
     licenses for the Dev Boxes that will be created. Possible values include: "Windows_Client".
    :type license_type: str or ~dev_center.models.LicenseType
    :param local_administrator: Indicates whether owners of Dev Boxes in this pool are added as
     local administrators on the Dev Box. Possible values include: "Disabled", "Enabled".
    :type local_administrator: str or ~dev_center.models.LocalAdminStatus
    """

    _attribute_map = {
        'dev_box_definition_name': {'key': 'devBoxDefinitionName', 'type': 'str'},
        'network_connection_name': {'key': 'networkConnectionName', 'type': 'str'},
        'license_type': {'key': 'licenseType', 'type': 'str'},
        'local_administrator': {'key': 'localAdministrator', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_box_definition_name: Optional[str] = None,
        network_connection_name: Optional[str] = None,
        license_type: Optional[Union[str, "LicenseType"]] = None,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(PoolUpdateProperties, self).__init__(**kwargs)
        self.dev_box_definition_name = dev_box_definition_name
        self.network_connection_name = network_connection_name
        self.license_type = license_type
        self.local_administrator = local_administrator


class PoolProperties(PoolUpdateProperties):
    """Properties of a Pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param dev_box_definition_name: Name of a Dev Box definition in parent Project of this Pool.
    :type dev_box_definition_name: str
    :param network_connection_name: Name of a Network Connection in parent Project of this Pool.
    :type network_connection_name: str
    :param license_type: Specifies the license type indicating the caller has already acquired
     licenses for the Dev Boxes that will be created. Possible values include: "Windows_Client".
    :type license_type: str or ~dev_center.models.LicenseType
    :param local_administrator: Indicates whether owners of Dev Boxes in this pool are added as
     local administrators on the Dev Box. Possible values include: "Disabled", "Enabled".
    :type local_administrator: str or ~dev_center.models.LocalAdminStatus
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'dev_box_definition_name': {'key': 'devBoxDefinitionName', 'type': 'str'},
        'network_connection_name': {'key': 'networkConnectionName', 'type': 'str'},
        'license_type': {'key': 'licenseType', 'type': 'str'},
        'local_administrator': {'key': 'localAdministrator', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_box_definition_name: Optional[str] = None,
        network_connection_name: Optional[str] = None,
        license_type: Optional[Union[str, "LicenseType"]] = None,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(PoolProperties, self).__init__(dev_box_definition_name=dev_box_definition_name, network_connection_name=network_connection_name, license_type=license_type, local_administrator=local_administrator, **kwargs)
        self.provisioning_state = None


class PoolUpdate(TrackedResourceUpdate):
    """The pool properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param dev_box_definition_name: Name of a Dev Box definition in parent Project of this Pool.
    :type dev_box_definition_name: str
    :param network_connection_name: Name of a Network Connection in parent Project of this Pool.
    :type network_connection_name: str
    :param license_type: Specifies the license type indicating the caller has already acquired
     licenses for the Dev Boxes that will be created. Possible values include: "Windows_Client".
    :type license_type: str or ~dev_center.models.LicenseType
    :param local_administrator: Indicates whether owners of Dev Boxes in this pool are added as
     local administrators on the Dev Box. Possible values include: "Disabled", "Enabled".
    :type local_administrator: str or ~dev_center.models.LocalAdminStatus
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'dev_box_definition_name': {'key': 'properties.devBoxDefinitionName', 'type': 'str'},
        'network_connection_name': {'key': 'properties.networkConnectionName', 'type': 'str'},
        'license_type': {'key': 'properties.licenseType', 'type': 'str'},
        'local_administrator': {'key': 'properties.localAdministrator', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        dev_box_definition_name: Optional[str] = None,
        network_connection_name: Optional[str] = None,
        license_type: Optional[Union[str, "LicenseType"]] = None,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(PoolUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.dev_box_definition_name = dev_box_definition_name
        self.network_connection_name = network_connection_name
        self.license_type = license_type
        self.local_administrator = local_administrator


class Project(TrackedResource):
    """Represents a project resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'dev_center_id': {'key': 'properties.devCenterId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Project, self).__init__(tags=tags, location=location, **kwargs)
        self.dev_center_id = dev_center_id
        self.description = description
        self.provisioning_state = None


class ProjectEnvironmentType(Resource):
    """Represents an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param identity: Managed identity properties.
    :type identity: ~dev_center.models.ManagedServiceIdentity
    :param location: The geo-location for the environment type.
    :type location: str
    :param deployment_target_id: Id of a subscription that the environment type will be mapped to.
     The environment's resources will be deployed into this subscription.
    :type deployment_target_id: str
    :param status: Defines whether this Environment Type can be used in this Project. Possible
     values include: "Enabled", "Disabled".
    :type status: str or ~dev_center.models.EnableStatus
    :param creator_role_assignment: The role definition assigned to the environment creator on
     backing resources.
    :type creator_role_assignment:
     ~dev_center.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
    :param user_role_assignments: Role Assignments created on environment backing resources. This
     is a mapping from a user object ID to an object of role definition IDs.
    :type user_role_assignments: dict[str, ~dev_center.models.UserRoleAssignmentValue]
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'location': {'key': 'location', 'type': 'str'},
        'deployment_target_id': {'key': 'properties.deploymentTargetId', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'creator_role_assignment': {'key': 'properties.creatorRoleAssignment', 'type': 'ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment'},
        'user_role_assignments': {'key': 'properties.userRoleAssignments', 'type': '{UserRoleAssignmentValue}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        location: Optional[str] = None,
        deployment_target_id: Optional[str] = None,
        status: Optional[Union[str, "EnableStatus"]] = None,
        creator_role_assignment: Optional["ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"] = None,
        user_role_assignments: Optional[Dict[str, "UserRoleAssignmentValue"]] = None,
        **kwargs
    ):
        super(ProjectEnvironmentType, self).__init__(**kwargs)
        self.tags = tags
        self.identity = identity
        self.location = location
        self.deployment_target_id = deployment_target_id
        self.status = status
        self.creator_role_assignment = creator_role_assignment
        self.user_role_assignments = user_role_assignments
        self.provisioning_state = None


class ProjectEnvironmentTypeListResult(msrest.serialization.Model):
    """Result of the project environment type list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.ProjectEnvironmentType]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProjectEnvironmentType]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectEnvironmentTypeListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ProjectEnvironmentTypeUpdateProperties(msrest.serialization.Model):
    """Properties of a project environment type. These properties can be updated after the resource has been created.

    :param deployment_target_id: Id of a subscription that the environment type will be mapped to.
     The environment's resources will be deployed into this subscription.
    :type deployment_target_id: str
    :param status: Defines whether this Environment Type can be used in this Project. Possible
     values include: "Enabled", "Disabled".
    :type status: str or ~dev_center.models.EnableStatus
    :param creator_role_assignment: The role definition assigned to the environment creator on
     backing resources.
    :type creator_role_assignment:
     ~dev_center.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
    :param user_role_assignments: Role Assignments created on environment backing resources. This
     is a mapping from a user object ID to an object of role definition IDs.
    :type user_role_assignments: dict[str, ~dev_center.models.UserRoleAssignmentValue]
    """

    _attribute_map = {
        'deployment_target_id': {'key': 'deploymentTargetId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'creator_role_assignment': {'key': 'creatorRoleAssignment', 'type': 'ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment'},
        'user_role_assignments': {'key': 'userRoleAssignments', 'type': '{UserRoleAssignmentValue}'},
    }

    def __init__(
        self,
        *,
        deployment_target_id: Optional[str] = None,
        status: Optional[Union[str, "EnableStatus"]] = None,
        creator_role_assignment: Optional["ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"] = None,
        user_role_assignments: Optional[Dict[str, "UserRoleAssignmentValue"]] = None,
        **kwargs
    ):
        super(ProjectEnvironmentTypeUpdateProperties, self).__init__(**kwargs)
        self.deployment_target_id = deployment_target_id
        self.status = status
        self.creator_role_assignment = creator_role_assignment
        self.user_role_assignments = user_role_assignments


class ProjectEnvironmentTypeProperties(ProjectEnvironmentTypeUpdateProperties):
    """Properties of a project environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param deployment_target_id: Id of a subscription that the environment type will be mapped to.
     The environment's resources will be deployed into this subscription.
    :type deployment_target_id: str
    :param status: Defines whether this Environment Type can be used in this Project. Possible
     values include: "Enabled", "Disabled".
    :type status: str or ~dev_center.models.EnableStatus
    :param creator_role_assignment: The role definition assigned to the environment creator on
     backing resources.
    :type creator_role_assignment:
     ~dev_center.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
    :param user_role_assignments: Role Assignments created on environment backing resources. This
     is a mapping from a user object ID to an object of role definition IDs.
    :type user_role_assignments: dict[str, ~dev_center.models.UserRoleAssignmentValue]
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'deployment_target_id': {'key': 'deploymentTargetId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'creator_role_assignment': {'key': 'creatorRoleAssignment', 'type': 'ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment'},
        'user_role_assignments': {'key': 'userRoleAssignments', 'type': '{UserRoleAssignmentValue}'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        deployment_target_id: Optional[str] = None,
        status: Optional[Union[str, "EnableStatus"]] = None,
        creator_role_assignment: Optional["ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"] = None,
        user_role_assignments: Optional[Dict[str, "UserRoleAssignmentValue"]] = None,
        **kwargs
    ):
        super(ProjectEnvironmentTypeProperties, self).__init__(deployment_target_id=deployment_target_id, status=status, creator_role_assignment=creator_role_assignment, user_role_assignments=user_role_assignments, **kwargs)
        self.provisioning_state = None


class ProjectEnvironmentTypeUpdate(msrest.serialization.Model):
    """The project environment type for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param identity: Managed identity properties.
    :type identity: ~dev_center.models.ManagedServiceIdentity
    :param deployment_target_id: Id of a subscription that the environment type will be mapped to.
     The environment's resources will be deployed into this subscription.
    :type deployment_target_id: str
    :param status: Defines whether this Environment Type can be used in this Project. Possible
     values include: "Enabled", "Disabled".
    :type status: str or ~dev_center.models.EnableStatus
    :param creator_role_assignment: The role definition assigned to the environment creator on
     backing resources.
    :type creator_role_assignment:
     ~dev_center.models.ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment
    :param user_role_assignments: Role Assignments created on environment backing resources. This
     is a mapping from a user object ID to an object of role definition IDs.
    :type user_role_assignments: dict[str, ~dev_center.models.UserRoleAssignmentValue]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'ManagedServiceIdentity'},
        'deployment_target_id': {'key': 'properties.deploymentTargetId', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'creator_role_assignment': {'key': 'properties.creatorRoleAssignment', 'type': 'ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment'},
        'user_role_assignments': {'key': 'properties.userRoleAssignments', 'type': '{UserRoleAssignmentValue}'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["ManagedServiceIdentity"] = None,
        deployment_target_id: Optional[str] = None,
        status: Optional[Union[str, "EnableStatus"]] = None,
        creator_role_assignment: Optional["ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment"] = None,
        user_role_assignments: Optional[Dict[str, "UserRoleAssignmentValue"]] = None,
        **kwargs
    ):
        super(ProjectEnvironmentTypeUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.identity = identity
        self.deployment_target_id = deployment_target_id
        self.status = status
        self.creator_role_assignment = creator_role_assignment
        self.user_role_assignments = user_role_assignments


class ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment(msrest.serialization.Model):
    """The role definition assigned to the environment creator on backing resources.

    :param roles: A map of roles to assign to the environment creator.
    :type roles: dict[str, ~dev_center.models.EnvironmentRole]
    """

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '{EnvironmentRole}'},
    }

    def __init__(
        self,
        *,
        roles: Optional[Dict[str, "EnvironmentRole"]] = None,
        **kwargs
    ):
        super(ProjectEnvironmentTypeUpdatePropertiesCreatorRoleAssignment, self).__init__(**kwargs)
        self.roles = roles


class ProjectListResult(msrest.serialization.Model):
    """Results of the project list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Project]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Project]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ProjectUpdateProperties(msrest.serialization.Model):
    """Properties of a project. These properties can be updated after the resource has been created.

    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    """

    _attribute_map = {
        'dev_center_id': {'key': 'devCenterId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectUpdateProperties, self).__init__(**kwargs)
        self.dev_center_id = dev_center_id
        self.description = description


class ProjectProperties(ProjectUpdateProperties):
    """Properties of a project.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'dev_center_id': {'key': 'devCenterId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectProperties, self).__init__(dev_center_id=dev_center_id, description=description, **kwargs)
        self.provisioning_state = None


class ProjectUpdate(TrackedResourceUpdate):
    """The project properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'dev_center_id': {'key': 'properties.devCenterId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.dev_center_id = dev_center_id
        self.description = description


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class RecommendedMachineConfiguration(msrest.serialization.Model):
    """Properties for a recommended machine configuration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar memory: Recommended memory range.
    :vartype memory: ~dev_center.models.ResourceRange
    :ivar v_cp_us: Recommended vCPU range.
    :vartype v_cp_us: ~dev_center.models.ResourceRange
    """

    _validation = {
        'memory': {'readonly': True},
        'v_cp_us': {'readonly': True},
    }

    _attribute_map = {
        'memory': {'key': 'memory', 'type': 'ResourceRange'},
        'v_cp_us': {'key': 'vCPUs', 'type': 'ResourceRange'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RecommendedMachineConfiguration, self).__init__(**kwargs)
        self.memory = None
        self.v_cp_us = None


class ResourceRange(msrest.serialization.Model):
    """Properties for a range of values.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar min: Minimum value.
    :vartype min: int
    :ivar max: Maximum value.
    :vartype max: int
    """

    _validation = {
        'min': {'readonly': True},
        'max': {'readonly': True},
    }

    _attribute_map = {
        'min': {'key': 'min', 'type': 'int'},
        'max': {'key': 'max', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ResourceRange, self).__init__(**kwargs)
        self.min = None
        self.max = None


class Schedule(Resource):
    """Represents a Schedule to execute a task.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~dev_center.models.SystemData
    :param type_properties_type: Supported type this scheduled task represents. Possible values
     include: "StopDevBox".
    :type type_properties_type: str or ~dev_center.models.ScheduledType
    :param frequency: The frequency of this scheduled task. Possible values include: "Daily".
    :type frequency: str or ~dev_center.models.ScheduledFrequency
    :param time: The target time to trigger the action. The format is HH:MM.
    :type time: str
    :param time_zone: The IANA timezone id at which the schedule should execute.
    :type time_zone: str
    :param state: Indicates whether or not this scheduled task is enabled. Possible values include:
     "Enabled", "Disabled".
    :type state: str or ~dev_center.models.EnableStatus
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'type_properties_type': {'key': 'properties.type', 'type': 'str'},
        'frequency': {'key': 'properties.frequency', 'type': 'str'},
        'time': {'key': 'properties.time', 'type': 'str'},
        'time_zone': {'key': 'properties.timeZone', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type_properties_type: Optional[Union[str, "ScheduledType"]] = None,
        frequency: Optional[Union[str, "ScheduledFrequency"]] = None,
        time: Optional[str] = None,
        time_zone: Optional[str] = None,
        state: Optional[Union[str, "EnableStatus"]] = None,
        **kwargs
    ):
        super(Schedule, self).__init__(**kwargs)
        self.type_properties_type = type_properties_type
        self.frequency = frequency
        self.time = time
        self.time_zone = time_zone
        self.state = state
        self.provisioning_state = None


class ScheduleListResult(msrest.serialization.Model):
    """Result of the schedule list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.Schedule]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Schedule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ScheduleListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ScheduleUpdateProperties(msrest.serialization.Model):
    """Updatable properties of a Schedule.

    :param type: Supported type this scheduled task represents. Possible values include:
     "StopDevBox".
    :type type: str or ~dev_center.models.ScheduledType
    :param frequency: The frequency of this scheduled task. Possible values include: "Daily".
    :type frequency: str or ~dev_center.models.ScheduledFrequency
    :param time: The target time to trigger the action. The format is HH:MM.
    :type time: str
    :param time_zone: The IANA timezone id at which the schedule should execute.
    :type time_zone: str
    :param state: Indicates whether or not this scheduled task is enabled. Possible values include:
     "Enabled", "Disabled".
    :type state: str or ~dev_center.models.EnableStatus
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'time': {'key': 'time', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ScheduledType"]] = None,
        frequency: Optional[Union[str, "ScheduledFrequency"]] = None,
        time: Optional[str] = None,
        time_zone: Optional[str] = None,
        state: Optional[Union[str, "EnableStatus"]] = None,
        **kwargs
    ):
        super(ScheduleUpdateProperties, self).__init__(**kwargs)
        self.type = type
        self.frequency = frequency
        self.time = time
        self.time_zone = time_zone
        self.state = state


class ScheduleProperties(ScheduleUpdateProperties):
    """The Schedule properties defining when and what to execute.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param type: Supported type this scheduled task represents. Possible values include:
     "StopDevBox".
    :type type: str or ~dev_center.models.ScheduledType
    :param frequency: The frequency of this scheduled task. Possible values include: "Daily".
    :type frequency: str or ~dev_center.models.ScheduledFrequency
    :param time: The target time to trigger the action. The format is HH:MM.
    :type time: str
    :param time_zone: The IANA timezone id at which the schedule should execute.
    :type time_zone: str
    :param state: Indicates whether or not this scheduled task is enabled. Possible values include:
     "Enabled", "Disabled".
    :type state: str or ~dev_center.models.EnableStatus
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'time': {'key': 'time', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'state': {'key': 'state', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ScheduledType"]] = None,
        frequency: Optional[Union[str, "ScheduledFrequency"]] = None,
        time: Optional[str] = None,
        time_zone: Optional[str] = None,
        state: Optional[Union[str, "EnableStatus"]] = None,
        **kwargs
    ):
        super(ScheduleProperties, self).__init__(type=type, frequency=frequency, time=time, time_zone=time_zone, state=state, **kwargs)
        self.provisioning_state = None


class ScheduleUpdate(TrackedResourceUpdate):
    """The schedule properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param type: Supported type this scheduled task represents. Possible values include:
     "StopDevBox".
    :type type: str or ~dev_center.models.ScheduledType
    :param frequency: The frequency of this scheduled task. Possible values include: "Daily".
    :type frequency: str or ~dev_center.models.ScheduledFrequency
    :param time: The target time to trigger the action. The format is HH:MM.
    :type time: str
    :param time_zone: The IANA timezone id at which the schedule should execute.
    :type time_zone: str
    :param state: Indicates whether or not this scheduled task is enabled. Possible values include:
     "Enabled", "Disabled".
    :type state: str or ~dev_center.models.EnableStatus
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'type': {'key': 'properties.type', 'type': 'str'},
        'frequency': {'key': 'properties.frequency', 'type': 'str'},
        'time': {'key': 'properties.time', 'type': 'str'},
        'time_zone': {'key': 'properties.timeZone', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        type: Optional[Union[str, "ScheduledType"]] = None,
        frequency: Optional[Union[str, "ScheduledFrequency"]] = None,
        time: Optional[str] = None,
        time_zone: Optional[str] = None,
        state: Optional[Union[str, "EnableStatus"]] = None,
        **kwargs
    ):
        super(ScheduleUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.type = type
        self.frequency = frequency
        self.time = time
        self.time_zone = time_zone
        self.state = state


class SkuListResult(msrest.serialization.Model):
    """Results of the Microsoft.DevCenter SKU list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~dev_center.models.DevCenterSku]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DevCenterSku]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SkuListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~dev_center.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~dev_center.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class Usage(msrest.serialization.Model):
    """The core usage details.

    :param current_value: The current usage.
    :type current_value: long
    :param limit: The limit integer.
    :type limit: long
    :param unit: The unit details. Possible values include: "Count".
    :type unit: str or ~dev_center.models.UsageUnit
    :param name: The name.
    :type name: ~dev_center.models.UsageName
    """

    _attribute_map = {
        'current_value': {'key': 'currentValue', 'type': 'long'},
        'limit': {'key': 'limit', 'type': 'long'},
        'unit': {'key': 'unit', 'type': 'str'},
        'name': {'key': 'name', 'type': 'UsageName'},
    }

    def __init__(
        self,
        *,
        current_value: Optional[int] = None,
        limit: Optional[int] = None,
        unit: Optional[Union[str, "UsageUnit"]] = None,
        name: Optional["UsageName"] = None,
        **kwargs
    ):
        super(Usage, self).__init__(**kwargs)
        self.current_value = current_value
        self.limit = limit
        self.unit = unit
        self.name = name


class UsageName(msrest.serialization.Model):
    """The Usage Names.

    :param localized_value: The localized name of the resource.
    :type localized_value: str
    :param value: The name of the resource.
    :type value: str
    """

    _attribute_map = {
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        localized_value: Optional[str] = None,
        value: Optional[str] = None,
        **kwargs
    ):
        super(UsageName, self).__init__(**kwargs)
        self.localized_value = localized_value
        self.value = value


class UserAssignedIdentity(msrest.serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserAssignedIdentity, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None


class UserRoleAssignmentValue(msrest.serialization.Model):
    """Mapping of user object ID to role assignments.

    :param roles: A map of roles to assign to the parent user.
    :type roles: dict[str, ~dev_center.models.EnvironmentRole]
    """

    _attribute_map = {
        'roles': {'key': 'roles', 'type': '{EnvironmentRole}'},
    }

    def __init__(
        self,
        *,
        roles: Optional[Dict[str, "EnvironmentRole"]] = None,
        **kwargs
    ):
        super(UserRoleAssignmentValue, self).__init__(**kwargs)
        self.roles = roles
