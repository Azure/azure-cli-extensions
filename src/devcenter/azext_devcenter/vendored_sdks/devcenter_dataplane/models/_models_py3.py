# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._dev_center_dataplane_client_enums import *


class ActionRequest(msrest.serialization.Model):
    """Action request.

    All required parameters must be populated in order to send to Azure.

    :param action_id: Required. The Catalog Item action id to execute.
    :type action_id: str
    :param parameters: Parameters object for the Action.
    :type parameters: object
    """

    _validation = {
        'action_id': {'required': True},
    }

    _attribute_map = {
        'action_id': {'key': 'actionId', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        action_id: str,
        parameters: Optional[object] = None,
        **kwargs
    ):
        super(ActionRequest, self).__init__(**kwargs)
        self.action_id = action_id
        self.parameters = parameters


class Artifact(msrest.serialization.Model):
    """Properties of an Artifact.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Artifact identifier.
    :vartype id: str
    :ivar name: Artifact name.
    :vartype name: str
    :ivar is_directory: Whether artifact is a directory.
    :vartype is_directory: bool
    :ivar download_uri: Uri where the file contents can be downloaded.
    :vartype download_uri: str
    :ivar file_size: Size of file in bytes, if the artifact is a file.
    :vartype file_size: float
    :ivar created_time: Time the artifact was created.
    :vartype created_time: ~datetime.datetime
    :ivar last_modified_time: Time the artifact was last modified.
    :vartype last_modified_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'is_directory': {'readonly': True},
        'download_uri': {'readonly': True},
        'file_size': {'readonly': True},
        'created_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'is_directory': {'key': 'isDirectory', 'type': 'bool'},
        'download_uri': {'key': 'downloadUri', 'type': 'str'},
        'file_size': {'key': 'fileSize', 'type': 'float'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Artifact, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.is_directory = None
        self.download_uri = None
        self.file_size = None
        self.created_time = None
        self.last_modified_time = None


class ArtifactListResult(msrest.serialization.Model):
    """Results of the artifact list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.Artifact]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Artifact]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Artifact"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ArtifactListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CatalogItem(msrest.serialization.Model):
    """A catalog item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier of the catalog item.
    :vartype id: str
    :ivar name: Name of the catalog item.
    :vartype name: str
    :ivar catalog_name: Name of the catalog.
    :vartype catalog_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'catalog_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'catalog_name': {'key': 'catalogName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogItem, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.catalog_name = None


class CatalogItemAction(msrest.serialization.Model):
    """An action that can be taken on a catalog item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique identifier of the action.
    :vartype id: str
    :ivar name: Display name of the action.
    :vartype name: str
    :ivar description: Description of the action.
    :vartype description: str
    :ivar parameters_schema: JSON schema defining the parameters specific to the custom action.
    :vartype parameters_schema: str
    :ivar parameters: Input parameters passed to the action.
    :vartype parameters: list[~dev_center_dataplane_client.models.CatalogItemParameter]
    :ivar type: The action type. Possible values include: "Custom", "Deploy", "Delete".
    :vartype type: str or ~dev_center_dataplane_client.models.ActionType
    :ivar type_name: Name of the custom action type.
    :vartype type_name: str
    :ivar runner: The container image to use to execute the action.
    :vartype runner: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'description': {'readonly': True},
        'parameters_schema': {'readonly': True},
        'parameters': {'readonly': True},
        'type': {'readonly': True},
        'type_name': {'readonly': True},
        'runner': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'parameters_schema': {'key': 'parametersSchema', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '[CatalogItemParameter]'},
        'type': {'key': 'type', 'type': 'str'},
        'type_name': {'key': 'typeName', 'type': 'str'},
        'runner': {'key': 'runner', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogItemAction, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.description = None
        self.parameters_schema = None
        self.parameters = None
        self.type = None
        self.type_name = None
        self.runner = None


class CatalogItemListResult(msrest.serialization.Model):
    """Results of the catalog item list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.CatalogItem]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CatalogItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["CatalogItem"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(CatalogItemListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CatalogItemParameter(msrest.serialization.Model):
    """Properties of an Catalog Item parameter.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Unique ID of the parameter.
    :vartype id: str
    :ivar name: Display name of the parameter.
    :vartype name: str
    :ivar description: Description of the parameter.
    :vartype description: str
    :ivar default: Default value of the parameter.
    :vartype default: object
    :ivar type: A string of one of the basic JSON types (number, integer, null, array, object,
     boolean, string). Possible values include: "array", "boolean", "integer", "null", "number",
     "object", "string".
    :vartype type: str or ~dev_center_dataplane_client.models.ParameterType
    :ivar read_only: Whether or not this parameter is read-only.  If true, default should have a
     value.
    :vartype read_only: bool
    :ivar required: Whether or not this parameter is required.
    :vartype required: bool
    :ivar allowed: An array of allowed values.
    :vartype allowed: list[object]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'description': {'readonly': True},
        'default': {'readonly': True},
        'type': {'readonly': True},
        'read_only': {'readonly': True},
        'required': {'readonly': True},
        'allowed': {'readonly': True, 'min_items': 1, 'unique': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'default': {'key': 'default', 'type': 'object'},
        'type': {'key': 'type', 'type': 'str'},
        'read_only': {'key': 'readOnly', 'type': 'bool'},
        'required': {'key': 'required', 'type': 'bool'},
        'allowed': {'key': 'allowed', 'type': '[object]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogItemParameter, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.description = None
        self.default = None
        self.type = None
        self.read_only = None
        self.required = None
        self.allowed = None


class CatalogItemVersion(msrest.serialization.Model):
    """A catalog item version.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar catalog_item_id: Unique identifier of the catalog item.
    :vartype catalog_item_id: str
    :ivar catalog_item_name: Name of the catalog item.
    :vartype catalog_item_name: str
    :ivar catalog_name: Name of the catalog.
    :vartype catalog_name: str
    :ivar version: The version of the catalog item.
    :vartype version: str
    :ivar summary: A short summary of the catalog item.
    :vartype summary: str
    :ivar description: A long description of the catalog item.
    :vartype description: str
    :ivar template_path: Path to the catalog item entrypoint file.
    :vartype template_path: str
    :ivar parameters_schema: JSON schema defining the parameters object passed to actions.
    :vartype parameters_schema: str
    :ivar parameters: Input parameters passed to actions.
    :vartype parameters: list[~dev_center_dataplane_client.models.CatalogItemParameter]
    :ivar actions: Custom actions for the catalog item.
    :vartype actions: list[~dev_center_dataplane_client.models.CatalogItemAction]
    :ivar runner: The default container image to use to execute actions.
    :vartype runner: str
    :param status: Defines whether the specific catalog item version can be used. Possible values
     include: "Enabled", "Disabled".
    :type status: str or ~dev_center_dataplane_client.models.EnableStatus
    :param eligible_for_latest_version: Whether the version is eligible to be the latest version.
    :type eligible_for_latest_version: bool
    """

    _validation = {
        'catalog_item_id': {'readonly': True},
        'catalog_item_name': {'readonly': True},
        'catalog_name': {'readonly': True},
        'version': {'readonly': True},
        'summary': {'readonly': True},
        'description': {'readonly': True},
        'template_path': {'readonly': True},
        'parameters_schema': {'readonly': True},
        'parameters': {'readonly': True},
        'actions': {'readonly': True},
        'runner': {'readonly': True},
    }

    _attribute_map = {
        'catalog_item_id': {'key': 'catalogItemId', 'type': 'str'},
        'catalog_item_name': {'key': 'catalogItemName', 'type': 'str'},
        'catalog_name': {'key': 'catalogName', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'summary': {'key': 'summary', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'template_path': {'key': 'templatePath', 'type': 'str'},
        'parameters_schema': {'key': 'parametersSchema', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '[CatalogItemParameter]'},
        'actions': {'key': 'actions', 'type': '[CatalogItemAction]'},
        'runner': {'key': 'runner', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'eligible_for_latest_version': {'key': 'eligibleForLatestVersion', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        status: Optional[Union[str, "EnableStatus"]] = None,
        eligible_for_latest_version: Optional[bool] = None,
        **kwargs
    ):
        super(CatalogItemVersion, self).__init__(**kwargs)
        self.catalog_item_id = None
        self.catalog_item_name = None
        self.catalog_name = None
        self.version = None
        self.summary = None
        self.description = None
        self.template_path = None
        self.parameters_schema = None
        self.parameters = None
        self.actions = None
        self.runner = None
        self.status = status
        self.eligible_for_latest_version = eligible_for_latest_version


class CatalogItemVersionListResult(msrest.serialization.Model):
    """Results of the catalog item list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.CatalogItemVersion]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CatalogItemVersion]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["CatalogItemVersion"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(CatalogItemVersionListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the service.

    All required parameters must be populated in order to send to Azure.

    :param code: Required. An identifier for the error. Codes are invariant and are intended to be
     consumed programmatically.
    :type code: str
    :param message: Required. A message describing the error, intended to be suitable for display
     in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~dev_center_dataplane_client.models.CloudErrorBody]
    """

    _validation = {
        'code': {'required': True},
        'message': {'required': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: str,
        message: str,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class DevBox(msrest.serialization.Model):
    """A DevBox Dev Box.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar name: Display name for the Dev Box.
    :vartype name: str
    :ivar project_name: Name of the project this Dev Box belongs to.
    :vartype project_name: str
    :param pool_name: Required. The name of the Dev Box pool this machine belongs to.
    :type pool_name: str
    :ivar provisioning_state: The current provisioning state of the Dev Box.
    :vartype provisioning_state: str
    :ivar action_state: The current action state of the Dev Box. This is state is based on previous
     action performed by user.
    :vartype action_state: str
    :ivar power_state: The current power state of the Dev Box. Possible values include: "Unknown",
     "Deallocated", "PoweredOff", "Running", "Hibernated".
    :vartype power_state: str or ~dev_center_dataplane_client.models.PowerState
    :ivar unique_id: A unique identifier for the Dev Box. This is a GUID-formatted string (e.g.
     00000000-0000-0000-0000-000000000000).
    :vartype unique_id: str
    :ivar error_details: Provisioning or action error details. Populated only for error states.
    :vartype error_details: ~dev_center_dataplane_client.models.ProvisioningError
    :ivar location: Azure region where this Dev Box is located. This will be the same region as the
     Virtual Network it is attached to.
    :vartype location: str
    :ivar os_type: The operating system type of this Dev Box. Possible values include: "Windows".
    :vartype os_type: str or ~dev_center_dataplane_client.models.OsType
    :ivar user: User identifier of the user this vm is assigned to.
    :vartype user: str
    :ivar hardware_profile: Information about the Dev Box's hardware resources.
    :vartype hardware_profile: ~dev_center_dataplane_client.models.HardwareProfile
    :ivar storage_profile: Storage settings for this Dev Box.
    :vartype storage_profile: ~dev_center_dataplane_client.models.StorageProfile
    :ivar image_reference: Information about the image used for this Dev Box.
    :vartype image_reference: ~dev_center_dataplane_client.models.ImageReference
    :ivar created_time: Creation time of this Dev Box.
    :vartype created_time: ~datetime.datetime
    :param local_administrator: Indicates whether the owner of the Dev Box is a local
     administrator. Possible values include: "Enabled", "Disabled".
    :type local_administrator: str or ~dev_center_dataplane_client.models.LocalAdminStatus
    """

    _validation = {
        'name': {'readonly': True},
        'project_name': {'readonly': True},
        'pool_name': {'required': True, 'max_length': 63, 'min_length': 3, 'pattern': r'^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$'},
        'provisioning_state': {'readonly': True},
        'action_state': {'readonly': True},
        'power_state': {'readonly': True},
        'unique_id': {'readonly': True},
        'error_details': {'readonly': True},
        'location': {'readonly': True},
        'os_type': {'readonly': True},
        'user': {'readonly': True},
        'hardware_profile': {'readonly': True},
        'storage_profile': {'readonly': True},
        'image_reference': {'readonly': True},
        'created_time': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'project_name': {'key': 'projectName', 'type': 'str'},
        'pool_name': {'key': 'poolName', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'action_state': {'key': 'actionState', 'type': 'str'},
        'power_state': {'key': 'powerState', 'type': 'str'},
        'unique_id': {'key': 'uniqueId', 'type': 'str'},
        'error_details': {'key': 'errorDetails', 'type': 'ProvisioningError'},
        'location': {'key': 'location', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'hardware_profile': {'key': 'hardwareProfile', 'type': 'HardwareProfile'},
        'storage_profile': {'key': 'storageProfile', 'type': 'StorageProfile'},
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'created_time': {'key': 'createdTime', 'type': 'iso-8601'},
        'local_administrator': {'key': 'localAdministrator', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        pool_name: str,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(DevBox, self).__init__(**kwargs)
        self.name = None
        self.project_name = None
        self.pool_name = pool_name
        self.provisioning_state = None
        self.action_state = None
        self.power_state = None
        self.unique_id = None
        self.error_details = None
        self.location = None
        self.os_type = None
        self.user = None
        self.hardware_profile = None
        self.storage_profile = None
        self.image_reference = None
        self.created_time = None
        self.local_administrator = local_administrator


class DevBoxListResult(msrest.serialization.Model):
    """The Dev Box list result.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. The list of DevBox Dev Boxes.
    :type value: list[~dev_center_dataplane_client.models.DevBox]
    :param next_link: The URL to get the next set of results.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DevBox]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DevBox"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DevBoxListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class EnvironmentUpdateProperties(msrest.serialization.Model):
    """Properties of an environment. These properties can be updated after the resource has been created.

    :param description: Description of the Environment.
    :type description: str
    :param catalog_name: Name of the catalog.
    :type catalog_name: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param parameters: Parameters object for the deploy action.
    :type parameters: object
    :param scheduled_tasks: Set of supported scheduled tasks to help manage cost.
    :type scheduled_tasks: dict[str, ~dev_center_dataplane_client.models.ScheduledTask]
    :param tags: A set of tags. Key value pairs that will be applied to resources deployed in this
     environment as tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'catalog_name': {'key': 'catalogName', 'type': 'str'},
        'catalog_item_name': {'key': 'catalogItemName', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'object'},
        'scheduled_tasks': {'key': 'scheduledTasks', 'type': '{ScheduledTask}'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        catalog_name: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        parameters: Optional[object] = None,
        scheduled_tasks: Optional[Dict[str, "ScheduledTask"]] = None,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(EnvironmentUpdateProperties, self).__init__(**kwargs)
        self.description = description
        self.catalog_name = catalog_name
        self.catalog_item_name = catalog_item_name
        self.parameters = parameters
        self.scheduled_tasks = scheduled_tasks
        self.tags = tags


class Environment(EnvironmentUpdateProperties):
    """Properties of an environment.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param description: Description of the Environment.
    :type description: str
    :param catalog_name: Name of the catalog.
    :type catalog_name: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param parameters: Parameters object for the deploy action.
    :type parameters: object
    :param scheduled_tasks: Set of supported scheduled tasks to help manage cost.
    :type scheduled_tasks: dict[str, ~dev_center_dataplane_client.models.ScheduledTask]
    :param tags: A set of tags. Key value pairs that will be applied to resources deployed in this
     environment as tags.
    :type tags: dict[str, str]
    :ivar name: Environment name.
    :vartype name: str
    :param environment_type: Required. Environment type.
    :type environment_type: str
    :param owner: Identifier of the owner of this Environment.
    :type owner: str
    :ivar provisioning_state: The provisioning state of the environment.
    :vartype provisioning_state: str
    :ivar resource_group_id: The identifier of the resource group containing the environment's
     resources.
    :vartype resource_group_id: str
    """

    _validation = {
        'name': {'readonly': True},
        'environment_type': {'required': True},
        'provisioning_state': {'readonly': True},
        'resource_group_id': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'catalog_name': {'key': 'catalogName', 'type': 'str'},
        'catalog_item_name': {'key': 'catalogItemName', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': 'object'},
        'scheduled_tasks': {'key': 'scheduledTasks', 'type': '{ScheduledTask}'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'name': {'key': 'name', 'type': 'str'},
        'environment_type': {'key': 'environmentType', 'type': 'str'},
        'owner': {'key': 'owner', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'resource_group_id': {'key': 'resourceGroupId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        environment_type: str,
        description: Optional[str] = None,
        catalog_name: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        parameters: Optional[object] = None,
        scheduled_tasks: Optional[Dict[str, "ScheduledTask"]] = None,
        tags: Optional[Dict[str, str]] = None,
        owner: Optional[str] = None,
        **kwargs
    ):
        super(Environment, self).__init__(description=description, catalog_name=catalog_name, catalog_item_name=catalog_item_name, parameters=parameters, scheduled_tasks=scheduled_tasks, tags=tags, **kwargs)
        self.name = None
        self.environment_type = environment_type
        self.owner = owner
        self.provisioning_state = None
        self.resource_group_id = None


class EnvironmentListResult(msrest.serialization.Model):
    """Results of the environment list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.Environment]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Environment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Environment"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class EnvironmentType(msrest.serialization.Model):
    """Properties of an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the environment type.
    :vartype name: str
    :ivar deployment_target_id: Id of a subscription or management group that the environment type
     will be mapped to. The environment's resources will be deployed into this subscription or
     management group.
    :vartype deployment_target_id: str
    :ivar status: Defines whether this Environment Type can be used in this Project. Possible
     values include: "Enabled", "Disabled".
    :vartype status: str or ~dev_center_dataplane_client.models.EnableStatus
    """

    _validation = {
        'name': {'readonly': True},
        'deployment_target_id': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'deployment_target_id': {'key': 'deploymentTargetId', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EnvironmentType, self).__init__(**kwargs)
        self.name = None
        self.deployment_target_id = None
        self.status = None


class EnvironmentTypeListResult(msrest.serialization.Model):
    """Result of the environment type list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.EnvironmentType]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EnvironmentType]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["EnvironmentType"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentTypeListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class HardwareProfile(msrest.serialization.Model):
    """Hardware specifications for the Dev Box.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar sku_name: The name of the SKU.
    :vartype sku_name: str
    :ivar v_cp_us: The number of vCPUs available for the Dev Box.
    :vartype v_cp_us: int
    :ivar memory_gb: The amount of memory available for the Dev Box.
    :vartype memory_gb: int
    """

    _validation = {
        'sku_name': {'readonly': True},
        'v_cp_us': {'readonly': True},
        'memory_gb': {'readonly': True},
    }

    _attribute_map = {
        'sku_name': {'key': 'skuName', 'type': 'str'},
        'v_cp_us': {'key': 'vCPUs', 'type': 'int'},
        'memory_gb': {'key': 'memoryGB', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HardwareProfile, self).__init__(**kwargs)
        self.sku_name = None
        self.v_cp_us = None
        self.memory_gb = None


class ImageReference(msrest.serialization.Model):
    """Specifies information about the image used.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the image used.
    :vartype name: str
    :ivar version: The version of the image.
    :vartype version: str
    :ivar operating_system: The operating system of the image.
    :vartype operating_system: str
    :ivar os_build_number: The operating system build number of the image.
    :vartype os_build_number: str
    :ivar published_date: The datetime that the backing image version was published.
    :vartype published_date: ~datetime.datetime
    """

    _validation = {
        'name': {'readonly': True},
        'version': {'readonly': True},
        'operating_system': {'readonly': True},
        'os_build_number': {'readonly': True},
        'published_date': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'operating_system': {'key': 'operatingSystem', 'type': 'str'},
        'os_build_number': {'key': 'osBuildNumber', 'type': 'str'},
        'published_date': {'key': 'publishedDate', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ImageReference, self).__init__(**kwargs)
        self.name = None
        self.version = None
        self.operating_system = None
        self.os_build_number = None
        self.published_date = None


class OsDisk(msrest.serialization.Model):
    """Settings for the operating system disk.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar disk_size_gb: The size of the OS Disk in gigabytes.
    :vartype disk_size_gb: int
    """

    _validation = {
        'disk_size_gb': {'readonly': True},
    }

    _attribute_map = {
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OsDisk, self).__init__(**kwargs)
        self.disk_size_gb = None


class Pool(msrest.serialization.Model):
    """A pool of Dev Boxes.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Pool name.
    :vartype name: str
    :ivar location: Azure region where Dev Boxes in the pool are located.
    :vartype location: str
    :ivar os_type: The operating system type of Dev Boxes in this pool. Possible values include:
     "Windows".
    :vartype os_type: str or ~dev_center_dataplane_client.models.OsType
    :ivar hardware_profile: Hardware settings for the Dev Boxes created in this pool.
    :vartype hardware_profile: ~dev_center_dataplane_client.models.HardwareProfile
    :ivar storage_profile: Storage settings for Dev Box created in this pool.
    :vartype storage_profile: ~dev_center_dataplane_client.models.StorageProfile
    :ivar image_reference: Image settings for Dev Boxes create in this pool.
    :vartype image_reference: ~dev_center_dataplane_client.models.ImageReference
    :param local_administrator: Indicates whether owners of Dev Boxes in this pool are local
     administrators on the Dev Boxes. Possible values include: "Enabled", "Disabled".
    :type local_administrator: str or ~dev_center_dataplane_client.models.LocalAdminStatus
    """

    _validation = {
        'name': {'readonly': True},
        'location': {'readonly': True},
        'os_type': {'readonly': True},
        'hardware_profile': {'readonly': True},
        'storage_profile': {'readonly': True},
        'image_reference': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'hardware_profile': {'key': 'hardwareProfile', 'type': 'HardwareProfile'},
        'storage_profile': {'key': 'storageProfile', 'type': 'StorageProfile'},
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'local_administrator': {'key': 'localAdministrator', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        local_administrator: Optional[Union[str, "LocalAdminStatus"]] = None,
        **kwargs
    ):
        super(Pool, self).__init__(**kwargs)
        self.name = None
        self.location = None
        self.os_type = None
        self.hardware_profile = None
        self.storage_profile = None
        self.image_reference = None
        self.local_administrator = local_administrator


class PoolListResult(msrest.serialization.Model):
    """The Pool list result.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.Pool]
    :param next_link: The URL to get the next set of results.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Pool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Pool"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(PoolListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Project(msrest.serialization.Model):
    """Project details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the project.
    :vartype name: str
    :ivar description: Description of the project.
    :vartype description: str
    """

    _validation = {
        'name': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Project, self).__init__(**kwargs)
        self.name = None
        self.description = None


class ProjectListResult(msrest.serialization.Model):
    """Results of the project list operation.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.Project]
    :param next_link: URL to get the next set of results if there are any.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Project]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Project"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ProjectListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ProvisioningError(msrest.serialization.Model):
    """Error details.

    :param code: The error code.
    :type code: str
    :param message: The error message.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ProvisioningError, self).__init__(**kwargs)
        self.code = code
        self.message = message


class RemoteConnection(msrest.serialization.Model):
    """Provides RDP connection information.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar web_url: URL to open a browser based RDP session.
    :vartype web_url: str
    :ivar rdp_connection_url: Link to open a Remote Desktop session.
    :vartype rdp_connection_url: str
    """

    _validation = {
        'web_url': {'readonly': True},
        'rdp_connection_url': {'readonly': True},
    }

    _attribute_map = {
        'web_url': {'key': 'webUrl', 'type': 'str'},
        'rdp_connection_url': {'key': 'rdpConnectionUrl', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RemoteConnection, self).__init__(**kwargs)
        self.web_url = None
        self.rdp_connection_url = None


class Schedule(msrest.serialization.Model):
    """A Schedule to execute action.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Display name for the Schedule.
    :vartype name: str
    :ivar type: Supported type this scheduled task represents. Possible values include:
     "StopDevBox".
    :vartype type: str or ~dev_center_dataplane_client.models.ScheduledType
    :ivar frequency: The frequency of this scheduled task. Possible values include: "Daily".
    :vartype frequency: str or ~dev_center_dataplane_client.models.ScheduledFrequency
    :ivar time: The target time to trigger the action. The format is HH:MM.
    :vartype time: str
    :ivar time_zone: The IANA timezone id at which the schedule should execute.
    :vartype time_zone: str
    """

    _validation = {
        'name': {'readonly': True},
        'type': {'readonly': True},
        'frequency': {'readonly': True},
        'time': {'readonly': True},
        'time_zone': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'frequency': {'key': 'frequency', 'type': 'str'},
        'time': {'key': 'time', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Schedule, self).__init__(**kwargs)
        self.name = None
        self.type = None
        self.frequency = None
        self.time = None
        self.time_zone = None


class ScheduledTask(msrest.serialization.Model):
    """Scheduled task to auto-expire an environment.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Supported type this scheduled task represents. Possible values include:
     "AutoExpire".
    :type type: str or ~dev_center_dataplane_client.models.ScheduledTaskType
    :param enabled: Indicates whether or not this scheduled task is enabled. Possible values
     include: "Enabled", "Disabled".
    :type enabled: str or ~dev_center_dataplane_client.models.EnableStatus
    :param start_time: Required. Date/time by which the environment should expire.
    :type start_time: ~datetime.datetime
    """

    _validation = {
        'type': {'required': True},
        'start_time': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ScheduledTaskType"],
        start_time: datetime.datetime,
        enabled: Optional[Union[str, "EnableStatus"]] = None,
        **kwargs
    ):
        super(ScheduledTask, self).__init__(**kwargs)
        self.type = type
        self.enabled = enabled
        self.start_time = start_time


class ScheduleListResult(msrest.serialization.Model):
    """The Schedule list result.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. Current page of results.
    :type value: list[~dev_center_dataplane_client.models.Schedule]
    :param next_link: The URL to get the next set of results.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Schedule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["Schedule"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ScheduleListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class StorageProfile(msrest.serialization.Model):
    """Storage settings for the Dev Box's disks.

    :param os_disk: Settings for the operating system disk.
    :type os_disk: ~dev_center_dataplane_client.models.OsDisk
    """

    _attribute_map = {
        'os_disk': {'key': 'osDisk', 'type': 'OsDisk'},
    }

    def __init__(
        self,
        *,
        os_disk: Optional["OsDisk"] = None,
        **kwargs
    ):
        super(StorageProfile, self).__init__(**kwargs)
        self.os_disk = os_disk
