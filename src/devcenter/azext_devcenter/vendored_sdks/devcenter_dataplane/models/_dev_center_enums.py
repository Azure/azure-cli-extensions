# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class ActionState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the action.
    """

    PENDING = "Pending"
    INITIALIZING = "Initializing"
    PROCESSING = "Processing"
    SUCCEEDED = "Succeeded"
    CANCELED = "Canceled"
    FAILED = "Failed"

class ActionType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of action.
    """

    CUSTOM = "Custom"
    DEPLOY = "Deploy"
    DELETE = "Delete"

class EnableStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Enable or disable status. Indicates whether the property applied to is either enabled or
    disabled.
    """

    ENABLED = "Enabled"
    DISABLED = "Disabled"

class OsType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The operating system type.
    """

    WINDOWS = "Windows"

class ParameterType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of data a parameter accepts.
    """

    ARRAY = "array"
    BOOLEAN = "boolean"
    INTEGER = "integer"
    NULL = "null"
    NUMBER = "number"
    OBJECT = "object"
    STRING = "string"

class PowerState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The power states of a Dev Box.
    """

    UNKNOWN = "Unknown"
    DEALLOCATED = "Deallocated"
    POWERED_OFF = "PoweredOff"
    RUNNING = "Running"
    HIBERNATED = "Hibernated"

class ScheduledFrequency(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The frequency of task execution.
    """

    DAILY = "Daily"

class ScheduledTaskType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The supported types for a scheduled task.
    """

    AUTO_EXPIRE = "AutoExpire"

class ScheduledType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The supported types for a scheduled task.
    """

    STOP_DEV_BOX = "StopDevBox"
