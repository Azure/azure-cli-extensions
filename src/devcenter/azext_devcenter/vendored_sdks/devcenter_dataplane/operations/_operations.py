# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from io import IOBase
import sys
from typing import Any, Callable, Dict, IO, Iterable, Iterator, List, Optional, TypeVar, Union, cast, overload
import urllib.parse

from azure.core.exceptions import (
    ClientAuthenticationError,
    HttpResponseError,
    ResourceExistsError,
    ResourceNotFoundError,
    ResourceNotModifiedError,
    map_error,
)
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.polling import LROPoller, NoPolling, PollingMethod
from azure.core.polling.base_polling import LROBasePolling
from azure.core.rest import HttpRequest, HttpResponse
from azure.core.tracing.decorator import distributed_trace
from azure.core.utils import case_insensitive_dict

from .._serialization import Serializer

if sys.version_info >= (3, 9):
    from collections.abc import MutableMapping
else:
    from typing import MutableMapping  # type: ignore  # pylint: disable=ungrouped-imports
JSON = MutableMapping[str, Any]  # pylint: disable=unsubscriptable-object
T = TypeVar("T")
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
_SERIALIZER.client_side_validation = False


def build_dev_center_list_projects_request(
    *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_center_get_project_request(project_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name", project_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_pools_request(
    project_name: str, *, top: Optional[int] = None, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/pools"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_pool_request(project_name: str, pool_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/pools/{poolName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "poolName": _SERIALIZER.url(
            "pool_name", pool_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_schedules_by_project_request(
    project_name: str, *, top: Optional[int] = None, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/schedules"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_schedules_request(
    project_name: str, pool_name: str, *, top: Optional[int] = None, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/pools/{poolName}/schedules"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "poolName": _SERIALIZER.url(
            "pool_name", pool_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_schedule_request(
    project_name: str, pool_name: str, schedule_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/pools/{poolName}/schedules/{scheduleName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "poolName": _SERIALIZER.url(
            "pool_name", pool_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
        "scheduleName": _SERIALIZER.url("schedule_name", schedule_name, "str"),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_all_dev_boxes_request(
    *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/devboxes"

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_all_dev_boxes_by_user_request(
    user_id: str = "me", *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/users/{userId}/devboxes"
    path_format_arguments = {
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_dev_boxes_request(
    project_name: str, user_id: str = "me", *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_create_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_delete_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_start_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}:start"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_stop_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", *, hibernate: Optional[bool] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}:stop"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if hibernate is not None:
        _params["hibernate"] = _SERIALIZER.query("hibernate", hibernate, "bool")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_restart_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}:restart"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_repair_dev_box_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}:repair"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_customization_groups_request(
    project_name: str, dev_box_name: str, user_id: str = "me", *, include: Optional[List[str]] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/customizationGroups"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if include is not None:
        _params["include"] = _SERIALIZER.query("include", include, "[str]", div=",")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_customization_group_request(
    project_name: str, dev_box_name: str, customization_group_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/customizationGroups/{customizationGroupName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "customizationGroupName": _SERIALIZER.url(
            "customization_group_name",
            customization_group_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_create_customization_group_request(
    project_name: str, dev_box_name: str, customization_group_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/customizationGroups/{customizationGroupName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "customizationGroupName": _SERIALIZER.url(
            "customization_group_name",
            customization_group_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_customization_task_log_request(
    project_name: str,
    dev_box_name: str,
    customization_group_name: str,
    customization_task_id: str,
    user_id: str = "me",
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "text/plain")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/customizationGroups/{customizationGroupName}/logs/{customizationTaskId}"  # pylint: disable=line-too-long
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "customizationGroupName": _SERIALIZER.url(
            "customization_group_name",
            customization_group_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "customizationTaskId": _SERIALIZER.url(
            "customization_task_id",
            customization_task_id,
            "str",
            max_length=36,
            min_length=36,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_remote_connection_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/remoteConnection"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_actions_request(
    project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/actions"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_action_request(
    project_name: str, dev_box_name: str, action_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/actions/{actionName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_skip_action_request(
    project_name: str, dev_box_name: str, action_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/actions/{actionName}:skip"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_delay_action_request(
    project_name: str,
    dev_box_name: str,
    action_name: str,
    user_id: str = "me",
    *,
    until: datetime.datetime,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/actions/{actionName}:delay"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["until"] = _SERIALIZER.query("until", until, "iso-8601")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_delay_all_actions_request(
    project_name: str, dev_box_name: str, user_id: str = "me", *, until: datetime.datetime, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/actions:delay"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["until"] = _SERIALIZER.query("until", until, "iso-8601")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_list_operations_request(
    project_name: str,
    dev_box_name: str,
    user_id: str = "me",
    *,
    top: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/operations"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_dev_boxes_get_operation_request(
    project_name: str, dev_box_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}/operations/{operationId}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "devBoxName": _SERIALIZER.url(
            "dev_box_name",
            dev_box_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "operationId": _SERIALIZER.url(
            "operation_id",
            operation_id,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_projects_list_customization_task_definitions_request(
    project_name: str, *, filter: Optional[str] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/customizationTasks"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_projects_get_customization_task_definition_request(
    project_name: str,
    catalog_name: str,
    task_name: str,
    *,
    top: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/catalogs/{catalogName}/customizationTasks/{taskName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "catalogName": _SERIALIZER.url(
            "catalog_name",
            catalog_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "taskName": _SERIALIZER.url(
            "task_name", task_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_projects_validate_customization_tasks_request(project_name: str, **kwargs: Any) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/customizationTasks:validateGroup"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_all_environments_request(
    project_name: str, *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/environments"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_environments_request(
    project_name: str, user_id: str = "me", *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_get_environment_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_create_or_update_environment_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PUT", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_delete_environment_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="DELETE", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_catalogs_request(
    project_name: str, *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/catalogs"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_get_catalog_request(
    project_name: str, catalog_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/catalogs/{catalogName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "catalogName": _SERIALIZER.url(
            "catalog_name",
            catalog_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_environment_definitions_request(
    project_name: str, *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/environmentDefinitions"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_environment_definitions_by_catalog_request(
    project_name: str, catalog_name: str, *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "catalogName": _SERIALIZER.url(
            "catalog_name",
            catalog_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_get_environment_definition_request(
    project_name: str, catalog_name: str, definition_name: str, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/catalogs/{catalogName}/environmentDefinitions/{definitionName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "catalogName": _SERIALIZER.url(
            "catalog_name",
            catalog_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "definitionName": _SERIALIZER.url(
            "definition_name",
            definition_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_deployment_environments_list_environment_types_request(
    project_name: str, *, top: Optional[int] = None, **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/environmentTypes"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_patch_environment_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct headers
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if content_type is not None:
        _headers["Content-Type"] = _SERIALIZER.header("content_type", content_type, "str")
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="PATCH", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_get_outputs_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/outputs"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_list_operations_request(
    project_name: str,
    environment_name: str,
    user_id: str = "me",
    *,
    top: Optional[int] = None,
    filter: Optional[str] = None,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/operations"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    if top is not None:
        _params["top"] = _SERIALIZER.query("top", top, "int")
    if filter is not None:
        _params["filter"] = _SERIALIZER.query("filter", filter, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_get_operation_request(
    project_name: str, environment_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/operations/{operationId}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "operationId": _SERIALIZER.url(
            "operation_id",
            operation_id,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_get_logs_by_operation_request(
    project_name: str, environment_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "text/plain")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/operations/{operationId}/logs"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "operationId": _SERIALIZER.url(
            "operation_id",
            operation_id,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_list_actions_request(
    project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/actions"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_get_action_request(
    project_name: str, environment_name: str, action_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/actions/{actionName}"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="GET", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_skip_action_request(
    project_name: str, environment_name: str, action_name: str, user_id: str = "me", **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/actions/{actionName}:skip"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


def build_environments_delay_action_request(
    project_name: str,
    environment_name: str,
    action_name: str,
    user_id: str = "me",
    *,
    until: datetime.datetime,
    **kwargs: Any
) -> HttpRequest:
    _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
    _params = case_insensitive_dict(kwargs.pop("params", {}) or {})

    api_version: str = kwargs.pop("api_version", _params.pop("api-version", "2023-10-01-preview"))
    accept = _headers.pop("Accept", "application/json")

    # Construct URL
    _url = "/projects/{projectName}/users/{userId}/environments/{environmentName}/actions/{actionName}:delay"
    path_format_arguments = {
        "projectName": _SERIALIZER.url(
            "project_name",
            project_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "userId": _SERIALIZER.url(
            "user_id",
            user_id,
            "str",
            max_length=36,
            min_length=2,
            pattern=r"^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
        ),
        "environmentName": _SERIALIZER.url(
            "environment_name",
            environment_name,
            "str",
            max_length=63,
            min_length=3,
            pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
        ),
        "actionName": _SERIALIZER.url(
            "action_name", action_name, "str", max_length=63, min_length=3, pattern=r"^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$"
        ),
    }

    _url: str = _url.format(**path_format_arguments)  # type: ignore

    # Construct parameters
    _params["api-version"] = _SERIALIZER.query("api_version", api_version, "str")
    _params["until"] = _SERIALIZER.query("until", until, "iso-8601")

    # Construct headers
    _headers["Accept"] = _SERIALIZER.header("accept", accept, "str")

    return HttpRequest(method="POST", url=_url, params=_params, headers=_headers, **kwargs)


class DevCenterOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.devcenter.DevCenterClient`'s
        :attr:`dev_center` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_projects(
        self, *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all projects.

        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # Name of the project. Required.
                    "uri": "str",  # The unique URI of the project. Required.
                    "description": "str",  # Optional. Description of the project.
                    "displayName": "str",  # Optional. Display name of the project.
                    "maxDevBoxesPerUser": 0  # Optional. When specified, indicates the maximum
                      number of Dev Boxes a single user can create across all pools in the project.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_center_list_projects_request(
                    filter=filter,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_project(self, project_name: str, **kwargs: Any) -> JSON:
        """Gets a project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # Name of the project. Required.
                    "uri": "str",  # The unique URI of the project. Required.
                    "description": "str",  # Optional. Description of the project.
                    "displayName": "str",  # Optional. Display name of the project.
                    "maxDevBoxesPerUser": 0  # Optional. When specified, indicates the maximum
                      number of Dev Boxes a single user can create across all pools in the project.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_center_get_project_request(
            project_name=project_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class DevBoxesOperations:  # pylint: disable=too-many-public-methods
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.devcenter.DevCenterClient`'s
        :attr:`dev_boxes` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_pools(
        self, project_name: str, *, top: Optional[int] = None, filter: Optional[str] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists available pools.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "healthStatus": "str",  # Overall health status of the Pool. Indicates
                      whether or not the Pool is available to create Dev Boxes. Required. Known values
                      are: "Unknown", "Pending", "Healthy", "Warning", and "Unhealthy".
                    "location": "str",  # Azure region where Dev Boxes in the pool are located.
                      Required.
                    "name": "str",  # Pool name. Required.
                    "uri": "str",  # The unique URI of the pool. Required.
                    "displayName": "str",  # Optional. Display name of the pool.
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether owners of Dev
                      Boxes in this pool are local administrators on the Dev Boxes. Known values are:
                      "Enabled" and "Disabled".
                    "osType": "str",  # Optional. The operating system type of Dev Boxes in this
                      pool. "Windows"
                    "stopOnDisconnect": {
                        "status": "str",  # Indicates whether the feature to stop the devbox
                          on disconnect once the grace period has lapsed is enabled. Required. Known
                          values are: "Enabled" and "Disabled".
                        "gracePeriodMinutes": 0  # Optional. The specified time in minutes to
                          wait before stopping a Dev Box once disconnect is detected.
                    },
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_pools_request(
                    project_name=project_name,
                    top=top,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_pool(self, project_name: str, pool_name: str, **kwargs: Any) -> JSON:
        """Gets a pool.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param pool_name: The name of a pool of Dev Boxes. Required.
        :type pool_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "healthStatus": "str",  # Overall health status of the Pool. Indicates
                      whether or not the Pool is available to create Dev Boxes. Required. Known values
                      are: "Unknown", "Pending", "Healthy", "Warning", and "Unhealthy".
                    "location": "str",  # Azure region where Dev Boxes in the pool are located.
                      Required.
                    "name": "str",  # Pool name. Required.
                    "uri": "str",  # The unique URI of the pool. Required.
                    "displayName": "str",  # Optional. Display name of the pool.
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether owners of Dev
                      Boxes in this pool are local administrators on the Dev Boxes. Known values are:
                      "Enabled" and "Disabled".
                    "osType": "str",  # Optional. The operating system type of Dev Boxes in this
                      pool. "Windows"
                    "stopOnDisconnect": {
                        "status": "str",  # Indicates whether the feature to stop the devbox
                          on disconnect once the grace period has lapsed is enabled. Required. Known
                          values are: "Enabled" and "Disabled".
                        "gracePeriodMinutes": 0  # Optional. The specified time in minutes to
                          wait before stopping a Dev Box once disconnect is detected.
                    },
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_pool_request(
            project_name=project_name,
            pool_name=pool_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_schedules_by_project(
        self, project_name: str, *, top: Optional[int] = None, filter: Optional[str] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all schedules within a project that are configured by your project administrator.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "frequency": "str",  # The frequency of this scheduled task. Required.
                      "Daily"
                    "name": "str",  # Display name for the Schedule. Required.
                    "sourceType": "str",  # The type of the resource that this schedule belongs
                      to. Required. "Pool"
                    "sourceUri": "str",  # The URI of the resource that this schedule belongs to.
                      Required.
                    "time": "str",  # The target time to trigger the action. The format is HH:MM.
                      Required.
                    "timeZone": "str",  # The IANA timezone id at which the schedule should
                      execute. Required.
                    "type": "str",  # Supported type this scheduled task represents. Required.
                      "StopDevBox"
                    "uri": "str"  # The unique URI of the schedule. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_schedules_by_project_request(
                    project_name=project_name,
                    top=top,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_schedules(
        self,
        project_name: str,
        pool_name: str,
        *,
        top: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all schedules within a pool that are configured by your project administrator.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param pool_name: The name of a pool of Dev Boxes. Required.
        :type pool_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "frequency": "str",  # The frequency of this scheduled task. Required.
                      "Daily"
                    "name": "str",  # Display name for the Schedule. Required.
                    "sourceType": "str",  # The type of the resource that this schedule belongs
                      to. Required. "Pool"
                    "sourceUri": "str",  # The URI of the resource that this schedule belongs to.
                      Required.
                    "time": "str",  # The target time to trigger the action. The format is HH:MM.
                      Required.
                    "timeZone": "str",  # The IANA timezone id at which the schedule should
                      execute. Required.
                    "type": "str",  # Supported type this scheduled task represents. Required.
                      "StopDevBox"
                    "uri": "str"  # The unique URI of the schedule. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_schedules_request(
                    project_name=project_name,
                    pool_name=pool_name,
                    top=top,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_schedule(self, project_name: str, pool_name: str, schedule_name: str, **kwargs: Any) -> JSON:
        """Gets a schedule.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param pool_name: The name of a pool of Dev Boxes. Required.
        :type pool_name: str
        :param schedule_name: The name of a schedule. Required.
        :type schedule_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "frequency": "str",  # The frequency of this scheduled task. Required.
                      "Daily"
                    "name": "str",  # Display name for the Schedule. Required.
                    "sourceType": "str",  # The type of the resource that this schedule belongs
                      to. Required. "Pool"
                    "sourceUri": "str",  # The URI of the resource that this schedule belongs to.
                      Required.
                    "time": "str",  # The target time to trigger the action. The format is HH:MM.
                      Required.
                    "timeZone": "str",  # The IANA timezone id at which the schedule should
                      execute. Required.
                    "type": "str",  # Supported type this scheduled task represents. Required.
                      "StopDevBox"
                    "uri": "str"  # The unique URI of the schedule. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_schedule_request(
            project_name=project_name,
            pool_name=pool_name,
            schedule_name=schedule_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_all_dev_boxes(
        self, *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists Dev Boxes that the caller has access to in the DevCenter.

        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_all_dev_boxes_request(
                    filter=filter,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_all_dev_boxes_by_user(
        self, user_id: str = "me", *, filter: Optional[str] = None, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists Dev Boxes in the Dev Center for a particular user.

        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_all_dev_boxes_by_user_request(
                    user_id=user_id,
                    filter=filter,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_dev_boxes(
        self,
        project_name: str,
        user_id: str = "me",
        *,
        filter: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists Dev Boxes in the project for a particular user.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_dev_boxes_request(
                    project_name=project_name,
                    user_id=user_id,
                    filter=filter,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_dev_box(self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        """Gets a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _create_dev_box_initial(
        self, project_name: str, dev_box_name: str, body: Union[JSON, IO], user_id: str = "me", **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        request = build_dev_boxes_create_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.status_code == 200:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if response.status_code == 201:
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})  # type: ignore

        return cast(JSON, deserialized)  # type: ignore

    @overload
    def begin_create_dev_box(
        self,
        project_name: str,
        dev_box_name: str,
        body: JSON,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or replaces a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param body: Represents a environment. Required.
        :type body: JSON
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }

                # response body for status code(s): 200, 201
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """

    @overload
    def begin_create_dev_box(
        self,
        project_name: str,
        dev_box_name: str,
        body: IO,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or replaces a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param body: Represents a environment. Required.
        :type body: IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200, 201
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """

    @distributed_trace
    def begin_create_dev_box(
        self, project_name: str, dev_box_name: str, body: Union[JSON, IO], user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or replaces a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param body: Represents a environment. Is either a JSON type or a IO type. Required.
        :type body: JSON or IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }

                # response body for status code(s): 200, 201
                response == {
                    "poolName": "str",  # The name of the Dev Box pool this machine belongs to.
                      Required.
                    "actionState": "str",  # Optional. The current action state of the Dev Box.
                      This is state is based on previous action performed by user.
                    "createdTime": "2020-02-20 00:00:00",  # Optional. Creation time of this Dev
                      Box.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "hardwareProfile": {
                        "memoryGB": 0,  # Optional. The amount of memory available for the
                          Dev Box.
                        "skuName": "str",  # Optional. The name of the SKU.
                        "vCPUs": 0  # Optional. The number of vCPUs available for the Dev
                          Box.
                    },
                    "hibernateSupport": "str",  # Optional. Indicates whether hibernate is
                      enabled/disabled or unknown. Known values are: "Enabled", "Disabled", and
                      "OsUnsupported".
                    "imageReference": {
                        "name": "str",  # Optional. The name of the image used.
                        "operatingSystem": "str",  # Optional. The operating system of the
                          image.
                        "osBuildNumber": "str",  # Optional. The operating system build
                          number of the image.
                        "publishedDate": "2020-02-20 00:00:00",  # Optional. The datetime
                          that the backing image version was published.
                        "version": "str"  # Optional. The version of the image.
                    },
                    "localAdministrator": "str",  # Optional. Indicates whether the owner of the
                      Dev Box is a local administrator. Known values are: "Enabled" and "Disabled".
                    "location": "str",  # Optional. Azure region where this Dev Box is located.
                      This will be the same region as the Virtual Network it is attached to.
                    "name": "str",  # Optional. Display name for the Dev Box.
                    "osType": "str",  # Optional. The operating system type of this Dev Box.
                      "Windows"
                    "powerState": "str",  # Optional. The current power state of the Dev Box.
                      Known values are: "Unknown", "Running", "Deallocated", "PoweredOff", and
                      "Hibernated".
                    "projectName": "str",  # Optional. Name of the project this Dev Box belongs
                      to.
                    "provisioningState": "str",  # Optional. The current provisioning state of
                      the Dev Box.
                    "storageProfile": {
                        "osDisk": {
                            "diskSizeGB": 0  # Optional. The size of the OS Disk in
                              gigabytes.
                        }
                    },
                    "uniqueId": "str",  # Optional. A unique identifier for the Dev Box. This is
                      a GUID-formatted string (e.g. 00000000-0000-0000-0000-000000000000).
                    "uri": "str",  # Optional. The unique URI of the dev box.
                    "user": "str"  # Optional. The AAD object id of the user this Dev Box is
                      assigned to.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                body=body,
                user_id=user_id,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _delete_dev_box_initial(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        request = build_dev_boxes_delete_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 202:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace
    def begin_delete_dev_box(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Deletes a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                user_id=user_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _start_dev_box_initial(self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_start_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace
    def begin_start_dev_box(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Starts a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._start_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                user_id=user_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _stop_dev_box_initial(
        self,
        project_name: str,
        dev_box_name: str,
        user_id: str = "me",
        *,
        hibernate: Optional[bool] = None,
        **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_stop_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            hibernate=hibernate,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace
    def begin_stop_dev_box(
        self,
        project_name: str,
        dev_box_name: str,
        user_id: str = "me",
        *,
        hibernate: Optional[bool] = None,
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Stops a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword hibernate: Optional parameter to hibernate the dev box. Default value is None.
        :paramtype hibernate: bool
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._stop_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                user_id=user_id,
                hibernate=hibernate,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _restart_dev_box_initial(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_restart_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace
    def begin_restart_dev_box(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Restarts a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._restart_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                user_id=user_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _repair_dev_box_initial(self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_repair_dev_box_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @distributed_trace
    def begin_repair_dev_box(
        self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Attempts automated repair steps to resolve common problems on a Dev Box. The Dev Box may
        restart during this operation.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._repair_dev_box_initial(
                project_name=project_name,
                dev_box_name=dev_box_name,
                user_id=user_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_customization_groups(
        self,
        project_name: str,
        dev_box_name: str,
        user_id: str = "me",
        *,
        include: Optional[List[str]] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists customization groups on the Dev Box. Listed customization groups exclude task information
        unless specified via the include parameter.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword include: Optional query parameter to specify what properties should be included in the
         response. Default value is None.
        :paramtype include: list[str]
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_customization_groups_request(
                    project_name=project_name,
                    dev_box_name=dev_box_name,
                    user_id=user_id,
                    include=include,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_customization_group(
        self, project_name: str, dev_box_name: str, customization_group_name: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Gets a customization group.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param customization_group_name: A customization group name. Required.
        :type customization_group_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_customization_group_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            customization_group_name=customization_group_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def create_customization_group(
        self,
        project_name: str,
        dev_box_name: str,
        customization_group_name: str,
        body: JSON,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Applies customizations to the Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param customization_group_name: A customization group name. Required.
        :type customization_group_name: str
        :param body: Represents a customization group. Required.
        :type body: JSON
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }

                # response body for status code(s): 200
                response == {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }
        """

    @overload
    def create_customization_group(
        self,
        project_name: str,
        dev_box_name: str,
        customization_group_name: str,
        body: IO,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> JSON:
        """Applies customizations to the Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param customization_group_name: A customization group name. Required.
        :type customization_group_name: str
        :param body: Represents a customization group. Required.
        :type body: IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }
        """

    @distributed_trace
    def create_customization_group(
        self,
        project_name: str,
        dev_box_name: str,
        customization_group_name: str,
        body: Union[JSON, IO],
        user_id: str = "me",
        **kwargs: Any
    ) -> JSON:
        """Applies customizations to the Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param customization_group_name: A customization group name. Required.
        :type customization_group_name: str
        :param body: Represents a customization group. Is either a JSON type or a IO type. Required.
        :type body: JSON or IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }

                # response body for status code(s): 200
                response == {
                    "endTime": "2020-02-20 00:00:00",  # Optional. End time of the customization
                      group.
                    "name": "str",  # Optional. Name of the customization group.
                    "startTime": "2020-02-20 00:00:00",  # Optional. Start time of the
                      customization group.
                    "status": "str",  # Optional. Status of the customization group. Known values
                      are: "NotStarted", "Running", "Succeeded", "Failed", and "ValidationFailed".
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ],
                    "uri": "str"  # Optional. The unique URI of the customization group.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        request = build_dev_boxes_create_customization_group_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            customization_group_name=customization_group_name,
            user_id=user_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_customization_task_log(
        self,
        project_name: str,
        dev_box_name: str,
        customization_group_name: str,
        customization_task_id: str,
        user_id: str = "me",
        **kwargs: Any
    ) -> Iterator[bytes]:
        """Gets the log for a customization task.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param customization_group_name: A customization group name. Required.
        :type customization_group_name: str
        :param customization_task_id: A customization task ID. Required.
        :type customization_task_id: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_customization_task_log_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            customization_group_name=customization_group_name,
            customization_task_id=customization_task_id,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), {})

        return cast(Iterator[bytes], deserialized)

    @distributed_trace
    def get_remote_connection(self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        """Gets RDP Connection info.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "rdpConnectionUrl": "str",  # Optional. Link to open a Remote Desktop
                      session.
                    "webUrl": "str"  # Optional. URL to open a browser based RDP session.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_remote_connection_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_actions(self, project_name: str, dev_box_name: str, user_id: str = "me", **kwargs: Any) -> Iterable[JSON]:
        """Lists actions on a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Stop"
                    "name": "str",  # The name of the action. Required.
                    "sourceId": "str",  # The id of the resource which triggered this action.
                      Required.
                    "sourceType": "str",  # The type of the resource which triggered this action.
                      Required. Known values are: "Pool" and "Schedule".
                    "sourceUri": "str",  # The URI of the resource which triggered this action.
                      Required.
                    "uri": "str",  # The unique URI for the Dev Box action. Required.
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "suspendedUntil": "2020-02-20 00:00:00"  # Optional. The earliest time that
                      the action could occur (UTC).
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_actions_request(
                    project_name=project_name,
                    dev_box_name=dev_box_name,
                    user_id=user_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_action(
        self, project_name: str, dev_box_name: str, action_name: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Gets an action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param action_name: The name of an action that will take place on a Dev Box. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Stop"
                    "name": "str",  # The name of the action. Required.
                    "sourceId": "str",  # The id of the resource which triggered this action.
                      Required.
                    "sourceType": "str",  # The type of the resource which triggered this action.
                      Required. Known values are: "Pool" and "Schedule".
                    "sourceUri": "str",  # The URI of the resource which triggered this action.
                      Required.
                    "uri": "str",  # The unique URI for the Dev Box action. Required.
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "suspendedUntil": "2020-02-20 00:00:00"  # Optional. The earliest time that
                      the action could occur (UTC).
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_action_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            action_name=action_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def skip_action(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, dev_box_name: str, action_name: str, user_id: str = "me", **kwargs: Any
    ) -> None:
        """Skips an occurrence of an action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param action_name: The name of an action that will take place on a Dev Box. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_dev_boxes_skip_action_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            action_name=action_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def delay_action(
        self,
        project_name: str,
        dev_box_name: str,
        action_name: str,
        user_id: str = "me",
        *,
        until: datetime.datetime,
        **kwargs: Any
    ) -> JSON:
        """Delays the occurrence of an action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param action_name: The name of an action that will take place on a Dev Box. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword until: The time to delay the Dev Box action or actions until. Required.
        :paramtype until: ~datetime.datetime
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Stop"
                    "name": "str",  # The name of the action. Required.
                    "sourceId": "str",  # The id of the resource which triggered this action.
                      Required.
                    "sourceType": "str",  # The type of the resource which triggered this action.
                      Required. Known values are: "Pool" and "Schedule".
                    "sourceUri": "str",  # The URI of the resource which triggered this action.
                      Required.
                    "uri": "str",  # The unique URI for the Dev Box action. Required.
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "suspendedUntil": "2020-02-20 00:00:00"  # Optional. The earliest time that
                      the action could occur (UTC).
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_delay_action_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            action_name=action_name,
            user_id=user_id,
            until=until,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def delay_all_actions(
        self, project_name: str, dev_box_name: str, user_id: str = "me", *, until: datetime.datetime, **kwargs: Any
    ) -> Iterable[JSON]:
        """Delays all actions.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword until: The time to delay the Dev Box action or actions until. Required.
        :paramtype until: ~datetime.datetime
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # The name of the action. Required.
                    "result": "str",  # The result of the delay operation on this action.
                      Required. Known values are: "Succeeded" and "Failed".
                    "uri": "str",  # The unique URI of the action. Required.
                    "action": {
                        "actionType": "str",  # The action that will be taken. Required.
                          "Stop"
                        "name": "str",  # The name of the action. Required.
                        "sourceId": "str",  # The id of the resource which triggered this
                          action. Required.
                        "sourceType": "str",  # The type of the resource which triggered this
                          action. Required. Known values are: "Pool" and "Schedule".
                        "sourceUri": "str",  # The URI of the resource which triggered this
                          action. Required.
                        "uri": "str",  # The unique URI for the Dev Box action. Required.
                        "next": {
                            "scheduledTime": "2020-02-20 00:00:00"  # The time the action
                              will be triggered (UTC). Required.
                        },
                        "suspendedUntil": "2020-02-20 00:00:00"  # Optional. The earliest
                          time that the action could occur (UTC).
                    },
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    }
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_delay_all_actions_request(
                    project_name=project_name,
                    dev_box_name=dev_box_name,
                    user_id=user_id,
                    until=until,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_operations(
        self,
        project_name: str,
        dev_box_name: str,
        user_id: str = "me",
        *,
        top: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists operations on the Dev Box which have occurred within the past 90 days.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "Repair":
                dev_box_operation = {
                    "kind": "Repair",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "result": {
                        "code": "str",  # Optional. The result code associated with the
                          repair operation.
                        "message": "str",  # Optional. The result message associated with the
                          repair operation.
                        "repairOutcome": "str"  # Optional. The outcome of the repair
                          operation. Known values are: "FixApplied", "IssuesDetected", and
                          "NoIssuesDetected".
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Restart":
                dev_box_operation = {
                    "kind": "Restart",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Start":
                dev_box_operation = {
                    "kind": "Start",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Stop":
                dev_box_operation = {
                    "kind": "Stop",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # response body for status code(s): 200
                response == dev_box_operation
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_dev_boxes_list_operations_request(
                    project_name=project_name,
                    dev_box_name=dev_box_name,
                    user_id=user_id,
                    top=top,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_operation(
        self, project_name: str, dev_box_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Gets an operation on a Dev Box.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param dev_box_name: The name of a Dev Box. Required.
        :type dev_box_name: str
        :param operation_id: The id of the operation on a Dev Box. Required.
        :type operation_id: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "Repair":
                dev_box_operation = {
                    "kind": "Repair",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "result": {
                        "code": "str",  # Optional. The result code associated with the
                          repair operation.
                        "message": "str",  # Optional. The result message associated with the
                          repair operation.
                        "repairOutcome": "str"  # Optional. The outcome of the repair
                          operation. Known values are: "FixApplied", "IssuesDetected", and
                          "NoIssuesDetected".
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Restart":
                dev_box_operation = {
                    "kind": "Restart",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Start":
                dev_box_operation = {
                    "kind": "Start",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Stop":
                dev_box_operation = {
                    "kind": "Stop",
                    "operationId": "str",  # Unique identifier for the Dev Box operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the Dev Box operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # response body for status code(s): 200
                response == dev_box_operation
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_dev_boxes_get_operation_request(
            project_name=project_name,
            dev_box_name=dev_box_name,
            operation_id=operation_id,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)


class ProjectsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.devcenter.DevCenterClient`'s
        :attr:`projects` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_customization_task_definitions(
        self, project_name: str, *, filter: Optional[str] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all customization tasks available to the project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # Name of the catalog that the task belongs to.
                      Required.
                    "name": "str",  # Full name of the task: {catalogName}/{taskName}. Required.
                    "description": "str",  # Optional. Description of the task.
                    "parameters": {
                        "str": {
                            "type": "str",  # Type of the parameter. Required. Known
                              values are: "string", "number", and "boolean".
                            "allowed": [
                                "str"  # Optional. Allowed values for the parameter.
                            ],
                            "default": "str",  # Optional. Default value for the
                              parameter.
                            "description": "str",  # Optional. Description of the
                              parameter.
                            "required": bool  # Optional. Whether or not the parameter is
                              required.
                        }
                    },
                    "uri": "str"  # Optional. The unique URI of the customization task.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_projects_list_customization_task_definitions_request(
                    project_name=project_name,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_customization_task_definition(
        self,
        project_name: str,
        catalog_name: str,
        task_name: str,
        *,
        top: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> JSON:
        """Gets a customization task.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param catalog_name: The name of the catalog. Required.
        :type catalog_name: str
        :param task_name: A customization task name. Required.
        :type task_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # Name of the catalog that the task belongs to.
                      Required.
                    "name": "str",  # Full name of the task: {catalogName}/{taskName}. Required.
                    "description": "str",  # Optional. Description of the task.
                    "parameters": {
                        "str": {
                            "type": "str",  # Type of the parameter. Required. Known
                              values are: "string", "number", and "boolean".
                            "allowed": [
                                "str"  # Optional. Allowed values for the parameter.
                            ],
                            "default": "str",  # Optional. Default value for the
                              parameter.
                            "description": "str",  # Optional. Description of the
                              parameter.
                            "required": bool  # Optional. Whether or not the parameter is
                              required.
                        }
                    },
                    "uri": "str"  # Optional. The unique URI of the customization task.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_projects_get_customization_task_definition_request(
            project_name=project_name,
            catalog_name=catalog_name,
            task_name=task_name,
            top=top,
            filter=filter,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _validate_customization_tasks_initial(self, project_name: str, body: Union[JSON, IO], **kwargs: Any) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        request = build_projects_validate_customization_tasks_request(
            project_name=project_name,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @overload
    def begin_validate_customization_tasks(
        self, project_name: str, body: JSON, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Validates a list of customization tasks.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param body: Customization tasks to validate. Required.
        :type body: JSON
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ]
                }

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "result": {
                        "validationResult": "str",  # Outcome of validation. Required. Known
                          values are: "Succeeded" and "Failed".
                        "errors": [
                            {
                                "details": [
                                    {
                                        "code": "str",  # An identifier for
                                          the error. Codes are invariant and are intended to be
                                          consumed programmatically. Required.
                                        "message": "str"  # A message
                                          describing the error, intended to be suitable for display in
                                          a user interface. Required.
                                    }
                                ],
                                "target": {
                                    "name": "str",  # Name of the task. Required.
                                    "displayName": "str",  # Optional. Display
                                      name to help differentiate multiple instances of the same task.
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional. End time of the task.
                                    "id": "str",  # Optional. ID of the task
                                      instance.
                                    "logUri": "str",  # Optional. The unique URI
                                      for retrieving the task logs.
                                    "parameters": {
                                        "str": "str"  # Optional. Parameters
                                          for the task.
                                    },
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional. Start time of the task.
                                    "status": "str"  # Optional. Status of the
                                      task. Known values are: "NotStarted", "Running", "Succeeded",
                                      "FailedValidation", "Skipped", "TimedOut", and "Failed".
                                }
                            }
                        ]
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """

    @overload
    def begin_validate_customization_tasks(
        self, project_name: str, body: IO, *, content_type: str = "application/json", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Validates a list of customization tasks.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param body: Customization tasks to validate. Required.
        :type body: IO
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "result": {
                        "validationResult": "str",  # Outcome of validation. Required. Known
                          values are: "Succeeded" and "Failed".
                        "errors": [
                            {
                                "details": [
                                    {
                                        "code": "str",  # An identifier for
                                          the error. Codes are invariant and are intended to be
                                          consumed programmatically. Required.
                                        "message": "str"  # A message
                                          describing the error, intended to be suitable for display in
                                          a user interface. Required.
                                    }
                                ],
                                "target": {
                                    "name": "str",  # Name of the task. Required.
                                    "displayName": "str",  # Optional. Display
                                      name to help differentiate multiple instances of the same task.
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional. End time of the task.
                                    "id": "str",  # Optional. ID of the task
                                      instance.
                                    "logUri": "str",  # Optional. The unique URI
                                      for retrieving the task logs.
                                    "parameters": {
                                        "str": "str"  # Optional. Parameters
                                          for the task.
                                    },
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional. Start time of the task.
                                    "status": "str"  # Optional. Status of the
                                      task. Known values are: "NotStarted", "Running", "Succeeded",
                                      "FailedValidation", "Skipped", "TimedOut", and "Failed".
                                }
                            }
                        ]
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """

    @distributed_trace
    def begin_validate_customization_tasks(
        self, project_name: str, body: Union[JSON, IO], **kwargs: Any
    ) -> LROPoller[JSON]:
        """Validates a list of customization tasks.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param body: Customization tasks to validate. Is either a JSON type or a IO type. Required.
        :type body: JSON or IO
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "tasks": [
                        {
                            "name": "str",  # Name of the task. Required.
                            "displayName": "str",  # Optional. Display name to help
                              differentiate multiple instances of the same task.
                            "endTime": "2020-02-20 00:00:00",  # Optional. End time of
                              the task.
                            "id": "str",  # Optional. ID of the task instance.
                            "logUri": "str",  # Optional. The unique URI for retrieving
                              the task logs.
                            "parameters": {
                                "str": "str"  # Optional. Parameters for the task.
                            },
                            "startTime": "2020-02-20 00:00:00",  # Optional. Start time
                              of the task.
                            "status": "str"  # Optional. Status of the task. Known values
                              are: "NotStarted", "Running", "Succeeded", "FailedValidation", "Skipped",
                              "TimedOut", and "Failed".
                        }
                    ]
                }

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "result": {
                        "validationResult": "str",  # Outcome of validation. Required. Known
                          values are: "Succeeded" and "Failed".
                        "errors": [
                            {
                                "details": [
                                    {
                                        "code": "str",  # An identifier for
                                          the error. Codes are invariant and are intended to be
                                          consumed programmatically. Required.
                                        "message": "str"  # A message
                                          describing the error, intended to be suitable for display in
                                          a user interface. Required.
                                    }
                                ],
                                "target": {
                                    "name": "str",  # Name of the task. Required.
                                    "displayName": "str",  # Optional. Display
                                      name to help differentiate multiple instances of the same task.
                                    "endTime": "2020-02-20 00:00:00",  #
                                      Optional. End time of the task.
                                    "id": "str",  # Optional. ID of the task
                                      instance.
                                    "logUri": "str",  # Optional. The unique URI
                                      for retrieving the task logs.
                                    "parameters": {
                                        "str": "str"  # Optional. Parameters
                                          for the task.
                                    },
                                    "startTime": "2020-02-20 00:00:00",  #
                                      Optional. Start time of the task.
                                    "status": "str"  # Optional. Status of the
                                      task. Known values are: "NotStarted", "Running", "Succeeded",
                                      "FailedValidation", "Skipped", "TimedOut", and "Failed".
                                }
                            }
                        ]
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._validate_customization_tasks_initial(
                project_name=project_name,
                body=body,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response = pipeline_response.http_response
            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, {})  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "operation-location"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore


class DeploymentEnvironmentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.devcenter.DevCenterClient`'s
        :attr:`deployment_environments` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @distributed_trace
    def list_all_environments(self, project_name: str, *, top: Optional[int] = None, **kwargs: Any) -> Iterable[JSON]:
        """Lists the environments for a project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_all_environments_request(
                    project_name=project_name,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_environments(
        self, project_name: str, user_id: str = "me", *, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists the environments for a project and user.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_environments_request(
                    project_name=project_name,
                    user_id=user_id,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_environment(self, project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        """Gets an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_deployment_environments_get_environment_request(
            project_name=project_name,
            environment_name=environment_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    def _create_or_update_environment_initial(
        self, project_name: str, environment_name: str, body: Union[JSON, IO], user_id: str = "me", **kwargs: Any
    ) -> JSON:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        request = build_deployment_environments_create_or_update_environment_request(
            project_name=project_name,
            environment_name=environment_name,
            user_id=user_id,
            content_type=content_type,
            api_version=self._config.api_version,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [201]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        response_headers = {}
        response_headers["Operation-Location"] = self._deserialize("str", response.headers.get("Operation-Location"))

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), response_headers)

        return cast(JSON, deserialized)

    @overload
    def begin_create_or_update_environment(
        self,
        project_name: str,
        environment_name: str,
        body: JSON,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Represents an environment. Required.
        :type body: JSON
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }

                # response body for status code(s): 201
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """

    @overload
    def begin_create_or_update_environment(
        self,
        project_name: str,
        environment_name: str,
        body: IO,
        user_id: str = "me",
        *,
        content_type: str = "application/json",
        **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Represents an environment. Required.
        :type body: IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/json".
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 201
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """

    @distributed_trace
    def begin_create_or_update_environment(
        self, project_name: str, environment_name: str, body: Union[JSON, IO], user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Creates or updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Represents an environment. Is either a JSON type or a IO type. Required.
        :type body: JSON or IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Known values are: 'application/json'.
         Default value is None.
        :paramtype content_type: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }

                # response body for status code(s): 201
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """
        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._create_or_update_environment_initial(
                project_name=project_name,
                environment_name=environment_name,
                body=body,
                user_id=user_id,
                content_type=content_type,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod,
                LROBasePolling(
                    lro_delay,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=path_format_arguments,
                    **kwargs
                ),
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    def _delete_environment_initial(
        self, project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
    ) -> Optional[JSON]:
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Optional[JSON]] = kwargs.pop("cls", None)

        request = build_deployment_environments_delete_environment_request(
            project_name=project_name,
            environment_name=environment_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [202, 204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = None
        response_headers = {}
        if response.status_code == 202:
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None

        if cls:
            return cls(pipeline_response, deserialized, response_headers)

        return deserialized

    @distributed_trace
    def begin_delete_environment(
        self, project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
    ) -> LROPoller[JSON]:
        """Deletes an environment and all its associated resources.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword str continuation_token: A continuation token to restart a poller from a saved state.
        :keyword polling: By default, your polling method will be LROBasePolling. Pass in False for
         this operation to not poll, or pass in your own initialized polling object for a personal
         polling strategy.
        :paramtype polling: bool or ~azure.core.polling.PollingMethod
        :keyword int polling_interval: Default waiting time between two polls for LRO operations if no
         Retry-After header is present.
        :return: An instance of LROPoller that returns JSON object
        :rtype: ~azure.core.polling.LROPoller[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 202
                response == {
                    "status": "str",  # Provisioning state of the resource. Required.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The end time of the operation.
                    "error": {
                        "code": "str",  # Optional. The error code.
                        "message": "str"  # Optional. The error message.
                    },
                    "id": "str",  # Optional. Fully qualified ID for the operation status.
                    "name": "str",  # Optional. The operation id name.
                    "percentComplete": 0.0,  # Optional. Percent of the operation that is
                      complete.
                    "properties": {},  # Optional. Custom operation properties, populated only
                      for a successful operation.
                    "resourceId": "str",  # Optional. The id of the resource.
                    "startTime": "2020-02-20 00:00:00"  # Optional. The start time of the
                      operation.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)
        polling: Union[bool, PollingMethod] = kwargs.pop("polling", True)
        lro_delay = kwargs.pop("polling_interval", self._config.polling_interval)
        cont_token: Optional[str] = kwargs.pop("continuation_token", None)
        if cont_token is None:
            raw_result = self._delete_environment_initial(
                project_name=project_name,
                environment_name=environment_name,
                user_id=user_id,
                cls=lambda x, y, z: x,
                headers=_headers,
                params=_params,
                **kwargs
            )
        kwargs.pop("error_map", None)

        def get_long_running_output(pipeline_response):
            response_headers = {}
            response = pipeline_response.http_response
            response_headers["Operation-Location"] = self._deserialize(
                "str", response.headers.get("Operation-Location")
            )

            if response.content:
                deserialized = response.json()
            else:
                deserialized = None
            if cls:
                return cls(pipeline_response, deserialized, response_headers)  # type: ignore
            return deserialized

        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }

        if polling is True:
            polling_method: PollingMethod = cast(
                PollingMethod, LROBasePolling(lro_delay, path_format_arguments=path_format_arguments, **kwargs)
            )
        elif polling is False:
            polling_method = cast(PollingMethod, NoPolling())
        else:
            polling_method = polling
        if cont_token:
            return LROPoller.from_continuation_token(
                polling_method=polling_method,
                continuation_token=cont_token,
                client=self._client,
                deserialization_callback=get_long_running_output,
            )
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)  # type: ignore

    @distributed_trace
    def list_catalogs(self, project_name: str, *, top: Optional[int] = None, **kwargs: Any) -> Iterable[JSON]:
        """Lists all of the catalogs available for a project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # Name of the catalog. Required.
                    "uri": "str"  # The unique URI of the catalog. Required.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_catalogs_request(
                    project_name=project_name,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_catalog(self, project_name: str, catalog_name: str, **kwargs: Any) -> JSON:
        """Gets the specified catalog within the project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param catalog_name: The name of the catalog. Required.
        :type catalog_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "name": "str",  # Name of the catalog. Required.
                    "uri": "str"  # The unique URI of the catalog. Required.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_deployment_environments_get_catalog_request(
            project_name=project_name,
            catalog_name=catalog_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_environment_definitions(
        self, project_name: str, *, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all environment definitions available for a project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # Name of the catalog. Required.
                    "id": "str",  # The ID of the environment definition. Required.
                    "name": "str",  # Name of the environment definition. Required.
                    "uri": "str",  # The unique URI of the environment definition. Required.
                    "description": "str",  # Optional. A short description of the environment
                      definition.
                    "parameters": [
                        {
                            "id": "str",  # Unique ID of the parameter. Required.
                            "required": bool,  # Whether or not this parameter is
                              required. Required.
                            "type": "str",  # A string of one of the basic JSON types
                              (number, integer, array, object, boolean, string). Required. Known values
                              are: "array", "boolean", "integer", "number", "object", and "string".
                            "allowed": [
                                "str"  # Optional. An array of allowed values.
                            ],
                            "default": "str",  # Optional. Default value of the
                              parameter.
                            "description": "str",  # Optional. Description of the
                              parameter.
                            "name": "str",  # Optional. Display name of the parameter.
                            "readOnly": bool  # Optional. Whether or not this parameter
                              is read-only.  If true, default should have a value.
                        }
                    ],
                    "parametersSchema": "str",  # Optional. JSON schema defining the parameters
                      object passed to an environment.
                    "templatePath": "str"  # Optional. Path to the Environment Definition
                      entrypoint file.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_environment_definitions_request(
                    project_name=project_name,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def list_environment_definitions_by_catalog(
        self, project_name: str, catalog_name: str, *, top: Optional[int] = None, **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists all environment definitions available within a catalog.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param catalog_name: The name of the catalog. Required.
        :type catalog_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # Name of the catalog. Required.
                    "id": "str",  # The ID of the environment definition. Required.
                    "name": "str",  # Name of the environment definition. Required.
                    "uri": "str",  # The unique URI of the environment definition. Required.
                    "description": "str",  # Optional. A short description of the environment
                      definition.
                    "parameters": [
                        {
                            "id": "str",  # Unique ID of the parameter. Required.
                            "required": bool,  # Whether or not this parameter is
                              required. Required.
                            "type": "str",  # A string of one of the basic JSON types
                              (number, integer, array, object, boolean, string). Required. Known values
                              are: "array", "boolean", "integer", "number", "object", and "string".
                            "allowed": [
                                "str"  # Optional. An array of allowed values.
                            ],
                            "default": "str",  # Optional. Default value of the
                              parameter.
                            "description": "str",  # Optional. Description of the
                              parameter.
                            "name": "str",  # Optional. Display name of the parameter.
                            "readOnly": bool  # Optional. Whether or not this parameter
                              is read-only.  If true, default should have a value.
                        }
                    ],
                    "parametersSchema": "str",  # Optional. JSON schema defining the parameters
                      object passed to an environment.
                    "templatePath": "str"  # Optional. Path to the Environment Definition
                      entrypoint file.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_environment_definitions_by_catalog_request(
                    project_name=project_name,
                    catalog_name=catalog_name,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_environment_definition(
        self, project_name: str, catalog_name: str, definition_name: str, **kwargs: Any
    ) -> JSON:
        """Get an environment definition from a catalog.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param catalog_name: The name of the catalog. Required.
        :type catalog_name: str
        :param definition_name: The name of the environment definition. Required.
        :type definition_name: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # Name of the catalog. Required.
                    "id": "str",  # The ID of the environment definition. Required.
                    "name": "str",  # Name of the environment definition. Required.
                    "uri": "str",  # The unique URI of the environment definition. Required.
                    "description": "str",  # Optional. A short description of the environment
                      definition.
                    "parameters": [
                        {
                            "id": "str",  # Unique ID of the parameter. Required.
                            "required": bool,  # Whether or not this parameter is
                              required. Required.
                            "type": "str",  # A string of one of the basic JSON types
                              (number, integer, array, object, boolean, string). Required. Known values
                              are: "array", "boolean", "integer", "number", "object", and "string".
                            "allowed": [
                                "str"  # Optional. An array of allowed values.
                            ],
                            "default": "str",  # Optional. Default value of the
                              parameter.
                            "description": "str",  # Optional. Description of the
                              parameter.
                            "name": "str",  # Optional. Display name of the parameter.
                            "readOnly": bool  # Optional. Whether or not this parameter
                              is read-only.  If true, default should have a value.
                        }
                    ],
                    "parametersSchema": "str",  # Optional. JSON schema defining the parameters
                      object passed to an environment.
                    "templatePath": "str"  # Optional. Path to the Environment Definition
                      entrypoint file.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_deployment_environments_get_environment_definition_request(
            project_name=project_name,
            catalog_name=catalog_name,
            definition_name=definition_name,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_environment_types(self, project_name: str, *, top: Optional[int] = None, **kwargs: Any) -> Iterable[JSON]:
        """Lists all environment types configured for a project.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "deploymentTargetId": "str",  # The ID of a subscription or management group
                      that the environment type will be mapped to. The environment's resources will be
                      deployed into this subscription or management group. Required.
                    "name": "str",  # Name of the environment type. Required.
                    "status": "str",  # Indicates whether this environment type is enabled for
                      use in this project. Required. Known values are: "Enabled" and "Disabled".
                    "uri": "str",  # The unique URI of the environment type. Required.
                    "displayName": "str"  # Optional. Display name of the environment type.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_deployment_environments_list_environment_types_request(
                    project_name=project_name,
                    top=top,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)


class EnvironmentsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.developer.devcenter.DevCenterClient`'s
        :attr:`environments` attribute.
    """

    def __init__(self, *args, **kwargs):
        input_args = list(args)
        self._client = input_args.pop(0) if input_args else kwargs.pop("client")
        self._config = input_args.pop(0) if input_args else kwargs.pop("config")
        self._serialize = input_args.pop(0) if input_args else kwargs.pop("serializer")
        self._deserialize = input_args.pop(0) if input_args else kwargs.pop("deserializer")

    @overload
    def patch_environment(
        self,
        project_name: str,
        environment_name: str,
        body: JSON,
        user_id: str = "me",
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Updatable environment properties. Required.
        :type body: JSON
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for JSON body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """

    @overload
    def patch_environment(
        self,
        project_name: str,
        environment_name: str,
        body: IO,
        user_id: str = "me",
        *,
        content_type: str = "application/merge-patch+json",
        **kwargs: Any
    ) -> JSON:
        """Partially updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Updatable environment properties. Required.
        :type body: IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Content type parameter for binary body.
         Default value is "application/merge-patch+json".
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """

    @distributed_trace
    def patch_environment(
        self, project_name: str, environment_name: str, body: Union[JSON, IO], user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Partially updates an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param body: Updatable environment properties. Is either a JSON type or a IO type. Required.
        :type body: JSON or IO
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword content_type: Body Parameter content-type. Known values are:
         'application/merge-patch+json'. Default value is None.
        :paramtype content_type: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # JSON input template you can fill out and use as your body input.
                body = {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }

                # response body for status code(s): 200
                response == {
                    "catalogName": "str",  # The name of the catalog. Cannot be updated after
                      creation. Required.
                    "environmentDefinitionName": "str",  # The name of the environment
                      definition. Cannot be updated after creation. Required.
                    "environmentType": "str",  # The name of the environment type. Cannot be
                      updated after creation. Required.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "expirationDate": "2020-02-20 00:00:00",  # Optional. The time the expiration
                      date will be triggered (UTC), after which the environment and associated
                      resources will be deleted.
                    "name": "str",  # Optional. Environment name.
                    "parameters": {},  # Optional. Parameters object for the environment. Can
                      only be updated via create or replace.
                    "provisioningState": "str",  # Optional. The provisioning state of the
                      environment.
                    "resourceGroupId": "str",  # Optional. The identifier of the resource group
                      containing the environment's resources.
                    "uri": "str",  # Optional. The unique URI of the environment.
                    "user": "str"  # Optional. The AAD object id of the owner of this
                      Environment.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = case_insensitive_dict(kwargs.pop("headers", {}) or {})
        _params = kwargs.pop("params", {}) or {}

        content_type: Optional[str] = kwargs.pop("content_type", _headers.pop("Content-Type", None))
        cls: ClsType[JSON] = kwargs.pop("cls", None)

        content_type = content_type or "application/merge-patch+json"
        _json = None
        _content = None
        if isinstance(body, (IOBase, bytes)):
            _content = body
        else:
            _json = body

        request = build_environments_patch_environment_request(
            project_name=project_name,
            environment_name=environment_name,
            user_id=user_id,
            content_type=content_type,
            json=_json,
            content=_content,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_outputs(self, project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any) -> JSON:
        """Gets Outputs from the environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "outputs": {
                        "str": {
                            "sensitive": bool,  # Optional. Indicates if the value is
                              sensitive.
                            "type": "str",  # Optional. Type of the output value. Known
                              values are: "array", "boolean", "number", "object", and "string".
                            "value": {}  # Optional. The output value.
                        }
                    }
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_environments_get_outputs_request(
            project_name=project_name,
            environment_name=environment_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def list_operations(
        self,
        project_name: str,
        environment_name: str,
        user_id: str = "me",
        *,
        top: Optional[int] = None,
        filter: Optional[str] = None,
        **kwargs: Any
    ) -> Iterable[JSON]:
        """Lists operations on the environment which have occurred within the past 90 days.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword top: The maximum number of resources to return from the operation. Example: 'top=10'.
         Default value is None.
        :paramtype top: int
        :keyword filter: An OData filter clause to apply to the operation. Default value is None.
        :paramtype filter: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "Delete":
                environment_operation = {
                    "kind": "Delete",
                    "operationId": "str",  # Unique identifier for the environment operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the environment operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "environmentParameters": {},  # Optional. Parameters object for the
                      environment at the time of the operation.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Deploy":
                environment_operation = {
                    "kind": "Deploy",
                    "operationId": "str",  # Unique identifier for the environment operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the environment operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "environmentParameters": {},  # Optional. Parameters object for the
                      environment at the time of the operation.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # response body for status code(s): 200
                response == environment_operation
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_environments_list_operations_request(
                    project_name=project_name,
                    environment_name=environment_name,
                    user_id=user_id,
                    top=top,
                    filter=filter,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_operation(
        self, project_name: str, environment_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Gets an environment action result.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param operation_id: The id of the operation on an environment. Required.
        :type operation_id: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python
                # The response is polymorphic. The following are possible polymorphic responses based
                  off discriminator "kind":

                # JSON input template for discriminator value "Delete":
                environment_operation = {
                    "kind": "Delete",
                    "operationId": "str",  # Unique identifier for the environment operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the environment operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "environmentParameters": {},  # Optional. Parameters object for the
                      environment at the time of the operation.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # JSON input template for discriminator value "Deploy":
                environment_operation = {
                    "kind": "Deploy",
                    "operationId": "str",  # Unique identifier for the environment operation.
                      Required.
                    "status": "str",  # The operation status. Required. Known values are:
                      "NotStarted", "Running", "Succeeded", "Canceled", and "Failed".
                    "uri": "str",  # The unique URI for the environment operation. Required.
                    "createdByObjectId": "str",  # Optional. The object ID of the actor which
                      initiated the operation.
                    "endTime": "2020-02-20 00:00:00",  # Optional. The time the operation
                      finished.
                    "environmentParameters": {},  # Optional. Parameters object for the
                      environment at the time of the operation.
                    "error": {
                        "code": "str",  # An identifier for the error. Codes are invariant
                          and are intended to be consumed programmatically. Required.
                        "message": "str",  # A message describing the error, intended to be
                          suitable for display in a user interface. Required.
                        "details": [
                            ...
                        ],
                        "target": "str"  # Optional. The target of the particular error. For
                          example, the name of the property in error.
                    },
                    "startTime": "2020-02-20 00:00:00"  # Optional. The time the operation
                      started.
                }

                # response body for status code(s): 200
                response == environment_operation
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_environments_get_operation_request(
            project_name=project_name,
            environment_name=environment_name,
            operation_id=operation_id,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def get_logs_by_operation(
        self, project_name: str, environment_name: str, operation_id: str, user_id: str = "me", **kwargs: Any
    ) -> Iterator[bytes]:
        """Gets the logs for an operation on an environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param operation_id: The id of the operation on an environment. Required.
        :type operation_id: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: Iterator of the response bytes
        :rtype: Iterator[bytes]
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[Iterator[bytes]] = kwargs.pop("cls", None)

        request = build_environments_get_logs_by_operation_request(
            project_name=project_name,
            environment_name=environment_name,
            operation_id=operation_id,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = True
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        deserialized = response.iter_bytes()

        if cls:
            return cls(pipeline_response, cast(Iterator[bytes], deserialized), {})

        return cast(Iterator[bytes], deserialized)

    @distributed_trace
    def list_actions(
        self, project_name: str, environment_name: str, user_id: str = "me", **kwargs: Any
    ) -> Iterable[JSON]:
        """Get all scheduled actions for a user within an  environment.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: An iterator like instance of JSON object
        :rtype: ~azure.core.paging.ItemPaged[JSON]
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Delete"
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. time the object was
                      last modified.
                    "lastModifiedBy": "str",  # Optional. Object Id of the user who last modified
                      the action.
                    "name": "str",  # Optional. Uniquely identifies the action.
                    "uri": "str"  # Optional. Uri of the action resource.
                }
        """
        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        def prepare_request(next_link=None):
            if not next_link:

                request = build_environments_list_actions_request(
                    project_name=project_name,
                    environment_name=environment_name,
                    user_id=user_id,
                    api_version=self._config.api_version,
                    headers=_headers,
                    params=_params,
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                # make call to next link with the client's api-version
                _parsed_next_link = urllib.parse.urlparse(next_link)
                _next_request_params = case_insensitive_dict(
                    {
                        key: [urllib.parse.quote(v) for v in value]
                        for key, value in urllib.parse.parse_qs(_parsed_next_link.query).items()
                    }
                )
                _next_request_params["api-version"] = self._config.api_version
                request = HttpRequest(
                    "GET", urllib.parse.urljoin(next_link, _parsed_next_link.path), params=_next_request_params
                )
                path_format_arguments = {
                    "endpoint": self._serialize.url(
                        "self._config.endpoint", self._config.endpoint, "str", skip_quote=True
                    ),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            return request

        def extract_data(pipeline_response):
            deserialized = pipeline_response.http_response.json()
            list_of_elem = deserialized["value"]
            if cls:
                list_of_elem = cls(list_of_elem)  # type: ignore
            return deserialized.get("nextLink") or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            _stream = False
            pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
                request, stream=_stream, **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                if _stream:
                    response.read()  # Load the body in memory and close the socket
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response)

            return pipeline_response

        return ItemPaged(get_next, extract_data)

    @distributed_trace
    def get_action(
        self, project_name: str, environment_name: str, action_name: str, user_id: str = "me", **kwargs: Any
    ) -> JSON:
        """Retrieve a specific environment action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param action_name: The name of an action that will take place on an Environment. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Delete"
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. time the object was
                      last modified.
                    "lastModifiedBy": "str",  # Optional. Object Id of the user who last modified
                      the action.
                    "name": "str",  # Optional. Uniquely identifies the action.
                    "uri": "str"  # Optional. Uri of the action resource.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_environments_get_action_request(
            project_name=project_name,
            environment_name=environment_name,
            action_name=action_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)

    @distributed_trace
    def skip_action(  # pylint: disable=inconsistent-return-statements
        self, project_name: str, environment_name: str, action_name: str, user_id: str = "me", **kwargs: Any
    ) -> None:
        """Skips an occurrence of an action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param action_name: The name of an action that will take place on an Environment. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :return: None
        :rtype: None
        :raises ~azure.core.exceptions.HttpResponseError:
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[None] = kwargs.pop("cls", None)

        request = build_environments_skip_action_request(
            project_name=project_name,
            environment_name=environment_name,
            action_name=action_name,
            user_id=user_id,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [204]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if cls:
            return cls(pipeline_response, None, {})

    @distributed_trace
    def delay_action(
        self,
        project_name: str,
        environment_name: str,
        action_name: str,
        user_id: str = "me",
        *,
        until: datetime.datetime,
        **kwargs: Any
    ) -> JSON:
        """Delays the occurrence of an action.

        :param project_name: The DevCenter Project upon which to execute operations. Required.
        :type project_name: str
        :param environment_name: The name of the environment. Required.
        :type environment_name: str
        :param action_name: The name of an action that will take place on an Environment. Required.
        :type action_name: str
        :param user_id: The AAD object id of the user. If value is 'me', the identity is taken from the
         authentication context. Default value is "me".
        :type user_id: str
        :keyword until: The time to delay the Environment action until. Required.
        :paramtype until: ~datetime.datetime
        :return: JSON object
        :rtype: JSON
        :raises ~azure.core.exceptions.HttpResponseError:

        Example:
            .. code-block:: python

                # response body for status code(s): 200
                response == {
                    "actionType": "str",  # The action that will be taken. Required. "Delete"
                    "next": {
                        "scheduledTime": "2020-02-20 00:00:00"  # The time the action will be
                          triggered (UTC). Required.
                    },
                    "lastModifiedAt": "2020-02-20 00:00:00",  # Optional. time the object was
                      last modified.
                    "lastModifiedBy": "str",  # Optional. Object Id of the user who last modified
                      the action.
                    "name": "str",  # Optional. Uniquely identifies the action.
                    "uri": "str"  # Optional. Uri of the action resource.
                }
        """
        error_map = {
            401: ClientAuthenticationError,
            404: ResourceNotFoundError,
            409: ResourceExistsError,
            304: ResourceNotModifiedError,
        }
        error_map.update(kwargs.pop("error_map", {}) or {})

        _headers = kwargs.pop("headers", {}) or {}
        _params = kwargs.pop("params", {}) or {}

        cls: ClsType[JSON] = kwargs.pop("cls", None)

        request = build_environments_delay_action_request(
            project_name=project_name,
            environment_name=environment_name,
            action_name=action_name,
            user_id=user_id,
            until=until,
            api_version=self._config.api_version,
            headers=_headers,
            params=_params,
        )
        path_format_arguments = {
            "endpoint": self._serialize.url("self._config.endpoint", self._config.endpoint, "str", skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        _stream = False
        pipeline_response: PipelineResponse = self._client._pipeline.run(  # pylint: disable=protected-access
            request, stream=_stream, **kwargs
        )

        response = pipeline_response.http_response

        if response.status_code not in [200]:
            if _stream:
                response.read()  # Load the body in memory and close the socket
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            raise HttpResponseError(response=response)

        if response.content:
            deserialized = response.json()
        else:
            deserialized = None

        if cls:
            return cls(pipeline_response, cast(JSON, deserialized), {})

        return cast(JSON, deserialized)
