# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from azure.cli.core.util import send_raw_request
import json

original_aad_endpoint = ''

def get_endpoint(cli_ctx, dev_center_name, project_name=None):
    global original_aad_endpoint
    if cli_ctx.cloud.endpoints.active_directory_resource_id == "https://devcenter.azure.com":
        cli_ctx.cloud.endpoints.active_directory_resource_id = original_aad_endpoint
    management_hostname = cli_ctx.cloud.endpoints.resource_manager.strip('/')
    api_version = "2021-03-01"
    query = ""
    if project_name is None:
        query = f""" Resources |where type =~'Microsoft.devcenter/projects' 
        | extend devCenterArr = split(properties.devCenterId, '/') 
        | extend devCenterName = devCenterArr[array_length(devCenterArr) -1] 
        | where devCenterName =~ '{dev_center_name}'
        | top 1 by name
        | extend devCenterUri = properties.devCenterUri
        | project name,devCenterUri"""
    else:
        query = f""" Resources |where type =~'Microsoft.devcenter/projects'
        | where name =~ '{project_name}'  
        | extend devCenterArr = split(properties.devCenterId, '/') 
        | extend devCenterName = devCenterArr[array_length(devCenterArr) -1 ]
        | where devCenterName =~ '{dev_center_name}'
        | top 1 by name
        | extend devCenterUri = properties.devCenterUri
        | project name,devCenterUri """ 
    content = {"query": query}
    request_url = f"{management_hostname}/providers/Microsoft.ResourceGraph/resources?api-version={api_version}"

    response = send_raw_request(cli_ctx, "POST", request_url, body=json.dumps(content))
    return response.json()


def cf_devcenter_dataplane(cli_ctx, dev_center, project_name=None, *_):

    from azure.cli.core.commands.client_factory import get_mgmt_service_client
    from azext_devcenter.vendored_sdks.devcenter_dataplane import (
        DevCenterDataplaneClient,
    )
    global original_aad_endpoint
    if len(original_aad_endpoint) == 0:
        original_aad_endpoint = cli_ctx.cloud.endpoints.active_directory_resource_id
    dev_center_name = ''
    if type(dev_center) is dict:
        dev_center_name = dev_center['dev_center']
    else:
        dev_center_name = dev_center
    get_endpoint(cli_ctx, dev_center_name, project_name)
    cli_ctx.cloud.endpoints.active_directory_resource_id = "https://devcenter.azure.com"

    return get_mgmt_service_client(
        cli_ctx,
        DevCenterDataplaneClient,
        subscription_bound=False,
        base_url_bound=False,
        endpoint="https://72f988bf-86f1-41af-91ab-2d7cd011db47-amlim.devcenter.azure.com/",
        project_name="amlim-project"
    )

def cf_project_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).project


def cf_pool_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).pool


def cf_schedule_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).schedule


def cf_dev_box_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).dev_box


def cf_environment_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).environments


def cf_artifact_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).artifacts


def cf_catalog_item_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).catalog_items


def cf_catalog_item_version_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).catalog_item_versions


def cf_environment_type_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).environment_type

def cf_notification_setting_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).notification_setting
