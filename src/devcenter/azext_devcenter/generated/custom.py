# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def devcenter_dev_center_list(client,
                              resource_group_name=None,
                              top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def devcenter_dev_center_show(client,
                              resource_group_name,
                              dev_center_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name)


def devcenter_dev_center_create(client,
                                resource_group_name,
                                dev_center_name,
                                location,
                                tags=None,
                                type_=None,
                                user_assigned_identities=None,
                                no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       body=body)


def devcenter_dev_center_update(client,
                                resource_group_name,
                                dev_center_name,
                                tags=None,
                                location=None,
                                type_=None,
                                user_assigned_identities=None,
                                no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       body=body)


def devcenter_dev_center_delete(client,
                                resource_group_name,
                                dev_center_name,
                                no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name)


def devcenter_project_list(client,
                           resource_group_name=None,
                           top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def devcenter_project_show(client,
                           resource_group_name,
                           project_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name)


def devcenter_project_create(client,
                             resource_group_name,
                             project_name,
                             location,
                             tags=None,
                             dev_center_id=None,
                             description=None,
                             no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if dev_center_id is not None:
        body['dev_center_id'] = dev_center_id
    if description is not None:
        body['description'] = description
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       body=body)


def devcenter_project_update(client,
                             resource_group_name,
                             project_name,
                             tags=None,
                             location=None,
                             dev_center_id=None,
                             description=None,
                             no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if dev_center_id is not None:
        body['dev_center_id'] = dev_center_id
    if description is not None:
        body['description'] = description
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       body=body)


def devcenter_project_delete(client,
                             resource_group_name,
                             project_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name)


def devcenter_attached_network_list(client,
                                    resource_group_name,
                                    project_name=None,
                                    top=None,
                                    dev_center_name=None):
    if resource_group_name and project_name is not None:
        return client.list_by_project(resource_group_name=resource_group_name,
                                      project_name=project_name,
                                      top=top)
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def devcenter_attached_network_show(client,
                                    resource_group_name,
                                    attached_network_connection_name,
                                    project_name=None,
                                    dev_center_name=None):
    if resource_group_name and project_name is not None and attached_network_connection_name is not None:
        return client.get_by_project(resource_group_name=resource_group_name,
                                     project_name=project_name,
                                     attached_network_connection_name=attached_network_connection_name)
    return client.get_by_dev_center(resource_group_name=resource_group_name,
                                    dev_center_name=dev_center_name,
                                    attached_network_connection_name=attached_network_connection_name)


def devcenter_attached_network_create(client,
                                      resource_group_name,
                                      dev_center_name,
                                      attached_network_connection_name,
                                      network_connection_id=None,
                                      no_wait=False):
    body = {}
    if network_connection_id is not None:
        body['network_connection_id'] = network_connection_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       attached_network_connection_name=attached_network_connection_name,
                       body=body)


def devcenter_attached_network_update(client,
                                      resource_group_name,
                                      dev_center_name,
                                      attached_network_connection_name,
                                      network_connection_id=None,
                                      no_wait=False):
    body = {}
    if network_connection_id is not None:
        body['network_connection_id'] = network_connection_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       attached_network_connection_name=attached_network_connection_name,
                       body=body)


def devcenter_attached_network_delete(client,
                                      resource_group_name,
                                      dev_center_name,
                                      attached_network_connection_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       attached_network_connection_name=attached_network_connection_name)


def devcenter_gallery_list(client,
                           resource_group_name,
                           dev_center_name,
                           top=None):
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def devcenter_gallery_show(client,
                           resource_group_name,
                           dev_center_name,
                           gallery_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      gallery_name=gallery_name)


def devcenter_gallery_create(client,
                             resource_group_name,
                             dev_center_name,
                             gallery_name,
                             gallery_resource_id=None,
                             no_wait=False):
    body = {}
    if gallery_resource_id is not None:
        body['gallery_resource_id'] = gallery_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       gallery_name=gallery_name,
                       body=body)


def devcenter_gallery_update(instance,
                             resource_group_name,
                             dev_center_name,
                             gallery_name,
                             gallery_resource_id=None,
                             no_wait=False):
    if gallery_resource_id is not None:
        instance.gallery_resource_id = gallery_resource_id
    return instance


def devcenter_gallery_delete(client,
                             resource_group_name,
                             dev_center_name,
                             gallery_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       gallery_name=gallery_name)


def devcenter_image_list(client,
                         resource_group_name,
                         dev_center_name,
                         gallery_name=None,
                         top=None):
    if resource_group_name and dev_center_name is not None and gallery_name is not None:
        return client.list_by_gallery(resource_group_name=resource_group_name,
                                      dev_center_name=dev_center_name,
                                      gallery_name=gallery_name,
                                      top=top)
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def devcenter_image_show(client,
                         resource_group_name,
                         dev_center_name,
                         gallery_name,
                         image_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      gallery_name=gallery_name,
                      image_name=image_name)


def devcenter_image_version_list(client,
                                 resource_group_name,
                                 dev_center_name,
                                 gallery_name,
                                 image_name):
    return client.list_by_image(resource_group_name=resource_group_name,
                                dev_center_name=dev_center_name,
                                gallery_name=gallery_name,
                                image_name=image_name)


def devcenter_image_version_show(client,
                                 resource_group_name,
                                 dev_center_name,
                                 gallery_name,
                                 image_name,
                                 version_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      gallery_name=gallery_name,
                      image_name=image_name,
                      version_name=version_name)


def devcenter_catalog_list(client,
                           resource_group_name,
                           dev_center_name,
                           top=None):
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def devcenter_catalog_show(client,
                           resource_group_name,
                           dev_center_name,
                           catalog_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      catalog_name=catalog_name)


def devcenter_catalog_create(client,
                             resource_group_name,
                             dev_center_name,
                             catalog_name,
                             git_hub=None,
                             ado_git=None,
                             no_wait=False):
    body = {}
    if git_hub is not None:
        body['git_hub'] = git_hub
    if ado_git is not None:
        body['ado_git'] = ado_git
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name,
                       body=body)


def devcenter_catalog_update(client,
                             resource_group_name,
                             dev_center_name,
                             catalog_name,
                             tags=None,
                             git_hub=None,
                             ado_git=None,
                             no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if git_hub is not None:
        body['git_hub'] = git_hub
    if ado_git is not None:
        body['ado_git'] = ado_git
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name,
                       body=body)


def devcenter_catalog_delete(client,
                             resource_group_name,
                             dev_center_name,
                             catalog_name,
                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name)


def devcenter_catalog_sync(client,
                           resource_group_name,
                           dev_center_name,
                           catalog_name,
                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_sync,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name)


def devcenter_environment_type_list(client,
                                    resource_group_name,
                                    dev_center_name,
                                    top=None):
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def devcenter_environment_type_show(client,
                                    resource_group_name,
                                    dev_center_name,
                                    environment_type_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      environment_type_name=environment_type_name)


def devcenter_environment_type_create(client,
                                      resource_group_name,
                                      dev_center_name,
                                      environment_type_name,
                                      tags=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    return client.create_or_update(resource_group_name=resource_group_name,
                                   dev_center_name=dev_center_name,
                                   environment_type_name=environment_type_name,
                                   body=body)


def devcenter_environment_type_update(client,
                                      resource_group_name,
                                      dev_center_name,
                                      environment_type_name,
                                      tags=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         environment_type_name=environment_type_name,
                         body=body)


def devcenter_environment_type_delete(client,
                                      resource_group_name,
                                      dev_center_name,
                                      environment_type_name):
    return client.delete(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         environment_type_name=environment_type_name)


def devcenter_project_environment_type_list(client,
                                            resource_group_name,
                                            project_name,
                                            top=None):
    return client.list(resource_group_name=resource_group_name,
                       project_name=project_name,
                       top=top)


def devcenter_project_environment_type_show(client,
                                            resource_group_name,
                                            project_name,
                                            environment_type_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      environment_type_name=environment_type_name)


def devcenter_project_environment_type_create(client,
                                              resource_group_name,
                                              project_name,
                                              environment_type_name,
                                              tags=None,
                                              location=None,
                                              deployment_target_id=None,
                                              status=None,
                                              creator_role_assignment=None,
                                              user_role_assignments=None,
                                              type_=None,
                                              user_assigned_identities=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if deployment_target_id is not None:
        body['deployment_target_id'] = deployment_target_id
    if status is not None:
        body['status'] = status
    if creator_role_assignment is not None:
        body['creator_role_assignment'] = creator_role_assignment
    if user_role_assignments is not None:
        body['user_role_assignments'] = user_role_assignments
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   project_name=project_name,
                                   environment_type_name=environment_type_name,
                                   body=body)


def devcenter_project_environment_type_update(client,
                                              resource_group_name,
                                              project_name,
                                              environment_type_name,
                                              tags=None,
                                              deployment_target_id=None,
                                              status=None,
                                              creator_role_assignment=None,
                                              user_role_assignments=None,
                                              type_=None,
                                              user_assigned_identities=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if deployment_target_id is not None:
        body['deployment_target_id'] = deployment_target_id
    if status is not None:
        body['status'] = status
    if creator_role_assignment is not None:
        body['creator_role_assignment'] = creator_role_assignment
    if user_role_assignments is not None:
        body['user_role_assignments'] = user_role_assignments
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return client.update(resource_group_name=resource_group_name,
                         project_name=project_name,
                         environment_type_name=environment_type_name,
                         body=body)


def devcenter_project_environment_type_delete(client,
                                              resource_group_name,
                                              project_name,
                                              environment_type_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name,
                         environment_type_name=environment_type_name)


def devcenter_dev_box_definition_list(client,
                                      resource_group_name,
                                      dev_center_name=None,
                                      top=None,
                                      project_name=None):
    if resource_group_name and dev_center_name is not None:
        return client.list_by_dev_center(resource_group_name=resource_group_name,
                                         dev_center_name=dev_center_name,
                                         top=top)
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name,
                                  top=top)


def devcenter_dev_box_definition_show(client,
                                      resource_group_name,
                                      dev_box_definition_name,
                                      dev_center_name=None,
                                      project_name=None):
    if resource_group_name and dev_center_name is not None and dev_box_definition_name is not None:
        return client.get(resource_group_name=resource_group_name,
                          dev_center_name=dev_center_name,
                          dev_box_definition_name=dev_box_definition_name)
    return client.get_by_project(resource_group_name=resource_group_name,
                                 project_name=project_name,
                                 dev_box_definition_name=dev_box_definition_name)


def devcenter_dev_box_definition_create(client,
                                        resource_group_name,
                                        dev_center_name,
                                        dev_box_definition_name,
                                        location,
                                        tags=None,
                                        image_reference=None,
                                        sku=None,
                                        os_storage_type=None,
                                        no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if image_reference is not None:
        body['image_reference'] = image_reference
    if sku is not None:
        body['sku'] = sku
    if os_storage_type is not None:
        body['os_storage_type'] = os_storage_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       dev_box_definition_name=dev_box_definition_name,
                       body=body)


def devcenter_dev_box_definition_update(client,
                                        resource_group_name,
                                        dev_center_name,
                                        dev_box_definition_name,
                                        tags=None,
                                        location=None,
                                        image_reference=None,
                                        sku=None,
                                        os_storage_type=None,
                                        no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if image_reference is not None:
        body['image_reference'] = image_reference
    if sku is not None:
        body['sku'] = sku
    if os_storage_type is not None:
        body['os_storage_type'] = os_storage_type
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       dev_box_definition_name=dev_box_definition_name,
                       body=body)


def devcenter_dev_box_definition_delete(client,
                                        resource_group_name,
                                        dev_center_name,
                                        dev_box_definition_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       dev_box_definition_name=dev_box_definition_name)


def devcenter_operation_statuses_show(client,
                                      location,
                                      operation_id):
    return client.get(location=location,
                      operation_id=operation_id)


def devcenter_usage_list(client,
                         location):
    return client.list_by_location(location=location)


def devcenter_sku_list(client,
                       top=None):
    return client.list_by_subscription(top=top)


def devcenter_pool_list(client,
                        resource_group_name,
                        project_name,
                        top=None):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name,
                                  top=top)


def devcenter_pool_show(client,
                        resource_group_name,
                        project_name,
                        pool_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      pool_name=pool_name)


def devcenter_pool_create(client,
                          resource_group_name,
                          project_name,
                          pool_name,
                          location,
                          tags=None,
                          dev_box_definition_name=None,
                          network_connection_name=None,
                          local_administrator=None,
                          no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if dev_box_definition_name is not None:
        body['dev_box_definition_name'] = dev_box_definition_name
    if network_connection_name is not None:
        body['network_connection_name'] = network_connection_name
    body['license_type'] = "Windows_Client"
    if local_administrator is not None:
        body['local_administrator'] = local_administrator
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       body=body)


def devcenter_pool_update(client,
                          resource_group_name,
                          project_name,
                          pool_name,
                          tags=None,
                          location=None,
                          dev_box_definition_name=None,
                          network_connection_name=None,
                          local_administrator=None,
                          no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if dev_box_definition_name is not None:
        body['dev_box_definition_name'] = dev_box_definition_name
    if network_connection_name is not None:
        body['network_connection_name'] = network_connection_name
    body['license_type'] = "Windows_Client"
    if local_administrator is not None:
        body['local_administrator'] = local_administrator
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       body=body)


def devcenter_pool_delete(client,
                          resource_group_name,
                          project_name,
                          pool_name,
                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name)


def devcenter_schedule_list(client,
                            resource_group_name,
                            project_name,
                            pool_name,
                            top=None):
    return client.list_by_pool(resource_group_name=resource_group_name,
                               project_name=project_name,
                               pool_name=pool_name,
                               top=top)


def devcenter_schedule_show(client,
                            resource_group_name,
                            project_name,
                            pool_name,
                            schedule_name,
                            top=None):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      pool_name=pool_name,
                      schedule_name=schedule_name,
                      top=top)


def devcenter_schedule_create(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              schedule_name,
                              schedule_type,
                              frequency,
                              time=None,
                              time_zone=None,
                              state=None,
                              no_wait=False):
    body = {}
    body['type_properties_type'] = schedule_type #"StopDevBox"
    body['frequency'] = frequency #"Daily"
    if time is not None:
        body['time'] = time
    if time_zone is not None:
        body['time_zone'] = time_zone
    if state is not None:
        body['state'] = state
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       schedule_name=schedule_name,
                       body=body)


def devcenter_schedule_update(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              schedule_name,
                              top=None,
                              tags=None,
                              location=None,
                              time=None,
                              time_zone=None,
                              state=None,
                              no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    body['type'] = "StopDevBox"
    body['frequency'] = "Daily"
    if time is not None:
        body['time'] = time
    if time_zone is not None:
        body['time_zone'] = time_zone
    if state is not None:
        body['state'] = state
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       schedule_name=schedule_name,
                       top=top,
                       body=body)


def devcenter_schedule_delete(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              schedule_name,
                              top=None,
                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       schedule_name=schedule_name,
                       top=top)


def devcenter_network_connection_list(client,
                                      resource_group_name=None,
                                      top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def devcenter_network_connection_show(client,
                                      resource_group_name,
                                      network_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      network_connection_name=network_connection_name)


def devcenter_network_connection_create(client,
                                        resource_group_name,
                                        network_connection_name,
                                        location,
                                        tags=None,
                                        subnet_id=None,
                                        domain_name=None,
                                        organization_unit=None,
                                        domain_username=None,
                                        domain_password=None,
                                        networking_resource_group_name=None,
                                        domain_join_type=None,
                                        no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if subnet_id is not None:
        body['subnet_id'] = subnet_id
    if domain_name is not None:
        body['domain_name'] = domain_name
    if organization_unit is not None:
        body['organization_unit'] = organization_unit
    if domain_username is not None:
        body['domain_username'] = domain_username
    if domain_password is not None:
        body['domain_password'] = domain_password
    if networking_resource_group_name is not None:
        body['networking_resource_group_name'] = networking_resource_group_name
    if domain_join_type is not None:
        body['domain_join_type'] = domain_join_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       network_connection_name=network_connection_name,
                       body=body)


def devcenter_network_connection_update(client,
                                        resource_group_name,
                                        network_connection_name,
                                        tags=None,
                                        location=None,
                                        subnet_id=None,
                                        domain_name=None,
                                        organization_unit=None,
                                        domain_username=None,
                                        domain_password=None,
                                        no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if subnet_id is not None:
        body['subnet_id'] = subnet_id
    if domain_name is not None:
        body['domain_name'] = domain_name
    if organization_unit is not None:
        body['organization_unit'] = organization_unit
    if domain_username is not None:
        body['domain_username'] = domain_username
    if domain_password is not None:
        body['domain_password'] = domain_password
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       network_connection_name=network_connection_name,
                       body=body)


def devcenter_network_connection_delete(client,
                                        resource_group_name,
                                        network_connection_name,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       network_connection_name=network_connection_name)


def devcenter_network_connection_list_health_detail(client,
                                                    resource_group_name,
                                                    network_connection_name,
                                                    top=None):
    return client.list_health_details(resource_group_name=resource_group_name,
                                      top=top,
                                      network_connection_name=network_connection_name)


def devcenter_network_connection_run_health_check(client,
                                                  resource_group_name,
                                                  network_connection_name):
    return client.run_health_checks(resource_group_name=resource_group_name,
                                    network_connection_name=network_connection_name)


def devcenter_network_connection_show_health_detail(client,
                                                    resource_group_name,
                                                    network_connection_name):
    return client.get_health_details(resource_group_name=resource_group_name,
                                     network_connection_name=network_connection_name)
