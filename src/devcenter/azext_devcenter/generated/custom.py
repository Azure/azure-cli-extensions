# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def devcenter_dev_center_create_notification_setting(client,
                                                     user_id,
                                                     enabled,
                                                     culture,
                                                     boolean_enabled,
                                                     email_notification,
                                                     webhook_notification):
    body = {}
    body['name'] = "default"
    body['enabled'] = enabled
    body['culture'] = culture
    body['notification_type'] = {}
    body['notification_type']['dev_box_provisioning_notification'] = {}
    body['notification_type']['dev_box_provisioning_notification']['enabled'] = boolean_enabled
    body['notification_type']['dev_box_provisioning_notification']['notification_channel'] = {}
    body['notification_type']['dev_box_provisioning_notification']['notification_channel']['email_notification'] = email_notification
    body['notification_type']['dev_box_provisioning_notification']['notification_channel']['webhook_notification'] = webhook_notification
    if len(body['notification_type']['dev_box_provisioning_notification']['notification_channel']) == 0:
        del body['notification_type']['dev_box_provisioning_notification']['notification_channel']
    return client.create_notification_settings(user_id=user_id,
                                               body=body)


def devcenter_dev_center_list_all_dev_box(client,
                                          filter_=None,
                                          top=None,
                                          user_id=None):
    if user_id is not None:
        return client.list_all_dev_boxes_by_user(filter=filter_,
                                                 top=top,
                                                 user_id=user_id)
    return client.list_all_dev_boxes(filter=filter_,
                                     top=top)


def devcenter_dev_center_list_notification_setting_allowed_culture(client,
                                                                   user_id):
    return client.list_notification_settings_allowed_cultures(user_id=user_id)


def devcenter_dev_center_list_project(client,
                                      filter_=None,
                                      top=None):
    return client.list_projects(filter=filter_,
                                top=top)


def devcenter_dev_center_show_notification_setting(client,
                                                   user_id):
    return client.get_notification_settings(user_id=user_id)


def devcenter_dev_center_show_project(client,
                                      project_name):
    return client.get_project(project_name=project_name)


def devcenter_dev_box_create_dev_box(client,
                                     user_id,
                                     dev_box_name,
                                     pool_name,
                                     local_administrator=None):
    body = {}
    body['pool_name'] = pool_name
    if local_administrator is not None:
        body['local_administrator'] = local_administrator
    return client.begin_create_dev_box(user_id=user_id,
                                       dev_box_name=dev_box_name,
                                       body=body)


def devcenter_dev_box_delay_action(client,
                                   user_id,
                                   dev_box_name,
                                   until,
                                   action_name=None):
    if user_id is not None and dev_box_name is not None and action_name is not None and until is not None:
        return client.delay_action(user_id=user_id,
                                   dev_box_name=dev_box_name,
                                   action_name=action_name,
                                   until=until)
    return client.delay_actions(user_id=user_id,
                                dev_box_name=dev_box_name,
                                until=until)


def devcenter_dev_box_delete_dev_box(client,
                                     user_id,
                                     dev_box_name):
    return client.begin_delete_dev_box(user_id=user_id,
                                       dev_box_name=dev_box_name)


def devcenter_dev_box_list_action(client,
                                  user_id,
                                  dev_box_name):
    return client.list_actions(user_id=user_id,
                               dev_box_name=dev_box_name)


def devcenter_dev_box_list_dev_box(client,
                                   user_id,
                                   filter_=None,
                                   top=None):
    return client.list_dev_boxes_by_user(filter=filter_,
                                         top=top,
                                         user_id=user_id)


def devcenter_dev_box_list_pool(client,
                                top=None,
                                filter_=None):
    return client.list_pools(top=top,
                             filter=filter_)


def devcenter_dev_box_list_schedule(client,
                                    pool_name,
                                    top=None,
                                    filter_=None):
    return client.list_schedules_by_pool(top=top,
                                         filter=filter_,
                                         pool_name=pool_name)


def devcenter_dev_box_restart_dev_box(client,
                                      user_id,
                                      dev_box_name):
    return client.begin_restart_dev_box(user_id=user_id,
                                        dev_box_name=dev_box_name)


def devcenter_dev_box_show_action(client,
                                  user_id,
                                  dev_box_name,
                                  action_name):
    return client.get_action(user_id=user_id,
                             dev_box_name=dev_box_name,
                             action_name=action_name)


def devcenter_dev_box_show_dev_box(client,
                                   user_id,
                                   dev_box_name):
    return client.get_dev_box_by_user(user_id=user_id,
                                      dev_box_name=dev_box_name)


def devcenter_dev_box_show_pool(client,
                                pool_name):
    return client.get_pool(pool_name=pool_name)


def devcenter_dev_box_show_remote_connection(client,
                                             user_id,
                                             dev_box_name):
    return client.get_remote_connection(user_id=user_id,
                                        dev_box_name=dev_box_name)


def devcenter_dev_box_show_schedule(client,
                                    pool_name,
                                    schedule_name):
    return client.get_schedule_by_pool(pool_name=pool_name,
                                       schedule_name=schedule_name)


def devcenter_dev_box_skip_action(client,
                                  user_id,
                                  dev_box_name,
                                  action_name):
    return client.skip_action(user_id=user_id,
                              dev_box_name=dev_box_name,
                              action_name=action_name)


def devcenter_dev_box_start_dev_box(client,
                                    user_id,
                                    dev_box_name):
    return client.begin_start_dev_box(user_id=user_id,
                                      dev_box_name=dev_box_name)


def devcenter_dev_box_stop_dev_box(client,
                                   user_id,
                                   dev_box_name,
                                   hibernate=None):
    return client.begin_stop_dev_box(user_id=user_id,
                                     dev_box_name=dev_box_name,
                                     hibernate=hibernate)


def devcenter_environment_create_or_replace_environment(client,
                                                        user_id,
                                                        environment_name,
                                                        environment_type,
                                                        catalog_name,
                                                        environment_definition_name,
                                                        parameters=None):
    body = {}
    if parameters is not None:
        body['parameters'] = parameters
    body['environment_type'] = environment_type
    body['catalog_name'] = catalog_name
    body['environment_definition_name'] = environment_definition_name
    return client.begin_create_or_replace_environment(user_id=user_id,
                                                      environment_name=environment_name,
                                                      body=body)


def devcenter_environment_delete_environment(client,
                                             user_id,
                                             environment_name):
    return client.begin_delete_environment(user_id=user_id,
                                           environment_name=environment_name)


def devcenter_environment_list_artifact(client,
                                        user_id,
                                        environment_name,
                                        artifact_path=None):
    if user_id is not None and environment_name is not None and artifact_path is not None:
        return client.list_artifacts_by_environment_and_path(user_id=user_id,
                                                             environment_name=environment_name,
                                                             artifact_path=artifact_path)
    return client.list_artifacts_by_environment(user_id=user_id,
                                                environment_name=environment_name)


def devcenter_environment_list_catalog(client,
                                       top=None):
    return client.list_catalogs_by_project(top=top)


def devcenter_environment_list_environment(client,
                                           top=None,
                                           user_id=None):
    if user_id is not None:
        return client.list_environments_by_user(top=top,
                                                user_id=user_id)
    return client.list_environments(top=top)


def devcenter_environment_list_environment_definition(client,
                                                      top=None,
                                                      catalog_name=None):
    if catalog_name is not None:
        return client.list_environment_definitions_by_catalog(top=top,
                                                              catalog_name=catalog_name)
    return client.list_environment_definitions_by_project(top=top)


def devcenter_environment_list_environment_type(client,
                                                top=None):
    return client.list_environment_types(top=top)


def devcenter_environment_show_catalog(client,
                                       catalog_name):
    return client.get_catalog(catalog_name=catalog_name)


def devcenter_environment_show_environment(client,
                                           user_id,
                                           environment_name):
    return client.get_environment_by_user(user_id=user_id,
                                          environment_name=environment_name)


def devcenter_environment_show_environment_definition(client,
                                                      catalog_name,
                                                      definition_name):
    return client.get_environment_definition(catalog_name=catalog_name,
                                             definition_name=definition_name)
