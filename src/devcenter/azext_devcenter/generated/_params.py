# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_devcenter.action import (
    AddEmailNotification,
    AddWebhookNotification
)


def load_arguments(self, _):

    with self.argument_context('devcenter dev-center create-notification-setting') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('enabled', arg_type=get_three_state_flag(), help='If notification is enabled for the user.')
        c.argument('culture', type=str, help='The culture that MEO can accommdate requests to send emails in.')
        c.argument('boolean_enabled', arg_type=get_three_state_flag(), help='If notification is enabled for DevBox '
                   'provisioning.', arg_group='Notification Type Dev Box Provisioning Notification')
        c.argument('email_notification', action=AddEmailNotification, nargs='+', help='The email notification',
                   arg_group='Notification Type Dev Box Provisioning Notification Notification Channel')
        c.argument('webhook_notification', action=AddWebhookNotification, nargs='+', help='The webhook notification',
                   arg_group='Notification Type Dev Box Provisioning Notification Notification Channel')

    with self.argument_context('devcenter dev-center list-all-dev-box') as c:
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter clause to apply to the '
                   'operation.')
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')

    with self.argument_context('devcenter dev-center list-notification-setting-allowed-culture') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')

    with self.argument_context('devcenter dev-center list-project') as c:
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter clause to apply to the '
                   'operation.')
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')

    with self.argument_context('devcenter dev-center show-notification-setting') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')

    with self.argument_context('devcenter dev-center show-project') as c:
        c.argument('project_name', type=str, help='The DevCenter Project upon which to execute operations.')

    with self.argument_context('devcenter dev-box create-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')
        c.argument('pool_name', type=str, help='The name of the Dev Box pool this machine belongs to.')
        c.argument('local_administrator', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Indicates whether the '
                   'owner of the Dev Box is a local administrator.')

    with self.argument_context('devcenter dev-box delay-action') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')
        c.argument('action_name', type=str, help='The name of an action that will take place on a Dev Box.')
        c.argument('until', help='The time to delay the Dev Box action or actions until.')

    with self.argument_context('devcenter dev-box delete-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box list-action') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box list-dev-box') as c:
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter clause to apply to the '
                   'operation.')
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')

    with self.argument_context('devcenter dev-box list-pool') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter clause to apply to the '
                   'operation.')

    with self.argument_context('devcenter dev-box list-schedule') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('filter_', options_list=['--filter'], type=str, help='An OData filter clause to apply to the '
                   'operation.')
        c.argument('pool_name', type=str, help='The name of a pool of Dev Boxes.')

    with self.argument_context('devcenter dev-box restart-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box show-action') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')
        c.argument('action_name', type=str, help='The name of an action that will take place on a Dev Box.')

    with self.argument_context('devcenter dev-box show-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box show-pool') as c:
        c.argument('pool_name', type=str, help='The name of a pool of Dev Boxes.')

    with self.argument_context('devcenter dev-box show-remote-connection') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box show-schedule') as c:
        c.argument('pool_name', type=str, help='The name of a pool of Dev Boxes.')
        c.argument('schedule_name', type=str, help='The name of a schedule.')

    with self.argument_context('devcenter dev-box skip-action') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')
        c.argument('action_name', type=str, help='The name of an action that will take place on a Dev Box.')

    with self.argument_context('devcenter dev-box start-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')

    with self.argument_context('devcenter dev-box stop-dev-box') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('dev_box_name', options_list=['--name', '-n', '--dev-box-name'], type=str, help='The name of a Dev '
                   'Box.')
        c.argument('hibernate', arg_type=get_three_state_flag(), help='Optional parameter to hibernate the dev box.')

    with self.argument_context('devcenter environment create-or-replace-environment') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('environment_name', options_list=['--name', '-n', '--environment-name'], type=str, help='The name '
                   'of the environment.')
        c.argument('parameters', type=validate_file_or_dict, help='Parameters object for the environment. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('environment_type', type=str, help='Environment type.')
        c.argument('catalog_name', type=str, help='Name of the catalog.')
        c.argument('environment_definition_name', type=str, help='Name of the environment definition.')

    with self.argument_context('devcenter environment delete-environment') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('environment_name', options_list=['--name', '-n', '--environment-name'], type=str, help='The name '
                   'of the environment.')

    with self.argument_context('devcenter environment list-artifact') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('environment_name', options_list=['--name', '-n', '--environment-name'], type=str, help='The name '
                   'of the environment.')
        c.argument('artifact_path', type=str, help='The path of the artifact.')

    with self.argument_context('devcenter environment list-catalog') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')

    with self.argument_context('devcenter environment list-environment') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')

    with self.argument_context('devcenter environment list-environment-definition') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')
        c.argument('catalog_name', type=str, help='The name of the catalog')

    with self.argument_context('devcenter environment list-environment-type') as c:
        c.argument('top', type=int, help='The maximum number of resources to return from the operation. Example: '
                   '\'top=10\'.')

    with self.argument_context('devcenter environment show-catalog') as c:
        c.argument('catalog_name', type=str, help='The name of the catalog')

    with self.argument_context('devcenter environment show-environment') as c:
        c.argument('user_id', type=str, help='The AAD object id of the user. If value is \'me\', the identity is taken '
                   'from the authentication context.')
        c.argument('environment_name', options_list=['--name', '-n', '--environment-name'], type=str, help='The name '
                   'of the environment.')

    with self.argument_context('devcenter environment show-environment-definition') as c:
        c.argument('catalog_name', type=str, help='The name of the catalog')
        c.argument('definition_name', type=str, help='The name of the environment definition')
