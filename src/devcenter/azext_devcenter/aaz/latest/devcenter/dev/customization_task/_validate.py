# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *
import json
from ......utils import clear_running_line

@register_command(
    "devcenter dev customization-task validate",
)
class Validate(AAZCommand):
    """Validates a list of customization tasks.

    :example: Validate
        az devcenter dev customization-task validate --endpoint "https://8a40af38-3b4c-4672-a6a4-5e964b1870ed-contosodevcenter.centralus.devcenter.azure.com/" --project-name "DevProject" --tasks "[{\\"name\\": \\"catalogName/choco\\", \\"displayName\\": \\"Install VS Code\\", \\"parameters\\": {\\"packageName\\": \\"vscode\\", \\"packageVersion\\": \\"1.0.0\\"}}, {\\"name\\": \\"catalogName/write-to-file\\", \\"runAs\\": \\"User\\"}]"
    """

    _aaz_info = {
        "version": "2024-10-01-preview",
        "resources": [
            ["data-plane:microsoft.devcenter", "/projects/{}/customizationtasks:validategroup", "2024-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="The API endpoint for the developer resources. Use az configure -d endpoint=<endpoint_uri> to configure a default.",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.tasks = AAZListArg(
            options=["--tasks"],
            arg_group="Body",
            help="Tasks to apply.",
        )

        tasks = cls._args_schema.tasks
        tasks.Element = AAZObjectArg()

        _element = cls._args_schema.tasks.Element
        _element.display_name = AAZStrArg(
            options=["display-name"],
            help="Display name to help differentiate multiple instances of the same task.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the task.",
            required=True,
        )
        _element.parameters = AAZDictArg(
            options=["parameters"],
            help="Parameters for the task.",
        )
        _element.run_as = AAZStrArg(
            options=["run-as"],
            help="What account to run the task as.",
            enum={"System": "System", "User": "User"},
        )
        _element.timeout_in_seconds = AAZIntArg(
            options=["timeout-in-seconds"],
            help="Timeout, in seconds. Overrides any timeout provided on the task definition.",
        )

        parameters = cls._args_schema.tasks.Element.parameters
        parameters.Element = AAZStrArg()

        # define Arg Group "Default"

        _args_schema = cls._args_schema
        _args_schema.project_name = AAZStrArg(
            options=["--project", "--project-name"],
            arg_group="Default",
            help="The name of the project. Use az configure -d project=<project_name> to configure a default.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DevBoxesValidateCustomizationTasksAction(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass
    
    def _output(self, *args, **kwargs):
        print(self.ctx.vars.instance)
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result



    class DevBoxesValidateCustomizationTasksAction(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftDevcenterDataPlaneClient_devcenter"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/projects/{projectName}/customizationTasks:validateGroup",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-10-01-preview",
                    required=True,
                ),
            }
            return parameters
        
        def on_200(self, session):
            data =  self.deserialize_http_content(session)
            clear_running_line()
            print(json.dumps(data, indent=2))


        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("tasks", AAZListType, ".tasks")

            tasks = _builder.get(".tasks")
            if tasks is not None:
                tasks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".tasks[]")
            if _elements is not None:
                _elements.set_prop("displayName", AAZStrType, ".display_name")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("parameters", AAZDictType, ".parameters")
                _elements.set_prop("runAs", AAZStrType, ".run_as")
                _elements.set_prop("timeoutInSeconds", AAZIntType, ".timeout_in_seconds")

            parameters = _builder.get(".tasks[].parameters")
            if parameters is not None:
                parameters.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)


class _ValidateHelper:
    """Helper class for Validate"""


__all__ = ["Validate"]
