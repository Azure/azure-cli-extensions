# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter dev dev-box create",
)
class Create(AAZCommand):
    """Create a Dev Box.

    :example: Create
        az devcenter dev dev-box create --pool-name "LargeDevWorkStationPool" --name "MyDevBox" --endpoint "https://8a40af38-3b4c-4672-a6a4-5e964b1870ed-contosodevcenter.centralus.devcenter.azure.com/" --project-name "DevProject" --user-id "00000000-0000-0000-0000-000000000000"
    """

    _aaz_info = {
        "version": "2024-10-01-preview",
        "resources": [
            ["data-plane:microsoft.devcenter", "/projects/{}/users/{}/devboxes/{}", "2024-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="The API endpoint for the developer resources. Use az configure -d endpoint=<endpoint_uri> to configure a default.",
            required=True,
        )

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.dev_box_name = AAZStrArg(
            options=["-n", "--name", "--dev-box", "--dev-box-name"],
            help="The name of a dev box.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.project_name = AAZStrArg(
            options=["--project", "--project-name"],
            help="The name of the project. Use az configure -d project=<project_name> to configure a default.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.user_id = AAZStrArg(
            options=["--user-id"],
            help="The AAD object id of the user. If value is 'me', the identity is taken from the authentication context.",
            required=True,
            default="me",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]{8}-([a-zA-Z0-9]{4}-){3}[a-zA-Z0-9]{12}$|^me$",
                max_length=36,
                min_length=2,
            ),
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.local_administrator = AAZStrArg(
            options=["--local-administrator"],
            arg_group="Body",
            help="Indicates whether the owner of the Dev Box is a local administrator.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.pool_name = AAZStrArg(
            options=["--pool-name"],
            arg_group="Body",
            help="The name of the Dev Box pool this machine belongs to.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DevBoxesCreateDevBox(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DevBoxesCreateDevBox(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftDevcenterDataPlaneClient_devcenter"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/projects/{projectName}/users/{userId}/devboxes/{devBoxName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "devBoxName", self.ctx.args.dev_box_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "userId", self.ctx.args.user_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("localAdministrator", AAZStrType, ".local_administrator")
            _builder.set_prop("poolName", AAZStrType, ".pool_name", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.action_state = AAZStrType(
                serialized_name="actionState",
                flags={"read_only": True},
            )
            _schema_on_200_201.created_time = AAZStrType(
                serialized_name="createdTime",
                flags={"read_only": True},
            )
            _schema_on_200_201.error = AAZObjectType(
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_azure_core_foundations_error_read(_schema_on_200_201.error)
            _schema_on_200_201.hardware_profile = AAZObjectType(
                serialized_name="hardwareProfile",
                flags={"read_only": True},
            )
            _schema_on_200_201.hibernate_support = AAZStrType(
                serialized_name="hibernateSupport",
                flags={"read_only": True},
            )
            _schema_on_200_201.image_reference = AAZObjectType(
                serialized_name="imageReference",
                flags={"read_only": True},
            )
            _schema_on_200_201.last_connected_time = AAZStrType(
                serialized_name="lastConnectedTime",
                flags={"read_only": True},
            )
            _schema_on_200_201.local_administrator = AAZStrType(
                serialized_name="localAdministrator",
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.os_type = AAZStrType(
                serialized_name="osType",
                flags={"read_only": True},
            )
            _schema_on_200_201.pool_name = AAZStrType(
                serialized_name="poolName",
                flags={"required": True},
            )
            _schema_on_200_201.power_state = AAZStrType(
                serialized_name="powerState",
                flags={"read_only": True},
            )
            _schema_on_200_201.project_name = AAZStrType(
                serialized_name="projectName",
                flags={"read_only": True},
            )
            _schema_on_200_201.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            _schema_on_200_201.storage_profile = AAZObjectType(
                serialized_name="storageProfile",
                flags={"read_only": True},
            )
            _schema_on_200_201.unique_id = AAZStrType(
                serialized_name="uniqueId",
                flags={"read_only": True},
            )
            _schema_on_200_201.uri = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.user = AAZStrType(
                flags={"read_only": True},
            )

            hardware_profile = cls._schema_on_200_201.hardware_profile
            hardware_profile.memory_gb = AAZIntType(
                serialized_name="memoryGB",
                flags={"read_only": True},
            )
            hardware_profile.sku_name = AAZStrType(
                serialized_name="skuName",
                flags={"read_only": True},
            )
            hardware_profile.v_cp_us = AAZIntType(
                serialized_name="vCPUs",
                flags={"read_only": True},
            )

            image_reference = cls._schema_on_200_201.image_reference
            image_reference.name = AAZStrType(
                flags={"read_only": True},
            )
            image_reference.operating_system = AAZStrType(
                serialized_name="operatingSystem",
                flags={"read_only": True},
            )
            image_reference.os_build_number = AAZStrType(
                serialized_name="osBuildNumber",
                flags={"read_only": True},
            )
            image_reference.published_date = AAZStrType(
                serialized_name="publishedDate",
                flags={"read_only": True},
            )
            image_reference.version = AAZStrType(
                flags={"read_only": True},
            )

            storage_profile = cls._schema_on_200_201.storage_profile
            storage_profile.os_disk = AAZObjectType(
                serialized_name="osDisk",
            )

            os_disk = cls._schema_on_200_201.storage_profile.os_disk
            os_disk.disk_size_gb = AAZIntType(
                serialized_name="diskSizeGB",
                flags={"read_only": True},
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_azure_core_foundations_error_read = None

    @classmethod
    def _build_schema_azure_core_foundations_error_read(cls, _schema):
        if cls._schema_azure_core_foundations_error_read is not None:
            _schema.code = cls._schema_azure_core_foundations_error_read.code
            _schema.details = cls._schema_azure_core_foundations_error_read.details
            _schema.innererror = cls._schema_azure_core_foundations_error_read.innererror
            _schema.message = cls._schema_azure_core_foundations_error_read.message
            _schema.target = cls._schema_azure_core_foundations_error_read.target
            return

        cls._schema_azure_core_foundations_error_read = _schema_azure_core_foundations_error_read = AAZObjectType(
            flags={"read_only": True}
        )

        azure_core_foundations_error_read = _schema_azure_core_foundations_error_read
        azure_core_foundations_error_read.code = AAZStrType(
            flags={"required": True},
        )
        azure_core_foundations_error_read.details = AAZListType()
        azure_core_foundations_error_read.innererror = AAZObjectType()
        cls._build_schema_azure_core_foundations_inner_error_read(azure_core_foundations_error_read.innererror)
        azure_core_foundations_error_read.message = AAZStrType(
            flags={"required": True},
        )
        azure_core_foundations_error_read.target = AAZStrType()

        details = _schema_azure_core_foundations_error_read.details
        details.Element = AAZObjectType()
        cls._build_schema_azure_core_foundations_error_read(details.Element)

        _schema.code = cls._schema_azure_core_foundations_error_read.code
        _schema.details = cls._schema_azure_core_foundations_error_read.details
        _schema.innererror = cls._schema_azure_core_foundations_error_read.innererror
        _schema.message = cls._schema_azure_core_foundations_error_read.message
        _schema.target = cls._schema_azure_core_foundations_error_read.target

    _schema_azure_core_foundations_inner_error_read = None

    @classmethod
    def _build_schema_azure_core_foundations_inner_error_read(cls, _schema):
        if cls._schema_azure_core_foundations_inner_error_read is not None:
            _schema.code = cls._schema_azure_core_foundations_inner_error_read.code
            _schema.innererror = cls._schema_azure_core_foundations_inner_error_read.innererror
            return

        cls._schema_azure_core_foundations_inner_error_read = _schema_azure_core_foundations_inner_error_read = AAZObjectType()

        azure_core_foundations_inner_error_read = _schema_azure_core_foundations_inner_error_read
        azure_core_foundations_inner_error_read.code = AAZStrType()
        azure_core_foundations_inner_error_read.innererror = AAZObjectType()
        cls._build_schema_azure_core_foundations_inner_error_read(azure_core_foundations_inner_error_read.innererror)

        _schema.code = cls._schema_azure_core_foundations_inner_error_read.code
        _schema.innererror = cls._schema_azure_core_foundations_inner_error_read.innererror


__all__ = ["Create"]
