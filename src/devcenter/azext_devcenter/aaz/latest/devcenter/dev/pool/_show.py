# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter dev pool show",
)
class Show(AAZCommand):
    """Get a pool.

    :example: Get
        az devcenter dev pool show --endpoint "https://8a40af38-3b4c-4672-a6a4-5e964b1870ed-contosodevcenter.centralus.devcenter.azure.com/" --name "DevPool" --project-name "DevProject"
    """

    _aaz_info = {
        "version": "2024-10-01-preview",
        "resources": [
            ["data-plane:microsoft.devcenter", "/projects/{}/pools/{}", "2024-10-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="The API endpoint for the developer resources. Use az configure -d endpoint=<endpoint_uri> to configure a default.",
            required=True,
        )

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pool_name = AAZStrArg(
            options=["--pool-name"],
            help="Pool name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )

        # define Arg Group "Default"

        _args_schema = cls._args_schema
        _args_schema.project_name = AAZStrArg(
            options=["--project", "--project-name"],
            arg_group="Default",
            help="The name of the project. Use az configure -d project=<project_name> to configure a default.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.DevBoxesGetPool(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DevBoxesGetPool(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftDevcenterDataPlaneClient_devcenter"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/projects/{projectName}/pools/{poolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "poolName", self.ctx.args.pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.display_name = AAZStrType(
                serialized_name="displayName",
            )
            _schema_on_200.hardware_profile = AAZObjectType(
                serialized_name="hardwareProfile",
            )
            _schema_on_200.health_status = AAZStrType(
                serialized_name="healthStatus",
                flags={"required": True},
            )
            _schema_on_200.hibernate_support = AAZStrType(
                serialized_name="hibernateSupport",
            )
            _schema_on_200.image_reference = AAZObjectType(
                serialized_name="imageReference",
            )
            _schema_on_200.local_administrator = AAZStrType(
                serialized_name="localAdministrator",
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.os_type = AAZStrType(
                serialized_name="osType",
            )
            _schema_on_200.stop_on_disconnect = AAZObjectType(
                serialized_name="stopOnDisconnect",
            )
            _schema_on_200.stop_on_no_connect = AAZObjectType(
                serialized_name="stopOnNoConnect",
            )
            _schema_on_200.storage_profile = AAZObjectType(
                serialized_name="storageProfile",
            )
            _schema_on_200.uri = AAZStrType(
                flags={"required": True},
            )

            hardware_profile = cls._schema_on_200.hardware_profile
            hardware_profile.memory_gb = AAZIntType(
                serialized_name="memoryGB",
                flags={"read_only": True},
            )
            hardware_profile.sku_name = AAZStrType(
                serialized_name="skuName",
                flags={"read_only": True},
            )
            hardware_profile.v_cp_us = AAZIntType(
                serialized_name="vCPUs",
                flags={"read_only": True},
            )

            image_reference = cls._schema_on_200.image_reference
            image_reference.name = AAZStrType(
                flags={"read_only": True},
            )
            image_reference.operating_system = AAZStrType(
                serialized_name="operatingSystem",
                flags={"read_only": True},
            )
            image_reference.os_build_number = AAZStrType(
                serialized_name="osBuildNumber",
                flags={"read_only": True},
            )
            image_reference.published_date = AAZStrType(
                serialized_name="publishedDate",
                flags={"read_only": True},
            )
            image_reference.version = AAZStrType(
                flags={"read_only": True},
            )

            stop_on_disconnect = cls._schema_on_200.stop_on_disconnect
            stop_on_disconnect.grace_period_minutes = AAZIntType(
                serialized_name="gracePeriodMinutes",
            )
            stop_on_disconnect.status = AAZStrType(
                flags={"required": True},
            )

            stop_on_no_connect = cls._schema_on_200.stop_on_no_connect
            stop_on_no_connect.grace_period_minutes = AAZIntType(
                serialized_name="gracePeriodMinutes",
            )
            stop_on_no_connect.status = AAZStrType(
                flags={"required": True},
            )

            storage_profile = cls._schema_on_200.storage_profile
            storage_profile.os_disk = AAZObjectType(
                serialized_name="osDisk",
            )

            os_disk = cls._schema_on_200.storage_profile.os_disk
            os_disk.disk_size_gb = AAZIntType(
                serialized_name="diskSizeGB",
                flags={"read_only": True},
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
