# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter admin project update",
)
class Update(AAZCommand):
    """Update a project.

    :example: Update
        az devcenter admin project update --description "This is my first project." --tags CostCenter="R&D" --name "DevProject" --resource-group "rg1" --max-dev-boxes-per-user "5"
    """

    _aaz_info = {
        "version": "2025-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}", "2025-04-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the project.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "CatalogSettings"

        _args_schema = cls._args_schema
        _args_schema.catalog_item_sync_types = AAZListArg(
            options=["-c", "--catalog-item-sync-types"],
            arg_group="CatalogSettings",
            help="Indicates catalog item types that can be synced. Allowed values are \"EnvironmentDefinition\" and \"ImageDefinition\".",
            nullable=True,
        )

        catalog_item_sync_types = cls._args_schema.catalog_item_sync_types
        catalog_item_sync_types.Element = AAZStrArg(
            nullable=True,
            enum={"EnvironmentDefinition": "EnvironmentDefinition", "ImageDefinition": "ImageDefinition"},
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.identity_type = AAZStrArg(
            options=["--identity-type"],
            arg_group="Identity",
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        _args_schema.user_assigned_identities = AAZDictArg(
            options=["-u", "--user-assigned-identities"],
            arg_group="Identity",
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.azure_ai_services_settings = AAZObjectArg(
            options=["-a", "--azure-ai-services-settings"],
            arg_group="Properties",
            help="Indicates whether Azure AI services are enabled for a project.",
            nullable=True,
        )
        _args_schema.customization_settings = AAZObjectArg(
            options=["--customization-settings"],
            arg_group="Properties",
            help="Settings to be used for customizations.",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description of the project.",
            nullable=True,
        )
        _args_schema.dev_box_auto_delete_settings = AAZObjectArg(
            options=["-d", "--dev-box-auto-delete-settings"],
            arg_group="Properties",
            help="Dev Box Auto Delete settings.",
            nullable=True,
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The display name of the project.",
            nullable=True,
        )
        _args_schema.max_dev_boxes_per_user = AAZIntArg(
            options=["--max-dev-boxes-per-user"],
            arg_group="Properties",
            help="When specified, limits the maximum number of dev boxes a single user can create across all pools in the project. This will have no effect on existing dev boxes when reduced.",
            nullable=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        _args_schema.serverless_gpu_sessions_settings = AAZObjectArg(
            options=["-s", "--serverless-gpu-sessions-settings"],
            arg_group="Properties",
            help="Settings to be used for serverless GPU.",
            nullable=True,
        )
        _args_schema.workspace_storage_settings = AAZObjectArg(
            options=["-w", "--workspace-storage-settings"],
            arg_group="Properties",
            help="Settings to be used for workspace storage.",
            nullable=True,
        )

        azure_ai_services_settings = cls._args_schema.azure_ai_services_settings
        azure_ai_services_settings.azure_ai_services_mode = AAZStrArg(
            options=["azure-ai-services-mode"],
            help="The property indicates whether Azure AI services is enabled.",
            nullable=True,
            enum={"AutoDeploy": "AutoDeploy", "Disabled": "Disabled"},
        )

        customization_settings = cls._args_schema.customization_settings
        customization_settings.identities = AAZListArg(
            options=["identities"],
            help="The identities that can to be used in customization scenarios; e.g., to clone a repository.",
            nullable=True,
        )
        customization_settings.user_customizations_enable_status = AAZStrArg(
            options=["user-customizations-enable-status"],
            help="Indicates whether user customizations are enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        identities = cls._args_schema.customization_settings.identities
        identities.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.customization_settings.identities.Element
        _element.identity_resource_id = AAZResourceIdArg(
            options=["identity-resource-id"],
            help="Ex: /subscriptions/fa5fc227-a624-475e-b696-cdd604c735bc/resourceGroups/<resource group>/providers/Microsoft.ManagedIdentity/userAssignedIdentities/myId. Mutually exclusive with identityType systemAssignedIdentity.",
            nullable=True,
        )
        _element.identity_type = AAZStrArg(
            options=["identity-type"],
            help="Values can be systemAssignedIdentity or userAssignedIdentity",
            nullable=True,
            enum={"systemAssignedIdentity": "systemAssignedIdentity", "userAssignedIdentity": "userAssignedIdentity"},
        )

        dev_box_auto_delete_settings = cls._args_schema.dev_box_auto_delete_settings
        dev_box_auto_delete_settings.delete_mode = AAZStrArg(
            options=["delete-mode"],
            help="Indicates the delete mode for Dev Boxes within this project.",
            nullable=True,
            enum={"Auto": "Auto", "Manual": "Manual"},
        )
        dev_box_auto_delete_settings.grace_period = AAZStrArg(
            options=["grace-period"],
            help="ISO8601 duration required for the dev box to be marked for deletion prior to it being deleted. ISO8601 format PT[n]H[n]M[n]S.",
            nullable=True,
        )
        dev_box_auto_delete_settings.inactive_threshold = AAZStrArg(
            options=["inactive-threshold"],
            help="ISO8601 duration required for the dev box to not be inactive prior to it being scheduled for deletion.  ISO8601 format PT[n]H[n]M[n]S.",
            nullable=True,
        )

        serverless_gpu_sessions_settings = cls._args_schema.serverless_gpu_sessions_settings
        serverless_gpu_sessions_settings.max_concurrent_sessions_per_project = AAZIntArg(
            options=["max-concurrent-sessions-per-project"],
            help="When specified, limits the maximum number of concurrent sessions across all pools in the project.",
            nullable=True,
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        serverless_gpu_sessions_settings.serverless_gpu_sessions_mode = AAZStrArg(
            options=["serverless-gpu-sessions-mode"],
            help="The property indicates whether serverless GPU access is enabled on the project.",
            nullable=True,
            enum={"AutoDeploy": "AutoDeploy", "Disabled": "Disabled"},
        )

        workspace_storage_settings = cls._args_schema.workspace_storage_settings
        workspace_storage_settings.workspace_storage_mode = AAZStrArg(
            options=["workspace-storage-mode"],
            help="Indicates whether workspace storage is enabled.",
            nullable=True,
            enum={"AutoDeploy": "AutoDeploy", "Disabled": "Disabled"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ProjectsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ProjectsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ProjectsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "projectName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_project_read(cls._schema_on_200)

            return cls._schema_on_200

    class ProjectsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "projectName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_project_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".identity_type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("azureAiServicesSettings", AAZObjectType, ".azure_ai_services_settings")
                properties.set_prop("catalogSettings", AAZObjectType)
                properties.set_prop("customizationSettings", AAZObjectType, ".customization_settings")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("devBoxAutoDeleteSettings", AAZObjectType, ".dev_box_auto_delete_settings")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("maxDevBoxesPerUser", AAZIntType, ".max_dev_boxes_per_user")
                properties.set_prop("serverlessGpuSessionsSettings", AAZObjectType, ".serverless_gpu_sessions_settings")
                properties.set_prop("workspaceStorageSettings", AAZObjectType, ".workspace_storage_settings")

            azure_ai_services_settings = _builder.get(".properties.azureAiServicesSettings")
            if azure_ai_services_settings is not None:
                azure_ai_services_settings.set_prop("azureAiServicesMode", AAZStrType, ".azure_ai_services_mode")

            catalog_settings = _builder.get(".properties.catalogSettings")
            if catalog_settings is not None:
                catalog_settings.set_prop("catalogItemSyncTypes", AAZListType, ".catalog_item_sync_types")

            catalog_item_sync_types = _builder.get(".properties.catalogSettings.catalogItemSyncTypes")
            if catalog_item_sync_types is not None:
                catalog_item_sync_types.set_elements(AAZStrType, ".")

            customization_settings = _builder.get(".properties.customizationSettings")
            if customization_settings is not None:
                customization_settings.set_prop("identities", AAZListType, ".identities")
                customization_settings.set_prop("userCustomizationsEnableStatus", AAZStrType, ".user_customizations_enable_status")

            identities = _builder.get(".properties.customizationSettings.identities")
            if identities is not None:
                identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.customizationSettings.identities[]")
            if _elements is not None:
                _elements.set_prop("identityResourceId", AAZStrType, ".identity_resource_id")
                _elements.set_prop("identityType", AAZStrType, ".identity_type")

            dev_box_auto_delete_settings = _builder.get(".properties.devBoxAutoDeleteSettings")
            if dev_box_auto_delete_settings is not None:
                dev_box_auto_delete_settings.set_prop("deleteMode", AAZStrType, ".delete_mode")
                dev_box_auto_delete_settings.set_prop("gracePeriod", AAZStrType, ".grace_period")
                dev_box_auto_delete_settings.set_prop("inactiveThreshold", AAZStrType, ".inactive_threshold")

            serverless_gpu_sessions_settings = _builder.get(".properties.serverlessGpuSessionsSettings")
            if serverless_gpu_sessions_settings is not None:
                serverless_gpu_sessions_settings.set_prop("maxConcurrentSessionsPerProject", AAZIntType, ".max_concurrent_sessions_per_project")
                serverless_gpu_sessions_settings.set_prop("serverlessGpuSessionsMode", AAZStrType, ".serverless_gpu_sessions_mode")

            workspace_storage_settings = _builder.get(".properties.workspaceStorageSettings")
            if workspace_storage_settings is not None:
                workspace_storage_settings.set_prop("workspaceStorageMode", AAZStrType, ".workspace_storage_mode")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_project_read = None

    @classmethod
    def _build_schema_project_read(cls, _schema):
        if cls._schema_project_read is not None:
            _schema.id = cls._schema_project_read.id
            _schema.identity = cls._schema_project_read.identity
            _schema.location = cls._schema_project_read.location
            _schema.name = cls._schema_project_read.name
            _schema.properties = cls._schema_project_read.properties
            _schema.system_data = cls._schema_project_read.system_data
            _schema.tags = cls._schema_project_read.tags
            _schema.type = cls._schema_project_read.type
            return

        cls._schema_project_read = _schema_project_read = AAZObjectType()

        project_read = _schema_project_read
        project_read.id = AAZStrType(
            flags={"read_only": True},
        )
        project_read.identity = AAZIdentityObjectType()
        project_read.location = AAZStrType(
            flags={"required": True},
        )
        project_read.name = AAZStrType(
            flags={"read_only": True},
        )
        project_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        project_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        project_read.tags = AAZDictType()
        project_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_project_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_project_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_project_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_project_read.properties
        properties.azure_ai_services_settings = AAZObjectType(
            serialized_name="azureAiServicesSettings",
        )
        properties.catalog_settings = AAZObjectType(
            serialized_name="catalogSettings",
        )
        properties.customization_settings = AAZObjectType(
            serialized_name="customizationSettings",
        )
        properties.description = AAZStrType()
        properties.dev_box_auto_delete_settings = AAZObjectType(
            serialized_name="devBoxAutoDeleteSettings",
        )
        properties.dev_center_id = AAZStrType(
            serialized_name="devCenterId",
        )
        properties.dev_center_uri = AAZStrType(
            serialized_name="devCenterUri",
            flags={"read_only": True},
        )
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.max_dev_boxes_per_user = AAZIntType(
            serialized_name="maxDevBoxesPerUser",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.serverless_gpu_sessions_settings = AAZObjectType(
            serialized_name="serverlessGpuSessionsSettings",
        )
        properties.workspace_storage_settings = AAZObjectType(
            serialized_name="workspaceStorageSettings",
        )

        azure_ai_services_settings = _schema_project_read.properties.azure_ai_services_settings
        azure_ai_services_settings.azure_ai_services_mode = AAZStrType(
            serialized_name="azureAiServicesMode",
        )

        catalog_settings = _schema_project_read.properties.catalog_settings
        catalog_settings.catalog_item_sync_types = AAZListType(
            serialized_name="catalogItemSyncTypes",
        )

        catalog_item_sync_types = _schema_project_read.properties.catalog_settings.catalog_item_sync_types
        catalog_item_sync_types.Element = AAZStrType()

        customization_settings = _schema_project_read.properties.customization_settings
        customization_settings.identities = AAZListType()
        customization_settings.user_customizations_enable_status = AAZStrType(
            serialized_name="userCustomizationsEnableStatus",
        )

        identities = _schema_project_read.properties.customization_settings.identities
        identities.Element = AAZObjectType()

        _element = _schema_project_read.properties.customization_settings.identities.Element
        _element.identity_resource_id = AAZStrType(
            serialized_name="identityResourceId",
        )
        _element.identity_type = AAZStrType(
            serialized_name="identityType",
        )

        dev_box_auto_delete_settings = _schema_project_read.properties.dev_box_auto_delete_settings
        dev_box_auto_delete_settings.delete_mode = AAZStrType(
            serialized_name="deleteMode",
        )
        dev_box_auto_delete_settings.grace_period = AAZStrType(
            serialized_name="gracePeriod",
        )
        dev_box_auto_delete_settings.inactive_threshold = AAZStrType(
            serialized_name="inactiveThreshold",
        )

        serverless_gpu_sessions_settings = _schema_project_read.properties.serverless_gpu_sessions_settings
        serverless_gpu_sessions_settings.max_concurrent_sessions_per_project = AAZIntType(
            serialized_name="maxConcurrentSessionsPerProject",
        )
        serverless_gpu_sessions_settings.serverless_gpu_sessions_mode = AAZStrType(
            serialized_name="serverlessGpuSessionsMode",
        )

        workspace_storage_settings = _schema_project_read.properties.workspace_storage_settings
        workspace_storage_settings.workspace_storage_mode = AAZStrType(
            serialized_name="workspaceStorageMode",
        )

        system_data = _schema_project_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_project_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_project_read.id
        _schema.identity = cls._schema_project_read.identity
        _schema.location = cls._schema_project_read.location
        _schema.name = cls._schema_project_read.name
        _schema.properties = cls._schema_project_read.properties
        _schema.system_data = cls._schema_project_read.system_data
        _schema.tags = cls._schema_project_read.tags
        _schema.type = cls._schema_project_read.type


__all__ = ["Update"]
