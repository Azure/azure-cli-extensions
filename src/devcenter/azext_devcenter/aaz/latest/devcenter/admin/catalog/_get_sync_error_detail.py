# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter admin catalog get-sync-error-detail",
)
class GetSyncErrorDetail(AAZCommand):
    """Gets catalog synchronization error details.

    :example: Get synchronization error detail
        az devcenter admin catalog get-sync-error-detail --name "CentralCatalog" --dev-center-name "Contoso" --resource-group "rg1"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/devcenters/{}/catalogs/{}/getsyncerrordetails", "2023-10-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.catalog_name = AAZStrArg(
            options=["-n", "--name", "--catalog-name"],
            help="The name of the catalog.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.dev_center_name = AAZStrArg(
            options=["-d", "--dev-center", "--dev-center-name"],
            help="The name of the dev center.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-]{2,25}$",
                max_length=26,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CatalogsGetSyncErrorDetails(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CatalogsGetSyncErrorDetails(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/catalogs/{catalogName}/getSyncErrorDetails",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "catalogName", self.ctx.args.catalog_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "devCenterName", self.ctx.args.dev_center_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.conflicts = AAZListType(
                flags={"read_only": True},
            )
            _schema_on_200.errors = AAZListType(
                flags={"read_only": True},
            )
            _schema_on_200.operation_error = AAZObjectType(
                serialized_name="operationError",
            )
            _GetSyncErrorDetailHelper._build_schema_catalog_error_details_read(_schema_on_200.operation_error)

            conflicts = cls._schema_on_200.conflicts
            conflicts.Element = AAZObjectType()

            _element = cls._schema_on_200.conflicts.Element
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.path = AAZStrType(
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.errors
            errors.Element = AAZObjectType()

            _element = cls._schema_on_200.errors.Element
            _element.error_details = AAZListType(
                serialized_name="errorDetails",
                flags={"read_only": True},
            )
            _element.path = AAZStrType(
                flags={"read_only": True},
            )

            error_details = cls._schema_on_200.errors.Element.error_details
            error_details.Element = AAZObjectType()
            _GetSyncErrorDetailHelper._build_schema_catalog_error_details_read(error_details.Element)

            return cls._schema_on_200


class _GetSyncErrorDetailHelper:
    """Helper class for GetSyncErrorDetail"""

    _schema_catalog_error_details_read = None

    @classmethod
    def _build_schema_catalog_error_details_read(cls, _schema):
        if cls._schema_catalog_error_details_read is not None:
            _schema.code = cls._schema_catalog_error_details_read.code
            _schema.message = cls._schema_catalog_error_details_read.message
            return

        cls._schema_catalog_error_details_read = _schema_catalog_error_details_read = AAZObjectType()

        catalog_error_details_read = _schema_catalog_error_details_read
        catalog_error_details_read.code = AAZStrType()
        catalog_error_details_read.message = AAZStrType()

        _schema.code = cls._schema_catalog_error_details_read.code
        _schema.message = cls._schema_catalog_error_details_read.message


__all__ = ["GetSyncErrorDetail"]
