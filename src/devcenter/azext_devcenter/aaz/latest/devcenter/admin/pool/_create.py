# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter admin pool create",
)
class Create(AAZCommand):
    """Create a pool.

    :example: Create pool using unmanaged network
        az devcenter admin pool create --location "eastus" --devbox-definition-name "WebDevBox" --network-connection-name "Network1-westus2" --pool-name "DevPool" --project-name "DevProject" --resource-group "rg1" --local-administrator "Enabled" --virtual-network-type "Unmanaged" --single-sign-on-status "Enabled"

    :example: Create pool using managed network
        az devcenter admin pool create --location "eastus" --devbox-definition-name "WebDevBox" --network-connection-name "Network1-westus2" --pool-name "DevPool" --project-name "DevProject" --resource-group "rg1" --local-administrator "Enabled" --virtual-network-type "Managed" --managed-virtual-network-region ["westus3"] --single-sign-on-status "Enabled"

    :example: Create a pool with stop on disconnect enabled
        az devcenter admin pool create --location "eastus" --devbox-definition-name "WebDevBox" --network-connection-name "Network1-westus2" --pool-name "DevPool" --project-name "DevProject" --resource-group "rg1" --local-administrator "Enabled" --virtual-network-type "Unmanaged" --single-sign-on-status "Enabled" --stop-on-disconnect status="Enabled" grace-period-minutes="60"

    :example: Create pool using image definition
        az devcenter admin pool create --location "eastus" --network-connection-name "Network1-westus2" --pool-name "DevPool" --project-name "DevProject" --resource-group "rg1" --local-administrator "Enabled" --virtual-network-type "Unmanaged" --single-sign-on-status "Enabled" --devbox-definition-type "Value" --devbox-definition-image-reference id="/subscriptions/0ac520ee-14c0-480f-b6c9-0a90c58ffff/resourceGroups/rg1/providers/Microsoft.DevCenter/projects/DevProject/images/~Catalog~image2~project-sample-2" --devbox-definition-sku name=""general_i_8c32gb256ssd_v2"
    """

    _aaz_info = {
        "version": "2024-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/projects/{}/pools/{}", "2024-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pool_name = AAZStrArg(
            options=["-n", "--name", "--pool-name"],
            help="Name of the pool.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.project_name = AAZStrArg(
            options=["--project", "--project-name"],
            help="The name of the project. Use `az configure -d project=<project_name>` to configure a default.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="The geo-location where the resource lives. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "DevBoxDefinition"

        _args_schema = cls._args_schema
        _args_schema.devbox_definition_image_reference = AAZObjectArg(
            options=["-i", "--devbox-definition-image-reference"],
            arg_group="DevBoxDefinition",
            help="Image reference information for a definition of the machines that are created from this pool. Will be ignored if the parameter devbox-definition-type is Reference or not provided.",
            is_preview=True,
        )
        _args_schema.devbox_definition_sku = AAZObjectArg(
            options=["-s", "--devbox-definition-sku"],
            arg_group="DevBoxDefinition",
            help="The SKU for Dev Boxes created from the Pool. Will be ignored if the parameter devbox-definition-type is Reference or not provided.",
            is_preview=True,
        )

        devbox_definition_image_reference = cls._args_schema.devbox_definition_image_reference
        devbox_definition_image_reference.id = AAZStrArg(
            options=["id"],
            help="Image ID, or Image version ID. When Image ID is provided, its latest version will be used.",
        )

        devbox_definition_sku = cls._args_schema.devbox_definition_sku
        devbox_definition_sku.capacity = AAZIntArg(
            options=["capacity"],
            help="If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.",
        )
        devbox_definition_sku.family = AAZStrArg(
            options=["family"],
            help="If the service has different generations of hardware, for the same SKU, then that can be captured here.",
        )
        devbox_definition_sku.name = AAZStrArg(
            options=["name"],
            help="The name of the SKU. E.g. P3. It is typically a letter+number code",
            required=True,
        )
        devbox_definition_sku.size = AAZStrArg(
            options=["size"],
            help="The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. ",
        )
        devbox_definition_sku.tier = AAZStrArg(
            options=["tier"],
            help="This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
            enum={"Basic": "Basic", "Free": "Free", "Premium": "Premium", "Standard": "Standard"},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.devbox_definition_name = AAZStrArg(
            options=["-d", "--devbox-definition-name"],
            arg_group="Properties",
            help="Name of a dev box definition in parent project of this pool. Will be ignored if the parameter devbox-definition-type is Value.",
        )
        _args_schema.devbox_definition_type = AAZStrArg(
            options=["-t", "--devbox-definition-type"],
            arg_group="Properties",
            help="Indicates if the pool is created from an existing Dev Box Definition or if one is provided directly.",
            enum={"Reference": "Reference", "Value": "Value"},
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The display name of the pool.",
        )
        _args_schema.license_type = AAZStrArg(
            options=["--license-type"],
            arg_group="Properties",
            help="Specifies the license type indicating the caller has already acquired licenses for the dev boxes that will be created.",
            default="Windows_Client",
            enum={"Windows_Client": "Windows_Client"},
        )
        _args_schema.local_administrator = AAZStrArg(
            options=["--local-administrator"],
            arg_group="Properties",
            help="Indicates whether owners of dev boxes in this pool are added as local administrators on the dev box.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.managed_virtual_network_regions = AAZListArg(
            options=["-m", "--managed-virtual-network-regions"],
            arg_group="Properties",
            help="The regions of the managed virtual network (required when managedNetworkType is Managed).",
        )
        _args_schema.network_connection_name = AAZStrArg(
            options=["-c", "--network-connection-name"],
            arg_group="Properties",
            help="Name of a network connection in parent project of this pool.",
        )
        _args_schema.single_sign_on_status = AAZStrArg(
            options=["--single-sign-on-status"],
            arg_group="Properties",
            help="Indicates whether Dev Boxes in this pool are created with single sign on enabled. The also requires that single sign on be enabled on the tenant.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.stop_on_disconnect = AAZObjectArg(
            options=["--stop-on-disconnect"],
            arg_group="Properties",
            help="Stop on disconnect configuration settings for dev boxes created in this pool.",
        )
        _args_schema.stop_on_no_connect = AAZObjectArg(
            options=["--stop-on-no-connect"],
            arg_group="Properties",
            help="Stop on no connect configuration settings for Dev Boxes created in this pool.",
            is_preview=True,
        )
        _args_schema.virtual_network_type = AAZStrArg(
            options=["--virtual-network-type"],
            arg_group="Properties",
            help="Indicates whether the pool uses a Virtual Network managed by Microsoft or a customer provided network.",
            enum={"Managed": "Managed", "Unmanaged": "Unmanaged"},
        )

        managed_virtual_network_regions = cls._args_schema.managed_virtual_network_regions
        managed_virtual_network_regions.Element = AAZStrArg()

        stop_on_disconnect = cls._args_schema.stop_on_disconnect
        stop_on_disconnect.grace_period_minutes = AAZIntArg(
            options=["grace-period-minutes"],
            help="The specified time in minutes to wait before stopping a dev box once disconnect is detected.",
        )
        stop_on_disconnect.status = AAZStrArg(
            options=["status"],
            help="Whether the feature to stop the dev box on disconnect once the grace period has lapsed is enabled.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        stop_on_no_connect = cls._args_schema.stop_on_no_connect
        stop_on_no_connect.grace_period_minutes = AAZIntArg(
            options=["grace-period-minutes"],
            help="The specified time in minutes to wait before stopping a Dev Box if no connection is made.",
        )
        stop_on_no_connect.status = AAZStrArg(
            options=["status"],
            help="Enables the feature to stop a started Dev Box when it has not been connected to, once the grace period has lapsed.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.PoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/projects/{projectName}/pools/{poolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "poolName", self.ctx.args.pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("devBoxDefinition", AAZObjectType)
                properties.set_prop("devBoxDefinitionName", AAZStrType, ".devbox_definition_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("devBoxDefinitionType", AAZStrType, ".devbox_definition_type")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("licenseType", AAZStrType, ".license_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("localAdministrator", AAZStrType, ".local_administrator", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedVirtualNetworkRegions", AAZListType, ".managed_virtual_network_regions")
                properties.set_prop("networkConnectionName", AAZStrType, ".network_connection_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("singleSignOnStatus", AAZStrType, ".single_sign_on_status")
                properties.set_prop("stopOnDisconnect", AAZObjectType, ".stop_on_disconnect")
                properties.set_prop("stopOnNoConnect", AAZObjectType, ".stop_on_no_connect")
                properties.set_prop("virtualNetworkType", AAZStrType, ".virtual_network_type")

            dev_box_definition = _builder.get(".properties.devBoxDefinition")
            if dev_box_definition is not None:
                dev_box_definition.set_prop("imageReference", AAZObjectType, ".devbox_definition_image_reference")
                dev_box_definition.set_prop("sku", AAZObjectType, ".devbox_definition_sku")

            image_reference = _builder.get(".properties.devBoxDefinition.imageReference")
            if image_reference is not None:
                image_reference.set_prop("id", AAZStrType, ".id")

            sku = _builder.get(".properties.devBoxDefinition.sku")
            if sku is not None:
                sku.set_prop("capacity", AAZIntType, ".capacity")
                sku.set_prop("family", AAZStrType, ".family")
                sku.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                sku.set_prop("size", AAZStrType, ".size")
                sku.set_prop("tier", AAZStrType, ".tier")

            managed_virtual_network_regions = _builder.get(".properties.managedVirtualNetworkRegions")
            if managed_virtual_network_regions is not None:
                managed_virtual_network_regions.set_elements(AAZStrType, ".")

            stop_on_disconnect = _builder.get(".properties.stopOnDisconnect")
            if stop_on_disconnect is not None:
                stop_on_disconnect.set_prop("gracePeriodMinutes", AAZIntType, ".grace_period_minutes")
                stop_on_disconnect.set_prop("status", AAZStrType, ".status")

            stop_on_no_connect = _builder.get(".properties.stopOnNoConnect")
            if stop_on_no_connect is not None:
                stop_on_no_connect.set_prop("gracePeriodMinutes", AAZIntType, ".grace_period_minutes")
                stop_on_no_connect.set_prop("status", AAZStrType, ".status")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.dev_box_count = AAZIntType(
                serialized_name="devBoxCount",
                flags={"read_only": True},
            )
            properties.dev_box_definition = AAZObjectType(
                serialized_name="devBoxDefinition",
            )
            properties.dev_box_definition_name = AAZStrType(
                serialized_name="devBoxDefinitionName",
                flags={"required": True},
            )
            properties.dev_box_definition_type = AAZStrType(
                serialized_name="devBoxDefinitionType",
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.health_status = AAZStrType(
                serialized_name="healthStatus",
            )
            properties.health_status_details = AAZListType(
                serialized_name="healthStatusDetails",
                flags={"read_only": True},
            )
            properties.license_type = AAZStrType(
                serialized_name="licenseType",
                flags={"required": True},
            )
            properties.local_administrator = AAZStrType(
                serialized_name="localAdministrator",
                flags={"required": True},
            )
            properties.managed_virtual_network_regions = AAZListType(
                serialized_name="managedVirtualNetworkRegions",
            )
            properties.network_connection_name = AAZStrType(
                serialized_name="networkConnectionName",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.single_sign_on_status = AAZStrType(
                serialized_name="singleSignOnStatus",
            )
            properties.stop_on_disconnect = AAZObjectType(
                serialized_name="stopOnDisconnect",
            )
            properties.stop_on_no_connect = AAZObjectType(
                serialized_name="stopOnNoConnect",
            )
            properties.virtual_network_type = AAZStrType(
                serialized_name="virtualNetworkType",
            )

            dev_box_definition = cls._schema_on_200_201.properties.dev_box_definition
            dev_box_definition.active_image_reference = AAZObjectType(
                serialized_name="activeImageReference",
            )
            _CreateHelper._build_schema_image_reference_read(dev_box_definition.active_image_reference)
            dev_box_definition.image_reference = AAZObjectType(
                serialized_name="imageReference",
            )
            _CreateHelper._build_schema_image_reference_read(dev_box_definition.image_reference)
            dev_box_definition.sku = AAZObjectType()

            sku = cls._schema_on_200_201.properties.dev_box_definition.sku
            sku.capacity = AAZIntType()
            sku.family = AAZStrType()
            sku.name = AAZStrType(
                flags={"required": True},
            )
            sku.size = AAZStrType()
            sku.tier = AAZStrType()

            health_status_details = cls._schema_on_200_201.properties.health_status_details
            health_status_details.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.health_status_details.Element
            _element.code = AAZStrType(
                flags={"read_only": True},
            )
            _element.message = AAZStrType(
                flags={"read_only": True},
            )

            managed_virtual_network_regions = cls._schema_on_200_201.properties.managed_virtual_network_regions
            managed_virtual_network_regions.Element = AAZStrType()

            stop_on_disconnect = cls._schema_on_200_201.properties.stop_on_disconnect
            stop_on_disconnect.grace_period_minutes = AAZIntType(
                serialized_name="gracePeriodMinutes",
            )
            stop_on_disconnect.status = AAZStrType()

            stop_on_no_connect = cls._schema_on_200_201.properties.stop_on_no_connect
            stop_on_no_connect.grace_period_minutes = AAZIntType(
                serialized_name="gracePeriodMinutes",
            )
            stop_on_no_connect.status = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_image_reference_read = None

    @classmethod
    def _build_schema_image_reference_read(cls, _schema):
        if cls._schema_image_reference_read is not None:
            _schema.exact_version = cls._schema_image_reference_read.exact_version
            _schema.id = cls._schema_image_reference_read.id
            return

        cls._schema_image_reference_read = _schema_image_reference_read = AAZObjectType()

        image_reference_read = _schema_image_reference_read
        image_reference_read.exact_version = AAZStrType(
            serialized_name="exactVersion",
            flags={"read_only": True},
        )
        image_reference_read.id = AAZStrType()

        _schema.exact_version = cls._schema_image_reference_read.exact_version
        _schema.id = cls._schema_image_reference_read.id


__all__ = ["Create"]
