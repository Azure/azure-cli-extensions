# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "devcenter admin devbox-definition create",
)
class Create(AAZCommand):
    """Create a dev box definition.

    :example: Create
        az devcenter admin devbox-definition create --location "eastus" --image-reference id="/subscriptions/0ac520ee-14c0-480f-b6c9-0a90c58ffff/resourceGroups/Example/providers/Microsoft.DevCenter/devcenters/Contoso/galleries/contosogallery/images/exampleImage/version/1.0.0" --os-storage-type "ssd_1024gb" --sku name="general_a_8c32gb_v1" --name "WebDevBox" --dev-center-name "Contoso" --resource-group "rg1"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.devcenter/devcenters/{}/devboxdefinitions/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.devbox_definition_name = AAZStrArg(
            options=["-n", "--name", "--devbox-definition-name"],
            help="The name of the dev box definition.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-_.]{2,62}$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.dev_center_name = AAZStrArg(
            options=["-d", "--dev-center", "--dev-center-name"],
            help="The name of the dev center. Use `az configure -d dev-center=<dev_center_name>` to configure a default.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-]{2,25}$",
                max_length=26,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="The geo-location where the resource lives. Values from: `az account list-locations`. You can configure the default location using `az configure --defaults location=<location>`.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.hibernate_support = AAZStrArg(
            options=["--hibernate-support"],
            is_preview=True,
            arg_group="Properties",
            help="Indicates whether dev boxes created with this definition are capable of hibernation. Not all images are capable of supporting hibernation. To find out more see https://aka.ms/devbox/hibernate",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.image_reference = AAZObjectArg(
            options=["--image-reference"],
            arg_group="Properties",
            help="Image reference information.",
        )
        _args_schema.os_storage_type = AAZStrArg(
            options=["--os-storage-type"],
            arg_group="Properties",
            help="The storage type used for the operating system disk of dev boxes created using this definition.",
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="Properties",
            help="The SKU for dev boxes created using this definition.",
        )

        image_reference = cls._args_schema.image_reference
        image_reference.id = AAZStrArg(
            options=["id"],
            help="Image ID, or Image version ID. When Image ID is provided, its latest version will be used.",
        )

        sku = cls._args_schema.sku
        sku.capacity = AAZIntArg(
            options=["capacity"],
            help="If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.",
        )
        sku.family = AAZStrArg(
            options=["family"],
            help="If the service has different generations of hardware, for the same SKU, then that can be captured here.",
        )
        sku.name = AAZStrArg(
            options=["name"],
            help="The name of the SKU. Ex - P3. It is typically a letter+number code",
            required=True,
        )
        sku.size = AAZStrArg(
            options=["size"],
            help="The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. ",
        )
        sku.tier = AAZStrArg(
            options=["tier"],
            help="This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
            enum={"Basic": "Basic", "Free": "Free", "Premium": "Premium", "Standard": "Standard"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DevBoxDefinitionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DevBoxDefinitionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevCenter/devcenters/{devCenterName}/devboxdefinitions/{devBoxDefinitionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "devBoxDefinitionName", self.ctx.args.devbox_definition_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "devCenterName", self.ctx.args.dev_center_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("hibernateSupport", AAZStrType, ".hibernate_support")
                properties.set_prop("imageReference", AAZObjectType, ".image_reference", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("osStorageType", AAZStrType, ".os_storage_type")
                properties.set_prop("sku", AAZObjectType, ".sku", typ_kwargs={"flags": {"required": True}})

            image_reference = _builder.get(".properties.imageReference")
            if image_reference is not None:
                image_reference.set_prop("id", AAZStrType, ".id")

            sku = _builder.get(".properties.sku")
            if sku is not None:
                sku.set_prop("capacity", AAZIntType, ".capacity")
                sku.set_prop("family", AAZStrType, ".family")
                sku.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                sku.set_prop("size", AAZStrType, ".size")
                sku.set_prop("tier", AAZStrType, ".tier")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.active_image_reference = AAZObjectType(
                serialized_name="activeImageReference",
            )
            _CreateHelper._build_schema_image_reference_read(properties.active_image_reference)
            properties.hibernate_support = AAZStrType(
                serialized_name="hibernateSupport",
            )
            properties.image_reference = AAZObjectType(
                serialized_name="imageReference",
                flags={"required": True},
            )
            _CreateHelper._build_schema_image_reference_read(properties.image_reference)
            properties.image_validation_error_details = AAZObjectType(
                serialized_name="imageValidationErrorDetails",
            )
            properties.image_validation_status = AAZStrType(
                serialized_name="imageValidationStatus",
            )
            properties.os_storage_type = AAZStrType(
                serialized_name="osStorageType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.sku = AAZObjectType(
                flags={"required": True},
            )
            properties.validation_status = AAZStrType(
                serialized_name="validationStatus",
            )

            image_validation_error_details = cls._schema_on_200_201.properties.image_validation_error_details
            image_validation_error_details.code = AAZStrType()
            image_validation_error_details.message = AAZStrType()

            sku = cls._schema_on_200_201.properties.sku
            sku.capacity = AAZIntType()
            sku.family = AAZStrType()
            sku.name = AAZStrType(
                flags={"required": True},
            )
            sku.size = AAZStrType()
            sku.tier = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_image_reference_read = None

    @classmethod
    def _build_schema_image_reference_read(cls, _schema):
        if cls._schema_image_reference_read is not None:
            _schema.exact_version = cls._schema_image_reference_read.exact_version
            _schema.id = cls._schema_image_reference_read.id
            return

        cls._schema_image_reference_read = _schema_image_reference_read = AAZObjectType()

        image_reference_read = _schema_image_reference_read
        image_reference_read.exact_version = AAZStrType(
            serialized_name="exactVersion",
            flags={"read_only": True},
        )
        image_reference_read.id = AAZStrType()

        _schema.exact_version = cls._schema_image_reference_read.exact_version
        _schema.id = cls._schema_image_reference_read.id


__all__ = ["Create"]
