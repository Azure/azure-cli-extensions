# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure_devtools.scenario_tests import SingleValueReplacer
from azure.cli.testsdk.preparers import NoTrafficRecordingPreparer
from azure.cli.testsdk.reverse_dependency import get_dummy_cli


class VirtualNetworkPreparer(NoTrafficRecordingPreparer, SingleValueReplacer):
    def __init__(
        self,
        resource_group_key="rg",
        key="vn",
        name_prefix="clitest.vn",
        random_name_length=24,
    ):
        super(VirtualNetworkPreparer, self).__init__(name_prefix, random_name_length)
        self.cli_ctx = get_dummy_cli()
        self.key = key
        self.resource_group_key = resource_group_key
        self.name_prefix = name_prefix
        self.random_name_length = random_name_length

    def create_resource(self, name, **_):
        cmd = 'az network vnet create --resource-group {} --name {} --location "westus3"'
        cmd = cmd.format(self.test_class_instance.kwargs.get(self.resource_group_key), name)
        self.live_only_execute(self.cli_ctx, cmd)
        self.test_class_instance.kwargs[self.key] = name
        return {self.key: name}

    def remove_resource(self, name, **_):
        cmd = 'az network vnet delete --resource-group {} --name {}'
        cmd = cmd.format(self.test_class_instance.kwargs.get(self.resource_group_key), name)
        self.live_only_execute(self.cli_ctx, cmd)


class SubnetPreparer(NoTrafficRecordingPreparer, SingleValueReplacer):
    def __init__(
        self,
        virtual_network_key="vn",
        resource_group_key="rg",
        key="subnets",
        name_prefix="clitest.subnets",
        random_name_length=24,
    ):
        super(SubnetPreparer, self).__init__(name_prefix, random_name_length)
        self.cli_ctx = get_dummy_cli()
        self.key = key
        self.virtual_network_key = virtual_network_key
        self.resource_group_key = resource_group_key
        self.name_prefix = name_prefix
        self.random_name_length = random_name_length

    def create_resource(self, name, **_):
        cmd = 'az network vnet subnet create -n {} --vnet-name {} -g {} --address-prefixes "10.0.0.0/21"'
        cmd = cmd.format(
            name,
            self.test_class_instance.kwargs.get(self.virtual_network_key),
            self.test_class_instance.kwargs.get(self.resource_group_key),
        )
        self.live_only_execute(self.cli_ctx, cmd)
        self.test_class_instance.kwargs[self.key] = name
        return {self.key: name}

    def remove_resource(self, name, **_):
        cmd = 'az network vnet subnet delete --name {} --resource-group {} --vnet-name {}'
        cmd = cmd.format(
            name,
            self.test_class_instance.kwargs.get(self.resource_group_key),
            self.test_class_instance.kwargs.get(self.virtual_network_key),
        )
        self.live_only_execute(self.cli_ctx, cmd)

class SigPreparer(NoTrafficRecordingPreparer, SingleValueReplacer):
    def __init__(
        self,
        resource_group_key="rg",
        key="sigId",
        name_prefix="clitest",
        random_name_length=24,
    ):
        super(SigPreparer, self).__init__(name_prefix, random_name_length)
        self.cli_ctx = get_dummy_cli()
        self.key = key
        self.resource_group_key = resource_group_key

    def create_resource(self, name, **_):

        self.test_class_instance.kwargs.update({
            'devcenterName': self.test_class_instance.create_random_name(prefix='cli', length=24),
            'identityName': self.test_class_instance.create_random_name(prefix='testid_', length=24)
        })

        test_identity = self.test_class_instance.cmd('az identity create '
                    '--resource-group {rg} '
                    '--name {identityName}').get_output_in_json()

        self.test_class_instance.kwargs.update({
            'userAssignedIdentity': test_identity['id'],
            'identityPrincipalId': test_identity['principalId']
        })

        dev_center = self.test_class_instance.cmd('az devcenter admin devcenter create '
                            '--identity-type "UserAssigned" '
                            '--user-assigned-identities "{{\\"{userAssignedIdentity}\\":{{}}}}" '
                            '--location "{location}" '
                            '--tags CostCode="12345" '
                            '--name "{devcenterName}" '
                            '--resource-group "{rg}"').get_output_in_json()

        self.test_class_instance.kwargs.update({
            'devCenterId': dev_center['id']
        })

        self.test_class_instance.kwargs.update({
            'sigName': self.test_class_instance.create_random_name(prefix='cli', length=24),
            'imageDefName': self.test_class_instance.create_random_name(prefix='cli', length=12),
            'computeVmName': self.test_class_instance.create_random_name(prefix='cli', length=12),
            'computeVmPassword': 'Cli!123123fakepassword',
            'computeUserName': self.test_class_instance.create_random_name(prefix='cli', length=12),
            'publisher': "MicrosoftWindowsDesktop",
            'offer': "Windows-10",
            'sku': "win10-21h2-entn-g2",
            'imageVersion': "1.0.0"
        })

        sig = self.test_class_instance.cmd('az sig create -r "{sigName}" --location "{location}" -g "{rg}"').get_output_in_json()

        cmd_sig_image_def = 'az sig image-definition create -i "{}" -p "{}" -g "{}" -f "{}" -s "{}" --location "{}" --os-type "Windows" -r "{}" --hyper-v-generation "V2" --features SecurityType=TrustedLaunch'
        cmd_sig_image_def = cmd_sig_image_def.format(
            self.test_class_instance.kwargs.get('imageDefName'),
            self.test_class_instance.kwargs.get('publisher'),
            self.test_class_instance.kwargs.get(self.resource_group_key),
            self.test_class_instance.kwargs.get('offer'),
            self.test_class_instance.kwargs.get('sku'),
            self.test_class_instance.kwargs.get('location'),
            self.test_class_instance.kwargs.get('sigName'),
        )
        self.live_only_execute(self.cli_ctx, cmd_sig_image_def)

        self.test_class_instance.kwargs.update({
            'sigId': sig['id']
        })

        # Create compute virtual machine
        cmd_vm = 'az vm create -n "{}" -g "{}" --image "MicrosoftWindowsDesktop:Windows-10:win10-21h2-entn-g2:19044.2486.230107" --location "{}" --security-type TrustedLaunch --admin-password "{}" --admin-username "{}"'
        cmd_vm = cmd_vm.format(
            self.test_class_instance.kwargs.get('computeVmName'),
            self.test_class_instance.kwargs.get(self.resource_group_key),
            self.test_class_instance.kwargs.get('location'),
            self.test_class_instance.kwargs.get('computeVmPassword'),
            self.test_class_instance.kwargs.get('computeUserName')
        )
        self.live_only_execute(self.cli_ctx, cmd_vm)
      

        disk = self.test_class_instance.cmd('az disk list -g "{rg}"').get_output_in_json()
        self.test_class_instance.kwargs.update({
            'diskId': disk[0]['id'],
        })

        cmd_image_version = 'az sig image-version create -g "{}" --gallery-name "{}" --gallery-image-definition "{}" --location "{}" --gallery-image-version {} --os-snapshot "{}" '
        cmd_image_version = cmd_image_version.format(
            self.test_class_instance.kwargs.get(self.resource_group_key),
            self.test_class_instance.kwargs.get('sigName'),
            self.test_class_instance.kwargs.get('imageDefName'),
            self.test_class_instance.kwargs.get('location'),
            self.test_class_instance.kwargs.get('imageVersion'),
            self.test_class_instance.kwargs.get('diskId'),
        )
        self.live_only_execute(self.cli_ctx, cmd_image_version)

        self.test_class_instance.kwargs.update({
            'windows365ObjectId': '8eec7c09-06ae-48e9-aafd-9fb31a5d5175'
        })

        cmd_role_1 = 'az role assignment create --role "Contributor" --assignee "{}" --scope "{}"'
        cmd_role_1 = cmd_role_1.format(
            self.test_class_instance.kwargs.get('identityPrincipalId'),
            self.test_class_instance.kwargs.get('sigId'),
        )
        cmd_role_2 = 'az role assignment create --role "Reader" --assignee "{}" --scope "{}"'
        cmd_role_2 = cmd_role_2.format(
            self.test_class_instance.kwargs.get('windows365ObjectId'),
            self.test_class_instance.kwargs.get('sigId'),
        )
        self.live_only_execute(self.cli_ctx, cmd_role_1)
        self.live_only_execute(self.cli_ctx, cmd_role_2)

        return {self.key: self.test_class_instance.kwargs.get('sigId')}

