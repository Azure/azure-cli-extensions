# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer)
from .. import (
    try_manual,
)

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))

# Test class for Scenario
@try_manual
class DevcenterScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(DevcenterScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscriptionId': self.get_subscription_id(),
            'devcenterName': self.create_random_name(prefix='cli', length=24),
            'location': 'westus3'
        })

    @ResourceGroupPreparer(name_prefix='clitestdevcenter_rg1'[:7], key='rg', parameter_name='rg')
    def test_devcenter_scenario(self):
        self.kwargs.update({
            'identityName': self.create_random_name(prefix='testid_', length=24),
            'devcenterName2': self.create_random_name(prefix='cli', length=24)
        })

        self.cmd('az devcenter admin devcenter list '
             '--resource-group "{rg}" ',
            checks=[
                self.check("length(@)", 0),
            ]
        )

        self.cmd('az devcenter admin devcenter create '
             '--location "{location}" '
             '--tags CostCode="12345" '
             '--name "{devcenterName}" '
             '--resource-group "{rg}"',
             checks=[self.check('name', "{devcenterName}")])

        self.cmd('az devcenter admin devcenter list '
             '--resource-group "{rg}" ',
            checks=[
                self.check("length(@)", 1),
                self.check("[0].name", "{devcenterName}"),
            ]
        )

        test_identity = self.cmd('az identity create '
                                 '--resource-group {rg} '
                                 '--name {identityName}').get_output_in_json()
        
        self.kwargs.update({
            'userAssignedIdentity': test_identity['id'],
            'identityPrincipalId': test_identity['principalId']
        })

        self.cmd('az devcenter admin devcenter create '
             '--identity-type "UserAssigned" '
             '--user-assigned-identities "{{\\"{userAssignedIdentity}\\":{{}}}}" '
             '--location "{location}" '
             '--tags CostCode="12345" '
             '--name "{devcenterName2}" '
             '--resource-group "{rg}"',
             checks=[
                self.check('identity.type', 'UserAssigned')]
        )

        self.cmd('az devcenter admin devcenter update '
             '--tags CostCode="123" '
             '--location "{location}" '
             '--name "{devcenterName2}" '
             '--resource-group "{rg}"',
             checks=[self.check('tags.CostCode', '123')])

        self.cmd('az devcenter admin devcenter list '
             '--resource-group "{rg}" ',
            checks=[
                self.check("length(@)", 2),
            ]
        )

        self.cmd('az devcenter admin devcenter show '
             '--name "{devcenterName}" '
             '--resource-group "{rg}"',
             checks=[
                self.check('name', "{devcenterName}"),
                self.check('tags.CostCode', '12345')
             ])

        self.cmd('az devcenter admin devcenter show '
             '--name "{devcenterName2}" '
             '--resource-group "{rg}"',
             checks=[
                self.check('name', "{devcenterName2}"),
                self.check('tags.CostCode', '123')
             ])

        self.cmd('az devcenter admin devcenter delete --yes '
                 '--name "{devcenterName}" '
                 '--resource-group "{rg}"',
                 checks=[])

        self.cmd('az devcenter admin devcenter list '
             '--resource-group "{rg}" ',
            checks=[
                self.check("length(@)", 1),
            ]
        )

        self.cmd('az devcenter admin devcenter delete --yes '
                 '--name "{devcenterName2}" '
                 '--resource-group "{rg}"',
                 checks=[])

        self.cmd('az devcenter admin devcenter list '
             '--resource-group "{rg}" ',
            checks=[
                self.check("length(@)", 0),
            ]
        )

