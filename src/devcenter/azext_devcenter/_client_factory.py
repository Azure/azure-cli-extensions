# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from .helper import get_project_data

# data plane


def cf_devcenter_dataplane(cli_ctx, dev_center, project_name=None):
    from azure.cli.core.commands.client_factory import get_mgmt_service_client
    from azext_devcenter.vendored_sdks.devcenter_dataplane import (
        DevCenterDataplaneClient,
    )

    project = get_project_data(cli_ctx, dev_center, project_name)

    # We need to set the project name even if we don't need this information
    # since initializing DevCenterDataplaneClient requires this param
    if project_name is None:
        project_name = project["name"]
    endpoint = project["devCenterUri"]

    cli_ctx.cloud.endpoints.active_directory_resource_id = "https://devcenter.azure.com"

    return get_mgmt_service_client(
        cli_ctx,
        DevCenterDataplaneClient,
        subscription_bound=False,
        base_url_bound=False,
        endpoint=endpoint,
        project_name=project_name,
    )


def cf_project_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).project


def cf_pool_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).pool


def cf_schedule_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).schedule


def cf_dev_box_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).dev_box


def cf_environment_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).environments


def cf_catalog_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).catalogs


def cf_environment_definition_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).environment_definitions


def cf_environment_type_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).environment_type


def cf_notification_setting_dp(cli_ctx, dev_center, *_):
    return cf_devcenter_dataplane(cli_ctx, dev_center).notification_setting


# control plane


def cf_devcenter_cl(cli_ctx, *_):
    from azure.cli.core.commands.client_factory import get_mgmt_service_client
    from azext_devcenter.vendored_sdks.devcenter import DevCenter

    return get_mgmt_service_client(cli_ctx, DevCenter)


def cf_dev_center(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).dev_centers


def cf_project(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).projects


def cf_attached_network(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).attached_networks


def cf_gallery(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).galleries


def cf_image(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).images


def cf_image_version(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).image_versions


def cf_catalog(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).catalogs


def cf_environment_type(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).environment_types


def cf_project_allowed_environment_type(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).project_allowed_environment_types


def cf_project_environment_type(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).project_environment_types


def cf_dev_box_definition(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).dev_box_definitions


def cf_operation_statuses(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).operation_statuses


def cf_usage(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).usages


def cf_check_name_availability(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).check_name_availability


def cf_sku(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).skus


def cf_pool(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).pools


def cf_schedule(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).schedules


def cf_network_connection(cli_ctx, *_):
    return cf_devcenter_cl(cli_ctx).network_connections
