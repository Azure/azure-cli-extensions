# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=wildcard-import
# pylint: disable=unused-wildcard-import
import argparse
from collections import defaultdict
from knack.util import CLIError
from .generated.action import *  # noqa: F403
try:
    from .manual.action import *  # noqa: F403
except ImportError as e:
    if e.name.endswith('manual.action'):
        pass
    else:
        raise e

class AddGitHub(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        if option_string == '--ado-git':
            namespace.ado_git = action
        else:
            namespace.git_hub = action

    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'uri':
                d['uri'] = v[0]

            elif kl == 'branch':
                d['branch'] = v[0]

            elif kl == 'secret-identifier':
                d['secret_identifier'] = v[0]

            elif kl == 'path':
                d['path'] = v[0]

            else:
                raise CLIError(
                    'Unsupported Key {} is provided for parameter git-hub. All possible keys are: uri, branch,'
                    ' secret-identifier, path'.format(k)
                )

        return d
