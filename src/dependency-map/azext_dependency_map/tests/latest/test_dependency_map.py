# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *


class DependencyMapScenario(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='cli_test_dependency_map', location='westus2')
    def test_dependency_map_basic_scenario(self, resource_group):
        self.kwargs.update({
            'rg': resource_group,
            'map-name': self.create_random_name('climap', 12)
        })
        self.cmd('dependency-map create -n {map-name} -g {rg} -ojson', checks=[
            JMESPathCheck('name', self.kwargs['map-name']),
            JMESPathCheck('resourceGroup', resource_group),
            JMESPathCheck('type', "microsoft.dependencymap/maps"),
            JMESPathCheck('tags', None)
        ])

        self.cmd('dependency-map list -g {rg} -ojson', checks=[
            JMESPathCheck('type(@)', 'array'),
            JMESPathCheck('length(@)', 1),
            JMESPathCheck('[0].name', self.kwargs['map-name'])
        ])

        self.cmd('dependency-map show -n {map-name} -g {rg} -ojson', checks=[
            JMESPathCheck('name', self.kwargs['map-name']),
            JMESPathCheck('location', 'westus2')
        ])

        self.cmd('dependency-map update -n {map-name} -g {rg} --tag owner=clitest -ojson', checks=[
            JMESPathCheck('name', self.kwargs['map-name']),
            JMESPathCheck('tags.owner', 'clitest')
        ])

        self.cmd('dependency-map delete -n {map-name} -g {rg} -y')

        self.cmd('dependency-map list -g {rg} -ojson', checks=[
            JMESPathCheck('type(@)', 'array'),
            JMESPathCheck('length(@)', 0)
        ])

    @ResourceGroupPreparer(name_prefix='cli_test_dependency_map_discovery_source', location='westus2')
    def test_dependency_map_discovery_source_basic_scenario(self, resource_group):
        self.kwargs.update({
            'rg': resource_group,
            'map-name': self.create_random_name('climap', 12),
            "source-name": self.create_random_name('clidis', 12),
        })
        self.cmd('dependency-map create -n {map-name} -g {rg} -ojson', checks=[
            JMESPathCheck('name', self.kwargs['map-name']),
            JMESPathCheck('resourceGroup', resource_group),
            JMESPathCheck('type', "microsoft.dependencymap/maps"),
            JMESPathCheck('tags', None)
        ])
        # source id and source type for now is random string and OffAzure according to spec, might fail in future service version
        self.cmd('dependency-map discovery-source create --map-name {map-name} -g {rg} -n {source-name} --source-type OffAzure --source-id abd -ojson', checks=[
            JMESPathCheck('name', self.kwargs['source-name']),
            JMESPathCheck('resourceGroup', resource_group),
            JMESPathCheck('type', "microsoft.dependencymap/maps/discoverysources"),
            JMESPathCheck('properties.sourceId', "abd"),
            JMESPathCheck('properties.sourceType', "OffAzure"),
            JMESPathCheck('tags', None)
        ])

        self.cmd('dependency-map discovery-source show --map-name {map-name} -g {rg} -n {source-name} -ojson', checks=[
            JMESPathCheck('name', self.kwargs['source-name']),
            JMESPathCheck('resourceGroup', resource_group),
            JMESPathCheck('type', "microsoft.dependencymap/maps/discoverysources"),
            JMESPathCheck('properties.sourceId', "abd"),
            JMESPathCheck('properties.sourceType', "OffAzure"),
            JMESPathCheck('location', 'westus2')
        ])

        self.cmd('dependency-map discovery-source update --map-name {map-name} -g {rg} -n {source-name} --tag owner=clitest -ojson', checks=[
            JMESPathCheck('name', self.kwargs['source-name']),
            JMESPathCheck('tags.owner', 'clitest')
        ])

        self.cmd('dependency-map discovery-source delete --map-name {map-name} -g {rg} -n {source-name} -y')

        self.cmd('dependency-map delete -n {map-name} -g {rg} -y')


