# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_loganalytics.generated._client_factory import cf_data_export
    loganalytics_data_export = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._data_exports_operations#DataExportsO'
        'perations.{}',
        client_factory=cf_data_export)
    with self.command_group('loganalytics data-export', loganalytics_data_export, client_factory=cf_data_export) as g:
        g.custom_command('list', 'loganalytics_data_export_list')
        g.custom_show_command('show', 'loganalytics_data_export_show')
        g.custom_command('create', 'loganalytics_data_export_create')
        g.generic_update_command('update', custom_func_name='loganalytics_data_export_update')
        g.custom_command('delete', 'loganalytics_data_export_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_data_source
    loganalytics_data_source = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._data_sources_operations#DataSourcesO'
        'perations.{}',
        client_factory=cf_data_source)
    with self.command_group('loganalytics data-source', loganalytics_data_source, client_factory=cf_data_source) as g:
        g.custom_command('list', 'loganalytics_data_source_list')
        g.custom_show_command('show', 'loganalytics_data_source_show')
        g.custom_command('create', 'loganalytics_data_source_create')
        g.generic_update_command('update', custom_func_name='loganalytics_data_source_update')
        g.custom_command('delete', 'loganalytics_data_source_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_intelligence_pack
    loganalytics_intelligence_pack = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._intelligence_packs_operations#Intell'
        'igencePacksOperations.{}',
        client_factory=cf_intelligence_pack)
    with self.command_group('loganalytics intelligence-pack', loganalytics_intelligence_pack,
                            client_factory=cf_intelligence_pack) as g:
        g.custom_command('list', 'loganalytics_intelligence_pack_list')
        g.custom_command('disable', 'loganalytics_intelligence_pack_disable')
        g.custom_command('enable', 'loganalytics_intelligence_pack_enable')

    from azext_loganalytics.generated._client_factory import cf_linked_service
    loganalytics_linked_service = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._linked_services_operations#LinkedSer'
        'vicesOperations.{}',
        client_factory=cf_linked_service)
    with self.command_group('loganalytics linked-service', loganalytics_linked_service,
                            client_factory=cf_linked_service) as g:
        g.custom_command('list', 'loganalytics_linked_service_list')
        g.custom_show_command('show', 'loganalytics_linked_service_show')
        g.custom_command('create', 'loganalytics_linked_service_create', supports_no_wait=True)
        g.generic_update_command('update', setter_name='begin_create_or_update',
                                 custom_func_name='loganalytics_linked_service_update', supports_no_wait=True)
        g.custom_command('delete', 'loganalytics_linked_service_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_linked_service_show')

    from azext_loganalytics.generated._client_factory import cf_linked_storage_account
    loganalytics_linked_storage_account = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._linked_storage_accounts_operations#L'
        'inkedStorageAccountsOperations.{}',
        client_factory=cf_linked_storage_account)
    with self.command_group('loganalytics linked-storage-account', loganalytics_linked_storage_account,
                            client_factory=cf_linked_storage_account) as g:
        g.custom_command('list', 'loganalytics_linked_storage_account_list')
        g.custom_show_command('show', 'loganalytics_linked_storage_account_show')
        g.custom_command('create', 'loganalytics_linked_storage_account_create')
        g.generic_update_command('update', custom_func_name='loganalytics_linked_storage_account_update')
        g.custom_command('delete', 'loganalytics_linked_storage_account_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_management_group
    loganalytics_management_group = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._management_groups_operations#Managem'
        'entGroupsOperations.{}',
        client_factory=cf_management_group)
    with self.command_group('loganalytics management-group', loganalytics_management_group,
                            client_factory=cf_management_group) as g:
        g.custom_command('list', 'loganalytics_management_group_list')

    from azext_loganalytics.generated._client_factory import cf_operation_statuses
    loganalytics_operation_statuses = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._operation_statuses_operations#Operat'
        'ionStatusesOperations.{}',
        client_factory=cf_operation_statuses)
    with self.command_group('loganalytics operation-statuses', loganalytics_operation_statuses,
                            client_factory=cf_operation_statuses) as g:
        g.custom_show_command('show', 'loganalytics_operation_statuses_show')

    from azext_loganalytics.generated._client_factory import cf_shared_key
    loganalytics_shared_key = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._shared_keys_operations#SharedKeysOpe'
        'rations.{}',
        client_factory=cf_shared_key)
    with self.command_group('loganalytics shared-key', loganalytics_shared_key, client_factory=cf_shared_key) as g:
        g.custom_command('get-shared-key', 'loganalytics_shared_key_get_shared_key')
        g.custom_command('regenerate', 'loganalytics_shared_key_regenerate')

    from azext_loganalytics.generated._client_factory import cf_usage
    loganalytics_usage = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._usages_operations#UsagesOperations.{'
        '}',
        client_factory=cf_usage)
    with self.command_group('loganalytics usage', loganalytics_usage, client_factory=cf_usage) as g:
        g.custom_command('list', 'loganalytics_usage_list')

    from azext_loganalytics.generated._client_factory import cf_storage_insight_config
    loganalytics_storage_insight_config = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._storage_insight_configs_operations#S'
        'torageInsightConfigsOperations.{}',
        client_factory=cf_storage_insight_config)
    with self.command_group('loganalytics storage-insight-config', loganalytics_storage_insight_config,
                            client_factory=cf_storage_insight_config) as g:
        g.custom_command('list', 'loganalytics_storage_insight_config_list')
        g.custom_show_command('show', 'loganalytics_storage_insight_config_show')
        g.custom_command('create', 'loganalytics_storage_insight_config_create')
        g.generic_update_command('update', custom_func_name='loganalytics_storage_insight_config_update')
        g.custom_command('delete', 'loganalytics_storage_insight_config_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_saved_search
    loganalytics_saved_search = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._saved_searches_operations#SavedSearc'
        'hesOperations.{}',
        client_factory=cf_saved_search)
    with self.command_group('loganalytics saved-search', loganalytics_saved_search,
                            client_factory=cf_saved_search) as g:
        g.custom_command('list', 'loganalytics_saved_search_list')
        g.custom_show_command('show', 'loganalytics_saved_search_show')
        g.custom_command('create', 'loganalytics_saved_search_create')
        g.generic_update_command('update', custom_func_name='loganalytics_saved_search_update')
        g.custom_command('delete', 'loganalytics_saved_search_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_available_service_tier
    loganalytics_available_service_tier = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._available_service_tiers_operations#A'
        'vailableServiceTiersOperations.{}',
        client_factory=cf_available_service_tier)
    with self.command_group('loganalytics available-service-tier', loganalytics_available_service_tier,
                            client_factory=cf_available_service_tier) as g:
        g.custom_command('list', 'loganalytics_available_service_tier_list')

    from azext_loganalytics.generated._client_factory import cf_gateway
    loganalytics_gateway = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._gateways_operations#GatewaysOperatio'
        'ns.{}',
        client_factory=cf_gateway)
    with self.command_group('loganalytics gateway', loganalytics_gateway, client_factory=cf_gateway) as g:
        g.custom_command('delete', 'loganalytics_gateway_delete', confirmation=True)

    from azext_loganalytics.generated._client_factory import cf_schema
    loganalytics_schema = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._schema_operations#SchemaOperations.{'
        '}',
        client_factory=cf_schema)
    with self.command_group('loganalytics schema', loganalytics_schema, client_factory=cf_schema) as g:
        g.custom_command('get', 'loganalytics_schema_get')

    from azext_loganalytics.generated._client_factory import cf_workspace_purge
    loganalytics_workspace_purge = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._workspace_purge_operations#Workspace'
        'PurgeOperations.{}',
        client_factory=cf_workspace_purge)
    with self.command_group('loganalytics workspace-purge', loganalytics_workspace_purge,
                            client_factory=cf_workspace_purge) as g:
        g.custom_command('purge', 'loganalytics_workspace_purge_purge')
        g.custom_command('show-purge-status', 'loganalytics_workspace_purge_show_purge_status')

    from azext_loganalytics.generated._client_factory import cf_cluster
    loganalytics_cluster = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._clusters_operations#ClustersOperatio'
        'ns.{}',
        client_factory=cf_cluster)
    with self.command_group('loganalytics cluster', loganalytics_cluster, client_factory=cf_cluster) as g:
        g.custom_command('list', 'loganalytics_cluster_list')
        g.custom_show_command('show', 'loganalytics_cluster_show')
        g.custom_command('create', 'loganalytics_cluster_create', supports_no_wait=True)
        g.custom_command('update', 'loganalytics_cluster_update')
        g.custom_command('delete', 'loganalytics_cluster_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_cluster_show')

    from azext_loganalytics.generated._client_factory import cf_table
    loganalytics_table = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._tables_operations#TablesOperations.{'
        '}',
        client_factory=cf_table)
    with self.command_group('loganalytics table', loganalytics_table, client_factory=cf_table) as g:
        g.custom_command('list', 'loganalytics_table_list')
        g.custom_show_command('show', 'loganalytics_table_show')
        g.custom_command('update', 'loganalytics_table_update')

    from azext_loganalytics.generated._client_factory import cf_workspace
    loganalytics_workspace = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._workspaces_operations#WorkspacesOper'
        'ations.{}',
        client_factory=cf_workspace)
    with self.command_group('loganalytics workspace', loganalytics_workspace, client_factory=cf_workspace) as g:
        g.custom_command('list', 'loganalytics_workspace_list')
        g.custom_show_command('show', 'loganalytics_workspace_show')
        g.custom_command('create', 'loganalytics_workspace_create', supports_no_wait=True)
        g.custom_command('update', 'loganalytics_workspace_update')
        g.custom_command('delete', 'loganalytics_workspace_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_workspace_show')

    from azext_loganalytics.generated._client_factory import cf_deleted_workspace
    loganalytics_deleted_workspace = CliCommandType(
        operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._deleted_workspaces_operations#Delete'
        'dWorkspacesOperations.{}',
        client_factory=cf_deleted_workspace)
    with self.command_group('loganalytics deleted-workspace', loganalytics_deleted_workspace,
                            client_factory=cf_deleted_workspace) as g:
        g.custom_command('list', 'loganalytics_deleted_workspace_list')

    with self.command_group('loganalytics', is_experimental=True):
        pass
