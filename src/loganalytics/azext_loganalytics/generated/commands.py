# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_loganalytics.generated._client_factory import (
    cf_dataexport,
    cf_datasource,
    cf_intelligencepack,
    cf_linkedservice,
    cf_linkedstorageaccount,
    cf_managementgroup,
    cf_operationstatuses,
    cf_sharedkey,
    cf_usage,
    cf_storageinsightconfig,
    cf_savedsearch,
    cf_availableservicetier,
    cf_gateway,
    cf_schema,
    cf_workspacepurge,
    cf_cluster,
    cf_table,
    cf_workspace,
    cf_deletedworkspace,
)


loganalytics_dataexport = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._dataexports_operations#dataexportsOperations.{}'
    ),
    client_factory=cf_dataexport,
)


loganalytics_datasource = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._datasources_operations#datasourcesOperations.{}'
    ),
    client_factory=cf_datasource,
)


loganalytics_intelligencepack = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._intelligencepacks_operations#intelligencepacksOperations.{}',
    client_factory=cf_intelligencepack,
)


loganalytics_linkedservice = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._linkedservices_operations#linkedservicesOperations.{}',
    client_factory=cf_linkedservice,
)


loganalytics_linkedstorageaccount = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._linkedstorageaccounts_operations#linkedstorageaccountsOperations.{}',
    client_factory=cf_linkedstorageaccount,
)


loganalytics_managementgroup = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._managementgroups_operations#managementgroupsOperations.{}',
    client_factory=cf_managementgroup,
)


loganalytics_operationstatuses = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._operationstatuses_operations#operationstatusesOperations.{}',
    client_factory=cf_operationstatuses,
)


loganalytics_sharedkey = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._sharedkeys_operations#sharedkeysOperations.{}'
    ),
    client_factory=cf_sharedkey,
)


loganalytics_usage = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._usages_operations#usagesOperations.{}',
    client_factory=cf_usage,
)


loganalytics_storageinsightconfig = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._storageinsightconfigs_operations#storageinsightconfigsOperations.{}',
    client_factory=cf_storageinsightconfig,
)


loganalytics_savedsearch = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._savedsearches_operations#savedsearchesOperations.{}'
    ),
    client_factory=cf_savedsearch,
)


loganalytics_availableservicetier = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._availableservicetiers_operations#availableservicetiersOperations.{}',
    client_factory=cf_availableservicetier,
)


loganalytics_gateway = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._gateways_operations#gatewaysOperations.{}'
    ),
    client_factory=cf_gateway,
)


loganalytics_schema = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._schema_operations#schemaOperations.{}',
    client_factory=cf_schema,
)


loganalytics_workspacepurge = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._workspacepurge_operations#workspacepurgeOperations.{}',
    client_factory=cf_workspacepurge,
)


loganalytics_cluster = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._clusters_operations#clustersOperations.{}'
    ),
    client_factory=cf_cluster,
)


loganalytics_table = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._tables_operations#tablesOperations.{}',
    client_factory=cf_table,
)


loganalytics_workspace = CliCommandType(
    operations_tmpl=(
        'azext_loganalytics.vendored_sdks.loganalytics.operations._workspaces_operations#workspacesOperations.{}'
    ),
    client_factory=cf_workspace,
)


loganalytics_deletedworkspace = CliCommandType(
    operations_tmpl='azext_loganalytics.vendored_sdks.loganalytics.operations._deletedworkspaces_operations#deletedworkspacesOperations.{}',
    client_factory=cf_deletedworkspace,
)


def load_command_table(self, _):

    with self.command_group('loganalytics dataexport', loganalytics_dataexport, client_factory=cf_dataexport) as g:
        g.custom_command('list', 'loganalytics_dataexport_list')
        g.custom_show_command('show', 'loganalytics_dataexport_show')
        g.custom_command('create', 'loganalytics_dataexport_create')
        g.generic_update_command('update', custom_func_name='loganalytics_dataexport_update')
        g.custom_command('delete', 'loganalytics_dataexport_delete', confirmation=True)

    with self.command_group('loganalytics datasource', loganalytics_datasource, client_factory=cf_datasource) as g:
        g.custom_command('list', 'loganalytics_datasource_list')
        g.custom_show_command('show', 'loganalytics_datasource_show')
        g.custom_command('create', 'loganalytics_datasource_create')
        g.generic_update_command('update', custom_func_name='loganalytics_datasource_update')
        g.custom_command('delete', 'loganalytics_datasource_delete', confirmation=True)

    with self.command_group(
        'loganalytics intelligencepack', loganalytics_intelligencepack, client_factory=cf_intelligencepack
    ) as g:
        g.custom_command('list', 'loganalytics_intelligencepack_list')
        g.custom_command('disable', 'loganalytics_intelligencepack_disable')
        g.custom_command('enable', 'loganalytics_intelligencepack_enable')

    with self.command_group(
        'loganalytics linkedservice', loganalytics_linkedservice, client_factory=cf_linkedservice
    ) as g:
        g.custom_command('list', 'loganalytics_linkedservice_list')
        g.custom_show_command('show', 'loganalytics_linkedservice_show')
        g.custom_command('create', 'loganalytics_linkedservice_create', supports_no_wait=True)
        g.generic_update_command(
            'update',
            supports_no_wait=True,
            custom_func_name='loganalytics_linkedservice_update',
            setter_name='begin_create_or_update',
        )
        g.custom_command('delete', 'loganalytics_linkedservice_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_linkedservice_show')

    with self.command_group(
        'loganalytics linkedstorageaccount', loganalytics_linkedstorageaccount, client_factory=cf_linkedstorageaccount
    ) as g:
        g.custom_command('list', 'loganalytics_linkedstorageaccount_list')
        g.custom_show_command('show', 'loganalytics_linkedstorageaccount_show')
        g.custom_command('create', 'loganalytics_linkedstorageaccount_create')
        g.generic_update_command('update', custom_func_name='loganalytics_linkedstorageaccount_update')
        g.custom_command('delete', 'loganalytics_linkedstorageaccount_delete', confirmation=True)

    with self.command_group(
        'loganalytics managementgroup', loganalytics_managementgroup, client_factory=cf_managementgroup
    ) as g:
        g.custom_command('list', 'loganalytics_managementgroup_list')

    with self.command_group(
        'loganalytics operationstatuses', loganalytics_operationstatuses, client_factory=cf_operationstatuses
    ) as g:
        g.custom_show_command('show', 'loganalytics_operationstatuses_show')

    with self.command_group('loganalytics sharedkey', loganalytics_sharedkey, client_factory=cf_sharedkey) as g:
        g.custom_command('get-shared-key', 'loganalytics_sharedkey_get_shared_key')
        g.custom_command('regenerate', 'loganalytics_sharedkey_regenerate')

    with self.command_group('loganalytics usage', loganalytics_usage, client_factory=cf_usage) as g:
        g.custom_command('list', 'loganalytics_usage_list')

    with self.command_group(
        'loganalytics storageinsightconfig', loganalytics_storageinsightconfig, client_factory=cf_storageinsightconfig
    ) as g:
        g.custom_command('list', 'loganalytics_storageinsightconfig_list')
        g.custom_show_command('show', 'loganalytics_storageinsightconfig_show')
        g.custom_command('create', 'loganalytics_storageinsightconfig_create')
        g.generic_update_command('update', custom_func_name='loganalytics_storageinsightconfig_update')
        g.custom_command('delete', 'loganalytics_storageinsightconfig_delete', confirmation=True)

    with self.command_group('loganalytics savedsearch', loganalytics_savedsearch, client_factory=cf_savedsearch) as g:
        g.custom_command('list', 'loganalytics_savedsearch_list')
        g.custom_show_command('show', 'loganalytics_savedsearch_show')
        g.custom_command('create', 'loganalytics_savedsearch_create')
        g.generic_update_command('update', custom_func_name='loganalytics_savedsearch_update')
        g.custom_command('delete', 'loganalytics_savedsearch_delete', confirmation=True)

    with self.command_group(
        'loganalytics availableservicetier', loganalytics_availableservicetier, client_factory=cf_availableservicetier
    ) as g:
        g.custom_command('list', 'loganalytics_availableservicetier_list')

    with self.command_group('loganalytics gateway', loganalytics_gateway, client_factory=cf_gateway) as g:
        g.custom_command('delete', 'loganalytics_gateway_delete', confirmation=True)

    with self.command_group('loganalytics schema', loganalytics_schema, client_factory=cf_schema) as g:
        g.custom_command('get', 'loganalytics_schema_get')

    with self.command_group(
        'loganalytics workspacepurge', loganalytics_workspacepurge, client_factory=cf_workspacepurge
    ) as g:
        g.custom_command('purge', 'loganalytics_workspacepurge_purge')
        g.custom_command('show-purge-status', 'loganalytics_workspacepurge_show_purge_status')

    with self.command_group('loganalytics cluster', loganalytics_cluster, client_factory=cf_cluster) as g:
        g.custom_command('list', 'loganalytics_cluster_list')
        g.custom_show_command('show', 'loganalytics_cluster_show')
        g.custom_command('create', 'loganalytics_cluster_create', supports_no_wait=True)
        g.custom_command('update', 'loganalytics_cluster_update')
        g.custom_command('delete', 'loganalytics_cluster_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_cluster_show')

    with self.command_group('loganalytics table', loganalytics_table, client_factory=cf_table) as g:
        g.custom_command('list', 'loganalytics_table_list')
        g.custom_show_command('show', 'loganalytics_table_show')
        g.custom_command('update', 'loganalytics_table_update')

    with self.command_group('loganalytics workspace', loganalytics_workspace, client_factory=cf_workspace) as g:
        g.custom_command('list', 'loganalytics_workspace_list')
        g.custom_show_command('show', 'loganalytics_workspace_show')
        g.custom_command('create', 'loganalytics_workspace_create', supports_no_wait=True)
        g.custom_command('update', 'loganalytics_workspace_update')
        g.custom_command('delete', 'loganalytics_workspace_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'loganalytics_workspace_show')

    with self.command_group(
        'loganalytics deletedworkspace', loganalytics_deletedworkspace, client_factory=cf_deletedworkspace
    ) as g:
        g.custom_command('list', 'loganalytics_deletedworkspace_list')

    with self.command_group('loganalytics', is_experimental=True):
        pass
