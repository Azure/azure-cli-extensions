# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_loganalytics.action import (
    AddStorageAccount,
    AddClustersSku,
    AddKeyVaultProperties,
    AddWorkspacesSku
)


def load_arguments(self, _):

    with self.argument_context('loganalytics data-export list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics data-export show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_export_name', options_list=['--name', '-n', '--data-export-name'], type=str, help='The data '
                   'export rule name.')

    with self.argument_context('loganalytics data-export create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_export_name', options_list=['--name', '-n', '--data-export-name'], type=str, help='The data '
                   'export rule name.')
        c.argument('data_export_id', type=str, help='The data export rule ID.')
        c.argument('table_names', nargs='+', help='An array of tables to export, for example: [“Heartbeat, '
                   'SecurityEvent”].')
        c.argument('enable', arg_type=get_three_state_flag(), help='Active when enabled.')
        c.argument('created_date', type=str, help='The latest data export rule modification time.')
        c.argument('last_modified_date', type=str, help='Date and time when the export was last modified.')
        c.argument('resource_id', type=str, help='The destination resource ID. This can be copied from the Properties '
                   'entry of the destination resource in Azure.', arg_group='Destination')
        c.argument('event_hub_name', type=str, help='Optional. Allows to define an Event Hub name. Not applicable when '
                   'destination is Storage Account.', arg_group='Destination Meta Data')

    with self.argument_context('loganalytics data-export update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_export_name', options_list=['--name', '-n', '--data-export-name'], type=str, help='The data '
                   'export rule name.')
        c.argument('data_export_id', type=str, help='The data export rule ID.')
        c.argument('table_names', nargs='+', help='An array of tables to export, for example: [“Heartbeat, '
                   'SecurityEvent”].')
        c.argument('enable', arg_type=get_three_state_flag(), help='Active when enabled.')
        c.argument('created_date', type=str, help='The latest data export rule modification time.')
        c.argument('last_modified_date', type=str, help='Date and time when the export was last modified.')
        c.argument('resource_id', type=str, help='The destination resource ID. This can be copied from the Properties '
                   'entry of the destination resource in Azure.', arg_group='Destination')
        c.argument('event_hub_name', type=str, help='Optional. Allows to define an Event Hub name. Not applicable when '
                   'destination is Storage Account.', arg_group='Destination Meta Data')
        c.ignore('parameters')

    with self.argument_context('loganalytics data-export delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_export_name', options_list=['--name', '-n', '--data-export-name'], type=str, help='The data '
                   'export rule name.')

    with self.argument_context('loganalytics data-source list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation.')
        c.argument('skiptoken', type=str, help='Starting point of the collection of data source instances.')

    with self.argument_context('loganalytics data-source show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_name', options_list=['--name', '-n', '--data-source-name'], type=str, help='Name of '
                   'the datasource')

    with self.argument_context('loganalytics data-source create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_name', options_list=['--name', '-n', '--data-source-name'], type=str, help='The name '
                   'of the datasource resource.')
        c.argument('properties', type=validate_file_or_dict, help='The data source properties in raw json format, each '
                   'kind of data source have it\'s own schema. Expected value: json-string/@json-file.')
        c.argument('etag', type=str, help='The ETag of the data source.')
        c.argument('kind', arg_type=get_enum_type(['WindowsEvent', 'WindowsPerformanceCounter', 'IISLogs',
                                                   'LinuxSyslog', 'LinuxSyslogCollection', 'LinuxPerformanceObject',
                                                   'LinuxPerformanceCollection', 'CustomLog', 'CustomLogCollection',
                                                   'AzureAuditLog', 'AzureActivityLog', 'GenericDataSource',
                                                   'ChangeTrackingCustomPath', 'ChangeTrackingPath',
                                                   'ChangeTrackingServices', 'ChangeTrackingDataTypeConfiguration',
                                                   'ChangeTrackingDefaultRegistry', 'ChangeTrackingRegistry',
                                                   'ChangeTrackingLinuxPath', 'LinuxChangeTrackingPath',
                                                   'ChangeTrackingContentLocation', 'WindowsTelemetry', 'Office365',
                                                   'SecurityWindowsBaselineConfiguration',
                                                   'SecurityCenterSecurityWindowsBaselineConfiguration',
                                                   'SecurityEventCollectionConfiguration',
                                                   'SecurityInsightsSecurityEventCollectionConfiguration',
                                                   'ImportComputerGroup', 'NetworkMonitoring', 'Itsm', 'DnsAnalytics',
                                                   'ApplicationInsights', 'SqlDataClassification']), help='The kind of '
                   'the DataSource.')
        c.argument('tags', tags_type)

    with self.argument_context('loganalytics data-source update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_name', options_list=['--name', '-n', '--data-source-name'], type=str, help='The name '
                   'of the datasource resource.')
        c.argument('properties', type=validate_file_or_dict, help='The data source properties in raw json format, each '
                   'kind of data source have it\'s own schema. Expected value: json-string/@json-file.')
        c.argument('etag', type=str, help='The ETag of the data source.')
        c.argument('kind', arg_type=get_enum_type(['WindowsEvent', 'WindowsPerformanceCounter', 'IISLogs',
                                                   'LinuxSyslog', 'LinuxSyslogCollection', 'LinuxPerformanceObject',
                                                   'LinuxPerformanceCollection', 'CustomLog', 'CustomLogCollection',
                                                   'AzureAuditLog', 'AzureActivityLog', 'GenericDataSource',
                                                   'ChangeTrackingCustomPath', 'ChangeTrackingPath',
                                                   'ChangeTrackingServices', 'ChangeTrackingDataTypeConfiguration',
                                                   'ChangeTrackingDefaultRegistry', 'ChangeTrackingRegistry',
                                                   'ChangeTrackingLinuxPath', 'LinuxChangeTrackingPath',
                                                   'ChangeTrackingContentLocation', 'WindowsTelemetry', 'Office365',
                                                   'SecurityWindowsBaselineConfiguration',
                                                   'SecurityCenterSecurityWindowsBaselineConfiguration',
                                                   'SecurityEventCollectionConfiguration',
                                                   'SecurityInsightsSecurityEventCollectionConfiguration',
                                                   'ImportComputerGroup', 'NetworkMonitoring', 'Itsm', 'DnsAnalytics',
                                                   'ApplicationInsights', 'SqlDataClassification']), help='The kind of '
                   'the DataSource.')
        c.argument('tags', tags_type)
        c.ignore('parameters')

    with self.argument_context('loganalytics data-source delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_name', options_list=['--name', '-n', '--data-source-name'], type=str, help='Name of '
                   'the datasource.')

    with self.argument_context('loganalytics intelligence-pack list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics intelligence-pack disable') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('intelligence_pack_name', options_list=['--name', '-n', '--intelligence-pack-name'], type=str,
                   help='The name of the intelligence pack to be disabled.')

    with self.argument_context('loganalytics intelligence-pack enable') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('intelligence_pack_name', options_list=['--name', '-n', '--intelligence-pack-name'], type=str,
                   help='The name of the intelligence pack to be enabled.')

    with self.argument_context('loganalytics linked-service list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics linked-service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('linked_service_name', options_list=['--name', '-n', '--linked-service-name'], type=str, help='Name '
                   'of the linked service.')

    with self.argument_context('loganalytics linked-service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('linked_service_name', options_list=['--name', '-n', '--linked-service-name'], type=str, help='Name '
                   'of the linkedServices resource')
        c.argument('tags', tags_type)
        c.argument('resource_id', type=str, help='The resource id of the resource that will be linked to the '
                   'workspace. This should be used for linking resources which require read access')
        c.argument('write_access_resource_id', type=str, help='The resource id of the resource that will be linked to '
                   'the workspace. This should be used for linking resources which require write access')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Deleting', 'ProvisioningAccount',
                                                                 'Updating']), help='The provisioning state of the '
                   'linked service.')

    with self.argument_context('loganalytics linked-service update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('linked_service_name', options_list=['--name', '-n', '--linked-service-name'], type=str, help='Name '
                   'of the linkedServices resource')
        c.argument('tags', tags_type)
        c.argument('resource_id', type=str, help='The resource id of the resource that will be linked to the '
                   'workspace. This should be used for linking resources which require read access')
        c.argument('write_access_resource_id', type=str, help='The resource id of the resource that will be linked to '
                   'the workspace. This should be used for linking resources which require write access')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Deleting', 'ProvisioningAccount',
                                                                 'Updating']), help='The provisioning state of the '
                   'linked service.')
        c.ignore('parameters')

    with self.argument_context('loganalytics linked-service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('linked_service_name', options_list=['--name', '-n', '--linked-service-name'], type=str, help='Name '
                   'of the linked service.')

    with self.argument_context('loganalytics linked-service wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('linked_service_name', options_list=['--name', '-n', '--linked-service-name'], type=str, help='Name '
                   'of the linked service.')

    with self.argument_context('loganalytics linked-storage-account list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics linked-storage-account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_type', arg_type=get_enum_type(['CustomLogs', 'AzureWatson', 'Query', 'Alerts']),
                   help='Linked storage accounts type.')

    with self.argument_context('loganalytics linked-storage-account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_type', arg_type=get_enum_type(['CustomLogs', 'AzureWatson', 'Query', 'Alerts']),
                   help='Linked storage accounts type.')
        c.argument('storage_account_ids', nargs='+', help='Linked storage accounts resources ids.')

    with self.argument_context('loganalytics linked-storage-account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_type', arg_type=get_enum_type(['CustomLogs', 'AzureWatson', 'Query', 'Alerts']),
                   help='Linked storage accounts type.')
        c.argument('storage_account_ids', nargs='+', help='Linked storage accounts resources ids.')
        c.ignore('parameters')

    with self.argument_context('loganalytics linked-storage-account delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('data_source_type', arg_type=get_enum_type(['CustomLogs', 'AzureWatson', 'Query', 'Alerts']),
                   help='Linked storage accounts type.')

    with self.argument_context('loganalytics management-group list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics operation-statuses show') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('async_operation_id', type=str, help='The operation Id.', id_part='child_name_1')

    with self.argument_context('loganalytics shared-key get-shared-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics shared-key regenerate') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics usage list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics storage-insight-config list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics storage-insight-config show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('storage_insight_name', type=str, help='Name of the storageInsightsConfigs resource')

    with self.argument_context('loganalytics storage-insight-config create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('storage_insight_name', type=str, help='Name of the storageInsightsConfigs resource')
        c.argument('e_tag', type=str, help='The ETag of the storage insight.')
        c.argument('tags', tags_type)
        c.argument('containers', nargs='+', help='The names of the blob containers that the workspace should read')
        c.argument('tables', nargs='+', help='The names of the Azure tables that the workspace should read')
        c.argument('storage_account', action=AddStorageAccount, nargs='+', help='The storage account connection '
                   'details')

    with self.argument_context('loganalytics storage-insight-config update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('storage_insight_name', type=str, help='Name of the storageInsightsConfigs resource')
        c.argument('e_tag', type=str, help='The ETag of the storage insight.')
        c.argument('tags', tags_type)
        c.argument('containers', nargs='+', help='The names of the blob containers that the workspace should read')
        c.argument('tables', nargs='+', help='The names of the Azure tables that the workspace should read')
        c.argument('storage_account', action=AddStorageAccount, nargs='+', help='The storage account connection '
                   'details')
        c.ignore('parameters')

    with self.argument_context('loganalytics storage-insight-config delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('storage_insight_name', type=str, help='Name of the storageInsightsConfigs resource')

    with self.argument_context('loganalytics saved-search list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics saved-search show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('saved_search_id', type=str, help='The id of the saved search.')

    with self.argument_context('loganalytics saved-search create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('saved_search_id', type=str, help='The id of the saved search.')
        c.argument('etag', type=str, help='The ETag of the saved search.')
        c.argument('category', type=str, help='The category of the saved search. This helps the user to find a saved '
                   'search faster.')
        c.argument('display_name', type=str, help='Saved search display name.')
        c.argument('query', type=str, help='The query expression for the saved search.')
        c.argument('function_alias', type=str, help='The function alias if query serves as a function.')
        c.argument('function_parameters', type=str, help='The optional function parameters if query serves as a '
                   'function. Value should be in the following format: \'param-name1:type1 = default_value1, '
                   'param-name2:type2 = default_value2\'. For more examples and proper syntax please refer to '
                   'https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.')
        c.argument('version', type=int, help='The version number of the query language. The current version is 2 and '
                   'is the default.')
        c.argument('tags', tags_type)

    with self.argument_context('loganalytics saved-search update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('saved_search_id', type=str, help='The id of the saved search.')
        c.argument('etag', type=str, help='The ETag of the saved search.')
        c.argument('category', type=str, help='The category of the saved search. This helps the user to find a saved '
                   'search faster.')
        c.argument('display_name', type=str, help='Saved search display name.')
        c.argument('query', type=str, help='The query expression for the saved search.')
        c.argument('function_alias', type=str, help='The function alias if query serves as a function.')
        c.argument('function_parameters', type=str, help='The optional function parameters if query serves as a '
                   'function. Value should be in the following format: \'param-name1:type1 = default_value1, '
                   'param-name2:type2 = default_value2\'. For more examples and proper syntax please refer to '
                   'https://docs.microsoft.com/en-us/azure/kusto/query/functions/user-defined-functions.')
        c.argument('version', type=int, help='The version number of the query language. The current version is 2 and '
                   'is the default.')
        c.argument('tags', tags_type)
        c.ignore('parameters')

    with self.argument_context('loganalytics saved-search delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('saved_search_id', type=str, help='The id of the saved search.')

    with self.argument_context('loganalytics available-service-tier list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics gateway delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('gateway_id', type=str, help='The Log Analytics gateway Id.')

    with self.argument_context('loganalytics schema get') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics workspace-purge purge') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.', id_part='name')
        c.argument('table', type=str, help='Table from which to purge data.')
        c.argument('filters', type=validate_file_or_dict, help='The set of columns and filters (queries) to run over '
                   'them to purge the resulting data. Expected value: json-string/@json-file.')

    with self.argument_context('loganalytics workspace-purge show-purge-status') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.', id_part='name')
        c.argument('purge_id', type=str, help='In a purge status request, this is the Id of the operation the status '
                   'of which is returned.', id_part='child_name_1')

    with self.argument_context('loganalytics table list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')

    with self.argument_context('loganalytics table show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('table_name', options_list=['--name', '-n', '--table-name'], type=str,
                   help='The name of the table.')

    with self.argument_context('loganalytics table update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='The name of the workspace.')
        c.argument('table_name', options_list=['--name', '-n', '--table-name'], type=str,
                   help='The name of the table.')
        c.argument('retention_in_days', type=int, help='The data table data retention in days, between 30 and 730. '
                   'Setting this property to null will default to the workspace retention.')

    with self.argument_context('loganalytics cluster list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('loganalytics cluster show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='Name of the Log '
                   'Analytics Cluster.')

    with self.argument_context('loganalytics cluster create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
                   'Log Analytics cluster.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('sku', action=AddClustersSku, nargs='+', help='The sku properties.')
        c.argument('is_double_encryption_enabled', arg_type=get_three_state_flag(), help='Configures whether cluster '
                   'will use double encryption. This Property can not be modified after cluster creation. Default '
                   'value is \'true\'')
        c.argument('is_availability_zones_enabled', arg_type=get_three_state_flag(), help='Sets whether the cluster '
                   'will support availability zones. This can be set as true only in regions where Azure Data Explorer '
                   'support Availability Zones. This Property can not be modified after cluster creation. Default '
                   'value is \'true\' if region supports Availability Zones.')
        c.argument('billing_type', arg_type=get_enum_type(['Cluster', 'Workspaces']), help='The cluster\'s billing '
                   'type.')
        c.argument('key_vault_properties', action=AddKeyVaultProperties, nargs='+', help='The associated key '
                   'properties.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'None']), help='Type of managed service '
                                                                             'identity.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with the resource. The user identity dictionary key references will be ARM resource ids '
                   'in the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microso'
                   'ft.ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/@json-file.', arg_group='Identity')

    with self.argument_context('loganalytics cluster update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='Name of the Log '
                   'Analytics Cluster.')
        c.argument('sku', action=AddClustersSku, nargs='+', help='The sku properties.')
        c.argument('tags', tags_type)
        c.argument('key_vault_properties', action=AddKeyVaultProperties, nargs='+', help='The associated key '
                   'properties.')
        c.argument('billing_type', arg_type=get_enum_type(['Cluster', 'Workspaces']), help='The cluster\'s billing '
                   'type.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'UserAssigned',
                                                                             'None']), help='Type of managed service '
                                                                             'identity.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The list of user identities '
                   'associated with the resource. The user identity dictionary key references will be ARM resource ids '
                   'in the form: \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microso'
                   'ft.ManagedIdentity/userAssignedIdentities/{identityName}\'. Expected value: '
                   'json-string/@json-file.', arg_group='Identity')

    with self.argument_context('loganalytics cluster delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='Name of the Log '
                   'Analytics Cluster.')

    with self.argument_context('loganalytics cluster wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('cluster_name', options_list=['--name', '-n', '--cluster-name'], type=str, help='Name of the Log '
                   'Analytics Cluster.')

    with self.argument_context('loganalytics workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('loganalytics workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace.')

    with self.argument_context('loganalytics workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('e_tag', type=str, help='The ETag of the workspace.')
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Succeeded', 'Failed', 'Canceled',
                                                                 'Deleting', 'ProvisioningAccount', 'Updating']),
                   help='The provisioning state of the workspace.')
        c.argument('sku', action=AddWorkspacesSku, nargs='+', help='The SKU of the workspace.')
        c.argument('retention_in_days', type=int, help='The workspace data retention in days. Allowed values are per '
                   'pricing plan. See pricing tiers documentation for details.')
        c.argument('public_network_access_for_ingestion', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The '
                   'network access type for accessing Log Analytics ingestion.')
        c.argument('public_network_access_for_query', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The '
                   'network access type for accessing Log Analytics query.')
        c.argument('force_cmk_for_query', arg_type=get_three_state_flag(), help='Indicates whether customer managed '
                   'storage is mandatory for query management.')
        c.argument('enable_data_export', arg_type=get_three_state_flag(), help='Flag that indicate if data should be '
                   'exported.', arg_group='Features')
        c.argument('immediate_purge_data_on30_days', arg_type=get_three_state_flag(), help='Flag that describes if we '
                   'want to remove the data after 30 days.', arg_group='Features')
        c.argument('enable_log_access_using_only_resource_permissions', arg_type=get_three_state_flag(), help='Flag '
                   'that indicate which permission to use - resource or workspace or both.', arg_group='Features')
        c.argument('cluster_resource_id', type=str, help='Dedicated LA cluster resourceId that is linked to the '
                   'workspaces.', arg_group='Features')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Disable Non-AAD based Auth.',
                   arg_group='Features')
        c.argument('daily_quota_gb', type=float, help='The workspace daily quota for ingestion.', arg_group='Workspace '
                   'Capping')

    with self.argument_context('loganalytics workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace.')
        c.argument('tags', tags_type)
        c.argument('provisioning_state', arg_type=get_enum_type(['Creating', 'Succeeded', 'Failed', 'Canceled',
                                                                 'Deleting', 'ProvisioningAccount', 'Updating']),
                   help='The provisioning state of the workspace.')
        c.argument('sku', action=AddWorkspacesSku, nargs='+', help='The SKU of the workspace.')
        c.argument('retention_in_days', type=int, help='The workspace data retention in days. Allowed values are per '
                   'pricing plan. See pricing tiers documentation for details.')
        c.argument('public_network_access_for_ingestion', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The '
                   'network access type for accessing Log Analytics ingestion.')
        c.argument('public_network_access_for_query', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The '
                   'network access type for accessing Log Analytics query.')
        c.argument('force_cmk_for_query', arg_type=get_three_state_flag(), help='Indicates whether customer managed '
                   'storage is mandatory for query management.')
        c.argument('enable_data_export', arg_type=get_three_state_flag(), help='Flag that indicate if data should be '
                   'exported.', arg_group='Features')
        c.argument('immediate_purge_data_on30_days', arg_type=get_three_state_flag(), help='Flag that describes if we '
                   'want to remove the data after 30 days.', arg_group='Features')
        c.argument('enable_log_access_using_only_resource_permissions', arg_type=get_three_state_flag(), help='Flag '
                   'that indicate which permission to use - resource or workspace or both.', arg_group='Features')
        c.argument('cluster_resource_id', type=str, help='Dedicated LA cluster resourceId that is linked to the '
                   'workspaces.', arg_group='Features')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Disable Non-AAD based Auth.',
                   arg_group='Features')
        c.argument('daily_quota_gb', type=float, help='The workspace daily quota for ingestion.', arg_group='Workspace '
                   'Capping')

    with self.argument_context('loganalytics workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace.')
        c.argument('force', arg_type=get_three_state_flag(), help='Deletes the workspace without the recovery option. '
                   'A workspace that was deleted with this flag cannot be recovered.')

    with self.argument_context('loganalytics workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='The name of '
                   'the workspace.')

    with self.argument_context('loganalytics deleted-workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
