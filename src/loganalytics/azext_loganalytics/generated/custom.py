# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def loganalytics_dataexport_list(client,
                                 resource_group_name,
                                 workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_dataexport_show(client,
                                 resource_group_name,
                                 workspace_name,
                                 data_export_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_export_name=data_export_name)


def loganalytics_dataexport_create(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_export_name,
                                   data_export_id=None,
                                   table_names=None,
                                   enable=None,
                                   created_date=None,
                                   last_modified_date=None,
                                   resource_id=None,
                                   event_hub_name=None):
    parameters = {}
    parameters['data_export_id'] = data_export_id
    parameters['table_names'] = table_names
    parameters['enable'] = enable
    parameters['created_date'] = created_date
    parameters['last_modified_date'] = last_modified_date
    parameters['resource_id'] = resource_id
    parameters['event_hub_name'] = event_hub_name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_export_name=data_export_name,
                                   parameters=parameters)


def loganalytics_dataexport_update(instance,
                                   resource_group_name,
                                   workspace_name,
                                   data_export_name,
                                   data_export_id=None,
                                   table_names=None,
                                   enable=None,
                                   created_date=None,
                                   last_modified_date=None,
                                   resource_id=None,
                                   event_hub_name=None):
    if data_export_id is not None:
        instance.data_export_id = data_export_id
    if table_names is not None:
        instance.table_names = table_names
    if enable is not None:
        instance.enable = enable
    if created_date is not None:
        instance.created_date = created_date
    if last_modified_date is not None:
        instance.last_modified_date = last_modified_date
    if resource_id is not None:
        instance.resource_id = resource_id
    if event_hub_name is not None:
        instance.event_hub_name = event_hub_name
    return instance


def loganalytics_dataexport_delete(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_export_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         data_export_name=data_export_name)


def loganalytics_datasource_list(client,
                                 resource_group_name,
                                 workspace_name,
                                 filter_,
                                 skiptoken=None):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    filter=filter_,
                                    skiptoken=skiptoken)


def loganalytics_datasource_show(client,
                                 resource_group_name,
                                 workspace_name,
                                 data_source_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_source_name=data_source_name)


def loganalytics_datasource_create(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_source_name,
                                   properties,
                                   kind,
                                   etag=None,
                                   tags=None):
    parameters = {}
    parameters['properties'] = properties
    parameters['etag'] = etag
    parameters['kind'] = kind
    parameters['tags'] = tags
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_source_name=data_source_name,
                                   parameters=parameters)


def loganalytics_datasource_update(instance,
                                   resource_group_name,
                                   workspace_name,
                                   data_source_name,
                                   properties,
                                   kind,
                                   etag=None,
                                   tags=None):
    if properties is not None:
        instance.properties = properties
    if etag is not None:
        instance.etag = etag
    if kind is not None:
        instance.kind = kind
    if tags is not None:
        instance.tags = tags
    return instance


def loganalytics_datasource_delete(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_source_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         data_source_name=data_source_name)


def loganalytics_intelligencepack_list(client,
                                       resource_group_name,
                                       workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def loganalytics_intelligencepack_disable(client,
                                          resource_group_name,
                                          workspace_name,
                                          intelligence_pack_name):
    return client.disable(resource_group_name=resource_group_name,
                          workspace_name=workspace_name,
                          intelligence_pack_name=intelligence_pack_name)


def loganalytics_intelligencepack_enable(client,
                                         resource_group_name,
                                         workspace_name,
                                         intelligence_pack_name):
    return client.enable(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         intelligence_pack_name=intelligence_pack_name)


def loganalytics_linkedservice_list(client,
                                    resource_group_name,
                                    workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_linkedservice_show(client,
                                    resource_group_name,
                                    workspace_name,
                                    linked_service_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      linked_service_name=linked_service_name)


def loganalytics_linkedservice_create(client,
                                      resource_group_name,
                                      workspace_name,
                                      linked_service_name,
                                      tags=None,
                                      resource_id=None,
                                      write_access_resource_id=None,
                                      provisioning_state=None,
                                      no_wait=False):
    parameters = {}
    parameters['tags'] = tags
    parameters['resource_id'] = resource_id
    parameters['write_access_resource_id'] = write_access_resource_id
    parameters['provisioning_state'] = provisioning_state
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       linked_service_name=linked_service_name,
                       parameters=parameters)


def loganalytics_linkedservice_update(instance,
                                      resource_group_name,
                                      workspace_name,
                                      linked_service_name,
                                      tags=None,
                                      resource_id=None,
                                      write_access_resource_id=None,
                                      provisioning_state=None,
                                      no_wait=False):
    if tags is not None:
        instance.tags = tags
    if resource_id is not None:
        instance.resource_id = resource_id
    if write_access_resource_id is not None:
        instance.write_access_resource_id = write_access_resource_id
    if provisioning_state is not None:
        instance.provisioning_state = provisioning_state
    return instance


def loganalytics_linkedservice_delete(client,
                                      resource_group_name,
                                      workspace_name,
                                      linked_service_name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       linked_service_name=linked_service_name)


def loganalytics_linkedstorageaccount_list(client,
                                           resource_group_name,
                                           workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_linkedstorageaccount_show(client,
                                           resource_group_name,
                                           workspace_name,
                                           data_source_type):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_source_type=data_source_type)


def loganalytics_linkedstorageaccount_create(client,
                                             resource_group_name,
                                             workspace_name,
                                             data_source_type,
                                             storage_account_ids=None):
    parameters = {}
    parameters['storage_account_ids'] = storage_account_ids
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_source_type=data_source_type,
                                   parameters=parameters)


def loganalytics_linkedstorageaccount_update(instance,
                                             resource_group_name,
                                             workspace_name,
                                             data_source_type,
                                             storage_account_ids=None):
    if storage_account_ids is not None:
        instance.storage_account_ids = storage_account_ids
    return instance


def loganalytics_linkedstorageaccount_delete(client,
                                             resource_group_name,
                                             workspace_name,
                                             data_source_type):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         data_source_type=data_source_type)


def loganalytics_managementgroup_list(client,
                                      resource_group_name,
                                      workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def loganalytics_operationstatuses_show(client,
                                        location,
                                        async_operation_id):
    return client.get(location=location,
                      async_operation_id=async_operation_id)


def loganalytics_sharedkey_get_shared_key(client,
                                          resource_group_name,
                                          workspace_name):
    return client.get_shared_keys(resource_group_name=resource_group_name,
                                  workspace_name=workspace_name)


def loganalytics_sharedkey_regenerate(client,
                                      resource_group_name,
                                      workspace_name):
    return client.regenerate(resource_group_name=resource_group_name,
                             workspace_name=workspace_name)


def loganalytics_usage_list(client,
                            resource_group_name,
                            workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def loganalytics_storageinsightconfig_list(client,
                                           resource_group_name,
                                           workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_storageinsightconfig_show(client,
                                           resource_group_name,
                                           workspace_name,
                                           storage_insight_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      storage_insight_name=storage_insight_name)


def loganalytics_storageinsightconfig_create(client,
                                             resource_group_name,
                                             workspace_name,
                                             storage_insight_name,
                                             e_tag=None,
                                             tags=None,
                                             containers=None,
                                             tables=None,
                                             storage_account=None):
    parameters = {}
    parameters['e_tag'] = e_tag
    parameters['tags'] = tags
    parameters['containers'] = containers
    parameters['tables'] = tables
    parameters['storage_account'] = storage_account
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   storage_insight_name=storage_insight_name,
                                   parameters=parameters)


def loganalytics_storageinsightconfig_update(instance,
                                             resource_group_name,
                                             workspace_name,
                                             storage_insight_name,
                                             e_tag=None,
                                             tags=None,
                                             containers=None,
                                             tables=None,
                                             storage_account=None):
    if e_tag is not None:
        instance.e_tag = e_tag
    if tags is not None:
        instance.tags = tags
    if containers is not None:
        instance.containers = containers
    if tables is not None:
        instance.tables = tables
    if storage_account is not None:
        instance.storage_account = storage_account
    return instance


def loganalytics_storageinsightconfig_delete(client,
                                             resource_group_name,
                                             workspace_name,
                                             storage_insight_name):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         storage_insight_name=storage_insight_name)


def loganalytics_savedsearch_list(client,
                                  resource_group_name,
                                  workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_savedsearch_show(client,
                                  resource_group_name,
                                  workspace_name,
                                  saved_search_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      saved_search_id=saved_search_id)


def loganalytics_savedsearch_create(client,
                                    resource_group_name,
                                    workspace_name,
                                    saved_search_id,
                                    category,
                                    display_name,
                                    input_query,
                                    etag=None,
                                    function_alias=None,
                                    function_parameters=None,
                                    version=None,
                                    tags=None):
    parameters = {}
    parameters['etag'] = etag
    parameters['category'] = category
    parameters['display_name'] = display_name
    parameters['query'] = input_query
    parameters['function_alias'] = function_alias
    parameters['function_parameters'] = function_parameters
    parameters['version'] = version
    parameters['tags'] = tags
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   saved_search_id=saved_search_id,
                                   parameters=parameters)


def loganalytics_savedsearch_update(instance,
                                    resource_group_name,
                                    workspace_name,
                                    saved_search_id,
                                    category,
                                    display_name,
                                    input_query,
                                    etag=None,
                                    function_alias=None,
                                    function_parameters=None,
                                    version=None,
                                    tags=None):
    if etag is not None:
        instance.etag = etag
    if category is not None:
        instance.category = category
    if display_name is not None:
        instance.display_name = display_name
    if input_query is not None:
        instance.query = input_query
    if function_alias is not None:
        instance.function_alias = function_alias
    if function_parameters is not None:
        instance.function_parameters = function_parameters
    if version is not None:
        instance.version = version
    if tags is not None:
        instance.tags = tags
    return instance


def loganalytics_savedsearch_delete(client,
                                    resource_group_name,
                                    workspace_name,
                                    saved_search_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         saved_search_id=saved_search_id)


def loganalytics_availableservicetier_list(client,
                                           resource_group_name,
                                           workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_gateway_delete(client,
                                resource_group_name,
                                workspace_name,
                                gateway_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         gateway_id=gateway_id)


def loganalytics_schema_get(client,
                            resource_group_name,
                            workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def loganalytics_workspacepurge_purge(client,
                                      resource_group_name,
                                      workspace_name,
                                      table,
                                      filters):
    body = {}
    body['table'] = table
    body['filters'] = filters
    return client.purge(resource_group_name=resource_group_name,
                        workspace_name=workspace_name,
                        body=body)


def loganalytics_workspacepurge_show_purge_status(client,
                                                  resource_group_name,
                                                  workspace_name,
                                                  purge_id):
    return client.get_purge_status(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   purge_id=purge_id)


def loganalytics_cluster_list(client,
                              resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def loganalytics_cluster_show(client,
                              resource_group_name,
                              cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def loganalytics_cluster_create(client,
                                resource_group_name,
                                cluster_name,
                                location,
                                tags=None,
                                sku=None,
                                is_double_encryption_enabled=None,
                                is_availability_zones_enabled=None,
                                billing_type=None,
                                key_vault_properties=None,
                                type_=None,
                                user_assigned_identities=None,
                                no_wait=False):
    parameters = {}
    parameters['tags'] = tags
    parameters['location'] = location
    parameters['sku'] = sku
    parameters['is_double_encryption_enabled'] = is_double_encryption_enabled
    parameters['is_availability_zones_enabled'] = is_availability_zones_enabled
    parameters['billing_type'] = billing_type
    parameters['key_vault_properties'] = key_vault_properties
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       parameters=parameters)


def loganalytics_cluster_update(client,
                                resource_group_name,
                                cluster_name,
                                sku=None,
                                tags=None,
                                key_vault_properties=None,
                                type_=None,
                                user_assigned_identities=None):
    parameters = {}
    parameters['sku'] = sku
    parameters['tags'] = tags
    parameters['key_vault_properties'] = key_vault_properties
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return client.update(resource_group_name=resource_group_name,
                         cluster_name=cluster_name,
                         parameters=parameters)


def loganalytics_cluster_delete(client,
                                resource_group_name,
                                cluster_name,
                                no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def loganalytics_table_list(client,
                            resource_group_name,
                            workspace_name):
    return client.list_by_workspace(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name)


def loganalytics_table_show(client,
                            resource_group_name,
                            workspace_name,
                            table_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      table_name=table_name)


def loganalytics_table_update(client,
                              resource_group_name,
                              workspace_name,
                              table_name,
                              retention_in_days=None,
                              is_troubleshoot_enabled=None):
    parameters = {}
    parameters['retention_in_days'] = retention_in_days
    parameters['is_troubleshoot_enabled'] = is_troubleshoot_enabled
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         table_name=table_name,
                         parameters=parameters)


def loganalytics_workspace_list(client,
                                resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def loganalytics_workspace_show(client,
                                resource_group_name,
                                workspace_name):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name)


def loganalytics_workspace_create(client,
                                  resource_group_name,
                                  workspace_name,
                                  location,
                                  tags=None,
                                  e_tag=None,
                                  provisioning_state=None,
                                  sku=None,
                                  retention_in_days=None,
                                  public_network_access_for_ingestion=None,
                                  public_network_access_for_query=None,
                                  force_cmk_for_query=None,
                                  features=None,
                                  daily_quota_gb=None,
                                  no_wait=False):
    if public_network_access_for_ingestion is None:
        public_network_access_for_ingestion = "Enabled"
    if public_network_access_for_query is None:
        public_network_access_for_query = "Enabled"
    parameters = {}
    parameters['tags'] = tags
    parameters['location'] = location
    parameters['e_tag'] = e_tag
    parameters['provisioning_state'] = provisioning_state
    parameters['sku'] = sku
    parameters['retention_in_days'] = retention_in_days
    parameters['public_network_access_for_ingestion'] = "Enabled" if public_network_access_for_ingestion is None else public_network_access_for_ingestion
    parameters['public_network_access_for_query'] = "Enabled" if public_network_access_for_query is None else public_network_access_for_query
    parameters['force_cmk_for_query'] = force_cmk_for_query
    parameters['features'] = features
    parameters['workspace_capping'] = {}
    parameters['workspace_capping']['daily_quota_gb'] = daily_quota_gb
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       parameters=parameters)


def loganalytics_workspace_update(client,
                                  resource_group_name,
                                  workspace_name,
                                  tags=None,
                                  provisioning_state=None,
                                  sku=None,
                                  retention_in_days=None,
                                  public_network_access_for_ingestion=None,
                                  public_network_access_for_query=None,
                                  force_cmk_for_query=None,
                                  features=None,
                                  daily_quota_gb=None):
    if public_network_access_for_ingestion is None:
        public_network_access_for_ingestion = "Enabled"
    if public_network_access_for_query is None:
        public_network_access_for_query = "Enabled"
    parameters = {}
    parameters['tags'] = tags
    parameters['provisioning_state'] = provisioning_state
    parameters['sku'] = sku
    parameters['retention_in_days'] = retention_in_days
    parameters['public_network_access_for_ingestion'] = "Enabled" if public_network_access_for_ingestion is None else public_network_access_for_ingestion
    parameters['public_network_access_for_query'] = "Enabled" if public_network_access_for_query is None else public_network_access_for_query
    parameters['force_cmk_for_query'] = force_cmk_for_query
    parameters['features'] = features
    parameters['workspace_capping'] = {}
    parameters['workspace_capping']['daily_quota_gb'] = daily_quota_gb
    return client.update(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         parameters=parameters)


def loganalytics_workspace_delete(client,
                                  resource_group_name,
                                  workspace_name,
                                  force=None,
                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       force=force)


def loganalytics_deletedworkspace_list(client,
                                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()
