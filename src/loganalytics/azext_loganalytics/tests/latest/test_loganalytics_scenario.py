# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import StorageAccountPreparer
from .example_steps import step_workspace_create
from .example_steps import step_workspace_show
from .example_steps import step_workspace_list
from .example_steps import step_workspace_list2
from .example_steps import step_workspace_update
from .example_steps import step_available_service_tier_list
from .example_steps import step_cluster_create
from .example_steps import step_cluster_list
from .example_steps import step_cluster_list2
from .example_steps import step_cluster_update
from .example_steps import step_linked_service_create
from .example_steps import step_linked_service_show
from .example_steps import step_linked_service_list
from .example_steps import step_linked_service_delete
from .example_steps import step_cluster_delete
from .example_steps import step_data_export_create
from .example_steps import step_data_export_list
from .example_steps import step_data_export_delete
from .example_steps import step_data_source_create
from .example_steps import step_data_source_show
from .example_steps import step_data_source_list
from .example_steps import step_data_source_delete
from .example_steps import step_deleted_workspace_list
from .example_steps import step_deleted_workspace_list2
from .example_steps import step_gateway_delete
from .example_steps import step_intelligence_pack_list
from .example_steps import step_intelligence_pack_disable
from .example_steps import step_intelligence_pack_enable
from .example_steps import step_linked_storage_account_create
from .example_steps import step_linked_storage_account_list
from .example_steps import step_linked_storage_account_show
from .example_steps import step_linked_storage_account_delete
from .example_steps import step_management_group_list
from .example_steps import step_operation_statuses_show
from .example_steps import step_saved_search_create
from .example_steps import step_saved_search_show
from .example_steps import step_saved_search_list
from .example_steps import step_saved_search_delete
from .example_steps import step_schema_get
from .example_steps import step_shared_key_regenerate
from .example_steps import step_shared_key_get_shared_key
from .example_steps import step_table_show
from .example_steps import step_table_list
from .example_steps import step_table_update
from .example_steps import step_storage_insight_config_create
from .example_steps import step_storage_insight_config_show
from .example_steps import step_storage_insight_config_list
from .example_steps import step_storage_insight_config_delete
from .example_steps import step_usage_list
from .example_steps import step_workspace_purge_show_purge_status
from .example_steps import step_workspace_purge_purge
from .example_steps import step_workspace_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8):
    setup_scenario(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8)
    step_workspace_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("location", "australiasoutheast", case_sensitive=False),
        test.check("retentionInDays", 30),
        test.check("sku.name", "PerGB2018", case_sensitive=False),
        test.check("tags.tag1", "val1", case_sensitive=False),
    ])
    step_workspace_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_workspace_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_workspace_list2(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_workspace_update(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("location", "australiasoutheast", case_sensitive=False),
        test.check("retentionInDays", 30),
        test.check("sku.name", "PerGB2018", case_sensitive=False),
        test.check("tags.tag1", "val1", case_sensitive=False),
        test.check("workspaceCapping.dailyQuotaGb", -1),
    ])
    step_available_service_tier_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_cluster_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("name", "{rg_8}", case_sensitive=False),
        test.check("location", "australiasoutheast", case_sensitive=False),
        test.check("sku.name", "CapacityReservation", case_sensitive=False),
        test.check("sku.capacity", 1000),
        test.check("name", "{rg_8}", case_sensitive=False),
    ])
    step_cluster_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list2(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_update(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("location", "australiasoutheast", case_sensitive=False),
        test.check("sku.name", "CapacityReservation", case_sensitive=False),
        test.check("sku.capacity", 1000),
        test.check("tags.tag1", "val1", case_sensitive=False),
        test.check("identity.type", "UserAssigned", case_sensitive=False),
    ])
    step_linked_service_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("writeAccessResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg_5}/providers/Microsoft"
                   ".OperationalInsights/clusters/{myCluster}", case_sensitive=False),
    ])
    step_linked_service_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("writeAccessResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg_5}/providers/Microsoft"
                   ".OperationalInsights/clusters/{myCluster}", case_sensitive=False),
    ])
    step_linked_service_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_linked_service_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_cluster_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_data_export_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("name", "{myDataExport}", case_sensitive=False),
        test.check("destination.resourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsof"
                   "t.EventHub/namespaces/test", case_sensitive=False),
        test.check("tableNames[0]", "Heartbeat", case_sensitive=False),
    ])
    step_data_export_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_data_export_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check('length(@)', 1),
    ])
    step_data_export_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_data_source_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("name", "{myDataSource}", case_sensitive=False),
        test.check("kind", "AzureActivityLog", case_sensitive=False),
        test.check("properties.LinkedResourceId", "/subscriptions/{subscription_id}/providers/microsoft.insights/eventt"
                   "ypes/management", case_sensitive=False),
    ])
    step_data_source_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("name", "{myDataSource}", case_sensitive=False),
        test.check("kind", "AzureActivityLog", case_sensitive=False),
        test.check("properties.LinkedResourceId", "/subscriptions/{subscription_id}/providers/microsoft.insights/eventt"
                   "ypes/management", case_sensitive=False),
    ])
    step_data_source_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_data_source_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_deleted_workspace_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_deleted_workspace_list2(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_gateway_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_intelligence_pack_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_intelligence_pack_disable(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_intelligence_pack_enable(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_linked_storage_account_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_linked_storage_account_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_linked_storage_account_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_linked_storage_account_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_management_group_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_operation_statuses_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_saved_search_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_saved_search_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_saved_search_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_saved_search_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_schema_get(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_shared_key_regenerate(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_shared_key_get_shared_key(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_table_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_table_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_table_update(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[
        test.check("retentionInDays", 30),
        test.check("name", "{myTable}", case_sensitive=False),
    ])
    step_storage_insight_config_create(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_storage_insight_config_show(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_storage_insight_config_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_storage_insight_config_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_usage_list(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_workspace_purge_show_purge_status(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_workspace_purge_purge(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    step_workspace_delete(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8, checks=[])
    cleanup_scenario(test, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8)


# Test class for Scenario
@try_manual
class LoganalyticsScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(LoganalyticsScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myCluster': 'testcluster',
            'myCluster2': 'oiautorest6685',
            'myWorkspace': 'DeWnTest1234',
            'myWorkspace2': 'AzTest9724',
            'myWorkspace3': 'TestLinkWS',
            'myWorkspace4': 'testLinkStorageAccountsWS',
            'myWorkspace5': 'workspace1',
            'myWorkspace6': 'aztest5048',
            'myWorkspace7': 'TestWS',
            'myWorkspace8': 'atlantisdemo',
            'myWorkspace9': 'oiautorest6685',
            'myDataExport': 'export1',
            'myDataSource': 'AzTestDS774',
            'myIntelligencePack': 'ChangeTracking',
            'myLinkedService': 'Cluster',
            'myTable': 'table1',
        })


    @ResourceGroupPreparer(name_prefix='clitestloganalytics_OIAutoRest1234'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_mms-eus'[:7], key='rg_5', parameter_name='rg_5')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_OIAutoRest6987'[:7], key='rg_6', parameter_name='rg_6')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_RgTest1'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_OIAutoRest5123'[:7], key='rg_3', parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_rg1'[:7], key='rg_4', parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_TestRG'[:7], key='rg_7', parameter_name='rg_7')
    @ResourceGroupPreparer(name_prefix='clitestloganalytics_oiautorest6685'[:7], key='rg_8', parameter_name='rg_8')
    @StorageAccountPreparer(name_prefix='clitestloganalytics_testStorageA'[:7], key='sa',
                            resource_group_parameter_name='rg_5')
    @StorageAccountPreparer(name_prefix='clitestloganalytics_testStorageB'[:7], key='sa_2',
                            resource_group_parameter_name='rg_5')
    @StorageAccountPreparer(name_prefix='clitestloganalytics_AzTestFakeSA9945'[:7], key='sa_3',
                            resource_group_parameter_name='rg_6')
    def test_loganalytics_Scenario(self, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8):
        call_scenario(self, rg_2, rg_5, rg_6, rg, rg_3, rg_4, rg_7, rg_8)
        calc_coverage(__file__)
        raise_if()

