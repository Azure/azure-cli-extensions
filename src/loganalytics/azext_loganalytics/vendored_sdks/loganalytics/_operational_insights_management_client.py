# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.core import PipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import OperationalInsightsManagementClientConfiguration
from .operations import dataexportsOperations
from .operations import datasourcesOperations
from .operations import intelligencepacksOperations
from .operations import linkedservicesOperations
from .operations import linkedstorageaccountsOperations
from .operations import managementgroupsOperations
from .operations import operationstatusesOperations
from .operations import sharedkeysOperations
from .operations import usagesOperations
from .operations import storageinsightconfigsOperations
from .operations import savedsearchesOperations
from .operations import availableservicetiersOperations
from .operations import gatewaysOperations
from .operations import schemaOperations
from .operations import workspacepurgeOperations
from .operations import clustersOperations
from .operations import operationsOperations
from .operations import tablesOperations
from .operations import workspacesOperations
from .operations import deletedworkspacesOperations
from . import models


class OperationalInsightsManagementClient(object):
    """Operational Insights Client.

    :ivar dataexports: dataexportsOperations operations
    :vartype dataexports: operational_insights_management_client.operations.dataexportsOperations
    :ivar datasources: datasourcesOperations operations
    :vartype datasources: operational_insights_management_client.operations.datasourcesOperations
    :ivar intelligencepacks: intelligencepacksOperations operations
    :vartype intelligencepacks: operational_insights_management_client.operations.intelligencepacksOperations
    :ivar linkedservices: linkedservicesOperations operations
    :vartype linkedservices: operational_insights_management_client.operations.linkedservicesOperations
    :ivar linkedstorageaccounts: linkedstorageaccountsOperations operations
    :vartype linkedstorageaccounts: operational_insights_management_client.operations.linkedstorageaccountsOperations
    :ivar managementgroups: managementgroupsOperations operations
    :vartype managementgroups: operational_insights_management_client.operations.managementgroupsOperations
    :ivar operationstatuses: operationstatusesOperations operations
    :vartype operationstatuses: operational_insights_management_client.operations.operationstatusesOperations
    :ivar sharedkeys: sharedkeysOperations operations
    :vartype sharedkeys: operational_insights_management_client.operations.sharedkeysOperations
    :ivar usages: usagesOperations operations
    :vartype usages: operational_insights_management_client.operations.usagesOperations
    :ivar storageinsightconfigs: storageinsightconfigsOperations operations
    :vartype storageinsightconfigs: operational_insights_management_client.operations.storageinsightconfigsOperations
    :ivar savedsearches: savedsearchesOperations operations
    :vartype savedsearches: operational_insights_management_client.operations.savedsearchesOperations
    :ivar availableservicetiers: availableservicetiersOperations operations
    :vartype availableservicetiers: operational_insights_management_client.operations.availableservicetiersOperations
    :ivar gateways: gatewaysOperations operations
    :vartype gateways: operational_insights_management_client.operations.gatewaysOperations
    :ivar schema: schemaOperations operations
    :vartype schema: operational_insights_management_client.operations.schemaOperations
    :ivar workspacepurge: workspacepurgeOperations operations
    :vartype workspacepurge: operational_insights_management_client.operations.workspacepurgeOperations
    :ivar clusters: clustersOperations operations
    :vartype clusters: operational_insights_management_client.operations.clustersOperations
    :ivar operations: operationsOperations operations
    :vartype operations: operational_insights_management_client.operations.operationsOperations
    :ivar tables: tablesOperations operations
    :vartype tables: operational_insights_management_client.operations.tablesOperations
    :ivar workspaces: workspacesOperations operations
    :vartype workspaces: operational_insights_management_client.operations.workspacesOperations
    :ivar deletedworkspaces: deletedworkspacesOperations operations
    :vartype deletedworkspaces: operational_insights_management_client.operations.deletedworkspacesOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: The ID of the target subscription.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential,  # type: "TokenCredential"
        subscription_id,  # type: str
        base_url=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = OperationalInsightsManagementClientConfiguration(credential, subscription_id, **kwargs)
        self._client = PipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.dataexports = dataexportsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.datasources = datasourcesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.intelligencepacks = intelligencepacksOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.linkedservices = linkedservicesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.linkedstorageaccounts = linkedstorageaccountsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.managementgroups = managementgroupsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operationstatuses = operationstatusesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sharedkeys = sharedkeysOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usages = usagesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.storageinsightconfigs = storageinsightconfigsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.savedsearches = savedsearchesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.availableservicetiers = availableservicetiersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.gateways = gatewaysOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.schema = schemaOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspacepurge = workspacepurgeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.clusters = clustersOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operations = operationsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.tables = tablesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspaces = workspacesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.deletedworkspaces = deletedworkspacesOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> OperationalInsightsManagementClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)
