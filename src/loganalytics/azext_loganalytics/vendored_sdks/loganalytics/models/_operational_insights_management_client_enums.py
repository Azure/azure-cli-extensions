# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class Billingtype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Configures whether billing will be only on the cluster or each workspace will be billed by its
    proportional use. This does not change the overall billing, only how it will be distributed.
    Default value is 'Cluster'
    """

    CLUSTER = "Cluster"
    WORKSPACES = "Workspaces"

class Clusterentitystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioning state of the cluster.
    """

    CREATING = "Creating"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    DELETING = "Deleting"
    PROVISIONINGACCOUNT = "ProvisioningAccount"
    UPDATING = "Updating"

class Clusterskunameenum(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The name of the SKU.
    """

    CAPACITYRESERVATION = "CapacityReservation"

class Dataingestionstatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The status of data ingestion for this workspace.
    """

    RESPECTQUOTA = "RespectQuota"  #: Ingestion enabled following daily cap quota reset, or subscription enablement.
    FORCEON = "ForceOn"  #: Ingestion started following service setting change.
    FORCEOFF = "ForceOff"  #: Ingestion stopped following service setting change.
    OVERQUOTA = "OverQuota"  #: Reached daily cap quota, ingestion stopped.
    SUBSCRIPTIONSUSPENDED = "SubscriptionSuspended"  #: Ingestion stopped following suspended subscription.
    APPROACHINGQUOTA = "ApproachingQuota"  #: 80% of daily cap quota reached.

class Datasourcekind(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The kind of the DataSource.
    """

    WINDOWSEVENT = "WindowsEvent"
    WINDOWSPERFORMANCECOUNTER = "WindowsPerformanceCounter"
    IISLOGS = "IISLogs"
    LINUXSYSLOG = "LinuxSyslog"
    LINUXSYSLOGCOLLECTION = "LinuxSyslogCollection"
    LINUXPERFORMANCEOBJECT = "LinuxPerformanceObject"
    LINUXPERFORMANCECOLLECTION = "LinuxPerformanceCollection"
    CUSTOMLOG = "CustomLog"
    CUSTOMLOGCOLLECTION = "CustomLogCollection"
    AZUREAUDITLOG = "AzureAuditLog"
    AZUREACTIVITYLOG = "AzureActivityLog"
    GENERICDATASOURCE = "GenericDataSource"
    CHANGETRACKINGCUSTOMPATH = "ChangeTrackingCustomPath"
    CHANGETRACKINGPATH = "ChangeTrackingPath"
    CHANGETRACKINGSERVICES = "ChangeTrackingServices"
    CHANGETRACKINGDATATYPECONFIGURATION = "ChangeTrackingDataTypeConfiguration"
    CHANGETRACKINGDEFAULTREGISTRY = "ChangeTrackingDefaultRegistry"
    CHANGETRACKINGREGISTRY = "ChangeTrackingRegistry"
    CHANGETRACKINGLINUXPATH = "ChangeTrackingLinuxPath"
    LINUXCHANGETRACKINGPATH = "LinuxChangeTrackingPath"
    CHANGETRACKINGCONTENTLOCATION = "ChangeTrackingContentLocation"
    WINDOWSTELEMETRY = "WindowsTelemetry"
    OFFICE365 = "Office365"
    SECURITYWINDOWSBASELINECONFIGURATION = "SecurityWindowsBaselineConfiguration"
    SECURITYCENTERSECURITYWINDOWSBASELINECONFIGURATION = "SecurityCenterSecurityWindowsBaselineConfiguration"
    SECURITYEVENTCOLLECTIONCONFIGURATION = "SecurityEventCollectionConfiguration"
    SECURITYINSIGHTSSECURITYEVENTCOLLECTIONCONFIGURATION = "SecurityInsightsSecurityEventCollectionConfiguration"
    IMPORTCOMPUTERGROUP = "ImportComputerGroup"
    NETWORKMONITORING = "NetworkMonitoring"
    ITSM = "Itsm"
    DNSANALYTICS = "DnsAnalytics"
    APPLICATIONINSIGHTS = "ApplicationInsights"
    SQLDATACLASSIFICATION = "SqlDataClassification"

class Datasourcetype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Linked storage accounts type.
    """

    CUSTOMLOGS = "CustomLogs"
    AZUREWATSON = "AzureWatson"
    QUERY = "Query"
    ALERTS = "Alerts"

class Identitytype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Type of managed service identity.
    """

    SYSTEMASSIGNED = "SystemAssigned"
    USERASSIGNED = "UserAssigned"
    NONE = "None"

class Linkedserviceentitystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioning state of the linked service.
    """

    SUCCEEDED = "Succeeded"
    DELETING = "Deleting"
    PROVISIONINGACCOUNT = "ProvisioningAccount"
    UPDATING = "Updating"

class Publicnetworkaccesstype(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The network access type for operating on the Log Analytics Workspace. By default it is Enabled
    """

    ENABLED = "Enabled"  #: Enables connectivity to Log Analytics through public DNS.
    DISABLED = "Disabled"  #: Disables public connectivity to Log Analytics through public DNS.

class Purgestate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Status of the operation represented by the requested Id.
    """

    PENDING = "pending"
    COMPLETED = "completed"

class Searchsortenum(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The sort order of the search.
    """

    ASC = "asc"
    DESC = "desc"

class Skunameenum(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The name of the Service Tier.
    """

    FREE = "Free"
    STANDARD = "Standard"
    PREMIUM = "Premium"
    PERNODE = "PerNode"
    PERGB2018 = "PerGB2018"
    STANDALONE = "Standalone"
    CAPACITYRESERVATION = "CapacityReservation"

class Storageinsightstate(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The state of the storage insight connection to the workspace
    """

    OK = "OK"
    ERROR = "ERROR"

class Type(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The type of the destination resource
    """

    STORAGEACCOUNT = "StorageAccount"
    EVENTHUB = "EventHub"

class Workspaceentitystatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The provisioning state of the workspace.
    """

    CREATING = "Creating"
    SUCCEEDED = "Succeeded"
    FAILED = "Failed"
    CANCELED = "Canceled"
    DELETING = "Deleting"
    PROVISIONINGACCOUNT = "ProvisioningAccount"
    UPDATING = "Updating"

class Workspaceskunameenum(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """The name of the SKU.
    """

    FREE = "Free"
    STANDARD = "Standard"
    PREMIUM = "Premium"
    PERNODE = "PerNode"
    PERGB2018 = "PerGB2018"
    STANDALONE = "Standalone"
    CAPACITYRESERVATION = "CapacityReservation"
    LACLUSTER = "LACluster"
