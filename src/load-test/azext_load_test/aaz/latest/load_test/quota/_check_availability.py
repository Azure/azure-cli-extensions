# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "load-test quota check-availability",
)
class CheckAvailability(AAZCommand):
    """Check Quota Availability on quota bucket per region per subscription.
    """

    _aaz_info = {
        "version": "2022-12-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.loadtestservice/locations/{}/quotas/{}/checkavailability", "2022-12-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            required=True,
        )
        _args_schema.quota_bucket_name = AAZStrArg(
            options=["--quota-bucket-name"],
            help="Quota Bucket name.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.current_quota = AAZIntArg(
            options=["--current-quota"],
            arg_group="Properties",
            help="Current quota limit of the quota bucket.",
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        _args_schema.current_usage = AAZIntArg(
            options=["--current-usage"],
            arg_group="Properties",
            help="Current quota usage of the quota bucket.",
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        _args_schema.dimensions = AAZObjectArg(
            options=["--dimensions"],
            arg_group="Properties",
            help="Dimensions for new quota request.",
        )
        _args_schema.new_quota = AAZIntArg(
            options=["--new-quota"],
            arg_group="Properties",
            help="New quota limit of the quota bucket.",
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )

        dimensions = cls._args_schema.dimensions
        dimensions.location = AAZStrArg(
            options=["location"],
            help="Location dimension for new quota request of the quota bucket.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        dimensions.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="Subscription Id dimension for new quota request of the quota bucket.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.QuotasCheckAvailability(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class QuotasCheckAvailability(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.LoadTestService/locations/{location}/quotas/{quotaBucketName}/checkAvailability",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "location", self.ctx.args.location,
                    required=True,
                ),
                **self.serialize_url_param(
                    "quotaBucketName", self.ctx.args.quota_bucket_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("currentQuota", AAZIntType, ".current_quota")
                properties.set_prop("currentUsage", AAZIntType, ".current_usage")
                properties.set_prop("dimensions", AAZObjectType, ".dimensions")
                properties.set_prop("newQuota", AAZIntType, ".new_quota")

            dimensions = _builder.get(".properties.dimensions")
            if dimensions is not None:
                dimensions.set_prop("location", AAZStrType, ".location")
                dimensions.set_prop("subscriptionId", AAZStrType, ".subscription_id")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.availability_status = AAZStrType(
                serialized_name="availabilityStatus",
            )
            properties.is_available = AAZBoolType(
                serialized_name="isAvailable",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


__all__ = ["CheckAvailability"]
