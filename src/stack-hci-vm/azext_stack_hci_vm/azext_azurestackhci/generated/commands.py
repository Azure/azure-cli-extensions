# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType

from ._validators import vm_create_validator, vnic_create_validator, vnet_create_validator

def load_command_table(self, _):

    from azext_azurestackhci.generated._client_factory import cf_galleryimage
    azurestackhci_galleryimage = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._galleryimages_operations#Galleryim'
        'agesOperations.{}',
        client_factory=cf_galleryimage)
    with self.command_group('azurestackhci image', azurestackhci_galleryimage,
                            client_factory=cf_galleryimage) as g:
        g.custom_command('list', 'azurestackhci_galleryimage_list')
        g.custom_command('create', 'azurestackhci_galleryimage_create')
        g.custom_command('update', 'azurestackhci_galleryimage_update')
        g.custom_command('delete', 'azurestackhci_galleryimage_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_galleryimage_show')

    from azext_azurestackhci.generated._client_factory import cf_galleryimage
    azurestackhci_galleryimage = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._galleryimages_operations#Galleryim'
        'agesOperations.{}',
        client_factory=cf_galleryimage)
    with self.command_group('azurestackhci galleryimage', azurestackhci_galleryimage,
                            client_factory=cf_galleryimage) as g:
        g.custom_command('list', 'azurestackhci_galleryimage_list')
        g.custom_command('create', 'azurestackhci_galleryimage_create')
        g.custom_command('update', 'azurestackhci_galleryimage_update')
        g.custom_command('delete', 'azurestackhci_galleryimage_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_galleryimage_show')

    from azext_azurestackhci.generated._client_factory import cf_networkinterface
    azurestackhci_networkinterface = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._networkinterfaces_operations#Netwo'
        'rkinterfacesOperations.{}',
        client_factory=cf_networkinterface)
    with self.command_group('azurestackhci networkinterface', azurestackhci_networkinterface,
                            client_factory=cf_networkinterface) as g:
        g.custom_command('list', 'azurestackhci_networkinterface_list')
        g.custom_command('create', 'azurestackhci_networkinterface_create', validator=vnic_create_validator)
        g.custom_command('update', 'azurestackhci_networkinterface_update')
        g.custom_command('delete', 'azurestackhci_networkinterface_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_networkinterface_show')

    from azext_azurestackhci.generated._client_factory import cf_virtualharddisk
    azurestackhci_virtualharddisk = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._virtualharddisks_operations#Virtua'
        'lharddisksOperations.{}',
        client_factory=cf_virtualharddisk)
    with self.command_group('azurestackhci virtualharddisk', azurestackhci_virtualharddisk,
                            client_factory=cf_virtualharddisk) as g:
        g.custom_command('list', 'azurestackhci_virtualharddisk_list')
        g.custom_command('create', 'azurestackhci_virtualharddisk_create')
        g.custom_command('update', 'azurestackhci_virtualharddisk_update')
        g.custom_command('delete', 'azurestackhci_virtualharddisk_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_virtualharddisk_show')

    from azext_azurestackhci.generated._client_factory import cf_virtualmachine
    azurestackhci_virtualmachine = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._virtualmachines_operations#Virtual'
        'machinesOperations.{}',
        client_factory=cf_virtualmachine)
    with self.command_group('azurestackhci virtualmachine', azurestackhci_virtualmachine,
                            client_factory=cf_virtualmachine) as g:
        g.custom_command('list', 'azurestackhci_virtualmachine_list')
        g.custom_command('create', 'azurestackhci_virtualmachine_create', validator=vm_create_validator)
        g.custom_command('update', 'azurestackhci_virtualmachine_update')
        g.custom_command('delete', 'azurestackhci_virtualmachine_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_virtualmachine_show')
        g.custom_command('start', 'azurestackhci_virtualmachine_start')
        g.custom_command('stop', 'azurestackhci_virtualmachine_stop')
        g.custom_command('restart', 'azurestackhci_virtualmachine_restart')

    with self.command_group('azurestackhci virtualmachine vnic', azurestackhci_virtualmachine,
                            client_factory=cf_virtualmachine) as g:
        g.custom_command('add', 'azurestackhci_virtualmachine_vnic_add')
        g.custom_command('remove', 'azurestackhci_virtualmachine_vnic_remove', confirmation=True)

    from azext_azurestackhci.generated._client_factory import cf_virtualnetwork
    azurestackhci_virtualnetwork = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._virtualnetworks_operations#Virtual'
        'networksOperations.{}',
        client_factory=cf_virtualnetwork)
    with self.command_group('azurestackhci virtualnetwork', azurestackhci_virtualnetwork,
                            client_factory=cf_virtualnetwork) as g:
        g.custom_command('list', 'azurestackhci_virtualnetwork_list')
        g.custom_command('create', 'azurestackhci_virtualnetwork_create', validator=vnet_create_validator)
        g.custom_command('update', 'azurestackhci_virtualnetwork_update')
        g.custom_command('delete', 'azurestackhci_virtualnetwork_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_virtualnetwork_show')

    from azext_azurestackhci.generated._client_factory import cf_storagecontainer
    azurestackhci_storagecontainer = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._storagecontainers_operations#Stora'
        'gecontainersOperations.{}',
        client_factory=cf_storagecontainer)
    with self.command_group('azurestackhci storagepath', azurestackhci_storagecontainer,
                            client_factory=cf_storagecontainer) as g:
        g.custom_command('list', 'azurestackhci_storagecontainer_list')
        g.custom_command('create', 'azurestackhci_storagecontainer_create')
        g.custom_command('update', 'azurestackhci_storagecontainer_update')
        g.custom_command('delete', 'azurestackhci_storagecontainer_delete', confirmation=True)
        g.custom_command('show', 'azurestackhci_storagecontainer_show')

    from azext_azurestackhci.generated._client_factory import cf_arc_vmextension
    azurestackhci_arcvmextension = CliCommandType(
        operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._arc_vmextensions_operations#ArcVmExtensions'
        'Operations.{}',
        client_factory=cf_arc_vmextension)
    with self.command_group('azurestackhci virtualmachine extension', azurestackhci_arcvmextension,
                            client_factory=cf_arc_vmextension) as g:
        g.custom_command('create', 'azurestackhci_vmextension_create')
        g.custom_command('show', 'azurestackhci_vmextension_show')
        g.custom_command('delete', 'azurestackhci_vmextension_delete', confirmation=True)
        g.custom_command('list', 'azurestackhci_vmextension_list')
        g.custom_wait_command('wait', 'azurestackhci_vmextension_show')
        g.custom_command('update', 'azurestackhci_vmextension_update')

    # from azext_azurestackhci.generated._client_factory import cf_cluster
    # azurestackhci_cluster = CliCommandType(
    #     operations_tmpl='azext_azurestackhci.vendored_sdks.azurestackhci.operations._clusters_operations#ClustersOperat'
    #     'ions.{}',
    #     client_factory=cf_cluster)
    # with self.command_group('azurestackhci cluster', azurestackhci_cluster, client_factory=cf_cluster) as g:
    #     g.custom_command('list', 'azurestackhci_cluster_list')
    #     g.custom_show_command('show', 'azurestackhci_cluster_show')
    #     g.custom_command('create', 'azurestackhci_cluster_create')
    #     g.custom_command('update', 'azurestackhci_cluster_update')
    #     g.custom_command('delete', 'azurestackhci_cluster_delete', confirmation=True)

    with self.command_group('azurestackhci', is_experimental=True):
        pass
