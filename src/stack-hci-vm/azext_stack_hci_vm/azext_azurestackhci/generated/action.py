# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.log import get_logger
from knack.util import CLIError
import json
from azure.cli.core.azclierror import InvalidArgumentValueError


logger = get_logger(__name__)

class AddGalleryimagesExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d


class AddNetworkinterfacesExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d


class AddVirtualharddisksExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d


class AddVirtualmachinesExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d


class AddHardwareProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.hardware_profile = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        dynamic_memory_config = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'vm-size':
                d['vm_size'] = v[0]
            elif kl == 'processors':
                d['processors'] = v[0]
            elif kl == 'memory-mb':
                d['memory_mb'] = v[0]
            elif kl == 'maximum-memory-mb':
                dynamic_memory_config['maximum_memory_mb'] = int(v[0])
            elif kl == 'minimum-memory-mb':
                dynamic_memory_config['minimum_memory_mb'] = int(v[0])
            elif kl == 'memory-gb':
                logger.warning("'memory-gb' setting under option --hardware-profile has been deprecated and will be removed in a future release. Use 'memory-mb' instead.")
                d['memory_mb'] = int(v[0]) * 1024
            elif kl == 'maximum-memory-gb':
                logger.warning("'maximum-memory-gb' setting under option --hardware-profile has been deprecated and will be removed in a future release. Use 'maximum-memory-mb' instead.")
                dynamic_memory_config['maximum_memory_mb'] = int(v[0]) * 1024
            elif kl == 'minimum-memory-gb':
                logger.warning("'minimum-memory-gb' setting under option --hardware-profile has been deprecated and will be removed in a future release. Use 'minimum-memory-mb' instead.")
                dynamic_memory_config['minimum_memory_mb'] = int(v[0]) * 1024
            elif kl == 'target-memory-buffer':
                dynamic_memory_config['target_memory_buffer'] = int(v[0])
            else:
                raise CLIError('Unsupported Key {} is provided for parameter hardware_profile. All possible keys are: '
                               'vm-size, processors, memory-mb, maximum-memory-mb, minimum-memory-mb, target-memory-buffer'.format(k))
        if dynamic_memory_config:
            d['dynamic_memory_config'] = dynamic_memory_config
        return d


class AddNetworkProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.network_profile = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'network-interfaces':
                d['network_interfaces'] = (json.loads(v[0]))
            else:
                raise CLIError('Unsupported Key {} is provided for parameter network_profile. All possible keys are: '
                               'network-interfaces'.format(k))
        return d


class AddSecurityProfile(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.security_profile = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'secure-boot-enabled':
                d['uefi_settings'] = {}
                d['uefi_settings']['secure_boot_enabled'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter security_profile. All possible keys are: '
                               'enable-tpm'.format(k))
        return d


class AddVirtualnetworksExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d


class AddStoragecontainersExtendedLocation(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.extended_location = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'type':
                d['type'] = v[0]
            elif kl == 'name':
                d['name'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter extended_location. All possible keys are: '
                               'type, name'.format(k))
        return d

class AddLinuxConfiguration(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        if action:
            if hasattr(namespace, 'os_profile'):
                if namespace.os_profile is None:
                    namespace.os_profile = {'linux_configuration': action}
                else:
                    namespace.os_profile['linux_configuration'] = action
            else:
                namespace.os_profile = {'linux_configuration': action}

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        ssh_data = [] 
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'ssh_keys':
                ssh_data.extend(json.loads(i) for i in v)
            else:
                raise CLIError('Unsupported Key {} is provided for parameter linux_configuration. All possible keys are: '
                               'ssh_data'.format(k))
        if ssh_data:
            return {'ssh': {'public_keys': ssh_data}}
        return {}

class AddStatus(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.status = action
    
    def get_action(self, values, option_string):
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise InvalidArgumentValueError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]

            if kl == 'code':
                d['code'] = v[0]

            elif kl == 'level':
                d['level'] = v[0]

            elif kl == 'display-status':
                d['display_status'] = v[0]

            elif kl == 'message':
                d['message'] = v[0]

            elif kl == 'time':
                d['time'] = v[0]

            else:
                raise InvalidArgumentValueError(
                    'Unsupported Key {} is provided for parameter status. All possible keys are: code, level,'
                    ' display-status, message, time'.format(k)
                )

        return d