# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    resource_group_name_type,
    get_location_type,
    get_enum_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_azurestackhci.action import (
    AddGalleryimagesExtendedLocation,
    AddNetworkinterfacesExtendedLocation,
    AddVirtualharddisksExtendedLocation,
    AddVirtualmachinesExtendedLocation,
    AddHardwareProfile,
    AddNetworkProfile,
    AddSecurityProfile,
    AddVirtualnetworksExtendedLocation,
    AddLinuxConfiguration,
    AddStoragecontainersExtendedLocation,
    AddStatus
)

def load_arguments(self, _):

    with self.argument_context('azurestackhci image list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci image create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddGalleryimagesExtendedLocation, nargs='+', help='')
        c.argument('container_name', type=str, help='Container Name for storage container')
        c.argument('image_path', type=str, help='location of the image the gallery image should be created from')
        c.argument('os_type', type=str, help='OS Type [Windows, Linux]')
        c.argument('offer', type=str, help='offer for Marketplace image')
        c.argument('publisher', type=str, help='publisher for Marketplace image')
        c.argument('sku', type=str, help='sku for Marketplace image')
        c.argument('version', type=str, help='version for Marketplace image')

    with self.argument_context('azurestackhci image update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('azurestackhci image delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')

    with self.argument_context('azurestackhci image show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')

    with self.argument_context('azurestackhci galleryimage list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci galleryimage create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddGalleryimagesExtendedLocation, nargs='+', help='')
        c.argument('storagepath_id', type=str, help='Azure ID of the Storage Path which is used to store the Gallery Images.')
        c.argument('image_path', type=str, help='location of the image the gallery image should be created from')
        c.argument('hyper-v-generation',type=str, help='HyperV Generation [V1, V2]')
        c.argument('os_type', arg_type=get_enum_type(['Windows', 'Linux']), help='OS Type')
        c.argument('offer', type=str, help='offer for Marketplace image')
        c.argument('publisher', type=str, help='publisher for Marketplace image')
        c.argument('sku', type=str, help='sku for Marketplace image')
        c.argument('version', type=str, help='version for Marketplace image')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci galleryimage update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('azurestackhci galleryimage delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci galleryimage show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the gallery image', id_part='name')

    with self.argument_context('azurestackhci networkinterface list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci networkinterface create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the network interface')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddNetworkinterfacesExtendedLocation, nargs='+', help='')
        c.argument('ip_configurations', type=validate_file_or_dict, help='IPConfigurations - A list of '
                   'IPConfigurations of the network interface. Expected value: json-string/@json-file.')
        c.argument('mac_address', type=str, help='MacAddress - The MAC address of the network interface.')
        c.argument('dns_servers', nargs='+', help='Space-separated list of DNS server IP addresses.')
        c.argument('subnet_id', type=str, help='ID of the subnet or network to create the network interface on')
        c.argument('gateway', type=str, help='Gateway for network interface')
        c.argument('ip_address', type=str, help='ip_address - Private IP address of the IP configuration.')
        c.argument('ip_allocation_method', type=str, help='ip_allocation_method - The private IP address allocation method. Possible values include: Static, Dynamic', deprecate_info=c.deprecate(target='--ip-allocation-method'))
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci networkinterface update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the network interface', id_part='name')
        c.argument('tags', tags_type)
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci networkinterface delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the network interface', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci networkinterface show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the network interface', id_part='name')

    with self.argument_context('azurestackhci virtualharddisk list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci virtualharddisk create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual hard disk')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddVirtualharddisksExtendedLocation, nargs='+', help='')
        c.argument('block_size_bytes', type=int, help='Block size')
        c.argument('disk_size_bytes', type=int, help='Size of the disk in GB', deprecate_info=c.deprecate(target='--disk-size-bytes', redirect='--disk-size-gb', hide=True))
        c.argument('disk_size_gb', type=int, help='Size of the disk in GB')
        c.argument('dynamic', arg_type=get_three_state_flag(), help='Boolean for enabling dynamic sizing on the '
                   'virtual hard disk')
        c.argument('logical_sector_bytes', type=int, help='Logical Sector')
        c.argument('physical_sector_bytes', type=int, help='Physical Sector')        
        c.argument('disk_file_format', type=str, help='Disk File Format [vhd, vhdx]')
        c.argument('storagepath_id',type=str,help='Azure ID of the Storage Path which is used to store the VHD.')
        c.argument('disk_file_format', type=str, help='Disk File Format [vhd, vhdx]')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualharddisk update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual hard disk', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('azurestackhci virtualharddisk delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual hard disk', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualharddisk show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual hard disk', id_part='name')

    with self.argument_context('azurestackhci virtualmachine list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci virtualmachine create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddVirtualmachinesExtendedLocation, nargs='+', help='')
        c.argument('hardware_profile', action=AddHardwareProfile, nargs='+', help='HardwareProfile - Specifies the '
                   'hardware settings for the virtual machine.')
        c.argument('image_reference', type=str, help='ImageReference - gallery image name the vm should use to provision')
        c.argument('os_disk', type=str, help='Os Disk - name of the vhd the vm should use to provision')
        c.argument('data_disk', type=str, nargs='+', help='List of data disk to attach to the vm')
        c.argument('storagepath_id', type=str, help='Azure ID of the Storage Path pointing to the location where the VM config files are stored.')
        c.argument('network_profile', action=AddNetworkProfile, nargs='+', help='NetworkProfile - describes the '
                   'network configuration the virtual machine')
        c.argument('nic_id', type=str, help='nicID - Network Interface id to attach to the virtual machine.')
        ## Don't change the order of the lines, because linux_configuration builds on os_profile;
        ## Starting here
        c.argument('os_profile', type=validate_file_or_dict, help='OsProfile - describes the configuration of the '
                   'operating system and sets login data Expected value: json-string/@json-file.')
        c.argument('linux_configuration', action=AddLinuxConfiguration, nargs='*', help='Linux configuration - '
                   'specifies ssh keys for the virtual machine')
        ## end here
        c.argument('windows_configuration', type=validate_file_or_dict, help='Windows configuration -'
                    'Windows Configuration for the virtual machine ')
        c.argument('security_profile', action=AddSecurityProfile, nargs='+', help='SecurityProfile - Specifies the '
                   'security settings for the virtual machine.')
        c.argument('enable_tpm', help='Enable tpm for security profile', nargs='?', const=True, default=False)
        c.argument('storage_profile', type=validate_file_or_dict, help='StorageProfile - contains information about '
                   'the disks and storage information for the virtual machine Expected value: json-string/@json-file.')
        c.argument('vm_size', type=str, help='VMSize - stock vm hardware configuration to use')
        c.argument('admin_username', type=str, help='Admin Username')
        c.argument('admin_password', type=str, help='Admin Password')
        c.argument('computer_name', type=str, help='Computer Name')
        c.argument('disable_vm_management', arg_type=get_three_state_flag(), help='Boolean for enabling VM arc for server agent')
        c.argument('ssh_public_keys', type=str, nargs='*', help='Path to ssh public key(s) for linux vm')
        c.argument('allow_password_auth', arg_type=get_three_state_flag(), help='Enable password authentication for Linux VM')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('tags', tags_type)
        c.argument('cpu_count', type=int, help='number of processors for the virtual machine')
        c.argument('memory_gb', type=int, help='RAM in gb for the virtual machine', deprecate_info=c.deprecate(target='--memory-gb', redirect='--memory-mb', hide=True))
        c.argument('memory_mb', type=int, help='RAM in mb for the virtual machine')
        c.argument('vnic_names', type=str, nargs='+', help='List of vnic names')
        c.argument('vhd_names', type=str, nargs='+', help='List of virtual hard disk names')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')

    with self.argument_context('azurestackhci virtualmachine start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine restart') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualmachine vnic add') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('vnic_names', type=str, nargs='+', help='List of vnic names')

    with self.argument_context('azurestackhci virtualmachine vnic remove') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual machine', id_part='name')
        c.argument('vnic_names', type=str, nargs='+', help='List of vnic names')

    with self.argument_context('azurestackhci virtualnetwork list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci virtualnetwork create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual network')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddVirtualnetworksExtendedLocation, nargs='+', help='')
        c.argument('network_type', type=str, help='Type of the network')
        c.argument('subnets', type=validate_file_or_dict, help='Subnet - list of subnets under the virtual network. '
                   'All other subnet properties in the cli parameters will be ignored if this is provided. '
                   'Expected value: json-string/@json-file.')
        c.argument('address_prefix', type=str, help='Cidr for this subnet - IPv4, IPv6')
        c.argument('ip_allocation_method', type=str, help='IPAllocationMethod - The IP address allocation method. Possible values include: Static, Dynamic')
        c.argument('ip_pools', type=validate_file_or_dict, help='ippools')
        c.argument('ip_pool_type', type=str, help='ip pool type')
        c.argument('ip_pool_start', type=str, help='start of the ip address pool')
        c.argument('ip_pool_end', type=str, help='end of the ip address pool')
        c.argument('vlan', type=int, help='Vlan to use for the subnet')
        c.argument('vm_switch_name', type=str, help='Name of the VM switch')
        c.argument('dns_servers', nargs='+', help='Space-separated list of DNS server IP addresses.')
        c.argument('routes', type=validate_file_or_dict, help='Collection of routes contained within a route table')
        c.argument('gateway', type=str, help='Gateway')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualnetwork update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual network', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('azurestackhci virtualnetwork delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual network', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci virtualnetwork show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the virtual network', id_part='name')

    with self.argument_context('azurestackhci storagepath list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('azurestackhci storagepath create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the storage path')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('extended_location', action=AddStoragecontainersExtendedLocation, nargs='+', help='')
        c.argument('path', type=str, help='Path on a disk to create storagepath', required=True)
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci storagepath update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the storage path', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('azurestackhci storagepath delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the storage path', id_part='name')
        c.argument('polling_interval', type=str, help='ARM polling interval for long running operations.')

    with self.argument_context('azurestackhci storagepath show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='Name of the storage path', id_part='name')
    
    with self.argument_context('azurestackhci virtualmachine extension create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', help='The name of the extension.')
        c.argument('virtualmachine_name', help='The name of the virtual machine where the extension should be created or updated.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)        
        c.argument('force_update_tag', help='How the extension handler should be forced to update even if '
                   'the extension configuration has not changed.')
        c.argument('publisher', type=str, help='The name of the extension handler publisher.')
        c.argument('extension_type', type=str, help='Specify the type of the extension; an example '
                   'is "CustomScriptExtension".')
        c.argument('type_handler_version', type=str, help='Specify the version of the script handler.')
        c.argument('enable_auto_upgrade', arg_type=get_three_state_flag(), help='Indicate whether the extension '
                   'should be automatically upgraded by the platform if there is a newer version available.')
        c.argument('auto_upgrade_minor', arg_type=get_three_state_flag(), help='Indicate whether the extension should '
                   'use a newer minor version if one is available at deployment time. Once deployed, however, the '
                   'extension will not upgrade minor versions unless redeployed, even with this property set to true.')
        c.argument('settings', type=validate_file_or_dict, help='Json formatted public settings for the extension. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('protected_settings', type=validate_file_or_dict, help='The extension can contain either '
                   'protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. Expected '
                   'value: json-string/json-file/@json-file.')
        c.argument('instance_view_type', help='Specify the type of the extension; an example is '
                   '"CustomScriptExtension".', arg_group='Instance View')
        c.argument('inst_handler_version', help='Specify the version of the script handler.',
                   arg_group='Instance View')
        c.argument('status', action=AddStatus, nargs='+', help='Instance view status.', arg_group='Instance View')

    with self.argument_context('azurestackhci virtualmachine extension update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtualmachine_name', help='The name of the virtual machine containing the extension.', id_part='name')
        c.argument('name', help='The name of the extension.')
        c.argument('tags', tags_type)
        c.argument('force_update_tag', help='How the extension handler should be forced to update even if '
                   'the extension configuration has not changed.')
        c.argument('publisher', type=str, help='The name of the extension handler publisher.')
        c.argument('extension_type', type=str, help='Specify the type of the extension; an example '
                   'is "CustomScriptExtension".')
        c.argument('type_handler_version', type=str, help='Specify the version of the script handler.')
        c.argument('enable_auto_upgrade', arg_type=get_three_state_flag(), help='Indicate whether the extension '
                   'should be automatically upgraded by the platform if there is a newer version available.')
        c.argument('auto_upgrade_minor', arg_type=get_three_state_flag(), help='Indicate whether the extension should '
                   'use a newer minor version if one is available at deployment time. Once deployed, however, the '
                   'extension will not upgrade minor versions unless redeployed, even with this property set to true.')
        c.argument('settings', type=validate_file_or_dict, help='Json formatted public settings for the extension. '
                   'Expected value: json-string/json-file/@json-file.')
        c.argument('protected_settings', type=validate_file_or_dict, help='The extension can contain either '
                   'protectedSettings or protectedSettingsFromKeyVault or no protected settings at all. Expected '
                   'value: json-string/json-file/@json-file.')

    with self.argument_context('azurestackhci virtualmachine extension show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtualmachine_name', help='The name of the virtual machine containing the extension.', id_part='name')
        c.argument('name', help='The name of the machine extension.', id_part='child_name_1')
    
    with self.argument_context('azurestackhci virtualmachine extension list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtualmachine_name', help='The name of the virtual machine containing the extension.')
    
    with self.argument_context('azurestackhci virtualmachine extension delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtualmachine_name', help='The name of the virtual machine where the extension should be deleted from.',
                   id_part='name')
        c.argument('name', help='The name of the machine extension.', id_part='child_name_1')

    with self.argument_context('azurestackhci virtualmachine extension wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtualmachine_name', help='The name of the virtual machine containing the extension.',
                   id_part='name')
        c.argument('name', help='The name of the machine extension.', id_part='child_name_1')    

    # with self.argument_context('azurestackhci cluster list') as c:
    #     c.argument('resource_group_name', resource_group_name_type)

    # with self.argument_context('azurestackhci cluster show') as c:
    #     c.argument('resource_group_name', resource_group_name_type)
    #     c.argument('name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
    #                'cluster.', id_part='name')

    # with self.argument_context('azurestackhci cluster create') as c:
    #     c.argument('resource_group_name', resource_group_name_type)
    #     c.argument('name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
    #                'cluster.')
    #     c.argument('tags', tags_type)
    #     c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
    #                validator=get_default_location_from_resource_group)
    #     c.argument('aad_client_id', type=str, help='App id of cluster AAD identity.')
    #     c.argument('aad_tenant_id', type=str, help='Tenant id of cluster AAD identity.')

    # with self.argument_context('azurestackhci cluster update') as c:
    #     c.argument('resource_group_name', resource_group_name_type)
    #     c.argument('name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
    #                'cluster.', id_part='name')
    #     c.argument('tags', tags_type)

    # with self.argument_context('azurestackhci cluster delete') as c:
    #     c.argument('resource_group_name', resource_group_name_type)
    #     c.argument('name', options_list=['--name', '-n', '--cluster-name'], type=str, help='The name of the '
    #                'cluster.', id_part='name')
