# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.azclierror import ArgumentUsageError, CLIError
from knack.prompting import prompt_y_n, NoTTYException
from azure.cli.core.util import sdk_no_wait
from .helpers import read_file
import json
import re


def azurestackhci_galleryimage_list(client,
                                    resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_galleryimage_create(client,
                                      resource_group_name,
                                      name,
                                      location,
                                      tags=None,
                                      extended_location=None,
                                      storagepath_id=None,
                                      image_path=None,
                                      os_type=None, 
                                      offer=None,
                                      publisher=None,
                                      sku=None,
                                      version=None,
                                      polling_interval=None):
    galleryimages = {}
    galleryimages['location'] = location
    galleryimages['tags'] = tags
    galleryimages['extended_location'] = extended_location
    galleryimages['properties'] = {}
    galleryimages['properties']['storagepath_id'] = storagepath_id
    galleryimages['properties']['image_path'] = image_path
    galleryimages['properties']['identifier'] = None

    if (os_type is not None):
        if (os_type.lower() == 'windows'):
            os_type = 'Windows'
        elif (os_type.lower() == 'linux'):
            os_type = 'Linux'
        else: 
            raise ArgumentUsageError("The supported os types for image creation are 'Windows' and 'Linux'.")
    
    galleryimages['properties']['os_type'] = os_type

    if (not re.match('[a-zA-Z0-9][-._a-zA-Z0-9]{0,78}[a-zA-Z0-9]$', name)):
        raise ArgumentUsageError("The name must start and end with an alphanumeric character and must contain all alphanumeric characters or '-', '.', or '_'")

    if ((offer is not None) and (publisher is not None) and (sku is not None) and (version is not None)):
        galleryimages['properties']['identifier'] = {}
        galleryimages['properties']['identifier']['offer'] = offer
        galleryimages['properties']['identifier']['publisher'] = publisher  
        galleryimages['properties']['identifier']['sku'] = sku  
        galleryimages['properties']['version'] = {}
        galleryimages['properties']['version']['name'] = version

    if (image_path is None and not ((offer is not None) and (publisher is not None) and (sku is not None) and (version is not None))):
        raise ArgumentUsageError('All required image specifications are not properly specified. Please specify --image-path which can be a local path or SAS uri , or (--offer, --publisher, --sku, and --version).')

    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         galleryimages_name=name,
                                         galleryimages=galleryimages)


def azurestackhci_galleryimage_update(client,
                                      resource_group_name,
                                      name,
                                      tags=None,
                                      polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.update(resource_group_name=resource_group_name,
                         galleryimages_name=name,
                         tags=tags)


def azurestackhci_galleryimage_delete(client,
                                      resource_group_name,
                                      name,
                                      polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         galleryimages_name=name)


def azurestackhci_galleryimage_show(client,
                                        resource_group_name,
                                        name):
    return client.retrieve(resource_group_name=resource_group_name,
                           galleryimages_name=name)


def azurestackhci_networkinterface_list(client,
                                        resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_networkinterface_create(client,
                                          resource_group_name,
                                          name,
                                          location,
                                          tags=None,
                                          extended_location=None,
                                          ip_configurations=None,
                                          subnet_id=None,
                                          gateway=None,
                                          ip_address=None,
                                          ip_allocation_method=None,
                                          mac_address=None,
                                          dns_servers=None,
                                          polling_interval=None):
    networkinterfaces = {}
    networkinterfaces['location'] = location
    networkinterfaces['tags'] = tags
    networkinterfaces['extended_location'] = extended_location
    networkinterfaces['properties'] = {}
    networkinterfaces['properties']['ip_configurations'] = ip_configurations or list()
    networkinterfaces['properties']['mac_address'] = mac_address

    if dns_servers:
        networkinterfaces['properties']['dns_settings'] = {}
        networkinterfaces['properties']['dns_settings']['dns_servers'] = dns_servers

    ipconfig = ""
    if ip_configurations is None and subnet_id is None:
      raise ArgumentUsageError("Network Interface should have atleast one IP Configuration. Please specify the --ip-configurations parameter and provide a IP Configuration")  
    if ip_configurations is not None and subnet_id is not None:
        message = "Both `--ip-configurations` and `--subnet-id` are provided. This will result in ignoring subnet-id. Please refer help section for details. Do you want to continue?"
        if not prompt_y_n(message, 'n'):
                raise CLIError('Operation cancelled. Please use the command again with correct parameters')
    if ip_configurations is not None:
        if len(ip_configurations) == 0:
            raise ArgumentUsageError("Empty network ip configurations are provided. Please specify the `--ip-configurations` correctly or pass the `subnet-id`")
        i = 0
        while i < len(ip_configurations):
            ipconfig = str(ip_configurations[i]).replace("\'","\"")
            ipconfig = json.loads(ipconfig)
            if ('properties' not in ipconfig or 'subnet' not in ipconfig['properties'] or 'id' not in ipconfig['properties']['subnet']):
                raise ArgumentUsageError("Network Interface should have atleast one IP Configuration. \
Please specify the --ip-configurations parameter and provide IP Configurations along with the subnet id for each ip config and the associated virtual network ID")
            i = i + 1
    # IP Configurations
    if ip_configurations is None and subnet_id is not None:
        if len(subnet_id.strip()) == 0:
            raise ArgumentUsageError("Empty network subnet-id provided. Please pass the `subnet-id` correctly or pass `ip-configurations`")
        networkipconfig = {}
        networkipconfig['name'] = 'ipconfig'
        networkipconfig['properties'] = {}
        networkipconfig['properties']['private_ip_address'] = ip_address
        networkipconfig['properties']['gateway'] = gateway
        networkipconfig['properties']['subnet'] = {}
        networkipconfig['properties']['subnet']['id'] = subnet_id
        networkinterfaces['properties']['ip_configurations'].append(networkipconfig)
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         networkinterfaces_name=name,
                                         networkinterfaces=networkinterfaces)


def azurestackhci_networkinterface_update(client,
                                          resource_group_name,
                                          name,
                                          tags=None):
    return client.update(resource_group_name=resource_group_name,
                         networkinterfaces_name=name,
                         tags=tags)


def azurestackhci_networkinterface_delete(client,
                                          resource_group_name,
                                          name,
                                          polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         networkinterfaces_name=name)


def azurestackhci_networkinterface_show(client,
                                            resource_group_name,
                                            name):
    return client.retrieve(resource_group_name=resource_group_name,
                           networkinterfaces_name=name)


def azurestackhci_virtualharddisk_list(client,
                                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_virtualharddisk_create(client,
                                         resource_group_name,
                                         name,
                                         location,
                                         tags=None,
                                         extended_location=None,
                                         block_size_bytes=None,
                                         disk_size_bytes=None,
                                         disk_size_gb=None,
                                         disk_file_format=None,
                                         dynamic=None,
                                         logical_sector_bytes=None,
                                         physical_sector_bytes=None,
                                         storagepath_id=None,
                                         polling_interval=None):
    # For backward compatibility. disk_size_bytes is deprecated
    if disk_size_bytes and not disk_size_gb:
        disk_size_gb = disk_size_bytes

    virtualharddisks = {}
    virtualharddisks['location'] = location
    virtualharddisks['tags'] = tags
    virtualharddisks['extended_location'] = extended_location
    virtualharddisks['properties'] = {}
    virtualharddisks['properties']['block_size_bytes'] = block_size_bytes
    virtualharddisks['properties']['disk_size_gb'] = disk_size_gb
    virtualharddisks['properties']['disk_file_format'] = disk_file_format
    virtualharddisks['properties']['dynamic'] = dynamic
    virtualharddisks['properties']['logical_sector_bytes'] = logical_sector_bytes
    virtualharddisks['properties']['physical_sector_bytes'] = physical_sector_bytes
    virtualharddisks['properties']['storagepath_id'] = storagepath_id

    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualharddisks_name=name,
                                         virtualharddisks=virtualharddisks)


def azurestackhci_virtualharddisk_update(client,
                                         resource_group_name,
                                         name,
                                         tags=None):   
    return client.update(resource_group_name=resource_group_name,
                         virtualharddisks_name=name,
                         tags=tags)


def azurestackhci_virtualharddisk_delete(client,
                                         resource_group_name,
                                         name,
                                         polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         virtualharddisks_name=name)


def azurestackhci_virtualharddisk_show(client,
                                           resource_group_name,
                                           name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualharddisks_name=name)


def azurestackhci_virtualmachine_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_virtualmachine_create(client,
                                        resource_group_name,
                                        name,
                                        location,
                                        tags=None,
                                        extended_location=None,
                                        hardware_profile=None,
                                        image_reference=None,
                                        network_profile=None,
                                        nic_id=None,
                                        os_profile=None,
                                        security_profile = None,
                                        enable_tpm=None,
                                        storage_profile=None,
                                        storagepath_id=None,
                                        linux_configuration=None,
                                        windows_configuration=None,
                                        vm_size=None,
                                        admin_password=None,
                                        admin_username=None,
                                        computer_name=None,
                                        ssh_public_keys=None,
                                        os_disk=None,
                                        data_disk=None,
                                        allow_password_auth=None,
                                        disable_vm_management=None,
                                        polling_interval=None):
    virtualmachines = {}
    virtualmachines['location'] = location
    virtualmachines['tags'] = tags
    virtualmachines['extended_location'] = extended_location
    virtualmachines['properties'] = {}
    virtualmachines['properties']['hardware_profile'] = hardware_profile or {}
    virtualmachines['properties']['network_profile'] = network_profile or {}
    virtualmachines['properties']['security_profile'] = security_profile or {}
    virtualmachines['properties']['security_profile']['enable_tpm'] = True if enable_tpm else False
    virtualmachines['properties']['storage_profile'] = storage_profile or {}

    if vm_size == "Default":
        raise ArgumentUsageError("Invalid vm-size provided. 'Default' is not a supported vm-size.")

    if os_profile is None:
        os_profile = {}

    if linux_configuration is None:
        linux_configuration = {}

    if windows_configuration is None:
        windows_configuration = {}

    # Enabling the vm arc agent by default and disabling it as per user's input
    # If the user wants to disable guest management, VM Agent provisioning is disabled
    if disable_vm_management == True:
        windows_configuration['provision_vm_agent'] =  False
        linux_configuration['provision_vm_agent'] =  False
    # Otherwise, the provisioning will be enabled by default
    else:
        windows_configuration['provision_vm_agent'] =  True
        linux_configuration['provision_vm_agent'] =  True

        # If provisioning vm agent, identity should be SystemAssigned
        virtualmachines['identity'] = { 'type': 'SystemAssigned' }

    if allow_password_auth:
        linux_configuration['disable_password_authentication'] = False

    # set the OS configurations for VM
    if any(i is not None for i in (admin_username, admin_password)):
        if admin_password is not None:
            os_profile['admin_password'] = admin_password
        if admin_username is not None:
            os_profile['admin_username'] = admin_username

    if computer_name is not None:
        os_profile['computer_name'] = computer_name

    if ssh_public_keys:
       keys = [] 
       for key_path in ssh_public_keys:
           key = read_file(key_path)
           keys.append({'key_data': key})
       linux_configuration['ssh'] = {'public_keys': keys}
       windows_configuration['ssh'] = {'public_keys': keys}

    # Overriden Variables
    if image_reference is not None:
        virtualmachines['properties']['storage_profile']['image_reference'] =  {'id': image_reference}
    if os_disk is not None:
        virtualmachines['properties']['storage_profile']['os_disk'] = {'id': os_disk}
    if storagepath_id is not None:
        virtualmachines['properties']['storage_profile']['storagepath_id'] = storagepath_id
    if data_disk is not None:
        virtualmachines['properties']['storage_profile']['data_disks'] = []
        for disk in data_disk:
            virtualmachines['properties']['storage_profile']['data_disks'].append({'id': disk})
    if nic_id is not None:
        virtualmachines['properties']['network_profile']['network_interfaces'] = [{'id' : nic_id}]
    if vm_size is not None:
        virtualmachines['properties']['hardware_profile']['vm_size'] = vm_size
    
    if windows_configuration:
        os_profile['windows_configuration'] = windows_configuration
    if linux_configuration:
       os_profile['linux_configuration'] = linux_configuration
    if os_profile:
        virtualmachines['properties']['os_profile'] = os_profile

    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualmachines_name=name,
                                         virtualmachines=virtualmachines)


def azurestackhci_virtualmachine_update(client,
                                        resource_group_name,
                                        name,
                                        tags=None,
                                        cpu_count=None,
                                        memory_gb=None,
                                        memory_mb=None,
                                        vnic_names=None,
                                        vhd_names=None,
                                        polling_interval=None):
    # For backward compatibility. memory_gb is deprecated
    if memory_gb and not memory_mb:
        memory_mb = memory_gb * 1024

    virtualmachine_properties = {}
    if cpu_count is not None or memory_mb is not None:
        virtualmachine_properties['hardware_profile'] = {}
        if cpu_count is not None:
            virtualmachine_properties['hardware_profile']['processors'] = cpu_count
        if memory_mb is not None:
            virtualmachine_properties['hardware_profile']['memory_mb'] = memory_mb
    
    if vnic_names is not None:
        virtualmachine_properties['network_profile'] = { 'network_interfaces' : [] }
        for vnic_name in vnic_names:
            virtualmachine_properties['network_profile']['network_interfaces'].append({'id': vnic_name})
    
    if vhd_names is not None:
        virtualmachine_properties['storage_profile'] = {'data_disks':  [] }
        for vhd_name in vhd_names:
            virtualmachine_properties['storage_profile']['data_disks'].append({'id': vhd_name})

    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.update(resource_group_name=resource_group_name,
                         virtualmachines_name=name,
                         properties=virtualmachine_properties,
                         tags=tags)


def azurestackhci_virtualmachine_delete(client,
                                        resource_group_name,
                                        name,
                                        polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         virtualmachines_name=name)


def azurestackhci_virtualmachine_show(client,
                                          resource_group_name,
                                          name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualmachines_name=name)


def azurestackhci_virtualmachine_start(client,
                                       resource_group_name,
                                       name,
                                       polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.start(resource_group_name=resource_group_name,
                        virtualmachines_name=name)


def azurestackhci_virtualmachine_stop(client,
                                      resource_group_name,
                                      name,
                                      polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.stop(resource_group_name=resource_group_name,
                       virtualmachines_name=name)

def azurestackhci_virtualmachine_restart(client,
                                      resource_group_name,
                                      name,
                                      polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.restart(resource_group_name=resource_group_name,
                       virtualmachines_name=name)

def azurestackhci_virtualmachine_vnic_add(client,
                                      resource_group_name,
                                      name,
                                      vnic_names):
    return client.add_vnic(resource_group_name=resource_group_name,
                       virtualmachines_name=name, vnic_names=vnic_names)

def azurestackhci_virtualmachine_vnic_remove(client,
                                      resource_group_name,
                                      name,
                                      vnic_names):
    return client.remove_vnic(resource_group_name=resource_group_name,
                       virtualmachines_name=name, vnic_names=vnic_names)

def azurestackhci_virtualnetwork_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_virtualnetwork_create(client,
                                        resource_group_name,
                                        name,
                                        location,
                                        tags=None,
                                        extended_location=None,
                                        network_type=None,
                                        subnets=None,
                                        address_prefix=None,
                                        ip_allocation_method=None,
                                        ip_pools=None,
                                        ip_pool_type=None,
                                        ip_pool_start=None,
                                        ip_pool_end=None,
                                        vlan=0,
                                        routes=None,
                                        gateway=None,
                                        vm_switch_name=None,
                                        dns_servers=None,
                                        polling_interval=None):
    virtualnetworks = {}
    virtualnetworks['location'] = location
    virtualnetworks['tags'] = tags
    virtualnetworks['extended_location'] = extended_location
    virtualnetworks['properties'] = {}
    virtualnetworks['properties']['network_type'] = network_type
    virtualnetworks['properties']['subnets'] = subnets or list()
    virtualnetworks['properties']['vm_switch_name'] = vm_switch_name

    if dns_servers:
        virtualnetworks['properties']['dhcp_options'] = {}
        virtualnetworks['properties']['dhcp_options']['dns_servers'] = dns_servers

    if subnets is None and any([param for param in (address_prefix, ip_pool_start, ip_pool_end, ip_pool_type, ip_allocation_method, ip_pools, vlan, routes, gateway)]):

        # Subnets
        subnet = {}
        subnet['name'] = name
        subnet['properties'] = {}
        subnet['properties']['address_prefix'] = address_prefix
        subnet['properties']['ip_allocation_method'] = ip_allocation_method
        subnet['properties']['ip_pools'] = ip_pools or list()
        subnet['properties']['vlan'] = vlan

        # IPPools
        if any([param for param in (ip_pool_type, ip_pool_start, ip_pool_end)]):
            ippool = {}
            ippool['ip_pool_type'] = ip_pool_type
            ippool['start'] = ip_pool_start
            ippool['end'] = ip_pool_end

            subnet['properties']['ip_pools'].append(ippool)

        if routes:
            # Route table
            subnet['properties']['route_table'] = {}
            routeTable = {}
            routeTable['name'] = name + "-RT"
            routeTable['properties'] = {}
            routeTable['properties']['routes'] = routes or list()
            subnet['properties']['route_table'] = routeTable

        if gateway:
            # Add default route
            default_route = {}
            default_route['name'] = name + "-default-route"
            default_route['properties'] = {}
            default_route['properties']['address_prefix'] = "0.0.0.0/0"
            default_route['properties']['next_hop_ip_address'] = gateway

            if 'route_table' in subnet['properties']:
                subnet['properties']['route_table']['properties']['routes'].append(default_route)
            else:
                routeTable = {}
                routeTable['name'] = name + "-RT"
                routeTable['properties'] = {}
                routeTable['properties']['routes'] = list()
                routeTable['properties']['routes'].append(default_route)
                subnet['properties']['route_table'] = routeTable

        virtualnetworks['properties']['subnets'].append(subnet)
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         virtualnetworks_name=name,
                                         virtualnetworks=virtualnetworks)


def azurestackhci_virtualnetwork_update(client,
                                        resource_group_name,
                                        name,
                                        tags=None,
                                        polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.update(resource_group_name=resource_group_name,
                         virtualnetworks_name=name,
                         tags=tags)


def azurestackhci_virtualnetwork_delete(client,
                                        resource_group_name,
                                        name,
                                        polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         virtualnetworks_name=name)


def azurestackhci_virtualnetwork_show(client,
                                          resource_group_name,
                                          name):
    return client.retrieve(resource_group_name=resource_group_name,
                           virtualnetworks_name=name)


def azurestackhci_storagecontainer_list(client,
                                        resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_storagecontainer_create(client,
                                          resource_group_name,
                                          name,
                                          location,
                                          tags=None,
                                          extended_location=None,
                                          path=None,
                                          polling_interval=None):
    storagecontainers = {}
    storagecontainers['location'] = location
    storagecontainers['tags'] = tags
    storagecontainers['extended_location'] = extended_location
    storagecontainers['properties'] = {}
    storagecontainers['properties']['path'] = path

    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.create_or_update(resource_group_name=resource_group_name,
                                         storagecontainers_name=name,
                                         storagecontainers=storagecontainers)


def azurestackhci_storagecontainer_update(client,
                                          resource_group_name,
                                          name,
                                          tags=None):    
    return client.update(resource_group_name=resource_group_name,
                         storagecontainers_name=name,
                         tags=tags)


def azurestackhci_storagecontainer_delete(client,
                                          resource_group_name,
                                          name,
                                          polling_interval=None):
    if polling_interval:
        client.config.long_running_operation_timeout=polling_interval
    return client.delete(resource_group_name=resource_group_name,
                         storagecontainers_name=name)


def azurestackhci_storagecontainer_show(client,
                                            resource_group_name,
                                            name):
    return client.retrieve(resource_group_name=resource_group_name,
                           storagecontainers_name=name)


def azurestackhci_cluster_list(client,
                               resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def azurestackhci_cluster_show(client,
                               resource_group_name,
                               name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=name)


def azurestackhci_cluster_create(client,
                                 resource_group_name,
                                 name,
                                 location,
                                 tags=None,
                                 aad_client_id=None,
                                 aad_tenant_id=None):
    cluster = {}
    cluster['tags'] = tags
    cluster['location'] = location
    cluster['aad_client_id'] = aad_client_id
    cluster['aad_tenant_id'] = aad_tenant_id
    return client.create(resource_group_name=resource_group_name,
                         cluster_name=name,
                         cluster=cluster)


def azurestackhci_cluster_update(client,
                                 resource_group_name,
                                 name,
                                 tags=None):
    cluster = {}
    cluster['tags'] = tags
    return client.update(resource_group_name=resource_group_name,
                         cluster_name=name,
                         cluster=cluster)


def azurestackhci_cluster_delete(client,
                                 resource_group_name,
                                 name):
    return client.delete(resource_group_name=resource_group_name,
                         cluster_name=name)

def azurestackhci_vmextension_create(client,
                                      resource_group_name,
                                      virtualmachine_name,
                                      name,
                                      location,
                                      tags=None,                                      
                                      force_update_tag=None,
                                      publisher=None,
                                      extension_type=None,
                                      type_handler_version=None,
                                      enable_auto_upgrade=None,
                                      auto_upgrade_minor=None,
                                      settings=None,
                                      protected_settings=None,
                                      instance_view_type=None,
                                      inst_handler_version=None,
                                      status=None,
                                      no_wait=False):
    extensionParameters = {}
    extensionParameters['tags'] = tags
    extensionParameters['location'] = location    
    extensionParameters['properties'] = {}
    extensionParameters['properties']['location'] = location
    if force_update_tag is not None:
        extensionParameters['properties']['force_update_tag'] = force_update_tag
    if publisher is not None:
        extensionParameters['properties']['publisher'] = publisher
    if extension_type is not None:
        extensionParameters['properties']['extension_type'] = extension_type
    if type_handler_version is not None:
        extensionParameters['properties']['type_handler_version'] = type_handler_version
    if enable_auto_upgrade is not None:
        extensionParameters['properties']['enable_automatic_upgrade'] = enable_auto_upgrade
    if auto_upgrade_minor is not None:
        extensionParameters['properties']['auto_upgrade_minor_version'] = auto_upgrade_minor
    if settings is not None:
        extensionParameters['properties']['settings'] = settings
    if protected_settings is not None:
        extensionParameters['properties']['protected_settings'] = protected_settings
    extensionParameters['properties']['instance_view'] = {}
    extensionParameters['properties']['instance_view']['name'] = name
    if instance_view_type is not None:
        extensionParameters['properties']['instance_view']['type'] = instance_view_type
    if inst_handler_version is not None:
        extensionParameters['properties']['instance_view']['type_handler_version'] = inst_handler_version
    if status is not None:
        extensionParameters['properties']['instance_view']['status'] = status
    if len(extensionParameters['properties']['instance_view']) == 0:
        del extensionParameters['properties']['instance_view']
    return sdk_no_wait(no_wait,
                       client.create,
                       resource_group_name=resource_group_name,
                       virtualmachine_name=virtualmachine_name,
                       name=name,
                       extensionParameters=extensionParameters)    

def azurestackhci_vmextension_update(client,
                                      resource_group_name,
                                      virtualmachine_name,
                                      name,
                                      tags=None,
                                      force_update_tag=None,
                                      publisher=None,
                                      extension_type=None,
                                      type_handler_version=None,
                                      enable_auto_upgrade=None,
                                      auto_upgrade_minor=None,
                                      settings=None,
                                      protected_settings=None,
                                      no_wait=False):
    extension_parameters = {}
    if tags is not None:
        extension_parameters['tags'] = tags
    extension_parameters['properties'] = {}
    if force_update_tag is not None:
        extension_parameters['properties']['force_update_tag'] = force_update_tag
    if publisher is not None:
        extension_parameters['properties']['publisher'] = publisher
    if extension_type is not None:
        extension_parameters['properties']['extension_type'] = extension_type
    if type_handler_version is not None:
        extension_parameters['properties']['type_handler_version'] = type_handler_version
    if enable_auto_upgrade is not None:
        extension_parameters['properties']['enable_automatic_upgrade'] = enable_auto_upgrade
    if auto_upgrade_minor is not None:
        extension_parameters['properties']['auto_upgrade_minor_version'] = auto_upgrade_minor
    if settings is not None:
        extension_parameters['properties']['settings'] = settings
    if protected_settings is not None:
        extension_parameters['properties']['protected_settings'] = protected_settings
    if len(extension_parameters['properties']) == 0:
        del extension_parameters['properties']
    return sdk_no_wait(no_wait,
                       client.update,
                       resource_group_name=resource_group_name,
                       virtualmachine_name=virtualmachine_name,
                       name=name,
                       extension_parameters=extension_parameters)

def azurestackhci_vmextension_show(client,
                                    resource_group_name,
                                    virtualmachine_name,
                                    name):
    return client.get(resource_group_name=resource_group_name,
                      virtualmachine_name=virtualmachine_name,
                      name=name)

def azurestackhci_vmextension_list(client,
                                    resource_group_name,
                                    virtualmachine_name):
    return client.list_by_virtualmachine_name(resource_group_name=resource_group_name,
                                       virtualmachine_name=virtualmachine_name)

def azurestackhci_vmextension_delete(client,
                                      resource_group_name,
                                      virtualmachine_name,
                                      name,
                                      no_wait=False):
    return sdk_no_wait(no_wait,
                       client.delete,
                       resource_group_name=resource_group_name,
                       virtualmachine_name=virtualmachine_name,
                       name=name)
