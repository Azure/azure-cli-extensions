# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import uuid
from msrest.pipeline import ClientRawResponse
from msrest.polling import LROPoller, NoPolling
from msrestazure.polling.arm_polling import ARMPolling
from . import VirtualmachinesOperations as vmops
from .. import models

class ArcVmExtensionsOperations(object):
    """ArcVmExtensionsOperations operations.

    You should not instantiate directly this class, but create a Client instance that will create it for you and attach it as attribute.

    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    :ivar api_version: The API version to use for this operation. Constant value: "2020-11-01-preview".
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self.api_version = "2022-12-15-preview"
        self.config = config
        self.vmconfig = vmops(client, config, serializer, deserializer)

    def _create_initial(
            self, resource_group_name, virtualmachine_name, name, extensionParameters, custom_headers=None, raw=False, **operation_config):
        # Construct URL
        url = self.create.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
            'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
            'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str', min_length=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')        

        # Construct body
        body_content = self._serialize.body(extensionParameters, 'ArcVmExtensions')

        # Construct and send request
        request = self._client.put(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 201]:
            raise models.ErrorResponseException(self._deserialize, response)
        
        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ArcVmExtensions', response)
        if response.status_code == 201:
            deserialized = self._deserialize('ArcVmExtensions', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        
        return deserialized

    def create(
            self, resource_group_name, virtualmachine_name, name, extensionParameters, custom_headers=None, raw=False, polling=True, **operation_config):
        """The operation to create the vm extension.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param virtualmachine_name: The name of the virtual machine containing the vm extension.
        :type virtualmachine_name: str
        :param name: The name of the virtual machine extension.
        :type name: str
        :param extensionParameters:
        :type extensionParameters: ~azure.mgmt.azurestackhci.models.ArcVmExtensions
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref: `Operation configuration overrides<msrest:optionsforoperations>`.
        :param polling: True for ARMPolling, False for no polling, or a
        polling object for personal polling strategy
        :return: An instance of LROPoller that returns ArcVmExtensions or
        ClientRawResponse<ArcVmExtensions> if raw==True
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.azurestackhci.models.ArcVmExtensions]
        or
        ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[~azure.mgmt.azurestackhci.models.ArcVmExtensions]]
        :raises: :class:`ErrorResponseException<azure.mgmt.azurestackhci.models.ErrorResponseException>`
        """

        try:
            self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
            self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
        except Exception as exception:
            print("{} : {}".format(type(exception).__name__,exception))
            return

        raw_result = self._create_initial(
            resource_group_name=resource_group_name,
            virtualmachine_name=virtualmachine_name,
            name=name,
            extensionParameters=extensionParameters,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('ArcVmExtensions', response)
            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response
            return deserialized
        
        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    create.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    def _update_initial(
            self, resource_group_name, virtualmachine_name, name, extension_parameters, custom_headers=None, raw=False, **operation_config):
        # Construct URL
        url = self.update.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
            'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
            'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct paramaters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str', min_length=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        
        # Construct body
        body_content = self._serialize.body(extension_parameters, 'ArcVmExtensionsUpdate')

        # Construct and send request
        request = self._client.patch(url, query_parameters, header_parameters, body_content)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200,202]:
            raise models.ErrorResponseException(self._deserialize, response)
        
        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('ArcVmExtensions', response)
        if response.status_code == 202:
            deserialized = self._deserialize('ArcVmExtensions', response)
        
        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        return deserialized

    def update(
            self, resource_group_name, virtualmachine_name, name, extension_parameters, custom_headers=None, raw=False, polling=True, **operation_config):
        """The operation to update the extension.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param virtualmachine_name: The name of the virtual machine containing the extension.
        :type virtualmachine_name: str
        :param name: The name of the virtual machine extension.
        :type name: str
        :param extension_parameters: Parameters supplied to the Create ArcVmExtension operation.
        :type extension_parameters: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsUpdate
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref: `Operation configuration overrides<msrest:optionsforoperations>`.
        :param polling: True for ARMPolling, False for no polling, or a
        polling object for personal polling strategy
        :return: An instance of LROPoller that returns ArcVmExtensions or
        ClientRawResponse<ArcVmExtensions> if raw==True
        :rtype: ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.azurestackhci.models.ArcVmExtensions]
        or
        ~msrestazure.azure_operation.AzureOperationPoller[~msrest.pipeline.ClientRawResponse[~azure.mgmt.azurestackhci.models.ArcVmExtensions]]
        :raises: :class:`ErrorResponseException<azure.mgmt.azurestackhci.models.ErrorResponseException>`
        """

        try:
            self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
            self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
        except Exception as exception:
            print("{} : {}".format(type(exception).__name__,exception))
            return

        raw_result = self._update_initial(
            resource_group_name=resource_group_name,
            virtualmachine_name=virtualmachine_name,
            name=name,
            extension_parameters=extension_parameters,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )

        def get_long_running_output(response):
            deserialized = self._deserialize('ArcVmExtensions', response)
            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response
            return deserialized
        
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
            'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
            'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
        }

        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        if polling is True: polling_method = ARMPolling(lro_delay, path_format_arguments=path_format_arguments, **operation_config)
        elif polling is False: polling_method = NoPolling()
        else: polling_method = polling
        return LROPoller(self._client, raw_result, get_long_running_output, polling_method)
    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    def get(
            self, resource_group_name, virtualmachine_name, name, custom_headers=None, raw=False, **operation_config):
        """The operation to get the extension.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param virtualmachine_name: The name of the virtual machine containing the extension.
        :type virtualmachine_name: str
        :param name: The name of the virtual machine extension.
        :type name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref: `Operation configuration overrides<msrest:optionsforoperations>`.
        :return: ArcVmExtensions or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.azurestackhci.models.ArcVmExtensions or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorResponseException<azure.mgmt.azurestackhci.models.ErrorResponseException>`
        """

        try:
            self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
            self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
        except Exception as exception:
            print("{} : {}".format(type(exception).__name__,exception))
            return

        # Construct URL
        url = self.get.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
            'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
            'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str', min_length=1)

        # Construct headers
        header_parameters = {}
        header_parameters['Accept'] = 'application/json'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
        
        # Construct and send request
        request = self._client.get(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ErrorResponseException(self._deserialize, response)

        deserialized = None
        if response.status_code == 200:
            deserialized = self._deserialize("ArcVmExtensions", response)
        
        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response
        
        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    def delete(
            self, resource_group_name, virtualmachine_name, name, custom_headers=None, raw=False, **operation_config):
        """The operation to delete the extension.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param virtualmachine_name: The name of the virtual machine containing the extension.
        :type virtualmachine_name: str
        :param name: The name of the virtual machine extension.
        :type name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref: `Operation configuration overrides<msrest:optionsforoperations>`.
        :return: None or ClientRawResponse if raw=true
        :rtype: None or ~msrest.pipeline.ClientRawResponse
        :raises: :class:`ErrorResponseException<azure.mgmt.azurestackhci.models.ErrorResponseException>`
        """

        try:
            self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
            self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
        except Exception as exception:
            print("{} : {}".format(type(exception).__name__,exception))
            return

        # Construct URL
        url = self.delete.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
            'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
            'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str', min_length=1)

        # Construct headers
        header_parameters = {}
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct and send request
        request = self._client.delete(url, query_parameters, header_parameters)
        response = self._client.send(request, stream=False, **operation_config)

        if response.status_code not in [200, 202, 204]:
            raise models.ErrorResponseException(self._deserialize, response)

        def get_long_running_output(response):
            if raw:
                client_raw_response = ClientRawResponse(None, response)
                return client_raw_response
        
        lro_delay = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        polling_method = ARMPolling(lro_delay, **operation_config)
        return LROPoller(self._client, response, get_long_running_output, polling_method)
    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    def list_by_virtualmachine_name(
            self, resource_group_name, virtualmachine_name, custom_headers=None, raw=False, **operation_config):
        """The operation to list all the extensions by machine name.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param virtualmachine_name: The name of the virtual machine containing the arcvmextension.
        :type virtualmachine_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the deserialized response
        :param operation_config: :ref: `Operation configuration overrides<msrest:optionsforoperations>`.
        :return: An iterator like instance of ArcVmExtensions
        :rtype: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsPaged[~azure.mgmt.azurestackhci.models.ArcVmExtensions]
        :raises: :class:`ErrorResponseException<azure.mgmt.azurestackhci.models.ErrorResponseException>`
        """

        try:
            self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
            self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
        except Exception as exception:
            print("{} : {}".format(type(exception).__name__,exception))
            return

        def prepare_request(next_link=None):
            if not next_link:
                # Construct URL
                url = self.list_by_virtualmachine_name.metadata['url']
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
                    'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3)
                }
                url = self._client.format_url(url, **path_format_arguments)

                # Construct parameters
                query_parameters = {}
                query_parameters['api-version'] = self._serialize.query("self.api_version", self.api_version, 'str', min_length=1)
            else:
                url = next_link
                query_parameters = {}

            # Construct headers
            header_parameters = {}
            header_parameters['Accept'] = 'application/json'
            if self.config.generate_client_request_id:
                header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
            if custom_headers:
                header_parameters.update(custom_headers)
            if self.config.accept_language is not None:
                header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')
            
            # Construct and send request
            request = self._client.get(url, query_parameters, header_parameters)
            return request
        
        def internal_paging(next_link=None):
            request = prepare_request(next_link)
            response = self._client.send(request, stream=False, **operation_config)
            if response.status_code not in [200]:
                raise models.ErrorResponseException(self._deserialize, response)
            return response

        # Deserialize response
        header_dict = None
        if raw:
            header_dict = {}
        deserialized = models.ArcVmExtensionsPaged(internal_paging, self._deserialize.dependencies, header_dict)
        return deserialized
    list_by_virtualmachine_name.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions'}

    def _checkIfProvisionVmAgentEnabled(
            self, resource_group_name, virtualmachine_name):
        vmObject = self.vmconfig.retrieve(resource_group_name=resource_group_name, virtualmachines_name=virtualmachine_name)
        if vmObject.properties.os_profile.windows_configuration and vmObject.properties.os_profile.windows_configuration.provision_vm_agent == True:
            return
        else:
            if vmObject.properties.os_profile.linux_configuration and vmObject.properties.os_profile.linux_configuration.provision_vm_agent == True:
                return
        raise Exception("Guest Management is not enabled for this virtual machine.")

    def _checkIfGuestVmAgentConnected(
            self, resource_group_name, virtualmachine_name):
        vmObject = self.vmconfig.retrieve(resource_group_name=resource_group_name, virtualmachines_name=virtualmachine_name)
        if vmObject.properties.guest_agent_profile:
            if vmObject.properties.guest_agent_profile.status == models.Status.connected:
                return
            elif vmObject.properties.guest_agent_profile.status == models.Status.disconnected:
                raise Exception("Guest Agent is currently disconnected.")
            else:
                error_detail = vmObject.properties.guest_agent_profile.error_details[-1]
                error_code_and_message = error_detail.code + error_detail.message
                raise Exception(error_code_and_message)
        else:
            raise Exception("Guest Agent is currently disconnected.")
