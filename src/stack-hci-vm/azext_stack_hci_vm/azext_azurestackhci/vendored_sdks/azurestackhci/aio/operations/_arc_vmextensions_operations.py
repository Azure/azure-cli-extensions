# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar, Union
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.core.polling import AsyncLROPoller, AsyncNoPolling, AsyncPollingMethod
from azure.mgmt.core.exceptions import ARMErrorFormat
from azure.mgmt.core.polling.async_arm_polling import AsyncARMPolling

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ArcVmExtensionsOperations:
    """ArcVmExtensionsOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.hybridcompute.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def _create_initial(
            self, resource_group_name: str, virtualmachine_name: str, name: str, extension_parameters: models.ArcVmExtensions, **kwargs) -> "models.ArcVmExtensions":
            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensions"]
            error_map = {
                401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
            }
            error_map.update(kwargs.pop('error_map',{}))
            api_version = "2020-11-01-preview"
            content_type = kwargs.pop("content_type", "application/json")
            accept = "application/json"

            # Construct URL
            url = self._create_or_update_initial.metadata['url'] # type: ignore
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str'),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }
            url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {} # type: Dict[str, Any]
            header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            body_content_kwargs = {} # type: Dict[str, Any]
            body_content = self._serialize.body(extension_parameters, 'ArcVmExtensionsUpdate')
            body_content_kwargs['content'] = body_content
            request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200, 201]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize(models.ErrorResponse, response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            if response.status_code == 200:
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)

            if response.status_code == 201:
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)
            
            if cls:
                return cls(pipeline_response, deserialized, {})
            
            return deserialized
    _create_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    async def create(
            self, resource_group_name: str, virtualmachine_name: str, name: str, extension_parameters: "models.ArcVmExtensionsUpdate", **kwargs) -> AsyncLROPoller["models.ArcVmExtensions"]:
            """create.

            :param resource_group_name: The name of the resource group.
            :type resource_group_name: str
            :param virtualmachine_name: The name of the virtual machine containing the extension.
            :type virtualmachine_name: str
            :param name: The name of the virtual machine extension.
            :type name: str
            :param extension_parameters: Parameters supplied to the Create ArcVmExtension operation.
            :type extension_parameters: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsUpdate
            :keyword callable cls: A custom type or function that will be passed the direct response
            :keyword str continuation_token: A continuation token to restart a poller from a saved state.
            :keyword polling: True for ARMPolling, False for no polling, or a
            polling object for personal polling strategy
            :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
            :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
            :return: An instance of AsyncLROPoller that returns either ArcVmExtensions or the result of cls(response)
            :rtype: ~azure.core.polling.AsyncLROPoller[~azure_stack_hci.models.ArcVmExtensions]
            :raises ~azure.core.exceptions.HttpResponseError:
            """

            try:
                self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
                self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
            except Exception as exception:
                print("{} : {}".format(type(exception).__name__,exception))
                return

            polling = kwargs.pop('polling', True) # type: Union[bool, AsyncPollingMethod]
            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensions"]
            lro_delay = kwargs.pop('polling_interval', self._config.polling_interval)
            cont_token = kwargs.pop('continuation_token', None) # type: Optional[str]
            if cont_token is None:
                raw_result = await self._create_initial(
                    resource_group_name=resource_group_name,
                    virtualmachine_name=virtualmachine_name,
                    name=name,
                    extension_parameters=extension_parameters,
                    cls=lambda x,y,z: x,
                    **kwargs
                )
            
            kwargs.pop('error_map', None)
            kwargs.pop('content_type', None)

            def get_long_running_output(pipeline_response):
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)

                if cls:
                    return cls(pipeline_response, deserialized, {})
                return deserialized
            
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }

            if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments, **kwargs)
            elif polling is False: polling_method = AsyncNoPolling()
            else: polling_method = polling
            if cont_token:
                return AsyncLROPoller.from_continuation_token(
                    polling_method=polling_method,
                    continuation_token=cont_token,
                    client=self._client,
                    deserialization_callback=get_long_running_output
                )
            else:
                return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    create.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    async def _update_initial(
            self, resource_group_name: str, virtualmachine_name: str, name: str, extension_parameters: "models.ArcVmExtensionsUpdate", **kwargs) -> Optional["models.ArcVmExtensions"]:
            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensions"]
            error_map = {
                401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
            }
            error_map.update(kwargs.pop('error_map',{}))
            api_version = "2020-11-01-preview"
            content_type = kwargs.pop("content_type", "application/json")
            accept = "application/json"

            # Construct URL
            url = self._update_initial.metadata['url'] # type: ignore
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str'),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }
            url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {} # type: Dict[str, Any]
            header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            body_content_kwargs = {} # type: Dict[str, Any]
            body_content = self._serialize.body(extension_parameters, 'ArcVmExtensions')
            body_content_kwargs['content'] = body_content
            request = self._client.patch(url, query_parameters, header_parameters, **body_content_kwargs)
            pipeline_response = await self._client.pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200, 201]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize(models.ErrorResponse, response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)
            
            if response.status_code == 200:
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)
            
            if response.status_code == 201:
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)
            
            if cls:
                return cls(pipeline_response, deserialized, {})
            
            return deserialized
    _update_initial.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    async def update(
            self, resource_group_name: str, virtualmachine_name: str, name: str, extension_parameters: "models.ArcVmExtensionsUpdate", **kwargs) -> AsyncLROPoller["models.ArcVmExtensions"]:
            """The operation to update the vm extension.

            :param resource_group_name: The name of the resource group.
            :type resource_group_name: str
            :param virtualmachine_name: The name of the virtual machine containing the extension.
            :type virtualmachine_name: str
            :param name: The name of the virtual machine extension.
            :type name: str
            :type extension_parameters: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsUpdate
            :keyword callable cls: A custom type or function that will be passed the direct response
            :keyword str continuation_token: A continuation token to restart a poller from a saved state.
            :keyword polling: True for ARMPolling, False for no polling, or a
            polling object for personal polling strategy
            :paramtype polling: bool or ~azure.core.polling.AsyncPollingMethod
            :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
            :return: An instance of AsyncLROPoller that returns either ArcVmExtensions or the result of cls(response)
            :rtype: ~azure.core.polling.AsyncLROPoller[~azure_stack_hci.models.ArcVmExtensions]
            :raises ~azure.core.exceptions.HttpResponseError:
            """

            try:
                self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
                self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
            except Exception as exception:
                print("{} : {}".format(type(exception).__name__,exception))
                return

            polling = kwargs.pop('polling', True) # type: Union[bool, AsyncPollingMethod]
            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensions"]
            lro_delay = kwargs.pop(
                'polling_interval',
                self._config.polling_interval
            )
            cont_token = kwargs.pop('continuation_token', None) # type: Optional[str]
            if cont_token is None:
                raw_result = await self._update_initial(
                    resource_group_name=resource_group_name,
                    virtualmachine_name=virtualmachine_name,
                    name=name,
                    extension_parameters=extension_parameters,
                    cls=lambda x,y,z: x,
                    **kwargs
                )
            
            kwargs.pop('error_map', None)
            kwargs.pop('content_type', None)

            def get_long_running_output(pipeline_response):
                deserialized = self._deserialize('ArcVmExtensions', pipeline_response)

                if cls:
                    return cls(pipeline_response, deserialized, {})
                return deserialized
            
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }

            if polling is True: polling_method = AsyncARMPolling(lro_delay, lro_options={'final-state-via': 'azure-async-operation'}, path_format_arguments=path_format_arguments, **kwargs)
            elif polling is False: polling_method = AsyncNoPolling()
            else: polling_method = polling
            if cont_token:
                return AsyncLROPoller.from_continuation_token(
                    polling_method=polling_method,
                    continuation_token=cont_token,
                    client=self._client,
                    deserialization_callback=get_long_running_output
                )
            else:
                return AsyncLROPoller(self._client, raw_result, get_long_running_output, polling_method)
    update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    async def get(
            self, resource_group_name: str, virtualmachine_name: str, name: str, **kwargs) -> "models.ArcVmExtensions":
            """The operation to get the vm extension.

            :param resource_group_name: The name of the resource group.
            :type resource_group_name: str
            :param virtualmachine_name: The name of the virtual machine containing the extension.
            :type virtualmachine_name: str
            :param name: The name of the virtual machine extension.
            :type name: str
            :keyword callable cls: A custom type or function that will be passed the direct response
            :return: ArcVmExtensions, or the result of cls(response)
            :rtype: ~azure_stack_hci.models.ArcVmExtensions
            :raises: ~azure.core.exceptions.HttpResponseError
            """

            try:
                self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
                self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
            except Exception as exception:
                print("{} : {}".format(type(exception).__name__,exception))
                return

            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensions"]
            error_map = {
                401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
            }
            error_map.update(kwargs.pop('error_map', {}))
            api_version = "2020-11-01-preview"
            accept = "application/json"

            # Construct URL
            url = self.get.metadata['url'] # type: ignore
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }
            url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {} # type: Dict[str, Any]
            query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

            # Construct headers
            header_parameters = {} # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            request = self._client.get(url, query_parameters, header_parameters)
            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize(models.ErrorResponse, response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            deserialized = self._deserialize('ArcVmExtensions', pipeline_response)

            if cls:
                return cls(pipeline_response, deserialized, {})
            
            return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    async def delete(
            self, resource_group_name: str, virtualmachine_name: str, name: str, **kwargs) -> None:
            """delete

            :param resource_group_name: The name of the resource group. The name is case insensitive.
            :type resource_group_name: str
            :param virtualmachine_name: The name of the virtual machine where the extension should be deleted.
            :type virtualmachine_name: str
            :param name: The name of the virtual machine extension.
            :type name: str
            :keyword callable cls: A custom type or function that will be passed the direct response
            :return: None, or the result of cls(response)
            :rtype: None
            :raises: ~azure.core.exceptions.HttpResponseError
            """

            try:
                self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
                self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
            except Exception as exception:
                print("{} : {}".format(type(exception).__name__,exception))
                return

            cls = kwargs.pop('cls', None) # type: ClsType[None]
            error_map = {
                401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
            }
            error_map.update(kwargs.pop('error_map', {}))
            api_version = "2020-11-01-preview"
            accept = "application/json"

            # Construct URL
            url = self.delete.metadata['url'] # type: ignore
            path_format_arguments = {
                'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str', min_length=1),
                'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1, pattern=r'^[-\w\._\(\)]+$'),
                'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str', max_length=64, min_length=3),
                'extensionName': self._serialize.url("name", name, 'str', max_length=64, min_length=3)
            }
            url = self._client.format_url(url, **path_format_arguments)

            # Construct parameters
            query_parameters = {}
            query_parameters['api-version'] = self._serialize.query("self.api_version", api_version, 'str')

            # Construct headers
            header_parameters = {} # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            request = self._client.delete(url, query_parameters, header_parameters)
            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200, 204]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize(models.ErrorResponse, response)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)
            
            if cls:
                return cls(pipeline_response, None, {})
            
    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions/{extensionName}'}

    def list_by_virtualmachine_name(
            self, resource_group_name: str, virtualmachine_name: str, **kwargs) -> AsyncIterable["models.ArcVmExtensionListResult"]:
            """list_by_machine_name

            :param resource_group_name: The name of the resource group.
            :type resource_group_name: str
            :param virtualmachine_name: The name of the virtual machine containing the extension.
            :type virtualmachine_name: str
            :keyword callable cls: A custom type or function that will be passed the direct response
            :return: An iterator like instance of either ArcVmExtensionsListResult or the result of cls(response)
            :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure_stack_hci.models.ArcVmExtensionsListResult]
            :raises: ~azure.core.exceptions.HttpResponseError
            """

            try:
                self._checkIfProvisionVmAgentEnabled(resource_group_name, virtualmachine_name)
                self._checkIfGuestVmAgentConnected(resource_group_name, virtualmachine_name)
            except Exception as exception:
                print("{} : {}".format(type(exception).__name__,exception))
                return

            cls = kwargs.pop('cls', None) # type: ClsType["models.ArcVmExtensionsListResult"]
            error_map = {
                401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
            }
            error_map.update(kwargs.pop('error_map', {}))
            api_version = "2020-11-01-preview"
            accept = "application/json"

            def prepare_request(next_link=None):
                # Construct headers
                header_parameters = {} # type: Dict[str, Any]
                header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

                if not next_link:
                    # Construct URL
                    url = self.list_by_virtualmachine_name.metadata['url'] # type: ignore
                    path_format_arguments = {
                        'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                        'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
                        'name': self._serialize.url("virtualmachine_name", virtualmachine_name, 'str'),
                    }
                    url = self._client.format_url(url, **path_format_arguments)
                    # Construct parameters
                    query_parameters = {} # type: Dict[str, Any]
                    query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                    request = self._client.get(url, query_parameters, header_parameters)
                else:
                    url = next_link
                    query_parameters = {} # type: Dict[str, Any]
                    request = self._client.get(url, query_parameters, header_parameters)
                return request
            
            async def extract_data(pipeline_response):
                deserialized = self._deserialize('ArcVmExtensionsListResult', pipeline_response)
                list_of_elem = deserialized.value
                if cls:
                    list_of_elem = cls(list_of_elem)
                return deserialized.next_link or None, AsyncList(list_of_elem)
            
            async def get_next(next_link=None):
                request = prepare_request(next_link)

                pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
                response = pipeline_response.http_response

                if response.status_code not in [200]:
                    error = self._deserialize(models.ErrorResponse, response)
                    map_error(status_code=response.status_code, response=response, error_map=error_map)
                    raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)
                
                return pipeline_response
            
            return AsyncItemPaged(
                get_next, extract_data
            )
    list_by_virtualmachine_name.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{name}/extensions'}

    def _checkIfProvisionVmAgentEnabled(
            self, resource_group_name, virtualmachine_name):
        vmObject = self.vmconfig.retrieve(resource_group_name=resource_group_name, virtualmachines_name=virtualmachine_name)
        if vmObject.properties.os_profile.windows_configuration and vmObject.properties.os_profile.windows_configuration.provision_vm_agent == True:
            return
        else:
            if vmObject.properties.os_profile.linux_configuration and vmObject.properties.os_profile.linux_configuration.provision_vm_agent == True:
                return
        raise Exception("Guest Management is not enabled for this virtual machine.")

    def _checkIfGuestVmAgentConnected(
            self, resource_group_name, virtualmachine_name):
        vmObject = self.vmconfig.retrieve(resource_group_name=resource_group_name, virtualmachines_name=virtualmachine_name)
        if vmObject.properties.guest_agent_profile:
            if vmObject.properties.guest_agent_profile.status == models.Status.connected:                
                return
            elif vmObject.properties.guest_agent_profile.status == models.Status.disconnected:
                raise Exception("Guest Agent is currently disconnected.")
            else:
                error_detail = vmObject.properties.guest_agent_profile.error_details[-1]
                error_code_and_message = error_detail.code + error_detail.message
                raise Exception(error_code_and_message)
        else:
            raise Exception("Guest Agent is currently disconnected.")