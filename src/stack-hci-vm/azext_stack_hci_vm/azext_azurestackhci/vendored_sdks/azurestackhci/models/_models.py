# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from ast import Mod
from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AvailableOperations(Model):
    """Available operations of the service.

    :param value: Collection of available operation details
    :type value: list[~azure.mgmt.azurestackhci.models.OperationDetail]
    :param next_link: URL client should use to fetch the next page (per server
     side paging).
     It's null for now, added for future use.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationDetail]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AvailableOperations, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class Resource(Model):
    """Common fields that are returned in the response for all Azure Resource
    Manager resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class AzureEntityResource(Resource):
    """The resource model definition for an Azure Resource Manager resource with
    an etag.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :ivar etag: Resource Etag.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(AzureEntityResource, self).__init__(**kwargs)
        self.etag = None


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top
    level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs.get('location', None)


class Cluster(TrackedResource):
    """Cluster details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :ivar provisioning_state: Provisioning state. Possible values include:
     'Succeeded', 'Failed', 'Canceled', 'Accepted', 'Provisioning'
    :vartype provisioning_state: str or
     ~azure.mgmt.azurestackhci.models.ProvisioningState
    :ivar status: Status of the cluster agent. Possible values include:
     'Connected', 'Disconnected', 'Error'
    :vartype status: str or ~azure.mgmt.azurestackhci.models.Status
    :ivar cloud_id: Unique, immutable resource id.
    :vartype cloud_id: str
    :param aad_client_id: Required. App id of cluster AAD identity.
    :type aad_client_id: str
    :param aad_tenant_id: Required. Tenant id of cluster AAD identity.
    :type aad_tenant_id: str
    :param reported_properties: Properties reported by cluster agent.
    :type reported_properties:
     ~azure.mgmt.azurestackhci.models.ClusterReportedProperties
    :ivar trial_days_remaining: Number of days remaining in the trial period.
    :vartype trial_days_remaining: float
    :ivar billing_model: Type of billing applied to the resource.
    :vartype billing_model: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'cloud_id': {'readonly': True},
        'aad_client_id': {'required': True},
        'aad_tenant_id': {'required': True},
        'trial_days_remaining': {'readonly': True},
        'billing_model': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'cloud_id': {'key': 'properties.cloudId', 'type': 'str'},
        'aad_client_id': {'key': 'properties.aadClientId', 'type': 'str'},
        'aad_tenant_id': {'key': 'properties.aadTenantId', 'type': 'str'},
        'reported_properties': {'key': 'properties.reportedProperties', 'type': 'ClusterReportedProperties'},
        'trial_days_remaining': {'key': 'properties.trialDaysRemaining', 'type': 'float'},
        'billing_model': {'key': 'properties.billingModel', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(Cluster, self).__init__(**kwargs)
        self.system_data = kwargs.get('system_data', None)
        self.provisioning_state = None
        self.status = None
        self.cloud_id = None
        self.aad_client_id = kwargs.get('aad_client_id', None)
        self.aad_tenant_id = kwargs.get('aad_tenant_id', None)
        self.reported_properties = kwargs.get('reported_properties', None)
        self.trial_days_remaining = None
        self.billing_model = None


class ClusterNode(Model):
    """Cluster node details.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the cluster node.
    :vartype name: str
    :ivar id: Id of the node in the cluster.
    :vartype id: float
    :ivar manufacturer: Manufacturer of the cluster node hardware.
    :vartype manufacturer: str
    :ivar model: Model name of the cluster node hardware.
    :vartype model: str
    :ivar os_name: Operating system running on the cluster node.
    :vartype os_name: str
    :ivar os_version: Version of the operating system running on the cluster
     node.
    :vartype os_version: str
    :ivar serial_number: Immutable id of the cluster node.
    :vartype serial_number: str
    :ivar core_count: Number of physical cores on the cluster node.
    :vartype core_count: float
    :ivar memory_in_gi_b: Total available memory on the cluster node (in GiB).
    :vartype memory_in_gi_b: float
    """

    _validation = {
        'name': {'readonly': True},
        'id': {'readonly': True},
        'manufacturer': {'readonly': True},
        'model': {'readonly': True},
        'os_name': {'readonly': True},
        'os_version': {'readonly': True},
        'serial_number': {'readonly': True},
        'core_count': {'readonly': True},
        'memory_in_gi_b': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'float'},
        'manufacturer': {'key': 'manufacturer', 'type': 'str'},
        'model': {'key': 'model', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'core_count': {'key': 'coreCount', 'type': 'float'},
        'memory_in_gi_b': {'key': 'memoryInGiB', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(ClusterNode, self).__init__(**kwargs)
        self.name = None
        self.id = None
        self.manufacturer = None
        self.model = None
        self.os_name = None
        self.os_version = None
        self.serial_number = None
        self.core_count = None
        self.memory_in_gi_b = None


class ClusterReportedProperties(Model):
    """Properties reported by cluster agent.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar cluster_name: Name of the on-prem cluster connected to this
     resource.
    :vartype cluster_name: str
    :ivar cluster_id: Unique id generated by the on-prem cluster.
    :vartype cluster_id: str
    :ivar cluster_version: Version of the cluster software.
    :vartype cluster_version: str
    :ivar nodes: List of nodes reported by the cluster.
    :vartype nodes: list[~azure.mgmt.azurestackhci.models.ClusterNode]
    :ivar last_updated: Last time the cluster reported the data.
    :vartype last_updated: datetime
    """

    _validation = {
        'cluster_name': {'readonly': True},
        'cluster_id': {'readonly': True},
        'cluster_version': {'readonly': True},
        'nodes': {'readonly': True},
        'last_updated': {'readonly': True},
    }

    _attribute_map = {
        'cluster_name': {'key': 'clusterName', 'type': 'str'},
        'cluster_id': {'key': 'clusterId', 'type': 'str'},
        'cluster_version': {'key': 'clusterVersion', 'type': 'str'},
        'nodes': {'key': 'nodes', 'type': '[ClusterNode]'},
        'last_updated': {'key': 'lastUpdated', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(ClusterReportedProperties, self).__init__(**kwargs)
        self.cluster_name = None
        self.cluster_id = None
        self.cluster_version = None
        self.nodes = None
        self.last_updated = None


class ClusterUpdate(Model):
    """Cluster details to update.

    :param tags: Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(ClusterUpdate, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class ErrorAdditionalInfo(Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.azurestackhci.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.azurestackhci.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(self, **kwargs):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(Model):
    """Error response.

    Common error response for all Azure Resource Manager APIs to return error
    details for failed operations. (This also follows the OData error response
    format.).

    :param error: The error object.
    :type error: ~azure.mgmt.azurestackhci.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(self, **kwargs):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class ErrorResponseException(HttpOperationError):
    """Server responsed with exception of type: 'ErrorResponse'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(ErrorResponseException, self).__init__(deserialize, response, 'ErrorResponse', *args)


class Galleryimages(Model):
    """The galleryimages resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties: ~azure.mgmt.azurestackhci.models.GalleryimagesProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.GalleryimagesExtendedLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'GalleryimagesProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'GalleryimagesExtendedLocation'},
    }

    def __init__(self, **kwargs):
        super(Galleryimages, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)


class GalleryimagesExtendedLocation(Model):
    """GalleryimagesExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GalleryimagesExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class GalleryimagesPatch(Model):
    """The galleryimages resource patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(GalleryimagesPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class GalleryimagesProperties(Model):
    """GalleryimagesProperties.

    :param storagepath_id: Azure ID of the storagepath which is used to store the Gallery Images.
    :type storagepath_id: str
    :param image_path: location of the image the gallery image should be
     created from
    :type image_path: str
    :param os_type: operating system type that the gallery image uses.
     Expected to be linux or windows
    :type os_type: str
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCGalleryImageStatus defines the observed state of
     MOCGalleryImage
    :type status: object
    :param identifier: galleryImageIdentifier defines the identity of the gallery image
    :type identifier: ~azure.mgmt.azurestackhci.models.GalleryimagesPropertiesIdentifier
    :param version: version of the gallery image.
    :type version: ~azure.mgmt.azurestackhci.models.GalleryimagesPropertiesVersion
    """

    _attribute_map = {
        'storagepath_id': {'key': 'containerName', 'type': 'str'},
        'image_path': {'key': 'imagePath', 'type': 'str'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'identifier': {'key': 'identifier', 'type': 'GalleryimagesPropertiesIdentifier'},
        'version': {'key': 'version', 'type': 'GalleryimagesPropertiesVersion'},
    }

    def __init__(self, **kwargs):
        super(GalleryimagesProperties, self).__init__(**kwargs)
        self.storagepath_id = kwargs.get('storagepath_id', None)
        self.image_path = kwargs.get('image_path', None)
        self.os_type = kwargs.get('os_type', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)
        self.identifier = kwargs.get('identifier', None)
        self.version = kwargs.get('version', None)

class GalleryimagesPropertiesIdentifier(Model):
    """GalleryimagesPropertiesIdentifier.

    :param offer: The name of the gallery image definition offer
    :type offer: str
    :param pubilsher: The name of the gallery image definition publisher
    :type publisher: str
    :param sku: The name of the gallery image definition SKU
    :type sku: str
    """

    _attribute_map = {
        'offer': {'key': 'offer', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GalleryimagesPropertiesIdentifier, self).__init__(**kwargs)
        self.offer = kwargs.get('offer', None)
        self.publisher = kwargs.get('publisher', None)
        self.sku = kwargs.get('sku', None)
        
class GalleryimagesPropertiesVersion(Model):
    """GalleryimagesPropertiesIdentifier.

    :param name: The name of the gallery image version
    :type name: str

    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(GalleryimagesPropertiesVersion, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        


class HardwareProfileUpdate(Model):
    """HardwareProfile - Specifies the hardware settings for the virtual machine.

    :param vm_size:
    :type vm_size: str
    :param processors: number of processors for the virtual machine
    :type processors: int
    :param memory_mb: RAM in mb for the virtual machine
    :type memory_mb: int
    """

    _attribute_map = {
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'processors': {'key': 'processors', 'type': 'int'},
        'memory_mb': {'key': 'memoryMB', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(HardwareProfileUpdate, self).__init__(**kwargs)
        self.vm_size = kwargs.get('vm_size', None)
        self.processors = kwargs.get('processors', None)
        self.memory_mb = kwargs.get('memory_mb', None)


class Networkinterfaces(Model):
    """The networkinterfaces resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.NetworkinterfacesProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.NetworkinterfacesExtendedLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'NetworkinterfacesProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'NetworkinterfacesExtendedLocation'},
    }

    def __init__(self, **kwargs):
        super(Networkinterfaces, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)


class NetworkinterfacesExtendedLocation(Model):
    """NetworkinterfacesExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class NetworkinterfacesPatch(Model):
    """The networkinterfaces resource patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class NetworkinterfacesProperties(Model):
    """MOCNetworkInterfaceSpec defines the desired state of MOCNetworkInterface.

    :param ip_configurations: IPConfigurations - A list of IPConfigurations of
     the network interface.
    :type ip_configurations:
     list[~azure.mgmt.azurestackhci.models.NetworkinterfacesPropertiesIpConfigurationsItem]
    :param mac_address: MacAddress - The MAC address of the network interface.
    :type mac_address: str
    :param dns_settings: DNS Settings for the interface
    :type dns_settings: ~azure.mgmt.azurestackhci.models.NetworkinterfacesPropertiesInterfaceDNSSettings
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCNetworkInterfaceStatus defines the observed state of
     MOCNetworkInterface
    :type status: object
    :param resource_name: name of the object to be used in moc
    :type resource_name: str
    """

    _attribute_map = {
        'ip_configurations': {'key': 'ipConfigurations', 'type': '[NetworkinterfacesPropertiesIpConfigurationsItem]'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'dns_settings': {'key': 'dnsSettings', 'type': 'NetworkinterfacesPropertiesInterfaceDNSSettings'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'resource_name' : {'key': 'resourceName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesProperties, self).__init__(**kwargs)
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.mac_address = kwargs.get('mac_address', None)
        self.dns_settings = kwargs.get('dns_settings', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)
        self.resource_name = kwargs.get('resource_name', None)


class NetworkinterfacesPropertiesIpConfigurationsItem(Model):
    """InterfaceIPConfiguration iPConfiguration in a network interface.

    :param name: Name - The name of the resource that is unique within a
     resource group. This name can be used to access the resource.
    :type name: str
    :param properties: InterfaceIPConfigurationPropertiesFormat properties of
     IP configuration.
    :type properties:
     ~azure.mgmt.azurestackhci.models.NetworkinterfacesPropertiesIpConfigurationsItemProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'NetworkinterfacesPropertiesIpConfigurationsItemProperties'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesPropertiesIpConfigurationsItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.properties = kwargs.get('properties', None)


class NetworkinterfacesPropertiesIpConfigurationsItemProperties(Model):
    """InterfaceIPConfigurationPropertiesFormat properties of IP configuration.

    :param gateway: Gateway for network interface
    :type gateway: str
    :param prefix_length: prefixLength for network interface
    :type prefix_length: str
    :param private_ip_address: PrivateIPAddress - Private IP address of the IP
     configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: PrivateIPAllocationMethod - The
     private IP address allocation method. Possible values include: 'Static',
     'Dynamic'
    :type private_ip_allocation_method: str
    :param subnet: Subnet - Name of Subnet bound to the IP configuration.
    :type subnet:
     ~azure.mgmt.azurestackhci.models.NetworkinterfacesPropertiesIpConfigurationsItemPropertiesSubnet
    """

    _attribute_map = {
        'gateway': {'key': 'gateway', 'type': 'str'},
        'prefix_length': {'key': 'prefixLength', 'type': 'str'},
        'private_ip_address': {'key': 'privateIPAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'privateIPAllocationMethod', 'type': 'str'},
        'subnet': {'key': 'subnet', 'type': 'NetworkinterfacesPropertiesIpConfigurationsItemPropertiesSubnet'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesPropertiesIpConfigurationsItemProperties, self).__init__(**kwargs)
        self.gateway = kwargs.get('gateway', None)
        self.prefix_length = kwargs.get('prefix_length', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', None)
        self.subnet = kwargs.get('subnet', None)


class NetworkinterfacesPropertiesIpConfigurationsItemPropertiesSubnet(Model):
    """Subnet - Name of Subnet bound to the IP configuration.

    :param id: ID - The ARM resource id in the form of
     /subscriptions/{SubscriptionId}/resourceGroups/{ResourceGroupName}/...
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesPropertiesIpConfigurationsItemPropertiesSubnet, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class NetworkinterfacesPropertiesInterfaceDNSSettings(Model):
    """NetworkinterfacesPropertiesInterfaceDNSSettings.

    :param dns_servers: List of DNS server IP Addresses for the interface.
    :type dns_servers: list[str]
    """

    _attribute_map = {
        "dns_servers": {"key": "dnsServers", "type": "[str]"},
    }

    def __init__(self, **kwargs):
        super(NetworkinterfacesPropertiesInterfaceDNSSettings, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)


class NetworkProfileUpdate(Model):
    """NetworkProfile - describes the network update configuration the virtual
    machine.

    :param network_interfaces: NetworkInterfaces - list of network interfaces
     to be attached to the virtual machine
    :type network_interfaces:
     list[~azure.mgmt.azurestackhci.models.NetworkProfileUpdateNetworkInterfacesItem]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[NetworkProfileUpdateNetworkInterfacesItem]'},
    }

    def __init__(self, **kwargs):
        super(NetworkProfileUpdate, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class NetworkProfileUpdateNetworkInterfacesItem(Model):
    """NetworkProfileUpdateNetworkInterfacesItem.

    :param id: ID - Resource Id
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(NetworkProfileUpdateNetworkInterfacesItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class OperationDetail(Model):
    """Operation detail payload.

    :param name: Name of the operation
    :type name: str
    :param is_data_action: Indicates whether the operation is a data action
    :type is_data_action: bool
    :param display: Display of the operation
    :type display: ~azure.mgmt.azurestackhci.models.OperationDisplay
    :param origin: Origin of the operation
    :type origin: str
    :param properties: Properties of the operation
    :type properties: object
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(OperationDetail, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.is_data_action = kwargs.get('is_data_action', None)
        self.display = kwargs.get('display', None)
        self.origin = kwargs.get('origin', None)
        self.properties = kwargs.get('properties', None)


class OperationDisplay(Model):
    """Operation display payload.

    :param provider: Resource provider of the operation
    :type provider: str
    :param resource: Resource of the operation
    :type resource: str
    :param operation: Localized friendly name for the operation
    :type operation: str
    :param description: Localized friendly description for the operation
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class ProxyResource(Resource):
    """The resource model definition for an Azure Resource Manager proxy resource.
    It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. E.g.
     "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ProxyResource, self).__init__(**kwargs)


class Storagecontainers(Model):
    """The storagecontainers resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.StoragecontainersProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.StoragecontainersExtendedLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'StoragecontainersProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'StoragecontainersExtendedLocation'},
    }

    def __init__(self, **kwargs):        
        super(Storagecontainers, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)


class StoragecontainersExtendedLocation(Model):
    """StoragecontainersExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StoragecontainersExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class StoragecontainersPatch(Model):
    """The storagecontainers resource patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(StoragecontainersPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class StoragecontainersProperties(Model):
    """StoragecontainersProperties.

    :param path: location of the image the gallery image should be created
     from
    :type path: str
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCStorageContainerStatus defines the observed state of
     MOCStorageContainer
    :type status: object
    """

    _attribute_map = {
        'path': {'key': 'path', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(StoragecontainersProperties, self).__init__(**kwargs)
        self.path = kwargs.get('path', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)


class StorageProfileUpdate(Model):
    """StorageProfileUpdate.

    :param data_disks: adds data disks to the virtual machine for the update
     call
    :type data_disks:
     list[~azure.mgmt.azurestackhci.models.StorageProfileUpdateDataDisksItem]
    """

    _attribute_map = {
        'data_disks': {'key': 'dataDisks', 'type': '[StorageProfileUpdateDataDisksItem]'},
    }

    def __init__(self, **kwargs):
        super(StorageProfileUpdate, self).__init__(**kwargs)
        self.data_disks = kwargs.get('data_disks', None)


class StorageProfileUpdateDataDisksItem(Model):
    """StorageProfileUpdateDataDisksItem.

    :param name:
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(StorageProfileUpdateDataDisksItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)


class SystemData(Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource.
     Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
    :type created_by_type: str or
     ~azure.mgmt.azurestackhci.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the
     resource. Possible values include: 'User', 'Application',
     'ManagedIdentity', 'Key'
    :type last_modified_by_type: str or
     ~azure.mgmt.azurestackhci.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the
     resource.
    :type last_modified_at: datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class Virtualharddisks(Model):
    """The virtualharddisks resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualharddisksProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.VirtualharddisksExtendedLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'VirtualharddisksProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'VirtualharddisksExtendedLocation'},
    }

    def __init__(self, **kwargs):
        super(Virtualharddisks, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)


class VirtualharddisksExtendedLocation(Model):
    """VirtualharddisksExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualharddisksExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class VirtualharddisksPatch(Model):
    """The virtualharddisks resource patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(VirtualharddisksPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class VirtualharddisksProperties(Model):
    """MOCVirtualHardDiskSpec defines the desired state of MOCVirtualHardDisk.

    :param block_size_bytes:
    :type block_size_bytes: int
    :param disk_size_gb: diskSizeGB - size of the disk in GB
    :type disk_size_gb: long
    :param dynamic: Boolean for enabling dynamic sizing on the virtual hard
     disk
    :type dynamic: bool
    :param logical_sector_bytes:
    :type logical_sector_bytes: int
    :param physical_sector_bytes:
    :type physical_sector_bytes: int
    :param storagepath_id:
    :type storagepath_id: str
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCVirtualHardDiskStatus defines the observed state of
     MOCVirtualHardDisk
    :type status: object
    :param disk_file_format: file format of the hard disk.
     Expected to be vhd or vhdx
    :type disk_file_format: str
    """

    _attribute_map = {
        'block_size_bytes': {'key': 'blockSizeBytes', 'type': 'int'},
        'disk_size_gb': {'key': 'diskSizeGB', 'type': 'long'},
        'dynamic': {'key': 'dynamic', 'type': 'bool'},
        'logical_sector_bytes': {'key': 'logicalSectorBytes', 'type': 'int'},
        'physical_sector_bytes': {'key': 'physicalSectorBytes', 'type': 'int'},
        'storagepath_id': {'key': 'containerId', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'disk_file_format': {'key': 'diskFileFormat', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualharddisksProperties, self).__init__(**kwargs)
        self.block_size_bytes = kwargs.get('block_size_bytes', None)
        self.disk_size_gb = kwargs.get('disk_size_gb', None)
        self.dynamic = kwargs.get('dynamic', None)
        self.logical_sector_bytes = kwargs.get('logical_sector_bytes', None)
        self.physical_sector_bytes = kwargs.get('physical_sector_bytes', None)
        self.storagepath_id = kwargs.get('storagepath_id', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)
        self.disk_file_format = kwargs.get('disk_file_format', None)


class Virtualmachines(Model):
    """The virtualmachines resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesExtendedLocation
    :param identity:
    :type identity:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'VirtualmachinesProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'VirtualmachinesExtendedLocation'},
        'identity': {'key': 'identity', 'type': 'VirtualmachinesIdentity'},
    }

    def __init__(self, **kwargs):
        super(Virtualmachines, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)
        self.identity = kwargs.get('identity', None)


class VirtualmachinesExtendedLocation(Model):
    """VirtualmachinesExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class VirtualmachinesIdentity(Model):
    """VirtualmachinesIdentity

    :param type: The identity type.
    :type type: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesIdentity, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)


class VirtualmachinesPatch(Model):
    """The virtualmachines resource patch definition.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualMachineUpdateProperties
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'VirtualMachineUpdateProperties'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPatch, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.tags = kwargs.get('tags', None)


class VirtualmachinesProperties(Model):
    """MOCVirtualMachineSpec defines the desired state of MOCVirtualMachine.

    :param hardware_profile: HardwareProfile - Specifies the hardware settings
     for the virtual machine.
    :type hardware_profile:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesHardwareProfile
    :param network_profile: NetworkProfile - describes the network
     configuration the virtual machine
    :type network_profile:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesNetworkProfile
    :param os_profile: OsProfile - describes the configuration of the
     operating system and sets login data
    :type os_profile:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfile
    :param security_profile: SecurityProfile - Specifies the security settings
     for the virtual machine.
    :type security_profile:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesSecurityProfile
    :param storage_profile: StorageProfile - contains information about the
     disks and storage information for the virtual machine
    :type storage_profile:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesStorageProfile
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCVirtualMachineStatus defines the observed state of
     MOCVirtualMachine
    :type status: object
    :param guest_agent_profile: GuestAgentProfile - Contains information related
     to guest agent.
    :type guest_agent_profile:
     ~azure.mgmt.azurestackhci.models.VirtualMachineGuestAgentProfile
    """

    _attribute_map = {
        'hardware_profile': {'key': 'hardwareProfile', 'type': 'VirtualmachinesPropertiesHardwareProfile'},
        'network_profile': {'key': 'networkProfile', 'type': 'VirtualmachinesPropertiesNetworkProfile'},
        'os_profile': {'key': 'osProfile', 'type': 'VirtualmachinesPropertiesOsProfile'},
        'security_profile': {'key': 'securityProfile', 'type': 'VirtualmachinesPropertiesSecurityProfile'},
        'storage_profile': {'key': 'storageProfile', 'type': 'VirtualmachinesPropertiesStorageProfile'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'guest_agent_profile': {'key': 'guestAgentProfile', 'type': 'VirtualMachineGuestAgentProfile'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesProperties, self).__init__(**kwargs)
        self.hardware_profile = kwargs.get('hardware_profile', None)
        self.network_profile = kwargs.get('network_profile', None)
        self.os_profile = kwargs.get('os_profile', None)
        self.security_profile = kwargs.get('security_profile', None)
        self.storage_profile = kwargs.get('storage_profile', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)


class VirtualmachinesPropertiesHardwareProfile(Model):
    """HardwareProfile - Specifies the hardware settings for the virtual machine.

    :param vm_size:
    :type vm_size: str
    :param processors: number of processors for the virtual machine
    :type processors: int
    :param memory_mb: RAM in mb for the virtual machine.
    :type memory_mb: int
    :param dynamic_memory_config:
    :type dynamic_memory_config:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesHardwareProfileDynamicMemoryConfig
    """

    _attribute_map = {
        'vm_size': {'key': 'vmSize', 'type': 'str'},
        'processors': {'key': 'processors', 'type': 'int'},
        'memory_mb': {'key': 'memoryMB', 'type': 'int'},
        'dynamic_memory_config': {'key': 'dynamicMemoryConfig', 'type': 'VirtualmachinesPropertiesHardwareProfileDynamicMemoryConfig'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesHardwareProfile, self).__init__(**kwargs)
        self.vm_size = kwargs.get('vm_size', None)
        self.processors = kwargs.get('processors', None)
        self.memory_mb = kwargs.get('memory_mb', None)
        self.dynamic_memory_config = kwargs.get('dynamic_memory_config', None)

class VirtualmachinesPropertiesHardwareProfileDynamicMemoryConfig(Model):
    """VirtualmachinesPropertiesHardwareProfileDynamicMemoryConfig.

    :param maximum_memory_mb:
    :type maximum_memory_mb: long
    :param minimum_memory_mb:
    :type minimum_memory_mb: long
    :param target_memory_buffer:
    :type target_memory_buffer: int
    """

    _attribute_map = {
        'maximum_memory_mb': {'key': 'maximumMemoryMB', 'type': 'long'},
        'minimum_memory_mb': {'key': 'minimumMemoryMB', 'type': 'long'},
        'target_memory_buffer': {'key': 'targetMemoryBuffer', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualmachinesPropertiesHardwareProfileDynamicMemoryConfig, self).__init__(**kwargs)
        self.maximum_memory_mb = kwargs.get('maximum_memory_mb', None)
        self.minimum_memory_mb = kwargs.get('minimum_memory_mb', None)
        self.target_memory_buffer = kwargs.get('target_memory_buffer', None)

class VirtualmachinesPropertiesNetworkProfile(Model):
    """NetworkProfile - describes the network configuration the virtual machine.

    :param network_interfaces: NetworkInterfaces - list of network interfaces
     to be attached to the virtual machine
    :type network_interfaces:
     list[~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesNetworkProfileNetworkInterfacesItem]
    """

    _attribute_map = {
        'network_interfaces': {'key': 'networkInterfaces', 'type': '[VirtualmachinesPropertiesNetworkProfileNetworkInterfacesItem]'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesNetworkProfile, self).__init__(**kwargs)
        self.network_interfaces = kwargs.get('network_interfaces', None)


class VirtualmachinesPropertiesNetworkProfileNetworkInterfacesItem(Model):
    """VirtualmachinesPropertiesNetworkProfileNetworkInterfacesItem.

    :param id: ID - Resource Id
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesNetworkProfileNetworkInterfacesItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualmachinesPropertiesOsProfile(Model):
    """OsProfile - describes the configuration of the operating system and sets
    login data.

    :param admin_password: AdminPassword - admin password
    :type admin_password: str
    :param admin_username: AdminUsername - admin username
    :type admin_username: str
    :param computer_name: ComputerName - name of the compute
    :type computer_name: str
    :param linux_configuration: LinuxConfiguration - linux specific
     configuration values for the virtual machine
    :type linux_configuration:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileLinuxConfiguration
    :param os_type: OsType - string specifying whether the OS is Linux or
     Windows
    :type os_type: str
    :param windows_configuration: Windows Configuration for the virtual
     machine
    :type windows_configuration:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileWindowsConfiguration
    """

    _attribute_map = {
        'admin_password': {'key': 'adminPassword', 'type': 'str'},
        'admin_username': {'key': 'adminUsername', 'type': 'str'},
        'computer_name': {'key': 'computerName', 'type': 'str'},
        'linux_configuration': {'key': 'linuxConfiguration', 'type': 'VirtualmachinesPropertiesOsProfileLinuxConfiguration'},
        'os_type': {'key': 'osType', 'type': 'str'},
        'windows_configuration': {'key': 'windowsConfiguration', 'type': 'VirtualmachinesPropertiesOsProfileWindowsConfiguration'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfile, self).__init__(**kwargs)
        self.admin_password = kwargs.get('admin_password', None)
        self.admin_username = kwargs.get('admin_username', None)
        self.computer_name = kwargs.get('computer_name', None)
        self.linux_configuration = kwargs.get('linux_configuration', None)
        self.os_type = kwargs.get('os_type', None)
        self.windows_configuration = kwargs.get('windows_configuration', None)


class VirtualmachinesPropertiesOsProfileLinuxConfiguration(Model):
    """LinuxConfiguration - linux specific configuration values for the virtual
    machine.

    :param disable_password_authentication: DisablePasswordAuthentication -
     whether password authentication should be disabled
    :type disable_password_authentication: bool
    :param ssh: SSH - contains settings related to ssh configuration
    :type ssh:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileLinuxConfigurationSsh
    :param provision_vm_agent: Whether to provision guest management agent
    :type provision_vm_agent: bool
    """

    _attribute_map = {
        'disable_password_authentication': {'key': 'disablePasswordAuthentication', 'type': 'bool'},
        'ssh': {'key': 'ssh', 'type': 'VirtualmachinesPropertiesOsProfileLinuxConfigurationSsh'},
        'provision_vm_agent': {'key': 'provisionVMAgent', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileLinuxConfiguration, self).__init__(**kwargs)
        self.disable_password_authentication = kwargs.get('disable_password_authentication', None)
        self.ssh = kwargs.get('ssh', None)
        self.provision_vm_agent = kwargs.get('provision_vm_agent', None)


class VirtualmachinesPropertiesOsProfileLinuxConfigurationSsh(Model):
    """SSH - contains settings related to ssh configuration.

    :param public_keys: PublicKeys - The list of SSH public keys used to
     authenticate with linux based VMs.
    :type public_keys:
     list[~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileLinuxConfigurationSshPublicKeysItem]
    """

    _attribute_map = {
        'public_keys': {'key': 'publicKeys', 'type': '[VirtualmachinesPropertiesOsProfileLinuxConfigurationSshPublicKeysItem]'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileLinuxConfigurationSsh, self).__init__(**kwargs)
        self.public_keys = kwargs.get('public_keys', None)


class VirtualmachinesPropertiesOsProfileLinuxConfigurationSshPublicKeysItem(Model):
    """VirtualmachinesPropertiesOsProfileLinuxConfigurationSshPublicKeysItem.

    :param key_data: KeyData - SSH public key certificate used to authenticate
     with the VM through ssh. The key needs to be at least 2048-bit and in
     ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on
     Linux and Mac for Li      nux VMs in
     Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
    :type key_data: str
    :param path: Path - Specifies the full path on the created VM where ssh
     public key is stored. If the file already exists, the specified key is
     appended to the file. Example: /home/user/.ssh/authorized_keys
    :type path: str
    """

    _attribute_map = {
        'key_data': {'key': 'keyData', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileLinuxConfigurationSshPublicKeysItem, self).__init__(**kwargs)
        self.key_data = kwargs.get('key_data', None)
        self.path = kwargs.get('path', None)


class VirtualmachinesPropertiesOsProfileWindowsConfiguration(Model):
    """Windows Configuration for the virtual machine .

    :param enable_automatic_updates: Whether to EnableAutomaticUpdates on the
     machine
    :type enable_automatic_updates: bool
    :param provision_vm_agent: Whether to provision guest management agent
    :type provision_vm_agent: bool
    :param ssh: AdditionalUnattendContent AdditionalUnattendContent
     *[]AdditionalUnattendContent `json:"additionalUnattendContent,omitempty"`
     SSH
    :type ssh:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileWindowsConfigurationSsh
    :param time_zone: TimeZone for the virtual machine
    :type time_zone: str
    """

    _attribute_map = {
        'enable_automatic_updates': {'key': 'enableAutomaticUpdates', 'type': 'bool'},
        'ssh': {'key': 'ssh', 'type': 'VirtualmachinesPropertiesOsProfileWindowsConfigurationSsh'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'provision_vm_agent': {'key': 'provisionVMAgent', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileWindowsConfiguration, self).__init__(**kwargs)
        self.enable_automatic_updates = kwargs.get('enable_automatic_updates', None)
        self.ssh = kwargs.get('ssh', None)
        self.time_zone = kwargs.get('time_zone', None)
        self.provision_vm_agent = kwargs.get('provision_vm_agent', None)


class VirtualmachinesPropertiesOsProfileWindowsConfigurationSsh(Model):
    """AdditionalUnattendContent AdditionalUnattendContent
    *[]AdditionalUnattendContent `json:"additionalUnattendContent,omitempty"`
    SSH.

    :param public_keys: PublicKeys - The list of SSH public keys used to
     authenticate with linux based VMs.
    :type public_keys:
     list[~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesOsProfileWindowsConfigurationSshPublicKeysItem]
    """

    _attribute_map = {
        'public_keys': {'key': 'publicKeys', 'type': '[VirtualmachinesPropertiesOsProfileWindowsConfigurationSshPublicKeysItem]'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileWindowsConfigurationSsh, self).__init__(**kwargs)
        self.public_keys = kwargs.get('public_keys', None)


class VirtualmachinesPropertiesOsProfileWindowsConfigurationSshPublicKeysItem(Model):
    """VirtualmachinesPropertiesOsProfileWindowsConfigurationSshPublicKeysItem.

    :param key_data: KeyData - SSH public key certificate used to authenticate
     with the VM through ssh. The key needs to be at least 2048-bit and in
     ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on
     Linux and Mac for Li      nux VMs in
     Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-linux-mac-create-ssh-keys?toc=%2fazure%2fvirtual-machines%2flinux%2ftoc.json).
    :type key_data: str
    :param path: Path - Specifies the full path on the created VM where ssh
     public key is stored. If the file already exists, the specified key is
     appended to the file. Example: /home/user/.ssh/authorized_keys
    :type path: str
    """

    _attribute_map = {
        'key_data': {'key': 'keyData', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesOsProfileWindowsConfigurationSshPublicKeysItem, self).__init__(**kwargs)
        self.key_data = kwargs.get('key_data', None)
        self.path = kwargs.get('path', None)


class VirtualmachinesPropertiesSecurityProfile(Model):
    """SecurityProfile - Specifies the security settings for the virtual machine.

    :param enable_tpm:
    :type enable_tpm: bool
    :param uefi_settings:
    :type uefi_settings: ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesSecurityProfileUefiSettings
    """

    _attribute_map = {
        'enable_tpm': {'key': 'enableTPM', 'type': 'bool'},
        'uefi_settings': {'key': 'uefiSettings', 'type': 'VirtualmachinesPropertiesSecurityProfileUefiSettings'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesSecurityProfile, self).__init__(**kwargs)
        self.enable_tpm = kwargs.get('enable_tpm', None)
        self.uefi_settings = kwargs.get('uefi_settings', None)

class VirtualmachinesPropertiesSecurityProfileUefiSettings(Model):
    """SecurityProfile - Specifies the security settings for the virtual machine.

    :param secure_boot_enabled:
    :type secure_boot_enabled: bool
    """

    _attribute_map = {
        'secure_boot_enabled': {'key': 'secureBootEnabled', 'type': 'bool'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesSecurityProfileUefiSettings, self).__init__(**kwargs)
        self.secure_boot_enabled = kwargs.get('secure_boot_enabled', None)

class VirtualmachinesPropertiesStorageProfile(Model):
    """StorageProfile - contains information about the disks and storage
    information for the virtual machine.

    :param data_disks: adds data disks to the virtual machine
    :type data_disks:
     list[~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesStorageProfileDataDisksItem]
    :param image_reference: Which Image to use for the virtual machine
    :type image_reference:
     ~azure.mgmt.azurestackhci.models.VirtualmachinesPropertiesStorageProfileImageReference
    :param storagepath_id: Azure ID of the storagepath which is used to store Virtual Machine configuration file.
    :type storagepath_id: str
    """

    _attribute_map = {
        'data_disks': {'key': 'dataDisks', 'type': '[VirtualmachinesPropertiesStorageProfileDataDisksItem]'},
        'image_reference': {'key': 'imageReference', 'type': 'VirtualmachinesPropertiesStorageProfileImageReference'},
        'os_disk': {'key':'osDisk', 'type': 'VirtualmachinesPropertiesStorageProfileOsDisk'},
        'storagepath_id': {'key': 'vmConfigStoragePathId', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesStorageProfile, self).__init__(**kwargs)
        self.data_disks = kwargs.get('data_disks', None)
        self.image_reference = kwargs.get('image_reference', None)
        self.os_disk = kwargs.get('os_disk', None)
        self.storagepath_id = kwargs.get('storagepath_id', None)


class VirtualmachinesPropertiesStorageProfileDataDisksItem(Model):
    """VirtualmachinesPropertiesStorageProfileDataDisksItem.

    :param id:
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesStorageProfileDataDisksItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualmachinesPropertiesStorageProfileImageReference(Model):
    """Which Image to use for the virtual machine.

    :param id: id - ID of the image
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesStorageProfileImageReference, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)

class VirtualmachinesPropertiesStorageProfileOsDisk(Model):
    """Which Image to use for the virtual machine.

    :param id: Id - Id of the os disk 
    :type name: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualmachinesPropertiesStorageProfileOsDisk, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualMachineUpdateProperties(Model):
    """Defines the resource properties for the update.

    :param hardware_profile:
    :type hardware_profile:
     ~azure.mgmt.azurestackhci.models.HardwareProfileUpdate
    :param storage_profile:
    :type storage_profile:
     ~azure.mgmt.azurestackhci.models.StorageProfileUpdate
    :param network_profile:
    :type network_profile:
     ~azure.mgmt.azurestackhci.models.NetworkProfileUpdate
    """

    _attribute_map = {
        'hardware_profile': {'key': 'hardwareProfile', 'type': 'HardwareProfileUpdate'},
        'storage_profile': {'key': 'storageProfile', 'type': 'StorageProfileUpdate'},
        'network_profile': {'key': 'networkProfile', 'type': 'NetworkProfileUpdate'},
    }

    def __init__(self, **kwargs):
        super(VirtualMachineUpdateProperties, self).__init__(**kwargs)
        self.hardware_profile = kwargs.get('hardware_profile', None)
        self.storage_profile = kwargs.get('storage_profile', None)
        self.network_profile = kwargs.get('network_profile', None)

class VirtualMachineGuestAgentProfile(Model):
    """VirtualMachineGuestAgentProfile -  Contains information related
    to guest agent.

    :param status:
    :type status: str
    :param vmuuid:
    :type vmuuid: str
    :param agent_version:
    :type agent_version: str
    :type last_status_change:
    :type last_status_change: ~datetime.datetime
    :param error_details:
    :type error_details: list[~azure.mgmt.azurestackhci.models.VirtualMachineGuestAgentProfileErrorDetail]
    """

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'vmuuid': {'key': 'vmUuid', 'type': 'str'},
        'agent_version': {'key': 'agentVersion', 'type': 'str'},
        'last_status_change': {'key': 'lastStatusChange', 'type': 'str'},
        'error_details': {'key': 'errorDetails', 'type': '[VirtualMachineGuestAgentProfileErrorDetail]'},
    }

    def __init__(self, **kwargs):
        super(VirtualMachineGuestAgentProfile, self).__init__(**kwargs)
        self.status = kwargs.get('status', None)
        self.vmuuid = kwargs.get('vmuuid', None)
        self.agent_version = kwargs.get('agent_version', None)
        self.last_status_change = kwargs.get('last_status_change', None)
        self.error_details = kwargs.get('error_details', None)

class VirtualMachineGuestAgentProfileErrorDetail(Model):
    """The error detail.

    :param code:
    :type code: str
    :param message:
    :type message: str
    :param target:
    :type target: str
    :param details:
    :type details: list[~azure.mgmt.azurestackhci.models.VirtualMachineGuestAgentProfileErrorDetail]
    :param additional_info:
    :type additional_info: list[~azure.mgmt.azurestackhci.models.VirtualMachineGuestAgentProfileErrorDetailAdditionalInfo]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[VirtualMachineGuestAgentProfileErrorDetail]'},
        'additional_info': {'key': 'additional_info', 'type': '[VirtualMachineGuestAgentProfileErrorDetailAdditionalInfo]'},        
    }

    def __init__(self, **kwargs):
        super(VirtualMachineGuestAgentProfileErrorDetail, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)
        self.additional_info = kwargs.get('additional_info', None)

class VirtualMachineGuestAgentProfileErrorDetailAdditionalInfo(Model):
    """Error additional info.

    :param type:
    :type type: str
    :param info:
    :type info: object
    """

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs):
        super(VirtualMachineGuestAgentProfileErrorDetailAdditionalInfo, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.info = kwargs.get('info', None)

class Virtualnetworks(Model):
    """The virtualnetworks resource definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksProperties
    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param system_data:
    :type system_data: ~azure.mgmt.azurestackhci.models.SystemData
    :param extended_location:
    :type extended_location:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksExtendedLocation
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'VirtualnetworksProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'extended_location': {'key': 'extendedLocation', 'type': 'VirtualnetworksExtendedLocation'},
    }

    def __init__(self, **kwargs):
        super(Virtualnetworks, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)
        self.system_data = kwargs.get('system_data', None)
        self.extended_location = kwargs.get('extended_location', None)


class VirtualnetworksExtendedLocation(Model):
    """VirtualnetworksExtendedLocation.

    :param type: The extended location type.
    :type type: str
    :param name: The extended location name.
    :type name: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksExtendedLocation, self).__init__(**kwargs)
        self.type = kwargs.get('type', None)
        self.name = kwargs.get('name', None)


class VirtualnetworksPatch(Model):
    """The virtualnetworks resource patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class VirtualnetworksProperties(Model):
    """MOCVirtualNetworkSpec defines the desired state of MOCVirtualNetwork.

    :param network_type: Type of the network
    :type network_type: str
    :param dhcp_options: DhcpOptions contains an array of DNS servers available to VMs deployed in the virtual network
    :type dhcp_options:
    ~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesDHCPOptions
    :param subnets: Subnet - list of subnets under the virtual network
    :type subnets:
     list[~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItem]
    :param provisioning_state:
    :type provisioning_state: str
    :param status: MOCVirtualNetworkStatus defines the observed state of
     MOCVirtualNetwork
    :type status: object
    :param vm_switch_name: name of the network switch to be used for VMs
    :type vm_switch_name: str
    """

    _attribute_map = {
        'network_type': {'key': 'networkType', 'type': 'str'},
        'dhcp_options': {'key': 'dhcpOptions', 'type': 'VirtualnetworksPropertiesDHCPOptions'},
        'subnets': {'key': 'subnets', 'type': '[VirtualnetworksPropertiesSubnetsItem]'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'object'},
        'vm_switch_name': {'key': 'vmSwitchName', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksProperties, self).__init__(**kwargs)
        self.network_type = kwargs.get('network_type', None)
        self.dhcp_options = kwargs.get('dhcp_options', None)
        self.subnets = kwargs.get('subnets', None)
        self.provisioning_state = kwargs.get('provisioning_state', None)
        self.status = kwargs.get('status', None)
        self.vm_switch_name = kwargs.get('vm_switch_name', None)

class VirtualnetworksPropertiesDHCPOptions(Model):
    """
    :param dns_servers: The list of DNS servers IP addresses
    :type dns_servers: list[str]
    """

    _attribute_map = {
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
    }

    def __init__(self, **kwargs) -> None:
        super(VirtualnetworksPropertiesDHCPOptions, self).__init__(**kwargs)
        self.dns_servers = kwargs.get('dns_servers', None)

class VirtualnetworksPropertiesSubnetsItem(Model):
    """Subnet subnet in a virtual network resource.

    :param name: Name - The name of the resource that is unique within a
     resource group. This name can be used to access the resource.
    :type name: str
    :param properties: SubnetProperties - Properties of the subnet.
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VirtualnetworksPropertiesSubnetsItemProperties'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.properties = kwargs.get('properties', None)


class VirtualnetworksPropertiesSubnetsItemProperties(Model):
    """SubnetProperties - Properties of the subnet.

    :param address_prefix: Cidr for this subnet - IPv4, IPv6
    :type address_prefix: str
    :param address_prefixes: AddressPrefixes - List of address prefixes for
     the subnet.
    :type address_prefixes: list[str]
    :param ip_allocation_method: IPAllocationMethod - The IP address
     allocation method. Possible values include: 'Static', 'Dynamic'
    :type ip_allocation_method: str
    :param ip_pools: List of IPs having start, end IP range along with their types
    :type ip_pools: list[~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesIPPool]
    :param ip_configuration_references: IPConfigurationReferences - list of
     IPConfigurationReferences
    :type ip_configuration_references:
     list[~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesIpConfigurationReferencesItem]
    :param route_table: RouteTable for the subnet
    :type route_table:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesRouteTable
    :param vlan: Vlan to use for the subnet
    :type vlan: int
    """

    _attribute_map = {
        'address_prefix': {'key': 'addressPrefix', 'type': 'str'},
        'address_prefixes': {'key': 'addressPrefixes', 'type': '[str]'},
        'ip_allocation_method': {'key': 'ipAllocationMethod', 'type': 'str'},
        'ip_pools' : {'key': 'ipPools', 'type': '[VirtualnetworksPropertiesSubnetsItemPropertiesIPPool]'},
        'ip_configuration_references': {'key': 'ipConfigurationReferences', 'type': '[VirtualnetworksPropertiesSubnetsItemPropertiesIpConfigurationReferencesItem]'},
        'route_table': {'key': 'routeTable', 'type': 'VirtualnetworksPropertiesSubnetsItemPropertiesRouteTable'},
        'vlan': {'key': 'vlan', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemProperties, self).__init__(**kwargs)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.address_prefixes = kwargs.get('address_prefixes', None)
        self.ip_allocation_method = kwargs.get('ip_allocation_method', None)
        self.ip_pools = kwargs.get('ip_pools', None)
        self.ip_configuration_references = kwargs.get('ip_configuration_references', None)
        self.route_table = kwargs.get('route_table', None)
        self.vlan = kwargs.get('vlan', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesIPPool(Model):
    """IPPool - Describe IPPool parameters

    :param ip_pool_type: IPPoolType
    :type ip_pool_type: str
    :param start: starting range of IP Address
    :type start: str
    :param end: ending range of IP Address
    :type end: str
    """
    _attribute_map = {
        'ip_pool_type': {'key': 'ipPoolType', 'type': 'str'},
        'start': {'key': 'start', 'type': 'str'},
        'end': {'key': 'end', 'type':'str'},
    }

    def __init__(self,  **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesIPPool, self).__init__(**kwargs)
        self.ip_pool_type = kwargs.get('ip_pool_type', None)
        self.start = kwargs.get('start', None)
        self.end = kwargs.get('end', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesIpConfigurationReferencesItem(Model):
    """IPConfigurationReference - Describes a IPConfiguration under the virtual
    network.

    :param id: IPConfigurationID
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'ID', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesIpConfigurationReferencesItem, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesRouteTable(Model):
    """RouteTable for the subnet.

    :param id: Etag - Gets a unique read-only string that changes whenever the
     resource is updated.
    :type id: str
    :param name: Name - READ-ONLY; Resource name.
    :type name: str
    :param properties: RouteTablePropertiesFormat route Table resource.
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesRouteTableProperties
    :param type: Type - READ-ONLY; Resource type.
    :type type: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VirtualnetworksPropertiesSubnetsItemPropertiesRouteTableProperties'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesRouteTable, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.name = kwargs.get('name', None)
        self.properties = kwargs.get('properties', None)
        self.type = kwargs.get('type', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesRouteTableProperties(Model):
    """RouteTablePropertiesFormat route Table resource.

    :param routes: Routes - Collection of routes contained within a route
     table.
    :type routes:
     list[~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItem]
    """

    _attribute_map = {
        'routes': {'key': 'routes', 'type': '[VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItem]'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesRouteTableProperties, self).__init__(**kwargs)
        self.routes = kwargs.get('routes', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItem(Model):
    """Route is associated with a subnet.

    :param name: Name - name of the subnet
    :type name: str
    :param properties: RoutePropertiesFormat - Properties of the route.
    :type properties:
     ~azure.mgmt.azurestackhci.models.VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItemProperties
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItemProperties'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItem, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.properties = kwargs.get('properties', None)


class VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItemProperties(Model):
    """RoutePropertiesFormat - Properties of the route.

    :param address_prefix: AddressPrefix - The destination CIDR to which the
     route applies.
    :type address_prefix: str
    :param next_hop_ip_address: NextHopIPAddress - The IP address packets
     should be forwarded to. Next hop values are only allowed in routes where
     the next hop type is VirtualAppliance.
    :type next_hop_ip_address: str
    """

    _attribute_map = {
        'address_prefix': {'key': 'addressPrefix', 'type': 'str'},
        'next_hop_ip_address': {'key': 'nextHopIpAddress', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualnetworksPropertiesSubnetsItemPropertiesRouteTablePropertiesRoutesItemProperties, self).__init__(**kwargs)
        self.address_prefix = kwargs.get('address_prefix', None)
        self.next_hop_ip_address = kwargs.get('next_hop_ip_address', None)

class ArcVmExtensions(Model):
    """Describes a Arc VM Extension.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param properties:
    :type properties: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsProperties
    :ivar id: Resource Id
    :vartype id: str    
    :ivar name: Resource Name
    :vartype name: str
    :ivar type: Resource Type
    :vartype type: str
    :param location: Required. The resource location.
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]    
    :ivar system_data: 
    :vartype system_data: ~azure.mgmt.azurestackhci.models.SystemData    
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'ArcVmExtensionsProperties'},
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},        
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensions, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.id = None
        self.name = None
        self.type = None
        self.location = kwargs.get('location', None)
        self.tags = kwargs.get('tags', None)        
        self.system_data = kwargs.get('system_data', None)        
    
class ArcVmExtensionsProperties(Model):
    """ArcVmExtensionsProperties describes the properties of an Arc VM Extension.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param force_update_tag: How the extension handler should be forced to update even if the
    extension configuration has not changed.
    :type force_update_tag: str
    :param publisher: The name of the extension handler publisher.
    :type publisher: str
    :param extension_type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :type extension_type: str
    :param type_handler_version: Specifies the version of the script handler.
    :type type_handler_version: str
    :param enable_automatic_upgrade: Indicates whether the extension should be automatically
    upgraded by the platform if there is a newer version available.
    :type enable_automatic_upgrade: bool
    :param auto_upgrade_minor_version: Indicates whether the extension should use a newer minor
    version if one is available at deployment time. Once deployed, however, the extension will not
    upgrade minor versions unless redeployed, even with this property set to true.
    :type auto_upgrade_minor_version: bool
    :param settings: Json formatted public settings for the extension.
    :type settings: object
    :param protected_settings: The extension can contain either protectedSettings or
    protectedSettingsFromKeyVault or no protected settings at all.
    :type protected_settings: object
    :ivar provisioning_state: The provisioning state, which only appears in the response.
    :vartype provisioning_state: str
    :param instance_view: The machine extension instance view.
    :type instance_view: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsInstanceView
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'force_update_tag': {'key': 'forceUpdateTag', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'extension_type': {'key': 'type', 'type': 'str'},
        'type_handler_version': {'key': 'typeHandlerVersion', 'type': 'str'},
        'enable_automatic_upgrade': {'key': 'enableAutomaticUpgrade', 'type': 'bool'},
        'auto_upgrade_minor_version': {'key': 'autoUpgradeMinorVersion', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': 'object'},
        'protected_settings': {'key': 'protectedSettings', 'type': 'object'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'instance_view': {'key': 'instanceView', 'type': 'ArcVmExtensionsInstanceView'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsProperties, self).__init__(**kwargs)
        self.force_update_tag = kwargs.get('force_update_tag', None)
        self.publisher = kwargs.get('publisher', None)
        self.extension_type = kwargs.get('extension_type', None)
        self.type_handler_version = kwargs.get('type_handler_version', None)
        self.enable_automatic_upgrade = kwargs.get('enable_automatic_upgrade', None)
        self.auto_upgrade_minor_version = kwargs.get('auto_upgrade_minor_version', None)
        self.settings = kwargs.get('settings', None)
        self.protected_settings = kwargs.get('protected_settings', None)
        self.provisioning_state = None
        self.instance_view = kwargs.get('instance_view', None)

class ArcVmExtensionsInstanceView(Model):
    """ArcVmExtensionsInstanceView describes the ArcVmExtension Instance View.

    :param name: The extension name.
    :type name: str
    :param extension_type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :type extension_type: str
    :param type_handler_version: Specifies the version of the script handler.
    :type type_handler_version: str
    :param status: Instance view status.
    :type status: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsInstanceViewStatus
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'extension_type': {'key': 'type', 'type': 'str'},
        'type_handler_version': {'key': 'typeHandlerVersion', 'type': 'str'},
        'status': {'key': 'status', 'type': 'ArcVmExtensionsInstanceViewStatus'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsInstanceView, self).__init__(**kwargs)
        self.name = kwargs.get('name', None)
        self.extension_type = kwargs.get('type', None)
        self.type_handler_version = kwargs.get('type_handler_version', None)
        self.status = kwargs.get('status', None)

class ArcVmExtensionsInstanceViewStatus(Model):
    """Instance view status.

    :param code: The status code.
    :type code: str
    :param level: The level code. Possible values include: "Info", "Warning", "Error".
    :type level: str
    :param display_status: The short localizable label for the status.
    :type display_status: str
    :param message: The detailed status message, including for alerts and error messages.
    :type message: str
    :param time: The time of the status.
    :type time: ~datetime.datetime
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'level': {'key': 'level', 'type': 'str'},
        'display_status': {'key': 'displayStatus', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'time': {'key': 'time', 'type': 'iso-8601'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsInstanceViewStatus, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.level = kwargs.get('level', None)
        self.display_status = kwargs.get('display_status', None)
        self.message = kwargs.get('message', None)
        self.time = kwargs.get('time', None)

class ArcVmExtensionsPatch(Model):
    """The ArcVmExtensions patch definition.

    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)

class ResourceUpdate(Model):
    """The Update Resource model definition.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, **kwargs):
        super(ResourceUpdate, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)

class ArcVmExtensionsUpdate(ResourceUpdate):
    """Describes a Arc Extension update.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param properties: Describes Arc VM Extension Update Properties.
    :type properties: ~azure.mgmt.azurestackhci.models.ArcVmExtensionsUpdateProperties    
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'ArcVmExtensionsUpdateProperties'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsUpdate, self).__init__(**kwargs)
        self.properties = kwargs.get('properties', None)
        self.tags = kwargs.get('tags', None)

class ArcVmExtensionsUpdateProperties(Model):
    """ArcVmExtensionsUpdateProperties describes the properties of an Arc VM Extension Update.    

    :param force_update_tag: How the extension handler should be forced to update even if the
    extension configuration has not changed.
    :type force_update_tag: str
    :param publisher: The name of the extension handler publisher.
    :type publisher: str
    :param extension_type: Specifies the type of the extension; an example is "CustomScriptExtension".
    :type extension_type: str
    :param type_handler_version: Specifies the version of the script handler.
    :type type_handler_version: str
    :param enable_automatic_upgrade: Indicates whether the extension should be automatically
    upgraded by the platform if there is a newer version available.
    :type enable_automatic_upgrade: bool
    :param auto_upgrade_minor_version: Indicates whether the extension should use a newer minor
    version if one is available at deployment time. Once deployed, however, the extension will not
    upgrade minor versions unless redeployed, even with this property set to true.
    :type auto_upgrade_minor_version: bool
    :param settings: Json formatted public settings for the extension.
    :type settings: object
    :param protected_settings: The extension can contain either protectedSettings or
    protectedSettingsFromKeyVault or no protected settings at all.
    :type protected_settings: object
    """

    _attribute_map = {
        'force_update_tag': {'key': 'forceUpdateTag', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'extension_type': {'key': 'type', 'type': 'str'},
        'type_handler_version': {'key': 'typeHandlerVersion', 'type': 'str'},
        'enable_automatic_upgrade': {'key': 'enableAutomaticUpgrade', 'type': 'bool'},
        'auto_upgrade_minor_version': {'key': 'autoUpgradeMinorVersion', 'type': 'bool'},
        'settings': {'key': 'settings', 'type': 'object'},
        'protected_settings': {'key': 'protectedSettings', 'type': 'object'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsUpdateProperties, self).__init__(**kwargs)
        self.force_update_tag = kwargs.get('force_update_tag', None)
        self.publisher = kwargs.get('publisher', None)
        self.extension_type = kwargs.get('type', None)
        self.type_handler_version = kwargs.get('type_handler_version', None)
        self.enable_automatic_upgrade = kwargs.get('enable_automatic_upgrade', None)
        self.auto_upgrade_minor_version = kwargs.get('auto_upgrade_minor_version', None)
        self.settings = kwargs.get('settings', None)
        self.protected_settings = kwargs.get('protected_settings', None)

class ArcVmExtensionsListResult(Model):
    """Describes the ArcVmExtensions List Result.

    :param value: The list of extensions.
    :type value: list[~azure.mgmt.azurestackhci.models.ArcVmExtensions]
    :param next_link: The uri to fetch the next page of arcvmextensions. Call ListNext() with
    this to fetch the next page of extensions.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ArcVmExtensions]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(ArcVmExtensionsListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)