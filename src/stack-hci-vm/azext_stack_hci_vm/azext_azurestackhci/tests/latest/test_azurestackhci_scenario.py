# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_cluster_create
from .example_steps import step_cluster_show
from .example_steps import step_cluster_list
from .example_steps import step_cluster_list2
from .example_steps import step_cluster_update
from .example_steps import step_cluster_delete
from .example_steps import step_galleryimage_create
from .example_steps import step_galleryimage_retrieve
from .example_steps import step_galleryimage_list
from .example_steps import step_galleryimage_update
from .example_steps import step_galleryimage_delete
from .example_steps import step_networkinterface_create
from .example_steps import step_networkinterface_retrieve
from .example_steps import step_networkinterface_list
from .example_steps import step_networkinterface_list2
from .example_steps import step_networkinterface_update
from .example_steps import step_networkinterface_delete
from .example_steps import step_storagecontainer_create
from .example_steps import step_storagecontainer_retrieve
from .example_steps import step_storagecontainer_list
from .example_steps import step_storagecontainer_update
from .example_steps import step_storagecontainer_delete
from .example_steps import step_virtualharddisk_create
from .example_steps import step_virtualharddisk_retrieve
from .example_steps import step_virtualharddisk_list
from .example_steps import step_virtualharddisk_update
from .example_steps import step_virtualharddisk_delete
from .example_steps import step_virtualmachine_create
from .example_steps import step_virtualmachine_retrieve
from .example_steps import step_virtualmachine_list
from .example_steps import step_virtualmachine_list2
from .example_steps import step_virtualmachine_update
from .example_steps import step_virtualmachine_start
from .example_steps import step_virtualmachine_stop
from .example_steps import step_virtualmachine_delete
from .example_steps import step_virtualnetwork_create
from .example_steps import step_virtualnetwork_retrieve
from .example_steps import step_virtualnetwork_list
from .example_steps import step_virtualnetwork_list2
from .example_steps import step_virtualnetwork_update
from .example_steps import step_virtualnetwork_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg):
    setup_scenario(test, rg_2, rg)
    step_cluster_create(test, rg_2, rg, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadClientId", "24a6e53d-04e5-44d2-b7cc-1b732a847dfc", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
    ])
    step_cluster_show(test, rg_2, rg, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadClientId", "24a6e53d-04e5-44d2-b7cc-1b732a847dfc", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
    ])
    step_cluster_list(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_list2(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_cluster_update(test, rg_2, rg, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("aadTenantId", "7e589cc1-a8b6-4dff-91bd-5ec0fa18db94", case_sensitive=False),
        test.check("name", "{myCluster}", case_sensitive=False),
        test.check("tags.tag1", "value1", case_sensitive=False),
        test.check("tags.tag2", "value2", case_sensitive=False),
    ])
    step_cluster_delete(test, rg_2, rg, checks=[])
    step_galleryimage_create(test, rg_2, rg, checks=[])
    step_galleryimage_retrieve(test, rg_2, rg, checks=[])
    step_galleryimage_list(test, rg_2, rg, checks=[])
    step_galleryimage_list(test, rg_2, rg, checks=[])
    step_galleryimage_update(test, rg_2, rg, checks=[])
    step_galleryimage_delete(test, rg_2, rg, checks=[])
    step_networkinterface_create(test, rg_2, rg, checks=[])
    step_networkinterface_retrieve(test, rg_2, rg, checks=[])
    step_networkinterface_list(test, rg_2, rg, checks=[])
    step_networkinterface_list2(test, rg_2, rg, checks=[])
    step_networkinterface_update(test, rg_2, rg, checks=[])
    step_networkinterface_delete(test, rg_2, rg, checks=[])
    step_storagecontainer_create(test, rg_2, rg, checks=[])
    step_storagecontainer_retrieve(test, rg_2, rg, checks=[])
    step_storagecontainer_list(test, rg_2, rg, checks=[])
    step_storagecontainer_list(test, rg_2, rg, checks=[])
    step_storagecontainer_update(test, rg_2, rg, checks=[])
    step_storagecontainer_delete(test, rg_2, rg, checks=[])
    step_virtualharddisk_create(test, rg_2, rg, checks=[])
    step_virtualharddisk_retrieve(test, rg_2, rg, checks=[])
    step_virtualharddisk_list(test, rg_2, rg, checks=[])
    step_virtualharddisk_list(test, rg_2, rg, checks=[])
    step_virtualharddisk_update(test, rg_2, rg, checks=[])
    step_virtualharddisk_delete(test, rg_2, rg, checks=[])
    step_virtualmachine_create(test, rg_2, rg, checks=[])
    step_virtualmachine_retrieve(test, rg_2, rg, checks=[])
    step_virtualmachine_list(test, rg_2, rg, checks=[])
    step_virtualmachine_list2(test, rg_2, rg, checks=[])
    step_virtualmachine_update(test, rg_2, rg, checks=[])
    step_virtualmachine_start(test, rg_2, rg, checks=[])
    step_virtualmachine_stop(test, rg_2, rg, checks=[])
    step_virtualmachine_delete(test, rg_2, rg, checks=[])
    step_virtualnetwork_create(test, rg_2, rg, checks=[])
    step_virtualnetwork_retrieve(test, rg_2, rg, checks=[])
    step_virtualnetwork_list(test, rg_2, rg, checks=[])
    step_virtualnetwork_list2(test, rg_2, rg, checks=[])
    step_virtualnetwork_update(test, rg_2, rg, checks=[])
    step_virtualnetwork_delete(test, rg_2, rg, checks=[])
    cleanup_scenario(test, rg_2, rg)


# Test class for Scenario
@try_manual
class AzurestackhciScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(AzurestackhciScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myCluster': 'myCluster',
        })


    @ResourceGroupPreparer(name_prefix='clitestazurestackhci_dogfoodarc'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestazurestackhci_test-rg'[:7], key='rg', parameter_name='rg')
    def test_azurestackhci_Scenario(self, rg_2, rg):
        call_scenario(self, rg_2, rg)
        calc_coverage(__file__)
        raise_if()

