# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_account_create
from .example_steps import step_account_show
from .example_steps import step_account_list
from .example_steps import step_account_list2
from .example_steps import step_account_update
from .example_steps import step_data_set_mapping_create
from .example_steps import step_data_set_mapping_list
from .example_steps import step_create
from .example_steps import step_show
from .example_steps import step_list
from .example_steps import step_list_synchronization_detail
from .example_steps import step_list_synchronization
from .example_steps import step_data_set_show
from .example_steps import step_data_set_list
from .example_steps import step_data_set_delete
from .example_steps import step_invitation_create
from .example_steps import step_invitation_show
from .example_steps import step_invitation_list
from .example_steps import step_invitation_delete
from .example_steps import step_provider_share_subscription_show
from .example_steps import step_provider_share_subscription_list
from .example_steps import step_provider_share_subscription_adjust
from .example_steps import step_provider_share_subscription_reinstate
from .example_steps import step_provider_share_subscription_revoke
from .example_steps import step_share_subscription_create
from .example_steps import step_share_subscription_show
from .example_steps import step_share_subscription_list
from .example_steps import step_share_subscription_cancel_synchronization
from .example_steps import step_share_subscription_list2
from .example_steps import step_share_subscription_list3
from .example_steps import step_share_subscription_list_synchronization
from .example_steps import step_share_subscription_synchronize
from .example_steps import step_share_subscription_delete
from .example_steps import step_synchronization_setting_create
from .example_steps import step_synchronization_setting_show
from .example_steps import step_synchronization_setting_list
from .example_steps import step_synchronization_setting_delete
from .example_steps import step_trigger_create
from .example_steps import step_trigger_show
from .example_steps import step_trigger_list
from .example_steps import step_trigger_delete
from .example_steps import step_account_delete
from .example_steps import step_consumer_invitation_show
from .example_steps import step_consumer_invitation_list_invitation
from .example_steps import step_consumer_invitation_reject_invitation
from .example_steps import step_consumer_source_data_set_list
from .example_steps import step_data_set_mapping_show
from .example_steps import step_data_set_mapping_delete
from .example_steps import step_email_registration_activate_email
from .example_steps import step_email_registration_register_email
from .example_steps import step_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_account_create(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myAccount}", case_sensitive=False),
        test.check("resource-group", '{rg}'),
    ])
    step_account_show(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myAccount}", case_sensitive=False),
    ])
    step_account_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_update(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("tags.tag1", "Red", case_sensitive=False),
        test.check("tags.tag2", "White", case_sensitive=False),
        test.check("name", "{myAccount}", case_sensitive=False),
    ])
    step_data_set_mapping_create(test, checks=[
        test.check("name", "{myDataSetMapping}", case_sensitive=False),
    ])
    step_data_set_mapping_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_create(test, checks=[
        test.check("description", "share description", case_sensitive=False),
        test.check("shareKind", "CopyBased", case_sensitive=False),
        test.check("terms", "Confidential", case_sensitive=False),
        test.check("name", "{myShare}", case_sensitive=False),
    ])
    step_show(test, checks=[
        test.check("description", "share description", case_sensitive=False),
        test.check("shareKind", "CopyBased", case_sensitive=False),
        test.check("terms", "Confidential", case_sensitive=False),
        test.check("name", "{myShare}", case_sensitive=False),
    ])
    step_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_list_synchronization_detail(test, checks=[])
    step_list_synchronization(test, checks=[])
    step_data_set_show(test, checks=[])
    step_data_set_list(test, checks=[])
    step_data_set_delete(test, checks=[])
    step_invitation_create(test, checks=[
        test.check("expirationDate", "2020-08-26T22:33:24.5785265Z", case_sensitive=False),
        test.check("targetEmail", "receiver@microsoft.com", case_sensitive=False),
        test.check("name", "{myInvitation}", case_sensitive=False),
    ])
    step_invitation_show(test, checks=[
        test.check("expirationDate", "2020-08-26T22:33:24.5785265Z", case_sensitive=False),
        test.check("targetEmail", "receiver@microsoft.com", case_sensitive=False),
        test.check("name", "{myInvitation}", case_sensitive=False),
    ])
    step_invitation_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_invitation_delete(test, checks=[])
    step_provider_share_subscription_show(test, checks=[])
    step_provider_share_subscription_list(test, checks=[])
    step_provider_share_subscription_adjust(test, checks=[])
    step_provider_share_subscription_reinstate(test, checks=[])
    step_provider_share_subscription_revoke(test, checks=[])
    step_share_subscription_create(test, checks=[
        test.check("expirationDate", "2020-08-26T22:33:24.5785265Z", case_sensitive=False),
        test.check("sourceShareLocation", "eastus2", case_sensitive=False),
        test.check("name", "{myShareSubscription}", case_sensitive=False),
    ])
    step_share_subscription_show(test, checks=[
        test.check("expirationDate", "2020-08-26T22:33:24.5785265Z", case_sensitive=False),
        test.check("sourceShareLocation", "eastus2", case_sensitive=False),
        test.check("name", "{myShareSubscription}", case_sensitive=False),
    ])
    step_share_subscription_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_share_subscription_cancel_synchronization(test, checks=[])
    step_share_subscription_list2(test, checks=[])
    step_share_subscription_list3(test, checks=[])
    step_share_subscription_list_synchronization(test, checks=[])
    step_share_subscription_synchronize(test, checks=[])
    step_share_subscription_delete(test, checks=[])
    step_synchronization_setting_create(test, checks=[])
    step_synchronization_setting_show(test, checks=[])
    step_synchronization_setting_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_synchronization_setting_delete(test, checks=[])
    step_trigger_create(test, checks=[
        test.check("name", "{myTrigger}", case_sensitive=False),
    ])
    step_trigger_show(test, checks=[
        test.check("name", "{myTrigger}", case_sensitive=False),
    ])
    step_trigger_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_trigger_delete(test, checks=[])
    step_account_delete(test, checks=[])
    step_consumer_invitation_show(test, checks=[])
    step_consumer_invitation_list_invitation(test, checks=[])
    step_consumer_invitation_reject_invitation(test, checks=[])
    step_consumer_source_data_set_list(test, checks=[])
    step_data_set_mapping_show(test, checks=[
        test.check("name", "{myDataSetMapping}", case_sensitive=False),
    ])
    step_data_set_mapping_delete(test, checks=[])
    step_email_registration_activate_email(test, checks=[])
    step_email_registration_register_email(test, checks=[])
    step_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class DatashareScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(DatashareScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myAccount': 'cli_test_account',
            'myShare': 'Share1',
            'myShareSubscription': 'ShareSubscription1',
            'myShareSubscription2': 'ShareSub1',
            'myShareSubscription3': 'Share1',
            'mySynchronizationSetting': 'SynchronizationSetting1',
            'mySynchronizationSetting2': 'Dataset1',
            'myTrigger': 'Trigger1',
            'myDataSet': 'Dataset1',
            'myDataSetMapping': 'DatasetMapping1',
            'myInvitation': 'Invitation1',
        })

    @ResourceGroupPreparer(name_prefix='clitestdatashare_TestResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_datashare_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
