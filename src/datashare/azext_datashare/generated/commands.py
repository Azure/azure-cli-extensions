# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_datashare.generated._client_factory import (
    cf_account,
    cf_consumer_invitation,
    cf_data_set,
    cf_data_set_mapping,
    cf_email_registration,
    cf_invitation,
    cf_share,
    cf_provider_share_subscription,
    cf_share_subscription,
    cf_consumer_source_data_set,
    cf_synchronization_setting,
    cf_trigger,
)


datashare_share = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._shares_operations#SharesOperations.{}',
    client_factory=cf_share,
)


datashare_account = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._accounts_operations#AccountsOperations.{}',
    client_factory=cf_account,
)


datashare_consumer_invitation = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._consumer_invitations_operations#ConsumerInvitationsOperations.{}',
    client_factory=cf_consumer_invitation,
)


datashare_consumer_source_data_set = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._consumer_source_data_sets_operations#ConsumerSourceDataSetsOperations.{}',
    client_factory=cf_consumer_source_data_set,
)


datashare_data_set = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._data_sets_operations#DataSetsOperations.{}',
    client_factory=cf_data_set,
)


datashare_data_set_mapping = CliCommandType(
    operations_tmpl=(
        'azext_datashare.vendored_sdks.datashare.operations._data_set_mappings_operations#DataSetMappingsOperations.{}'
    ),
    client_factory=cf_data_set_mapping,
)


datashare_email_registration = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._email_registrations_operations#EmailRegistrationsOperations.{}',
    client_factory=cf_email_registration,
)


datashare_invitation = CliCommandType(
    operations_tmpl=(
        'azext_datashare.vendored_sdks.datashare.operations._invitations_operations#InvitationsOperations.{}'
    ),
    client_factory=cf_invitation,
)


datashare_provider_share_subscription = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._provider_share_subscriptions_operations#ProviderShareSubscriptionsOperations.{}',
    client_factory=cf_provider_share_subscription,
)


datashare_share_subscription = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._share_subscriptions_operations#ShareSubscriptionsOperations.{}',
    client_factory=cf_share_subscription,
)


datashare_synchronization_setting = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._synchronization_settings_operations#SynchronizationSettingsOperations.{}',
    client_factory=cf_synchronization_setting,
)


datashare_trigger = CliCommandType(
    operations_tmpl='azext_datashare.vendored_sdks.datashare.operations._triggers_operations#TriggersOperations.{}',
    client_factory=cf_trigger,
)


def load_command_table(self, _):

    with self.command_group('datashare', datashare_share, client_factory=cf_share, is_experimental=True) as g:
        g.custom_command('list', 'datashare_list')
        g.custom_show_command('show', 'datashare_show')
        g.custom_command('create', 'datashare_create')
        g.custom_command('delete', 'datashare_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-synchronization', 'datashare_list_synchronization')
        g.custom_command('list-synchronization-detail', 'datashare_list_synchronization_detail')
        g.custom_wait_command('wait', 'datashare_show')

    with self.command_group('datashare account', datashare_account, client_factory=cf_account) as g:
        g.custom_command('list', 'datashare_account_list')
        g.custom_show_command('show', 'datashare_account_show')
        g.custom_command('create', 'datashare_account_create', supports_no_wait=True)
        g.custom_command('update', 'datashare_account_update')
        g.custom_command('delete', 'datashare_account_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_account_show')

    with self.command_group(
        'datashare consumer-invitation', datashare_consumer_invitation, client_factory=cf_consumer_invitation
    ) as g:
        g.custom_show_command('show', 'datashare_consumer_invitation_show')
        g.custom_command('list-invitation', 'datashare_consumer_invitation_list_invitation')
        g.custom_command('reject-invitation', 'datashare_consumer_invitation_reject_invitation')

    with self.command_group(
        'datashare consumer-source-data-set',
        datashare_consumer_source_data_set,
        client_factory=cf_consumer_source_data_set,
    ) as g:
        g.custom_command('list', 'datashare_consumer_source_data_set_list')

    with self.command_group('datashare data-set', datashare_data_set, client_factory=cf_data_set) as g:
        g.custom_command('list', 'datashare_data_set_list')
        g.custom_show_command('show', 'datashare_data_set_show')
        g.custom_command('create', 'datashare_data_set_create')
        g.custom_command('delete', 'datashare_data_set_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_data_set_show')

    with self.command_group(
        'datashare data-set-mapping', datashare_data_set_mapping, client_factory=cf_data_set_mapping
    ) as g:
        g.custom_command('list', 'datashare_data_set_mapping_list')
        g.custom_show_command('show', 'datashare_data_set_mapping_show')
        g.custom_command('create', 'datashare_data_set_mapping_create')
        g.custom_command('delete', 'datashare_data_set_mapping_delete', confirmation=True)

    with self.command_group(
        'datashare email-registration', datashare_email_registration, client_factory=cf_email_registration
    ) as g:
        g.custom_command('activate-email', 'datashare_email_registration_activate_email')
        g.custom_command('register-email', 'datashare_email_registration_register_email')

    with self.command_group('datashare invitation', datashare_invitation, client_factory=cf_invitation) as g:
        g.custom_command('list', 'datashare_invitation_list')
        g.custom_show_command('show', 'datashare_invitation_show')
        g.custom_command('create', 'datashare_invitation_create')
        g.custom_command('delete', 'datashare_invitation_delete', confirmation=True)

    with self.command_group(
        'datashare provider-share-subscription',
        datashare_provider_share_subscription,
        client_factory=cf_provider_share_subscription,
    ) as g:
        g.custom_command('list', 'datashare_provider_share_subscription_list')
        g.custom_show_command('show', 'datashare_provider_share_subscription_show')
        g.custom_command('adjust', 'datashare_provider_share_subscription_adjust')
        g.custom_command('reinstate', 'datashare_provider_share_subscription_reinstate')
        g.custom_command('revoke', 'datashare_provider_share_subscription_revoke', supports_no_wait=True)
        g.custom_wait_command('wait', 'datashare_provider_share_subscription_show')

    with self.command_group(
        'datashare share-subscription', datashare_share_subscription, client_factory=cf_share_subscription
    ) as g:
        g.custom_command('list', 'datashare_share_subscription_list')
        g.custom_show_command('show', 'datashare_share_subscription_show')
        g.custom_command('create', 'datashare_share_subscription_create')
        g.custom_command('delete', 'datashare_share_subscription_delete', supports_no_wait=True, confirmation=True)
        g.custom_command(
            'cancel-synchronization', 'datashare_share_subscription_cancel_synchronization', supports_no_wait=True
        )
        g.custom_command(
            'list-source-share-synchronization-setting',
            'datashare_share_subscription_list_source_share_synchronization_setting',
        )
        g.custom_command('list-synchronization', 'datashare_share_subscription_list_synchronization')
        g.custom_command('list-synchronization-detail', 'datashare_share_subscription_list_synchronization_detail')
        g.custom_command('synchronize', 'datashare_share_subscription_synchronize', supports_no_wait=True)
        g.custom_wait_command('wait', 'datashare_share_subscription_show')

    with self.command_group(
        'datashare synchronization-setting',
        datashare_synchronization_setting,
        client_factory=cf_synchronization_setting,
    ) as g:
        g.custom_command('list', 'datashare_synchronization_setting_list')
        g.custom_show_command('show', 'datashare_synchronization_setting_show')
        g.custom_command('create', 'datashare_synchronization_setting_create')
        g.custom_command('delete', 'datashare_synchronization_setting_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_synchronization_setting_show')

    with self.command_group('datashare trigger', datashare_trigger, client_factory=cf_trigger) as g:
        g.custom_command('list', 'datashare_trigger_list')
        g.custom_show_command('show', 'datashare_trigger_show')
        g.custom_command('create', 'datashare_trigger_create', supports_no_wait=True)
        g.custom_command('delete', 'datashare_trigger_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'datashare_trigger_show')
