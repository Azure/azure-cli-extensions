# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from knack.util import CLIError
from collections import defaultdict


class AddADLSGen1FileDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen1_file_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'account-name':
                d['account_name'] = v[0]
            elif kl == 'file-name':
                d['file_name'] = v[0]
            elif kl == 'folder-path':
                d['folder_path'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen1File'
        return d


class AddADLSGen1FolderDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen1_folder_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'account-name':
                d['account_name'] = v[0]
            elif kl == 'folder-path':
                d['folder_path'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen1Folder'
        return d


class AddADLSGen2FileDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_file_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2File'
        return d


class AddADLSGen2FileSystemDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_file_system_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2FileSystem'
        return d


class AddADLSGen2FolderDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_folder_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'folder-path':
                d['folder_path'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2Folder'
        return d


class AddBlobContainerDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_container_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'Container'
        return d


class AddBlobDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'Blob'
        return d


class AddBlobFolderDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_folder_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'prefix':
                d['prefix'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'BlobFolder'
        return d


class AddKustoClusterDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.kusto_cluster_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'kusto-cluster-resource-id':
                d['kusto_cluster_resource_id'] = v[0]
        d['kind'] = 'KustoCluster'
        return d


class AddKustoDatabaseDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.kusto_database_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'kusto-database-resource-id':
                d['kusto_database_resource_id'] = v[0]
        d['kind'] = 'KustoDatabase'
        return d


class AddSqlDBTableDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sql_d_b_table_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'database-name':
                d['database_name'] = v[0]
            elif kl == 'schema-name':
                d['schema_name'] = v[0]
            elif kl == 'sql-server-resource-id':
                d['sql_server_resource_id'] = v[0]
            elif kl == 'table-name':
                d['table_name'] = v[0]
        d['kind'] = 'SqlDBTable'
        return d


class AddSqlDWTableDataSet(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sql_d_w_table_data_set = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-warehouse-name':
                d['data_warehouse_name'] = v[0]
            elif kl == 'schema-name':
                d['schema_name'] = v[0]
            elif kl == 'sql-server-resource-id':
                d['sql_server_resource_id'] = v[0]
            elif kl == 'table-name':
                d['table_name'] = v[0]
        d['kind'] = 'SqlDWTable'
        return d


class AddADLSGen2FileDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_file_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'output-type':
                d['output_type'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2File'
        return d


class AddADLSGen2FileSystemDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_file_system_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2FileSystem'
        return d


class AddADLSGen2FolderDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.a_d_l_s_gen2_folder_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'file-system':
                d['file_system'] = v[0]
            elif kl == 'folder-path':
                d['folder_path'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'AdlsGen2Folder'
        return d


class AddBlobContainerDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_container_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'Container'
        return d


class AddBlobDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'file-path':
                d['file_path'] = v[0]
            elif kl == 'output-type':
                d['output_type'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'Blob'
        return d


class AddBlobFolderDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.blob_folder_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'container-name':
                d['container_name'] = v[0]
            elif kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'prefix':
                d['prefix'] = v[0]
            elif kl == 'resource-group':
                d['resource_group'] = v[0]
            elif kl == 'storage-account-name':
                d['storage_account_name'] = v[0]
            elif kl == 'subscription-id':
                d['subscription_id'] = v[0]
        d['kind'] = 'BlobFolder'
        return d


class AddKustoClusterDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.kusto_cluster_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'kusto-cluster-resource-id':
                d['kusto_cluster_resource_id'] = v[0]
        d['kind'] = 'KustoCluster'
        return d


class AddKustoDatabaseDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.kusto_database_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'kusto-cluster-resource-id':
                d['kusto_cluster_resource_id'] = v[0]
        d['kind'] = 'KustoDatabase'
        return d


class AddSqlDBTableDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sql_d_b_table_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'database-name':
                d['database_name'] = v[0]
            elif kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'schema-name':
                d['schema_name'] = v[0]
            elif kl == 'sql-server-resource-id':
                d['sql_server_resource_id'] = v[0]
            elif kl == 'table-name':
                d['table_name'] = v[0]
        d['kind'] = 'SqlDBTable'
        return d


class AddSqlDWTableDataSetMapping(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sql_d_w_table_data_set_mapping = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'data-set-id':
                d['data_set_id'] = v[0]
            elif kl == 'data-warehouse-name':
                d['data_warehouse_name'] = v[0]
            elif kl == 'schema-name':
                d['schema_name'] = v[0]
            elif kl == 'sql-server-resource-id':
                d['sql_server_resource_id'] = v[0]
            elif kl == 'table-name':
                d['table_name'] = v[0]
        d['kind'] = 'SqlDWTable'
        return d


class AddScheduledSynchronizationSetting(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.scheduled_synchronization_setting = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'recurrence-interval':
                d['recurrence_interval'] = v[0]
            elif kl == 'synchronization-time':
                d['synchronization_time'] = v[0]
        d['kind'] = 'ScheduleBased'
        return d


class AddScheduledTrigger(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.scheduled_trigger = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'recurrence-interval':
                d['recurrence_interval'] = v[0]
            elif kl == 'synchronization-mode':
                d['synchronization_mode'] = v[0]
            elif kl == 'synchronization-time':
                d['synchronization_time'] = v[0]
        d['kind'] = 'ScheduleBased'
        return d
