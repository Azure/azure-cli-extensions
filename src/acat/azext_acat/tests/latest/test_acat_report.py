# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
import os.path

class AcatReportScenario(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(AcatReportScenario, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'report_name_create': 'CLI_test_report_create',
            'report_name_update': 'CLI_test_report_update',
            'report_name_delete': 'CLI_test_report_delete',
            'report_name_snapshot': 'Demo',
            'report_name_no_snapshot': 'CLI_test_report_no_snapshot',
            'offer_guid': 'b8a0a0a0-0000-0000-0000-000000000000',
            'resources': '[{"resource-id":"/subscriptions/f744fbde-a95f-437e-8fcf-38f9324e3d9c/resourceGroups/HQTESTRG/providers/Microsoft.Compute/disks/hqtestvm_OsDisk_1_90a1250135fa4cbca9b99f553b80fa08"}]'
        })

    @AllowLargeResponse()
    def test_list_report(self):
        # acat report list
        report_list = self.cmd('acat report list').get_output_in_json()
        assert(len(report_list) > 0)

    def test_create_report(self):
        # acat report create
        report = self.cmd(
            'acat report create --report-name {report_name_create} --resources {resources}  --time-zone "UTC"    --trigger-time "2021-09-01T00:00:00Z"')
        assert(report.get_output_in_json()[
               'name'] == self.kwargs['report_name_create'])
        report = self.cmd(
            'acat report show --report-name {report_name_create}')
        assert(report.get_output_in_json()[
               'name'] == self.kwargs['report_name_create'])
        self.cmd('acat report delete --report-name {report_name_create} --yes')

    def test_update_report(self):
        # acat report update
        report = self.cmd(
            'acat report create --report-name {report_name_update} --resources {resources} --time-zone "UTC"    --trigger-time "2021-09-01T00:00:00Z"')
        assert(report.get_output_in_json()['name'] == self.kwargs['report_name_update'])
        report = self.cmd(
            'acat report update --report-name {report_name_update} --offer-guid {offer_guid}')
        assert(report.get_output_in_json()['offerGuid'] == self.kwargs['offer_guid'])
        self.cmd('acat report delete --report-name {report_name_update} --yes')

    def test_delete_report(self):
        # # acat report delete
        report = self.cmd(
            'acat report create --report-name {report_name_delete} --resources {resources} --time-zone "UTC"    --trigger-time "2021-09-01T00:00:00Z"')
        assert(report.get_output_in_json()[
               'name'] == self.kwargs["report_name_delete"])
        self.cmd('acat report delete --report-name {report_name_delete} --yes')
        self.cmd(
            'acat report show --report-name {report_name_delete}', expect_failure=True)

    @AllowLargeResponse()
    def test_download_report(self):
        # acat report download
        # prepare a report with a snapshot before running this case
        report = self.cmd(
            'acat report show --report-name {report_name_snapshot}')
        assert(report.get_output_in_json()['lastTriggerTime'] != None)
        ret=self.cmd(
            'acat report download --report-name {report_name_snapshot} --download-type "CompliancePdfReport"')
        #  assest the downloaded file exists
        assert(os.path.isfile(ret.output[20:-2]))

        report = self.cmd(
            'acat report show --report-name {report_name_snapshot}')
        assert(report.get_output_in_json()['lastTriggerTime'] != None)
        ret=self.cmd(
            'acat report download --report-name {report_name_snapshot} --download-type "ComplianceReport"')
        #  assest the downloaded file exists
        assert(os.path.isfile(ret.output[20:-2]))

        report = self.cmd(
            'acat report show --report-name {report_name_snapshot}')
        assert(report.get_output_in_json()['lastTriggerTime'] != None)
        ret=self.cmd(
            'acat report download --report-name {report_name_snapshot} --download-type "ResourceList"')
        #  assest the downloaded file exists
        assert(os.path.isfile(ret.output[20:-2]))

    @AllowLargeResponse()
    def test_get_control_assessments(self):
        # prepare a report with a snapshot before running this case
        report = self.cmd(
            'acat report show --report-name {report_name_snapshot}')
        assert(report.get_output_in_json()['lastTriggerTime'] != None)
        ret=self.cmd(
            'acat report get-control-assessments --report-name {report_name_snapshot}')
        output = ret.get_output_in_json()[0]["complianceResults"][0]["categories"]
        assert(output != None)
        assert(len(output) ==2)
        assert(output[0]['controlFamilies'] != None)
        assert(len(output[0]['controlFamilies']) ==13)
        assert(output[1]['controlFamilies'] != None)
        assert(len(output[1]['controlFamilies']) ==7)

    @AllowLargeResponse()
    def test_get_control_assessments_no_snapshot(self):
        report = self.cmd(
            'acat report create --report-name {report_name_no_snapshot} --resources {resources}  --time-zone "UTC"    --trigger-time "2021-09-01T00:00:00Z"')
        assert(report.get_output_in_json().get('lastTriggerTime',None) == None)
        self.cmd(
            'acat report get-control-assessments --report-name {report_name_no_snapshot}', expect_failure=True)
        self.cmd('acat report delete --report-name {report_name_no_snapshot} --yes')
