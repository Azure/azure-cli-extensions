# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
from azure.cli.testsdk.scenario_tests import AllowLargeResponse


class AcatReportScenario(ScenarioTest):

    # @ResourceGroupPreparer()
    # @StorageAccountPreparer()
    # def test_list_storage_accounts(self, storage_account):
    #     accounts = self.cmd('az storage account list').get_output_in_json()
    #     search = [account for account in accounts if account['name']
    #               == storage_account]
    #     assert len(search) == 1

    def __init__(self, *args, **kwargs):
        super(AcatReportScenario, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'report_name_webhook': 'DoNotDelete-ExistingReportTesting-PROD',
            'webhook_name_create': 'CLI_test_webhook_create',
            'webhook_name_update': 'CLI_test_webhook_update',
            'webhook_name_delete': 'CLI_test_webhook_delete',
            'resources': '[{"resource-id":"/subscriptions/25d4753f-341d-4ce7-8641-646cf928294c/resourceGroups/HQTESTRG/providers/Microsoft.Compute/disks/hqtestvm_OsDisk_1_90a1250135fa4cbca9b99f553b80fa08"}]'
        })


    def test_create_webhook(self):
        # acat report create
        webhook = self.cmd(
            'acat report webhook create --report-name {report_name_webhook} --webhook-name {webhook_name_create} --payload-url https://CLI-test')
        assert(webhook.get_output_in_json()[
               'name'] == self.kwargs['webhook_name_create'])
        webhook_list = self.cmd('acat report webhook list --report-name {report_name_webhook}').get_output_in_json()
        assert(len(webhook_list) > 0)
        webhook = self.cmd(
            'acat report webhook show --report-name {report_name_webhook} --webhook-name {webhook_name_create}')
        assert(webhook.get_output_in_json()[
               'name'] == self.kwargs['webhook_name_create'])
        self.cmd(
            'acat report webhook delete --report-name {report_name_webhook} --webhook-name {webhook_name_create} --yes')

    def test_update_webhook(self):
        # Arrange
        webhook = self.cmd(
            'acat report webhook create --report-name {report_name_webhook} --webhook-name {webhook_name_update} --payload-url https://CLI-test')

        # Act
        assert(webhook.get_output_in_json()[
               'name'] == self.kwargs['webhook_name_update'])
        assert(webhook.get_output_in_json()['payloadUrl'] == "https://CLI-test")
        webhook = self.cmd(
            'acat report webhook update --report-name {report_name_webhook} --webhook-name {webhook_name_update} --trigger-mode customize --events ["report_deletion"] --payload-url https://CLI-test-update')

        # Assert
        assert(webhook.get_output_in_json()['sendAllEvents'] == "false")
        assert(webhook.get_output_in_json()['events'][0] == "report_deletion")
        assert(webhook.get_output_in_json()['payloadUrl'] == "https://CLI-test-update")
        self.cmd(
            'acat report webhook delete --report-name {report_name_webhook} --webhook-name {webhook_name_update} --yes')

    def test_delete_webhook(self):
        # # acat report webhook delete
        webhook = self.cmd(
            'acat report webhook create --report-name {report_name_webhook} --webhook-name {webhook_name_delete} --payload-url https://CLI-test')
        assert(webhook.get_output_in_json()[
               'name'] == self.kwargs["webhook_name_delete"])
        self.cmd(
            'acat report webhook delete --report-name {report_name_webhook} --webhook-name {webhook_name_delete} --yes')
        self.cmd(
            'acat report webhook show --report-name {report_name_webhook} --webhook-name {webhook_name_delete}', expect_failure=True)
