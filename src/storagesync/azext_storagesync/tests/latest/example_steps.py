# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /StorageSyncServices/put/StorageSyncServices_Create
@try_manual
def step_storage_sync_service_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service create '
             '--location "WestUS" '
             '--incoming-traffic-policy "AllowAllTraffic" '
             '--resource-group "{rg}" '
             '--name "{myStorageSyncService}"',
             checks=[])
    test.cmd('az storagesync storage-sync-service wait --created '
             '--resource-group "{rg}" '
             '--name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /StorageSyncServices/get/StorageSyncServices_Get
@try_manual
def step_storage_sync_service_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service show '
             '--resource-group "{rg}" '
             '--name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /StorageSyncServices/get/StorageSyncServices_ListByResourceGroup
@try_manual
def step_storage_sync_service_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /StorageSyncServices/get/StorageSyncServices_ListBySubscription
@try_manual
def step_storage_sync_service_list2(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service list '
             '-g ""',
             checks=checks)


# EXAMPLE: /StorageSyncServices/patch/StorageSyncServices_Update
@try_manual
def step_storage_sync_service_update(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service update '
             '--incoming-traffic-policy "AllowAllTraffic" '
             '--tags Dept="IT" Environment="Test" '
             '--resource-group "{rg}" '
             '--name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/put/CloudEndpoints_Create
@try_manual
def step_cloud_endpoint_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint create '
             '--name "{myCloudEndpoint}" '
             '--azure-file-share-name "cvcloud-afscv-0719-058-a94a1354-a1fd-4e9a-9a50-919fad8c4ba4" '
             '--friendly-name "ankushbsubscriptionmgmtmab" '
             '--storage-account-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft'
             '.Storage/storageAccounts/{sa}" '
             '--storage-account-tenant-id "\\"72f988bf-86f1-41af-91ab-2d7cd011db47\\"" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=[])
    test.cmd('az storagesync cloud-endpoint wait --created '
             '--name "{myCloudEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/get/CloudEndpoints_Get
@try_manual
def step_cloud_endpoint_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint show '
             '--name "{myCloudEndpoint}" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/get/CloudEndpoints_ListBySyncGroup
@try_manual
def step_cloud_endpoint_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint list '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_PostBackup
@try_manual
def step_cloud_endpoint_post_backup(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint post-backup '
             '--name "{myCloudEndpoint}" '
             '--azure-file-share "https://sampleserver.file.core.test-cint.azure-test.net/sampleFileShare" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_PostRestore
@try_manual
def step_cloud_endpoint_post_restore(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint post-restore '
             '--name "{myCloudEndpoint}" '
             '--azure-file-share-uri "https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFileShare'
             '" '
             '--restore-file-spec path="text1.txt" isdir=false '
             '--restore-file-spec path="MyDir" isdir=true '
             '--restore-file-spec path="MyDir/SubDir" isdir=false '
             '--restore-file-spec path="MyDir/SubDir/File1.pdf" isdir=false '
             '--source-azure-file-share-uri "https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFi'
             'leShare" '
             '--status "Succeeded" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_PreBackup
@try_manual
def step_cloud_endpoint_pre_backup(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint pre-backup '
             '--name "{myCloudEndpoint}" '
             '--azure-file-share "https://sampleserver.file.core.test-cint.azure-test.net/sampleFileShare" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_PreRestore
@try_manual
def step_cloud_endpoint_pre_restore(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint pre-restore '
             '--name "{myCloudEndpoint}" '
             '--azure-file-share-uri "https://hfsazbackupdevintncus2.file.core.test-cint.azure-test.net/sampleFileShare'
             '" '
             '--restore-file-spec path="text1.txt" isdir=false '
             '--restore-file-spec path="MyDir" isdir=true '
             '--restore-file-spec path="MyDir/SubDir" isdir=false '
             '--restore-file-spec path="MyDir/SubDir/File1.pdf" isdir=false '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_restoreheartbeat
@try_manual
def step_cloud_endpoint_restoreheartbeat(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint restoreheartbeat '
             '--name "{myCloudEndpoint}" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/post/CloudEndpoints_TriggerChangeDetection
@try_manual
def step_cloud_endpoint_trigger_change_detection(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint trigger-change-detection '
             '--name "{myCloudEndpoint}" '
             '--change-detection-mode "Recursive" '
             '--directory-path "NewDirectory" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /CloudEndpoints/delete/CloudEndpoints_Delete
@try_manual
def step_cloud_endpoint_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync cloud-endpoint delete -y '
             '--name "{myCloudEndpoint}" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /OperationStatus/get/Workflows_Get
@try_manual
def step_operation_status_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync operation-status show '
             '--operation-id "14b50e24-f68d-4b29-a882-38be9dfb8bd1" '
             '--location-name "westus" '
             '--resource-group "{rg}" '
             '--workflow-id "828219ea-083e-48b5-89ea-8fd9991b2e75"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/put/PrivateEndpointConnections_Create
@try_manual
def step_private_endpoint_connection_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync private-endpoint-connection create '
             '--name "{myPrivateEndpointConnection}" '
             '--private-link-service-connection-state description="Auto-Approved" status="Approved" '
             '--resource-group "{rg_3}" '
             '--storage-sync-service-name "{myStorageSyncService2}"',
             checks=[])
    test.cmd('az storagesync private-endpoint-connection wait --created '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_3}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/PrivateEndpointConnections_Get
@try_manual
def step_private_endpoint_connection_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync private-endpoint-connection show '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_2}" '
             '--storage-sync-service-name "{myStorageSyncService2}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/PrivateEndpointConnections_ListByStorageSyncService
@try_manual
def step_private_endpoint_connection_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync private-endpoint-connection list '
             '--resource-group "{rg_2}" '
             '--storage-sync-service-name "{myStorageSyncService2}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/delete/PrivateEndpointConnections_Delete
@try_manual
def step_private_endpoint_connection_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync private-endpoint-connection delete -y '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_2}" '
             '--storage-sync-service-name "{myStorageSyncService2}"',
             checks=checks)


# EXAMPLE: /PrivateLinkResources/get/PrivateLinkResources_List
@try_manual
def step_private_link_resource_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync private-link-resource list '
             '--resource-group "{rg_2}" '
             '--storage-sync-service-name "{myStorageSyncService2}"',
             checks=checks)


# EXAMPLE: /RegisteredServers/put/RegisteredServers_Create
@try_manual
def step_registered_server_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync registered-server create '
             '--agent-version "1.0.277.0" '
             '--friendly-name "afscv-2304-139" '
             '--server-certificate "MIIDFjCCAf6gAwIBAgIQQS+DS8uhc4VNzUkTw7wbRjANBgkqhkiG9w0BAQ0FADAzMTEwLwYDVQQDEyhhbmt'
             '1c2hiLXByb2QzLnJlZG1vbmQuY29ycC5taWNyb3NvZnQuY29tMB4XDTE3MDgwMzE3MDQyNFoXDTE4MDgwNDE3MDQyNFowMzExMC8GA1UE'
             'AxMoYW5rdXNoYi1wcm9kMy5yZWRtb25kLmNvcnAubWljcm9zb2Z0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALDRv'
             'V4gmsIy6jGDPiHsXmvgVP749NNP7DopdlbHaNhjFmYINHl0uWylyaZmgJrROt2mnxN/zEyJtGnqYHlzUr4xvGq/qV5pqgdB9tag/sw9i2'
             '2gfe9PRZ0FmSOZnXMbLYgLiDFqLtut5gHcOuWMj03YnkfoBEKlFBxWbagvW2yxz/Sxi9OVSJOKCaXra0RpcIHrO/KFl6ho2eE1/7Ykmfa'
             '8hZvSdoPd5gHdLiQcMB/pxq+mWp1fI6c8vFZoDu7Atn+NXTzYPKUxKzaisF12TsaKpohUsJpbB3Wocb0F5frn614D2pg14ERB5otjAMWw'
             '1m65csQWPI6dP8KIYe0+QPkCAwEAAaMmMCQwIgYDVR0lAQH/BBgwFgYIKwYBBQUHAwIGCisGAQQBgjcKAwwwDQYJKoZIhvcNAQENBQADg'
             'gEBAA4RhVIBkw34M1RwakJgHvtjsOFxF1tVQA941NtLokx1l2Z8+GFQkcG4xpZSt+UN6wLerdCbnNhtkCErWUDeaT0jxk4g71Ofex7iM0'
             '4crT4iHJr8mi96/XnhnkTUs+GDk12VgdeeNEczMZz+8Mxw9dJ5NCnYgTwO0SzGlclRsDvjzkLo8rh2ZG6n/jKrEyNXXo+hOqhupij0QbR'
             'P2Tvexdfw201kgN1jdZify8XzJ8Oi0bTS0KpJf2pNPOlooK2bjMUei9ANtEdXwwfVZGWvVh6tJjdv6k14wWWJ1L7zhA1IIVb1J+sQUzJj'
             'i5iX0DrezjTz1Fg+gAzITaA/WsuujlM=" '
             '--registered-server-create-parameters-properties-server-id "{myRegisteredServer}" '
             '--server-os-version "10.0.14393.0" '
             '--server-role "Standalone" '
             '--resource-group "{rg}" '
             '--server-id "{myRegisteredServer}" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /RegisteredServers/get/RegisteredServers_Get
@try_manual
def step_registered_server_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync registered-server show '
             '--resource-group "{rg}" '
             '--server-id "{myRegisteredServer}" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /RegisteredServers/get/RegisteredServers_ListByStorageSyncService
@try_manual
def step_registered_server_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync registered-server list '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /RegisteredServers/post/RegisteredServers_triggerRollover
@try_manual
def step_registered_server_trigger_rollover(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync registered-server trigger-rollover '
             '--server-certificate "\\"MIIDFjCCAf6gAwIBAgIQQS+DS8uhc4VNzUkTw7wbRjANBgkqhkiG9w0BAQ0FADAzMTEwLwYDVQQDEyhh'
             'bmt1c2hiLXByb2QzLnJlZG1vbmQuY29ycC5taWNyb3NvZnQuY29tMB4XDTE3MDgwMzE3MDQyNFoXDTE4MDgwNDE3MDQyNFowMzExMC8GA'
             '1UEAxMoYW5rdXNoYi1wcm9kMy5yZWRtb25kLmNvcnAubWljcm9zb2Z0LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAL'
             'DRvV4gmsIy6jGDPiHsXmvgVP749NNP7DopdlbHaNhjFmYINHl0uWylyaZmgJrROt2mnxN/zEyJtGnqYHlzUr4xvGq/qV5pqgdB9tag/sw'
             '9i22gfe9PRZ0FmSOZnXMbLYgLiDFqLtut5gHcOuWMj03YnkfoBEKlFBxWbagvW2yxz/Sxi9OVSJOKCaXra0RpcIHrO/KFl6ho2eE1/7Yk'
             'mfa8hZvSdoPd5gHdLiQcMB/pxq+mWp1fI6c8vFZoDu7Atn+NXTzYPKUxKzaisF12TsaKpohUsJpbB3Wocb0F5frn614D2pg14ERB5otjA'
             'MWw1m65csQWPI6dP8KIYe0+QPkCAwEAAaMmMCQwIgYDVR0lAQH/BBgwFgYIKwYBBQUHAwIGCisGAQQBgjcKAwwwDQYJKoZIhvcNAQENBQ'
             'ADggEBAA4RhVIBkw34M1RwakJgHvtjsOFxF1tVQA941NtLokx1l2Z8+GFQkcG4xpZSt+UN6wLerdCbnNhtkCErWUDeaT0jxk4g71Ofex7'
             'iM04crT4iHJr8mi96/XnhnkTUs+GDk12VgdeeNEczMZz+8Mxw9dJ5NCnYgTwO0SzGlclRsDvjzkLo8rh2ZG6n/jKrEyNXXo+hOqhupij0'
             'QbRP2Tvexdfw201kgN1jdZify8XzJ8Oi0bTS0KpJf2pNPOlooK2bjMUei9ANtEdXwwfVZGWvVh6tJjdv6k14wWWJ1L7zhA1IIVb1J+sQU'
             'zJji5iX0DrezjTz1Fg+gAzITaA/WsuujlM=\\"" '
             '--resource-group "{rg}" '
             '--server-id "d166ca76-dad2-49df-b409-12345642d730" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /RegisteredServers/delete/RegisteredServers_Delete
@try_manual
def step_registered_server_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync registered-server delete -y '
             '--resource-group "{rg}" '
             '--server-id "41166691-ab03-43e9-ab3e-0330eda162ac" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /SyncGroups/put/SyncGroups_Create
@try_manual
def step_sync_group_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync sync-group create '
             '--properties "{{}}" '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /SyncGroups/get/SyncGroups_Get
@try_manual
def step_sync_group_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync sync-group show '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /SyncGroups/get/SyncGroups_ListByStorageSyncService
@try_manual
def step_sync_group_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync sync-group list '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/put/ServerEndpoints_Create
@try_manual
def step_server_endpoint_create(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint create '
             '--cloud-tiering "off" '
             '--initial-download-policy "NamespaceThenModifiedFiles" '
             '--initial-upload-policy "ServerAuthoritative" '
             '--local-cache-mode "UpdateLocallyCachedFiles" '
             '--offline-data-transfer "on" '
             '--offline-data-transfer-share-name "myfileshare" '
             '--server-local-path "D:\\\\SampleServerEndpoint_1" '
             '--server-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.StorageSyn'
             'c/storageSyncServices/{myStorageSyncService}/registeredServers/{myRegisteredServer}" '
             '--tier-files-older-than-days 0 '
             '--volume-free-space-percent 100 '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=[])
    test.cmd('az storagesync server-endpoint wait --created '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/get/ServerEndpoints_Get
@try_manual
def step_server_endpoint_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint show '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/get/ServerEndpoints_ListBySyncGroup
@try_manual
def step_server_endpoint_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint list '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/patch/ServerEndpoints_Update
@try_manual
def step_server_endpoint_update(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint update '
             '--cloud-tiering "off" '
             '--local-cache-mode "UpdateLocallyCachedFiles" '
             '--offline-data-transfer "off" '
             '--tier-files-older-than-days 0 '
             '--volume-free-space-percent 100 '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/post/ServerEndpoints_recallAction
@try_manual
def step_server_endpoint_recall_action(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint recall-action '
             '--pattern "" '
             '--recall-path "" '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /ServerEndpoints/delete/ServerEndpoints_Delete
@try_manual
def step_server_endpoint_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync server-endpoint delete -y '
             '--resource-group "{rg}" '
             '--name "{myServerEndpoint}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--sync-group-name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /SyncGroups/delete/SyncGroups_Delete
@try_manual
def step_sync_group_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync sync-group delete -y '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--name "{mySyncGroup}"',
             checks=checks)


# EXAMPLE: /Workflows/get/Workflows_Get
@try_manual
def step_workflow_show(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync workflow show '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--workflow-id "828219ea-083e-48b5-89ea-8fd9991b2e75"',
             checks=checks)


# EXAMPLE: /Workflows/get/Workflows_ListByStorageSyncService
@try_manual
def step_workflow_list(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync workflow list '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}"',
             checks=checks)


# EXAMPLE: /Workflows/post/Workflows_Abort
@try_manual
def step_workflow_abort(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync workflow abort '
             '--resource-group "{rg}" '
             '--storage-sync-service-name "{myStorageSyncService}" '
             '--workflow-id "7ffd50b3-5574-478d-9ff2-9371bc42ce68"',
             checks=checks)


# EXAMPLE: /StorageSyncServices/delete/StorageSyncServices_Delete
@try_manual
def step_storage_sync_service_delete(test, rg_4, rg, rg_2, rg_3, checks=None):
    if checks is None:
        checks = []
    test.cmd('az storagesync storage-sync-service delete -y '
             '--resource-group "{rg}" '
             '--name "{myStorageSyncService}"',
             checks=checks)

