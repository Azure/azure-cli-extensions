# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import StorageAccountPreparer
from .example_steps import step_storage_sync_service_create
from .example_steps import step_sync_group_create
from .example_steps import step_registered_server_create
from .example_steps import step_cloud_endpoint_create
from .example_steps import step_server_endpoint_create
from .example_steps import step_server_endpoint_show
from .example_steps import step_cloud_endpoint_show
from .example_steps import step_server_endpoint_list
from .example_steps import step_cloud_endpoint_list
from .example_steps import step_registered_server_show
from .example_steps import step_workflow_show
from .example_steps import step_sync_group_show
from .example_steps import step_registered_server_list
from .example_steps import step_sync_group_list
from .example_steps import step_workflow_list
from .example_steps import step_storage_sync_service_show
from .example_steps import step_storage_sync_service_list
from .example_steps import step_storage_sync_service_list2
from .example_steps import step_cloud_endpoint_trigger_change_detection
from .example_steps import step_cloud_endpoint_restoreheartbeat
from .example_steps import step_server_endpoint_recall_action
from .example_steps import step_cloud_endpoint_post_restore
from .example_steps import step_cloud_endpoint_pre_restore
from .example_steps import step_cloud_endpoint_post_backup
from .example_steps import step_cloud_endpoint_pre_backup
from .example_steps import step_server_endpoint_update
from .example_steps import step_registered_server_trigger_rollover
from .example_steps import step_workflow_abort
from .example_steps import step_storage_sync_service_update
from .example_steps import step_server_endpoint_delete
from .example_steps import step_cloud_endpoint_delete
from .example_steps import step_registered_server_delete
from .example_steps import step_sync_group_delete
from .example_steps import step_storage_sync_service_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_4, rg, rg_2, rg_3):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_4, rg, rg_2, rg_3):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_4, rg, rg_2, rg_3):
    setup_scenario(test, rg_4, rg, rg_2, rg_3)
    step_storage_sync_service_create(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("location", "WestUS", case_sensitive=False),
        test.check("incomingTrafficPolicy", "AllowAllTraffic", case_sensitive=False),
        test.check("name", "{myStorageSyncService}", case_sensitive=False),
    ])
    step_sync_group_create(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("name", "{mySyncGroup}", case_sensitive=False),
    ])
    step_registered_server_create(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_create(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("name", "{myCloudEndpoint}", case_sensitive=False),
        test.check("azureFileShareName", "cvcloud-afscv-0719-058-a94a1354-a1fd-4e9a-9a50-919fad8c4ba4",
                   case_sensitive=False),
        test.check("friendlyName", "ankushbsubscriptionmgmtmab", case_sensitive=False),
        test.check("storageAccountResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg_4}/providers/Micros"
                   "oft.Storage/storageAccounts/{sa}", case_sensitive=False),
        test.check("storageAccountTenantId", "\"72f988bf-86f1-41af-91ab-2d7cd011db47\"", case_sensitive=False),
    ])
    step_server_endpoint_create(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("cloudTiering", "off", case_sensitive=False),
        test.check("initialDownloadPolicy", "NamespaceThenModifiedFiles", case_sensitive=False),
        test.check("initialUploadPolicy", "ServerAuthoritative", case_sensitive=False),
        test.check("localCacheMode", "UpdateLocallyCachedFiles", case_sensitive=False),
        test.check("offlineDataTransfer", "on", case_sensitive=False),
        test.check("offlineDataTransferShareName", "myfileshare", case_sensitive=False),
        test.check("serverLocalPath", "D:\\SampleServerEndpoint_1", case_sensitive=False),
        test.check("serverResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Storag"
                   "eSync/storageSyncServices/{myStorageSyncService}/registeredServers/{myRegisteredServer}",
                   case_sensitive=False),
        test.check("tierFilesOlderThanDays", 0),
        test.check("volumeFreeSpacePercent", 100),
        test.check("name", "{myServerEndpoint}", case_sensitive=False),
    ])
    step_server_endpoint_show(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("initialDownloadPolicy", "NamespaceThenModifiedFiles", case_sensitive=False),
        test.check("localCacheMode", "UpdateLocallyCachedFiles", case_sensitive=False),
        test.check("offlineDataTransfer", "on", case_sensitive=False),
        test.check("offlineDataTransferShareName", "myfileshare", case_sensitive=False),
        test.check("serverLocalPath", "D:\\SampleServerEndpoint_1", case_sensitive=False),
        test.check("serverResourceId", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Storag"
                   "eSync/storageSyncServices/{myStorageSyncService}/registeredServers/{myRegisteredServer}",
                   case_sensitive=False),
        test.check("tierFilesOlderThanDays", 0),
        test.check("volumeFreeSpacePercent", 100),
        test.check("name", "{myServerEndpoint}", case_sensitive=False),
    ])
    step_cloud_endpoint_show(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("name", "{myCloudEndpoint}", case_sensitive=False),
    ])
    step_server_endpoint_list(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_cloud_endpoint_list(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_registered_server_show(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_workflow_show(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_sync_group_show(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("name", "{mySyncGroup}", case_sensitive=False),
    ])
    step_workflow_show(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_registered_server_list(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_sync_group_list(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_workflow_list(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_storage_sync_service_show(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("location", "WestUS", case_sensitive=False),
        test.check("incomingTrafficPolicy", "AllowAllTraffic", case_sensitive=False),
        test.check("name", "{myStorageSyncService}", case_sensitive=False),
    ])
    step_storage_sync_service_list(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    step_storage_sync_service_list2(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check('length(@)', 1),
    ])
    # STEP NOT FOUND: Operations_List
    step_cloud_endpoint_trigger_change_detection(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_restoreheartbeat(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_server_endpoint_recall_action(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_post_restore(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_pre_restore(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_post_backup(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_pre_backup(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_server_endpoint_update(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("name", "{myServerEndpoint}", case_sensitive=False),
        test.check("cloudTiering", "off", case_sensitive=False),
        test.check("localCacheMode", "UpdateLocallyCachedFiles", case_sensitive=False),
        test.check("offlineDataTransfer", "off", case_sensitive=False),
        test.check("tierFilesOlderThanDays", 0),
    ])
    step_registered_server_trigger_rollover(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_workflow_abort(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_storage_sync_service_update(test, rg_4, rg, rg_2, rg_3, checks=[
        test.check("location", "WestUS", case_sensitive=False),
        test.check("incomingTrafficPolicy", "AllowAllTraffic", case_sensitive=False),
        test.check("name", "{myStorageSyncService}", case_sensitive=False),
        test.check("tags.Dept", "IT", case_sensitive=False),
        test.check("tags.Environment", "Test", case_sensitive=False),
    ])
    # STEP NOT FOUND: StorageSyncServiceCheckNameAvailability_AlreadyExists
    # STEP NOT FOUND: StorageSyncServiceCheckNameAvailability_Available
    step_server_endpoint_delete(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_cloud_endpoint_delete(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_registered_server_delete(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_sync_group_delete(test, rg_4, rg, rg_2, rg_3, checks=[])
    step_storage_sync_service_delete(test, rg_4, rg, rg_2, rg_3, checks=[])
    cleanup_scenario(test, rg_4, rg, rg_2, rg_3)


# Test class for Scenario
@try_manual
class StoragesyncScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(StoragesyncScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myStorageSyncService': 'SampleStorageSyncService_1',
            'myStorageSyncService2': 'sss2527',
            'myPrivateEndpointConnection': '{privateEndpointConnectionName}',
            'mySyncGroup': 'SampleSyncGroup_1',
            'myCloudEndpoint': 'SampleCloudEndpoint_1',
            'myRegisteredServer': '080d4133-bdb5-40a0-96a0-71a6057bfe9a',
            'myServerEndpoint': 'SampleServerEndpoint_1',
        })


    @ResourceGroupPreparer(name_prefix='cliteststoragesync_tminienv59svc'[:7], key='rg_4', parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='cliteststoragesync_SampleResourceGroup_1'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='cliteststoragesync_res6977'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='cliteststoragesync_res7687'[:7], key='rg_3', parameter_name='rg_3')
    @StorageAccountPreparer(name_prefix='cliteststoragesync_tminienv59storage'[:7], key='sa',
                            resource_group_parameter_name='rg_4')
    def test_storagesync_Scenario(self, rg_4, rg, rg_2, rg_3):
        call_scenario(self, rg_4, rg, rg_2, rg_3)
        calc_coverage(__file__)
        raise_if()

