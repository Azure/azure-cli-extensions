# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "elastic monitor create",
)
class Create(AAZCommand):
    """Create a monitor resource.

    :example: Create monitor
        az elastic monitor create -n monitor-name -g rg --user-info "{firstName:Alice,lastName:bob,companyName:Micosoft,emailAddress:alice@microsoft.com}" --sku "{name:ess-consumption-2024_Monthly}"
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.elastic/monitors/{}", "2023-02-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["-n", "--name", "--monitor-name"],
            help="Monitor resource name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="The location of the monitor resource",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="Body",
            help={"short-summary": "SKU of the monitor resource.", "long-summary": "The SKU depends on the Elasticsearch Plans available for your account and is a combination of PlanID_Term.\nEx: If the plan ID is \"planXYZ\" and term is \"Yearly\", the SKU will be \"planXYZ_Yearly\".\nYou may find your eligible plans at https://portal.azure.com/#view/Microsoft_Azure_Marketplace/GalleryItemDetailsBladeNopdl/id/elastic.ec-azure-pp or in the online documentation at https://azuremarketplace.microsoft.com/en-us/marketplace/apps/elastic.ec-azure-pp?tab=PlansAndPrice for more details or in case of any issues with the SKU."},
            is_experimental=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="The tags of the monitor resource.",
        )

        sku = cls._args_schema.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Name of the SKU.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.generate_api_key = AAZBoolArg(
            options=["--generate-api-key"],
            arg_group="Properties",
            help="Flag to determine if User API Key has to be generated and shared.",
        )
        _args_schema.monitoring_status = AAZStrArg(
            options=["--monitoring-status"],
            arg_group="Properties",
            help="Flag specifying if the resource monitoring is enabled or disabled.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.user_info = AAZObjectArg(
            options=["--user-info"],
            arg_group="Properties",
            help="User information.",
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="Version of elastic of the monitor resource",
        )

        user_info = cls._args_schema.user_info
        user_info.company_info = AAZObjectArg(
            options=["company-info"],
            help="Company information of the user to be passed to partners.",
        )
        user_info.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name of the user",
            fmt=AAZStrArgFormat(
                max_length=64,
            ),
        )
        user_info.email_address = AAZStrArg(
            options=["email-address"],
            help="Email of the user used by Elastic for contacting them if needed",
            fmt=AAZStrArgFormat(
                pattern="^([^<>()\[\]\.,;:\s@\"]+(\.[^<>()\[\]\.,;:\s@\"]+)*)@(([a-zA-Z-_0-9]+\.)+[a-zA-Z]{2,})$",
            ),
        )
        user_info.first_name = AAZStrArg(
            options=["first-name"],
            help="First name of the user",
            fmt=AAZStrArgFormat(
                max_length=50,
            ),
        )
        user_info.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name of the user",
            fmt=AAZStrArgFormat(
                max_length=50,
            ),
        )

        company_info = cls._args_schema.user_info.company_info
        company_info.business = AAZStrArg(
            options=["business"],
            help="Business of the company",
            fmt=AAZStrArgFormat(
                max_length=64,
            ),
        )
        company_info.country = AAZStrArg(
            options=["country"],
            help="Country of the company location.",
            fmt=AAZStrArgFormat(
                max_length=64,
            ),
        )
        company_info.domain = AAZStrArg(
            options=["domain"],
            help="Domain of the company",
            fmt=AAZStrArgFormat(
                max_length=250,
            ),
        )
        company_info.employees_number = AAZStrArg(
            options=["employees-number"],
            help="Number of employees in the company",
            fmt=AAZStrArgFormat(
                max_length=20,
            ),
        )
        company_info.state = AAZStrArg(
            options=["state"],
            help="State of the company location.",
            fmt=AAZStrArgFormat(
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.MonitorsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitorsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Elastic/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("sku", AAZObjectType, ".sku")
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("generateApiKey", AAZBoolType, ".generate_api_key")
                properties.set_prop("monitoringStatus", AAZStrType, ".monitoring_status")
                properties.set_prop("userInfo", AAZObjectType, ".user_info")
                properties.set_prop("version", AAZStrType, ".version")

            user_info = _builder.get(".properties.userInfo")
            if user_info is not None:
                user_info.set_prop("companyInfo", AAZObjectType, ".company_info")
                user_info.set_prop("companyName", AAZStrType, ".company_name")
                user_info.set_prop("emailAddress", AAZStrType, ".email_address")
                user_info.set_prop("firstName", AAZStrType, ".first_name")
                user_info.set_prop("lastName", AAZStrType, ".last_name")

            company_info = _builder.get(".properties.userInfo.companyInfo")
            if company_info is not None:
                company_info.set_prop("business", AAZStrType, ".business")
                company_info.set_prop("country", AAZStrType, ".country")
                company_info.set_prop("domain", AAZStrType, ".domain")
                company_info.set_prop("employeesNumber", AAZStrType, ".employees_number")
                company_info.set_prop("state", AAZStrType, ".state")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.sku = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType()

            properties = cls._schema_on_200_201.properties
            properties.elastic_properties = AAZObjectType(
                serialized_name="elasticProperties",
            )
            properties.generate_api_key = AAZBoolType(
                serialized_name="generateApiKey",
            )
            properties.liftr_resource_category = AAZStrType(
                serialized_name="liftrResourceCategory",
                flags={"read_only": True},
            )
            properties.liftr_resource_preference = AAZIntType(
                serialized_name="liftrResourcePreference",
                flags={"read_only": True},
            )
            properties.monitoring_status = AAZStrType(
                serialized_name="monitoringStatus",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.version = AAZStrType()

            elastic_properties = cls._schema_on_200_201.properties.elastic_properties
            elastic_properties.elastic_cloud_deployment = AAZObjectType(
                serialized_name="elasticCloudDeployment",
            )
            elastic_properties.elastic_cloud_user = AAZObjectType(
                serialized_name="elasticCloudUser",
            )

            elastic_cloud_deployment = cls._schema_on_200_201.properties.elastic_properties.elastic_cloud_deployment
            elastic_cloud_deployment.azure_subscription_id = AAZStrType(
                serialized_name="azureSubscriptionId",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.deployment_id = AAZStrType(
                serialized_name="deploymentId",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.elasticsearch_region = AAZStrType(
                serialized_name="elasticsearchRegion",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.elasticsearch_service_url = AAZStrType(
                serialized_name="elasticsearchServiceUrl",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.kibana_service_url = AAZStrType(
                serialized_name="kibanaServiceUrl",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.kibana_sso_url = AAZStrType(
                serialized_name="kibanaSsoUrl",
                flags={"read_only": True},
            )
            elastic_cloud_deployment.name = AAZStrType(
                flags={"read_only": True},
            )

            elastic_cloud_user = cls._schema_on_200_201.properties.elastic_properties.elastic_cloud_user
            elastic_cloud_user.elastic_cloud_sso_default_url = AAZStrType(
                serialized_name="elasticCloudSsoDefaultUrl",
                flags={"read_only": True},
            )
            elastic_cloud_user.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"read_only": True},
            )
            elastic_cloud_user.id = AAZStrType(
                flags={"read_only": True},
            )

            sku = cls._schema_on_200_201.sku
            sku.name = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
