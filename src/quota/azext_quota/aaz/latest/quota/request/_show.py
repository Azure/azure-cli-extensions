# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "quota request show",
)
class Show(AAZCommand):
    """Show the quota request details and status by quota request ID for the resources of the resource provider at a specific location.

    :example: Show quota request for network
        az quota request show --scope /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus --id resourcename/subRequestId
    """

    _aaz_info = {
        "version": "2023-02-01",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.quota/quotarequests/{}", "2023-02-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.id = AAZStrArg(
            options=["--id"],
            help="Quota request ID. ResourceName or subRequestId",
            required=True,
        )
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="The target azure resource URI.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.QuotaRequestStatusGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class QuotaRequestStatusGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Quota/quotaRequests/{id}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "id", self.ctx.args.id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.error = AAZObjectType()
            _ShowHelper._build_schema_service_error_detail_read(properties.error)
            properties.message = AAZStrType(
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.request_submit_time = AAZStrType(
                serialized_name="requestSubmitTime",
                flags={"read_only": True},
            )
            properties.value = AAZListType()

            value = cls._schema_on_200.properties.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.value.Element
            _element.limit = AAZObjectType()
            _element.message = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZObjectType()
            _element.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            _element.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"read_only": True},
            )
            _element.sub_request_id = AAZStrType(
                serialized_name="subRequestId",
                flags={"read_only": True},
            )
            _element.unit = AAZStrType()

            limit = cls._schema_on_200.properties.value.Element.limit
            limit.limit_object_type = AAZStrType(
                serialized_name="limitObjectType",
                flags={"required": True},
            )

            disc_limit_value = cls._schema_on_200.properties.value.Element.limit.discriminate_by("limit_object_type", "LimitValue")
            disc_limit_value.limit_type = AAZStrType(
                serialized_name="limitType",
            )
            disc_limit_value.value = AAZIntType(
                flags={"required": True},
            )

            name = cls._schema_on_200.properties.value.Element.name
            name.localized_value = AAZStrType(
                serialized_name="localizedValue",
                flags={"read_only": True},
            )
            name.value = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_service_error_detail_read = None

    @classmethod
    def _build_schema_service_error_detail_read(cls, _schema):
        if cls._schema_service_error_detail_read is not None:
            _schema.code = cls._schema_service_error_detail_read.code
            _schema.message = cls._schema_service_error_detail_read.message
            return

        cls._schema_service_error_detail_read = _schema_service_error_detail_read = AAZObjectType()

        service_error_detail_read = _schema_service_error_detail_read
        service_error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        service_error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )

        _schema.code = cls._schema_service_error_detail_read.code
        _schema.message = cls._schema_service_error_detail_read.message


__all__ = ["Show"]
