# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "quota create",
)
class Create(AAZCommand):
    """Create the quota limit for the specified resource

    :example: Create quota for network
        az quota create --resource-name MinPublicIpInterNetworkPrefixLength --scope /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus --limit-object value=10 --resource-type MinPublicIpInterNetworkPrefixLength

    :example: Create quota for network standardSkuPublicIpAddressesResource
        az quota create --resource-name StandardSkuPublicIpAddresses --scope /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Network/locations/eastus --limit-object value=10 --resource-type PublicIpAddresses

    :example: Create quota for compute
        az quota create --resource-name standardFSv2Family --scope /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.Compute/locations/eastus --limit-object value=10 --resource-type dedicated

    :example: Create quota for MachineLearningServices LowPriorityResource
        az quota create  --resource-name TotalLowPriorityCores --scope /subscriptions/00000000-0000-0000-0000-000000000000/providers/Microsoft.MachineLearning/Services/locations/eastus --limit-object value=10 --resource-type lowPriority
    """

    _aaz_info = {
        "version": "2023-02-01",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.quota/quotas/{}", "2023-02-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Resource name for a given resource provider.",
            required=True,
        )
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="The target azure resource URI.",
            required=True,
        )
        _args_schema.properties = AAZFreeFormDictArg(
            options=["--properties"],
            help="Additional properties for the specific resource provider.",
            blank={},
        )
        _args_schema.resource_type = AAZStrArg(
            options=["--resource-type"],
            help="The name of the resource type. Optional field.",
        )

        # define Arg Group "Limit"

        _args_schema = cls._args_schema
        _args_schema.limit_object = AAZObjectArg(
            options=["--limit-object"],
            arg_group="Limit",
            help="The resource quota limit value.",
        )

        limit_object = cls._args_schema.limit_object
        limit_object.limit_type = AAZStrArg(
            options=["limit-type"],
            help="The quota or usages limit types.",
            enum={"Independent": "Independent", "Shared": "Shared"},
        )
        limit_object.value = AAZIntArg(
            options=["value"],
            help="The quota/limit value",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.name = AAZObjectArg(
            options=["--name"],
            arg_group="Properties",
            help="Resource name provided by the resource provider. Use this property name when requesting quota.",
        )

        name = cls._args_schema.name
        name.value = AAZStrArg(
            options=["value"],
            help="Resource name.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.QuotaCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class QuotaCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "original-uri"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Quota/quotas/{resourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("limit", AAZObjectType)
                properties.set_prop("name", AAZObjectType, ".name")
                properties.set_prop("properties", AAZFreeFormDictType, ".properties")
                properties.set_prop("resourceType", AAZStrType, ".resource_type")

            limit = _builder.get(".properties.limit")
            if limit is not None:
                limit.set_const("limitObjectType", "LimitValue", AAZStrType, ".limit_object", typ_kwargs={"flags": {"required": True}})
                limit.discriminate_by("limitObjectType", "LimitValue")

            disc_limit_value = _builder.get(".properties.limit{limitObjectType:LimitValue}")
            if disc_limit_value is not None:
                disc_limit_value.set_prop("limitType", AAZStrType, ".limit_object.limit_type")
                disc_limit_value.set_prop("value", AAZIntType, ".limit_object.value", typ_kwargs={"flags": {"required": True}})

            name = _builder.get(".properties.name")
            if name is not None:
                name.set_prop("value", AAZStrType, ".value")

            properties = _builder.get(".properties.properties")
            if properties is not None:
                properties.set_anytype_elements(".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.is_quota_applicable = AAZBoolType(
                serialized_name="isQuotaApplicable",
                flags={"read_only": True},
            )
            properties.limit = AAZObjectType()
            properties.name = AAZObjectType()
            properties.properties = AAZFreeFormDictType()
            properties.quota_period = AAZStrType(
                serialized_name="quotaPeriod",
                flags={"read_only": True},
            )
            properties.resource_type = AAZStrType(
                serialized_name="resourceType",
            )
            properties.unit = AAZStrType(
                flags={"read_only": True},
            )

            limit = cls._schema_on_200.properties.limit
            limit.limit_object_type = AAZStrType(
                serialized_name="limitObjectType",
                flags={"required": True},
            )

            disc_limit_value = cls._schema_on_200.properties.limit.discriminate_by("limit_object_type", "LimitValue")
            disc_limit_value.limit_type = AAZStrType(
                serialized_name="limitType",
            )
            disc_limit_value.value = AAZIntType(
                flags={"required": True},
            )

            name = cls._schema_on_200.properties.name
            name.localized_value = AAZStrType(
                serialized_name="localizedValue",
                flags={"read_only": True},
            )
            name.value = AAZStrType()

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
