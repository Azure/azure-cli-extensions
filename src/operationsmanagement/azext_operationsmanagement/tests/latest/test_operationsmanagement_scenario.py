# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_management_association_create
from .example_steps import step_management_association_show
from .example_steps import step_management_association_list
from .example_steps import step_management_association_delete
from .example_steps import step_management_configuration_create
from .example_steps import step_management_configuration_show
from .example_steps import step_management_configuration_list
from .example_steps import step_management_configuration_delete
from .example_steps import step_solution_create
from .example_steps import step_solution_show
from .example_steps import step_solution_list
from .example_steps import step_solution_update
from .example_steps import step_solution_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg):
    setup_scenario(test, rg_2, rg)
    step_management_association_create(test, rg_2, rg, checks=[
        test.check("name", "{myManagementAssociation}", case_sensitive=False),
        test.check("location", "East US", case_sensitive=False),
        test.check("applicationId", "/subscriptions/{subscription_id}/resourcegroups/{rg}/providers/Microsoft.Appliance"
                   "/Appliances/appliance1", case_sensitive=False),
    ])
    step_management_association_show(test, rg_2, rg, checks=[
        test.check("name", "{myManagementAssociation}", case_sensitive=False),
        test.check("location", "East US", case_sensitive=False),
        test.check("applicationId", "/subscriptions/{subscription_id}/resourcegroups/{rg}/providers/Microsoft.Appliance"
                   "/Appliances/appliance1", case_sensitive=False),
    ])
    step_management_association_list(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_management_association_delete(test, rg_2, rg, checks=[])
    step_management_configuration_create(test, rg_2, rg, checks=[
        test.check("name", "{myManagementConfiguration2}", case_sensitive=False),
        test.check("location", "East US", case_sensitive=False),
    ])
    step_management_configuration_show(test, rg_2, rg, checks=[])
    step_management_configuration_list(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_management_configuration_delete(test, rg_2, rg, checks=[])
    step_solution_create(test, rg_2, rg, checks=[])
    step_solution_show(test, rg_2, rg, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("plan.name", "name1", case_sensitive=False),
        test.check("plan.product", "product1", case_sensitive=False),
        test.check("plan.promotionCode", "promocode1", case_sensitive=False),
        test.check("plan.publisher", "publisher1", case_sensitive=False),
        test.check("name", "{mySolution}", case_sensitive=False),
    ])
    step_solution_list(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_solution_list(test, rg_2, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_solution_update(test, rg_2, rg, checks=[
        test.check("location", "East US", case_sensitive=False),
        test.check("plan.name", "name1", case_sensitive=False),
        test.check("plan.product", "product1", case_sensitive=False),
        test.check("plan.promotionCode", "promocode1", case_sensitive=False),
        test.check("plan.publisher", "publisher1", case_sensitive=False),
        test.check("name", "{mySolution}", case_sensitive=False),
        test.check("tags.Dept", "IT", case_sensitive=False),
        test.check("tags.Environment", "Test", case_sensitive=False),
    ])
    step_solution_delete(test, rg_2, rg, checks=[])
    cleanup_scenario(test, rg_2, rg)


# Test class for Scenario
@try_manual
class OperationsmanagementScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(OperationsmanagementScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'mySolution': 'solution1',
            'myManagementAssociation': 'managementAssociation1',
            'myManagementAssociation2': 'managementAssociationName',
            'myManagementConfiguration': 'managementConfigurationName',
            'myManagementConfiguration2': 'managementConfiguration1',
        })


    @ResourceGroupPreparer(name_prefix='clitestoperationsmanagement_rg2'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestoperationsmanagement_rg1'[:7], key='rg', parameter_name='rg')
    def test_operationsmanagement_Scenario(self, rg_2, rg):
        call_scenario(self, rg_2, rg)
        calc_coverage(__file__)
        raise_if()

