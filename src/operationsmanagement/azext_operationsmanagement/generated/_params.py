# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_operationsmanagement.action import (
    AddPlan,
    AddSolutionsProperties,
    AddManagementassociationsProperties,
    AddParameters
)


def load_arguments(self, _):

    with self.argument_context('operationsmanagement solution list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('operationsmanagement solution show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('solution_name', help='User Solution Name.')

    with self.argument_context('operationsmanagement solution create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('solution_name', help='User Solution Name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('plan', action=AddPlan, nargs='+', help='Plan for solution object supported by the OperationsManagem'
                   'ent resource provider. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: name, publis'
                   'her, promotion-code, product.')
        c.argument('properties', action=AddSolutionsProperties, nargs='+', help='Properties for solution object support'
                   'ed by the OperationsManagement resource provider. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , avail'
                   'able KEYs are: workspace-resource-id, contained-resources, referenced-resources.')

    with self.argument_context('operationsmanagement solution update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('solution_name', help='User Solution Name.')
        c.argument('tags', tags_type)

    with self.argument_context('operationsmanagement solution delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('solution_name', help='User Solution Name.')

    with self.argument_context('operationsmanagement management-association list') as c:
        pass

    with self.argument_context('operationsmanagement management-association show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', help='Provider name for the parent resource.')
        c.argument('resource_type', help='Resource type for the parent resource')
        c.argument('resource_name', help='Parent resource name.')
        c.argument('management_association_name', help='User ManagementAssociation Name.')

    with self.argument_context('operationsmanagement management-association create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', help='Provider name for the parent resource.')
        c.argument('resource_type', help='Resource type for the parent resource')
        c.argument('resource_name', help='Parent resource name.')
        c.argument('management_association_name', help='User ManagementAssociation Name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('properties', action=AddManagementassociationsProperties, nargs='+', help='Properties for Management'
                   'Association object supported by the OperationsManagement resource provider. Expect value: applicati'
                   'on-id=xx.')

    with self.argument_context('operationsmanagement management-association update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', help='Provider name for the parent resource.')
        c.argument('resource_type', help='Resource type for the parent resource')
        c.argument('resource_name', help='Parent resource name.')
        c.argument('management_association_name', help='User ManagementAssociation Name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('properties', action=AddManagementassociationsProperties, nargs='+', help='Properties for Management'
                   'Association object supported by the OperationsManagement resource provider. Expect value: applicati'
                   'on-id=xx.')

    with self.argument_context('operationsmanagement management-association delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('provider_name', help='Provider name for the parent resource.')
        c.argument('resource_type', help='Resource type for the parent resource')
        c.argument('resource_name', help='Parent resource name.')
        c.argument('management_association_name', help='User ManagementAssociation Name.')

    with self.argument_context('operationsmanagement management-configuration list') as c:
        pass

    with self.argument_context('operationsmanagement management-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('management_configuration_name', help='User Management Configuration Name.')

    with self.argument_context('operationsmanagement management-configuration create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('management_configuration_name', help='User Management Configuration Name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('application_id', help='The applicationId of the appliance for this Management.')
        c.argument('parent_resource_type', help='The type of the parent resource.')
        c.argument('parameters', action=AddParameters, nargs='+', help='Parameters to run the ARM template Expect value'
                   ': KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: name, value.')
        c.argument('template', arg_type=CLIArgumentType(options_list=['--template'], help='The Json object containing t'
                   'he ARM template to deploy Expected value: json-string/@json-file.'))

    with self.argument_context('operationsmanagement management-configuration update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('management_configuration_name', help='User Management Configuration Name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('application_id', help='The applicationId of the appliance for this Management.')
        c.argument('parent_resource_type', help='The type of the parent resource.')
        c.argument('parameters', action=AddParameters, nargs='+', help='Parameters to run the ARM template Expect value'
                   ': KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: name, value.')
        c.argument('template', arg_type=CLIArgumentType(options_list=['--template'], help='The Json object containing t'
                   'he ARM template to deploy Expected value: json-string/@json-file.'))

    with self.argument_context('operationsmanagement management-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('management_configuration_name', help='User Management Configuration Name.')
