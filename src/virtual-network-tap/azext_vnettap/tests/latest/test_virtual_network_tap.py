# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import unittest
from azure.cli.testsdk import *
import json


class VirtualNetworkTAPScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix= 'cli_test_vnet_tap_', location='westus', random_name_length=40)
    def test_vnet_tap(self, resource_group):

        self.kwargs.update({
            'vnet1': 'vnet1',
            'subnet1': 'subnet1',
            'lb': 'lb',
            'source_nic': 'sourcenic',
            'nic': 'destnic',
            'nic_ipconfig': 'nicipconfig1',
            'tap1': 'tap1',
            'vtap_config': 'vtapconfig',
        })
        self.cmd('network vnet create -g {rg} -n {vnet1} --subnet-name {subnet1}')
        self.cmd('network nic create -g {rg} -n {source_nic} --subnet {subnet1} --vnet-name {vnet1} --accelerated-networking true --auxiliary-mode AcceleratedConnections --auxiliary-sku A1', checks=[
                  self.check('NewNIC.auxiliaryMode', 'AcceleratedConnections'),
                  self.check('NewNIC.auxiliarySku', 'A1')
                ])

        self.cmd('network nic create -g {rg} -n {nic} --subnet {subnet1} --vnet-name {vnet1} ')
        self.cmd('network nic ip-config create -g {rg} --nic-name {nic} --name {nic_ipconfig}')
        self.kwargs['nic_dest'] = self.cmd('network nic ip-config show -g {rg} --nic-name {nic} --name {nic_ipconfig}').get_output_in_json()['id']
        self.cmd('network vnet tap create -g {rg} -n {tap1} --destination {nic_dest}', checks=[
                  self.check('type', 'Microsoft.Network/virtualNetworkTaps'),
                  self.check('destinationNetworkInterfaceIPConfiguration.id', self.kwargs['nic_dest'])
                ])
        self.cmd('network nic vtap-config create -g {rg} -n {vtap_config} --nic {source_nic} --vnet-tap {tap1}', checks=[
                  self.check('type', 'Microsoft.Network/networkInterfaces/tapConfigurations'),
                  self.check('name', self.kwargs['vtap_config'])
                ])
