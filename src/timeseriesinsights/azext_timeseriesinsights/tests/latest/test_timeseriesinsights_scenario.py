# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer, StorageAccountPreparer
from .example_steps import step_environment_gen1_create
from .example_steps import step_environment_list
from .example_steps import step_environment_show
from .example_steps import step_environment_update
from .example_steps import step_access_policy_create
from .example_steps import step_access_policy_list
from .example_steps import step_access_policy_show
from .example_steps import step_access_policy_update
from .example_steps import step_access_policy_delete
from .example_steps import step_event_source_microsoft__event_hub_create
from .example_steps import step_event_source_show
from .example_steps import step_event_source_list
from .example_steps import step_event_source_update
from .example_steps import step_event_source_delete
from .example_steps import step_reference_data_set_create
from .example_steps import step_reference_data_set_show
from .example_steps import step_reference_data_set_list
from .example_steps import step_reference_data_set_update
from .example_steps import step_reference_data_set_delete
from .example_steps import step_environment_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_environment_gen1_create(test, rg, checks=[])
    step_environment_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_environment_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_environment_show(test, rg, checks=[
        test.check("name", "{myEnvironment}", case_sensitive=False),
        test.check("location", "West US", case_sensitive=False),
        test.check("dataRetentionTime", "P31D", case_sensitive=False),
        test.check("sku.name", "S1", case_sensitive=False),
        test.check("sku.capacity", 1),
    ])
    step_environment_update(test, rg, checks=[
        test.check("name", "{myEnvironment}", case_sensitive=False),
        test.check("location", "West US", case_sensitive=False),
        test.check("dataRetentionTime", "P31D", case_sensitive=False),
        test.check("tags.someTag", "someTagValue", case_sensitive=False),
    ])
    step_access_policy_create(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_access_policy_show(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_update(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_delete(test, rg, checks=[])
    step_event_source_microsoft__event_hub_create(test, rg, checks=[])
    step_event_source_show(test, rg, checks=[
        test.check("name", "{myEventSource}", case_sensitive=False),
        test.check("location", "West US", case_sensitive=False),
        test.check("consumerGroupName", "cgn", case_sensitive=False),
        test.check("eventHubName", "ehn", case_sensitive=False),
        test.check("eventSourceResourceId", "somePathInArm", case_sensitive=False),
        test.check("keyName", "managementKey", case_sensitive=False),
        test.check("serviceBusNamespace", "sbn", case_sensitive=False),
    ])
    step_event_source_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_event_source_update(test, rg, checks=[
        test.check("name", "{myEventSource}", case_sensitive=False),
        test.check("location", "West US", case_sensitive=False),
        test.check("consumerGroupName", "cgn", case_sensitive=False),
        test.check("eventHubName", "ehn", case_sensitive=False),
        test.check("eventSourceResourceId", "somePathInArm", case_sensitive=False),
        test.check("keyName", "managementKey", case_sensitive=False),
        test.check("serviceBusNamespace", "sbn", case_sensitive=False),
        test.check("tags.someKey", "someValue", case_sensitive=False),
    ])
    step_event_source_delete(test, rg, checks=[])
    step_reference_data_set_create(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
    ])
    step_reference_data_set_show(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
    ])
    step_reference_data_set_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_reference_data_set_update(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
        test.check("tags.someKey", "someValue", case_sensitive=False),
    ])
    step_reference_data_set_delete(test, rg, checks=[])
    step_environment_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class TimeseriesinsightsScenarioTest(ScenarioTest):

    # @ResourceGroupPreparer(name_prefix='clitesttimeseriesinsights_rg1'[:7], key='rg', parameter_name='rg')
    # def test_timeseriesinsights_Scenario(self, rg):
    #
    #     self.kwargs.update({
    #         'myEnvironment': 'env1',
    #         'myEventSource': 'es1',
    #         'myReferenceDataSet': 'rds1',
    #         'myAccessPolicy': 'ap1',
    #     })
    #
    #     call_scenario(self, rg)
    #     calc_coverage(__file__)
    #     raise_if()

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_environment_gen1(self, resource_group):
        self.kwargs.update({
            'env1': self.create_random_name('cli-test-tsi-env1', 24),
        })

        # Test `environment gen1 create` with optional arguments
        self.cmd('az timeseriesinsights environment gen1 create '
                 '--resource-group {rg} '
                 '--name {env1} '
                 '--sku name=S1 capacity=1 '
                 '--data-retention-time "P31D" '
                 '--partition-key-properties name="DeviceId1" type="String" '
                 '--storage-limit-exceeded-behavior PauseIngress',
                 checks=[self.check('name', '{env1}'),
                         self.check('sku.name', 'S1'),
                         self.check('sku.capacity', 1),
                         self.check('partitionKeyProperties', [{"name": "DeviceId1", "type": "String"}]),
                         self.check('storageLimitExceededBehavior', 'PauseIngress'),
                         self.check('dataRetentionTime', '31 days, 0:00:00')
                 ])

        self.cmd('az timeseriesinsights environment show '
                 '--resource-group {rg} '
                 '--name {env1}',
                 checks=[self.check('name', '{env1}')])

        self.cmd('az timeseriesinsights environment gen1 update --resource-group {rg} --name {env1} '
                 '--sku name=S1 capacity=2',
                 checks=[self.check('sku.capacity', '2')])

        self.cmd('az timeseriesinsights environment gen1 update --resource-group {rg} --name {env1} '
                 '--storage-limit-exceeded-behavior PurgeOldData',
                 checks=[self.check('properties.storageLimitExceededBehavior', 'PurgeOldData')])

        self.cmd('az timeseriesinsights environment gen1 update --resource-group {rg} --name {env1} '
                          '--tags key1=value1 key2=value2',
                 checks=[]
                 )

        self.cmd('az timeseriesinsights environment list '
                 '--resource-group {rg}',
                 checks=[self.check('length(value)', 1)])

        self.cmd('az timeseriesinsights environment list',
                 checks=[self.check("length(value[?name=='{env1}'])", 1)])

        self.cmd('az timeseriesinsights environment delete '
                 '--resource-group {rg} '
                 '--name {env1} --yes',
                 checks=[])

        self.cmd('az timeseriesinsights environment list '
                 '--resource-group {rg}',
                 checks=[self.check('length(value)', 0)])

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    @StorageAccountPreparer()
    def test_timeseriesinsights_environment_gen2(self, resource_group, storage_account):
        self.kwargs.update({
            'env': self.create_random_name('cli-test-tsi-env2', 24),
        })

        # Test environment longterm create
        key = self.cmd('az storage account keys list -g {rg} -n {sa}  --query "[0].value" --output tsv').output

        # Test `environment gen2 create` with optional arguments
        self.cmd('az timeseriesinsights environment gen2 create '
                 '--resource-group {rg} '
                 '--name {env} '
                 '--sku name=L1 capacity=1 '
                 '--time-series-id-properties name=DeviceId1 type=String '
                 '--storage-configuration account-name={sa} management-key=' + key,
                 checks=[self.check('name', '{env}'),
                         self.check('sku.name', 'L1'),
                         self.check('sku.capacity', 1),
                         self.check('timeSeriesIdProperties[0].name', 'DeviceId1'),
                         self.check('timeSeriesIdProperties[0].type', 'String')])

        self.cmd('az timeseriesinsights environment show '
                 '--resource-group {rg} '
                 '--name {env}',
                 checks=[self.check('name', '{env}')])

        self.cmd('az timeseriesinsights environment gen2 update --resource-group {rg} --name {env} '
                 '--warm-store-configuration data-retention=P30D '
                 '--storage-configuration account-name={sa} management-key=' + key,
                 checks=[self.check('warmStoreConfiguration.dataRetention', "30 days, 0:00:00")])
