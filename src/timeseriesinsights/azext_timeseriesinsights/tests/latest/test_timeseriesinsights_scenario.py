# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_environment_create
from .example_steps import step_environment_list
from .example_steps import step_environment_list
from .example_steps import step_environment_show
from .example_steps import step_environment_update
from .example_steps import step_access_policy_create
from .example_steps import step_access_policy_list
from .example_steps import step_access_policy_show
from .example_steps import step_access_policy_update
from .example_steps import step_access_policy_delete
from .example_steps import step_event_source_create
from .example_steps import step_event_source_show
from .example_steps import step_event_source_list
from .example_steps import step_event_source_update
from .example_steps import step_event_source_delete
from .example_steps import step_reference_data_set_create
from .example_steps import step_reference_data_set_show
from .example_steps import step_reference_data_set_list
from .example_steps import step_reference_data_set_update
from .example_steps import step_reference_data_set_delete
from .example_steps import step_environment_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg):
    setup_scenario(test, rg)
    step_environment_create(test, rg, checks=[
        test.check("name", "{myEnvironment}", case_sensitive=False),
    ])
    step_environment_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_environment_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_environment_show(test, rg, checks=[
        test.check("name", "{myEnvironment}", case_sensitive=False),
    ])
    step_environment_update(test, rg, checks=[
        test.check("name", "{myEnvironment}", case_sensitive=False),
        test.check("tags.someTag", "someTagValue", case_sensitive=False),
    ])
    step_access_policy_create(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_access_policy_show(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_update(test, rg, checks=[
        test.check("name", "{myAccessPolicy}", case_sensitive=False),
        test.check("description", "some description", case_sensitive=False),
        test.check("principalObjectId", "aGuid", case_sensitive=False),
    ])
    step_access_policy_delete(test, rg, checks=[])
    step_event_source_create(test, rg, checks=[
        test.check("name", "{myEventSource}", case_sensitive=False),
    ])
    step_event_source_show(test, rg, checks=[
        test.check("name", "{myEventSource}", case_sensitive=False),
    ])
    step_event_source_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_event_source_update(test, rg, checks=[
        test.check("name", "{myEventSource}", case_sensitive=False),
        test.check("tags.someKey", "someValue", case_sensitive=False),
    ])
    step_event_source_delete(test, rg, checks=[])
    step_reference_data_set_create(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
    ])
    step_reference_data_set_show(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
    ])
    step_reference_data_set_list(test, rg, checks=[
        test.check('length(@)', 1),
    ])
    step_reference_data_set_update(test, rg, checks=[
        test.check("location", "West US", case_sensitive=False),
        test.check("name", "{myReferenceDataSet}", case_sensitive=False),
        test.check("tags.someKey", "someValue", case_sensitive=False),
    ])
    step_reference_data_set_delete(test, rg, checks=[])
    step_environment_delete(test, rg, checks=[])
    cleanup_scenario(test, rg)


# Test class for Scenario
@try_manual
class TimeseriesinsightsScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitesttimeseriesinsights_rg1'[:7], key='rg', parameter_name='rg')
    def test_timeseriesinsights_Scenario(self, rg):

        self.kwargs.update({
            'myEnvironment': 'env1',
            'myEventSource': 'es1',
            'myReferenceDataSet': 'rds1',
            'myAccessPolicy': 'ap1',
        })

        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()

