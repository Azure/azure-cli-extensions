# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer, StorageAccountPreparer

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class TimeseriesinsightsScenarioTest(ScenarioTest):

    def _create_timeseriesinsights_environment(self):
        self.kwargs.update({
            'env': self.create_random_name('cli-test-tsi-env', 24),
        })
        return self.cmd('az tsi environment gen1 create '
                        '--resource-group {rg} '
                        '--location westus '
                        '--name {env} '
                        '--sku name=S1 capacity=1 '
                        '--data-retention-time "P31D" '
                        '--partition-key-properties name="DeviceId1" type="String" '
                        '--storage-limit-exceeded-behavior PauseIngress')

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_environment_gen1(self, resource_group):
        self.kwargs.update({
            'env1': self.create_random_name('cli-test-tsi-env1', 24)
        })

        # Test `environment gen1 create` with optional arguments
        self.cmd('az tsi environment gen1 create '
                 '--resource-group {rg} '
                 '--location westus '
                 '--name {env1} '
                 '--sku name=S1 capacity=1 '
                 '--data-retention-time "P31D" '
                 '--partition-key-properties name="DeviceId1" type="String" '
                 '--storage-limit-exceeded-behavior PauseIngress',
                 checks=[self.check('name', '{env1}'),
                         self.check('sku.name', 'S1'),
                         self.check('sku.capacity', 1),
                         self.check('partitionKeyProperties', [{"name": "DeviceId1", "type": "String"}]),
                         self.check('storageLimitExceededBehavior', 'PauseIngress'),
                         self.check('dataRetentionTime', 'P31D')
                         ])

        self.cmd('az tsi environment show '
                 '--resource-group {rg} '
                 '--name {env1}',
                 checks=[self.check('name', '{env1}')])

        self.cmd('az tsi environment gen1 update --resource-group {rg} --name {env1} '
                 '--sku name=S1 capacity=2',
                 checks=[self.check('sku.capacity', '2')])

        self.cmd('az tsi environment gen1 update --resource-group {rg} --name {env1} '
                 '--storage-limit-exceeded-behavior PurgeOldData',
                 checks=[self.check('storageLimitExceededBehavior', 'PurgeOldData')])

        self.cmd('az tsi environment gen1 update --resource-group {rg} --name {env1} '
                 '--storage-limit-exceeded-behavior PauseIngress '
                 '--sku name=S1 capacity=1',
                 checks=[
                     self.check('storageLimitExceededBehavior', 'PauseIngress'),
                     self.check('sku.capacity', '1')])

        self.cmd('az tsi environment gen1 update --resource-group {rg} --name {env1} '
                 '--tags key1=value1 key2=value2',
                 checks=[]
                 )

        self.cmd('az tsi environment list '
                 '--resource-group {rg}',
                 checks=[self.check('length(@)', 1)])

        self.cmd('az tsi environment list',
                 checks=[self.check("length(@[?name=='{env1}'])", 1)])

        self.cmd('az tsi environment delete '
                 '--resource-group {rg} '
                 '--name {env1} --yes',
                 checks=[])

        self.cmd('az tsi environment list '
                 '--resource-group {rg}',
                 checks=[self.check('length(@)', 0)])

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    @StorageAccountPreparer()
    def test_timeseriesinsights_environment_gen2(self, resource_group, storage_account):
        self.kwargs.update({
            'env': self.create_random_name('cli-test-tsi-env2', 24),
        })

        # Test environment longterm create
        key = self.cmd('az storage account keys list -g {rg} -n {sa}  --query "[0].value" --output tsv').output

        # Test `environment gen2 create` with optional arguments
        self.cmd('az tsi environment gen2 create '
                 '--resource-group {rg} '
                 '--location westus '
                 '--name {env} '
                 '--sku name=L1 capacity=1 '
                 '--time-series-id-properties name=DeviceId1 type=String '
                 '--storage-configuration account-name={sa} management-key=' + key,
                 checks=[self.check('name', '{env}'),
                         self.check('sku.name', 'L1'),
                         self.check('sku.capacity', 1),
                         self.check('timeSeriesIdProperties[0].name', 'DeviceId1'),
                         self.check('timeSeriesIdProperties[0].type', 'String')])

        self.cmd('az tsi environment show '
                 '--resource-group {rg} '
                 '--name {env}',
                 checks=[self.check('name', '{env}')])

        self.cmd('az tsi environment gen2 update --resource-group {rg} --name {env} '
                 '--warm-store-configuration data-retention=P30D '
                 '--storage-configuration account-name={sa} management-key=' + key,
                 checks=[self.check('warmStoreConfiguration.dataRetention', "P30D")])

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_event_source_eventhub(self, resource_group):
        self.kwargs.update({
            'es': self.create_random_name('cli-test-tsi-es', 24),  # time series insights event source
            'ehns': self.create_random_name('cli-test-tsi-ehns', 24),  # event hub namespace
            'eh': self.create_random_name('cli-test-tsi-eh', 24),  # event hub
            'loc': 'westus'
        })

        self._create_timeseriesinsights_environment()

        # Create

        # Prepare the event hub
        self.cmd('az eventhubs namespace create -g {rg} -n {ehns}')
        result = self.cmd('az eventhubs eventhub create -g {rg} -n {eh} --namespace-name {ehns}').get_output_in_json()
        self.kwargs["es_resource_id"] = result["id"]
        result = self.cmd(
            'az eventhubs namespace authorization-rule keys list -g {rg} --namespace-name {ehns} '
            '--name RootManageSharedAccessKey').get_output_in_json()
        self.kwargs["shared_access_key"] = result["primaryKey"]

        self.cmd('az tsi event-source eventhub create -g {rg} --environment-name {env} --name {es} '
                 '--location westus '
                 '--event-hub-name {eh} '
                 '--service-bus-namespace {ehns} '
                 '--key-name RootManageSharedAccessKey '
                 '--shared-access-key {shared_access_key} '
                 '--event-source-resource-id {es_resource_id} '
                 '--consumer-group-name "cgn"',
                 checks=[self.check('timestampPropertyName', None)])

        self.cmd('az tsi event-source eventhub update -g {rg} --environment-name {env} --name {es} '
                 '--timestamp-property-name DeviceId1',
                 checks=[self.check('timestampPropertyName', 'DeviceId1')])

        # Renew a key
        self.kwargs["shared_access_key"] = self.cmd(
            'az eventhubs namespace authorization-rule keys renew -g {rg} --namespace-name {ehns} '
            '--name RootManageSharedAccessKey --key PrimaryKey --query primaryKey --output tsv').output

        self.cmd('az tsi event-source eventhub update -g {rg} --environment-name {env} --name {es} '
                 '--shared-access-key {shared_access_key} '
                 '--tags test=tag '
                 '--timestamp-property-name DeviceId1 ',
                 checks=[self.check('timestampPropertyName', 'DeviceId1')])

        # List
        self.cmd('az tsi event-source list -g {rg} --environment-name {env}',
                 checks=[self.check('length(@)', 1)])

        # Show
        self.cmd('az tsi event-source show -g {rg} --environment-name {env} -n {es}')

        # Delete
        self.cmd('az tsi event-source delete -g {rg} --environment-name {env} -n {es} --yes')

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_event_source_iothub(self):
        self.kwargs.update({
            'es': self.create_random_name('cli-test-tsi-es', 24),  # time series insights event source
            'iothub': self.create_random_name('cli-test-tsi-iothub', 24),  # iot hub
            'loc': 'westus'
        })

        self._create_timeseriesinsights_environment()

        # Create
        # Prepare the iot hub
        result = self.cmd('az iot hub create -g {rg} -n {iothub}').get_output_in_json()
        self.kwargs["es_resource_id"] = result["id"]
        self.kwargs["key_name"] = "iothubowner"
        self.kwargs["shared_access_key"] = self.cmd(
            "az iot hub policy list -g {rg} --hub-name {iothub} --query \"[?keyName=='iothubowner']\".primaryKey --output tsv").output

        # Test --timestamp-property-name is not given
        self.cmd('az tsi event-source iothub create -g {rg} --environment-name {env} --name {es} '
                 '--location westus '
                 '--consumer-group-name "cgn" '
                 '--iot-hub-name {iothub} '
                 '--key-name {key_name} --shared-access-key {shared_access_key} '
                 '--event-source-resource-id {es_resource_id}',
                 checks=[self.check('timestampPropertyName', None)])

        # Test --timestamp-property-name is not given
        self.cmd('az tsi event-source iothub update -g {rg} --environment-name {env} --name {es} '
                 '--timestamp-property-name timestampProp',
                 checks=[self.check('timestampPropertyName', 'timestampProp')])

        self.kwargs["shared_access_key"] = self.cmd(
            'az iot hub policy renew-key -g {rg} --hub-name {iothub} -n {key_name} '
            '--renew-key primary --query primaryKey --output tsv').output

        self.cmd('az tsi event-source iothub update -g {rg} --environment-name {env} --name {es} '
                 '--shared-access-key {shared_access_key} '
                 '--tags test=tag '
                 '--timestamp-property-name DeviceId1 ',
                 checks=[self.check('timestampPropertyName', 'DeviceId1')])

        # List
        self.cmd('az tsi event-source list -g {rg} --environment-name {env}',
                 checks=[self.check('length(@)', 1)])

        # Show
        self.cmd('az tsi event-source show -g {rg} --environment-name {env} -n {es}')

        # Delete
        self.cmd('az tsi event-source delete -g {rg} --environment-name {env} -n {es} --yes')

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_reference_data_set(self):
        self.kwargs.update({
            'rds': self.create_random_name('clitesttsirds', 24),  # time series insights event source
            'rds2': self.create_random_name('clitesttsirds2', 24),
        })

        self._create_timeseriesinsights_environment()

        # Create
        self.cmd('az tsi reference-data-set create -g {rg} --environment-name {env} --name {rds} '
                 '--location westus '
                 '--key-properties name=DeviceFloor type=Double '
                 '--data-string-comparison-behavior Ordinal',
                 checks=[
                     self.check('keyProperties[0].name', 'DeviceFloor'),
                     self.check('keyProperties[0].type', 'Double'),
                     self.check('dataStringComparisonBehavior', 'Ordinal')
                 ])

        self.cmd('az tsi reference-data-set create -g {rg} --environment-name {env} --name {rds2} '
                 '--location westus '
                 '--key-properties name=DeviceId1 type=String '
                 '--key-properties name=DeviceFloor type=Double '
                 '--data-string-comparison-behavior OrdinalIgnoreCase',
                 checks=[
                     self.check('length(keyProperties)', 2),
                     self.check('dataStringComparisonBehavior', 'OrdinalIgnoreCase')
                 ])

        # Update
        self.cmd('az tsi reference-data-set update -g {rg} --environment-name {env} --name {rds} '
                 '--tags mykey=myvalue',
                 checks=[
                     self.check('tags.mykey', 'myvalue')
                 ])

        # List
        self.cmd('az tsi reference-data-set list -g {rg} --environment-name {env}',
                 checks=[self.check('length(@)', 2)])

        # Show
        self.cmd('az tsi reference-data-set show -g {rg} --environment-name {env} -n {rds}')

        # Delete
        self.cmd('az tsi reference-data-set delete -g {rg} --environment-name {env} -n {rds} --yes')

    @ResourceGroupPreparer(name_prefix='clitsi.rg')
    def test_timeseriesinsights_access_policy(self):
        self.kwargs.update({
        })

        self._create_timeseriesinsights_environment()

        # Create
        self.cmd(
            'az tsi access-policy create -g {rg} --environment-name {env} --name ap1 '
            '--principal-object-id 001 --description "some description" --roles Contributor Reader',
            checks=[
                self.check('description', 'some description'),
                self.check('principalObjectId', '001'),
                self.check('length(roles)', 2)
            ])

        # Update
        self.cmd(
            'az tsi access-policy update -g {rg} --environment-name {env} --name ap1 '
            '--description "some description updated" --roles Contributor',
            checks=[
                self.check('description', 'some description updated'),
                self.check('length(roles)', 1)
            ])

        # Show
        self.cmd('az tsi access-policy show -g {rg} --environment-name {env} --name ap1',
                 checks=[])
        # List
        self.cmd('az tsi access-policy list -g {rg} --environment-name {env}',
                 checks=[self.check('length(@)', 1)])

        # Delete
        self.cmd('az tsi access-policy delete -g {rg} --environment-name {env} --name ap1 --yes',
                 checks=[])
