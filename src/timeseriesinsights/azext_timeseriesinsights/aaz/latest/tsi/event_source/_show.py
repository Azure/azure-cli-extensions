# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "tsi event-source show",
)
class Show(AAZCommand):
    """Get the event source with the specified name in the specified environment.

    :example: GetEventHubEventSource
        az tsi event-source show --environment-name "env1" --name "es1" --resource-group "rg1"
    """

    _aaz_info = {
        "version": "2020-05-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.timeseriesinsights/environments/{}/eventsources/{}", "2020-05-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.environment_name = AAZStrArg(
            options=["--environment-name"],
            help="The name of the Time Series Insights environment associated with the specified resource group.",
            required=True,
            id_part="name",
        )
        _args_schema.event_source_name = AAZStrArg(
            options=["-n", "--name", "--event-source-name"],
            help="The name of the Time Series Insights event source associated with the specified environment.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.EventSourcesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EventSourcesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentName", self.ctx.args.environment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventSourceName", self.ctx.args.event_source_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-05-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.kind = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            disc_microsoft._event_hub = cls._schema_on_200.discriminate_by("kind", "Microsoft.EventHub")
            disc_microsoft._event_hub.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "Microsoft.EventHub").properties
            properties.consumer_group_name = AAZStrType(
                serialized_name="consumerGroupName",
                flags={"required": True},
            )
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
                flags={"read_only": True},
            )
            properties.event_hub_name = AAZStrType(
                serialized_name="eventHubName",
                flags={"required": True},
            )
            properties.event_source_resource_id = AAZStrType(
                serialized_name="eventSourceResourceId",
                flags={"required": True},
            )
            properties.ingress_start_at = AAZObjectType(
                serialized_name="ingressStartAt",
                flags={"client_flatten": True},
            )
            _ShowHelper._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
            properties.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            properties.local_timestamp = AAZObjectType(
                serialized_name="localTimestamp",
            )
            _ShowHelper._build_schema_local_timestamp_read(properties.local_timestamp)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.service_bus_namespace = AAZStrType(
                serialized_name="serviceBusNamespace",
                flags={"required": True},
            )
            properties.timestamp_property_name = AAZStrType(
                serialized_name="timestampPropertyName",
            )

            disc_microsoft._io_t_hub = cls._schema_on_200.discriminate_by("kind", "Microsoft.IoTHub")
            disc_microsoft._io_t_hub.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "Microsoft.IoTHub").properties
            properties.consumer_group_name = AAZStrType(
                serialized_name="consumerGroupName",
                flags={"required": True},
            )
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
                flags={"read_only": True},
            )
            properties.event_source_resource_id = AAZStrType(
                serialized_name="eventSourceResourceId",
                flags={"required": True},
            )
            properties.ingress_start_at = AAZObjectType(
                serialized_name="ingressStartAt",
                flags={"client_flatten": True},
            )
            _ShowHelper._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
            properties.iot_hub_name = AAZStrType(
                serialized_name="iotHubName",
                flags={"required": True},
            )
            properties.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            properties.local_timestamp = AAZObjectType(
                serialized_name="localTimestamp",
            )
            _ShowHelper._build_schema_local_timestamp_read(properties.local_timestamp)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.timestamp_property_name = AAZStrType(
                serialized_name="timestampPropertyName",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_ingress_start_at_properties_read = None

    @classmethod
    def _build_schema_ingress_start_at_properties_read(cls, _schema):
        if cls._schema_ingress_start_at_properties_read is not None:
            _schema.time = cls._schema_ingress_start_at_properties_read.time
            _schema.type = cls._schema_ingress_start_at_properties_read.type
            return

        cls._schema_ingress_start_at_properties_read = _schema_ingress_start_at_properties_read = AAZObjectType()

        ingress_start_at_properties_read = _schema_ingress_start_at_properties_read
        ingress_start_at_properties_read.time = AAZStrType()
        ingress_start_at_properties_read.type = AAZStrType()

        _schema.time = cls._schema_ingress_start_at_properties_read.time
        _schema.type = cls._schema_ingress_start_at_properties_read.type

    _schema_local_timestamp_read = None

    @classmethod
    def _build_schema_local_timestamp_read(cls, _schema):
        if cls._schema_local_timestamp_read is not None:
            _schema.format = cls._schema_local_timestamp_read.format
            _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset
            return

        cls._schema_local_timestamp_read = _schema_local_timestamp_read = AAZObjectType()

        local_timestamp_read = _schema_local_timestamp_read
        local_timestamp_read.format = AAZStrType()
        local_timestamp_read.time_zone_offset = AAZObjectType(
            serialized_name="timeZoneOffset",
        )

        time_zone_offset = _schema_local_timestamp_read.time_zone_offset
        time_zone_offset.property_name = AAZStrType(
            serialized_name="propertyName",
        )

        _schema.format = cls._schema_local_timestamp_read.format
        _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset


__all__ = ["Show"]
