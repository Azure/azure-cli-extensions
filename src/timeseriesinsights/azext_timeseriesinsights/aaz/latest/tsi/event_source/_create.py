# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create an event source under the specified environment.
    """

    _aaz_info = {
        "version": "2020-05-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.timeseriesinsights/environments/{}/eventsources/{}", "2020-05-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.environment_name = AAZStrArg(
            options=["--environment-name"],
            help="The name of the Time Series Insights environment associated with the specified resource group.",
            required=True,
        )
        _args_schema.event_source_name = AAZStrArg(
            options=["-n", "--name", "--event-source-name"],
            help="Name of the event source.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._\(\)]+$",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.eventhub = AAZObjectArg(
            options=["--eventhub"],
            arg_group="Parameters",
            help="Params for eventhub",
        )
        _args_schema.iothub = AAZObjectArg(
            options=["--iothub"],
            arg_group="Parameters",
            help="params for iothub",
        )
        _args_schema.local_timestamp = AAZObjectArg(
            options=["--local-timestamp"],
            arg_group="Parameters",
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
        )
        cls._build_args_local_timestamp_create(_args_schema.local_timestamp)
        _args_schema.location = AAZStrArg(
            options=["-l", "--location"],
            arg_group="Parameters",
            help="The location of the resource.",
            required=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Key-value pairs of additional properties for the resource.",
        )

        eventhub = cls._args_schema.eventhub
        eventhub.consumer_group_name = AAZStrArg(
            options=["consumer-group-name"],
            help="The name of the event hub's consumer group that holds the partitions from which events will be read.",
            required=True,
        )
        eventhub.event_hub_name = AAZStrArg(
            options=["event-hub-name"],
            help="The name of the event hub.",
            required=True,
        )
        eventhub.event_source_resource_id = AAZStrArg(
            options=["resource-id", "event-source-resource-id"],
            help="The resource id of the event source in Azure Resource Manager.",
            required=True,
        )
        eventhub.shared_access_policy_name = AAZStrArg(
            options=["key-name", "shared-access-policy-name"],
            help="The name of the SAS key that grants the Time Series Insights service access to the event hub. The shared access policies for this key must grant 'Listen' permissions to the event hub.",
            required=True,
        )
        eventhub.local_timestamp = AAZObjectArg(
            options=["local-timestamp"],
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
        )
        cls._build_args_local_timestamp_create(eventhub.local_timestamp)
        eventhub.service_bus_namespace = AAZStrArg(
            options=["namespace", "service-bus-namespace"],
            help="The name of the service bus that contains the event hub.",
            required=True,
        )
        eventhub.shared_access_key = AAZStrArg(
            options=["shared-access-key"],
            help="The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.",
            required=True,
        )
        eventhub.timestamp_property_name = AAZStrArg(
            options=["ts-property-name", "timestamp-property-name"],
            help="The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.",
        )

        iothub = cls._args_schema.iothub
        iothub.consumer_group_name = AAZStrArg(
            options=["consumer-group-name"],
            help="The name of the iot hub's consumer group that holds the partitions from which events will be read.",
            required=True,
        )
        iothub.event_source_resource_id = AAZStrArg(
            options=["resource-id", "event-source-resource-id"],
            help="The resource id of the event source in Azure Resource Manager.",
            required=True,
        )
        iothub.iot_hub_name = AAZStrArg(
            options=["iot-hub-name"],
            help="The name of the iot hub.",
            required=True,
        )
        iothub.shared_access_policy_name = AAZStrArg(
            options=["key-name", "shared-access-policy-name"],
            help="The name of the Shared Access Policy key that grants the Time Series Insights service access to the iot hub. This shared access policy key must grant 'service connect' permissions to the iot hub.",
            required=True,
        )
        iothub.local_timestamp = AAZObjectArg(
            options=["local-timestamp"],
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
        )
        cls._build_args_local_timestamp_create(iothub.local_timestamp)
        iothub.shared_access_key = AAZStrArg(
            options=["shared-access-key"],
            help="The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.",
            required=True,
        )
        iothub.timestamp_property_name = AAZStrArg(
            options=["ts-property-name", "timestamp-property-name"],
            help="The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_ingress_start_at_properties_create = None

    @classmethod
    def _build_args_ingress_start_at_properties_create(cls, _schema):
        if cls._args_ingress_start_at_properties_create is not None:
            _schema.time = cls._args_ingress_start_at_properties_create.time
            _schema.type = cls._args_ingress_start_at_properties_create.type
            return

        cls._args_ingress_start_at_properties_create = AAZObjectArg()

        ingress_start_at_properties_create = cls._args_ingress_start_at_properties_create
        ingress_start_at_properties_create.time = AAZStrArg(
            options=["time"],
            help="ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.",
        )
        ingress_start_at_properties_create.type = AAZStrArg(
            options=["type"],
            help="The type of the ingressStartAt, It can be \"EarliestAvailable\", \"EventSourceCreationTime\", \"CustomEnqueuedTime\".",
            enum={"CustomEnqueuedTime": "CustomEnqueuedTime", "EarliestAvailable": "EarliestAvailable", "EventSourceCreationTime": "EventSourceCreationTime"},
        )

        _schema.time = cls._args_ingress_start_at_properties_create.time
        _schema.type = cls._args_ingress_start_at_properties_create.type

    _args_local_timestamp_create = None

    @classmethod
    def _build_args_local_timestamp_create(cls, _schema):
        if cls._args_local_timestamp_create is not None:
            _schema.format = cls._args_local_timestamp_create.format
            _schema.time_zone_offset = cls._args_local_timestamp_create.time_zone_offset
            return

        cls._args_local_timestamp_create = AAZObjectArg()

        local_timestamp_create = cls._args_local_timestamp_create
        local_timestamp_create.format = AAZStrArg(
            options=["format"],
            help="An enum that represents the format of the local timestamp property that needs to be set.",
            enum={"Embedded": "Embedded"},
        )
        local_timestamp_create.time_zone_offset = AAZObjectArg(
            options=["time-zone-offset"],
            help="An object that represents the offset information for the local timestamp format specified. Should not be specified for LocalTimestampFormat - Embedded.",
        )

        time_zone_offset = cls._args_local_timestamp_create.time_zone_offset
        time_zone_offset.property_name = AAZStrArg(
            options=["property-name"],
            help="The event property that will be contain the offset information to calculate the local timestamp. When the LocalTimestampFormat is Iana, the property name will contain the name of the column which contains IANA Timezone Name (eg: Americas/Los Angeles). When LocalTimestampFormat is Timespan, it contains the name of property which contains values representing the offset (eg: P1D or 1.00:00:00)",
        )

        _schema.format = cls._args_local_timestamp_create.format
        _schema.time_zone_offset = cls._args_local_timestamp_create.time_zone_offset

    def _execute_operations(self):
        self.pre_operations()
        self.EventSourcesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EventSourcesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentName", self.ctx.args.environment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventSourceName", self.ctx.args.event_source_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-05-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_const("kind", "Microsoft.EventHub", AAZStrType, ".eventhub", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("kind", "Microsoft.IoTHub", AAZStrType, ".iothub", typ_kwargs={"flags": {"required": True}})
            _CreateHelper._build_schema_local_timestamp_create(_builder.set_prop("localTimestamp", AAZObjectType, ".local_timestamp"))
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")
            _builder.discriminate_by("kind", "Microsoft.EventHub")
            _builder.discriminate_by("kind", "Microsoft.IoTHub")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft._event_hub = _builder.get("{kind:Microsoft.EventHub}")
            if disc_microsoft._event_hub is not None:
                disc_microsoft._event_hub.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:Microsoft.EventHub}.properties")
            if properties is not None:
                properties.set_prop("consumerGroupName", AAZStrType, ".eventhub.consumer_group_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("eventHubName", AAZStrType, ".eventhub.event_hub_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("eventSourceResourceId", AAZStrType, ".eventhub.event_source_resource_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("keyName", AAZStrType, ".eventhub.shared_access_policy_name", typ_kwargs={"flags": {"required": True}})
                _CreateHelper._build_schema_local_timestamp_create(properties.set_prop("localTimestamp", AAZObjectType, ".eventhub.local_timestamp"))
                properties.set_prop("serviceBusNamespace", AAZStrType, ".eventhub.service_bus_namespace", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("sharedAccessKey", AAZStrType, ".eventhub.shared_access_key", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("timestampPropertyName", AAZStrType, ".eventhub.timestamp_property_name")

            disc_microsoft._io_t_hub = _builder.get("{kind:Microsoft.IoTHub}")
            if disc_microsoft._io_t_hub is not None:
                disc_microsoft._io_t_hub.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:Microsoft.IoTHub}.properties")
            if properties is not None:
                properties.set_prop("consumerGroupName", AAZStrType, ".iothub.consumer_group_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("eventSourceResourceId", AAZStrType, ".iothub.event_source_resource_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("iotHubName", AAZStrType, ".iothub.iot_hub_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("keyName", AAZStrType, ".iothub.shared_access_policy_name", typ_kwargs={"flags": {"required": True}})
                _CreateHelper._build_schema_local_timestamp_create(properties.set_prop("localTimestamp", AAZObjectType, ".iothub.local_timestamp"))
                properties.set_prop("sharedAccessKey", AAZStrType, ".iothub.shared_access_key", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("timestampPropertyName", AAZStrType, ".iothub.timestamp_property_name")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.kind = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            disc_microsoft._event_hub = cls._schema_on_200_201.discriminate_by("kind", "Microsoft.EventHub")
            disc_microsoft._event_hub.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )

            properties = cls._schema_on_200_201.discriminate_by("kind", "Microsoft.EventHub").properties
            properties.consumer_group_name = AAZStrType(
                serialized_name="consumerGroupName",
                flags={"required": True},
            )
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
                flags={"read_only": True},
            )
            properties.event_hub_name = AAZStrType(
                serialized_name="eventHubName",
                flags={"required": True},
            )
            properties.event_source_resource_id = AAZStrType(
                serialized_name="eventSourceResourceId",
                flags={"required": True},
            )
            properties.ingress_start_at = AAZObjectType(
                serialized_name="ingressStartAt",
                flags={"client_flatten": True},
            )
            _CreateHelper._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
            properties.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            properties.local_timestamp = AAZObjectType(
                serialized_name="localTimestamp",
            )
            _CreateHelper._build_schema_local_timestamp_read(properties.local_timestamp)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.service_bus_namespace = AAZStrType(
                serialized_name="serviceBusNamespace",
                flags={"required": True},
            )
            properties.timestamp_property_name = AAZStrType(
                serialized_name="timestampPropertyName",
            )

            disc_microsoft._io_t_hub = cls._schema_on_200_201.discriminate_by("kind", "Microsoft.IoTHub")
            disc_microsoft._io_t_hub.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )

            properties = cls._schema_on_200_201.discriminate_by("kind", "Microsoft.IoTHub").properties
            properties.consumer_group_name = AAZStrType(
                serialized_name="consumerGroupName",
                flags={"required": True},
            )
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
                flags={"read_only": True},
            )
            properties.event_source_resource_id = AAZStrType(
                serialized_name="eventSourceResourceId",
                flags={"required": True},
            )
            properties.ingress_start_at = AAZObjectType(
                serialized_name="ingressStartAt",
                flags={"client_flatten": True},
            )
            _CreateHelper._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
            properties.iot_hub_name = AAZStrType(
                serialized_name="iotHubName",
                flags={"required": True},
            )
            properties.key_name = AAZStrType(
                serialized_name="keyName",
                flags={"required": True},
            )
            properties.local_timestamp = AAZObjectType(
                serialized_name="localTimestamp",
            )
            _CreateHelper._build_schema_local_timestamp_read(properties.local_timestamp)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.timestamp_property_name = AAZStrType(
                serialized_name="timestampPropertyName",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_ingress_start_at_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("time", AAZStrType, ".time")
        _builder.set_prop("type", AAZStrType, ".type")

    @classmethod
    def _build_schema_local_timestamp_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("format", AAZStrType, ".format")
        _builder.set_prop("timeZoneOffset", AAZObjectType, ".time_zone_offset")

        time_zone_offset = _builder.get(".timeZoneOffset")
        if time_zone_offset is not None:
            time_zone_offset.set_prop("propertyName", AAZStrType, ".property_name")

    _schema_ingress_start_at_properties_read = None

    @classmethod
    def _build_schema_ingress_start_at_properties_read(cls, _schema):
        if cls._schema_ingress_start_at_properties_read is not None:
            _schema.time = cls._schema_ingress_start_at_properties_read.time
            _schema.type = cls._schema_ingress_start_at_properties_read.type
            return

        cls._schema_ingress_start_at_properties_read = _schema_ingress_start_at_properties_read = AAZObjectType()

        ingress_start_at_properties_read = _schema_ingress_start_at_properties_read
        ingress_start_at_properties_read.time = AAZStrType()
        ingress_start_at_properties_read.type = AAZStrType()

        _schema.time = cls._schema_ingress_start_at_properties_read.time
        _schema.type = cls._schema_ingress_start_at_properties_read.type

    _schema_local_timestamp_read = None

    @classmethod
    def _build_schema_local_timestamp_read(cls, _schema):
        if cls._schema_local_timestamp_read is not None:
            _schema.format = cls._schema_local_timestamp_read.format
            _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset
            return

        cls._schema_local_timestamp_read = _schema_local_timestamp_read = AAZObjectType()

        local_timestamp_read = _schema_local_timestamp_read
        local_timestamp_read.format = AAZStrType()
        local_timestamp_read.time_zone_offset = AAZObjectType(
            serialized_name="timeZoneOffset",
        )

        time_zone_offset = _schema_local_timestamp_read.time_zone_offset
        time_zone_offset.property_name = AAZStrType(
            serialized_name="propertyName",
        )

        _schema.format = cls._schema_local_timestamp_read.format
        _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset


__all__ = ["Create"]
