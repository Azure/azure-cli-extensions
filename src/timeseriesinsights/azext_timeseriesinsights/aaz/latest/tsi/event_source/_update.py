# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Update(AAZCommand):
    """Update an event source under the specified environment.
    """

    _aaz_info = {
        "version": "2020-05-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.timeseriesinsights/environments/{}/eventsources/{}", "2020-05-15"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.environment_name = AAZStrArg(
            options=["--environment-name"],
            help="The name of the Time Series Insights environment associated with the specified resource group.",
            required=True,
            id_part="name",
        )
        _args_schema.event_source_name = AAZStrArg(
            options=["-n", "--name", "--event-source-name"],
            help="The name of the Time Series Insights event source associated with the specified environment.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.eventhub = AAZObjectArg(
            options=["--eventhub"],
            arg_group="Parameters",
            help="Params for eventhub",
        )
        _args_schema.iothub = AAZObjectArg(
            options=["--iothub"],
            arg_group="Parameters",
            help="Params for iothub",
        )
        _args_schema.local_timestamp = AAZObjectArg(
            options=["--local-timestamp"],
            arg_group="Parameters",
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Key-value pairs of additional properties for the resource.",
            nullable=True,
        )

        eventhub = cls._args_schema.eventhub
        eventhub.local_timestamp = AAZObjectArg(
            options=["local-timestamp"],
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
            nullable=True,
        )
        eventhub.shared_access_key = AAZStrArg(
            options=["shared-access-key"],
            help="The value of the shared access key that grants the Time Series Insights service read access to the event hub. This property is not shown in event source responses.",
        )
        eventhub.timestamp_property_name = AAZStrArg(
            options=["ts-property-name", "timestamp-property-name"],
            help="The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.",
            nullable=True,
        )

        local_timestamp = cls._args_schema.eventhub.local_timestamp
        local_timestamp.format = AAZStrArg(
            options=["format"],
            nullable=True,
            enum={"Embedded": "Embedded"},
        )
        local_timestamp.time_zone_offset = AAZObjectArg(
            options=["time-zone-offset"],
            nullable=True,
        )

        time_zone_offset = cls._args_schema.eventhub.local_timestamp.time_zone_offset
        time_zone_offset.property_name = AAZStrArg(
            options=["property-name"],
            nullable=True,
        )

        iothub = cls._args_schema.iothub
        iothub.local_timestamp = AAZObjectArg(
            options=["local-timestamp"],
            help="An object that represents the local timestamp property. It contains the format of local timestamp that needs to be used and the corresponding timezone offset information. If a value isn't specified for localTimestamp, or if null, then the local timestamp will not be ingressed with the events.",
            nullable=True,
        )
        iothub.shared_access_key = AAZStrArg(
            options=["shared-access-key"],
            help="The value of the Shared Access Policy key that grants the Time Series Insights service read access to the iot hub. This property is not shown in event source responses.",
        )
        iothub.timestamp_property_name = AAZStrArg(
            options=["ts-property-name", "timestamp-property-name"],
            help="The event property that will be used as the event source's timestamp. If a value isn't specified for timestampPropertyName, or if null or empty-string is specified, the event creation time will be used.",
            nullable=True,
        )

        local_timestamp = cls._args_schema.iothub.local_timestamp
        local_timestamp.format = AAZStrArg(
            options=["format"],
            nullable=True,
            enum={"Embedded": "Embedded"},
        )
        local_timestamp.time_zone_offset = AAZObjectArg(
            options=["time-zone-offset"],
            nullable=True,
        )

        time_zone_offset = cls._args_schema.iothub.local_timestamp.time_zone_offset
        time_zone_offset.property_name = AAZStrArg(
            options=["property-name"],
            nullable=True,
        )

        local_timestamp = cls._args_schema.local_timestamp
        local_timestamp.format = AAZStrArg(
            options=["format"],
            nullable=True,
            enum={"Embedded": "Embedded"},
        )
        local_timestamp.time_zone_offset = AAZObjectArg(
            options=["time-zone-offset"],
            nullable=True,
        )

        time_zone_offset = cls._args_schema.local_timestamp.time_zone_offset
        time_zone_offset.property_name = AAZStrArg(
            options=["property-name"],
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    _args_ingress_start_at_properties_update = None

    @classmethod
    def _build_args_ingress_start_at_properties_update(cls, _schema):
        if cls._args_ingress_start_at_properties_update is not None:
            _schema.time = cls._args_ingress_start_at_properties_update.time
            _schema.type = cls._args_ingress_start_at_properties_update.type
            return

        cls._args_ingress_start_at_properties_update = AAZObjectArg(
            nullable=True,
        )

        ingress_start_at_properties_update = cls._args_ingress_start_at_properties_update
        ingress_start_at_properties_update.time = AAZStrArg(
            options=["time"],
            help="ISO8601 UTC datetime with seconds precision (milliseconds are optional), specifying the date and time that will be the starting point for Events to be consumed.",
            nullable=True,
        )
        ingress_start_at_properties_update.type = AAZStrArg(
            options=["type"],
            help="The type of the ingressStartAt, It can be \"EarliestAvailable\", \"EventSourceCreationTime\", \"CustomEnqueuedTime\".",
            nullable=True,
            enum={"CustomEnqueuedTime": "CustomEnqueuedTime", "EarliestAvailable": "EarliestAvailable", "EventSourceCreationTime": "EventSourceCreationTime"},
        )

        _schema.time = cls._args_ingress_start_at_properties_update.time
        _schema.type = cls._args_ingress_start_at_properties_update.type

    def _execute_operations(self):
        self.pre_operations()
        self.EventSourcesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.EventSourcesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EventSourcesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentName", self.ctx.args.environment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventSourceName", self.ctx.args.event_source_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-05-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_event_source_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class EventSourcesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TimeSeriesInsights/environments/{environmentName}/eventSources/{eventSourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "environmentName", self.ctx.args.environment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventSourceName", self.ctx.args.event_source_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-05-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_event_source_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_const("kind", "Microsoft.EventHub", AAZStrType, ".eventhub", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("kind", "Microsoft.IoTHub", AAZStrType, ".iothub", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("localTimestamp", AAZObjectType, ".local_timestamp")
            _builder.set_prop("tags", AAZDictType, ".tags")
            _builder.discriminate_by("kind", "Microsoft.EventHub")
            _builder.discriminate_by("kind", "Microsoft.IoTHub")

            local_timestamp = _builder.get(".localTimestamp")
            if local_timestamp is not None:
                local_timestamp.set_prop("format", AAZStrType, ".format")
                local_timestamp.set_prop("timeZoneOffset", AAZObjectType, ".time_zone_offset")

            time_zone_offset = _builder.get(".localTimestamp.timeZoneOffset")
            if time_zone_offset is not None:
                time_zone_offset.set_prop("propertyName", AAZStrType, ".property_name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft._event_hub = _builder.get("{kind:Microsoft.EventHub}")
            if disc_microsoft._event_hub is not None:
                disc_microsoft._event_hub.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:Microsoft.EventHub}.properties")
            if properties is not None:
                properties.set_prop("localTimestamp", AAZObjectType, ".eventhub.local_timestamp")
                properties.set_prop("sharedAccessKey", AAZStrType, ".eventhub.shared_access_key", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("timestampPropertyName", AAZStrType, ".eventhub.timestamp_property_name")

            local_timestamp = _builder.get("{kind:Microsoft.EventHub}.properties.localTimestamp")
            if local_timestamp is not None:
                local_timestamp.set_prop("format", AAZStrType, ".format")
                local_timestamp.set_prop("timeZoneOffset", AAZObjectType, ".time_zone_offset")

            time_zone_offset = _builder.get("{kind:Microsoft.EventHub}.properties.localTimestamp.timeZoneOffset")
            if time_zone_offset is not None:
                time_zone_offset.set_prop("propertyName", AAZStrType, ".property_name")

            disc_microsoft._io_t_hub = _builder.get("{kind:Microsoft.IoTHub}")
            if disc_microsoft._io_t_hub is not None:
                disc_microsoft._io_t_hub.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get("{kind:Microsoft.IoTHub}.properties")
            if properties is not None:
                properties.set_prop("localTimestamp", AAZObjectType, ".iothub.local_timestamp")
                properties.set_prop("sharedAccessKey", AAZStrType, ".iothub.shared_access_key", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("timestampPropertyName", AAZStrType, ".iothub.timestamp_property_name")

            local_timestamp = _builder.get("{kind:Microsoft.IoTHub}.properties.localTimestamp")
            if local_timestamp is not None:
                local_timestamp.set_prop("format", AAZStrType, ".format")
                local_timestamp.set_prop("timeZoneOffset", AAZObjectType, ".time_zone_offset")

            time_zone_offset = _builder.get("{kind:Microsoft.IoTHub}.properties.localTimestamp.timeZoneOffset")
            if time_zone_offset is not None:
                time_zone_offset.set_prop("propertyName", AAZStrType, ".property_name")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_ingress_start_at_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("time", AAZStrType, ".time")
        _builder.set_prop("type", AAZStrType, ".type")

    _schema_event_source_resource_read = None

    @classmethod
    def _build_schema_event_source_resource_read(cls, _schema):
        if cls._schema_event_source_resource_read is not None:
            _schema.id = cls._schema_event_source_resource_read.id
            _schema.kind = cls._schema_event_source_resource_read.kind
            _schema.location = cls._schema_event_source_resource_read.location
            _schema.name = cls._schema_event_source_resource_read.name
            _schema.tags = cls._schema_event_source_resource_read.tags
            _schema.type = cls._schema_event_source_resource_read.type
            _schema.discriminate_by(
                "kind",
                "Microsoft.EventHub",
                cls._schema_event_source_resource_read.discriminate_by(
                    "kind",
                    "Microsoft.EventHub",
                )
            )
            _schema.discriminate_by(
                "kind",
                "Microsoft.IoTHub",
                cls._schema_event_source_resource_read.discriminate_by(
                    "kind",
                    "Microsoft.IoTHub",
                )
            )
            return

        cls._schema_event_source_resource_read = _schema_event_source_resource_read = AAZObjectType()

        event_source_resource_read = _schema_event_source_resource_read
        event_source_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        event_source_resource_read.kind = AAZStrType(
            flags={"required": True},
        )
        event_source_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        event_source_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        event_source_resource_read.tags = AAZDictType()
        event_source_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        tags = _schema_event_source_resource_read.tags
        tags.Element = AAZStrType()

        disc_microsoft._event_hub = _schema_event_source_resource_read.discriminate_by("kind", "Microsoft.EventHub")
        disc_microsoft._event_hub.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )

        properties = _schema_event_source_resource_read.discriminate_by("kind", "Microsoft.EventHub").properties
        properties.consumer_group_name = AAZStrType(
            serialized_name="consumerGroupName",
            flags={"required": True},
        )
        properties.creation_time = AAZStrType(
            serialized_name="creationTime",
            flags={"read_only": True},
        )
        properties.event_hub_name = AAZStrType(
            serialized_name="eventHubName",
            flags={"required": True},
        )
        properties.event_source_resource_id = AAZStrType(
            serialized_name="eventSourceResourceId",
            flags={"required": True},
        )
        properties.ingress_start_at = AAZObjectType(
            serialized_name="ingressStartAt",
            flags={"client_flatten": True},
        )
        cls._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
        properties.key_name = AAZStrType(
            serialized_name="keyName",
            flags={"required": True},
        )
        properties.local_timestamp = AAZObjectType(
            serialized_name="localTimestamp",
        )
        cls._build_schema_local_timestamp_read(properties.local_timestamp)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.service_bus_namespace = AAZStrType(
            serialized_name="serviceBusNamespace",
            flags={"required": True},
        )
        properties.timestamp_property_name = AAZStrType(
            serialized_name="timestampPropertyName",
        )

        disc_microsoft._io_t_hub = _schema_event_source_resource_read.discriminate_by("kind", "Microsoft.IoTHub")
        disc_microsoft._io_t_hub.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )

        properties = _schema_event_source_resource_read.discriminate_by("kind", "Microsoft.IoTHub").properties
        properties.consumer_group_name = AAZStrType(
            serialized_name="consumerGroupName",
            flags={"required": True},
        )
        properties.creation_time = AAZStrType(
            serialized_name="creationTime",
            flags={"read_only": True},
        )
        properties.event_source_resource_id = AAZStrType(
            serialized_name="eventSourceResourceId",
            flags={"required": True},
        )
        properties.ingress_start_at = AAZObjectType(
            serialized_name="ingressStartAt",
            flags={"client_flatten": True},
        )
        cls._build_schema_ingress_start_at_properties_read(properties.ingress_start_at)
        properties.iot_hub_name = AAZStrType(
            serialized_name="iotHubName",
            flags={"required": True},
        )
        properties.key_name = AAZStrType(
            serialized_name="keyName",
            flags={"required": True},
        )
        properties.local_timestamp = AAZObjectType(
            serialized_name="localTimestamp",
        )
        cls._build_schema_local_timestamp_read(properties.local_timestamp)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.timestamp_property_name = AAZStrType(
            serialized_name="timestampPropertyName",
        )

        _schema.id = cls._schema_event_source_resource_read.id
        _schema.kind = cls._schema_event_source_resource_read.kind
        _schema.location = cls._schema_event_source_resource_read.location
        _schema.name = cls._schema_event_source_resource_read.name
        _schema.tags = cls._schema_event_source_resource_read.tags
        _schema.type = cls._schema_event_source_resource_read.type
        _schema.discriminate_by(
                "kind",
                "Microsoft.EventHub",
                cls._schema_event_source_resource_read.discriminate_by(
                    "kind",
                    "Microsoft.EventHub",
                )
            )
        _schema.discriminate_by(
                "kind",
                "Microsoft.IoTHub",
                cls._schema_event_source_resource_read.discriminate_by(
                    "kind",
                    "Microsoft.IoTHub",
                )
            )

    _schema_ingress_start_at_properties_read = None

    @classmethod
    def _build_schema_ingress_start_at_properties_read(cls, _schema):
        if cls._schema_ingress_start_at_properties_read is not None:
            _schema.time = cls._schema_ingress_start_at_properties_read.time
            _schema.type = cls._schema_ingress_start_at_properties_read.type
            return

        cls._schema_ingress_start_at_properties_read = _schema_ingress_start_at_properties_read = AAZObjectType()

        ingress_start_at_properties_read = _schema_ingress_start_at_properties_read
        ingress_start_at_properties_read.time = AAZStrType()
        ingress_start_at_properties_read.type = AAZStrType()

        _schema.time = cls._schema_ingress_start_at_properties_read.time
        _schema.type = cls._schema_ingress_start_at_properties_read.type

    _schema_local_timestamp_read = None

    @classmethod
    def _build_schema_local_timestamp_read(cls, _schema):
        if cls._schema_local_timestamp_read is not None:
            _schema.format = cls._schema_local_timestamp_read.format
            _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset
            return

        cls._schema_local_timestamp_read = _schema_local_timestamp_read = AAZObjectType()

        local_timestamp_read = _schema_local_timestamp_read
        local_timestamp_read.format = AAZStrType()
        local_timestamp_read.time_zone_offset = AAZObjectType(
            serialized_name="timeZoneOffset",
        )

        time_zone_offset = _schema_local_timestamp_read.time_zone_offset
        time_zone_offset.property_name = AAZStrType(
            serialized_name="propertyName",
        )

        _schema.format = cls._schema_local_timestamp_read.format
        _schema.time_zone_offset = cls._schema_local_timestamp_read.time_zone_offset


__all__ = ["Update"]
