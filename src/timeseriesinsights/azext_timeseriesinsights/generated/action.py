# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddEventHubEventSourceCreateOrUpdateParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.event_hub_event_source_create_or_update_parameters = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'timestamp-property-name':
                d['timestamp_property_name'] = v[0]
            elif kl == 'event-source-resource-id':
                d['event_source_resource_id'] = v[0]
            elif kl == 'service-bus-namespace':
                d['service_bus_namespace'] = v[0]
            elif kl == 'event-hub-name':
                d['event_hub_name'] = v[0]
            elif kl == 'consumer-group-name':
                d['consumer_group_name'] = v[0]
            elif kl == 'key-name':
                d['key_name'] = v[0]
            elif kl == 'shared-access-key':
                d['shared_access_key'] = v[0]
            elif kl == 'local-timestamp':
                d['local_timestamp'] = v[0]
            elif kl == 'location':
                d['location'] = v[0]
            elif kl == 'tags':
                d['tags'] = v[0]
        d['kind'] = 'Microsoft.EventHub'
        return d


class AddIoTHubEventSourceCreateOrUpdateParameters(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.io_t_hub_event_source_create_or_update_parameters = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'timestamp-property-name':
                d['timestamp_property_name'] = v[0]
            elif kl == 'event-source-resource-id':
                d['event_source_resource_id'] = v[0]
            elif kl == 'iot-hub-name':
                d['iot_hub_name'] = v[0]
            elif kl == 'consumer-group-name':
                d['consumer_group_name'] = v[0]
            elif kl == 'key-name':
                d['key_name'] = v[0]
            elif kl == 'shared-access-key':
                d['shared_access_key'] = v[0]
            elif kl == 'local-timestamp':
                d['local_timestamp'] = v[0]
            elif kl == 'location':
                d['location'] = v[0]
            elif kl == 'tags':
                d['tags'] = v[0]
        d['kind'] = 'Microsoft.IoTHub'
        return d


class AddKeyProperties(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddKeyProperties, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'type':
                d['type'] = v[0]
        return d
