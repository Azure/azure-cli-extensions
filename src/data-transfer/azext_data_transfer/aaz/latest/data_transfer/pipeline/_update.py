# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Update(AAZCommand):
    """Update the pipeline resource.
    """

    _aaz_info = {
        "version": "2025-05-21",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azuredatatransfer/pipelines/{}", "2025-05-21"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pipeline_name = AAZStrArg(
            options=["-n", "--name", "--pipeline-name"],
            help="The name for the pipeline to perform the operation on.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,64}$",
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Identity"

        # define Arg Group "Pipeline"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Pipeline",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.disabled_flow_types = AAZListArg(
            options=["--disabled-flow-types"],
            arg_group="Properties",
            help="The flow types that are disabled for this pipeline",
            nullable=True,
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="Display name of this pipeline",
            nullable=True,
        )
        _args_schema.flow_types = AAZListArg(
            options=["--flow-types"],
            arg_group="Properties",
            help="The flow types allowed for this pipeline",
            nullable=True,
        )
        _args_schema.policies = AAZListArg(
            options=["--policies"],
            arg_group="Properties",
            help="The policies for this pipeline",
            nullable=True,
        )
        _args_schema.quarantine_download_storage_account = AAZStrArg(
            options=["--quarantine-download-storage-account"],
            arg_group="Properties",
            help="Quarantine Download Storage Account",
            nullable=True,
        )
        _args_schema.quarantine_download_storage_container = AAZStrArg(
            options=["--quarantine-download-storage-container"],
            arg_group="Properties",
            help="Quarantine Download Storage Container",
            nullable=True,
        )
        _args_schema.remote_cloud = AAZStrArg(
            options=["--remote-cloud"],
            arg_group="Properties",
            help="Remote cloud of the data to be transferred or received",
        )
        _args_schema.status = AAZStrArg(
            options=["--status"],
            arg_group="Properties",
            help="Status of the current pipeline",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.subscribers = AAZListArg(
            options=["--subscribers"],
            arg_group="Properties",
            help="Subscribers of this resource",
            nullable=True,
        )

        disabled_flow_types = cls._args_schema.disabled_flow_types
        disabled_flow_types.Element = AAZStrArg(
            nullable=True,
            enum={"API": "API", "BasicFiles": "BasicFiles", "Complex": "Complex", "Data": "Data", "DevSecOps": "DevSecOps", "DiskImages": "DiskImages", "Messaging": "Messaging", "MicrosoftInternal": "MicrosoftInternal", "Mission": "Mission", "MissionOpaqueXML": "MissionOpaqueXML", "Opaque": "Opaque", "Standard": "Standard", "StreamingVideo": "StreamingVideo", "Unknown": "Unknown"},
        )

        flow_types = cls._args_schema.flow_types
        flow_types.Element = AAZStrArg(
            nullable=True,
            enum={"API": "API", "BasicFiles": "BasicFiles", "Complex": "Complex", "Data": "Data", "DevSecOps": "DevSecOps", "DiskImages": "DiskImages", "Messaging": "Messaging", "MicrosoftInternal": "MicrosoftInternal", "Mission": "Mission", "MissionOpaqueXML": "MissionOpaqueXML", "Opaque": "Opaque", "Standard": "Standard", "StreamingVideo": "StreamingVideo", "Unknown": "Unknown"},
        )

        policies = cls._args_schema.policies
        policies.Element = AAZStrArg(
            nullable=True,
        )

        subscribers = cls._args_schema.subscribers
        subscribers.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.subscribers.Element
        _element.email = AAZStrArg(
            options=["email"],
            help="Email of the subscriber",
            nullable=True,
        )
        _element.notifications = AAZIntArg(
            options=["notifications"],
            help="Number specifying what notifications to receive",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PipelinesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.PipelinesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PipelinesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "pipelineName", self.ctx.args.pipeline_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-05-21",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_pipeline_read(cls._schema_on_200)

            return cls._schema_on_200

    class PipelinesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/pipelines/{pipelineName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "pipelineName", self.ctx.args.pipeline_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-05-21",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_pipeline_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("disabledFlowTypes", AAZListType, ".disabled_flow_types")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("flowTypes", AAZListType, ".flow_types")
                properties.set_prop("policies", AAZListType, ".policies")
                properties.set_prop("quarantineDownloadStorageAccount", AAZStrType, ".quarantine_download_storage_account")
                properties.set_prop("quarantineDownloadStorageContainer", AAZStrType, ".quarantine_download_storage_container")
                properties.set_prop("remoteCloud", AAZStrType, ".remote_cloud", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("status", AAZStrType, ".status")
                properties.set_prop("subscribers", AAZListType, ".subscribers")

            disabled_flow_types = _builder.get(".properties.disabledFlowTypes")
            if disabled_flow_types is not None:
                disabled_flow_types.set_elements(AAZStrType, ".")

            flow_types = _builder.get(".properties.flowTypes")
            if flow_types is not None:
                flow_types.set_elements(AAZStrType, ".")

            policies = _builder.get(".properties.policies")
            if policies is not None:
                policies.set_elements(AAZStrType, ".")

            subscribers = _builder.get(".properties.subscribers")
            if subscribers is not None:
                subscribers.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.subscribers[]")
            if _elements is not None:
                _elements.set_prop("email", AAZStrType, ".email")
                _elements.set_prop("notifications", AAZIntType, ".notifications")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_pipeline_read = None

    @classmethod
    def _build_schema_pipeline_read(cls, _schema):
        if cls._schema_pipeline_read is not None:
            _schema.id = cls._schema_pipeline_read.id
            _schema.identity = cls._schema_pipeline_read.identity
            _schema.location = cls._schema_pipeline_read.location
            _schema.name = cls._schema_pipeline_read.name
            _schema.properties = cls._schema_pipeline_read.properties
            _schema.system_data = cls._schema_pipeline_read.system_data
            _schema.tags = cls._schema_pipeline_read.tags
            _schema.type = cls._schema_pipeline_read.type
            return

        cls._schema_pipeline_read = _schema_pipeline_read = AAZObjectType()

        pipeline_read = _schema_pipeline_read
        pipeline_read.id = AAZStrType(
            flags={"read_only": True},
        )
        pipeline_read.identity = AAZIdentityObjectType()
        pipeline_read.location = AAZStrType(
            flags={"required": True},
        )
        pipeline_read.name = AAZStrType(
            flags={"read_only": True},
        )
        pipeline_read.properties = AAZObjectType()
        pipeline_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        cls._build_schema_system_data_read(pipeline_read.system_data)
        pipeline_read.tags = AAZDictType()
        pipeline_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_pipeline_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_pipeline_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_pipeline_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_pipeline_read.properties
        properties.connections = AAZListType(
            flags={"read_only": True},
        )
        properties.disabled_flow_types = AAZListType(
            serialized_name="disabledFlowTypes",
        )
        properties.display_name = AAZStrType(
            serialized_name="displayName",
        )
        properties.flow_types = AAZListType(
            serialized_name="flowTypes",
        )
        properties.policies = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.quarantine_download_storage_account = AAZStrType(
            serialized_name="quarantineDownloadStorageAccount",
        )
        properties.quarantine_download_storage_container = AAZStrType(
            serialized_name="quarantineDownloadStorageContainer",
        )
        properties.remote_cloud = AAZStrType(
            serialized_name="remoteCloud",
            flags={"required": True},
        )
        properties.status = AAZStrType()
        properties.subscribers = AAZListType()

        connections = _schema_pipeline_read.properties.connections
        connections.Element = AAZFreeFormDictType()

        disabled_flow_types = _schema_pipeline_read.properties.disabled_flow_types
        disabled_flow_types.Element = AAZStrType()

        flow_types = _schema_pipeline_read.properties.flow_types
        flow_types.Element = AAZStrType()

        policies = _schema_pipeline_read.properties.policies
        policies.Element = AAZStrType()

        subscribers = _schema_pipeline_read.properties.subscribers
        subscribers.Element = AAZObjectType()

        _element = _schema_pipeline_read.properties.subscribers.Element
        _element.email = AAZStrType()
        _element.notifications = AAZIntType()

        tags = _schema_pipeline_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_pipeline_read.id
        _schema.identity = cls._schema_pipeline_read.identity
        _schema.location = cls._schema_pipeline_read.location
        _schema.name = cls._schema_pipeline_read.name
        _schema.properties = cls._schema_pipeline_read.properties
        _schema.system_data = cls._schema_pipeline_read.system_data
        _schema.tags = cls._schema_pipeline_read.tags
        _schema.type = cls._schema_pipeline_read.type

    _schema_system_data_read = None

    @classmethod
    def _build_schema_system_data_read(cls, _schema):
        if cls._schema_system_data_read is not None:
            _schema.created_at = cls._schema_system_data_read.created_at
            _schema.created_by = cls._schema_system_data_read.created_by
            _schema.created_by_type = cls._schema_system_data_read.created_by_type
            _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
            _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
            _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type
            return

        cls._schema_system_data_read = _schema_system_data_read = AAZObjectType(
            flags={"read_only": True}
        )

        system_data_read = _schema_system_data_read
        system_data_read.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data_read.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data_read.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data_read.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data_read.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data_read.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.created_at = cls._schema_system_data_read.created_at
        _schema.created_by = cls._schema_system_data_read.created_by
        _schema.created_by_type = cls._schema_system_data_read.created_by_type
        _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
        _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
        _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type


__all__ = ["Update"]
