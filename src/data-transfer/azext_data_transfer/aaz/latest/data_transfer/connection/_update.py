# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "data-transfer connection update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update the connection resource.

    :example: Update the given connection
        az data-transfer connection update --name connectionName --resourceGroup testRG --tags key1=value1 key2=value2
    """

    _aaz_info = {
        "version": "2025-05-21",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azuredatatransfer/connections/{}", "2025-05-21"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.connection_name = AAZStrArg(
            options=["-n", "--name", "--connection-name"],
            help="The name for the connection to perform the operation on.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,64}$",
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Connection"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Connection",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ConnectionsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConnectionsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "connectionName", self.ctx.args.connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-05-21",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_connection_read(cls._schema_on_200)

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""

    _schema_connection_read = None

    @classmethod
    def _build_schema_connection_read(cls, _schema):
        if cls._schema_connection_read is not None:
            _schema.id = cls._schema_connection_read.id
            _schema.identity = cls._schema_connection_read.identity
            _schema.location = cls._schema_connection_read.location
            _schema.name = cls._schema_connection_read.name
            _schema.properties = cls._schema_connection_read.properties
            _schema.system_data = cls._schema_connection_read.system_data
            _schema.tags = cls._schema_connection_read.tags
            _schema.type = cls._schema_connection_read.type
            return

        cls._schema_connection_read = _schema_connection_read = AAZObjectType()

        connection_read = _schema_connection_read
        connection_read.id = AAZStrType(
            flags={"read_only": True},
        )
        connection_read.identity = AAZIdentityObjectType()
        connection_read.location = AAZStrType(
            flags={"required": True},
        )
        connection_read.name = AAZStrType(
            flags={"read_only": True},
        )
        connection_read.properties = AAZObjectType()
        connection_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        connection_read.tags = AAZDictType()
        connection_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_connection_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_connection_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_connection_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_connection_read.properties
        properties.approver = AAZStrType(
            flags={"read_only": True},
        )
        properties.date_submitted = AAZStrType(
            serialized_name="dateSubmitted",
            flags={"read_only": True},
        )
        properties.direction = AAZStrType()
        properties.flow_types = AAZListType(
            serialized_name="flowTypes",
        )
        properties.force_disabled_status = AAZListType(
            serialized_name="forceDisabledStatus",
            flags={"read_only": True},
        )
        properties.justification = AAZStrType()
        properties.link_status = AAZStrType(
            serialized_name="linkStatus",
            flags={"read_only": True},
        )
        properties.linked_connection_id = AAZStrType(
            serialized_name="linkedConnectionId",
            flags={"read_only": True},
        )
        properties.pin = AAZStrType()
        properties.pipeline = AAZStrType(
            flags={"required": True},
        )
        properties.policies = AAZListType()
        properties.primary_contact = AAZStrType(
            serialized_name="primaryContact",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.remote_subscription_id = AAZStrType(
            serialized_name="remoteSubscriptionId",
        )
        properties.requirement_id = AAZStrType(
            serialized_name="requirementId",
        )
        properties.schema_uris = AAZListType(
            serialized_name="schemaUris",
        )
        properties.schemas = AAZListType()
        properties.secondary_contacts = AAZListType(
            serialized_name="secondaryContacts",
        )
        properties.status = AAZStrType(
            flags={"read_only": True},
        )
        properties.status_reason = AAZStrType(
            serialized_name="statusReason",
            flags={"read_only": True},
        )

        flow_types = _schema_connection_read.properties.flow_types
        flow_types.Element = AAZStrType()

        force_disabled_status = _schema_connection_read.properties.force_disabled_status
        force_disabled_status.Element = AAZStrType()

        policies = _schema_connection_read.properties.policies
        policies.Element = AAZStrType()

        schema_uris = _schema_connection_read.properties.schema_uris
        schema_uris.Element = AAZStrType()

        schemas = _schema_connection_read.properties.schemas
        schemas.Element = AAZObjectType()

        _element = _schema_connection_read.properties.schemas.Element
        _element.connection_id = AAZStrType(
            serialized_name="connectionId",
        )
        _element.content = AAZStrType()
        _element.direction = AAZStrType()
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.schema_type = AAZStrType(
            serialized_name="schemaType",
        )
        _element.schema_uri = AAZStrType(
            serialized_name="schemaUri",
        )
        _element.status = AAZStrType()

        secondary_contacts = _schema_connection_read.properties.secondary_contacts
        secondary_contacts.Element = AAZStrType()

        system_data = _schema_connection_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_connection_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_connection_read.id
        _schema.identity = cls._schema_connection_read.identity
        _schema.location = cls._schema_connection_read.location
        _schema.name = cls._schema_connection_read.name
        _schema.properties = cls._schema_connection_read.properties
        _schema.system_data = cls._schema_connection_read.system_data
        _schema.tags = cls._schema_connection_read.tags
        _schema.type = cls._schema_connection_read.type


__all__ = ["Update"]
