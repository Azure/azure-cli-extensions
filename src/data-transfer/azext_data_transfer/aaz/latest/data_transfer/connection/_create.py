# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "data-transfer connection create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create the connection resource.

    :example: Creates a receive side connection
        az data-transfer connection create --resource-group testRG --connection-name testConnection --flow-types Mission API --location eastus --justification justification --pipeline testdc --requirement-id id --direction Receive --remote-subscription-id 00000000-0000-0000-0000-000000000000
        az data-transfer connection create --resource-group testRG --connection-name testConnection --flow-types ["Mission", "API"] --location eastus --justification justification --pipeline testdc --requirement-id id --direction Receive --remote-subscription-id 00000000-0000-0000-0000-000000000000

    :example: Creates a send side connection
        az data-transfer connection create --resource-group testRG --connection-name testConnection --location eastus --pipeline testdc --pin '$-pe3' --flow-types Api Mission --direction Send
        az data-transfer connection create --resource-group testRG --connection-name testConnection --location 'East US' --pipeline testdc --pin 12345 --flow-types Api Mission --direction Send
    """

    _aaz_info = {
        "version": "2025-05-21",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azuredatatransfer/connections/{}", "2025-05-21"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.connection_name = AAZStrArg(
            options=["-n", "--name", "--connection", "--connection-name"],
            help="The name for the connection to perform the operation on.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,64}$",
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Connection"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Connection",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Connection",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.direction = AAZStrArg(
            options=["--direction"],
            arg_group="Properties",
            help="Direction of data movement. Allowed values: Receive, Send.",
            enum={"Receive": "Receive", "Send": "Send"},
        )
        _args_schema.flow_types = AAZListArg(
            options=["--flow-types"],
            arg_group="Properties",
            help="The flow types being requested for this connection",
        )
        _args_schema.justification = AAZStrArg(
            options=["--justification"],
            arg_group="Properties",
            help="Justification for the connection request",
        )
        _args_schema.pin = AAZStrArg(
            options=["--pin"],
            arg_group="Properties",
            help="PIN to link requests together",
        )
        _args_schema.pipeline = AAZStrArg(
            options=["--pipeline"],
            arg_group="Properties",
            help="Pipeline to use to transfer data",
        )
        _args_schema.primary_contact = AAZStrArg(
            options=["--primary-contact"],
            arg_group="Properties",
            help="The primary contact for this connection request",
        )
        _args_schema.remote_subscription_id = AAZStrArg(
            options=["--remote-subscription-id"],
            arg_group="Properties",
            help="Subscription ID to link cloud subscriptions together",
        )
        _args_schema.requirement_id = AAZStrArg(
            options=["--requirement-id"],
            arg_group="Properties",
            help="Requirement ID of the connection",
        )
        _args_schema.schema_uris = AAZListArg(
            options=["--schema-uris"],
            arg_group="Properties",
            help="The schema URIs for this connection",
        )
        _args_schema.schemas = AAZListArg(
            options=["--schemas"],
            arg_group="Properties",
            help="The schemas for this connection",
        )
        _args_schema.secondary_contacts = AAZListArg(
            options=["--secondary-contacts"],
            arg_group="Properties",
            help="The secondary contacts for this connection request",
        )

        flow_types = cls._args_schema.flow_types
        flow_types.Element = AAZStrArg(
            enum={"API": "API", "BasicFiles": "BasicFiles", "Complex": "Complex", "Data": "Data", "DevSecOps": "DevSecOps", "DiskImages": "DiskImages", "Messaging": "Messaging", "MicrosoftInternal": "MicrosoftInternal", "Mission": "Mission", "MissionOpaqueXML": "MissionOpaqueXML", "Opaque": "Opaque", "Standard": "Standard", "StreamingVideo": "StreamingVideo", "Unknown": "Unknown"},
        )

        schema_uris = cls._args_schema.schema_uris
        schema_uris.Element = AAZStrArg()

        schemas = cls._args_schema.schemas
        schemas.Element = AAZObjectArg()

        _element = cls._args_schema.schemas.Element
        _element.connection_id = AAZStrArg(
            options=["connection-id"],
            help="Connection ID associated with this schema",
        )
        _element.content = AAZStrArg(
            options=["content"],
            help="Content of the schema",
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="The direction of the schema.",
            enum={"Receive": "Receive", "Send": "Send"},
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="ID associated with this schema",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the schema",
        )
        _element.schema_type = AAZStrArg(
            options=["schema-type"],
            help="The Schema Type",
            enum={"Xsd": "Xsd", "Zip": "Zip"},
        )
        _element.schema_uri = AAZStrArg(
            options=["schema-uri"],
            help="Uri containing SAS token for the zipped schema",
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="Status of the schema",
            enum={"Approved": "Approved", "New": "New"},
        )

        secondary_contacts = cls._args_schema.secondary_contacts
        secondary_contacts.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ConnectionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConnectionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "connectionName", self.ctx.args.connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-05-21",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("direction", AAZStrType, ".direction")
                properties.set_prop("flowTypes", AAZListType, ".flow_types")
                properties.set_prop("justification", AAZStrType, ".justification")
                properties.set_prop("pin", AAZStrType, ".pin")
                properties.set_prop("pipeline", AAZStrType, ".pipeline", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("primaryContact", AAZStrType, ".primary_contact")
                properties.set_prop("remoteSubscriptionId", AAZStrType, ".remote_subscription_id")
                properties.set_prop("requirementId", AAZStrType, ".requirement_id")
                properties.set_prop("schemaUris", AAZListType, ".schema_uris")
                properties.set_prop("schemas", AAZListType, ".schemas")
                properties.set_prop("secondaryContacts", AAZListType, ".secondary_contacts")

            flow_types = _builder.get(".properties.flowTypes")
            if flow_types is not None:
                flow_types.set_elements(AAZStrType, ".")

            schema_uris = _builder.get(".properties.schemaUris")
            if schema_uris is not None:
                schema_uris.set_elements(AAZStrType, ".")

            schemas = _builder.get(".properties.schemas")
            if schemas is not None:
                schemas.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.schemas[]")
            if _elements is not None:
                _elements.set_prop("connectionId", AAZStrType, ".connection_id")
                _elements.set_prop("content", AAZStrType, ".content")
                _elements.set_prop("direction", AAZStrType, ".direction")
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("schemaType", AAZStrType, ".schema_type")
                _elements.set_prop("schemaUri", AAZStrType, ".schema_uri")
                _elements.set_prop("status", AAZStrType, ".status")

            secondary_contacts = _builder.get(".properties.secondaryContacts")
            if secondary_contacts is not None:
                secondary_contacts.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZIdentityObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.approver = AAZStrType(
                flags={"read_only": True},
            )
            properties.date_submitted = AAZStrType(
                serialized_name="dateSubmitted",
                flags={"read_only": True},
            )
            properties.direction = AAZStrType()
            properties.flow_types = AAZListType(
                serialized_name="flowTypes",
            )
            properties.force_disabled_status = AAZListType(
                serialized_name="forceDisabledStatus",
                flags={"read_only": True},
            )
            properties.justification = AAZStrType()
            properties.link_status = AAZStrType(
                serialized_name="linkStatus",
                flags={"read_only": True},
            )
            properties.linked_connection_id = AAZStrType(
                serialized_name="linkedConnectionId",
                flags={"read_only": True},
            )
            properties.pin = AAZStrType()
            properties.pipeline = AAZStrType(
                flags={"required": True},
            )
            properties.policies = AAZListType()
            properties.primary_contact = AAZStrType(
                serialized_name="primaryContact",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.remote_subscription_id = AAZStrType(
                serialized_name="remoteSubscriptionId",
            )
            properties.requirement_id = AAZStrType(
                serialized_name="requirementId",
            )
            properties.schema_uris = AAZListType(
                serialized_name="schemaUris",
            )
            properties.schemas = AAZListType()
            properties.secondary_contacts = AAZListType(
                serialized_name="secondaryContacts",
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_reason = AAZStrType(
                serialized_name="statusReason",
                flags={"read_only": True},
            )

            flow_types = cls._schema_on_200_201.properties.flow_types
            flow_types.Element = AAZStrType()

            force_disabled_status = cls._schema_on_200_201.properties.force_disabled_status
            force_disabled_status.Element = AAZStrType()

            policies = cls._schema_on_200_201.properties.policies
            policies.Element = AAZStrType()

            schema_uris = cls._schema_on_200_201.properties.schema_uris
            schema_uris.Element = AAZStrType()

            schemas = cls._schema_on_200_201.properties.schemas
            schemas.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.schemas.Element
            _element.connection_id = AAZStrType(
                serialized_name="connectionId",
            )
            _element.content = AAZStrType()
            _element.direction = AAZStrType()
            _element.id = AAZStrType()
            _element.name = AAZStrType()
            _element.schema_type = AAZStrType(
                serialized_name="schemaType",
            )
            _element.schema_uri = AAZStrType(
                serialized_name="schemaUri",
            )
            _element.status = AAZStrType()

            secondary_contacts = cls._schema_on_200_201.properties.secondary_contacts
            secondary_contacts.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
