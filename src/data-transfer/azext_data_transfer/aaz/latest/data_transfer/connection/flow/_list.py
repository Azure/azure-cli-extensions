# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "data-transfer connection flow list",
    is_preview=True,
)
class List(AAZCommand):
    """List all the flows in a connection.

    :example: Gets flows in a connection
        az data-transfer connection flow list --resource-group testRG --connection-name testConnection
    """

    _aaz_info = {
        "version": "2025-05-21",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.azuredatatransfer/connections/{}/flows", "2025-05-21"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.connection_name = AAZStrArg(
            options=["--connection-name"],
            help="The name for the connection to perform the operation on.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,64}$",
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FlowsListByConnection(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class FlowsListByConnection(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureDataTransfer/connections/{connectionName}/flows",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "connectionName", self.ctx.args.connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-05-21",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.identity = AAZIdentityObjectType()
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.plan = AAZObjectType()
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.value.Element.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.value.Element.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200.value.Element.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            plan = cls._schema_on_200.value.Element.plan
            plan.name = AAZStrType(
                flags={"required": True},
            )
            plan.product = AAZStrType(
                flags={"required": True},
            )
            plan.promotion_code = AAZStrType(
                serialized_name="promotionCode",
            )
            plan.publisher = AAZStrType(
                flags={"required": True},
            )
            plan.version = AAZStrType()

            properties = cls._schema_on_200.value.Element.properties
            properties.api_flow_options = AAZObjectType(
                serialized_name="apiFlowOptions",
            )
            properties.connection = AAZObjectType()
            properties.consumer_group = AAZStrType(
                serialized_name="consumerGroup",
            )
            properties.customer_managed_key_vault_uri = AAZStrType(
                serialized_name="customerManagedKeyVaultUri",
            )
            properties.data_type = AAZStrType(
                serialized_name="dataType",
            )
            properties.destination_endpoint_ports = AAZListType(
                serialized_name="destinationEndpointPorts",
            )
            properties.destination_endpoints = AAZListType(
                serialized_name="destinationEndpoints",
            )
            properties.event_hub_id = AAZStrType(
                serialized_name="eventHubId",
            )
            properties.flow_id = AAZStrType(
                serialized_name="flowId",
                flags={"read_only": True},
            )
            properties.flow_type = AAZStrType(
                serialized_name="flowType",
            )
            properties.force_disabled_status = AAZListType(
                serialized_name="forceDisabledStatus",
                flags={"read_only": True},
            )
            properties.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
            )
            properties.link_status = AAZStrType(
                serialized_name="linkStatus",
                flags={"read_only": True},
            )
            properties.linked_flow_id = AAZStrType(
                serialized_name="linkedFlowId",
                flags={"read_only": True},
            )
            properties.messaging_options = AAZObjectType(
                serialized_name="messagingOptions",
            )
            properties.passphrase = AAZStrType()
            properties.policies = AAZListType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.schema = AAZObjectType()
            properties.service_bus_queue_id = AAZStrType(
                serialized_name="serviceBusQueueId",
            )
            properties.source_addresses = AAZObjectType(
                serialized_name="sourceAddresses",
            )
            properties.status = AAZStrType()
            properties.storage_account_id = AAZStrType(
                serialized_name="storageAccountId",
            )
            properties.storage_account_name = AAZStrType(
                serialized_name="storageAccountName",
            )
            properties.storage_container_name = AAZStrType(
                serialized_name="storageContainerName",
            )
            properties.storage_table_name = AAZStrType(
                serialized_name="storageTableName",
            )
            properties.stream_id = AAZStrType(
                serialized_name="streamId",
            )
            properties.stream_latency = AAZIntType(
                serialized_name="streamLatency",
            )
            properties.stream_protocol = AAZStrType(
                serialized_name="streamProtocol",
            )

            api_flow_options = cls._schema_on_200.value.Element.properties.api_flow_options
            api_flow_options.api_mode = AAZStrType(
                serialized_name="apiMode",
            )
            api_flow_options.audience_override = AAZStrType(
                serialized_name="audienceOverride",
            )
            api_flow_options.cname = AAZStrType()
            api_flow_options.identity_translation = AAZStrType(
                serialized_name="identityTranslation",
            )
            api_flow_options.remote_calling_mode_client_id = AAZStrType(
                serialized_name="remoteCallingModeClientId",
            )
            api_flow_options.remote_endpoint = AAZStrType(
                serialized_name="remoteEndpoint",
            )
            api_flow_options.sender_client_id = AAZStrType(
                serialized_name="senderClientId",
            )

            connection = cls._schema_on_200.value.Element.properties.connection
            connection.id = AAZStrType(
                flags={"required": True},
            )
            connection.location = AAZStrType()
            connection.name = AAZStrType()
            connection.subscription_name = AAZStrType(
                serialized_name="subscriptionName",
            )

            destination_endpoint_ports = cls._schema_on_200.value.Element.properties.destination_endpoint_ports
            destination_endpoint_ports.Element = AAZIntType()

            destination_endpoints = cls._schema_on_200.value.Element.properties.destination_endpoints
            destination_endpoints.Element = AAZStrType()

            force_disabled_status = cls._schema_on_200.value.Element.properties.force_disabled_status
            force_disabled_status.Element = AAZStrType()

            messaging_options = cls._schema_on_200.value.Element.properties.messaging_options
            messaging_options.billing_tier = AAZStrType(
                serialized_name="billingTier",
            )

            policies = cls._schema_on_200.value.Element.properties.policies
            policies.Element = AAZStrType()

            schema = cls._schema_on_200.value.Element.properties.schema
            schema.connection_id = AAZStrType(
                serialized_name="connectionId",
            )
            schema.content = AAZStrType()
            schema.direction = AAZStrType()
            schema.id = AAZStrType()
            schema.name = AAZStrType()
            schema.schema_type = AAZStrType(
                serialized_name="schemaType",
            )
            schema.schema_uri = AAZStrType(
                serialized_name="schemaUri",
            )
            schema.status = AAZStrType()

            source_addresses = cls._schema_on_200.value.Element.properties.source_addresses
            source_addresses.source_addresses = AAZListType(
                serialized_name="sourceAddresses",
            )

            source_addresses = cls._schema_on_200.value.Element.properties.source_addresses.source_addresses
            source_addresses.Element = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
