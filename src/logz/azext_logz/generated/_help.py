# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['logz monitor'] = """
    type: group
    short-summary: Manage monitor with logz
"""

helps['logz monitor list'] = """
    type: command
    short-summary: "List all monitors under the specified resource group. And List all monitors under the specified \
subscription."
    examples:
      - name: Monitors_ListByResourceGroup
        text: |-
               az logz monitor list --resource-group "myResourceGroup"
      - name: Monitors_List
        text: |-
               az logz monitor list
"""

helps['logz monitor show'] = """
    type: command
    short-summary: "Get the properties of a specific monitor resource."
    examples:
      - name: Monitors_Get
        text: |-
               az logz monitor show --name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz monitor create'] = """
    type: command
    short-summary: "Create a monitor resource."
    parameters:
      - name: --logz-organization-properties
        long-summary: |
            Usage: --logz-organization-properties company-name=XX enterprise-app-id=XX

            company-name: Name of the Logz organization.
            enterprise-app-id: The Id of the Enterprise App used for Single sign on.
      - name: --user-info
        long-summary: |
            Usage: --user-info first-name=XX last-name=XX email-address=XX phone-number=XX

            first-name: First Name of the user
            last-name: Last Name of the user
            email-address: Email of the user used by Logz for contacting them if needed
            phone-number: Phone number of the user used by Logz for contacting them if needed
      - name: --plan-data
        long-summary: |
            Usage: --plan-data usage-type=XX billing-cycle=XX plan-details=XX effective-date=XX

            usage-type: different usage type like PAYG/COMMITTED. this could be enum
            billing-cycle: different billing cycles like MONTHLY/WEEKLY. this could be enum
            plan-details: plan id as published by Logz
            effective-date: date when plan was applied
    examples:
      - name: Monitors_Create
        text: |-
               az logz monitor create --name "myMonitor" --location "West US" --plan-data billing-cycle="Monthly" \
effective-date="2019-08-30T15:14:33+02:00" plan-details="logzapitestplan" usage-type="Committed" --user-info \
email-address="alice@microsoft.com" first-name="Alice" last-name="Bob" phone-number="123456" --tags Environment="Dev" \
--resource-group "myResourceGroup"
"""

helps['logz monitor update'] = """
    type: command
    short-summary: "Update a monitor resource."
    examples:
      - name: Monitors_Update
        text: |-
               az logz monitor update --name "myMonitor" --monitoring-status "Enabled" --tags Environment="Dev" \
--resource-group "myResourceGroup"
"""

helps['logz monitor delete'] = """
    type: command
    short-summary: "Delete a monitor resource."
    examples:
      - name: Monitors_Delete
        text: |-
               az logz monitor delete --name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz monitor list-monitored-resource'] = """
    type: command
    short-summary: "List the resources currently being monitored by the Logz monitor resource."
    examples:
      - name: MonitoredResources_List
        text: |-
               az logz monitor list-monitored-resource --name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz monitor wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the logz monitor is met.
    examples:
      - name: Pause executing next line of CLI script until the logz monitor is successfully created.
        text: |-
               az logz monitor wait --name "myMonitor" --resource-group "myResourceGroup" --created
      - name: Pause executing next line of CLI script until the logz monitor is successfully deleted.
        text: |-
               az logz monitor wait --name "myMonitor" --resource-group "myResourceGroup" --deleted
"""

helps['logz tag-rule'] = """
    type: group
    short-summary: Manage tag rule with logz
"""

helps['logz tag-rule list'] = """
    type: command
    short-summary: "List the tag rules for a given monitor resource."
    examples:
      - name: TagRules_List
        text: |-
               az logz tag-rule list --monitor-name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz tag-rule show'] = """
    type: command
    short-summary: "Get a tag rule set for a given monitor resource."
    examples:
      - name: TagRules_Get
        text: |-
               az logz tag-rule show --monitor-name "myMonitor" --resource-group "myResourceGroup" --rule-set-name \
"default"
"""

helps['logz tag-rule create'] = """
    type: command
    short-summary: "Create a tag rule set for a given monitor resource."
    parameters:
      - name: --filtering-tags
        short-summary: "List of filtering tags to be used for capturing logs. This only takes effect if \
SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the \
rules will apply to the list of all available resources. If Include actions are specified, the rules will only include \
resources with the associated tags."
        long-summary: |
            Usage: --filtering-tags name=XX value=XX action=XX

            name: The name (also known as the key) of the tag.
            value: The value of the tag.
            action: Valid actions for a filtering tag. Exclusion takes priority over inclusion.

            Multiple actions can be specified by using more than one --filtering-tags argument.
    examples:
      - name: TagRules_CreateOrUpdate
        text: |-
               az logz tag-rule create --monitor-name "myMonitor" --filtering-tags name="Environment" action="Include" \
value="Prod" --filtering-tags name="Environment" action="Exclude" value="Dev" --send-aad-logs false \
--send-activity-logs true --send-subscription-logs true --resource-group "myResourceGroup" --rule-set-name "default"
"""

helps['logz tag-rule update'] = """
    type: command
    short-summary: "Update a tag rule set for a given monitor resource."
    parameters:
      - name: --filtering-tags
        short-summary: "List of filtering tags to be used for capturing logs. This only takes effect if \
SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the \
rules will apply to the list of all available resources. If Include actions are specified, the rules will only include \
resources with the associated tags."
        long-summary: |
            Usage: --filtering-tags name=XX value=XX action=XX

            name: The name (also known as the key) of the tag.
            value: The value of the tag.
            action: Valid actions for a filtering tag. Exclusion takes priority over inclusion.

            Multiple actions can be specified by using more than one --filtering-tags argument.
"""

helps['logz tag-rule delete'] = """
    type: command
    short-summary: "Delete a tag rule set for a given monitor resource."
    examples:
      - name: TagRules_Delete
        text: |-
               az logz tag-rule delete --monitor-name "myMonitor" --resource-group "myResourceGroup" --rule-set-name \
"default"
"""

helps['logz single-sign-on'] = """
    type: group
    short-summary: Manage single sign on with logz
"""

helps['logz single-sign-on list'] = """
    type: command
    short-summary: "List the single sign-on configurations for a given monitor resource."
    examples:
      - name: SingleSignOnConfigurations_List
        text: |-
               az logz single-sign-on list --monitor-name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz single-sign-on show'] = """
    type: command
    short-summary: "Gets the Logz single sign-on resource for the given Monitor."
    examples:
      - name: SingleSignOnConfigurations_Get
        text: |-
               az logz single-sign-on show --configuration-name "default" --monitor-name "myMonitor" --resource-group \
"myResourceGroup"
"""

helps['logz single-sign-on create'] = """
    type: command
    short-summary: "Configures single-sign-on for this resource."
    parameters:
      - name: --properties
        long-summary: |
            Usage: --properties single-sign-on-state=XX enterprise-app-id=XX single-sign-on-url=XX

            single-sign-on-state: Various states of the SSO resource
            enterprise-app-id: The Id of the Enterprise App used for Single sign-on.
            single-sign-on-url: The login URL specific to this Logz Organization.
    examples:
      - name: SingleSignOnConfigurations_CreateOrUpdate
        text: |-
               az logz single-sign-on create --configuration-name "default" --monitor-name "myMonitor" --properties \
enterprise-app-id="00000000-0000-0000-0000-000000000000" single-sign-on-state="Enable" single-sign-on-url=null \
--resource-group "myResourceGroup"
"""

helps['logz single-sign-on update'] = """
    type: command
    short-summary: "Configures single-sign-on for this resource."
    parameters:
      - name: --properties
        long-summary: |
            Usage: --properties single-sign-on-state=XX enterprise-app-id=XX single-sign-on-url=XX

            single-sign-on-state: Various states of the SSO resource
            enterprise-app-id: The Id of the Enterprise App used for Single sign-on.
            single-sign-on-url: The login URL specific to this Logz Organization.
"""

helps['logz single-sign-on wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the logz single-sign-on is met.
    examples:
      - name: Pause executing next line of CLI script until the logz single-sign-on is successfully created.
        text: |-
               az logz single-sign-on wait --configuration-name "default" --monitor-name "myMonitor" --resource-group \
"myResourceGroup" --created
      - name: Pause executing next line of CLI script until the logz single-sign-on is successfully updated.
        text: |-
               az logz single-sign-on wait --configuration-name "default" --monitor-name "myMonitor" --resource-group \
"myResourceGroup" --updated
"""

helps['logz sub-account'] = """
    type: group
    short-summary: Manage sub account with logz
"""

helps['logz sub-account list'] = """
    type: command
    short-summary: "List the sub account under a given monitor resource."
    examples:
      - name: SubAccount_List
        text: |-
               az logz sub-account list --monitor-name "myMonitor" --resource-group "myResourceGroup"
"""

helps['logz sub-account show'] = """
    type: command
    short-summary: "Get a sub account under a given monitor resource."
    examples:
      - name: SubAccount_Get
        text: |-
               az logz sub-account show --monitor-name "myMonitor" --resource-group "myResourceGroup" --name \
"SubAccount1"
"""

helps['logz sub-account create'] = """
    type: command
    short-summary: "Create sub account under a given monitor resource."
    parameters:
      - name: --logz-organization-properties
        long-summary: |
            Usage: --logz-organization-properties company-name=XX enterprise-app-id=XX

            company-name: Name of the Logz organization.
            enterprise-app-id: The Id of the Enterprise App used for Single sign on.
      - name: --user-info
        long-summary: |
            Usage: --user-info first-name=XX last-name=XX email-address=XX phone-number=XX

            first-name: First Name of the user
            last-name: Last Name of the user
            email-address: Email of the user used by Logz for contacting them if needed
            phone-number: Phone number of the user used by Logz for contacting them if needed
      - name: --plan-data
        long-summary: |
            Usage: --plan-data usage-type=XX billing-cycle=XX plan-details=XX effective-date=XX

            usage-type: different usage type like PAYG/COMMITTED. this could be enum
            billing-cycle: different billing cycles like MONTHLY/WEEKLY. this could be enum
            plan-details: plan id as published by Logz
            effective-date: date when plan was applied
    examples:
      - name: subAccount_Create
        text: |-
               az logz sub-account create --monitor-name "myMonitor" --type "Microsoft.Logz/monitors" --location "West \
US" --monitoring-status "Enabled" --tags Environment="Dev" --resource-group "myResourceGroup" --name "SubAccount1"
"""

helps['logz sub-account update'] = """
    type: command
    short-summary: "Update a monitor resource."
    examples:
      - name: SubAccount_Update
        text: |-
               az logz sub-account update --monitor-name "myMonitor" --monitoring-status "Enabled" --tags \
Environment="Dev" --resource-group "myResourceGroup" --name "SubAccount1"
"""

helps['logz sub-account delete'] = """
    type: command
    short-summary: "Delete a sub account resource."
    examples:
      - name: SubAccount_Delete
        text: |-
               az logz sub-account delete --monitor-name "myMonitor" --resource-group "myResourceGroup" --name \
"someName"
"""

helps['logz sub-account list-monitored-resource'] = """
    type: command
    short-summary: "List the resources currently being monitored by the Logz sub account resource."
    examples:
      - name: SubAccount_MonitoredResources_List
        text: |-
               az logz sub-account list-monitored-resource --monitor-name "myMonitor" --resource-group \
"myResourceGroup" --name "SubAccount1"
"""

helps['logz sub-account wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the logz sub-account is met.
    examples:
      - name: Pause executing next line of CLI script until the logz sub-account is successfully created.
        text: |-
               az logz sub-account wait --monitor-name "myMonitor" --resource-group "myResourceGroup" --name \
"SubAccount1" --created
      - name: Pause executing next line of CLI script until the logz sub-account is successfully deleted.
        text: |-
               az logz sub-account wait --monitor-name "myMonitor" --resource-group "myResourceGroup" --name \
"SubAccount1" --deleted
"""

helps['logz sub-account-tag-rule'] = """
    type: group
    short-summary: Manage sub account tag rule with logz
"""

helps['logz sub-account-tag-rule list'] = """
    type: command
    short-summary: "List the tag rules for a given sub account resource."
    examples:
      - name: SubAccountTagRules_List
        text: |-
               az logz sub-account-tag-rule list --monitor-name "myMonitor" --resource-group "myResourceGroup" \
--sub-account-name "SubAccount1"
"""

helps['logz sub-account-tag-rule show'] = """
    type: command
    short-summary: "Get a tag rule set for a given monitor resource."
    examples:
      - name: SubAccountTagRules_Get
        text: |-
               az logz sub-account-tag-rule show --monitor-name "myMonitor" --resource-group "myResourceGroup" \
--rule-set-name "default" --sub-account-name "SubAccount1"
"""

helps['logz sub-account-tag-rule create'] = """
    type: command
    short-summary: "Create a tag rule set for a given sub account resource."
    parameters:
      - name: --filtering-tags
        short-summary: "List of filtering tags to be used for capturing logs. This only takes effect if \
SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the \
rules will apply to the list of all available resources. If Include actions are specified, the rules will only include \
resources with the associated tags."
        long-summary: |
            Usage: --filtering-tags name=XX value=XX action=XX

            name: The name (also known as the key) of the tag.
            value: The value of the tag.
            action: Valid actions for a filtering tag. Exclusion takes priority over inclusion.

            Multiple actions can be specified by using more than one --filtering-tags argument.
    examples:
      - name: SubAccountTagRules_CreateOrUpdate
        text: |-
               az logz sub-account-tag-rule create --monitor-name "myMonitor" --filtering-tags name="Environment" \
action="Include" value="Prod" --filtering-tags name="Environment" action="Exclude" value="Dev" --send-aad-logs false \
--send-activity-logs true --send-subscription-logs true --resource-group "myResourceGroup" --rule-set-name "default" \
--sub-account-name "SubAccount1"
"""

helps['logz sub-account-tag-rule update'] = """
    type: command
    short-summary: "Update a tag rule set for a given sub account resource."
    parameters:
      - name: --filtering-tags
        short-summary: "List of filtering tags to be used for capturing logs. This only takes effect if \
SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the \
rules will apply to the list of all available resources. If Include actions are specified, the rules will only include \
resources with the associated tags."
        long-summary: |
            Usage: --filtering-tags name=XX value=XX action=XX

            name: The name (also known as the key) of the tag.
            value: The value of the tag.
            action: Valid actions for a filtering tag. Exclusion takes priority over inclusion.

            Multiple actions can be specified by using more than one --filtering-tags argument.
"""

helps['logz sub-account-tag-rule delete'] = """
    type: command
    short-summary: "Delete a tag rule set for a given monitor resource."
    examples:
      - name: TagRules_Delete
        text: |-
               az logz sub-account-tag-rule delete --monitor-name "myMonitor" --resource-group "myResourceGroup" \
--rule-set-name "default" --sub-account-name "SubAccount1"
"""
