# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_logz.generated._client_factory import cf_monitor
    logz_monitor = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._monitors_operations#MonitorsOperations.{}',
        client_factory=cf_monitor)
    with self.command_group('logz monitor', logz_monitor, client_factory=cf_monitor) as g:
        g.custom_command('list', 'logz_monitor_list')
        g.custom_show_command('show', 'logz_monitor_show')
        g.custom_command('create', 'logz_monitor_create', supports_no_wait=True)
        g.custom_command('update', 'logz_monitor_update')
        g.custom_command('delete', 'logz_monitor_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-monitored-resource', 'logz_monitor_list_monitored_resource')
        g.custom_command('list-user-role', 'logz_monitor_list_user_role')
        g.custom_wait_command('wait', 'logz_monitor_show')

    from azext_logz.generated._client_factory import cf_tag_rule
    logz_tag_rule = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._tag_rules_operations#TagRulesOperations.{}',
        client_factory=cf_tag_rule)
    with self.command_group('logz tag-rule', logz_tag_rule, client_factory=cf_tag_rule) as g:
        g.custom_command('list', 'logz_tag_rule_list')
        g.custom_show_command('show', 'logz_tag_rule_show')
        g.custom_command('create', 'logz_tag_rule_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='logz_tag_rule_update')
        g.custom_command('delete', 'logz_tag_rule_delete', confirmation=True)

    from azext_logz.generated._client_factory import cf_single_sign_on
    logz_single_sign_on = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._single_sign_on_operations#SingleSignOnOperations.{}',
        client_factory=cf_single_sign_on)
    with self.command_group('logz single-sign-on', logz_single_sign_on, client_factory=cf_single_sign_on) as g:
        g.custom_command('list', 'logz_single_sign_on_list')
        g.custom_show_command('show', 'logz_single_sign_on_show')
        g.custom_command('create', 'logz_single_sign_on_create', supports_no_wait=True)
        g.generic_update_command('update', setter_arg_name='body', setter_name='begin_create_or_update',
                                 custom_func_name='logz_single_sign_on_update', supports_no_wait=True)
        g.custom_wait_command('wait', 'logz_single_sign_on_show')

    from azext_logz.generated._client_factory import cf_sub_account
    logz_sub_account = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._sub_account_operations#SubAccountOperations.{}',
        client_factory=cf_sub_account)
    with self.command_group('logz sub-account', logz_sub_account, client_factory=cf_sub_account) as g:
        g.custom_command('list', 'logz_sub_account_list')
        g.custom_show_command('show', 'logz_sub_account_show')
        g.custom_command('create', 'logz_sub_account_create', supports_no_wait=True)
        g.custom_command('update', 'logz_sub_account_update')
        g.custom_command('delete', 'logz_sub_account_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-monitored-resource', 'logz_sub_account_list_monitored_resource')
        g.custom_command('list-vm-host', 'logz_sub_account_list_vm_host')
        g.custom_command('list-vm-host-update', 'logz_sub_account_list_vm_host_update')
        g.custom_command('vm-host-payload', 'logz_sub_account_vm_host_payload')
        g.custom_wait_command('wait', 'logz_sub_account_show')

    from azext_logz.generated._client_factory import cf_sub_account_tag_rule
    logz_sub_account_tag_rule = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._sub_account_tag_rules_operations#SubAccountTagRulesO'
        'perations.{}',
        client_factory=cf_sub_account_tag_rule)
    with self.command_group('logz sub-account-tag-rule', logz_sub_account_tag_rule,
                            client_factory=cf_sub_account_tag_rule) as g:
        g.custom_command('list', 'logz_sub_account_tag_rule_list')
        g.custom_show_command('show', 'logz_sub_account_tag_rule_show')
        g.custom_command('create', 'logz_sub_account_tag_rule_create')
        g.generic_update_command('update', setter_arg_name='body',
                                 custom_func_name='logz_sub_account_tag_rule_update')
        g.custom_command('delete', 'logz_sub_account_tag_rule_delete', confirmation=True)

    from azext_logz.generated._client_factory import cf_monitor
    logz_monitor = CliCommandType(
        operations_tmpl='azext_logz.vendored_sdks.logz.operations._monitor_operations#MonitorOperations.{}',
        client_factory=cf_monitor)
    with self.command_group('logz monitor', logz_monitor, client_factory=cf_monitor) as g:
        g.custom_command('list-vm-host', 'logz_monitor_list_vm_host')
        g.custom_command('list-vm-host-update', 'logz_monitor_list_vm_host_update')
        g.custom_command('vm-host-payload', 'logz_monitor_vm_host_payload')

    with self.command_group('logz', is_experimental=True):
        pass
