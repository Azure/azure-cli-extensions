# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_logz.generated._client_factory import (
    cf_monitor,
    cf_tag_rule,
    cf_single_sign_on,
    cf_sub_account,
    cf_sub_account_tag_rule,
)


logz_monitor = CliCommandType(
    operations_tmpl='azext_logz.vendored_sdks.logz.operations._monitors_operations#MonitorsOperations.{}',
    client_factory=cf_monitor,
)


logz_tag_rule = CliCommandType(
    operations_tmpl='azext_logz.vendored_sdks.logz.operations._tag_rules_operations#TagRulesOperations.{}',
    client_factory=cf_tag_rule,
)


logz_single_sign_on = CliCommandType(
    operations_tmpl='azext_logz.vendored_sdks.logz.operations._single_sign_on_operations#SingleSignOnOperations.{}',
    client_factory=cf_single_sign_on,
)


logz_sub_account = CliCommandType(
    operations_tmpl='azext_logz.vendored_sdks.logz.operations._sub_account_operations#SubAccountOperations.{}',
    client_factory=cf_sub_account,
)


logz_sub_account_tag_rule = CliCommandType(
    operations_tmpl=(
        'azext_logz.vendored_sdks.logz.operations._sub_account_tag_rules_operations#SubAccountTagRulesOperations.{}'
    ),
    client_factory=cf_sub_account_tag_rule,
)


def load_command_table(self, _):

    with self.command_group('logz monitor', logz_monitor, client_factory=cf_monitor) as g:
        g.custom_command('list', 'logz_monitor_list')
        g.custom_show_command('show', 'logz_monitor_show')
        g.custom_command('create', 'logz_monitor_create', supports_no_wait=True)
        g.custom_command('update', 'logz_monitor_update')
        g.custom_command('delete', 'logz_monitor_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-payload', 'logz_monitor_list_payload')
        g.custom_command('list-resource', 'logz_monitor_list_resource')
        g.custom_command('list-role', 'logz_monitor_list_role')
        g.custom_command('list-vm', 'logz_monitor_list_vm')
        g.custom_command('update-vm', 'logz_monitor_update_vm')
        g.custom_wait_command('wait', 'logz_monitor_show')

    with self.command_group('logz rule', logz_tag_rule, client_factory=cf_tag_rule) as g:
        g.custom_command('list', 'logz_rule_list')
        g.custom_show_command('show', 'logz_rule_show')
        g.custom_command('create', 'logz_rule_create')
        g.generic_update_command('update', custom_func_name='logz_rule_update', setter_arg_name='body')
        g.custom_command('delete', 'logz_rule_delete', confirmation=True)

    with self.command_group('logz sso', logz_single_sign_on, client_factory=cf_single_sign_on) as g:
        g.custom_command('list', 'logz_sso_list')
        g.custom_show_command('show', 'logz_sso_show')
        g.custom_command('create', 'logz_sso_create', supports_no_wait=True)
        g.generic_update_command(
            'update',
            supports_no_wait=True,
            custom_func_name='logz_sso_update',
            setter_arg_name='body',
            setter_name='begin_create_or_update',
        )
        g.custom_wait_command('wait', 'logz_sso_show')

    with self.command_group('logz sub-account', logz_sub_account, client_factory=cf_sub_account) as g:
        g.custom_command('list', 'logz_sub_account_list')
        g.custom_show_command('show', 'logz_sub_account_show')
        g.custom_command('create', 'logz_sub_account_create', supports_no_wait=True)
        g.custom_command('update', 'logz_sub_account_update')
        g.custom_command('delete', 'logz_sub_account_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-payload', 'logz_sub_account_list_payload')
        g.custom_command('list-resource', 'logz_sub_account_list_resource')
        g.custom_command('list-vm', 'logz_sub_account_list_vm')
        g.custom_command('update-vm', 'logz_sub_account_update_vm')
        g.custom_wait_command('wait', 'logz_sub_account_show')

    with self.command_group('logz sub-rule', logz_sub_account_tag_rule, client_factory=cf_sub_account_tag_rule) as g:
        g.custom_command('list', 'logz_sub_rule_list')
        g.custom_show_command('show', 'logz_sub_rule_show')
        g.custom_command('create', 'logz_sub_rule_create')
        g.generic_update_command('update', custom_func_name='logz_sub_rule_update', setter_arg_name='body')
        g.custom_command('delete', 'logz_sub_rule_delete', confirmation=True)

    with self.command_group('logz', is_experimental=True):
        pass
