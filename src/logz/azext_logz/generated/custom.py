# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def logz_monitor_list(client,
                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def logz_monitor_show(client,
                      resource_group_name,
                      monitor_name):
    return client.get(resource_group_name=resource_group_name,
                      monitor_name=monitor_name)


def logz_monitor_create(client,
                        resource_group_name,
                        monitor_name,
                        location,
                        tags=None,
                        type_=None,
                        monitoring_status=None,
                        marketplace_subscription_status=None,
                        logz_organization_properties=None,
                        user_info=None,
                        plan_data=None,
                        no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if len(body['identity']) == 0:
        del body['identity']
    body['properties'] = {}
    if monitoring_status is not None:
        body['properties']['monitoring_status'] = monitoring_status
    else:
        body['properties']['monitoring_status'] = "Enabled"
    if marketplace_subscription_status is not None:
        body['properties']['marketplace_subscription_status'] = marketplace_subscription_status
    else:
        body['properties']['marketplace_subscription_status'] = "Active"
    if logz_organization_properties is not None:
        body['properties']['logz_organization_properties'] = logz_organization_properties
    if user_info is not None:
        body['properties']['user_info'] = user_info
    if plan_data is not None:
        body['properties']['plan_data'] = plan_data
    if len(body['properties']) == 0:
        del body['properties']
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       monitor_name=monitor_name,
                       body=body)


def logz_monitor_update(client,
                        resource_group_name,
                        monitor_name,
                        tags=None,
                        monitoring_status=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['properties'] = {}
    if monitoring_status is not None:
        body['properties']['monitoring_status'] = monitoring_status
    else:
        body['properties']['monitoring_status'] = "Enabled"
    if len(body['properties']) == 0:
        del body['properties']
    return client.update(resource_group_name=resource_group_name,
                         monitor_name=monitor_name,
                         body=body)


def logz_monitor_delete(client,
                        resource_group_name,
                        monitor_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       monitor_name=monitor_name)


def logz_monitor_list_payload(client,
                              resource_group_name,
                              monitor_name):
    return client.vm_host_payload(resource_group_name=resource_group_name,
                                  monitor_name=monitor_name)


def logz_monitor_list_resource(client,
                               resource_group_name,
                               monitor_name):
    return client.list_monitored_resources(resource_group_name=resource_group_name,
                                           monitor_name=monitor_name)


def logz_monitor_list_role(client,
                           resource_group_name,
                           monitor_name,
                           email_address=None):
    body = {}
    if email_address is not None:
        body['email_address'] = email_address
    return client.list_user_roles(resource_group_name=resource_group_name,
                                  monitor_name=monitor_name,
                                  body=body)


def logz_monitor_list_vm(client,
                         resource_group_name,
                         monitor_name):
    return client.list_vm_hosts(resource_group_name=resource_group_name,
                                monitor_name=monitor_name)


def logz_monitor_update_vm(client,
                           resource_group_name,
                           monitor_name,
                           vm_resource_ids=None,
                           state=None):
    body = {}
    if vm_resource_ids is not None:
        body['vm_resource_ids'] = vm_resource_ids
    if state is not None:
        body['state'] = state
    return client.list_vm_host_update(resource_group_name=resource_group_name,
                                      monitor_name=monitor_name,
                                      body=body)


def logz_rule_list(client,
                   resource_group_name,
                   monitor_name):
    return client.list(resource_group_name=resource_group_name,
                       monitor_name=monitor_name)


def logz_rule_show(client,
                   resource_group_name,
                   monitor_name,
                   rule_set_name):
    return client.get(resource_group_name=resource_group_name,
                      monitor_name=monitor_name,
                      rule_set_name=rule_set_name)


def logz_rule_create(client,
                     resource_group_name,
                     monitor_name,
                     rule_set_name,
                     send_aad_logs=None,
                     send_subscription_logs=None,
                     send_activity_logs=None,
                     filtering_tags=None):
    body = {}
    body['properties'] = {}
    body['properties']['log_rules'] = {}
    if send_aad_logs is not None:
        body['properties']['log_rules']['send_aad_logs'] = send_aad_logs
    if send_subscription_logs is not None:
        body['properties']['log_rules']['send_subscription_logs'] = send_subscription_logs
    if send_activity_logs is not None:
        body['properties']['log_rules']['send_activity_logs'] = send_activity_logs
    if filtering_tags is not None:
        body['properties']['log_rules']['filtering_tags'] = filtering_tags
    if len(body['properties']['log_rules']) == 0:
        del body['properties']['log_rules']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   monitor_name=monitor_name,
                                   rule_set_name=rule_set_name,
                                   body=body)


def logz_rule_update(instance,
                     resource_group_name,
                     monitor_name,
                     rule_set_name,
                     send_aad_logs=None,
                     send_subscription_logs=None,
                     send_activity_logs=None,
                     filtering_tags=None):
    if send_aad_logs is not None:
        instance.properties.log_rules.send_aad_logs = send_aad_logs
    if send_subscription_logs is not None:
        instance.properties.log_rules.send_subscription_logs = send_subscription_logs
    if send_activity_logs is not None:
        instance.properties.log_rules.send_activity_logs = send_activity_logs
    if filtering_tags is not None:
        instance.properties.log_rules.filtering_tags = filtering_tags
    return instance


def logz_rule_delete(client,
                     resource_group_name,
                     monitor_name,
                     rule_set_name):
    return client.delete(resource_group_name=resource_group_name,
                         monitor_name=monitor_name,
                         rule_set_name=rule_set_name)


def logz_sso_list(client,
                  resource_group_name,
                  monitor_name):
    return client.list(resource_group_name=resource_group_name,
                       monitor_name=monitor_name)


def logz_sso_show(client,
                  resource_group_name,
                  monitor_name,
                  configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      monitor_name=monitor_name,
                      configuration_name=configuration_name)


def logz_sso_create(client,
                    resource_group_name,
                    monitor_name,
                    configuration_name,
                    properties=None,
                    no_wait=False):
    body = {}
    if properties is not None:
        body['properties'] = properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       monitor_name=monitor_name,
                       configuration_name=configuration_name,
                       body=body)


def logz_sso_update(instance,
                    resource_group_name,
                    monitor_name,
                    configuration_name,
                    properties=None,
                    no_wait=False):
    if properties is not None:
        instance.properties = properties
    return instance


def logz_sub_account_list(client,
                          resource_group_name,
                          monitor_name):
    return client.list(resource_group_name=resource_group_name,
                       monitor_name=monitor_name)


def logz_sub_account_show(client,
                          resource_group_name,
                          monitor_name,
                          sub_account_name):
    return client.get(resource_group_name=resource_group_name,
                      monitor_name=monitor_name,
                      sub_account_name=sub_account_name)


def logz_sub_account_create(client,
                            resource_group_name,
                            monitor_name,
                            sub_account_name,
                            location,
                            tags=None,
                            type_=None,
                            monitoring_status=None,
                            marketplace_subscription_status=None,
                            logz_organization_properties=None,
                            user_info=None,
                            plan_data=None,
                            no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if len(body['identity']) == 0:
        del body['identity']
    body['properties'] = {}
    if monitoring_status is not None:
        body['properties']['monitoring_status'] = monitoring_status
    else:
        body['properties']['monitoring_status'] = "Enabled"
    if marketplace_subscription_status is not None:
        body['properties']['marketplace_subscription_status'] = marketplace_subscription_status
    else:
        body['properties']['marketplace_subscription_status'] = "Active"
    if logz_organization_properties is not None:
        body['properties']['logz_organization_properties'] = logz_organization_properties
    if user_info is not None:
        body['properties']['user_info'] = user_info
    if plan_data is not None:
        body['properties']['plan_data'] = plan_data
    if len(body['properties']) == 0:
        del body['properties']
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       monitor_name=monitor_name,
                       sub_account_name=sub_account_name,
                       body=body)


def logz_sub_account_update(client,
                            resource_group_name,
                            monitor_name,
                            sub_account_name,
                            tags=None,
                            monitoring_status=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['properties'] = {}
    if monitoring_status is not None:
        body['properties']['monitoring_status'] = monitoring_status
    else:
        body['properties']['monitoring_status'] = "Enabled"
    if len(body['properties']) == 0:
        del body['properties']
    return client.update(resource_group_name=resource_group_name,
                         monitor_name=monitor_name,
                         sub_account_name=sub_account_name,
                         body=body)


def logz_sub_account_delete(client,
                            resource_group_name,
                            monitor_name,
                            sub_account_name,
                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       monitor_name=monitor_name,
                       sub_account_name=sub_account_name)


def logz_sub_account_list_payload(client,
                                  resource_group_name,
                                  monitor_name,
                                  sub_account_name):
    return client.vm_host_payload(resource_group_name=resource_group_name,
                                  monitor_name=monitor_name,
                                  sub_account_name=sub_account_name)


def logz_sub_account_list_resource(client,
                                   resource_group_name,
                                   monitor_name,
                                   sub_account_name):
    return client.list_monitored_resources(resource_group_name=resource_group_name,
                                           monitor_name=monitor_name,
                                           sub_account_name=sub_account_name)


def logz_sub_account_list_vm(client,
                             resource_group_name,
                             monitor_name,
                             sub_account_name):
    return client.list_vm_hosts(resource_group_name=resource_group_name,
                                monitor_name=monitor_name,
                                sub_account_name=sub_account_name)


def logz_sub_account_update_vm(client,
                               resource_group_name,
                               monitor_name,
                               sub_account_name,
                               vm_resource_ids=None,
                               state=None):
    body = {}
    if vm_resource_ids is not None:
        body['vm_resource_ids'] = vm_resource_ids
    if state is not None:
        body['state'] = state
    return client.list_vm_host_update(resource_group_name=resource_group_name,
                                      monitor_name=monitor_name,
                                      sub_account_name=sub_account_name,
                                      body=body)


def logz_sub_rule_list(client,
                       resource_group_name,
                       monitor_name,
                       sub_account_name):
    return client.list(resource_group_name=resource_group_name,
                       monitor_name=monitor_name,
                       sub_account_name=sub_account_name)


def logz_sub_rule_show(client,
                       resource_group_name,
                       monitor_name,
                       sub_account_name,
                       rule_set_name):
    return client.get(resource_group_name=resource_group_name,
                      monitor_name=monitor_name,
                      sub_account_name=sub_account_name,
                      rule_set_name=rule_set_name)


def logz_sub_rule_create(client,
                         resource_group_name,
                         monitor_name,
                         sub_account_name,
                         rule_set_name,
                         send_aad_logs=None,
                         send_subscription_logs=None,
                         send_activity_logs=None,
                         filtering_tags=None):
    body = {}
    body['properties'] = {}
    body['properties']['log_rules'] = {}
    if send_aad_logs is not None:
        body['properties']['log_rules']['send_aad_logs'] = send_aad_logs
    if send_subscription_logs is not None:
        body['properties']['log_rules']['send_subscription_logs'] = send_subscription_logs
    if send_activity_logs is not None:
        body['properties']['log_rules']['send_activity_logs'] = send_activity_logs
    if filtering_tags is not None:
        body['properties']['log_rules']['filtering_tags'] = filtering_tags
    if len(body['properties']['log_rules']) == 0:
        del body['properties']['log_rules']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   monitor_name=monitor_name,
                                   sub_account_name=sub_account_name,
                                   rule_set_name=rule_set_name,
                                   body=body)


def logz_sub_rule_update(instance,
                         resource_group_name,
                         monitor_name,
                         sub_account_name,
                         rule_set_name,
                         send_aad_logs=None,
                         send_subscription_logs=None,
                         send_activity_logs=None,
                         filtering_tags=None):
    if send_aad_logs is not None:
        instance.properties.log_rules.send_aad_logs = send_aad_logs
    if send_subscription_logs is not None:
        instance.properties.log_rules.send_subscription_logs = send_subscription_logs
    if send_activity_logs is not None:
        instance.properties.log_rules.send_activity_logs = send_activity_logs
    if filtering_tags is not None:
        instance.properties.log_rules.filtering_tags = filtering_tags
    return instance


def logz_sub_rule_delete(client,
                         resource_group_name,
                         monitor_name,
                         sub_account_name,
                         rule_set_name):
    return client.delete(resource_group_name=resource_group_name,
                         monitor_name=monitor_name,
                         sub_account_name=sub_account_name,
                         rule_set_name=rule_set_name)
