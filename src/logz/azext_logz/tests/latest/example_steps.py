# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Monitors/put/Monitors_Create
@try_manual
def step_monitor_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor create '
             '--name "{myMonitor}" '
             '--location "West US" '
             '--plan-data billing-cycle="Monthly" effective-date="2019-08-30T15:14:33+02:00" '
             'plan-details="logzapitestplan" usage-type="Committed" '
             '--user-info email-address="alice@microsoft.com" first-name="Alice" last-name="Bob" phone-number="123456" '
             ''
             '--tags Environment="Dev" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az logz monitor wait --created '
             '--name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Monitors/get/Monitors_Get
@try_manual
def step_monitor_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor show '
             '--name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Monitors/get/Monitors_List
@try_manual
def step_monitor_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Monitors/get/Monitors_ListByResourceGroup
@try_manual
def step_monitor_list2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Monitors/patch/Monitors_Update
@try_manual
def step_monitor_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor update '
             '--name "{myMonitor}" '
             '--monitoring-status "Enabled" '
             '--tags Environment="Dev" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Monitors/post/MonitoredResources_List
@try_manual
def step_monitor_list_monitored_resource(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor list-monitored-resource '
             '--name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SingleSignOn/put/SingleSignOnConfigurations_CreateOrUpdate
@try_manual
def step_single_sign_on_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz single-sign-on create '
             '--configuration-name "default" '
             '--monitor-name "{myMonitor}" '
             '--properties enterprise-app-id="00000000-0000-0000-0000-000000000000" single-sign-on-state="Enable" '
             'single-sign-on-url=null '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SingleSignOn/get/SingleSignOnConfigurations_Get
@try_manual
def step_single_sign_on_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz single-sign-on show '
             '--configuration-name "default" '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SingleSignOn/get/SingleSignOnConfigurations_List
@try_manual
def step_single_sign_on_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz single-sign-on list '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SubAccount/put/subAccount_Create
@try_manual
def step_sub_account_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account create '
             '--monitor-name "{myMonitor}" '
             '--type "Microsoft.Logz/monitors" '
             '--location "West US" '
             '--monitoring-status "Enabled" '
             '--tags Environment="Dev" '
             '--resource-group "{rg}" '
             '--name "{mySubAccount}"',
             checks=[])
    test.cmd('az logz sub-account wait --created '
             '--resource-group "{rg}" '
             '--name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccount/get/SubAccount_Get
@try_manual
def step_sub_account_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account show '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccount/get/SubAccount_List
@try_manual
def step_sub_account_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account list '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SubAccount/patch/SubAccount_Update
@try_manual
def step_sub_account_update(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account update '
             '--monitor-name "{myMonitor}" '
             '--monitoring-status "Enabled" '
             '--tags Environment="Dev" '
             '--resource-group "{rg}" '
             '--name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccount/post/SubAccount_MonitoredResources_List
@try_manual
def step_sub_account_list_monitored_resource(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account list-monitored-resource '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccountTagRules/put/SubAccountTagRules_CreateOrUpdate
@try_manual
def step_sub_account_tag_rule_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account-tag-rule create '
             '--monitor-name "{myMonitor}" '
             '--filtering-tags name="Environment" action="Include" value="Prod" '
             '--filtering-tags name="Environment" action="Exclude" value="Dev" '
             '--send-aad-logs false '
             '--send-activity-logs true '
             '--send-subscription-logs true '
             '--resource-group "{rg}" '
             '--rule-set-name "default" '
             '--sub-account-name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccountTagRules/get/SubAccountTagRules_Get
@try_manual
def step_sub_account_tag_rule_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account-tag-rule show '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--rule-set-name "default" '
             '--sub-account-name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccountTagRules/get/SubAccountTagRules_List
@try_manual
def step_sub_account_tag_rule_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account-tag-rule list '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--sub-account-name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccountTagRules/delete/TagRules_Delete
@try_manual
def step_sub_account_tag_rule_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account-tag-rule delete -y '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--rule-set-name "default" '
             '--sub-account-name "{mySubAccount}"',
             checks=checks)


# EXAMPLE: /SubAccount/delete/SubAccount_Delete
@try_manual
def step_sub_account_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz sub-account delete -y '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--name "{mySubAccount2}"',
             checks=checks)


# EXAMPLE: /TagRules/put/TagRules_CreateOrUpdate
@try_manual
def step_tag_rule_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz tag-rule create '
             '--monitor-name "{myMonitor}" '
             '--filtering-tags name="Environment" action="Include" value="Prod" '
             '--filtering-tags name="Environment" action="Exclude" value="Dev" '
             '--send-aad-logs false '
             '--send-activity-logs true '
             '--send-subscription-logs true '
             '--resource-group "{rg}" '
             '--rule-set-name "default"',
             checks=checks)


# EXAMPLE: /TagRules/get/TagRules_Get
@try_manual
def step_tag_rule_show(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz tag-rule show '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--rule-set-name "default"',
             checks=checks)


# EXAMPLE: /TagRules/get/TagRules_List
@try_manual
def step_tag_rule_list(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz tag-rule list '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /TagRules/delete/TagRules_Delete
@try_manual
def step_tag_rule_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz tag-rule delete -y '
             '--monitor-name "{myMonitor}" '
             '--resource-group "{rg}" '
             '--rule-set-name "default"',
             checks=checks)


# EXAMPLE: /Monitors/delete/Monitors_Delete
@try_manual
def step_monitor_delete(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az logz monitor delete -y '
             '--name "{myMonitor}" '
             '--resource-group "{rg}"',
             checks=checks)

