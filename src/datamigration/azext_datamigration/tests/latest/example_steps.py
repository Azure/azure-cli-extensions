# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /SqlMigrationServices/put/Create or Update SQL Migration Service with maximum parameters.
@try_manual
def step_sql_service_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service create '
             '--location "northeurope" '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService}"',
             checks=[])
    test.cmd('az datamigration sql-service wait --created '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/put/Create or Update SQL Migration Service with minimum parameters.
@try_manual
def step_sql_service_create2(test, checks=None):
    return step_sql_service_create(test, checks)
    test.cmd('az datamigration sql-service wait --created '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/get/Get Migration Service.
@try_manual
def step_sql_service_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service show '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/get/Get Migration Services in the Resource Group.
@try_manual
def step_sql_service_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/get/Get Services in the Subscriptions.
@try_manual
def step_sql_service_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service list '
             '-g ""',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/get/List database migrations attached to the service.
@try_manual
def step_sql_service_list_migration(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service list-migration '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/patch/Update SQL Migration Service.
@try_manual
def step_sql_service_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service update '
             '--tags mytag="myval" '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/post/Delete the integration runtime node.
@try_manual
def step_sql_service_delete_node(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service delete-node '
             '--ir-name "IRName" '
             '--node-name "nodeName" '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/post/Regenerate the of Authentication Keys.
@try_manual
def step_sql_service_regenerate_auth_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service regenerate-auth-key '
             '--key-name "authKey1" '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/post/Retrieve the List of Authentication Keys.
@try_manual
def step_sql_service_list_auth_key(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service list-auth-key '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/post/Retrieve the Monitoring Data.
@try_manual
def step_sql_service_list_integration_runtime_metric(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service list-integration-runtime-metric '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/put/Create or Update Database Migration resource with Maximum parameters.
@try_manual
def step_sql_db_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db create '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/servers/sqldbinstan'
             'ce" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--table-list "[Schema1].[TableName1]" "[Schema2].[TableName2]" '
             '--target-sql-connection authentication="SqlAuthentication" data-source="sqldbinstance" '
             'encrypt-connection=true password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/put/Create or Update Database Migration resource with Minimum parameters.
@try_manual
def step_sql_db_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db create '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/servers/sqldbinstan'
             'ce" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--target-sql-connection authentication="SqlAuthentication" data-source="sqldbinstance" '
             'encrypt-connection=true password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/get/Get Sql DB database Migration with the expand parameter.
@try_manual
def step_sql_db_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db show '
             '--expand "MigrationStatusDetails" '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/get/Get Sql DB database Migration without the expand parameter.
@try_manual
def step_sql_db_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db show '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/post/Stop ongoing migration for the database.
@try_manual
def step_sql_db_cancel(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db cancel '
             '--migration-operation-id "9a90bb84-e70f-46f7-b0ae-1aef5b3b9f07" '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlDb/delete/Delete Database Migration resource.
@try_manual
def step_sql_db_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-db delete -y '
             '--resource-group "{rg}" '
             '--sqldb-instance-name "sqldbinstance" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/put/Create or Update Database Migration resource with Maximum parameters.
@try_manual
def step_sql_managed_instance_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance create '
             '--managed-instance-name "managedInstance1" '
             '--source-location "{{\\"fileShare\\":{{\\"path\\":\\"C:\\\\\\\\aaa\\\\\\\\bbb\\\\\\\\ccc\\",\\"password\\'
             '":\\"placeholder\\",\\"username\\":\\"name\\"}}}}" '
             '--target-location account-key="abcd" storage-account-resource-id="account.database.windows.net" '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--offline-configuration last-backup-name="last_backup_file_name" offline=true '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/managedInstances/in'
             'stance" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/put/Create or Update Database Migration resource with Minimum parameters.
@try_manual
def step_sql_managed_instance_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance create '
             '--managed-instance-name "managedInstance1" '
             '--source-location "{{\\"fileShare\\":{{\\"path\\":\\"C:\\\\\\\\aaa\\\\\\\\bbb\\\\\\\\ccc\\",\\"password\\'
             '":\\"placeholder\\",\\"username\\":\\"name\\"}}}}" '
             '--target-location account-key="abcd" storage-account-resource-id="account.database.windows.net" '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Sql/managedInstances/in'
             'stance" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/get/Get Sql MI database Migration with the expand parameter.
@try_manual
def step_sql_managed_instance_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance show '
             '--expand "MigrationStatusDetails" '
             '--managed-instance-name "managedInstance1" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/get/Get Sql MI database Migration without the expand parameter.
@try_manual
def step_sql_managed_instance_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance show '
             '--managed-instance-name "managedInstance1" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/post/Cutover online migration operation for the database.
@try_manual
def step_sql_managed_instance_cutover(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance cutover '
             '--managed-instance-name "managedInstance1" '
             '--migration-operation-id "4124fe90-d1b6-4b50-b4d9-46d02381f59a" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlMi/post/Stop ongoing migration for the database.
@try_manual
def step_sql_managed_instance_cancel(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-managed-instance cancel '
             '--managed-instance-name "managedInstance1" '
             '--migration-operation-id "4124fe90-d1b6-4b50-b4d9-46d02381f59a" '
             '--resource-group "{rg}" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/put/Create or Update Database Migration resource with Maximum parameters.
@try_manual
def step_sql_vm_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm create '
             '--source-location "{{\\"fileShare\\":{{\\"path\\":\\"C:\\\\\\\\aaa\\\\\\\\bbb\\\\\\\\ccc\\",\\"password\\'
             '":\\"placeholder\\",\\"username\\":\\"name\\"}}}}" '
             '--target-location account-key="abcd" storage-account-resource-id="account.database.windows.net" '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--offline-configuration last-backup-name="last_backup_file_name" offline=true '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.SqlVirtualMachine/sqlVi'
             'rtualMachines/testvm" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/put/Create or Update Database Migration resource with Minimum parameters.
@try_manual
def step_sql_vm_create2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm create '
             '--source-location "{{\\"fileShare\\":{{\\"path\\":\\"C:\\\\\\\\aaa\\\\\\\\bbb\\\\\\\\ccc\\",\\"password\\'
             '":\\"placeholder\\",\\"username\\":\\"name\\"}}}}" '
             '--target-location account-key="abcd" storage-account-resource-id="account.database.windows.net" '
             '--migration-service "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataMigrati'
             'on/sqlMigrationServices/{mySqlMigrationService}" '
             '--scope "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.SqlVirtualMachine/sqlVi'
             'rtualMachines/testvm" '
             '--source-database-name "aaa" '
             '--source-sql-connection authentication="WindowsAuthentication" data-source="aaa" encrypt-connection=true '
             'password="placeholder" trust-server-certificate=true user-name="bbb" '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/get/Get Sql VM database Migration with the expand parameter.
@try_manual
def step_sql_vm_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm show '
             '--expand "MigrationStatusDetails" '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/get/Get Sql VM database Migration without the expand parameter.
@try_manual
def step_sql_vm_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm show '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/post/Cutover online migration operation for the database.
@try_manual
def step_sql_vm_cutover(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm cutover '
             '--migration-operation-id "4124fe90-d1b6-4b50-b4d9-46d02381f59a" '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /DatabaseMigrationsSqlVm/post/Stop ongoing migration for the database.
@try_manual
def step_sql_vm_cancel(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-vm cancel '
             '--migration-operation-id "4124fe90-d1b6-4b50-b4d9-46d02381f59a" '
             '--resource-group "{rg}" '
             '--sql-vm-name "testvm" '
             '--target-db-name "db1"',
             checks=checks)


# EXAMPLE: /SqlMigrationServices/delete/Delete SQL Migration Service.
@try_manual
def step_sql_service_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az datamigration sql-service delete -y '
             '--resource-group "{rg}" '
             '--name "{mySqlMigrationService2}"',
             checks=checks)
