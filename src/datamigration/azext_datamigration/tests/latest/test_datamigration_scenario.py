# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_sql_service_create
from .example_steps import step_sql_service_create2
from .example_steps import step_sql_service_show
from .example_steps import step_sql_service_list
from .example_steps import step_sql_service_list2
from .example_steps import step_sql_service_list_migration
from .example_steps import step_sql_service_update
from .example_steps import step_sql_service_delete_node
from .example_steps import step_sql_service_regenerate_auth_key
from .example_steps import step_sql_service_list_auth_key
from .example_steps import step_sql_service_list_integration_runtime_metric
from .example_steps import step_sql_db_create
from .example_steps import step_sql_db_create2
from .example_steps import step_sql_db_show
from .example_steps import step_sql_db_show2
from .example_steps import step_sql_db_cancel
from .example_steps import step_sql_db_delete
from .example_steps import step_sql_managed_instance_create
from .example_steps import step_sql_managed_instance_create2
from .example_steps import step_sql_managed_instance_show
from .example_steps import step_sql_managed_instance_show2
from .example_steps import step_sql_managed_instance_cutover
from .example_steps import step_sql_managed_instance_cancel
from .example_steps import step_sql_vm_create
from .example_steps import step_sql_vm_create2
from .example_steps import step_sql_vm_show
from .example_steps import step_sql_vm_show2
from .example_steps import step_sql_vm_cutover
from .example_steps import step_sql_vm_cancel
from .example_steps import step_sql_service_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_sql_service_create(test, checks=[
        test.check("location", "northeurope", case_sensitive=False),
        test.check("name", "{mySqlMigrationService}", case_sensitive=False),
    ])
    step_sql_service_create2(test, checks=[
        test.check("location", "northeurope", case_sensitive=False),
        test.check("name", "{mySqlMigrationService}", case_sensitive=False),
    ])
    step_sql_service_show(test, checks=[])
    step_sql_service_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_sql_service_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_sql_service_list_migration(test, checks=[])
    step_sql_service_update(test, checks=[
        test.check("location", "northeurope", case_sensitive=False),
        test.check("name", "{mySqlMigrationService}", case_sensitive=False),
        test.check("tags.mytag", "myval", case_sensitive=False),
    ])
    step_sql_service_delete_node(test, checks=[])
    step_sql_service_regenerate_auth_key(test, checks=[])
    step_sql_service_list_auth_key(test, checks=[])
    step_sql_service_list_integration_runtime_metric(test, checks=[])
    step_sql_db_create(test, checks=[])
    step_sql_db_create2(test, checks=[])
    step_sql_db_show(test, checks=[])
    step_sql_db_show2(test, checks=[])
    step_sql_db_cancel(test, checks=[])
    step_sql_db_delete(test, checks=[])
    step_sql_managed_instance_create(test, checks=[])
    step_sql_managed_instance_create2(test, checks=[])
    step_sql_managed_instance_show(test, checks=[])
    step_sql_managed_instance_show2(test, checks=[])
    step_sql_managed_instance_cutover(test, checks=[])
    step_sql_managed_instance_cancel(test, checks=[])
    step_sql_vm_create(test, checks=[])
    step_sql_vm_create2(test, checks=[])
    step_sql_vm_show(test, checks=[])
    step_sql_vm_show2(test, checks=[])
    step_sql_vm_cutover(test, checks=[])
    step_sql_vm_cancel(test, checks=[])
    step_sql_service_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class DatamigrationScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(DatamigrationScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'mySqlMigrationService': 'testagent',
            'mySqlMigrationService2': 'service1',
        })

    @ResourceGroupPreparer(name_prefix='clitestdatamigration_testrg'[:7], key='rg', parameter_name='rg')
    def test_datamigration_Scenario(self, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
