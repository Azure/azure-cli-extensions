# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_datamigration.generated._client_factory import (
    cf_database_migration_sqldb,
    cf_database_migration_sqlmi,
    cf_database_migration_sqlvm,
    cf_sqlmigration_service,
)


datamigration_database_migration_sqldb = CliCommandType(
    operations_tmpl='azext_datamigration.vendored_sdks.datamigration.operations._database_migrations_sql_db_operations#DatabaseMigrationsSqlDbOperations.{}',
    client_factory=cf_database_migration_sqldb,
)


datamigration_database_migration_sqlmi = CliCommandType(
    operations_tmpl='azext_datamigration.vendored_sdks.datamigration.operations._database_migrations_sql_mi_operations#DatabaseMigrationsSqlMiOperations.{}',
    client_factory=cf_database_migration_sqlmi,
)


datamigration_sqlmigration_service = CliCommandType(
    operations_tmpl='azext_datamigration.vendored_sdks.datamigration.operations._sql_migration_services_operations#SqlMigrationServicesOperations.{}',
    client_factory=cf_sqlmigration_service,
)


datamigration_database_migration_sqlvm = CliCommandType(
    operations_tmpl='azext_datamigration.vendored_sdks.datamigration.operations._database_migrations_sql_vm_operations#DatabaseMigrationsSqlVmOperations.{}',
    client_factory=cf_database_migration_sqlvm,
)


def load_command_table(self, _):

    with self.command_group(
        'datamigration sql-db', datamigration_database_migration_sqldb, client_factory=cf_database_migration_sqldb
    ) as g:
        g.custom_show_command('show', 'datamigration_sql_db_show')
        g.custom_command('create', 'datamigration_sql_db_create', supports_no_wait=True)
        g.custom_command('delete', 'datamigration_sql_db_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('cancel', 'datamigration_sql_db_cancel', supports_no_wait=True)
        g.custom_wait_command('wait', 'datamigration_sql_db_show')

    with self.command_group(
        'datamigration sql-managed-instance',
        datamigration_database_migration_sqlmi,
        client_factory=cf_database_migration_sqlmi,
    ) as g:
        g.custom_show_command('show', 'datamigration_sql_managed_instance_show')
        g.custom_command('create', 'datamigration_sql_managed_instance_create', supports_no_wait=True)
        g.custom_command('cancel', 'datamigration_sql_managed_instance_cancel', supports_no_wait=True)
        g.custom_command('cutover', 'datamigration_sql_managed_instance_cutover', supports_no_wait=True)
        g.custom_wait_command('wait', 'datamigration_sql_managed_instance_show')

    with self.command_group(
        'datamigration sql-service', datamigration_sqlmigration_service, client_factory=cf_sqlmigration_service
    ) as g:
        g.custom_command('list', 'datamigration_sql_service_list')
        g.custom_show_command('show', 'datamigration_sql_service_show')
        g.custom_command('create', 'datamigration_sql_service_create', supports_no_wait=True)
        g.custom_command('update', 'datamigration_sql_service_update', supports_no_wait=True)
        g.custom_command('delete', 'datamigration_sql_service_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('delete-node', 'datamigration_sql_service_delete_node')
        g.custom_command('list-auth-key', 'datamigration_sql_service_list_auth_key')
        g.custom_command('list-integration-runtime-metric', 'datamigration_sql_service_list_integration_runtime_metric')
        g.custom_command('list-migration', 'datamigration_sql_service_list_migration')
        g.custom_command('regenerate-auth-key', 'datamigration_sql_service_regenerate_auth_key')
        g.custom_wait_command('wait', 'datamigration_sql_service_show')

    with self.command_group(
        'datamigration sql-vm', datamigration_database_migration_sqlvm, client_factory=cf_database_migration_sqlvm
    ) as g:
        g.custom_show_command('show', 'datamigration_sql_vm_show')
        g.custom_command('create', 'datamigration_sql_vm_create', supports_no_wait=True)
        g.custom_command('cancel', 'datamigration_sql_vm_cancel', supports_no_wait=True)
        g.custom_command('cutover', 'datamigration_sql_vm_cutover', supports_no_wait=True)
        g.custom_wait_command('wait', 'datamigration_sql_vm_show')

    with self.command_group('datamigration', is_experimental=True):
        pass
