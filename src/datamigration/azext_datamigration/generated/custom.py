# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def datamigration_sql_db_show(client,
                              resource_group_name,
                              sqldb_instance_name,
                              target_db_name,
                              migration_operation_id=None,
                              expand=None):
    return client.get(resource_group_name=resource_group_name,
                      sql_db_instance_name=sqldb_instance_name,
                      target_db_name=target_db_name,
                      migration_operation_id=migration_operation_id,
                      expand=expand)


def datamigration_sql_db_create(client,
                                resource_group_name,
                                sqldb_instance_name,
                                target_db_name,
                                scope=None,
                                source_sql_connection=None,
                                source_database_name=None,
                                migration_service=None,
                                target_db_collation=None,
                                target_sql_connection=None,
                                table_list=None,
                                no_wait=False):
    parameters = {}
    parameters['properties'] = {}
    if scope is not None:
        parameters['properties']['scope'] = scope
    if source_sql_connection is not None:
        parameters['properties']['source_sql_connection'] = source_sql_connection
    if source_database_name is not None:
        parameters['properties']['source_database_name'] = source_database_name
    if migration_service is not None:
        parameters['properties']['migration_service'] = migration_service
    if target_db_collation is not None:
        parameters['properties']['target_database_collation'] = target_db_collation
    if target_sql_connection is not None:
        parameters['properties']['target_sql_connection'] = target_sql_connection
    if table_list is not None:
        parameters['properties']['table_list'] = table_list
    if len(parameters['properties']) == 0:
        del parameters['properties']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       sql_db_instance_name=sqldb_instance_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_db_delete(client,
                                resource_group_name,
                                sqldb_instance_name,
                                target_db_name,
                                force=None,
                                no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       sql_db_instance_name=sqldb_instance_name,
                       target_db_name=target_db_name,
                       force=force)


def datamigration_sql_db_cancel(client,
                                resource_group_name,
                                sqldb_instance_name,
                                target_db_name,
                                migration_operation_id,
                                no_wait=False):
    parameters = {}
    parameters['migration_operation_id'] = migration_operation_id
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       sql_db_instance_name=sqldb_instance_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_managed_instance_show(client,
                                            resource_group_name,
                                            managed_instance_name,
                                            target_db_name,
                                            migration_operation_id=None,
                                            expand=None):
    return client.get(resource_group_name=resource_group_name,
                      managed_instance_name=managed_instance_name,
                      target_db_name=target_db_name,
                      migration_operation_id=migration_operation_id,
                      expand=expand)


def datamigration_sql_managed_instance_create(client,
                                              resource_group_name,
                                              managed_instance_name,
                                              target_db_name,
                                              scope=None,
                                              source_sql_connection=None,
                                              source_database_name=None,
                                              migration_service=None,
                                              target_db_collation=None,
                                              offline_configuration=None,
                                              source_location=None,
                                              target_location=None,
                                              no_wait=False):
    parameters = {}
    parameters['properties'] = {}
    if scope is not None:
        parameters['properties']['scope'] = scope
    if source_sql_connection is not None:
        parameters['properties']['source_sql_connection'] = source_sql_connection
    if source_database_name is not None:
        parameters['properties']['source_database_name'] = source_database_name
    if migration_service is not None:
        parameters['properties']['migration_service'] = migration_service
    if target_db_collation is not None:
        parameters['properties']['target_database_collation'] = target_db_collation
    if offline_configuration is not None:
        parameters['properties']['offline_configuration'] = offline_configuration
    parameters['properties']['backup_configuration'] = {}
    if source_location is not None:
        parameters['properties']['backup_configuration']['source_location'] = source_location
    if target_location is not None:
        parameters['properties']['backup_configuration']['target_location'] = target_location
    if len(parameters['properties']['backup_configuration']) == 0:
        del parameters['properties']['backup_configuration']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       managed_instance_name=managed_instance_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_managed_instance_cancel(client,
                                              resource_group_name,
                                              managed_instance_name,
                                              target_db_name,
                                              migration_operation_id,
                                              no_wait=False):
    parameters = {}
    parameters['migration_operation_id'] = migration_operation_id
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       managed_instance_name=managed_instance_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_managed_instance_cutover(client,
                                               resource_group_name,
                                               managed_instance_name,
                                               target_db_name,
                                               migration_operation_id,
                                               no_wait=False):
    parameters = {}
    parameters['migration_operation_id'] = migration_operation_id
    return sdk_no_wait(no_wait,
                       client.begin_cutover,
                       resource_group_name=resource_group_name,
                       managed_instance_name=managed_instance_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_vm_show(client,
                              resource_group_name,
                              sql_vm_name,
                              target_db_name,
                              migration_operation_id=None,
                              expand=None):
    return client.get(resource_group_name=resource_group_name,
                      sql_virtual_machine_name=sql_vm_name,
                      target_db_name=target_db_name,
                      migration_operation_id=migration_operation_id,
                      expand=expand)


def datamigration_sql_vm_create(client,
                                resource_group_name,
                                sql_vm_name,
                                target_db_name,
                                scope=None,
                                source_sql_connection=None,
                                source_database_name=None,
                                migration_service=None,
                                target_db_collation=None,
                                offline_configuration=None,
                                source_location=None,
                                target_location=None,
                                no_wait=False):
    parameters = {}
    parameters['properties'] = {}
    if scope is not None:
        parameters['properties']['scope'] = scope
    if source_sql_connection is not None:
        parameters['properties']['source_sql_connection'] = source_sql_connection
    if source_database_name is not None:
        parameters['properties']['source_database_name'] = source_database_name
    if migration_service is not None:
        parameters['properties']['migration_service'] = migration_service
    if target_db_collation is not None:
        parameters['properties']['target_database_collation'] = target_db_collation
    if offline_configuration is not None:
        parameters['properties']['offline_configuration'] = offline_configuration
    parameters['properties']['backup_configuration'] = {}
    if source_location is not None:
        parameters['properties']['backup_configuration']['source_location'] = source_location
    if target_location is not None:
        parameters['properties']['backup_configuration']['target_location'] = target_location
    if len(parameters['properties']['backup_configuration']) == 0:
        del parameters['properties']['backup_configuration']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       sql_virtual_machine_name=sql_vm_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_vm_cancel(client,
                                resource_group_name,
                                sql_vm_name,
                                target_db_name,
                                migration_operation_id,
                                no_wait=False):
    parameters = {}
    parameters['migration_operation_id'] = migration_operation_id
    return sdk_no_wait(no_wait,
                       client.begin_cancel,
                       resource_group_name=resource_group_name,
                       sql_virtual_machine_name=sql_vm_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_vm_cutover(client,
                                 resource_group_name,
                                 sql_vm_name,
                                 target_db_name,
                                 migration_operation_id,
                                 no_wait=False):
    parameters = {}
    parameters['migration_operation_id'] = migration_operation_id
    return sdk_no_wait(no_wait,
                       client.begin_cutover,
                       resource_group_name=resource_group_name,
                       sql_virtual_machine_name=sql_vm_name,
                       target_db_name=target_db_name,
                       parameters=parameters)


def datamigration_sql_service_list(client,
                                   resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def datamigration_sql_service_show(client,
                                   resource_group_name,
                                   sql_migration_service_name):
    return client.get(resource_group_name=resource_group_name,
                      sql_migration_service_name=sql_migration_service_name)


def datamigration_sql_service_create(client,
                                     resource_group_name,
                                     sql_migration_service_name,
                                     location=None,
                                     tags=None,
                                     no_wait=False):
    parameters = {}
    if location is not None:
        parameters['location'] = location
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       sql_migration_service_name=sql_migration_service_name,
                       parameters=parameters)


def datamigration_sql_service_update(client,
                                     resource_group_name,
                                     sql_migration_service_name,
                                     tags=None,
                                     no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       sql_migration_service_name=sql_migration_service_name,
                       parameters=parameters)


def datamigration_sql_service_delete(client,
                                     resource_group_name,
                                     sql_migration_service_name,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       sql_migration_service_name=sql_migration_service_name)


def datamigration_sql_service_delete_node(client,
                                          resource_group_name,
                                          sql_migration_service_name,
                                          node_name=None,
                                          integration_runtime_name=None):
    parameters = {}
    if node_name is not None:
        parameters['node_name'] = node_name
    if integration_runtime_name is not None:
        parameters['integration_runtime_name'] = integration_runtime_name
    return client.delete_node(resource_group_name=resource_group_name,
                              sql_migration_service_name=sql_migration_service_name,
                              parameters=parameters)


def datamigration_sql_service_list_auth_key(client,
                                            resource_group_name,
                                            sql_migration_service_name):
    return client.list_auth_keys(resource_group_name=resource_group_name,
                                 sql_migration_service_name=sql_migration_service_name)


def datamigration_sql_service_list_integration_runtime_metric(client,
                                                              resource_group_name,
                                                              sql_migration_service_name):
    return client.list_monitoring_data(resource_group_name=resource_group_name,
                                       sql_migration_service_name=sql_migration_service_name)


def datamigration_sql_service_list_migration(client,
                                             resource_group_name,
                                             sql_migration_service_name):
    return client.list_migrations(resource_group_name=resource_group_name,
                                  sql_migration_service_name=sql_migration_service_name)


def datamigration_sql_service_regenerate_auth_key(client,
                                                  resource_group_name,
                                                  sql_migration_service_name,
                                                  key_name=None,
                                                  auth_key1=None,
                                                  auth_key2=None):
    parameters = {}
    if key_name is not None:
        parameters['key_name'] = key_name
    if auth_key1 is not None:
        parameters['auth_key1'] = auth_key1
    if auth_key2 is not None:
        parameters['auth_key2'] = auth_key2
    return client.regenerate_auth_keys(resource_group_name=resource_group_name,
                                       sql_migration_service_name=sql_migration_service_name,
                                       parameters=parameters)
