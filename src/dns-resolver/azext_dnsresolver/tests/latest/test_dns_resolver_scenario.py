# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .preparers import SubnetPreparer
from .example_steps import step_create
from .example_steps import step_list
from .example_steps import step_list2
from .example_steps import step_show
from .example_steps import step_update
from .example_steps import step_list3
from .example_steps import step_forwarding_ruleset_create
from .example_steps import step_forwarding_ruleset_list
from .example_steps import step_forwarding_ruleset_list2
from .example_steps import step_forwarding_ruleset_show
from .example_steps import step_forwarding_ruleset_update
from .example_steps import step_forwarding_ruleset_list3
from .example_steps import step_forwarding_rule_create
from .example_steps import step_forwarding_rule_list
from .example_steps import step_forwarding_rule_show
from .example_steps import step_forwarding_rule_update
from .example_steps import step_forwarding_rule_delete
from .example_steps import step_forwarding_ruleset_delete
from .example_steps import step_inbound_endpoint_create
from .example_steps import step_inbound_endpoint_list
from .example_steps import step_inbound_endpoint_show
from .example_steps import step_inbound_endpoint_update
from .example_steps import step_inbound_endpoint_delete
from .example_steps import step_outbound_endpoint_create
from .example_steps import step_outbound_endpoint_list
from .example_steps import step_outbound_endpoint_show
from .example_steps import step_outbound_endpoint_update
from .example_steps import step_outbound_endpoint_delete
from .example_steps import step_delete
from .example_steps import step_vnet_link_create
from .example_steps import step_vnet_link_list
from .example_steps import step_vnet_link_show
from .example_steps import step_vnet_link_update
from .example_steps import step_vnet_link_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_create(test, checks=[
        test.check("name", "{myDnsResolver}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_show(test, checks=[
        test.check("name", "{myDnsResolver}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_update(test, checks=[
        test.check("name", "{myDnsResolver}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_list3(test, checks=[])
    step_forwarding_ruleset_create(test, checks=[
        test.check("name", "{myDnsForwardingRuleset2}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_forwarding_ruleset_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_forwarding_ruleset_list2(test, checks=[
        test.check('length(@)', 2),
    ])
    step_forwarding_ruleset_show(test, checks=[])
    step_forwarding_ruleset_update(test, checks=[
        test.check("name", "{myDnsForwardingRuleset}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_forwarding_ruleset_list3(test, checks=[])
    step_forwarding_rule_create(test, checks=[
        test.check("name", "{myForwardingRule}", case_sensitive=False),
        test.check("domainName", "contoso.com.", case_sensitive=False),
        test.check("forwardingRuleState", "Enabled", case_sensitive=False),
        test.check("metadata.additionalProp1", "value1", case_sensitive=False),
    ])
    step_forwarding_rule_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_forwarding_rule_show(test, checks=[
        test.check("name", "{myForwardingRule}", case_sensitive=False),
        test.check("domainName", "contoso.com.", case_sensitive=False),
        test.check("forwardingRuleState", "Enabled", case_sensitive=False),
        test.check("metadata.additionalProp1", "value1", case_sensitive=False),
    ])
    step_forwarding_rule_update(test, checks=[
        test.check("name", "{myForwardingRule}", case_sensitive=False),
        test.check("domainName", "contoso.com.", case_sensitive=False),
        test.check("forwardingRuleState", "Disabled", case_sensitive=False),
        test.check("metadata.additionalProp2", "value2", case_sensitive=False),
    ])
    step_forwarding_rule_delete(test, checks=[])
    step_forwarding_ruleset_delete(test, checks=[])
    step_inbound_endpoint_create(test, checks=[
        test.check("name", "{myInboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_inbound_endpoint_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_inbound_endpoint_show(test, checks=[
        test.check("name", "{myInboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_inbound_endpoint_update(test, checks=[
        test.check("name", "{myInboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_inbound_endpoint_delete(test, checks=[])
    step_outbound_endpoint_create(test, checks=[
        test.check("name", "{myOutboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("subnet.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/vir"
                   "tualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_outbound_endpoint_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_outbound_endpoint_show(test, checks=[
        test.check("name", "{myOutboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("subnet.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/vir"
                   "tualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_outbound_endpoint_update(test, checks=[
        test.check("name", "{myOutboundEndpoint}", case_sensitive=False),
        test.check("location", "westus2", case_sensitive=False),
        test.check("subnet.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/vir"
                   "tualNetworks/{vn}/subnets/{subnets}", case_sensitive=False),
        test.check("tags.key1", "value1", case_sensitive=False),
    ])
    step_outbound_endpoint_delete(test, checks=[])
    step_delete(test, checks=[])
    step_vnet_link_create(test, checks=[
        test.check("metadata.additionalProp1", "value1", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("name", "{myVirtualNetworkLink}", case_sensitive=False),
    ])
    step_vnet_link_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_vnet_link_show(test, checks=[
        test.check("metadata.additionalProp1", "value1", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("name", "{myVirtualNetworkLink}", case_sensitive=False),
    ])
    step_vnet_link_update(test, checks=[
        test.check("metadata.additionalProp1", "value1", case_sensitive=False),
        test.check("virtualNetwork.id", "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Net"
                   "work/virtualNetworks/{vn}", case_sensitive=False),
        test.check("name", "{myVirtualNetworkLink}", case_sensitive=False),
    ])
    step_vnet_link_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class Dns_resolverScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(Dns_resolverScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myDnsResolver': 'sampleDnsResolver',
            'myInboundEndpoint': 'sampleInboundEndpoint',
            'myOutboundEndpoint2': 'sampleOutboundEndpoint0',
            'myOutboundEndpoint3': 'sampleOutboundEndpoint1',
            'myOutboundEndpoint': 'sampleOutboundEndpoint',
            'myDnsForwardingRuleset': 'sampleDnsForwardingRuleset',
            'myDnsForwardingRuleset2': 'samplednsForwardingRuleset',
            'myDnsForwardingRuleset3': 'samplednsForwardingRulesetName',
            'myForwardingRule': 'sampleForwardingRule',
            'myVirtualNetworkLink': 'sampleVirtualNetworkLink',
        })

    @ResourceGroupPreparer(name_prefix='clitestdns_resolver_virtualNetworkResourceGroup'[:7], key='rg_2',
                           parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestdns_resolver_sampleVnetResourceGroupName'[:7], key='rg_3',
                           parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestdns_resolver_sampleResourceGroup'[:7], key='rg', parameter_name='rg')
    @VirtualNetworkPreparer(name_prefix='clitestdns_resolver_sampleVirtualNetwork'[:7], key='vn',
                            resource_group_key='rg_2')
    @SubnetPreparer(name_prefix='clitestdns_resolver_sampleSubnet'[:7], key='subnets', virtual_network_key='vn',
                    resource_group_key='rg_3')
    def test_dns_resolver_Scenario(self, rg_2, rg_3, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
