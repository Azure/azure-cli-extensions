# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /DnsResolvers/put/Upsert DNS resolver
@try_manual
def step_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver create '
             '--name "{myDnsResolver}" '
             '--location "westus2" '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Network/virtualNetworks/'
             '{vn}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az dns-resolver wait --created '
             '--name "{myDnsResolver}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsResolvers/get/List DNS resolvers by resource group
@try_manual
def step_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsResolvers/get/List DNS resolvers by subscription
@try_manual
def step_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver list '
             '-g ""',
             checks=checks)


# EXAMPLE: /DnsResolvers/get/Retrieve DNS resolver
@try_manual
def step_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver show '
             '--name "{myDnsResolver}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsResolvers/patch/Update DNS resolver
@try_manual
def step_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver update '
             '--name "{myDnsResolver}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsResolvers/post/List DNS resolvers by virtual network
@try_manual
def step_list_by_virtual_network(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver list-by-virtual-network '
             '--resource-group "{rg}" '
             '--virtual-network-name "{vn}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/put/Upsert DNS forwarding ruleset
@try_manual
def step_dns_forwarding_ruleset_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset create '
             '--name "{myDnsForwardingRuleset2}" '
             '--location "westus2" '
             '--dns-resolver-outbound-endpoints id="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Micr'
             'osoft.Network/dnsResolvers/{myDnsResolver}/outboundEndpoints/{myOutboundEndpoint2}" '
             '--dns-resolver-outbound-endpoints id="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Micr'
             'osoft.Network/dnsResolvers/{myDnsResolver}/outboundEndpoints/{myOutboundEndpoint3}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az dns-resolver dns-forwarding-ruleset wait --created '
             '--name "{myDnsForwardingRuleset2}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/get/List DNS forwarding rulesets by resource group
@try_manual
def step_dns_forwarding_ruleset_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/get/List DNS forwarding rulesets by subscription
@try_manual
def step_dns_forwarding_ruleset_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset list '
             '-g ""',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/get/Retrieve DNS forwarding ruleset
@try_manual
def step_dns_forwarding_ruleset_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset show '
             '--name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/patch/Update DNS forwarding ruleset
@try_manual
def step_dns_forwarding_ruleset_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset update '
             '--name "{myDnsForwardingRuleset}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/post/List DNS forwarding rulesets by virtual network
@try_manual
def step_dns_forwarding_ruleset(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset list-by-virtual-network '
             '--resource-group "{rg}" '
             '--virtual-network-name "{vn}"',
             checks=checks)


# EXAMPLE: /ForwardingRules/put/Upsert forwarding rule in a DNS forwarding ruleset
@try_manual
def step_forwarding_rule_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver forwarding-rule create '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--name "{myForwardingRule}" '
             '--domain-name "contoso.com." '
             '--forwarding-rule-state "Enabled" '
             '--metadata additionalProp1="value1" '
             '--target-dns-servers ip-address="10.0.0.1" port=53 '
             '--target-dns-servers ip-address="10.0.0.2" port=53 '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ForwardingRules/get/List forwarding rules in a DNS forwarding ruleset
@try_manual
def step_forwarding_rule_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver forwarding-rule list '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ForwardingRules/get/Retrieve forwarding rule in a DNS forwarding ruleset
@try_manual
def step_forwarding_rule_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver forwarding-rule show '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--name "{myForwardingRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ForwardingRules/patch/Update forwarding rule in a DNS forwarding ruleset
@try_manual
def step_forwarding_rule_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver forwarding-rule update '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--name "{myForwardingRule}" '
             '--forwarding-rule-state "Disabled" '
             '--metadata additionalProp2="value2" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /ForwardingRules/delete/Delete forwarding rule in a DNS forwarding ruleset
@try_manual
def step_forwarding_rule_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver forwarding-rule delete -y '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--name "{myForwardingRule}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsForwardingRulesets/delete/Delete DNS forwarding ruleset
@try_manual
def step_dns_forwarding_ruleset_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver dns-forwarding-ruleset delete -y '
             '--name "{myDnsForwardingRuleset3}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /InboundEndpoints/put/Upsert inbound endpoint for DNS resolver
@try_manual
def step_inbound_endpoint_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver inbound-endpoint create '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myInboundEndpoint}" '
             '--location "westus2" '
             '--ip-configurations private-ip-address="255.255.255.255" private-ip-allocation-method="Static" '
             'id="/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/virtualNetworks/{v'
             'n}/subnets/{subnets}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az dns-resolver inbound-endpoint wait --created '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myInboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /InboundEndpoints/get/List inbound endpoints by DNS resolver
@try_manual
def step_inbound_endpoint_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver inbound-endpoint list '
             '--dns-resolver-name "{myDnsResolver}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /InboundEndpoints/get/Retrieve inbound endpoint for DNS resolver
@try_manual
def step_inbound_endpoint_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver inbound-endpoint show '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myInboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /InboundEndpoints/patch/Update inbound endpoint for DNS resolver
@try_manual
def step_inbound_endpoint_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver inbound-endpoint update '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myInboundEndpoint}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /InboundEndpoints/delete/Delete inbound endpoint for DNS resolver
@try_manual
def step_inbound_endpoint_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver inbound-endpoint delete -y '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myInboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /OutboundEndpoints/put/Upsert outbound endpoint for DNS resolver
@try_manual
def step_outbound_endpoint_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver outbound-endpoint create '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myOutboundEndpoint}" '
             '--location "westus2" '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/virtualNetworks/'
             '{vn}/subnets/{subnets}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az dns-resolver outbound-endpoint wait --created '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myOutboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /OutboundEndpoints/get/List outbound endpoints by DNS resolver
@try_manual
def step_outbound_endpoint_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver outbound-endpoint list '
             '--dns-resolver-name "{myDnsResolver}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /OutboundEndpoints/get/Retrieve outbound endpoint for DNS resolver
@try_manual
def step_outbound_endpoint_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver outbound-endpoint show '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myOutboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /OutboundEndpoints/patch/Update outbound endpoint for DNS resolver
@try_manual
def step_outbound_endpoint_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver outbound-endpoint update '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myOutboundEndpoint}" '
             '--tags key1="value1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /OutboundEndpoints/delete/Delete outbound endpoint for DNS resolver
@try_manual
def step_outbound_endpoint_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver outbound-endpoint delete -y '
             '--dns-resolver-name "{myDnsResolver}" '
             '--name "{myOutboundEndpoint}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /DnsResolvers/delete/Delete DNS resolver
@try_manual
def step_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver delete -y '
             '--name "{myDnsResolver}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /VirtualNetworkLinks/put/Upsert virtual network link to a DNS forwarding ruleset
@try_manual
def step_virtual_network_link_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver virtual-network-link create '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--metadata additionalProp1="value1" '
             '--id "/subscriptions/{subscription_id}/resourceGroups/{rg_3}/providers/Microsoft.Network/virtualNetworks/'
             '{vn}" '
             '--resource-group "{rg}" '
             '--name "{myVirtualNetworkLink}"',
             checks=[])
    test.cmd('az dns-resolver virtual-network-link wait --created '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}" '
             '--name "{myVirtualNetworkLink}"',
             checks=checks)


# EXAMPLE: /VirtualNetworkLinks/get/List virtual network links to a DNS forwarding ruleset
@try_manual
def step_virtual_network_link_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver virtual-network-link list '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /VirtualNetworkLinks/get/Retrieve virtual network link to a DNS forwarding ruleset
@try_manual
def step_virtual_network_link_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver virtual-network-link show '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}" '
             '--name "{myVirtualNetworkLink}"',
             checks=checks)


# EXAMPLE: /VirtualNetworkLinks/patch/Update virtual network link to a DNS forwarding ruleset
@try_manual
def step_virtual_network_link_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver virtual-network-link update '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--metadata additionalProp1="value1" '
             '--resource-group "{rg}" '
             '--name "{myVirtualNetworkLink}"',
             checks=checks)


# EXAMPLE: /VirtualNetworkLinks/delete/Delete virtual network link to a DNS forwarding ruleset
@try_manual
def step_virtual_network_link_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az dns-resolver virtual-network-link delete -y '
             '--dns-forwarding-ruleset-name "{myDnsForwardingRuleset}" '
             '--resource-group "{rg}" '
             '--name "{myVirtualNetworkLink}"',
             checks=checks)
