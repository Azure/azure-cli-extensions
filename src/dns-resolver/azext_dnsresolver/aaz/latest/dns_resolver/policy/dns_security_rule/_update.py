# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "dns-resolver policy dns-security-rule update",
)
class Update(AAZCommand):
    """Update a DNS security rule for a DNS resolver policy.

    :example: Update a DNS security rule
        az dns-resolver policy dns-security-rule update --resource-group sampleResourceGroup --policy-name sampleDnsResolverPolicy --rule-name sampleDnsSecurityRule --location westus2 --tags "{key2:value2}" --priority 100 --action "{action-type:Block,block-response-code:SERVFAIL}" --domain-lists "[{id:/subscriptions/abdd4249-9f34-4cc6-8e42-c2e32110603e/resourceGroups/sampleResourceGroup/providers/Microsoft.Network/dnsResolverDomainLists/sampleDnsResolverDomainList}]" --rule-state Disabled
    """

    _aaz_info = {
        "version": "2023-07-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/dnsresolverpolicies/{}/dnssecurityrules/{}", "2023-07-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.if_match = AAZStrArg(
            options=["--if-match"],
            help="ETag of the resource. Omit this value to always overwrite the current resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent changes.",
        )
        _args_schema.if_none_match = AAZStrArg(
            options=["--if-none-match"],
            help="Set to '*' to allow a new resource to be created, but to prevent updating an existing resource. Other values will be ignored.",
        )
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="The name of the DNS resolver policy.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$",
                max_length=80,
                min_length=1,
            ),
        )
        _args_schema.dns_security_rule_name = AAZStrArg(
            options=["-n", "--name", "--dns-security-rule-name"],
            help="The name of the DNS security rule.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]([a-zA-Z0-9_\\-]*[a-zA-Z0-9])?$",
                max_length=80,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.action = AAZObjectArg(
            options=["--action"],
            arg_group="Properties",
            help="The action to take on DNS requests that match the DNS security rule.",
        )
        _args_schema.domain_lists = AAZListArg(
            options=["--domain-lists"],
            arg_group="Properties",
            help="DNS resolver policy domains lists that the DNS security rule applies to.",
        )
        _args_schema.rule_state = AAZStrArg(
            options=["--rule-state"],
            arg_group="Properties",
            help="The state of DNS security rule.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.priority = AAZIntArg(
            options=["--priority"],
            arg_group="Properties",
            help="The priority of the DNS security rule.",
        )

        action = cls._args_schema.action
        action.action_type = AAZStrArg(
            options=["action-type"],
            help="The type of action to take.",
            nullable=True,
            enum={"Alert": "Alert", "Allow": "Allow", "Block": "Block"},
        )
        action.block_response_code = AAZStrArg(
            options=["block-response-code"],
            help="The response code for block actions.",
            nullable=True,
            enum={"SERVFAIL": "SERVFAIL"},
        )

        domain_lists = cls._args_schema.domain_lists
        domain_lists.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.domain_lists.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.DnsSecurityRulesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.DnsSecurityRulesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DnsSecurityRulesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/dnsSecurityRules/{dnsSecurityRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dnsResolverPolicyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "dnsSecurityRuleName", self.ctx.args.dns_security_rule_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_dns_security_rule_read(cls._schema_on_200)

            return cls._schema_on_200

    class DnsSecurityRulesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/dnsResolverPolicies/{dnsResolverPolicyName}/dnsSecurityRules/{dnsSecurityRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dnsResolverPolicyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "dnsSecurityRuleName", self.ctx.args.dns_security_rule_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "If-Match", self.ctx.args.if_match,
                ),
                **self.serialize_header_param(
                    "If-None-Match", self.ctx.args.if_none_match,
                ),
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_dns_security_rule_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("action", AAZObjectType, ".action", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("dnsResolverDomainLists", AAZListType, ".domain_lists", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("dnsSecurityRuleState", AAZStrType, ".rule_state")
                properties.set_prop("priority", AAZIntType, ".priority", typ_kwargs={"flags": {"required": True}})

            action = _builder.get(".properties.action")
            if action is not None:
                action.set_prop("actionType", AAZStrType, ".action_type")
                action.set_prop("blockResponseCode", AAZStrType, ".block_response_code")

            dns_resolver_domain_lists = _builder.get(".properties.dnsResolverDomainLists")
            if dns_resolver_domain_lists is not None:
                dns_resolver_domain_lists.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dnsResolverDomainLists[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_dns_security_rule_read = None

    @classmethod
    def _build_schema_dns_security_rule_read(cls, _schema):
        if cls._schema_dns_security_rule_read is not None:
            _schema.etag = cls._schema_dns_security_rule_read.etag
            _schema.id = cls._schema_dns_security_rule_read.id
            _schema.location = cls._schema_dns_security_rule_read.location
            _schema.name = cls._schema_dns_security_rule_read.name
            _schema.properties = cls._schema_dns_security_rule_read.properties
            _schema.system_data = cls._schema_dns_security_rule_read.system_data
            _schema.tags = cls._schema_dns_security_rule_read.tags
            _schema.type = cls._schema_dns_security_rule_read.type
            return

        cls._schema_dns_security_rule_read = _schema_dns_security_rule_read = AAZObjectType()

        dns_security_rule_read = _schema_dns_security_rule_read
        dns_security_rule_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        dns_security_rule_read.id = AAZStrType(
            flags={"read_only": True},
        )
        dns_security_rule_read.location = AAZStrType(
            flags={"required": True},
        )
        dns_security_rule_read.name = AAZStrType(
            flags={"read_only": True},
        )
        dns_security_rule_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        dns_security_rule_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        dns_security_rule_read.tags = AAZDictType()
        dns_security_rule_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_dns_security_rule_read.properties
        properties.action = AAZObjectType(
            flags={"required": True},
        )
        properties.dns_resolver_domain_lists = AAZListType(
            serialized_name="dnsResolverDomainLists",
            flags={"required": True},
        )
        properties.dns_security_rule_state = AAZStrType(
            serialized_name="dnsSecurityRuleState",
        )
        properties.priority = AAZIntType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        action = _schema_dns_security_rule_read.properties.action
        action.action_type = AAZStrType(
            serialized_name="actionType",
        )
        action.block_response_code = AAZStrType(
            serialized_name="blockResponseCode",
        )

        dns_resolver_domain_lists = _schema_dns_security_rule_read.properties.dns_resolver_domain_lists
        dns_resolver_domain_lists.Element = AAZObjectType()

        _element = _schema_dns_security_rule_read.properties.dns_resolver_domain_lists.Element
        _element.id = AAZStrType(
            flags={"required": True},
        )

        system_data = _schema_dns_security_rule_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_dns_security_rule_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_dns_security_rule_read.etag
        _schema.id = cls._schema_dns_security_rule_read.id
        _schema.location = cls._schema_dns_security_rule_read.location
        _schema.name = cls._schema_dns_security_rule_read.name
        _schema.properties = cls._schema_dns_security_rule_read.properties
        _schema.system_data = cls._schema_dns_security_rule_read.system_data
        _schema.tags = cls._schema_dns_security_rule_read.tags
        _schema.type = cls._schema_dns_security_rule_read.type


__all__ = ["Update"]
