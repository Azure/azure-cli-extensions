# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import msrest.serialization


class CloudErrorBody(msrest.serialization.Model):
    """The body of an error message.

    :param code: The error code.
    :type code: str
    :param message: A description of what caused the error.
    :type message: str
    :param target: The target resource of the error message.
    :type target: str
    :param details: Extra error information.
    :type details: list[~azure.mgmt.dnsresolver.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = kwargs.get('code', None)
        self.message = kwargs.get('message', None)
        self.target = kwargs.get('target', None)
        self.details = kwargs.get('details', None)


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs['location']


class DnsForwardingRuleset(TrackedResource):
    """Describes a DNS forwarding ruleset.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar etag: ETag of the DNS forwarding ruleset.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param dns_resolver_outbound_endpoints: The reference to the DNS resolver outbound endpoints
     that are used to route DNS queries matching the forwarding rules in the ruleset to the target
     DNS servers.
    :type dns_resolver_outbound_endpoints: list[~azure.mgmt.dnsresolver.models.SubResource]
    :ivar provisioning_state: The current provisioning state of the DNS forwarding ruleset. This is
     a read-only property and any attempt to set this value will be ignored. Possible values
     include: "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    :ivar resource_guid: The resourceGuid for the DNS forwarding ruleset.
    :vartype resource_guid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'dns_resolver_outbound_endpoints': {'key': 'properties.dnsResolverOutboundEndpoints', 'type': '[SubResource]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsForwardingRuleset, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.dns_resolver_outbound_endpoints = kwargs.get('dns_resolver_outbound_endpoints', None)
        self.provisioning_state = None
        self.resource_guid = None


class DnsForwardingRulesetListResult(msrest.serialization.Model):
    """The response to an enumeration operation on DNS forwarding rulesets.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the DNS forwarding rulesets.
    :type value: list[~azure.mgmt.dnsresolver.models.DnsForwardingRuleset]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DnsForwardingRuleset]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsForwardingRulesetListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class DnsForwardingRulesetPatch(msrest.serialization.Model):
    """Describes a DNS forwarding ruleset PATCH operation.

    :param tags: A set of tags. Tags for DNS Resolver.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsForwardingRulesetPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class DnsResolver(TrackedResource):
    """Describes a DNS resolver.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar etag: ETag of the DNS resolver.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param virtual_network: The reference to the virtual network. This cannot be changed after
     creation.
    :type virtual_network: ~azure.mgmt.dnsresolver.models.SubResource
    :ivar dns_resolver_state: The current status of the DNS resolver. This is a read-only property
     and any attempt to set this value will be ignored. Possible values include: "Connected",
     "Disconnected".
    :vartype dns_resolver_state: str or ~azure.mgmt.dnsresolver.models.DnsResolverState
    :ivar provisioning_state: The current provisioning state of the DNS resolver. This is a read-
     only property and any attempt to set this value will be ignored. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    :ivar resource_guid: The resourceGuid property of the DNS resolver resource.
    :vartype resource_guid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'dns_resolver_state': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'virtual_network': {'key': 'properties.virtualNetwork', 'type': 'SubResource'},
        'dns_resolver_state': {'key': 'properties.dnsResolverState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsResolver, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.virtual_network = kwargs.get('virtual_network', None)
        self.dns_resolver_state = None
        self.provisioning_state = None
        self.resource_guid = None


class DnsResolverListResult(msrest.serialization.Model):
    """The response to an enumeration operation on DNS resolvers.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the DNS resolvers.
    :type value: list[~azure.mgmt.dnsresolver.models.DnsResolver]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DnsResolver]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsResolverListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class DnsResolverPatch(msrest.serialization.Model):
    """Describes a DNS resolver for PATCH operation.

    :param tags: A set of tags. Tags for DNS Resolver.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DnsResolverPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class ForwardingRule(Resource):
    """Describes a forwarding rule within a DNS forwarding ruleset.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: ETag of the forwarding rule.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param domain_name: The domain name for the forwarding rule.
    :type domain_name: str
    :param target_dns_servers: DNS servers to forward the DNS query to.
    :type target_dns_servers: list[~azure.mgmt.dnsresolver.models.TargetDnsServer]
    :param metadata: Metadata attached to the forwarding rule.
    :type metadata: dict[str, str]
    :param forwarding_rule_state: The state of forwarding rule. Possible values include: "Enabled",
     "Disabled".
    :type forwarding_rule_state: str or ~azure.mgmt.dnsresolver.models.ForwardingRuleState
    :ivar provisioning_state: The current provisioning state of the forwarding rule. This is a
     read-only property and any attempt to set this value will be ignored. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'target_dns_servers': {'key': 'properties.targetDnsServers', 'type': '[TargetDnsServer]'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'forwarding_rule_state': {'key': 'properties.forwardingRuleState', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ForwardingRule, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.domain_name = kwargs.get('domain_name', None)
        self.target_dns_servers = kwargs.get('target_dns_servers', None)
        self.metadata = kwargs.get('metadata', None)
        self.forwarding_rule_state = kwargs.get('forwarding_rule_state', None)
        self.provisioning_state = None


class ForwardingRuleListResult(msrest.serialization.Model):
    """The response to an enumeration operation on forwarding rules within a DNS forwarding ruleset.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the forwarding rules.
    :type value: list[~azure.mgmt.dnsresolver.models.ForwardingRule]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ForwardingRule]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ForwardingRuleListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class ForwardingRulePatch(msrest.serialization.Model):
    """Describes a forwarding rule for PATCH operation.

    :param target_dns_servers: DNS servers to forward the DNS query to.
    :type target_dns_servers: list[~azure.mgmt.dnsresolver.models.TargetDnsServer]
    :param metadata: Metadata attached to the forwarding rule.
    :type metadata: dict[str, str]
    :param forwarding_rule_state: The state of forwarding rule. Possible values include: "Enabled",
     "Disabled".
    :type forwarding_rule_state: str or ~azure.mgmt.dnsresolver.models.ForwardingRuleState
    """

    _attribute_map = {
        'target_dns_servers': {'key': 'properties.targetDnsServers', 'type': '[TargetDnsServer]'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'forwarding_rule_state': {'key': 'properties.forwardingRuleState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ForwardingRulePatch, self).__init__(**kwargs)
        self.target_dns_servers = kwargs.get('target_dns_servers', None)
        self.metadata = kwargs.get('metadata', None)
        self.forwarding_rule_state = kwargs.get('forwarding_rule_state', None)


class InboundEndpoint(TrackedResource):
    """Describes an inbound endpoint for a DNS resolver.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar etag: ETag of the inbound endpoint.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param ip_configurations: IP configurations for the inbound endpoint.
    :type ip_configurations: list[~azure.mgmt.dnsresolver.models.IpConfiguration]
    :ivar provisioning_state: The current provisioning state of the inbound endpoint. This is a
     read-only property and any attempt to set this value will be ignored. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    :ivar resource_guid: The resourceGuid property of the inbound endpoint resource.
    :vartype resource_guid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'ip_configurations': {'key': 'properties.ipConfigurations', 'type': '[IpConfiguration]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(InboundEndpoint, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.ip_configurations = kwargs.get('ip_configurations', None)
        self.provisioning_state = None
        self.resource_guid = None


class InboundEndpointListResult(msrest.serialization.Model):
    """The response to an enumeration operation on inbound endpoints for a DNS resolver.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the inbound endpoints for a DNS resolver.
    :type value: list[~azure.mgmt.dnsresolver.models.InboundEndpoint]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[InboundEndpoint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(InboundEndpointListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class InboundEndpointPatch(msrest.serialization.Model):
    """Describes an inbound endpoint for a DNS resolver for PATCH operation.

    :param tags: A set of tags. Tags for inbound endpoint.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(InboundEndpointPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class IpConfiguration(msrest.serialization.Model):
    """IP configuration.

    :param subnet: The reference to the subnet bound to the IP configuration.
    :type subnet: ~azure.mgmt.dnsresolver.models.SubResource
    :param private_ip_address: Private IP address of the IP configuration.
    :type private_ip_address: str
    :param private_ip_allocation_method: Private IP address allocation method. Possible values
     include: "Static", "Dynamic". Default value: "Dynamic".
    :type private_ip_allocation_method: str or ~azure.mgmt.dnsresolver.models.IpAllocationMethod
    """

    _attribute_map = {
        'subnet': {'key': 'subnet', 'type': 'SubResource'},
        'private_ip_address': {'key': 'privateIpAddress', 'type': 'str'},
        'private_ip_allocation_method': {'key': 'privateIpAllocationMethod', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(IpConfiguration, self).__init__(**kwargs)
        self.subnet = kwargs.get('subnet', None)
        self.private_ip_address = kwargs.get('private_ip_address', None)
        self.private_ip_allocation_method = kwargs.get('private_ip_allocation_method', "Dynamic")


class OutboundEndpoint(TrackedResource):
    """Describes an outbound endpoint for a DNS resolver.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar etag: ETag of the outbound endpoint.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param subnet: The reference to the subnet used for the outbound endpoint.
    :type subnet: ~azure.mgmt.dnsresolver.models.SubResource
    :ivar provisioning_state: The current provisioning state of the outbound endpoint. This is a
     read-only property and any attempt to set this value will be ignored. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    :ivar resource_guid: The resourceGuid property of the outbound endpoint resource.
    :vartype resource_guid: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_guid': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'subnet': {'key': 'properties.subnet', 'type': 'SubResource'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_guid': {'key': 'properties.resourceGuid', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OutboundEndpoint, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.subnet = kwargs.get('subnet', None)
        self.provisioning_state = None
        self.resource_guid = None


class OutboundEndpointListResult(msrest.serialization.Model):
    """The response to an enumeration operation on outbound endpoints for a DNS resolver.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the outbound endpoints for a DNS resolver.
    :type value: list[~azure.mgmt.dnsresolver.models.OutboundEndpoint]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OutboundEndpoint]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OutboundEndpointListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class OutboundEndpointPatch(msrest.serialization.Model):
    """Describes an outbound endpoint for a DNS resolver for PATCH operation.

    :param tags: A set of tags. Tags for outbound endpoint.
    :type tags: dict[str, str]
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OutboundEndpointPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class SubResource(msrest.serialization.Model):
    """Reference to another ARM resource.

    :param id: Resource ID.
    :type id: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SubResource, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)


class SubResourceListResult(msrest.serialization.Model):
    """The response to an enumeration operation on sub-resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the sub-resources.
    :type value: list[~azure.mgmt.dnsresolver.models.SubResource]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SubResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SubResourceListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.dnsresolver.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.dnsresolver.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)


class TargetDnsServer(msrest.serialization.Model):
    """Describes a server to forward the DNS queries to.

    :param ip_address: DNS server IP address.
    :type ip_address: str
    :param port: DNS server port.
    :type port: int
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TargetDnsServer, self).__init__(**kwargs)
        self.ip_address = kwargs.get('ip_address', None)
        self.port = kwargs.get('port', 53)


class VirtualNetworkDnsForwardingRuleset(msrest.serialization.Model):
    """Reference to DNS forwarding ruleset and associated virtual network link.

    :param id: DNS Forwarding Ruleset Resource ID.
    :type id: str
    :param virtual_network_link: The reference to the virtual network link.
    :type virtual_network_link: ~azure.mgmt.dnsresolver.models.SubResource
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'virtual_network_link': {'key': 'properties.virtualNetworkLink', 'type': 'SubResource'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkDnsForwardingRuleset, self).__init__(**kwargs)
        self.id = kwargs.get('id', None)
        self.virtual_network_link = kwargs.get('virtual_network_link', None)


class VirtualNetworkDnsForwardingRulesetListResult(msrest.serialization.Model):
    """The response to an enumeration operation on Virtual Network DNS Forwarding Ruleset.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the Virtual Network DNS Forwarding Ruleset.
    :type value: list[~azure.mgmt.dnsresolver.models.VirtualNetworkDnsForwardingRuleset]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkDnsForwardingRuleset]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkDnsForwardingRulesetListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkLink(Resource):
    """Describes a virtual network link.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar etag: ETag of the virtual network link.
    :vartype etag: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.dnsresolver.models.SystemData
    :param virtual_network: The reference to the virtual network. This cannot be changed after
     creation.
    :type virtual_network: ~azure.mgmt.dnsresolver.models.SubResource
    :param metadata: Metadata attached to the virtual network link.
    :type metadata: dict[str, str]
    :ivar provisioning_state: The current provisioning state of the virtual network link. This is a
     read-only property and any attempt to set this value will be ignored. Possible values include:
     "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled".
    :vartype provisioning_state: str or ~azure.mgmt.dnsresolver.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'virtual_network': {'key': 'properties.virtualNetwork', 'type': 'SubResource'},
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkLink, self).__init__(**kwargs)
        self.etag = None
        self.system_data = None
        self.virtual_network = kwargs.get('virtual_network', None)
        self.metadata = kwargs.get('metadata', None)
        self.provisioning_state = None


class VirtualNetworkLinkListResult(msrest.serialization.Model):
    """The response to an enumeration operation on virtual network links.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: Enumeration of the virtual network links.
    :type value: list[~azure.mgmt.dnsresolver.models.VirtualNetworkLink]
    :ivar next_link: The continuation token for the next page of results.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VirtualNetworkLink]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkLinkListResult, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = None


class VirtualNetworkLinkPatch(msrest.serialization.Model):
    """Describes a virtual network link for PATCH operation.

    :param metadata: Metadata attached to the virtual network link.
    :type metadata: dict[str, str]
    """

    _attribute_map = {
        'metadata': {'key': 'properties.metadata', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VirtualNetworkLinkPatch, self).__init__(**kwargs)
        self.metadata = kwargs.get('metadata', None)
