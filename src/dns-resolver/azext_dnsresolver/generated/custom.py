# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def dns_resolver_list(client,
                      resource_group_name=None,
                      virtual_network_name=None,
                      top=None):
    if resource_group_name and virtual_network_name is not None:
        return client.list_by_virtual_network(resource_group_name=resource_group_name,
                                              virtual_network_name=virtual_network_name,
                                              top=top)
    elif resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list(top=top)


def dns_resolver_show(client,
                      resource_group_name,
                      dns_resolver_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_resolver_name=dns_resolver_name)


def dns_resolver_create(client,
                        resource_group_name,
                        dns_resolver_name,
                        location,
                        if_match=None,
                        if_none_match=None,
                        tags=None,
                        id_=None,
                        no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    parameters['virtual_network'] = {}
    if id_ is not None:
        parameters['virtual_network']['id'] = id_
    if len(parameters['virtual_network']) == 0:
        del parameters['virtual_network']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def dns_resolver_update(client,
                        resource_group_name,
                        dns_resolver_name,
                        if_match=None,
                        tags=None,
                        no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       if_match=if_match,
                       parameters=parameters)


def dns_resolver_delete(client,
                        resource_group_name,
                        dns_resolver_name,
                        if_match=None,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       if_match=if_match)


def dns_resolver_inbound_endpoint_list(client,
                                       resource_group_name,
                                       dns_resolver_name,
                                       top=None):
    return client.list(resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       top=top)


def dns_resolver_inbound_endpoint_show(client,
                                       resource_group_name,
                                       dns_resolver_name,
                                       inbound_endpoint_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_resolver_name=dns_resolver_name,
                      inbound_endpoint_name=inbound_endpoint_name)


def dns_resolver_inbound_endpoint_create(client,
                                         resource_group_name,
                                         dns_resolver_name,
                                         inbound_endpoint_name,
                                         location,
                                         if_match=None,
                                         if_none_match=None,
                                         tags=None,
                                         ip_configurations=None,
                                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    if ip_configurations is not None:
        parameters['ip_configurations'] = ip_configurations
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       inbound_endpoint_name=inbound_endpoint_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def dns_resolver_inbound_endpoint_update(client,
                                         resource_group_name,
                                         dns_resolver_name,
                                         inbound_endpoint_name,
                                         if_match=None,
                                         tags=None,
                                         no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       inbound_endpoint_name=inbound_endpoint_name,
                       if_match=if_match,
                       parameters=parameters)


def dns_resolver_inbound_endpoint_delete(client,
                                         resource_group_name,
                                         dns_resolver_name,
                                         inbound_endpoint_name,
                                         if_match=None,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       inbound_endpoint_name=inbound_endpoint_name,
                       if_match=if_match)


def dns_resolver_outbound_endpoint_list(client,
                                        resource_group_name,
                                        dns_resolver_name,
                                        top=None):
    return client.list(resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       top=top)


def dns_resolver_outbound_endpoint_show(client,
                                        resource_group_name,
                                        dns_resolver_name,
                                        outbound_endpoint_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_resolver_name=dns_resolver_name,
                      outbound_endpoint_name=outbound_endpoint_name)


def dns_resolver_outbound_endpoint_create(client,
                                          resource_group_name,
                                          dns_resolver_name,
                                          outbound_endpoint_name,
                                          location,
                                          if_match=None,
                                          if_none_match=None,
                                          tags=None,
                                          id_=None,
                                          no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    parameters['subnet'] = {}
    if id_ is not None:
        parameters['subnet']['id'] = id_
    if len(parameters['subnet']) == 0:
        del parameters['subnet']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       outbound_endpoint_name=outbound_endpoint_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def dns_resolver_outbound_endpoint_update(client,
                                          resource_group_name,
                                          dns_resolver_name,
                                          outbound_endpoint_name,
                                          if_match=None,
                                          tags=None,
                                          no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       outbound_endpoint_name=outbound_endpoint_name,
                       if_match=if_match,
                       parameters=parameters)


def dns_resolver_outbound_endpoint_delete(client,
                                          resource_group_name,
                                          dns_resolver_name,
                                          outbound_endpoint_name,
                                          if_match=None,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dns_resolver_name=dns_resolver_name,
                       outbound_endpoint_name=outbound_endpoint_name,
                       if_match=if_match)


def dns_resolver_forwarding_ruleset_list(client,
                                         resource_group_name=None,
                                         virtual_network_name=None,
                                         top=None):
    if resource_group_name and virtual_network_name is not None:
        return client.list_by_virtual_network(resource_group_name=resource_group_name,
                                              virtual_network_name=virtual_network_name,
                                              top=top)
    elif resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list(top=top)


def dns_resolver_forwarding_ruleset_show(client,
                                         resource_group_name,
                                         dns_forwarding_ruleset_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_forwarding_ruleset_name=dns_forwarding_ruleset_name)


def dns_resolver_forwarding_ruleset_create(client,
                                           resource_group_name,
                                           dns_forwarding_ruleset_name,
                                           location,
                                           if_match=None,
                                           if_none_match=None,
                                           tags=None,
                                           dns_resolver_outbound_endpoints=None,
                                           no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    parameters['location'] = location
    if dns_resolver_outbound_endpoints is not None:
        parameters['dns_resolver_outbound_endpoints'] = dns_resolver_outbound_endpoints
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def dns_resolver_forwarding_ruleset_update(client,
                                           resource_group_name,
                                           dns_forwarding_ruleset_name,
                                           if_match=None,
                                           tags=None,
                                           no_wait=False):
    parameters = {}
    if tags is not None:
        parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       if_match=if_match,
                       parameters=parameters)


def dns_resolver_forwarding_ruleset_delete(client,
                                           resource_group_name,
                                           dns_forwarding_ruleset_name,
                                           if_match=None,
                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       if_match=if_match)


def dns_resolver_forwarding_rule_list(client,
                                      resource_group_name,
                                      dns_forwarding_ruleset_name,
                                      top=None):
    return client.list(resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       top=top)


def dns_resolver_forwarding_rule_show(client,
                                      resource_group_name,
                                      dns_forwarding_ruleset_name,
                                      forwarding_rule_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                      forwarding_rule_name=forwarding_rule_name)


def dns_resolver_forwarding_rule_create(client,
                                        resource_group_name,
                                        dns_forwarding_ruleset_name,
                                        forwarding_rule_name,
                                        if_match=None,
                                        if_none_match=None,
                                        domain_name=None,
                                        target_dns_servers=None,
                                        metadata=None,
                                        forwarding_rule_state=None):
    parameters = {}
    if domain_name is not None:
        parameters['domain_name'] = domain_name
    if target_dns_servers is not None:
        parameters['target_dns_servers'] = target_dns_servers
    if metadata is not None:
        parameters['metadata'] = metadata
    if forwarding_rule_state is not None:
        parameters['forwarding_rule_state'] = forwarding_rule_state
    return client.create_or_update(resource_group_name=resource_group_name,
                                   dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                                   forwarding_rule_name=forwarding_rule_name,
                                   if_match=if_match,
                                   if_none_match=if_none_match,
                                   parameters=parameters)


def dns_resolver_forwarding_rule_update(client,
                                        resource_group_name,
                                        dns_forwarding_ruleset_name,
                                        forwarding_rule_name,
                                        if_match=None,
                                        target_dns_servers=None,
                                        metadata=None,
                                        forwarding_rule_state=None):
    parameters = {}
    if target_dns_servers is not None:
        parameters['target_dns_servers'] = target_dns_servers
    if metadata is not None:
        parameters['metadata'] = metadata
    if forwarding_rule_state is not None:
        parameters['forwarding_rule_state'] = forwarding_rule_state
    return client.update(resource_group_name=resource_group_name,
                         dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                         forwarding_rule_name=forwarding_rule_name,
                         if_match=if_match,
                         parameters=parameters)


def dns_resolver_forwarding_rule_delete(client,
                                        resource_group_name,
                                        dns_forwarding_ruleset_name,
                                        forwarding_rule_name,
                                        if_match=None):
    return client.delete(resource_group_name=resource_group_name,
                         dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                         forwarding_rule_name=forwarding_rule_name,
                         if_match=if_match)


def dns_resolver_vnet_link_list(client,
                                resource_group_name,
                                dns_forwarding_ruleset_name,
                                top=None):
    return client.list(resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       top=top)


def dns_resolver_vnet_link_show(client,
                                resource_group_name,
                                dns_forwarding_ruleset_name,
                                virtual_network_link_name):
    return client.get(resource_group_name=resource_group_name,
                      dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                      virtual_network_link_name=virtual_network_link_name)


def dns_resolver_vnet_link_create(client,
                                  resource_group_name,
                                  dns_forwarding_ruleset_name,
                                  virtual_network_link_name,
                                  if_match=None,
                                  if_none_match=None,
                                  metadata=None,
                                  id_=None,
                                  no_wait=False):
    parameters = {}
    if metadata is not None:
        parameters['metadata'] = metadata
    parameters['virtual_network'] = {}
    if id_ is not None:
        parameters['virtual_network']['id'] = id_
    if len(parameters['virtual_network']) == 0:
        del parameters['virtual_network']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       virtual_network_link_name=virtual_network_link_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def dns_resolver_vnet_link_update(client,
                                  resource_group_name,
                                  dns_forwarding_ruleset_name,
                                  virtual_network_link_name,
                                  if_match=None,
                                  metadata=None,
                                  no_wait=False):
    parameters = {}
    if metadata is not None:
        parameters['metadata'] = metadata
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       virtual_network_link_name=virtual_network_link_name,
                       if_match=if_match,
                       parameters=parameters)


def dns_resolver_vnet_link_delete(client,
                                  resource_group_name,
                                  dns_forwarding_ruleset_name,
                                  virtual_network_link_name,
                                  if_match=None,
                                  no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dns_forwarding_ruleset_name=dns_forwarding_ruleset_name,
                       virtual_network_link_name=virtual_network_link_name,
                       if_match=if_match)
