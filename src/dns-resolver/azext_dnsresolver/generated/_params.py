# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_dnsresolver.action import (
    AddIpConfigurations,
    AddDnsResolverOutboundEndpoints,
    AddDnsResolverForwardingRuleCreateTargetDnsServers,
    AddDnsResolverForwardingRuleCreateMetadata,
    AddDnsResolverForwardingRuleUpdateTargetDnsServers,
    AddDnsResolverForwardingRuleUpdateMetadata,
    AddDnsResolverVnetLinkCreateMetadata,
    AddDnsResolverVnetLinkUpdateMetadata
)


def load_arguments(self, _):

    with self.argument_context('dns-resolver list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', options_list=['--name', '-n', '--dns-resolver-name'], type=str, help='The name '
                   'of the DNS resolver.', id_part='name')

    with self.argument_context('dns-resolver create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', options_list=['--name', '-n', '--dns-resolver-name'], type=str, help='The name '
                   'of the DNS resolver.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.', arg_group='Virtual Network')

    with self.argument_context('dns-resolver update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', options_list=['--name', '-n', '--dns-resolver-name'], type=str, help='The name '
                   'of the DNS resolver.', id_part='name')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('tags', tags_type)

    with self.argument_context('dns-resolver delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', options_list=['--name', '-n', '--dns-resolver-name'], type=str, help='The name '
                   'of the DNS resolver.', id_part='name')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', options_list=['--name', '-n', '--dns-resolver-name'], type=str, help='The name '
                   'of the DNS resolver.', id_part='name')

    with self.argument_context('dns-resolver inbound-endpoint list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver inbound-endpoint show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('inbound_endpoint_name', options_list=['--name', '-n', '--inbound-endpoint-name'], type=str,
                   help='The name of the inbound endpoint for the DNS resolver.', id_part='child_name_1')

    with self.argument_context('dns-resolver inbound-endpoint create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.')
        c.argument('inbound_endpoint_name', options_list=['--name', '-n', '--inbound-endpoint-name'], type=str,
                   help='The name of the inbound endpoint for the DNS resolver.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('ip_configurations', action=AddIpConfigurations, nargs='+', help='IP configurations for the inbound '
                   'endpoint.')

    with self.argument_context('dns-resolver inbound-endpoint update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('inbound_endpoint_name', options_list=['--name', '-n', '--inbound-endpoint-name'], type=str,
                   help='The name of the inbound endpoint for the DNS resolver.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('tags', tags_type)

    with self.argument_context('dns-resolver inbound-endpoint delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('inbound_endpoint_name', options_list=['--name', '-n', '--inbound-endpoint-name'], type=str,
                   help='The name of the inbound endpoint for the DNS resolver.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver inbound-endpoint wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('inbound_endpoint_name', options_list=['--name', '-n', '--inbound-endpoint-name'], type=str,
                   help='The name of the inbound endpoint for the DNS resolver.', id_part='child_name_1')

    with self.argument_context('dns-resolver outbound-endpoint list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver outbound-endpoint show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('outbound_endpoint_name', options_list=['--name', '-n', '--outbound-endpoint-name'], type=str,
                   help='The name of the outbound endpoint for the DNS resolver.', id_part='child_name_1')

    with self.argument_context('dns-resolver outbound-endpoint create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.')
        c.argument('outbound_endpoint_name', options_list=['--name', '-n', '--outbound-endpoint-name'], type=str,
                   help='The name of the outbound endpoint for the DNS resolver.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.', arg_group='Subnet')

    with self.argument_context('dns-resolver outbound-endpoint update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('outbound_endpoint_name', options_list=['--name', '-n', '--outbound-endpoint-name'], type=str,
                   help='The name of the outbound endpoint for the DNS resolver.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('tags', tags_type)

    with self.argument_context('dns-resolver outbound-endpoint delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('outbound_endpoint_name', options_list=['--name', '-n', '--outbound-endpoint-name'], type=str,
                   help='The name of the outbound endpoint for the DNS resolver.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver outbound-endpoint wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_resolver_name', type=str, help='The name of the DNS resolver.', id_part='name')
        c.argument('outbound_endpoint_name', options_list=['--name', '-n', '--outbound-endpoint-name'], type=str,
                   help='The name of the outbound endpoint for the DNS resolver.', id_part='child_name_1')

    with self.argument_context('dns-resolver forwarding-ruleset list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('virtual_network_name', type=str, help='The name of the virtual network.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver forwarding-ruleset show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--name', '-n', '--dns-forwarding-ruleset-name'],
                   type=str, help='The name of the DNS forwarding ruleset.', id_part='name')

    with self.argument_context('dns-resolver forwarding-ruleset create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--name', '-n', '--dns-forwarding-ruleset-name'],
                   type=str, help='The name of the DNS forwarding ruleset.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('dns_resolver_outbound_endpoints', options_list=['--outbound-endpoints'],
                   action=AddDnsResolverOutboundEndpoints, nargs='+', help='The reference to the DNS resolver outbound '
                   'endpoints that are used to route DNS queries matching the forwarding rules in the ruleset to the '
                   'target DNS servers.')

    with self.argument_context('dns-resolver forwarding-ruleset update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--name', '-n', '--dns-forwarding-ruleset-name'],
                   type=str, help='The name of the DNS forwarding ruleset.', id_part='name')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('tags', tags_type)

    with self.argument_context('dns-resolver forwarding-ruleset delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--name', '-n', '--dns-forwarding-ruleset-name'],
                   type=str, help='The name of the DNS forwarding ruleset.', id_part='name')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver forwarding-ruleset wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--name', '-n', '--dns-forwarding-ruleset-name'],
                   type=str, help='The name of the DNS forwarding ruleset.', id_part='name')

    with self.argument_context('dns-resolver forwarding-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver forwarding-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('forwarding_rule_name', options_list=['--name', '-n', '--forwarding-rule-name'], type=str,
                   help='The name of the forwarding rule.', id_part='child_name_1')

    with self.argument_context('dns-resolver forwarding-rule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.')
        c.argument('forwarding_rule_name', options_list=['--name', '-n', '--forwarding-rule-name'], type=str,
                   help='The name of the forwarding rule.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('domain_name', type=str, help='The domain name for the forwarding rule.')
        c.argument('target_dns_servers', action=AddDnsResolverForwardingRuleCreateTargetDnsServers, nargs='+',
                   help='DNS servers to forward the DNS query to.')
        c.argument('metadata', action=AddDnsResolverForwardingRuleCreateMetadata, nargs='+', help='Metadata attached '
                   'to the forwarding rule. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('forwarding_rule_state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The state of '
                   'forwarding rule.')

    with self.argument_context('dns-resolver forwarding-rule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('forwarding_rule_name', options_list=['--name', '-n', '--forwarding-rule-name'], type=str,
                   help='The name of the forwarding rule.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('target_dns_servers', action=AddDnsResolverForwardingRuleUpdateTargetDnsServers, nargs='+',
                   help='DNS servers to forward the DNS query to.')
        c.argument('metadata', action=AddDnsResolverForwardingRuleUpdateMetadata, nargs='+', help='Metadata attached '
                   'to the forwarding rule. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('forwarding_rule_state', arg_type=get_enum_type(['Enabled', 'Disabled']), help='The state of '
                   'forwarding rule.')

    with self.argument_context('dns-resolver forwarding-rule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('forwarding_rule_name', options_list=['--name', '-n', '--forwarding-rule-name'], type=str,
                   help='The name of the forwarding rule.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver vnet-link list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.')
        c.argument('top', type=int, help='The maximum number of results to return. If not specified, returns up to 100 '
                   'results.')

    with self.argument_context('dns-resolver vnet-link show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('virtual_network_link_name', options_list=['--name', '-n', '--virtual-network-link-name'], type=str,
                   help='The name of the virtual network link.', id_part='child_name_1')

    with self.argument_context('dns-resolver vnet-link create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.')
        c.argument('virtual_network_link_name', options_list=['--name', '-n', '--virtual-network-link-name'], type=str,
                   help='The name of the virtual network link.')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('if_none_match', type=str, help='Set to \'*\' to allow a new resource to be created, but to prevent '
                   'updating an existing resource. Other values will be ignored.')
        c.argument('metadata', action=AddDnsResolverVnetLinkCreateMetadata, nargs='+', help='Metadata attached to the '
                   'virtual network link. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')
        c.argument('id_', options_list=['--id'], type=str, help='Resource ID.', arg_group='Virtual Network')

    with self.argument_context('dns-resolver vnet-link update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('virtual_network_link_name', options_list=['--name', '-n', '--virtual-network-link-name'], type=str,
                   help='The name of the virtual network link.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')
        c.argument('metadata', action=AddDnsResolverVnetLinkUpdateMetadata, nargs='+', help='Metadata attached to the '
                   'virtual network link. Expect value: KEY1=VALUE1 KEY2=VALUE2 ...')

    with self.argument_context('dns-resolver vnet-link delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('virtual_network_link_name', options_list=['--name', '-n', '--virtual-network-link-name'], type=str,
                   help='The name of the virtual network link.', id_part='child_name_1')
        c.argument('if_match', type=str, help='ETag of the resource. Omit this value to always overwrite the current '
                   'resource. Specify the last-seen ETag value to prevent accidentally overwriting any concurrent '
                   'changes.')

    with self.argument_context('dns-resolver vnet-link wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dns_forwarding_ruleset_name', options_list=['--ruleset-name'], type=str, help='The name of the DNS '
                   'forwarding ruleset.', id_part='name')
        c.argument('virtual_network_link_name', options_list=['--name', '-n', '--virtual-network-link-name'], type=str,
                   help='The name of the virtual network link.', id_part='child_name_1')
