# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workload-orchestration solution-template bulk-deploy",
)
class BulkDeploySolution(AAZCommand):
    """Post request for bulk deploy
    :example: Create a BulkDeploySolution
              az workload-orchestration solution-template bulk-deploy --targets "@targets.json" --name "<solution-template-name>" --version "<solution-template-version>" -g <rg>
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/solutiontemplates/{}/versions/{}/bulkdeploysolution", "2025-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_template_name = AAZStrArg(
            options=["-n", "--name", "--solution-template-name"],
            help="The name of the SolutionTemplate",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.solution_template_version_name = AAZStrArg(
            options=["--solution-template-version","--version","-v"],
            help="The name of the SolutionTemplateVersion",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[0-9]+\\.[0-9]+\\.[0-9]+$",
            ),
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.targets = AAZListArg(
            options=["--targets"],
            arg_group="Body",
            help="Targets to which solution needs to be deployed. Each target must contain solution-version-id.",
            required=True,
        )

        targets = cls._args_schema.targets
        targets.Element = AAZObjectArg()

        _element = cls._args_schema.targets.Element
        _element.solution_version_id = AAZResourceIdArg(
            options=["solution-version-id"],
            help="ArmId of Target Solution Version",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SolutionTemplateVersionsBulkDeploySolution(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass
    
    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result



    class SolutionTemplateVersionsBulkDeploySolution(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202,200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)
    
        def on_200(self, session):
                    data = self.deserialize_http_content(session)
                    self.ctx.set_var(
                        "instance",
                        data,
                        schema_builder=self._build_schema_on_200
        )
                    

        _schema_on_200 = None
        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"read_only": True},
            )
            _schema_on_200.status = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True},
            )
            _schema_on_200.end_time = AAZStrType(
                serialized_name="endTime",
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()

            properties = cls._schema_on_200.properties
            properties.solution_template_version_id = AAZStrType(
                serialized_name="solutionTemplateVersionId",
                flags={"read_only": True},
            )
            properties.deployed_targets = AAZListType(
                serialized_name="deployedTargets",
                flags={"read_only": True},
            )

            deployed_targets = cls._schema_on_200.properties.deployed_targets
            deployed_targets.Element = AAZObjectType()

            deployed_target = deployed_targets.Element
            deployed_target.solution_version_id = AAZStrType(
                serialized_name="solutionVersionId",
                flags={"read_only": True},
            )
            deployed_target.target_id = AAZStrType(
                serialized_name="targetId",
                flags={"read_only": True},
            )

            return cls._schema_on_200

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/versions/{solutionTemplateVersionName}/bulkDeploySolution",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionTemplateName", self.ctx.args.solution_template_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionTemplateVersionName", self.ctx.args.solution_template_version_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("targets", AAZListType, ".targets", typ_kwargs={"flags": {"required": True}})

            targets = _builder.get(".targets")
            if targets is not None:
                targets.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".targets[]")
            if _elements is not None:
                _elements.set_prop("solutionVersionId", AAZStrType, ".solution_version_id", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)


__all__ = ["BulkDeploySolution"]
