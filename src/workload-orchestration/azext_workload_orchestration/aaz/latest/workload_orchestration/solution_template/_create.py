# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa


from azure.cli.core.aaz import *
import time
from knack.log import get_logger
from azure.cli.core.azclierror import ValidationError
import yaml
logger = get_logger(__name__)


@register_command(
    "workload-orchestration solution-template create",
)
class Create(AAZCommand):
    """Create a Solution Template Resource
    :example: Create Solution Template
        az workload-orchestration solution-template create -n mySolutionTemplate --description "My Solution Template" --capabilities "capability1" --location eastus --resource-group myResourceGroup --config-template-file ./solution_template.yaml --specification @./specification.json --enable-external-validation true
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/solutiontemplates/{}", "2025-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True
    response_data = {}

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_template_name = AAZStrArg(
            options=["-n", "--name", "--solution-template-name"],
            help="The name of the SolutionTemplate",
            required=False,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema = cls._args_schema
        _args_schema.capabilities = AAZListArg(
            options=["--capabilities"],
            arg_group="Properties",
            help="List of capabilities",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description of Solution template",
            required=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="State of resource",
            enum={"active": "active", "inactive": "inactive"},
        )
       
        _args_schema.version = AAZStrArg(
            options=["--version","-v"],
            arg_group="Body",
            help="Version of the solution template",
            required=False,
        )


        _args_schema.configurations = AAZFileArg(
            options=["--config-template-file","--configuration-template-file","-f"],
            help="Link to File containing Config expressions  for this solution version",
        )
    
        _args_schema.specification = AAZFreeFormDictArg(
            options=["--specification"],
            help="App components spec, use @ to load from file",
        )

        _args_schema.enable_external_validation = AAZBoolArg(
            options=["--enable-ext-validation","--enable-external-validation"],
            arg_group="Properties",
            help="Flag to enable external validation",
        )

        capabilities = cls._args_schema.capabilities
        capabilities.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SolutionTemplatesCreateOrUpdate(ctx=self.ctx)()
        for i in range(1, 6):
            logger.debug(f"sleeping for 2 seconds, iteration {i}")
            time.sleep(2)
        yield self.SolutionTemplatesCreateVersion(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):\
        pass
    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SolutionTemplatesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"
        response_data = None
        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            self.__class__.response_data = self.deserialize_http_content(session)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            


            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            solutionTemplateName = str(self.ctx.args.solution_template_name)
            solutionTemplateValue = object()

            try:
                solutionTemplateValue = yaml.safe_load(str(self.ctx.args.configurations))
            except Exception as e:
                raise ValidationError("Invalid YAML passed or error in parsing yaml")
            
            if type(solutionTemplateValue) == "string":
                raise ValidationError("Invalid YAML passed")
            
            if solutionTemplateName == "Undefined" and solutionTemplateValue.get("metadata", {}).get("name") is None:
                raise ValidationError("No name input detected. One of following input is required: \n1. Name in command argument\n2. Name in file under metadata")
            
            if solutionTemplateName != "Undefined" and solutionTemplateValue.get("metadata", {}).get("name") is not None and solutionTemplateName != solutionTemplateValue['metadata']['name']:
                raise ValidationError("Solution template name passed as argument and name in file under metadata have different values")
            
            if solutionTemplateName == "Undefined":    
                solutionTemplateName = solutionTemplateValue['metadata']['name']
            
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionTemplateName", solutionTemplateName,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("capabilities", AAZListType, ".capabilities", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("enableExternalValidation", AAZBoolType, ".enable_external_validation")
                properties.set_prop("state", AAZStrType, ".state")

            capabilities = _builder.get(".properties.capabilities")
            if capabilities is not None:
                capabilities.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.capabilities = AAZListType(
                flags={"required": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.enable_external_validation = AAZBoolType(
                serialized_name="enableExternalValidation",
            )
            properties.latest_version = AAZStrType(
                serialized_name="latestVersion",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.state = AAZStrType()

            capabilities = cls._schema_on_200_201.properties.capabilities
            capabilities.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201

    class SolutionTemplatesCreateVersion(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"
  
        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            ## Save the Post Call response and use it for Output
            self.post_response_session = session
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/solutionTemplates/{solutionTemplateName}/createVersion",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            solutionTemplateName = str(self.ctx.args.solution_template_name)
            solutionTemplateValue = object()

            try:
                solutionTemplateValue = yaml.safe_load(str(self.ctx.args.configurations))
            except Exception as e:
                raise ValidationError("Invalid YAML passed or error in parsing yaml")
            
            if type(solutionTemplateValue) == "string":
                raise ValidationError("Invalid YAML passed")
            
            if solutionTemplateName == "Undefined" and solutionTemplateValue.get("metadata", {}).get("name") is None:
                raise ValidationError("Solution Template name needs to be passed either as argument in --schema-name or in schema yaml in the metadata")
            
            if solutionTemplateName != "Undefined" and solutionTemplateValue.get("metadata", {}).get("name") is not None and solutionTemplateName != solutionTemplateValue['metadata']['name']:
                raise ValidationError("Schema name passed as argument and name passed in schema yaml has different values")
            
            if solutionTemplateName == "Undefined":    
                solutionTemplateName = solutionTemplateValue['metadata']['name']
            
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionTemplateName", solutionTemplateName,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("solutionTemplateVersion", AAZObjectType)
            _builder.set_prop("version", AAZStrType, ".version")

            solution_template_version = _builder.get(".solutionTemplateVersion")
            if solution_template_version is not None:
                solution_template_version.set_prop("properties", AAZObjectType)

            properties = _builder.get(".solutionTemplateVersion.properties")
            if properties is not None:
                properties.set_prop("configurations", AAZStrType, ".configurations", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("specification", AAZFreeFormDictType, ".specification", typ_kwargs={"flags": {"required": True}})

            specification = _builder.get(".solutionTemplateVersion.properties.specification")
            if specification is not None:
                specification.set_anytype_elements(".")
            
            data = self.serialize_content(_content_value)    
            data["solutionTemplateVersion"]["properties"]["orchestratorType"] = "TO"
        
            return data



        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _schema_on_200 = cls._schema_on_200

            _schema_on_200.id = AAZStrType(serialized_name="id")
            _schema_on_200.name = AAZStrType(serialized_name="name")
            _schema_on_200.resourceId = AAZStrType(serialized_name="resourceId")
            _schema_on_200.status = AAZStrType(serialized_name="status")
            _schema_on_200.startTime = AAZStrType(serialized_name="startTime")
            _schema_on_200.endTime = AAZStrType(serialized_name="endTime")

            _schema_on_200.properties = AAZObjectType(serialized_name="properties")
            _schema_on_200.properties.solutionTemplateVersionId = AAZStrType(serialized_name="solutionTemplateVersionId")
            _schema_on_200.properties.solutionTemplateId = AAZStrType(serialized_name="solutionTemplateId")

            return cls._schema_on_200


class _CreateVersionHelper:
    """Helper class for CreateVersion"""



class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]