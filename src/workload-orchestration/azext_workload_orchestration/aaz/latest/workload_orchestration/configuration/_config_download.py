# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

import os
from azure.cli.core.aaz import *


@register_command(
    "workload-orchestration configuration download",
    is_preview=False,
)
class Download(AAZCommand):
    """Download configurations available at specified hierarchical entity
    :example: Download configuration
            az workload-orchestration configuration download -g rg1 --target-name target1 --solution-template-name solutionTemplate1
    """

    _aaz_info = {
        "version": "2024-09-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.edge/configurations/{}/dynamicconfigurations/{}/versions/version1", "2024-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.target_name = AAZStrArg(
            options=["--target-name"],
            help="The name of the Configuration",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.solution_template_name = AAZStrArg(
            options=["--solution-template-name"],
            help="The name of the DynamicConfiguration",
            required=False,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        config_name = str(self.ctx.args.target_name)
        if len(config_name) > 18:
            config_name = config_name[:18] + "Config"
        else:
            config_name = config_name + "Config"
        self.ctx.args.target_name = config_name
        self.DynamicConfigurationVersionsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        config_values = result["properties"]["values"]
        
        # Check if config is empty
        if config_values == "{}":
            print("No config found.")
            return
        
        # Create filename based on target_name and solution_template_name
        target_name = str(self.ctx.args.target_name)
        if target_name.endswith("Config"):
            # Remove the "Config" suffix for the filename
            target_name = target_name[:len(target_name)-6]
        
        solution_name = str(self.ctx.args.solution_template_name)
        filename = f"{target_name}_{solution_name}.yaml"
        
        # Get absolute path
        absolute_path = os.path.abspath(filename)
        
        # Save to yaml file
        try:
            with open(filename, 'w', encoding='utf-8') as file:
                file.write(config_values)
            print(f"Configuration saved to: {absolute_path}")
        except Exception as e:
            print(f"Error saving configuration to file: {str(e)}")            

    class DynamicConfigurationVersionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)
            config = dict()
            config["properties"] = dict()
            config["properties"]["values"] = "{}"
            if session.http_response.status_code in [404]:
                self.ctx.set_var(
                    "instance",
                    config,
                    schema_builder=self._build_schema_on_404
                )
            else:
                return self.on_error(session.http_response)


        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configurations/{configurationName}/dynamicConfigurations/{dynamicConfigurationName}/versions/version1",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            solution_template_name = "common"
            if has_value(self.ctx.args.solution_template_name):
                solution_template_name = self.ctx.args.solution_template_name

            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.target_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "dynamicConfigurationName", solution_template_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_404(cls):
            cls._schema_on_200 = AAZObjectType()
            _schema_on_200 = cls._schema_on_200
            _schema_on_200.properties = AAZFreeFormDictType()
            return cls._schema_on_200


        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.schema_id = AAZStrType(
                serialized_name="schemaId",
                flags={"read_only": True},
            )
            properties.values = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _DownloadHelper:
    """Helper class for Download"""


__all__ = ["Download"]
