# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

import os
import sys
import asyncio
from azure.cli.core.aaz import *

# Add wo_gen.py directory to path
SCRIPT_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'wo_artifact', 'src')
sys.path.append(SCRIPT_DIR)

from wo_gen import main as wo_gen_main

@register_command(
    "workload-orchestration artifcat schema-generate",
    is_preview=False,
)
class SimpleGenerate(AAZCommand):
    """Generate artifacts using the specified chart and AI configuration.
    :example: Generate artifacts
    az workload-orchestration artifcat simple-generate --chart-path /path/to/chart --schema-name schema --schema-version 1.0.0 --ai-endpoint url --ai-key key --ai-model model --output-dir ./output --prompt prompt.txt
    """

    _aaz_info = {
        "version": "2024-08-01-preview"
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        _args_schema = cls._args_schema
        _args_schema.chart_path = AAZStrArg(
            options=["--chart-path"],
            help="Path to the chart directory",
            required=True,
        )
        _args_schema.schema_name = AAZStrArg(
            options=["--schema-name"],
            help="Schema name",
            required=True,
        )
        _args_schema.schema_version = AAZStrArg(
            options=["--schema-version"],
            help="Schema version",
            required=True,
        )
        _args_schema.ai_endpoint = AAZStrArg(
            options=["--ai-endpoint"],
            help="AI endpoint URL",
            required=True,
        )
        _args_schema.ai_key = AAZStrArg(
            options=["--ai-key"],
            help="AI authentication key",
            required=True,
        )
        _args_schema.ai_model = AAZStrArg(
            options=["--ai-model"],
            help="AI model name",
            required=True,
        )
        _args_schema.output_dir = AAZStrArg(
            options=["--output-dir"],
            help="Output directory path",
            required=True,
        )
        _args_schema.prompt_file = AAZStrArg(
            options=["--prompt"],
            help="Path to prompt file",
            required=True,
        )

        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        try:
            # Extract arguments as strings
            args = {
                "chart_path": str(self.ctx.args.chart_path),
                "schema_name": str(self.ctx.args.schema_name),
                "schema_version": str(self.ctx.args.schema_version),
                "ai_endpoint": str(self.ctx.args.ai_endpoint),
                "ai_key": str(self.ctx.args.ai_key),
                "ai_model": str(self.ctx.args.ai_model),
                "output_dir": str(self.ctx.args.output_dir),
                "prompt": str(self.ctx.args.prompt_file)
            }
            
            # Set up sys.argv for wo_gen.py
            sys.argv = [
                'wo_gen.py',
                args["chart_path"],
                '--schema-name', args["schema_name"],
                '--schema-version', args["schema_version"],
                '--ai-endpoint', args["ai_endpoint"],
                '--ai-key', args["ai_key"],
                '--ai-model', args["ai_model"],
                '--output-dir', args["output_dir"],
                '--prompt', args["prompt"]
            ]

            # Run wo_gen.py main function
            asyncio.run(wo_gen_main())

            # Check if output files were generated
            schema_file = os.path.join(args["output_dir"], f"{args['schema_name']}-schema.yaml")
            template_file = os.path.join(args["output_dir"], f"{args['schema_name']}-template.yaml")

            if os.path.exists(schema_file) and os.path.exists(template_file):
                result = {
                    "properties": {
                        "status": "success",
                        "message": "Generation completed successfully",
                        "files": {
                            "schema": schema_file,
                            "template": template_file
                        }
                    }
                }
            else:
                raise Exception("Expected output files were not generated")

        except Exception as e:
            result = {
                "properties": {
                    "status": "error",
                    "message": str(e),
                    "error": str(e),
                    "args": args
                }
            }

        self.ctx.set_var("instance", result, schema_builder=self._build_schema)
        self.post_operations()

    _schema = None

    @classmethod
    def _build_schema(cls):
        if cls._schema is not None:
            return cls._schema

        cls._schema = AAZObjectType()
        _schema = cls._schema
        _schema.properties = AAZObjectType()
        properties = _schema.properties
        properties.status = AAZStrType()
        properties.message = AAZStrType()
        properties.error = AAZStrType(nullable=True)
        properties.files = AAZFreeFormDictType(nullable=True)
        return cls._schema

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        if result["properties"].get("error"):
            print(f"Error: {result['properties']['error']}")
        else:
            print(f"Success: {result['properties']['message']}")
            if result["properties"].get("files"):
                print("\nGenerated files:")
                for file_type, file_path in result["properties"]["files"].items():
                    print(f"{file_type}: {file_path}")
        return result["properties"]

__all__ = ["SimpleGenerate"]
