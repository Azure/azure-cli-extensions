# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *
from azure.cli.core.azclierror import ValidationError
import yaml

@register_command(
    "workload-orchestration config-template create",
)
class Create(AAZCommand):
    """Create a Config Template Resource
    :example: Create a Config Template 
        az workload-orchestration config-template create -g rg1 -n ct1 --description "test" --location eastus --version 1.0.0 --config-template-file config.yaml
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/Microsoft.Edge/configtemplates/{}", "2025-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.config_template_name = AAZStrArg(
            options=["-n", "--name", "--config-template-name"],
            help="The name of the ConfigTemplate",
            required=False,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description of config template",
            required=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        _args_schema = cls._args_schema
    


        _args_schema = cls._args_schema
        _args_schema.version = AAZStrArg(
            options=["--version","-v"],
            arg_group="Body",
            help="Version of the config template",
            required=False
        )

        _args_schema.configurations = AAZFileArg(
            options=["--config-template-file","--configuration-template-file"],
            help="Link to File containing Config expressions  for this config version"
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ConfigTemplatesCreateOrUpdate(ctx=self.ctx)()
        yield self.ConfigTemplatesCreateVersion(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConfigTemplatesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            configTemplateName = str(self.ctx.args.config_template_name)
            configTemplateValue = object()

            try:
                configTemplateValue = yaml.safe_load(str(self.ctx.args.configurations))
            except Exception as e:
                raise ValidationError("Invalid YAML passed or error in parsing yaml")
            
            if type(configTemplateValue) == "string":
                raise ValidationError("Invalid YAML passed")
            
            if configTemplateName == "Undefined" and configTemplateValue.get("metadata", {}).get("name") is None:
                raise ValidationError("No name input detected. One of following input is required: \n1. Name in command argument\n2. Name in file under metadata")
            
            if configTemplateName != "Undefined" and configTemplateValue.get("metadata", {}).get("name") is not None and configTemplateName != configTemplateValue['metadata']['name']:
                raise ValidationError("Config Template name passed as argument and name in file under metadata have different values.")
            
            if configTemplateName == "Undefined":    
                configTemplateName = configTemplateValue['metadata']['name']
            
            parameters = {
                **self.serialize_url_param(
                    "configTemplateName", configTemplateName,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.latest_version = AAZStrType(
                serialized_name="latestVersion",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201
        
    class ConfigTemplatesCreateVersion(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/configTemplates/{configTemplateName}/createVersion",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            configTemplateName = str(self.ctx.args.config_template_name)
            configTemplateValue = object()

            try:
                configTemplateValue = yaml.safe_load(str(self.ctx.args.configurations))
            except Exception as e:
                raise ValidationError("Invalid YAML passed or error in parsing yaml")
            
            if type(configTemplateValue) == "string":
                raise ValidationError("Invalid YAML passed")
            
            if configTemplateName == "Undefined" and configTemplateValue.get("metadata", {}).get("name") is None:
                raise ValidationError("No name input detected. One of following input is required: \n1. Name in command argument\n2. Name in file under metadata")
            
            if configTemplateName != "Undefined" and configTemplateValue.get("metadata", {}).get("name") is not None and configTemplateName != configTemplateValue['metadata']['name']:
                raise ValidationError("Config Template name passed as argument and name in file under metadata have different values.")
            
            if configTemplateName == "Undefined":    
                configTemplateName = configTemplateValue['metadata']['name']
            
            parameters = {
                **self.serialize_url_param(
                    "configTemplateName", configTemplateName,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            
            _builder.set_prop("configTemplateVersion", AAZObjectType)
            _builder.set_prop("version", AAZStrType, ".version")
            config_template_version = _builder.get(".configTemplateVersion")
            if config_template_version is not None:
                config_template_version.set_prop("properties", AAZObjectType)

            properties = _builder.get(".configTemplateVersion.properties")
            if properties is not None:
                properties.set_prop("configurations", AAZStrType, ".configurations", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _schema_on_200 = cls._schema_on_200
            
            # Top-level operation status fields
            _schema_on_200.id = AAZStrType(flags={"read_only": True})
            _schema_on_200.name = AAZStrType(flags={"read_only": True})
            _schema_on_200.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"read_only": True}
            )
            _schema_on_200.status = AAZStrType(flags={"read_only": True})
            _schema_on_200.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True}
            )
            _schema_on_200.end_time = AAZStrType(
                serialized_name="endTime",
                flags={"read_only": True}
            )
            
            # Properties container (nested response)
            _schema_on_200.properties = AAZObjectType()
            properties = cls._schema_on_200.properties
            
            # ConfigTemplate version fields in properties
            properties.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True}
            )
            properties.id = AAZStrType(flags={"read_only": True})
            properties.name = AAZStrType(flags={"read_only": True})
            properties.type = AAZStrType(flags={"read_only": True})
            properties.properties = AAZObjectType()
            
            # Nested properties.properties fields
            config_properties = properties.properties
            config_properties.configurations = AAZStrType(flags={"required": True})
            config_properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True}
            )
            
            return cls._schema_on_200

class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
