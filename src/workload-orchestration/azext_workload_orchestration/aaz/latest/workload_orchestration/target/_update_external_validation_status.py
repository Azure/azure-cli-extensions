# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workload-orchestration target update-external-validation-status",
)
class UpdateExternalValidationStatus(AAZCommand):
    """Post request to update external validation status
    :example: Update external validation status for a target
        az workload-orchestration target update-external-validation-status -g rg --target-name target --external-validation-id externalValidationId --solution-version-id solutionVersionId --validation-status Valid
    """

    _aaz_info = {
        "version": "2025-06-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.edge/targets/{}/updateexternalvalidationstatus", "2025-06-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.target_name = AAZStrArg(
            options=["--target-name", "--name", "-n"],
            help="Name of the target",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=61,
                min_length=3,
            ),
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.error_details = AAZFreeFormDictArg(
            options=["--error-details"],
            arg_group="Body",
            help="Error Details if any failure is there",
            required=False,
        )
        _args_schema.external_validation_id = AAZStrArg(
            options=["--external-validation-id"],
            arg_group="Body",
            help="External validation id",
            required=True,
        )
        _args_schema.solution_version_id = AAZStrArg(
            options=["--solution-version-id"],
            arg_group="Body",
            help="Solution Version Id",
            required=True,
        )
        _args_schema.validation_status = AAZStrArg(
            options=["--validation-status"],
            arg_group="Body",
            help="Validation Status of external validation",
            required=True,
            enum={"Invalid": "Invalid", "Valid": "Valid"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.TargetsUpdateExternalValidationStatus(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class TargetsUpdateExternalValidationStatus(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/updateExternalValidationStatus",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "targetName", self.ctx.args.target_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("errorDetails", AAZFreeFormDictType, ".error_details")
            _builder.set_prop("externalValidationId", AAZStrType, ".external_validation_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("solutionVersionId", AAZStrType, ".solution_version_id", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("validationStatus", AAZStrType, ".validation_status", typ_kwargs={"flags": {"required": True}})

            errorDetails = _builder.get(".errorDetails")
            if errorDetails is not None:
                errorDetails.set_anytype_elements(".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            _schema_on_200.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200.properties
            properties.configuration = AAZStrType(
                flags={"read_only": True},
            )
            properties.error_details = AAZObjectType(
                serialized_name="errorDetails",
                flags={"read_only": True},
            )
            _UpdateExternalValidationStatusHelper._build_schema_error_detail_read(properties.error_details)
            properties.external_validation_id = AAZStrType(
                serialized_name="externalValidationId",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.review_id = AAZStrType(
                serialized_name="reviewId",
                flags={"read_only": True},
            )
            properties.revision = AAZIntType(
                flags={"read_only": True},
            )
            properties.solution_dependencies = AAZListType(
                serialized_name="solutionDependencies",
                flags={"read_only": True},
            )
            properties.solution_instance_name = AAZStrType(
                serialized_name="solutionInstanceName",
                flags={"read_only": True},
            )
            properties.solution_template_version_id = AAZStrType(
                serialized_name="solutionTemplateVersionId",
                flags={"read_only": True},
            )
            properties.specification = AAZDictType(
                flags={"required": True},
            )
            properties.state = AAZStrType(
                flags={"read_only": True},
            )
            properties.target_display_name = AAZStrType(
                serialized_name="targetDisplayName",
                flags={"read_only": True},
            )
            properties.target_level_configuration = AAZStrType(
                serialized_name="targetLevelConfiguration",
                flags={"read_only": True},
            )

            solution_dependencies = cls._schema_on_200.properties.solution_dependencies
            solution_dependencies.Element = AAZObjectType()
            _UpdateExternalValidationStatusHelper._build_schema_solution_dependency_read(solution_dependencies.Element)

            specification = cls._schema_on_200.properties.specification
            specification.Element = AAZAnyType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _UpdateExternalValidationStatusHelper:
    """Helper class for UpdateExternalValidationStatus"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType(
            flags={"read_only": True}
        )

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZDictType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        info = _schema_error_detail_read.additional_info.Element.info
        info.Element = AAZAnyType()

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target

    _schema_solution_dependency_read = None

    @classmethod
    def _build_schema_solution_dependency_read(cls, _schema):
        if cls._schema_solution_dependency_read is not None:
            _schema.dependencies = cls._schema_solution_dependency_read.dependencies
            _schema.solution_instance_name = cls._schema_solution_dependency_read.solution_instance_name
            _schema.solution_template_version_id = cls._schema_solution_dependency_read.solution_template_version_id
            _schema.solution_version_id = cls._schema_solution_dependency_read.solution_version_id
            _schema.target_id = cls._schema_solution_dependency_read.target_id
            return

        cls._schema_solution_dependency_read = _schema_solution_dependency_read = AAZObjectType()

        solution_dependency_read = _schema_solution_dependency_read
        solution_dependency_read.dependencies = AAZListType()
        solution_dependency_read.solution_instance_name = AAZStrType(
            serialized_name="solutionInstanceName",
        )
        solution_dependency_read.solution_template_version_id = AAZStrType(
            serialized_name="solutionTemplateVersionId",
            flags={"required": True},
        )
        solution_dependency_read.solution_version_id = AAZStrType(
            serialized_name="solutionVersionId",
            flags={"required": True},
        )
        solution_dependency_read.target_id = AAZStrType(
            serialized_name="targetId",
            flags={"required": True},
        )

        dependencies = _schema_solution_dependency_read.dependencies
        dependencies.Element = AAZObjectType()
        cls._build_schema_solution_dependency_read(dependencies.Element)

        _schema.dependencies = cls._schema_solution_dependency_read.dependencies
        _schema.solution_instance_name = cls._schema_solution_dependency_read.solution_instance_name
        _schema.solution_template_version_id = cls._schema_solution_dependency_read.solution_template_version_id
        _schema.solution_version_id = cls._schema_solution_dependency_read.solution_version_id
        _schema.target_id = cls._schema_solution_dependency_read.target_id


__all__ = ["UpdateExternalValidationStatus"]
