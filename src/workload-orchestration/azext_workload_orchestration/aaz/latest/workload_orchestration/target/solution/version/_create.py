# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workload-orchestration target solution version create",
)
class Create(AAZCommand):
    """Create a Solution Version Resource
    """

    _aaz_info = {
        "version": "2025-01-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.edge/targets/{}/solutions/{}/versions/{}", "2025-01-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["--solution-name"],
            help="Name of the solution",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!v-)(?!.*-v-)[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=61,
                min_length=3,
            ),
        )
        _args_schema.solution_version_name = AAZStrArg(
            options=["-n", "--name", "--solution-version-name"],
            help="Name of the solution version",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!v-)(?!.*-v-)[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=61,
                min_length=7,
            ),
        )
        _args_schema.target_name = AAZStrArg(
            options=["--target-name"],
            help="Name of the target",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([-a-zA-Z0-9]*[a-zA-Z0-9])?)*$",
                max_length=61,
                min_length=3,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.specification = AAZFreeFormDictArg(
            options=["--specification"],
            arg_group="Properties",
            help="App components spec",
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="Resource",
            help="The complex type of the extended location.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The name of the extended location.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The type of the extended location.",
            required=True,
            enum={"CustomLocation": "CustomLocation", "EdgeZone": "EdgeZone"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SolutionVersionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SolutionVersionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Edge/targets/{targetName}/solutions/{solutionName}/versions/{solutionVersionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionName", self.ctx.args.solution_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionVersionName", self.ctx.args.solution_version_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "targetName", self.ctx.args.target_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-01-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location")
            _builder.set_prop("properties", AAZObjectType)

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("specification", AAZFreeFormDictType, ".specification", typ_kwargs={"flags": {"required": True}})

            specification = _builder.get(".properties.specification")
            if specification is not None:
                specification.set_anytype_elements(".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.e_tag = AAZStrType(
                serialized_name="eTag",
                flags={"read_only": True},
            )
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.configuration = AAZStrType(
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.review_id = AAZStrType(
                serialized_name="reviewId",
                flags={"read_only": True},
            )
            properties.revision = AAZIntType(
                flags={"read_only": True},
            )
            properties.solution_dependencies = AAZListType(
                serialized_name="solutionDependencies",
                flags={"read_only": True},
            )
            properties.solution_instance_name = AAZStrType(
                serialized_name="solutionInstanceName",
                flags={"read_only": True},
            )
            properties.solution_template_version_id = AAZStrType(
                serialized_name="solutionTemplateVersionId",
                flags={"read_only": True},
            )
            properties.specification = AAZFreeFormDictType(
                flags={"required": True},
            )
            properties.state = AAZStrType(
                flags={"read_only": True},
            )
            properties.target_display_name = AAZStrType(
                serialized_name="targetDisplayName",
                flags={"read_only": True},
            )

            solution_dependencies = cls._schema_on_200_201.properties.solution_dependencies
            solution_dependencies.Element = AAZObjectType()
            _CreateHelper._build_schema_solution_dependency_read(solution_dependencies.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_solution_dependency_read = None

    @classmethod
    def _build_schema_solution_dependency_read(cls, _schema):
        if cls._schema_solution_dependency_read is not None:
            _schema.dependencies = cls._schema_solution_dependency_read.dependencies
            _schema.solution_template_version_id = cls._schema_solution_dependency_read.solution_template_version_id
            _schema.solution_version_id = cls._schema_solution_dependency_read.solution_version_id
            _schema.target_id = cls._schema_solution_dependency_read.target_id
            return

        cls._schema_solution_dependency_read = _schema_solution_dependency_read = AAZObjectType()

        solution_dependency_read = _schema_solution_dependency_read
        solution_dependency_read.dependencies = AAZListType()
        solution_dependency_read.solution_template_version_id = AAZStrType(
            serialized_name="solutionTemplateVersionId",
            flags={"required": True},
        )
        solution_dependency_read.solution_version_id = AAZStrType(
            serialized_name="solutionVersionId",
            flags={"required": True},
        )
        solution_dependency_read.target_id = AAZStrType(
            serialized_name="targetId",
            flags={"required": True},
        )

        dependencies = _schema_solution_dependency_read.dependencies
        dependencies.Element = AAZObjectType()
        cls._build_schema_solution_dependency_read(dependencies.Element)

        _schema.dependencies = cls._schema_solution_dependency_read.dependencies
        _schema.solution_template_version_id = cls._schema_solution_dependency_read.solution_template_version_id
        _schema.solution_version_id = cls._schema_solution_dependency_read.solution_version_id
        _schema.target_id = cls._schema_solution_dependency_read.target_id


__all__ = ["Create"]
