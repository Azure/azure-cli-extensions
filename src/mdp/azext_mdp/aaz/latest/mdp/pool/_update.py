# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mdp pool update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a pool

    :example: Update
        az mdp pool update --name "cli-contoso-pool" --resource-group "rg1" --tags CostCode="12345"
    """

    _aaz_info = {
        "version": "2023-12-13-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.devopsinfrastructure/pools/{}", "2023-12-13-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pool_name = AAZStrArg(
            options=["-n", "--name", "--pool-name"],
            help="Name of the pool. It needs to be globally unique.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9-.]*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Resource",
            help="The managed service identities assigned to this resource.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PoolsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.PoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoolsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "poolName", self.ctx.args.pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-12-13-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_pool_read(cls._schema_on_200)

            return cls._schema_on_200

    class PoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DevOpsInfrastructure/pools/{poolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "poolName", self.ctx.args.pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-12-13-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_pool_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_pool_read = None

    @classmethod
    def _build_schema_pool_read(cls, _schema):
        if cls._schema_pool_read is not None:
            _schema.id = cls._schema_pool_read.id
            _schema.identity = cls._schema_pool_read.identity
            _schema.location = cls._schema_pool_read.location
            _schema.name = cls._schema_pool_read.name
            _schema.properties = cls._schema_pool_read.properties
            _schema.system_data = cls._schema_pool_read.system_data
            _schema.tags = cls._schema_pool_read.tags
            _schema.type = cls._schema_pool_read.type
            return

        cls._schema_pool_read = _schema_pool_read = AAZObjectType()

        pool_read = _schema_pool_read
        pool_read.id = AAZStrType(
            flags={"read_only": True},
        )
        pool_read.identity = AAZObjectType()
        pool_read.location = AAZStrType(
            flags={"required": True},
        )
        pool_read.name = AAZStrType(
            flags={"read_only": True},
        )
        pool_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        pool_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        pool_read.tags = AAZDictType()
        pool_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_pool_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_pool_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_pool_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_pool_read.properties
        properties.agent_profile = AAZObjectType(
            serialized_name="agentProfile",
            flags={"required": True},
        )
        properties.dev_center_project_resource_id = AAZStrType(
            serialized_name="devCenterProjectResourceId",
            flags={"required": True},
        )
        properties.fabric_profile = AAZObjectType(
            serialized_name="fabricProfile",
            flags={"required": True},
        )
        properties.maximum_concurrency = AAZIntType(
            serialized_name="maximumConcurrency",
            flags={"required": True},
        )
        properties.organization_profile = AAZObjectType(
            serialized_name="organizationProfile",
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )

        agent_profile = _schema_pool_read.properties.agent_profile
        agent_profile.kind = AAZStrType(
            flags={"required": True},
        )
        agent_profile.resource_predictions = AAZObjectType(
            serialized_name="resourcePredictions",
        )

        disc_stateful = _schema_pool_read.properties.agent_profile.discriminate_by("kind", "Stateful")
        disc_stateful.max_agent_lifetime = AAZStrType(
            serialized_name="maxAgentLifetime",
            flags={"required": True},
        )

        fabric_profile = _schema_pool_read.properties.fabric_profile
        fabric_profile.kind = AAZStrType(
            flags={"required": True},
        )

        disc_vmss = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss")
        disc_vmss.images = AAZListType(
            flags={"required": True},
        )
        disc_vmss.network_profile = AAZObjectType(
            serialized_name="networkProfile",
        )
        disc_vmss.os_profile = AAZObjectType(
            serialized_name="osProfile",
        )
        disc_vmss.sku = AAZObjectType(
            flags={"required": True},
        )
        disc_vmss.storage_profile = AAZObjectType(
            serialized_name="storageProfile",
        )

        images = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").images
        images.Element = AAZObjectType()

        _element = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").images.Element
        _element.aliases = AAZListType()
        _element.buffer = AAZStrType()
        _element.resource_id = AAZStrType(
            serialized_name="resourceId",
            flags={"required": True},
        )

        aliases = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").images.Element.aliases
        aliases.Element = AAZStrType()

        network_profile = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").network_profile
        network_profile.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )

        os_profile = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").os_profile
        os_profile.logon_type = AAZStrType(
            serialized_name="logonType",
        )
        os_profile.secrets_management_settings = AAZObjectType(
            serialized_name="secretsManagementSettings",
        )

        secrets_management_settings = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").os_profile.secrets_management_settings
        secrets_management_settings.certificate_store_location = AAZStrType(
            serialized_name="certificateStoreLocation",
        )
        secrets_management_settings.key_exportable = AAZBoolType(
            serialized_name="keyExportable",
            flags={"required": True},
        )
        secrets_management_settings.observed_certificates = AAZListType(
            serialized_name="observedCertificates",
            flags={"required": True},
        )

        observed_certificates = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").os_profile.secrets_management_settings.observed_certificates
        observed_certificates.Element = AAZStrType()

        sku = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").sku
        sku.name = AAZStrType(
            flags={"required": True},
        )

        storage_profile = _schema_pool_read.properties.fabric_profile.discriminate_by("kind", "Vmss").storage_profile
        storage_profile.os_disk_storage_account_type = AAZStrType(
            serialized_name="osDiskStorageAccountType",
        )

        organization_profile = _schema_pool_read.properties.organization_profile
        organization_profile.kind = AAZStrType(
            flags={"required": True},
        )

        disc_azure_dev_ops = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps")
        disc_azure_dev_ops.organizations = AAZListType(
            flags={"required": True},
        )
        disc_azure_dev_ops.permission_profile = AAZObjectType(
            serialized_name="permissionProfile",
        )

        organizations = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").organizations
        organizations.Element = AAZObjectType()

        _element = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").organizations.Element
        _element.parallelism = AAZIntType()
        _element.projects = AAZListType()
        _element.url = AAZStrType(
            flags={"required": True},
        )

        projects = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").organizations.Element.projects
        projects.Element = AAZStrType()

        permission_profile = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").permission_profile
        permission_profile.groups = AAZListType()
        permission_profile.kind = AAZStrType(
            flags={"required": True},
        )
        permission_profile.users = AAZListType()

        groups = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").permission_profile.groups
        groups.Element = AAZStrType()

        users = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "AzureDevOps").permission_profile.users
        users.Element = AAZStrType()

        disc_git_hub = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "GitHub")
        disc_git_hub.organizations = AAZListType(
            flags={"required": True},
        )

        organizations = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "GitHub").organizations
        organizations.Element = AAZObjectType()

        _element = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "GitHub").organizations.Element
        _element.repositories = AAZListType()
        _element.url = AAZStrType(
            flags={"required": True},
        )

        repositories = _schema_pool_read.properties.organization_profile.discriminate_by("kind", "GitHub").organizations.Element.repositories
        repositories.Element = AAZStrType()

        system_data = _schema_pool_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_pool_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_pool_read.id
        _schema.identity = cls._schema_pool_read.identity
        _schema.location = cls._schema_pool_read.location
        _schema.name = cls._schema_pool_read.name
        _schema.properties = cls._schema_pool_read.properties
        _schema.system_data = cls._schema_pool_read.system_data
        _schema.tags = cls._schema_pool_read.tags
        _schema.type = cls._schema_pool_read.type


__all__ = ["Update"]
