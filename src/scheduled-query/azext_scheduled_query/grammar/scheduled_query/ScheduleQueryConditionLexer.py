# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------
# Generated from ScheduleQueryCondition.g4 by ANTLR 4.13.1
# pylint: disable=all
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,38,347,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,
        12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,
        24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,
        30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,
        37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,
        41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,
        46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,
        48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,
        49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,
        53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,3,55,309,8,55,1,56,4,56,312,8,56,11,56,12,56,313,
        1,56,1,56,4,56,318,8,56,11,56,12,56,319,3,56,322,8,56,1,57,1,57,
        1,58,4,58,327,8,58,11,58,12,58,328,1,59,3,59,332,8,59,1,59,1,59,
        4,59,336,8,59,11,59,12,59,337,1,60,1,60,1,60,1,60,4,60,344,8,60,
        11,60,12,60,345,0,0,61,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,41,0,
        43,0,45,0,47,0,49,0,51,0,53,0,55,0,57,0,59,0,61,0,63,0,65,0,67,0,
        69,0,71,0,73,0,75,0,77,0,79,0,81,18,83,19,85,20,87,21,89,22,91,23,
        93,24,95,25,97,26,99,27,101,28,103,29,105,30,107,31,109,32,111,33,
        113,34,115,35,117,36,119,37,121,38,1,0,26,2,0,65,65,97,97,2,0,67,
        67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,70,70,102,102,2,
        0,71,71,103,103,2,0,72,72,104,104,2,0,73,73,105,105,2,0,76,76,108,
        108,2,0,77,77,109,109,2,0,78,78,110,110,2,0,79,79,111,111,2,0,80,
        80,112,112,2,0,82,82,114,114,2,0,83,83,115,115,2,0,85,85,117,117,
        2,0,86,86,118,118,2,0,87,87,119,119,2,0,88,88,120,120,2,0,84,84,
        116,116,1,0,48,57,1,0,97,122,1,0,65,90,2,0,44,44,46,46,2,0,34,34,
        39,39,2,0,9,9,32,32,339,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,81,1,0,0,0,0,83,
        1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,
        1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,
        1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,
        0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,
        0,0,0,1,123,1,0,0,0,3,125,1,0,0,0,5,127,1,0,0,0,7,129,1,0,0,0,9,
        131,1,0,0,0,11,133,1,0,0,0,13,135,1,0,0,0,15,137,1,0,0,0,17,139,
        1,0,0,0,19,141,1,0,0,0,21,143,1,0,0,0,23,145,1,0,0,0,25,147,1,0,
        0,0,27,150,1,0,0,0,29,153,1,0,0,0,31,156,1,0,0,0,33,158,1,0,0,0,
        35,160,1,0,0,0,37,162,1,0,0,0,39,164,1,0,0,0,41,166,1,0,0,0,43,168,
        1,0,0,0,45,170,1,0,0,0,47,172,1,0,0,0,49,174,1,0,0,0,51,176,1,0,
        0,0,53,178,1,0,0,0,55,180,1,0,0,0,57,182,1,0,0,0,59,184,1,0,0,0,
        61,186,1,0,0,0,63,188,1,0,0,0,65,190,1,0,0,0,67,192,1,0,0,0,69,194,
        1,0,0,0,71,196,1,0,0,0,73,198,1,0,0,0,75,200,1,0,0,0,77,202,1,0,
        0,0,79,204,1,0,0,0,81,206,1,0,0,0,83,212,1,0,0,0,85,217,1,0,0,0,
        87,226,1,0,0,0,89,229,1,0,0,0,91,232,1,0,0,0,93,238,1,0,0,0,95,242,
        1,0,0,0,97,245,1,0,0,0,99,256,1,0,0,0,101,267,1,0,0,0,103,274,1,
        0,0,0,105,278,1,0,0,0,107,287,1,0,0,0,109,296,1,0,0,0,111,308,1,
        0,0,0,113,311,1,0,0,0,115,323,1,0,0,0,117,326,1,0,0,0,119,335,1,
        0,0,0,121,343,1,0,0,0,123,124,5,47,0,0,124,2,1,0,0,0,125,126,5,46,
        0,0,126,4,1,0,0,0,127,128,5,95,0,0,128,6,1,0,0,0,129,130,5,92,0,
        0,130,8,1,0,0,0,131,132,5,58,0,0,132,10,1,0,0,0,133,134,5,37,0,0,
        134,12,1,0,0,0,135,136,5,45,0,0,136,14,1,0,0,0,137,138,5,44,0,0,
        138,16,1,0,0,0,139,140,5,124,0,0,140,18,1,0,0,0,141,142,5,38,0,0,
        142,20,1,0,0,0,143,144,5,40,0,0,144,22,1,0,0,0,145,146,5,41,0,0,
        146,24,1,0,0,0,147,148,5,61,0,0,148,149,5,61,0,0,149,26,1,0,0,0,
        150,151,5,92,0,0,151,152,5,34,0,0,152,28,1,0,0,0,153,154,5,92,0,
        0,154,155,5,39,0,0,155,30,1,0,0,0,156,157,5,42,0,0,157,32,1,0,0,
        0,158,159,5,126,0,0,159,34,1,0,0,0,160,161,7,0,0,0,161,36,1,0,0,
        0,162,163,7,1,0,0,163,38,1,0,0,0,164,165,7,2,0,0,165,40,1,0,0,0,
        166,167,7,3,0,0,167,42,1,0,0,0,168,169,7,4,0,0,169,44,1,0,0,0,170,
        171,7,5,0,0,171,46,1,0,0,0,172,173,7,6,0,0,173,48,1,0,0,0,174,175,
        7,7,0,0,175,50,1,0,0,0,176,177,7,8,0,0,177,52,1,0,0,0,178,179,7,
        9,0,0,179,54,1,0,0,0,180,181,7,10,0,0,181,56,1,0,0,0,182,183,7,11,
        0,0,183,58,1,0,0,0,184,185,7,12,0,0,185,60,1,0,0,0,186,187,7,13,
        0,0,187,62,1,0,0,0,188,189,7,14,0,0,189,64,1,0,0,0,190,191,7,15,
        0,0,191,66,1,0,0,0,192,193,7,16,0,0,193,68,1,0,0,0,194,195,7,17,
        0,0,195,70,1,0,0,0,196,197,7,18,0,0,197,72,1,0,0,0,198,199,7,19,
        0,0,199,74,1,0,0,0,200,201,7,20,0,0,201,76,1,0,0,0,202,203,7,21,
        0,0,203,78,1,0,0,0,204,205,7,22,0,0,205,80,1,0,0,0,206,207,3,69,
        34,0,207,208,3,47,23,0,208,209,3,41,20,0,209,210,3,61,30,0,210,211,
        3,41,20,0,211,82,1,0,0,0,212,213,3,43,21,0,213,214,3,61,30,0,214,
        215,3,57,28,0,215,216,3,53,26,0,216,84,1,0,0,0,217,218,3,61,30,0,
        218,219,3,41,20,0,219,220,3,63,31,0,220,221,3,57,28,0,221,222,3,
        65,32,0,222,223,3,61,30,0,223,224,3,37,18,0,224,225,3,41,20,0,225,
        86,1,0,0,0,226,227,3,49,24,0,227,228,3,39,19,0,228,88,1,0,0,0,229,
        230,3,35,17,0,230,231,3,73,36,0,231,90,1,0,0,0,232,233,3,51,25,0,
        233,234,3,41,20,0,234,235,3,35,17,0,235,236,3,63,31,0,236,237,3,
        73,36,0,237,92,1,0,0,0,238,239,3,57,28,0,239,240,3,65,32,0,240,241,
        3,73,36,0,241,94,1,0,0,0,242,243,3,57,28,0,243,244,3,43,21,0,244,
        96,1,0,0,0,245,246,3,67,33,0,246,247,3,49,24,0,247,248,3,57,28,0,
        248,249,3,51,25,0,249,250,3,35,17,0,250,251,3,73,36,0,251,252,3,
        49,24,0,252,253,3,57,28,0,253,254,3,55,27,0,254,255,3,63,31,0,255,
        98,1,0,0,0,256,257,3,35,17,0,257,258,3,45,22,0,258,259,3,45,22,0,
        259,260,3,61,30,0,260,261,3,41,20,0,261,262,3,45,22,0,262,263,3,
        35,17,0,263,264,3,73,36,0,264,265,3,41,20,0,265,266,3,39,19,0,266,
        100,1,0,0,0,267,268,3,59,29,0,268,269,3,57,28,0,269,270,3,49,24,
        0,270,271,3,55,27,0,271,272,3,73,36,0,272,273,3,63,31,0,273,102,
        1,0,0,0,274,275,3,35,17,0,275,276,3,55,27,0,276,277,3,39,19,0,277,
        104,1,0,0,0,278,279,3,49,24,0,279,280,3,55,27,0,280,281,3,37,18,
        0,281,282,3,51,25,0,282,283,3,65,32,0,283,284,3,39,19,0,284,285,
        3,41,20,0,285,286,3,63,31,0,286,106,1,0,0,0,287,288,3,41,20,0,288,
        289,3,71,35,0,289,290,3,37,18,0,290,291,3,51,25,0,291,292,3,65,32,
        0,292,293,3,39,19,0,293,294,3,41,20,0,294,295,3,63,31,0,295,108,
        1,0,0,0,296,297,3,57,28,0,297,298,3,61,30,0,298,110,1,0,0,0,299,
        309,5,60,0,0,300,301,5,60,0,0,301,309,5,61,0,0,302,309,5,61,0,0,
        303,304,5,62,0,0,304,309,5,61,0,0,305,309,5,62,0,0,306,307,5,33,
        0,0,307,309,5,61,0,0,308,299,1,0,0,0,308,300,1,0,0,0,308,302,1,0,
        0,0,308,303,1,0,0,0,308,305,1,0,0,0,308,306,1,0,0,0,309,112,1,0,
        0,0,310,312,3,75,37,0,311,310,1,0,0,0,312,313,1,0,0,0,313,311,1,
        0,0,0,313,314,1,0,0,0,314,321,1,0,0,0,315,317,7,23,0,0,316,318,3,
        75,37,0,317,316,1,0,0,0,318,319,1,0,0,0,319,317,1,0,0,0,319,320,
        1,0,0,0,320,322,1,0,0,0,321,315,1,0,0,0,321,322,1,0,0,0,322,114,
        1,0,0,0,323,324,7,24,0,0,324,116,1,0,0,0,325,327,7,25,0,0,326,325,
        1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,118,
        1,0,0,0,330,332,5,13,0,0,331,330,1,0,0,0,331,332,1,0,0,0,332,333,
        1,0,0,0,333,336,5,10,0,0,334,336,5,13,0,0,335,331,1,0,0,0,335,334,
        1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,120,
        1,0,0,0,339,344,3,77,38,0,340,344,3,79,39,0,341,344,3,75,37,0,342,
        344,5,95,0,0,343,339,1,0,0,0,343,340,1,0,0,0,343,341,1,0,0,0,343,
        342,1,0,0,0,344,345,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,
        122,1,0,0,0,11,0,308,313,319,321,328,331,335,337,343,345,0
    ]

class ScheduleQueryConditionLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    WHERE = 18
    COMESFROM = 19
    RESOURCE = 20
    COLUMN = 21
    AT = 22
    LEAST = 23
    OUT = 24
    OF = 25
    VIOLATIONS = 26
    AGGREGATED = 27
    POINTS = 28
    AND = 29
    INCLUDES = 30
    EXCLUDES = 31
    OR = 32
    OPERATOR = 33
    NUMBER = 34
    QUOTE = 35
    WHITESPACE = 36
    NEWLINE = 37
    WORD = 38

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'/'", "'.'", "'_'", "'\\'", "':'", "'%'", "'-'", "','", "'|'", 
            "'&'", "'('", "')'", "'=='", "'\\\"'", "'\\''", "'*'", "'~'" ]

    symbolicNames = [ "<INVALID>",
            "WHERE", "COMESFROM", "RESOURCE", "COLUMN", "AT", "LEAST", "OUT", 
            "OF", "VIOLATIONS", "AGGREGATED", "POINTS", "AND", "INCLUDES", 
            "EXCLUDES", "OR", "OPERATOR", "NUMBER", "QUOTE", "WHITESPACE", 
            "NEWLINE", "WORD" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "A", "C", "D", "E", "F", "G", 
                  "H", "I", "L", "M", "N", "O", "P", "R", "S", "U", "V", 
                  "W", "X", "T", "DIGIT", "LOWERCASE", "UPPERCASE", "WHERE", 
                  "COMESFROM", "RESOURCE", "COLUMN", "AT", "LEAST", "OUT", 
                  "OF", "VIOLATIONS", "AGGREGATED", "POINTS", "AND", "INCLUDES", 
                  "EXCLUDES", "OR", "OPERATOR", "NUMBER", "QUOTE", "WHITESPACE", 
                  "NEWLINE", "WORD" ]

    grammarFileName = "ScheduleQueryCondition.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


