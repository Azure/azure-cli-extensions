# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "maintenance configuration create",
)
class Create(AAZCommand):
    """Create configuration record

    :example: MaintenanceConfigurations_CreateOrUpdateForResource
        az maintenance configuration create --location "westus2" --maintenance-scope "OSImage" --maintenance-window-duration "05:00" --maintenance-window-expiration-date-time "9999-12-31 00:00" --maintenance-window-recur-every "Day" --maintenance-window-start-date-time "2020-04-30 08:00" --maintenance-window-time-zone "Pacific Standard Time" --namespace "Microsoft.Maintenance" --visibility "Custom" --resource-group "examplerg" --resource-name "configuration1"
    """

    _aaz_info = {
        "version": "2023-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.maintenance/maintenanceconfigurations/{}", "2023-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["-n", "--name", "--resource-name"],
            help="Maintenance Configuration Name",
            required=True,
        )

        # define Arg Group "Configuration"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Configuration",
            help="Gets or sets location of the resource",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Configuration",
            help="Gets or sets tags of the resource",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "InstallPatches"

        _args_schema = cls._args_schema
        _args_schema.install_patches_linux_parameters = AAZObjectArg(
            options=["--linux-parameters", "--install-patches-linux-parameters"],
            arg_group="InstallPatches",
            help="Input parameters specific to patching Linux machine. For Windows machines, do not pass this property.",
        )
        _args_schema.reboot_setting = AAZStrArg(
            options=["--reboot-setting"],
            arg_group="InstallPatches",
            help="Possible reboot preference as defined by the user based on which it would be decided to reboot the machine or not after the patch operation is completed.",
            enum={"Always": "Always", "IfRequired": "IfRequired", "Never": "Never"},
        )
        _args_schema.install_patches_windows_parameters = AAZObjectArg(
            options=["--windows-parameters", "--install-patches-windows-parameters"],
            arg_group="InstallPatches",
            help="Input parameters specific to patching a Windows machine. For Linux machines, do not pass this property.",
        )

        install_patches_linux_parameters = cls._args_schema.install_patches_linux_parameters
        install_patches_linux_parameters.classifications_to_include_list = AAZListArg(
            options=["classifications-to-include-list"],
            singular_options=["classifications-to-include"],
            help="Classification category of patches to be patched",
        )
        install_patches_linux_parameters.package_name_masks_to_exclude_list = AAZListArg(
            options=["package-name-masks-to-exclude-list"],
            singular_options=["package-name-masks-to-exclude"],
            help="Package names to be excluded for patching.",
        )
        install_patches_linux_parameters.package_name_masks_to_include_list = AAZListArg(
            options=["package-name-masks-to-include-list"],
            singular_options=["package-name-masks-to-include"],
            help="Package names to be included for patching.",
        )

        classifications_to_include_list = cls._args_schema.install_patches_linux_parameters.classifications_to_include_list
        classifications_to_include_list.Element = AAZStrArg()

        package_name_masks_to_exclude_list = cls._args_schema.install_patches_linux_parameters.package_name_masks_to_exclude_list
        package_name_masks_to_exclude_list.Element = AAZStrArg()

        package_name_masks_to_include_list = cls._args_schema.install_patches_linux_parameters.package_name_masks_to_include_list
        package_name_masks_to_include_list.Element = AAZStrArg()

        install_patches_windows_parameters = cls._args_schema.install_patches_windows_parameters
        install_patches_windows_parameters.classifications_to_include_list = AAZListArg(
            options=["classifications-to-include-list"],
            singular_options=["classifications-to-include"],
            help="Classification category of patches to be patched",
        )
        install_patches_windows_parameters.exclude_kbs_requiring_reboot = AAZBoolArg(
            options=["exclude-kbs-requiring-reboot"],
            help="Exclude patches which need reboot",
        )
        install_patches_windows_parameters.kb_numbers_to_exclude_list = AAZListArg(
            options=["kb-numbers-to-exclude-list"],
            singular_options=["kb-numbers-to-exclude"],
            help="Windows KBID to be excluded for patching.",
        )
        install_patches_windows_parameters.kb_numbers_to_include_list = AAZListArg(
            options=["kb-numbers-to-include-list"],
            singular_options=["kb-numbers-to-exclude"],
            help="Windows KBID to be included for patching.",
        )

        classifications_to_include_list = cls._args_schema.install_patches_windows_parameters.classifications_to_include_list
        classifications_to_include_list.Element = AAZStrArg()

        kb_numbers_to_exclude_list = cls._args_schema.install_patches_windows_parameters.kb_numbers_to_exclude_list
        kb_numbers_to_exclude_list.Element = AAZStrArg()

        kb_numbers_to_include_list = cls._args_schema.install_patches_windows_parameters.kb_numbers_to_include_list
        kb_numbers_to_include_list.Element = AAZStrArg()

        # define Arg Group "MaintenanceWindow"

        _args_schema = cls._args_schema
        _args_schema.maintenance_window_duration = AAZStrArg(
            options=["--duration", "--maintenance-window-duration"],
            arg_group="MaintenanceWindow",
            help="Duration of the maintenance window in HH:mm format. If not provided, default value will be used based on maintenance scope provided. Example: 05:00.",
        )
        _args_schema.maintenance_window_expiration_date_time = AAZStrArg(
            options=["--expiration-date-time", "--maintenance-window-expiration-date-time"],
            arg_group="MaintenanceWindow",
            help="Effective expiration date of the maintenance window in YYYY-MM-DD hh:mm format. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone. Expiration date must be set to a future date. If not provided, it will be set to the maximum datetime 9999-12-31 23:59:59.",
        )
        _args_schema.maintenance_window_recur_every = AAZStrArg(
            options=["--recur-every", "--maintenance-window-recur-every"],
            arg_group="MaintenanceWindow",
            help="Rate at which a Maintenance window is expected to recur. The rate can be expressed as daily, weekly, or monthly schedules. Daily schedule are formatted as recurEvery: [Frequency as integer]['Day(s)']. If no frequency is provided, the default frequency is 1. Daily schedule examples are recurEvery: Day, recurEvery: 3Days.  Weekly schedule are formatted as recurEvery: [Frequency as integer]['Week(s)'] [Optional comma separated list of weekdays Monday-Sunday]. Weekly schedule examples are recurEvery: 3Weeks, recurEvery: Week Saturday,Sunday. Monthly schedules are formatted as [Frequency as integer]['Month(s)'] [Comma separated list of month days] or [Frequency as integer]['Month(s)'] [Week of Month (First, Second, Third, Fourth, Last)] [Weekday Monday-Sunday] [Optional Offset(No. of days)]. Offset value must be between -6 to 6 inclusive. Monthly schedule examples are recurEvery: Month, recurEvery: 2Months, recurEvery: Month day23,day24, recurEvery: Month Last Sunday, recurEvery: Month Fourth Monday, recurEvery: Month Last Sunday Offset-3, recurEvery: Month Third Sunday Offset6.",
        )
        _args_schema.maintenance_window_start_date_time = AAZStrArg(
            options=["--start-date-time", "--maintenance-window-start-date-time"],
            arg_group="MaintenanceWindow",
            help="Effective start date of the maintenance window in YYYY-MM-DD hh:mm format. The start date can be set to either the current date or future date. The window will be created in the time zone provided and adjusted to daylight savings according to that time zone.",
        )
        _args_schema.maintenance_window_time_zone = AAZStrArg(
            options=["--time-zone", "--maintenance-window-time-zone"],
            arg_group="MaintenanceWindow",
            help="Name of the timezone. List of timezones can be obtained by executing [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell. Example: Pacific Standard Time, UTC, W. Europe Standard Time, Korea Standard Time, Cen. Australia Standard Time.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.extension_properties = AAZDictArg(
            options=["--extension-properties"],
            arg_group="Properties",
            help="Gets or sets extensionProperties of the maintenanceConfiguration",
        )
        _args_schema.maintenance_scope = AAZStrArg(
            options=["--maintenance-scope"],
            arg_group="Properties",
            help="Gets or sets maintenanceScope of the configuration",
            enum={"Extension": "Extension", "Host": "Host", "InGuestPatch": "InGuestPatch", "OSImage": "OSImage", "Resource": "Resource", "SQLDB": "SQLDB", "SQLManagedInstance": "SQLManagedInstance"},
        )
        _args_schema.namespace = AAZStrArg(
            options=["--namespace"],
            arg_group="Properties",
            help="Gets or sets namespace of the resource",
        )
        _args_schema.visibility = AAZStrArg(
            options=["--visibility"],
            arg_group="Properties",
            help="Gets or sets the visibility of the configuration. The default value is 'Custom'",
            enum={"Custom": "Custom", "Public": "Public"},
        )

        extension_properties = cls._args_schema.extension_properties
        extension_properties.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MaintenanceConfigurationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MaintenanceConfigurationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.Maintenance/maintenanceConfigurations/{resourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("extensionProperties", AAZDictType, ".extension_properties")
                properties.set_prop("installPatches", AAZObjectType)
                properties.set_prop("maintenanceScope", AAZStrType, ".maintenance_scope")
                properties.set_prop("maintenanceWindow", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("namespace", AAZStrType, ".namespace")
                properties.set_prop("visibility", AAZStrType, ".visibility")

            extension_properties = _builder.get(".properties.extensionProperties")
            if extension_properties is not None:
                extension_properties.set_elements(AAZStrType, ".")

            install_patches = _builder.get(".properties.installPatches")
            if install_patches is not None:
                install_patches.set_prop("linuxParameters", AAZObjectType, ".install_patches_linux_parameters")
                install_patches.set_prop("rebootSetting", AAZStrType, ".reboot_setting")
                install_patches.set_prop("windowsParameters", AAZObjectType, ".install_patches_windows_parameters")

            linux_parameters = _builder.get(".properties.installPatches.linuxParameters")
            if linux_parameters is not None:
                linux_parameters.set_prop("classificationsToInclude", AAZListType, ".classifications_to_include_list")
                linux_parameters.set_prop("packageNameMasksToExclude", AAZListType, ".package_name_masks_to_exclude_list")
                linux_parameters.set_prop("packageNameMasksToInclude", AAZListType, ".package_name_masks_to_include_list")

            classifications_to_include = _builder.get(".properties.installPatches.linuxParameters.classificationsToInclude")
            if classifications_to_include is not None:
                classifications_to_include.set_elements(AAZStrType, ".")

            package_name_masks_to_exclude = _builder.get(".properties.installPatches.linuxParameters.packageNameMasksToExclude")
            if package_name_masks_to_exclude is not None:
                package_name_masks_to_exclude.set_elements(AAZStrType, ".")

            package_name_masks_to_include = _builder.get(".properties.installPatches.linuxParameters.packageNameMasksToInclude")
            if package_name_masks_to_include is not None:
                package_name_masks_to_include.set_elements(AAZStrType, ".")

            windows_parameters = _builder.get(".properties.installPatches.windowsParameters")
            if windows_parameters is not None:
                windows_parameters.set_prop("classificationsToInclude", AAZListType, ".classifications_to_include_list")
                windows_parameters.set_prop("excludeKbsRequiringReboot", AAZBoolType, ".exclude_kbs_requiring_reboot")
                windows_parameters.set_prop("kbNumbersToExclude", AAZListType, ".kb_numbers_to_exclude_list")
                windows_parameters.set_prop("kbNumbersToInclude", AAZListType, ".kb_numbers_to_include_list")

            classifications_to_include = _builder.get(".properties.installPatches.windowsParameters.classificationsToInclude")
            if classifications_to_include is not None:
                classifications_to_include.set_elements(AAZStrType, ".")

            kb_numbers_to_exclude = _builder.get(".properties.installPatches.windowsParameters.kbNumbersToExclude")
            if kb_numbers_to_exclude is not None:
                kb_numbers_to_exclude.set_elements(AAZStrType, ".")

            kb_numbers_to_include = _builder.get(".properties.installPatches.windowsParameters.kbNumbersToInclude")
            if kb_numbers_to_include is not None:
                kb_numbers_to_include.set_elements(AAZStrType, ".")

            maintenance_window = _builder.get(".properties.maintenanceWindow")
            if maintenance_window is not None:
                maintenance_window.set_prop("duration", AAZStrType, ".maintenance_window_duration")
                maintenance_window.set_prop("expirationDateTime", AAZStrType, ".maintenance_window_expiration_date_time")
                maintenance_window.set_prop("recurEvery", AAZStrType, ".maintenance_window_recur_every")
                maintenance_window.set_prop("startDateTime", AAZStrType, ".maintenance_window_start_date_time")
                maintenance_window.set_prop("timeZone", AAZStrType, ".maintenance_window_time_zone")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.extension_properties = AAZDictType(
                serialized_name="extensionProperties",
            )
            properties.install_patches = AAZObjectType(
                serialized_name="installPatches",
            )
            properties.maintenance_scope = AAZStrType(
                serialized_name="maintenanceScope",
            )
            properties.maintenance_window = AAZObjectType(
                serialized_name="maintenanceWindow",
                flags={"client_flatten": True},
            )
            properties.namespace = AAZStrType()
            properties.visibility = AAZStrType()

            extension_properties = cls._schema_on_200_201.properties.extension_properties
            extension_properties.Element = AAZStrType()

            install_patches = cls._schema_on_200_201.properties.install_patches
            install_patches.linux_parameters = AAZObjectType(
                serialized_name="linuxParameters",
            )
            install_patches.reboot_setting = AAZStrType(
                serialized_name="rebootSetting",
            )
            install_patches.windows_parameters = AAZObjectType(
                serialized_name="windowsParameters",
            )

            linux_parameters = cls._schema_on_200_201.properties.install_patches.linux_parameters
            linux_parameters.classifications_to_include = AAZListType(
                serialized_name="classificationsToInclude",
            )
            linux_parameters.package_name_masks_to_exclude = AAZListType(
                serialized_name="packageNameMasksToExclude",
            )
            linux_parameters.package_name_masks_to_include = AAZListType(
                serialized_name="packageNameMasksToInclude",
            )

            classifications_to_include = cls._schema_on_200_201.properties.install_patches.linux_parameters.classifications_to_include
            classifications_to_include.Element = AAZStrType()

            package_name_masks_to_exclude = cls._schema_on_200_201.properties.install_patches.linux_parameters.package_name_masks_to_exclude
            package_name_masks_to_exclude.Element = AAZStrType()

            package_name_masks_to_include = cls._schema_on_200_201.properties.install_patches.linux_parameters.package_name_masks_to_include
            package_name_masks_to_include.Element = AAZStrType()

            windows_parameters = cls._schema_on_200_201.properties.install_patches.windows_parameters
            windows_parameters.classifications_to_include = AAZListType(
                serialized_name="classificationsToInclude",
            )
            windows_parameters.exclude_kbs_requiring_reboot = AAZBoolType(
                serialized_name="excludeKbsRequiringReboot",
            )
            windows_parameters.kb_numbers_to_exclude = AAZListType(
                serialized_name="kbNumbersToExclude",
            )
            windows_parameters.kb_numbers_to_include = AAZListType(
                serialized_name="kbNumbersToInclude",
            )

            classifications_to_include = cls._schema_on_200_201.properties.install_patches.windows_parameters.classifications_to_include
            classifications_to_include.Element = AAZStrType()

            kb_numbers_to_exclude = cls._schema_on_200_201.properties.install_patches.windows_parameters.kb_numbers_to_exclude
            kb_numbers_to_exclude.Element = AAZStrType()

            kb_numbers_to_include = cls._schema_on_200_201.properties.install_patches.windows_parameters.kb_numbers_to_include
            kb_numbers_to_include.Element = AAZStrType()

            maintenance_window = cls._schema_on_200_201.properties.maintenance_window
            maintenance_window.duration = AAZStrType()
            maintenance_window.expiration_date_time = AAZStrType(
                serialized_name="expirationDateTime",
            )
            maintenance_window.recur_every = AAZStrType(
                serialized_name="recurEvery",
            )
            maintenance_window.start_date_time = AAZStrType(
                serialized_name="startDateTime",
            )
            maintenance_window.time_zone = AAZStrType(
                serialized_name="timeZone",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
