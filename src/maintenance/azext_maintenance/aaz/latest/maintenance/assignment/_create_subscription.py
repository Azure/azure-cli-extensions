# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "maintenance assignment create-subscription",
)
class CreateSubscription(AAZCommand):
    """Create configuration for resource.
    """

    _aaz_info = {
        "version": "2023-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.maintenance/configurationassignments/{}", "2023-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.configuration_assignment_name = AAZStrArg(
            options=["-n", "--name", "--configuration-assignment-name"],
            help="Configuration assignment name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^.+$",
            ),
        )

        # define Arg Group "ConfigurationAssignment"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="ConfigurationAssignment",
            help="Location of the resource",
        )

        # define Arg Group "Filter"

        _args_schema = cls._args_schema
        _args_schema.locations = AAZListArg(
            options=["--locations"],
            arg_group="Filter",
            help="List of locations to scope the query to.",
        )
        _args_schema.resource_groups = AAZListArg(
            options=["--resource-groups"],
            arg_group="Filter",
            help="List of allowed resource groups.",
        )
        _args_schema.resource_types = AAZListArg(
            options=["--resource-types"],
            arg_group="Filter",
            help="List of allowed resources.",
        )
        _args_schema.tag_settings = AAZObjectArg(
            options=["--tag-settings"],
            arg_group="Filter",
            help="Tag settings for the VM.",
        )

        locations = cls._args_schema.locations
        locations.Element = AAZStrArg()

        resource_groups = cls._args_schema.resource_groups
        resource_groups.Element = AAZStrArg()

        resource_types = cls._args_schema.resource_types
        resource_types.Element = AAZStrArg()

        tag_settings = cls._args_schema.tag_settings
        tag_settings.filter_operator = AAZStrArg(
            options=["filter-operator"],
            help="Filter VMs by Any or All specified tags.",
            enum={"All": "All", "Any": "Any"},
        )
        tag_settings.tags = AAZDictArg(
            options=["tags"],
            help="Dictionary of tags with its list of values.",
        )

        tags = cls._args_schema.tag_settings.tags
        tags.Element = AAZListArg()

        _element = cls._args_schema.tag_settings.tags.Element
        _element.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.extension_properties = AAZDictArg(
            options=["--extension-properties"],
            arg_group="Properties",
            help="Gets or sets extensionProperties of the configuration assignment",
        )
        _args_schema.maintenance_configuration_id = AAZStrArg(
            options=["--maintenance-configuration-id"],
            arg_group="Properties",
            help="The maintenance configuration Id",
        )
        _args_schema.resource_id = AAZStrArg(
            options=["--resource-id"],
            arg_group="Properties",
            help="The unique resourceId",
        )

        extension_properties = cls._args_schema.extension_properties
        extension_properties.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ConfigurationAssignmentsForSubscriptionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ConfigurationAssignmentsForSubscriptionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Maintenance/configurationAssignments/{configurationAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationAssignmentName", self.ctx.args.configuration_assignment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("extensionProperties", AAZDictType, ".extension_properties")
                properties.set_prop("filter", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                properties.set_prop("maintenanceConfigurationId", AAZStrType, ".maintenance_configuration_id")
                properties.set_prop("resourceId", AAZStrType, ".resource_id")

            extension_properties = _builder.get(".properties.extensionProperties")
            if extension_properties is not None:
                extension_properties.set_elements(AAZStrType, ".")

            filter = _builder.get(".properties.filter")
            if filter is not None:
                filter.set_prop("locations", AAZListType, ".locations")
                filter.set_prop("resourceGroups", AAZListType, ".resource_groups")
                filter.set_prop("resourceTypes", AAZListType, ".resource_types")
                filter.set_prop("tagSettings", AAZObjectType, ".tag_settings")

            locations = _builder.get(".properties.filter.locations")
            if locations is not None:
                locations.set_elements(AAZStrType, ".")

            resource_groups = _builder.get(".properties.filter.resourceGroups")
            if resource_groups is not None:
                resource_groups.set_elements(AAZStrType, ".")

            resource_types = _builder.get(".properties.filter.resourceTypes")
            if resource_types is not None:
                resource_types.set_elements(AAZStrType, ".")

            tag_settings = _builder.get(".properties.filter.tagSettings")
            if tag_settings is not None:
                tag_settings.set_prop("filterOperator", AAZStrType, ".filter_operator")
                tag_settings.set_prop("tags", AAZDictType, ".tags")

            tags = _builder.get(".properties.filter.tagSettings.tags")
            if tags is not None:
                tags.set_elements(AAZListType, ".")

            _elements = _builder.get(".properties.filter.tagSettings.tags{}")
            if _elements is not None:
                _elements.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.extension_properties = AAZDictType(
                serialized_name="extensionProperties",
            )
            properties.filter = AAZObjectType(
                flags={"client_flatten": True},
            )
            properties.maintenance_configuration_id = AAZStrType(
                serialized_name="maintenanceConfigurationId",
            )
            properties.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            extension_properties = cls._schema_on_200.properties.extension_properties
            extension_properties.Element = AAZStrType()

            filter = cls._schema_on_200.properties.filter
            filter.locations = AAZListType()
            filter.resource_groups = AAZListType(
                serialized_name="resourceGroups",
            )
            filter.resource_types = AAZListType(
                serialized_name="resourceTypes",
            )
            filter.tag_settings = AAZObjectType(
                serialized_name="tagSettings",
            )

            locations = cls._schema_on_200.properties.filter.locations
            locations.Element = AAZStrType()

            resource_groups = cls._schema_on_200.properties.filter.resource_groups
            resource_groups.Element = AAZStrType()

            resource_types = cls._schema_on_200.properties.filter.resource_types
            resource_types.Element = AAZStrType()

            tag_settings = cls._schema_on_200.properties.filter.tag_settings
            tag_settings.filter_operator = AAZStrType(
                serialized_name="filterOperator",
            )
            tag_settings.tags = AAZDictType()

            tags = cls._schema_on_200.properties.filter.tag_settings.tags
            tags.Element = AAZListType()

            _element = cls._schema_on_200.properties.filter.tag_settings.tags.Element
            _element.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _CreateSubscriptionHelper:
    """Helper class for CreateSubscription"""


__all__ = ["CreateSubscription"]
