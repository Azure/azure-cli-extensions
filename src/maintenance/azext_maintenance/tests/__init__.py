# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import inspect
import logging
import os
import sys
import traceback
import datetime as dt

from azure.core.exceptions import AzureError
from azure.cli.testsdk.exceptions import CliTestError, CliExecutionError, JMESPathCheckAssertionError


logger = logging.getLogger('azure.cli.testsdk')
logger.addHandler(logging.StreamHandler())
__path__ = __import__('pkgutil').extend_path(__path__, __name__)
exceptions = []
test_map = dict()
SUCCESSED = "successed"
FAILED = "failed"


def calc_coverage(filename):
    filename = filename.split(".")[0]
    coverage_name = filename + "_coverage.md"
    with open(coverage_name, "w") as f:
        f.write("|Scenario|Result|ErrorMessage|ErrorStack|ErrorNormalized|StartDt|EndDt|\n")
        total = len(test_map)
        covered = 0
        for k, v in test_map.items():
            if not k.startswith("step_"):
                total -= 1
                continue
            if v["result"] == SUCCESSED:
                covered += 1
            f.write("|{step_name}|{result}|{error_message}|{error_stack}|{error_normalized}|{start_dt}|"
                    "{end_dt}|\n".format(step_name=k, **v))
        f.write("Coverage: {}/{}\n".format(covered, total))
    print("Create coverage\n", file=sys.stderr)


def raise_if():
    if exceptions:
        if len(exceptions) <= 1:
            raise exceptions[0][1][1]
        message = "{}\nFollowed with exceptions in other steps:\n".format(str(exceptions[0][1][1]))
        message += "\n".join(["{}: {}".format(h[0], h[1][1]) for h in exceptions[1:]])
        raise exceptions[0][1][0](message).with_traceback(exceptions[0][1][2])