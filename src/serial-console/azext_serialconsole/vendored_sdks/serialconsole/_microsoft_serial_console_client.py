# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import TYPE_CHECKING

from azure.mgmt.core import ARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Optional

    from azure.core.credentials import TokenCredential

from ._configuration import MicrosoftSerialConsoleClientConfiguration
from .operations import MicrosoftSerialConsoleClientOperationsMixin
from .operations import SerialPortsOperations
from . import models


class MicrosoftSerialConsoleClient(MicrosoftSerialConsoleClientOperationsMixin):
    """The Azure Serial Console allows you to access the serial console of a Virtual Machine or VM scale set instance.

    :ivar serial_ports: SerialPortsOperations operations
    :vartype serial_ports: microsoft_serial_console_client.operations.SerialPortsOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials.TokenCredential
    :param subscription_id: Subscription ID which uniquely identifies the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call requiring it.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self,
            credential,  # type: "TokenCredential"
            subscription_id,  # type: str
            base_url=None,  # type: Optional[str]
            **kwargs  # type: Any
    ):
        # type: (...) -> None
        storage_account_location = self.modify_baseurl_for_storage_account_firewall(**kwargs)
        if storage_account_location is not None:
            base_url = 'https://{}.management.azure.com'.format(storage_account_location)

        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = MicrosoftSerialConsoleClientConfiguration(credential, subscription_id, **kwargs)
        self._client = ARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.serial_ports = SerialPortsOperations(
            self._client, self._config, self._serialize, self._deserialize)

    def close(self):
        # type: () -> None
        self._client.close()

    def __enter__(self):
        # type: () -> MicrosoftSerialConsoleClient
        self._client.__enter__()
        return self

    def __exit__(self, *exc_details):
        # type: (Any) -> None
        self._client.__exit__(*exc_details)

    @staticmethod
    def modify_baseurl_for_storage_account_firewall(**kwargs):
        from tld import get_tld
        from azext_serialconsole._client_factory import _compute_client_factory
        from azext_serialconsole._client_factory import storage_client_factory
        from . import _arm_endpoints as AE
        if len(kwargs) > 0:
            cli_ctx = kwargs['client_ctx']
            resource_group_name = kwargs['resource_group_name']
            vm_vmss_name = kwargs['vm_name']
        else:
            return None

        client = _compute_client_factory(cli_ctx)
        scf = storage_client_factory(cli_ctx)

        result = client.virtual_machines.get(
            resource_group_name, vm_vmss_name, expand='instanceView')

        if (result.diagnostics_profile is not None and
                result.diagnostics_profile.boot_diagnostics is not None):
            storage_account_url = result.diagnostics_profile.boot_diagnostics.storage_uri
            sa_info = get_tld(storage_account_url, as_object=True)
            sa_info_list = sa_info.subdomain.split('.')
            if len(sa_info_list) > 0:
                storage_account = sa_info_list[0]
                sa_result = scf.storage_accounts.get_properties(resource_group_name, storage_account)
                if (sa_result is not None and
                        sa_result.network_rule_set is not None and
                        len(sa_result.network_rule_set.ip_rules) > 0):
                    return AE.ArmEndpoints.region_prefix_pairings[sa_result.location]

        return None
