# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network front-door waf-policy wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/frontdoorwebapplicationfirewallpolicies/{}", "2024-02-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["-n", "--name", "--policy-name"],
            help="The name of the Web Application Firewall Policy.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PoliciesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class PoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-02-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.sku = AAZObjectType()
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.custom_rules = AAZObjectType(
                serialized_name="customRules",
            )
            properties.frontend_endpoint_links = AAZListType(
                serialized_name="frontendEndpointLinks",
                flags={"read_only": True},
            )
            properties.managed_rules = AAZObjectType(
                serialized_name="managedRules",
            )
            properties.policy_settings = AAZObjectType(
                serialized_name="policySettings",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.resource_state = AAZStrType(
                serialized_name="resourceState",
                flags={"read_only": True},
            )
            properties.routing_rule_links = AAZListType(
                serialized_name="routingRuleLinks",
                flags={"read_only": True},
            )
            properties.security_policy_links = AAZListType(
                serialized_name="securityPolicyLinks",
                flags={"read_only": True},
            )

            custom_rules = cls._schema_on_200.properties.custom_rules
            custom_rules.rules = AAZListType()

            rules = cls._schema_on_200.properties.custom_rules.rules
            rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.custom_rules.rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.enabled_state = AAZStrType(
                serialized_name="enabledState",
            )
            _element.group_by = AAZListType(
                serialized_name="groupBy",
            )
            _element.match_conditions = AAZListType(
                serialized_name="matchConditions",
                flags={"required": True},
            )
            _element.name = AAZStrType()
            _element.priority = AAZIntType(
                flags={"required": True},
            )
            _element.rate_limit_duration_in_minutes = AAZIntType(
                serialized_name="rateLimitDurationInMinutes",
            )
            _element.rate_limit_threshold = AAZIntType(
                serialized_name="rateLimitThreshold",
            )
            _element.rule_type = AAZStrType(
                serialized_name="ruleType",
                flags={"required": True},
            )

            group_by = cls._schema_on_200.properties.custom_rules.rules.Element.group_by
            group_by.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.custom_rules.rules.Element.group_by.Element
            _element.variable_name = AAZStrType(
                serialized_name="variableName",
                flags={"required": True},
            )

            match_conditions = cls._schema_on_200.properties.custom_rules.rules.Element.match_conditions
            match_conditions.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.custom_rules.rules.Element.match_conditions.Element
            _element.match_value = AAZListType(
                serialized_name="matchValue",
                flags={"required": True},
            )
            _element.match_variable = AAZStrType(
                serialized_name="matchVariable",
                flags={"required": True},
            )
            _element.negate_condition = AAZBoolType(
                serialized_name="negateCondition",
            )
            _element.operator = AAZStrType(
                flags={"required": True},
            )
            _element.selector = AAZStrType()
            _element.transforms = AAZListType()

            match_value = cls._schema_on_200.properties.custom_rules.rules.Element.match_conditions.Element.match_value
            match_value.Element = AAZStrType()

            transforms = cls._schema_on_200.properties.custom_rules.rules.Element.match_conditions.Element.transforms
            transforms.Element = AAZStrType()

            frontend_endpoint_links = cls._schema_on_200.properties.frontend_endpoint_links
            frontend_endpoint_links.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.properties.frontend_endpoint_links.Element
            _element.id = AAZStrType()

            managed_rules = cls._schema_on_200.properties.managed_rules
            managed_rules.managed_rule_sets = AAZListType(
                serialized_name="managedRuleSets",
            )

            managed_rule_sets = cls._schema_on_200.properties.managed_rules.managed_rule_sets
            managed_rule_sets.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element
            _element.exclusions = AAZListType()
            _element.rule_group_overrides = AAZListType(
                serialized_name="ruleGroupOverrides",
            )
            _element.rule_set_action = AAZStrType(
                serialized_name="ruleSetAction",
            )
            _element.rule_set_type = AAZStrType(
                serialized_name="ruleSetType",
                flags={"required": True},
            )
            _element.rule_set_version = AAZStrType(
                serialized_name="ruleSetVersion",
                flags={"required": True},
            )

            exclusions = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.exclusions
            exclusions.Element = AAZObjectType()
            _WaitHelper._build_schema_managed_rule_exclusion_read(exclusions.Element)

            rule_group_overrides = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides
            rule_group_overrides.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element
            _element.exclusions = AAZListType()
            _element.rule_group_name = AAZStrType(
                serialized_name="ruleGroupName",
                flags={"required": True},
            )
            _element.rules = AAZListType()

            exclusions = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.exclusions
            exclusions.Element = AAZObjectType()
            _WaitHelper._build_schema_managed_rule_exclusion_read(exclusions.Element)

            rules = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules
            rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element
            _element.action = AAZStrType()
            _element.enabled_state = AAZStrType(
                serialized_name="enabledState",
            )
            _element.exclusions = AAZListType()
            _element.rule_id = AAZStrType(
                serialized_name="ruleId",
                flags={"required": True},
            )

            exclusions = cls._schema_on_200.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element.exclusions
            exclusions.Element = AAZObjectType()
            _WaitHelper._build_schema_managed_rule_exclusion_read(exclusions.Element)

            policy_settings = cls._schema_on_200.properties.policy_settings
            policy_settings.custom_block_response_body = AAZStrType(
                serialized_name="customBlockResponseBody",
            )
            policy_settings.custom_block_response_status_code = AAZIntType(
                serialized_name="customBlockResponseStatusCode",
            )
            policy_settings.enabled_state = AAZStrType(
                serialized_name="enabledState",
            )
            policy_settings.javascript_challenge_expiration_in_minutes = AAZIntType(
                serialized_name="javascriptChallengeExpirationInMinutes",
            )
            policy_settings.log_scrubbing = AAZObjectType(
                serialized_name="logScrubbing",
            )
            policy_settings.mode = AAZStrType()
            policy_settings.redirect_url = AAZStrType(
                serialized_name="redirectUrl",
            )
            policy_settings.request_body_check = AAZStrType(
                serialized_name="requestBodyCheck",
            )

            log_scrubbing = cls._schema_on_200.properties.policy_settings.log_scrubbing
            log_scrubbing.scrubbing_rules = AAZListType(
                serialized_name="scrubbingRules",
            )
            log_scrubbing.state = AAZStrType()

            scrubbing_rules = cls._schema_on_200.properties.policy_settings.log_scrubbing.scrubbing_rules
            scrubbing_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.policy_settings.log_scrubbing.scrubbing_rules.Element
            _element.match_variable = AAZStrType(
                serialized_name="matchVariable",
                flags={"required": True},
            )
            _element.selector = AAZStrType()
            _element.selector_match_operator = AAZStrType(
                serialized_name="selectorMatchOperator",
                flags={"required": True},
            )
            _element.state = AAZStrType()

            routing_rule_links = cls._schema_on_200.properties.routing_rule_links
            routing_rule_links.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.properties.routing_rule_links.Element
            _element.id = AAZStrType()

            security_policy_links = cls._schema_on_200.properties.security_policy_links
            security_policy_links.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.properties.security_policy_links.Element
            _element.id = AAZStrType()

            sku = cls._schema_on_200.sku
            sku.name = AAZStrType()

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_managed_rule_exclusion_read = None

    @classmethod
    def _build_schema_managed_rule_exclusion_read(cls, _schema):
        if cls._schema_managed_rule_exclusion_read is not None:
            _schema.match_variable = cls._schema_managed_rule_exclusion_read.match_variable
            _schema.selector = cls._schema_managed_rule_exclusion_read.selector
            _schema.selector_match_operator = cls._schema_managed_rule_exclusion_read.selector_match_operator
            return

        cls._schema_managed_rule_exclusion_read = _schema_managed_rule_exclusion_read = AAZObjectType()

        managed_rule_exclusion_read = _schema_managed_rule_exclusion_read
        managed_rule_exclusion_read.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        managed_rule_exclusion_read.selector = AAZStrType(
            flags={"required": True},
        )
        managed_rule_exclusion_read.selector_match_operator = AAZStrType(
            serialized_name="selectorMatchOperator",
            flags={"required": True},
        )

        _schema.match_variable = cls._schema_managed_rule_exclusion_read.match_variable
        _schema.selector = cls._schema_managed_rule_exclusion_read.selector
        _schema.selector_match_operator = cls._schema_managed_rule_exclusion_read.selector_match_operator


__all__ = ["Wait"]
