# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network front-door waf-policy update",
)
class Update(AAZCommand):
    """Update policy with specified rule set name within a resource group.

    :example: update log scrubbing
        az network front-door waf-policy update -g rg -n n1 --log-scrubbing "{scrubbing-rules:[{match-variable:QueryStringArgNames,selector-match-operator:EqualsAny}],state:Enabled}"
        az network front-door waf-policy update -g rg -n n1 --log-scrubbing scrubbing-rules[1]="{match-variable:RequestUri,selector-match-operator:EqualsAny}"
        az network front-door waf-policy update -g rg -n n1 --log-scrubbing "{scrubbing-rules:[{match-variable:QueryStringArgNames,selector-match-operator:EqualsAny}],state:Enabled}" scrubbing-rules[1]="{match-variable:RequestUri,selector-match-operator:EqualsAny}"
    """

    _aaz_info = {
        "version": "2024-02-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/frontdoorwebapplicationfirewallpolicies/{}", "2024-02-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["-n", "--name", "--policy-name"],
            help="The name of the Web Application Firewall Policy.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.etag = AAZStrArg(
            options=["--etag"],
            arg_group="Parameters",
            help="Gets a unique read-only string that changes whenever the resource is updated.",
            nullable=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "PolicySettings"

        _args_schema = cls._args_schema
        _args_schema.custom_block_response_body = AAZStrArg(
            options=["--custom-block-response-body"],
            arg_group="PolicySettings",
            help="If the action type is block, customer can override the response body. The body must be specified in base64 encoding.",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$",
            ),
        )
        _args_schema.custom_block_response_status_code = AAZIntArg(
            options=["--custom-block-response-status-code"],
            arg_group="PolicySettings",
            help="If the action type is block, customer can override the response status code.",
            nullable=True,
        )
        _args_schema.enabled_state = AAZStrArg(
            options=["--enabled-state"],
            arg_group="PolicySettings",
            help="Describes if the policy is in enabled or disabled state. Defaults to Enabled if not specified.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.javascript_challenge_expiration_in_minutes = AAZIntArg(
            options=["--js-expiration", "--javascript-challenge-expiration-in-minutes"],
            arg_group="PolicySettings",
            help="Defines the JavaScript challenge cookie validity lifetime in minutes. Value must be an integer between 5 and 1440 with the default value being 30.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=1440,
                minimum=5,
            ),
        )
        _args_schema.log_scrubbing = AAZObjectArg(
            options=["--log-scrubbing"],
            arg_group="PolicySettings",
            help="Defines rules that scrub sensitive fields in the Web Application Firewall logs.",
            nullable=True,
        )
        _args_schema.mode = AAZStrArg(
            options=["--mode"],
            arg_group="PolicySettings",
            help="Describes if it is in detection mode or prevention mode at policy level.",
            nullable=True,
            enum={"Detection": "Detection", "Prevention": "Prevention"},
        )
        _args_schema.redirect_url = AAZStrArg(
            options=["--redirect-url"],
            arg_group="PolicySettings",
            help="If action type is redirect, this field represents redirect URL for the client.",
            nullable=True,
        )
        _args_schema.request_body_check = AAZStrArg(
            options=["--request-body-check"],
            arg_group="PolicySettings",
            help="Describes if policy managed rules will inspect the request body content.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        log_scrubbing = cls._args_schema.log_scrubbing
        log_scrubbing.scrubbing_rules = AAZListArg(
            options=["scrubbing-rules"],
            help="List of log scrubbing rules applied to the Web Application Firewall logs.",
            nullable=True,
        )
        log_scrubbing.state = AAZStrArg(
            options=["state"],
            help="State of the log scrubbing config. Default value is Enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        scrubbing_rules = cls._args_schema.log_scrubbing.scrubbing_rules
        scrubbing_rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.log_scrubbing.scrubbing_rules.Element
        _element.match_variable = AAZStrArg(
            options=["match-variable"],
            help="The variable to be scrubbed from the logs.",
            enum={"QueryStringArgNames": "QueryStringArgNames", "RequestBodyJsonArgNames": "RequestBodyJsonArgNames", "RequestBodyPostArgNames": "RequestBodyPostArgNames", "RequestCookieNames": "RequestCookieNames", "RequestHeaderNames": "RequestHeaderNames", "RequestIPAddress": "RequestIPAddress", "RequestUri": "RequestUri"},
        )
        _element.selector = AAZStrArg(
            options=["selector"],
            help="When matchVariable is a collection, operator used to specify which elements in the collection this rule applies to.",
            nullable=True,
        )
        _element.selector_match_operator = AAZStrArg(
            options=["selector-match-operator"],
            help="When matchVariable is a collection, operate on the selector to specify which elements in the collection this rule applies to.",
            enum={"Equals": "Equals", "EqualsAny": "EqualsAny"},
        )
        _element.state = AAZStrArg(
            options=["state"],
            help="Defines the state of a log scrubbing rule. Default value is enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.custom_rules = AAZObjectArg(
            options=["--custom-rules"],
            arg_group="Properties",
            help="Describes custom rules inside the policy.",
            nullable=True,
        )
        _args_schema.managed_rules = AAZObjectArg(
            options=["--managed-rules"],
            arg_group="Properties",
            help="Describes managed rules inside the policy.",
            nullable=True,
        )

        custom_rules = cls._args_schema.custom_rules
        custom_rules.rules = AAZListArg(
            options=["rules"],
            help="List of rules",
            nullable=True,
        )

        rules = cls._args_schema.custom_rules.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.custom_rules.rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Describes what action to be applied when rule matches.",
            enum={"Allow": "Allow", "AnomalyScoring": "AnomalyScoring", "Block": "Block", "JSChallenge": "JSChallenge", "Log": "Log", "Redirect": "Redirect"},
        )
        _element.enabled_state = AAZStrArg(
            options=["enabled-state"],
            help="Describes if the custom rule is in enabled or disabled state. Defaults to Enabled if not specified.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _element.group_by = AAZListArg(
            options=["group-by"],
            help="Describes the list of variables to group the rate limit requests",
            nullable=True,
        )
        _element.match_conditions = AAZListArg(
            options=["match-conditions"],
            help="List of match conditions.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Describes the name of the rule.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=128,
            ),
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Describes priority of the rule. Rules with a lower value will be evaluated before rules with a higher value.",
        )
        _element.rate_limit_duration_in_minutes = AAZIntArg(
            options=["rate-limit-duration-in-minutes"],
            help="Time window for resetting the rate limit count. Default is 1 minute.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=5,
                minimum=0,
            ),
        )
        _element.rate_limit_threshold = AAZIntArg(
            options=["rate-limit-threshold"],
            help="Number of allowed requests per client within the time window.",
            nullable=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        _element.rule_type = AAZStrArg(
            options=["rule-type"],
            help="Describes type of rule.",
            enum={"MatchRule": "MatchRule", "RateLimitRule": "RateLimitRule"},
        )

        group_by = cls._args_schema.custom_rules.rules.Element.group_by
        group_by.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.custom_rules.rules.Element.group_by.Element
        _element.variable_name = AAZStrArg(
            options=["variable-name"],
            help="Describes the supported variable for group by",
            enum={"GeoLocation": "GeoLocation", "None": "None", "SocketAddr": "SocketAddr"},
        )

        match_conditions = cls._args_schema.custom_rules.rules.Element.match_conditions
        match_conditions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.custom_rules.rules.Element.match_conditions.Element
        _element.match_value = AAZListArg(
            options=["match-value"],
            help="List of possible match values.",
        )
        _element.match_variable = AAZStrArg(
            options=["match-variable"],
            help="Request variable to compare with.",
            enum={"Cookies": "Cookies", "PostArgs": "PostArgs", "QueryString": "QueryString", "RemoteAddr": "RemoteAddr", "RequestBody": "RequestBody", "RequestHeader": "RequestHeader", "RequestMethod": "RequestMethod", "RequestUri": "RequestUri", "SocketAddr": "SocketAddr"},
        )
        _element.negate_condition = AAZBoolArg(
            options=["negate-condition"],
            help="Describes if the result of this condition should be negated.",
            nullable=True,
        )
        _element.operator = AAZStrArg(
            options=["operator"],
            help="Comparison type to use for matching with the variable value.",
            enum={"Any": "Any", "BeginsWith": "BeginsWith", "Contains": "Contains", "EndsWith": "EndsWith", "Equal": "Equal", "GeoMatch": "GeoMatch", "GreaterThan": "GreaterThan", "GreaterThanOrEqual": "GreaterThanOrEqual", "IPMatch": "IPMatch", "LessThan": "LessThan", "LessThanOrEqual": "LessThanOrEqual", "RegEx": "RegEx"},
        )
        _element.selector = AAZStrArg(
            options=["selector"],
            help="Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
            nullable=True,
        )
        _element.transforms = AAZListArg(
            options=["transforms"],
            help="List of transforms.",
            nullable=True,
        )

        match_value = cls._args_schema.custom_rules.rules.Element.match_conditions.Element.match_value
        match_value.Element = AAZStrArg(
            nullable=True,
        )

        transforms = cls._args_schema.custom_rules.rules.Element.match_conditions.Element.transforms
        transforms.Element = AAZStrArg(
            nullable=True,
            enum={"Lowercase": "Lowercase", "RemoveNulls": "RemoveNulls", "Trim": "Trim", "Uppercase": "Uppercase", "UrlDecode": "UrlDecode", "UrlEncode": "UrlEncode"},
        )

        managed_rules = cls._args_schema.managed_rules
        managed_rules.managed_rule_sets = AAZListArg(
            options=["managed-rule-sets"],
            help="List of rule sets.",
            nullable=True,
        )

        managed_rule_sets = cls._args_schema.managed_rules.managed_rule_sets
        managed_rule_sets.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.managed_rules.managed_rule_sets.Element
        _element.exclusions = AAZListArg(
            options=["exclusions"],
            help="Describes the exclusions that are applied to all rules in the set.",
            nullable=True,
        )
        _element.rule_group_overrides = AAZListArg(
            options=["rule-group-overrides"],
            help="Defines the rule group overrides to apply to the rule set.",
            nullable=True,
        )
        _element.rule_set_action = AAZStrArg(
            options=["rule-set-action"],
            help="Defines the rule set action.",
            nullable=True,
            enum={"Block": "Block", "Log": "Log", "Redirect": "Redirect"},
        )
        _element.rule_set_type = AAZStrArg(
            options=["rule-set-type"],
            help="Defines the rule set type to use.",
        )
        _element.rule_set_version = AAZStrArg(
            options=["rule-set-version"],
            help="Defines the version of the rule set to use.",
        )

        exclusions = cls._args_schema.managed_rules.managed_rule_sets.Element.exclusions
        exclusions.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_managed_rule_exclusion_update(exclusions.Element)

        rule_group_overrides = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides
        rule_group_overrides.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element
        _element.exclusions = AAZListArg(
            options=["exclusions"],
            help="Describes the exclusions that are applied to all rules in the group.",
            nullable=True,
        )
        _element.rule_group_name = AAZStrArg(
            options=["rule-group-name"],
            help="Describes the managed rule group to override.",
        )
        _element.rules = AAZListArg(
            options=["rules"],
            help="List of rules that will be disabled. If none specified, all rules in the group will be disabled.",
            nullable=True,
        )

        exclusions = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.exclusions
        exclusions.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_managed_rule_exclusion_update(exclusions.Element)

        rules = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Describes the override action to be applied when rule matches.",
            nullable=True,
            enum={"Allow": "Allow", "AnomalyScoring": "AnomalyScoring", "Block": "Block", "JSChallenge": "JSChallenge", "Log": "Log", "Redirect": "Redirect"},
        )
        _element.enabled_state = AAZStrArg(
            options=["enabled-state"],
            help="Describes if the managed rule is in enabled or disabled state. Defaults to Disabled if not specified.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _element.exclusions = AAZListArg(
            options=["exclusions"],
            help="Describes the exclusions that are applied to this specific rule.",
            nullable=True,
        )
        _element.rule_id = AAZStrArg(
            options=["rule-id"],
            help="Identifier for the managed rule.",
        )

        exclusions = cls._args_schema.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element.exclusions
        exclusions.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_managed_rule_exclusion_update(exclusions.Element)

        # define Arg Group "Sku"

        _args_schema = cls._args_schema
        _args_schema.sku = AAZStrArg(
            options=["--sku"],
            arg_group="Sku",
            help="Name of the pricing tier.",
            nullable=True,
            enum={"Classic_AzureFrontDoor": "Classic_AzureFrontDoor", "Premium_AzureFrontDoor": "Premium_AzureFrontDoor", "Standard_AzureFrontDoor": "Standard_AzureFrontDoor"},
        )
        return cls._args_schema

    _args_managed_rule_exclusion_update = None

    @classmethod
    def _build_args_managed_rule_exclusion_update(cls, _schema):
        if cls._args_managed_rule_exclusion_update is not None:
            _schema.match_variable = cls._args_managed_rule_exclusion_update.match_variable
            _schema.selector = cls._args_managed_rule_exclusion_update.selector
            _schema.selector_match_operator = cls._args_managed_rule_exclusion_update.selector_match_operator
            return

        cls._args_managed_rule_exclusion_update = AAZObjectArg(
            nullable=True,
        )

        managed_rule_exclusion_update = cls._args_managed_rule_exclusion_update
        managed_rule_exclusion_update.match_variable = AAZStrArg(
            options=["match-variable"],
            help="The variable type to be excluded.",
            enum={"QueryStringArgNames": "QueryStringArgNames", "RequestBodyJsonArgNames": "RequestBodyJsonArgNames", "RequestBodyPostArgNames": "RequestBodyPostArgNames", "RequestCookieNames": "RequestCookieNames", "RequestHeaderNames": "RequestHeaderNames"},
        )
        managed_rule_exclusion_update.selector = AAZStrArg(
            options=["selector"],
            help="Selector value for which elements in the collection this exclusion applies to.",
        )
        managed_rule_exclusion_update.selector_match_operator = AAZStrArg(
            options=["selector-match-operator"],
            help="Comparison operator to apply to the selector when specifying which elements in the collection this exclusion applies to.",
            enum={"Contains": "Contains", "EndsWith": "EndsWith", "Equals": "Equals", "EqualsAny": "EqualsAny", "StartsWith": "StartsWith"},
        )

        _schema.match_variable = cls._args_managed_rule_exclusion_update.match_variable
        _schema.selector = cls._args_managed_rule_exclusion_update.selector
        _schema.selector_match_operator = cls._args_managed_rule_exclusion_update.selector_match_operator

    def _execute_operations(self):
        self.pre_operations()
        self.PoliciesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.PoliciesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-02-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200)

            return cls._schema_on_200

    class PoliciesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/FrontDoorWebApplicationFirewallPolicies/{policyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "policyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-02-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_web_application_firewall_policy_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("etag", AAZStrType, ".etag")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("sku", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("customRules", AAZObjectType, ".custom_rules")
                properties.set_prop("managedRules", AAZObjectType, ".managed_rules")
                properties.set_prop("policySettings", AAZObjectType)

            custom_rules = _builder.get(".properties.customRules")
            if custom_rules is not None:
                custom_rules.set_prop("rules", AAZListType, ".rules")

            rules = _builder.get(".properties.customRules.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.customRules.rules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("enabledState", AAZStrType, ".enabled_state")
                _elements.set_prop("groupBy", AAZListType, ".group_by")
                _elements.set_prop("matchConditions", AAZListType, ".match_conditions", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("priority", AAZIntType, ".priority", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("rateLimitDurationInMinutes", AAZIntType, ".rate_limit_duration_in_minutes")
                _elements.set_prop("rateLimitThreshold", AAZIntType, ".rate_limit_threshold")
                _elements.set_prop("ruleType", AAZStrType, ".rule_type", typ_kwargs={"flags": {"required": True}})

            group_by = _builder.get(".properties.customRules.rules[].groupBy")
            if group_by is not None:
                group_by.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.customRules.rules[].groupBy[]")
            if _elements is not None:
                _elements.set_prop("variableName", AAZStrType, ".variable_name", typ_kwargs={"flags": {"required": True}})

            match_conditions = _builder.get(".properties.customRules.rules[].matchConditions")
            if match_conditions is not None:
                match_conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.customRules.rules[].matchConditions[]")
            if _elements is not None:
                _elements.set_prop("matchValue", AAZListType, ".match_value", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("matchVariable", AAZStrType, ".match_variable", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("negateCondition", AAZBoolType, ".negate_condition")
                _elements.set_prop("operator", AAZStrType, ".operator", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("selector", AAZStrType, ".selector")
                _elements.set_prop("transforms", AAZListType, ".transforms")

            match_value = _builder.get(".properties.customRules.rules[].matchConditions[].matchValue")
            if match_value is not None:
                match_value.set_elements(AAZStrType, ".")

            transforms = _builder.get(".properties.customRules.rules[].matchConditions[].transforms")
            if transforms is not None:
                transforms.set_elements(AAZStrType, ".")

            managed_rules = _builder.get(".properties.managedRules")
            if managed_rules is not None:
                managed_rules.set_prop("managedRuleSets", AAZListType, ".managed_rule_sets")

            managed_rule_sets = _builder.get(".properties.managedRules.managedRuleSets")
            if managed_rule_sets is not None:
                managed_rule_sets.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.managedRules.managedRuleSets[]")
            if _elements is not None:
                _elements.set_prop("exclusions", AAZListType, ".exclusions")
                _elements.set_prop("ruleGroupOverrides", AAZListType, ".rule_group_overrides")
                _elements.set_prop("ruleSetAction", AAZStrType, ".rule_set_action")
                _elements.set_prop("ruleSetType", AAZStrType, ".rule_set_type", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("ruleSetVersion", AAZStrType, ".rule_set_version", typ_kwargs={"flags": {"required": True}})

            exclusions = _builder.get(".properties.managedRules.managedRuleSets[].exclusions")
            if exclusions is not None:
                _UpdateHelper._build_schema_managed_rule_exclusion_update(exclusions.set_elements(AAZObjectType, "."))

            rule_group_overrides = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides")
            if rule_group_overrides is not None:
                rule_group_overrides.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides[]")
            if _elements is not None:
                _elements.set_prop("exclusions", AAZListType, ".exclusions")
                _elements.set_prop("ruleGroupName", AAZStrType, ".rule_group_name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("rules", AAZListType, ".rules")

            exclusions = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides[].exclusions")
            if exclusions is not None:
                _UpdateHelper._build_schema_managed_rule_exclusion_update(exclusions.set_elements(AAZObjectType, "."))

            rules = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides[].rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides[].rules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("enabledState", AAZStrType, ".enabled_state")
                _elements.set_prop("exclusions", AAZListType, ".exclusions")
                _elements.set_prop("ruleId", AAZStrType, ".rule_id", typ_kwargs={"flags": {"required": True}})

            exclusions = _builder.get(".properties.managedRules.managedRuleSets[].ruleGroupOverrides[].rules[].exclusions")
            if exclusions is not None:
                _UpdateHelper._build_schema_managed_rule_exclusion_update(exclusions.set_elements(AAZObjectType, "."))

            policy_settings = _builder.get(".properties.policySettings")
            if policy_settings is not None:
                policy_settings.set_prop("customBlockResponseBody", AAZStrType, ".custom_block_response_body")
                policy_settings.set_prop("customBlockResponseStatusCode", AAZIntType, ".custom_block_response_status_code")
                policy_settings.set_prop("enabledState", AAZStrType, ".enabled_state")
                policy_settings.set_prop("javascriptChallengeExpirationInMinutes", AAZIntType, ".javascript_challenge_expiration_in_minutes")
                policy_settings.set_prop("logScrubbing", AAZObjectType, ".log_scrubbing")
                policy_settings.set_prop("mode", AAZStrType, ".mode")
                policy_settings.set_prop("redirectUrl", AAZStrType, ".redirect_url")
                policy_settings.set_prop("requestBodyCheck", AAZStrType, ".request_body_check")

            log_scrubbing = _builder.get(".properties.policySettings.logScrubbing")
            if log_scrubbing is not None:
                log_scrubbing.set_prop("scrubbingRules", AAZListType, ".scrubbing_rules")
                log_scrubbing.set_prop("state", AAZStrType, ".state")

            scrubbing_rules = _builder.get(".properties.policySettings.logScrubbing.scrubbingRules")
            if scrubbing_rules is not None:
                scrubbing_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.policySettings.logScrubbing.scrubbingRules[]")
            if _elements is not None:
                _elements.set_prop("matchVariable", AAZStrType, ".match_variable", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("selector", AAZStrType, ".selector")
                _elements.set_prop("selectorMatchOperator", AAZStrType, ".selector_match_operator", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("state", AAZStrType, ".state")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_managed_rule_exclusion_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("matchVariable", AAZStrType, ".match_variable", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("selector", AAZStrType, ".selector", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("selectorMatchOperator", AAZStrType, ".selector_match_operator", typ_kwargs={"flags": {"required": True}})

    _schema_managed_rule_exclusion_read = None

    @classmethod
    def _build_schema_managed_rule_exclusion_read(cls, _schema):
        if cls._schema_managed_rule_exclusion_read is not None:
            _schema.match_variable = cls._schema_managed_rule_exclusion_read.match_variable
            _schema.selector = cls._schema_managed_rule_exclusion_read.selector
            _schema.selector_match_operator = cls._schema_managed_rule_exclusion_read.selector_match_operator
            return

        cls._schema_managed_rule_exclusion_read = _schema_managed_rule_exclusion_read = AAZObjectType()

        managed_rule_exclusion_read = _schema_managed_rule_exclusion_read
        managed_rule_exclusion_read.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        managed_rule_exclusion_read.selector = AAZStrType(
            flags={"required": True},
        )
        managed_rule_exclusion_read.selector_match_operator = AAZStrType(
            serialized_name="selectorMatchOperator",
            flags={"required": True},
        )

        _schema.match_variable = cls._schema_managed_rule_exclusion_read.match_variable
        _schema.selector = cls._schema_managed_rule_exclusion_read.selector
        _schema.selector_match_operator = cls._schema_managed_rule_exclusion_read.selector_match_operator

    _schema_web_application_firewall_policy_read = None

    @classmethod
    def _build_schema_web_application_firewall_policy_read(cls, _schema):
        if cls._schema_web_application_firewall_policy_read is not None:
            _schema.etag = cls._schema_web_application_firewall_policy_read.etag
            _schema.id = cls._schema_web_application_firewall_policy_read.id
            _schema.location = cls._schema_web_application_firewall_policy_read.location
            _schema.name = cls._schema_web_application_firewall_policy_read.name
            _schema.properties = cls._schema_web_application_firewall_policy_read.properties
            _schema.sku = cls._schema_web_application_firewall_policy_read.sku
            _schema.tags = cls._schema_web_application_firewall_policy_read.tags
            _schema.type = cls._schema_web_application_firewall_policy_read.type
            return

        cls._schema_web_application_firewall_policy_read = _schema_web_application_firewall_policy_read = AAZObjectType()

        web_application_firewall_policy_read = _schema_web_application_firewall_policy_read
        web_application_firewall_policy_read.etag = AAZStrType()
        web_application_firewall_policy_read.id = AAZStrType(
            flags={"read_only": True},
        )
        web_application_firewall_policy_read.location = AAZStrType()
        web_application_firewall_policy_read.name = AAZStrType(
            flags={"read_only": True},
        )
        web_application_firewall_policy_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        web_application_firewall_policy_read.sku = AAZObjectType()
        web_application_firewall_policy_read.tags = AAZDictType()
        web_application_firewall_policy_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_web_application_firewall_policy_read.properties
        properties.custom_rules = AAZObjectType(
            serialized_name="customRules",
        )
        properties.frontend_endpoint_links = AAZListType(
            serialized_name="frontendEndpointLinks",
            flags={"read_only": True},
        )
        properties.managed_rules = AAZObjectType(
            serialized_name="managedRules",
        )
        properties.policy_settings = AAZObjectType(
            serialized_name="policySettings",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.resource_state = AAZStrType(
            serialized_name="resourceState",
            flags={"read_only": True},
        )
        properties.routing_rule_links = AAZListType(
            serialized_name="routingRuleLinks",
            flags={"read_only": True},
        )
        properties.security_policy_links = AAZListType(
            serialized_name="securityPolicyLinks",
            flags={"read_only": True},
        )

        custom_rules = _schema_web_application_firewall_policy_read.properties.custom_rules
        custom_rules.rules = AAZListType()

        rules = _schema_web_application_firewall_policy_read.properties.custom_rules.rules
        rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element
        _element.action = AAZStrType(
            flags={"required": True},
        )
        _element.enabled_state = AAZStrType(
            serialized_name="enabledState",
        )
        _element.group_by = AAZListType(
            serialized_name="groupBy",
        )
        _element.match_conditions = AAZListType(
            serialized_name="matchConditions",
            flags={"required": True},
        )
        _element.name = AAZStrType()
        _element.priority = AAZIntType(
            flags={"required": True},
        )
        _element.rate_limit_duration_in_minutes = AAZIntType(
            serialized_name="rateLimitDurationInMinutes",
        )
        _element.rate_limit_threshold = AAZIntType(
            serialized_name="rateLimitThreshold",
        )
        _element.rule_type = AAZStrType(
            serialized_name="ruleType",
            flags={"required": True},
        )

        group_by = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.group_by
        group_by.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.group_by.Element
        _element.variable_name = AAZStrType(
            serialized_name="variableName",
            flags={"required": True},
        )

        match_conditions = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.match_conditions
        match_conditions.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.match_conditions.Element
        _element.match_value = AAZListType(
            serialized_name="matchValue",
            flags={"required": True},
        )
        _element.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        _element.negate_condition = AAZBoolType(
            serialized_name="negateCondition",
        )
        _element.operator = AAZStrType(
            flags={"required": True},
        )
        _element.selector = AAZStrType()
        _element.transforms = AAZListType()

        match_value = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.match_conditions.Element.match_value
        match_value.Element = AAZStrType()

        transforms = _schema_web_application_firewall_policy_read.properties.custom_rules.rules.Element.match_conditions.Element.transforms
        transforms.Element = AAZStrType()

        frontend_endpoint_links = _schema_web_application_firewall_policy_read.properties.frontend_endpoint_links
        frontend_endpoint_links.Element = AAZObjectType(
            flags={"read_only": True},
        )

        _element = _schema_web_application_firewall_policy_read.properties.frontend_endpoint_links.Element
        _element.id = AAZStrType()

        managed_rules = _schema_web_application_firewall_policy_read.properties.managed_rules
        managed_rules.managed_rule_sets = AAZListType(
            serialized_name="managedRuleSets",
        )

        managed_rule_sets = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets
        managed_rule_sets.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element
        _element.exclusions = AAZListType()
        _element.rule_group_overrides = AAZListType(
            serialized_name="ruleGroupOverrides",
        )
        _element.rule_set_action = AAZStrType(
            serialized_name="ruleSetAction",
        )
        _element.rule_set_type = AAZStrType(
            serialized_name="ruleSetType",
            flags={"required": True},
        )
        _element.rule_set_version = AAZStrType(
            serialized_name="ruleSetVersion",
            flags={"required": True},
        )

        exclusions = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.exclusions
        exclusions.Element = AAZObjectType()
        cls._build_schema_managed_rule_exclusion_read(exclusions.Element)

        rule_group_overrides = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides
        rule_group_overrides.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element
        _element.exclusions = AAZListType()
        _element.rule_group_name = AAZStrType(
            serialized_name="ruleGroupName",
            flags={"required": True},
        )
        _element.rules = AAZListType()

        exclusions = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.exclusions
        exclusions.Element = AAZObjectType()
        cls._build_schema_managed_rule_exclusion_read(exclusions.Element)

        rules = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules
        rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element
        _element.action = AAZStrType()
        _element.enabled_state = AAZStrType(
            serialized_name="enabledState",
        )
        _element.exclusions = AAZListType()
        _element.rule_id = AAZStrType(
            serialized_name="ruleId",
            flags={"required": True},
        )

        exclusions = _schema_web_application_firewall_policy_read.properties.managed_rules.managed_rule_sets.Element.rule_group_overrides.Element.rules.Element.exclusions
        exclusions.Element = AAZObjectType()
        cls._build_schema_managed_rule_exclusion_read(exclusions.Element)

        policy_settings = _schema_web_application_firewall_policy_read.properties.policy_settings
        policy_settings.custom_block_response_body = AAZStrType(
            serialized_name="customBlockResponseBody",
        )
        policy_settings.custom_block_response_status_code = AAZIntType(
            serialized_name="customBlockResponseStatusCode",
        )
        policy_settings.enabled_state = AAZStrType(
            serialized_name="enabledState",
        )
        policy_settings.javascript_challenge_expiration_in_minutes = AAZIntType(
            serialized_name="javascriptChallengeExpirationInMinutes",
        )
        policy_settings.log_scrubbing = AAZObjectType(
            serialized_name="logScrubbing",
        )
        policy_settings.mode = AAZStrType()
        policy_settings.redirect_url = AAZStrType(
            serialized_name="redirectUrl",
        )
        policy_settings.request_body_check = AAZStrType(
            serialized_name="requestBodyCheck",
        )

        log_scrubbing = _schema_web_application_firewall_policy_read.properties.policy_settings.log_scrubbing
        log_scrubbing.scrubbing_rules = AAZListType(
            serialized_name="scrubbingRules",
        )
        log_scrubbing.state = AAZStrType()

        scrubbing_rules = _schema_web_application_firewall_policy_read.properties.policy_settings.log_scrubbing.scrubbing_rules
        scrubbing_rules.Element = AAZObjectType()

        _element = _schema_web_application_firewall_policy_read.properties.policy_settings.log_scrubbing.scrubbing_rules.Element
        _element.match_variable = AAZStrType(
            serialized_name="matchVariable",
            flags={"required": True},
        )
        _element.selector = AAZStrType()
        _element.selector_match_operator = AAZStrType(
            serialized_name="selectorMatchOperator",
            flags={"required": True},
        )
        _element.state = AAZStrType()

        routing_rule_links = _schema_web_application_firewall_policy_read.properties.routing_rule_links
        routing_rule_links.Element = AAZObjectType(
            flags={"read_only": True},
        )

        _element = _schema_web_application_firewall_policy_read.properties.routing_rule_links.Element
        _element.id = AAZStrType()

        security_policy_links = _schema_web_application_firewall_policy_read.properties.security_policy_links
        security_policy_links.Element = AAZObjectType(
            flags={"read_only": True},
        )

        _element = _schema_web_application_firewall_policy_read.properties.security_policy_links.Element
        _element.id = AAZStrType()

        sku = _schema_web_application_firewall_policy_read.sku
        sku.name = AAZStrType()

        tags = _schema_web_application_firewall_policy_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_web_application_firewall_policy_read.etag
        _schema.id = cls._schema_web_application_firewall_policy_read.id
        _schema.location = cls._schema_web_application_firewall_policy_read.location
        _schema.name = cls._schema_web_application_firewall_policy_read.name
        _schema.properties = cls._schema_web_application_firewall_policy_read.properties
        _schema.sku = cls._schema_web_application_firewall_policy_read.sku
        _schema.tags = cls._schema_web_application_firewall_policy_read.tags
        _schema.type = cls._schema_web_application_firewall_policy_read.type


__all__ = ["Update"]
