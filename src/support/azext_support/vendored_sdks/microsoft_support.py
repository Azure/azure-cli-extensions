# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import ServiceClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from msrest.pipeline import ClientRawResponse
from msrestazure.azure_operation import AzureOperationPoller
import uuid
from .operations.operations import Operations
from .operations.services_operations import ServicesOperations
from .operations.problem_classifications_operations import ProblemClassificationsOperations
from .operations.support_tickets_operations import SupportTicketsOperations
from .operations.support_ticket_subscription_operations import SupportTicketSubscriptionOperations
from .operations.communications_operations import CommunicationsOperations
from . import models


class MicrosoftSupportConfiguration(AzureConfiguration):
    """Configuration for MicrosoftSupport
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: Azure subscription id.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if subscription_id is None:
            raise ValueError("Parameter 'subscription_id' must not be None.")
        if not base_url:
            base_url = 'https://management.azure.com'

        super(MicrosoftSupportConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-support/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.subscription_id = subscription_id


class MicrosoftSupport(object):
    """Microsoft Azure Support Resource Provider.

    :ivar config: Configuration for client.
    :vartype config: MicrosoftSupportConfiguration

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.support.operations.Operations
    :ivar services: Services operations
    :vartype services: azure.mgmt.support.operations.ServicesOperations
    :ivar problem_classifications: ProblemClassifications operations
    :vartype problem_classifications: azure.mgmt.support.operations.ProblemClassificationsOperations
    :ivar support_tickets: SupportTickets operations
    :vartype support_tickets: azure.mgmt.support.operations.SupportTicketsOperations
    :ivar support_ticket_subscription: SupportTicketSubscription operations
    :vartype support_ticket_subscription: azure.mgmt.support.operations.SupportTicketSubscriptionOperations
    :ivar communications: Communications operations
    :vartype communications: azure.mgmt.support.operations.CommunicationsOperations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: Azure subscription id.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        self.config = MicrosoftSupportConfiguration(credentials, subscription_id, base_url)
        self._client = ServiceClient(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2019-05-01-preview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.operations = Operations(
            self._client, self.config, self._serialize, self._deserialize)
        self.services = ServicesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.problem_classifications = ProblemClassificationsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.support_tickets = SupportTicketsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.support_ticket_subscription = SupportTicketSubscriptionOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.communications = CommunicationsOperations(
            self._client, self.config, self._serialize, self._deserialize)

    def check_name_availability_with_subscription(
            self, name, type, custom_headers=None, raw=False, **operation_config):
        """Check the availability of a resource name.

        :param name: The resource name to validate.
        :type name: str
        :param type: The type of resource. Possible values include:
         'Microsoft.Support/supportTickets', 'Microsoft.Support/communications'
        :type type: str or ~azure.mgmt.support.models.Type
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CheckNameAvailabilityOutput or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.support.models.CheckNameAvailabilityOutput or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ExceptionResponseException<azure.mgmt.support.models.ExceptionResponseException>`
        """
        check_name_availability_input = models.CheckNameAvailabilityInput(name=name, type=type)

        api_version = "2019-05-01-preview"

        # Construct URL
        url = self.check_name_availability_with_subscription.metadata['url']
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(check_name_availability_input, 'CheckNameAvailabilityInput')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ExceptionResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CheckNameAvailabilityOutput', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    check_name_availability_with_subscription.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.Support/checkNameAvailability'}


    def _create_support_ticket_for_subscription_initial(
            self, support_ticket_name, create_support_ticket_parameters, custom_headers=None, raw=False, **operation_config):
        api_version = "2019-05-01-preview"

        # Construct URL
        url = self.create_support_ticket_for_subscription.metadata['url']
        path_format_arguments = {
            'supportTicketName': self._serialize.url("support_ticket_name", support_ticket_name, 'str'),
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(create_support_ticket_parameters, 'SupportTicketDetails')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            raise models.ExceptionResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('SupportTicketDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def create_support_ticket_for_subscription(
            self, support_ticket_name, create_support_ticket_parameters, custom_headers=None, raw=False, **operation_config):
        """Creates a support ticket for a subscription.

        A paid support plan is required to use this API to create a support
        ticket. Users can create tickets for issues relating to Billing,
        Subscription Management, Quota or any of the supported Azure technical
        services as indicated by the 'serviceId' in the request.
        <br/><br/>**Billing tickets**<br/>For billing issues, user must set
        *serviceId* to
        *'/providers/Microsoft.Support/services/517f2da6-78fd-0498-4e22-ad26996b1dfc'*.<br/><br/>**Subscription
        Management tickets**<br/> For issues relating to subscription
        management, *serviceId* should be set to
        *'/providers/Microsoft.Support/services/f3dc5421-79ef-1efa-41a5-42bf3cbb52c6'*.<br/><br/>**Technical
        tickets**<br/>For technical support ticket, user must set *serviceId*
        to one of the technical service ids and must provide additional
        information in TechnicalScopingInformation. <br/>Users must also
        provide problemClassificationId when creating a support ticket.<br/>.

        :param support_ticket_name: Support ticket name.
        :type support_ticket_name: str
        :param create_support_ticket_parameters: Support ticket request
         payload.
        :type create_support_ticket_parameters:
         ~azure.mgmt.support.models.SupportTicketDetails
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :return: An instance of AzureOperationPoller that returns
         SupportTicketDetails or ClientRawResponse if raw=true
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.support.models.SupportTicketDetails]
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ExceptionResponseException<azure.mgmt.support.models.ExceptionResponseException>`
        """
        raw_result = self._create_support_ticket_for_subscription_initial(
            support_ticket_name=support_ticket_name,
            create_support_ticket_parameters=create_support_ticket_parameters,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        # Construct and send request
        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202]:
                raise models.ExceptionResponseException(self._deserialize, response)

            deserialized = self._deserialize('SupportTicketDetails', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response

            return deserialized

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)
    create_support_ticket_for_subscription.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}'}

    def check_name_availability_for_support_ticket_communication(
            self, support_ticket_name, name, type, custom_headers=None, raw=False, **operation_config):
        """Check the availability of a resource name.

        :param support_ticket_name: Support ticket name.
        :type support_ticket_name: str
        :param name: The resource name to validate.
        :type name: str
        :param type: The type of resource. Possible values include:
         'Microsoft.Support/supportTickets', 'Microsoft.Support/communications'
        :type type: str or ~azure.mgmt.support.models.Type
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: CheckNameAvailabilityOutput or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.support.models.CheckNameAvailabilityOutput or
         ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ExceptionResponseException<azure.mgmt.support.models.ExceptionResponseException>`
        """
        check_name_availability_input = models.CheckNameAvailabilityInput(name=name, type=type)

        api_version = "2019-05-01-preview"

        # Construct URL
        url = self.check_name_availability_for_support_ticket_communication.metadata['url']
        path_format_arguments = {
            'supportTicketName': self._serialize.url("support_ticket_name", support_ticket_name, 'str'),
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(check_name_availability_input, 'CheckNameAvailabilityInput')

        # Construct and send request
        request = self._client.post(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200]:
            raise models.ExceptionResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CheckNameAvailabilityOutput', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized
    check_name_availability_for_support_ticket_communication.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/checkNameAvailability'}


    def _create_support_ticket_communication_initial(
            self, support_ticket_name, communication_name, create_communication_parameters, custom_headers=None, raw=False, **operation_config):
        api_version = "2019-05-01-preview"

        # Construct URL
        url = self.create_support_ticket_communication.metadata['url']
        path_format_arguments = {
            'supportTicketName': self._serialize.url("support_ticket_name", support_ticket_name, 'str'),
            'communicationName': self._serialize.url("communication_name", communication_name, 'str'),
            'subscriptionId': self._serialize.url("self.config.subscription_id", self.config.subscription_id, 'str')
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}
        header_parameters['Content-Type'] = 'application/json; charset=utf-8'
        if self.config.generate_client_request_id:
            header_parameters['x-ms-client-request-id'] = str(uuid.uuid1())
        if custom_headers:
            header_parameters.update(custom_headers)
        if self.config.accept_language is not None:
            header_parameters['accept-language'] = self._serialize.header("self.config.accept_language", self.config.accept_language, 'str')

        # Construct body
        body_content = self._serialize.body(create_communication_parameters, 'CommunicationDetails')

        # Construct and send request
        request = self._client.put(url, query_parameters)
        response = self._client.send(
            request, header_parameters, body_content, stream=False, **operation_config)

        if response.status_code not in [200, 202]:
            raise models.ExceptionResponseException(self._deserialize, response)

        deserialized = None

        if response.status_code == 200:
            deserialized = self._deserialize('CommunicationDetails', response)

        if raw:
            client_raw_response = ClientRawResponse(deserialized, response)
            return client_raw_response

        return deserialized

    def create_support_ticket_communication(
            self, support_ticket_name, communication_name, create_communication_parameters, custom_headers=None, raw=False, **operation_config):
        """Creates a support ticket communication.

        :param support_ticket_name: Support ticket name.
        :type support_ticket_name: str
        :param communication_name: Communication name.
        :type communication_name: str
        :param create_communication_parameters: Communication object.
        :type create_communication_parameters:
         ~azure.mgmt.support.models.CommunicationDetails
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :return: An instance of AzureOperationPoller that returns
         CommunicationDetails or ClientRawResponse if raw=true
        :rtype:
         ~msrestazure.azure_operation.AzureOperationPoller[~azure.mgmt.support.models.CommunicationDetails]
         or ~msrest.pipeline.ClientRawResponse
        :raises:
         :class:`ExceptionResponseException<azure.mgmt.support.models.ExceptionResponseException>`
        """
        raw_result = self._create_support_ticket_communication_initial(
            support_ticket_name=support_ticket_name,
            communication_name=communication_name,
            create_communication_parameters=create_communication_parameters,
            custom_headers=custom_headers,
            raw=True,
            **operation_config
        )
        if raw:
            return raw_result

        # Construct and send request
        def long_running_send():
            return raw_result.response

        def get_long_running_status(status_link, headers=None):

            request = self._client.get(status_link)
            if headers:
                request.headers.update(headers)
            header_parameters = {}
            header_parameters['x-ms-client-request-id'] = raw_result.response.request.headers['x-ms-client-request-id']
            return self._client.send(
                request, header_parameters, stream=False, **operation_config)

        def get_long_running_output(response):

            if response.status_code not in [200, 202]:
                raise models.ExceptionResponseException(self._deserialize, response)

            deserialized = self._deserialize('CommunicationDetails', response)

            if raw:
                client_raw_response = ClientRawResponse(deserialized, response)
                return client_raw_response

            return deserialized

        long_running_operation_timeout = operation_config.get(
            'long_running_operation_timeout',
            self.config.long_running_operation_timeout)
        return AzureOperationPoller(
            long_running_send, get_long_running_output,
            get_long_running_status, long_running_operation_timeout)
    create_support_ticket_communication.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}/communications/{communicationName}'}
