# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "support in-subscription tickets create",
)
class Create(AAZCommand):
    """Creates a new support ticket for Quota increase, Technical, Billing, and Subscription Management issues for the specified subscription.

    :example: Create a ticket for Billing related issues
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "BillingTicketDescription" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/BillingServiceNameGuid/problemClassifications/BillingProblemClassificationNameGuid" --severity "minimal" --ticket-name "BillingTestTicketName" --title "BillingTicketTitle"

    :example: Create a ticket for Subscription Management related issues.
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "SubMgmtTicketDescription" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/SubMgmtServiceNameGuid/problemClassifications/SubMgmtProblemClassificationNameGuid" --severity "minimal" --ticket-name "SubMgmtTestTicketName" --title "SubMgmtTicketTitle"

    :example: Create a ticket for Technical issue related to a specific resource
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --contact-additional-emails "xyz@contoso.com" "devs@contoso.com"--description "TechnicalTicketDescription" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/TechnicalServiceNameGuid/problemClassifications/TechnicalProblemClassificationNameGuid" --severity "minimal" --ticket-name "TechnicalTestTicketName" --title "TechnicalTicketTitle" --technical-resource "/subscriptions/SubscriptionGuid/resourceGroups/RgName/providers/Microsoft.Compute/virtualMachines/RName" --secondary-consent "[{type:VirtualMachineMemoryDump,user-consent:No}]"

    :example: Create a ticket to request an increase in Active Jobs and Job Schedules quota for a Batch account
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid" --severity "moderate" --ticket-name "BatchQuotaIncreaseRequest" --title "Request for Active Jobs and Job Schedules Quota Increase"

    :example: Create a ticket to request an increase in Azure SQL managed instance quota
        az support in-subscription tickets create --contact-country "usa" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_managedinstance_problemClassification_guid" --severity "moderate" --ticket-name "SQLMIQuotaIncreaseRequest" --title "Request for Azure SQL Managed Instance Quota Increase"

    :example: Create a ticket to request an increase in Batch accounts quota for a subscription
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid" --severity "moderate" --ticket-name "BatchAccountQuotaIncreaseRequest" --title "Request for Batch Accounts Quota Increase"

    :example: Create a ticket to request an increase in Compute VM Cores quota
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "QuotaTicketDescription" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/CoresQuotaProblemClassificationNameGuid" --severity "minimal" --ticket-name "ComputeVMCoresQuotaIncreaseRequest" --title "Request for Compute VM Cores Quota Increase"

    :example: Create a ticket to request an increase in DTUs for Azure Synapse Analytics
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid" --severity "moderate" --ticket-name "SynapseAnalyticsDTUsQuotaIncreaseRequest" --title "Request for DTUs Quota Increase in Azure Synapse Analytics"

    :example: Create a ticket to request an increase in DTUs for SQL Database
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid" --severity "moderate" --ticket-name "SQLDatabaseDTUsQuotaIncreaseRequest" --title "Request for DTUs Quota Increase in SQL Database" --quota-change-version "1.0" --quota-change-subtype "DTUs" --quota-change-requests "[{region:'EastUS',payload:'{ServerName:testserver,NewLimit:54000}'}]"

    :example: Create a ticket to request an increase in Low-priority cores for a Batch account
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent  "Yes" --problem-classification  --problem classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid"  --severity "moderate" --ticket-name "BatchLowPriorityCoresQuotaIncreaseRequest" --title "Request for Low-priority Cores Quota Increase in Batch Account" --quota-change-version "1.0" --quota-change-subtype "Account" --quota-change-requests "[{region:'EastUS',payload:'{AccountName:test,NewLimit:200,Type:LowPriority}'}]"

    :example: Create a ticket to request an increase in Low-priority cores for Machine Learning service
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent  "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid" --severity "moderate" --ticket-name "MachineLearningLowPriorityCoresQuotaIncreaseRequest" --title "Request for Low-priority Cores Quota Increase in Machine Learning Service" --quota-change-version "1.0" --quota-change-subtype "BatchAml" --quota-change-requests "[{region:'EastUS',payload:'{NewLimit:200,Type:LowPriority}'}]"

    :example: Create a ticket for Generic Quota increase for any Azure Service
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "QuotaTicketDescription" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/QuotaServiceNameGuid/problemClassifications/GenericProblemClassificationNameGuid" --severity "minimal" --ticket-name "GenericQuotaIncreaseRequest" --title "Request for Generic Quota Increase"

    :example: Create a ticket to request an increase in Pools for a Batch account
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "QuotaTicketDescription" --advanced-diagnostic-consent  "Yes" --problem-classification  "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid" --severity "minimal" --ticket-name "BatchPoolsQuotaIncreaseRequest" --title "Request for Pools Quota Increase in Batch Account" --quota-change-version "1.0" --quota-change-requests [0].region="WESTUS" --quota-change-requests [0].payload="{AccountName: test, NewLimit: 102, Type: Pools}" --quota-change-subtype "Account"

    :example: Create a ticket to request an increase in Servers for Azure Synapse Analytics
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent  "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_datawarehouse_problemClassification_guid" --severity "moderate" --ticket-name "SynapseAnalyticsServersQuotaIncreaseRequest" --title "Request for Servers Quota Increase in Azure Synapse Analytics" --quota-change-version "1.0" --quota-change-subtype "Servers" --quota-change-requests "[{region:'EastUS',payload:'{NewLimit:200}'}]"

    :example: Create a ticket to request an increase in Servers for SQL Database
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent  "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/sql_database_problemClassification_guid"--severity "moderate" --ticket-name "SQLDatabaseServersQuotaIncreaseRequest" --title "Request for Servers Quota Increase in SQL Database" --quota-change-version "1.0" --quota-change-subtype "Servers" --quota-change-requests "[{region:'EastUS',payload:'{NewLimit:200}'}]"

    :example: Create a ticket to request an increase in throughput per container limit for account foo bar in Cosmos DB
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "Increase the maximum throughput per container limit to 10000 for account foo bar" --advanced-diagnostic-consent  "Yes" --problem-classification  "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/cosmosdb_problemClassification_guid" --severity "moderate" --ticket-name "CosmosDBThroughputQuotaIncreaseRequest" --title "Request for Throughput Quota Increase in Cosmos DB"

    :example: Create a ticket to request an increase in specific VM family cores for a Batch account
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/batch_problemClassification_guid" --severity "moderate" --ticket-name "BatchVMFamilyCoresQuotaIncreaseRequest" --title "Request for VM Family Cores Quota Increase in Batch Account" --quota-change-version "1.0" --quota-change-subtype "Account" --quota-change-requests "[{region:'EastUS',payload:'{AccountName:test,VMFamily:standardA0_A7Family,NewLimit:200,Type:Dedicated}'}]"

    :example: Create a ticket to request an increase in specific VM family cores for Machine Learning service
        az support in-subscription tickets create --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "abc" --contact-language "en-us" --contact-last-name "xyz" --contact-method "email" --contact-timezone "Pacific Standard Time" --description "my description" --advanced-diagnostic-consent "Yes" --problem-classification "/providers/Microsoft.Support/services/quota_service_guid/problemClassifications/machine_learning_service_problemClassification_guid" --severity "moderate" --ticket-name "MachineLearningVMFamilyCoresQuotaIncreaseRequest" --title "Request for VM Family Cores Quota Increase in Machine Learning Service" --quota-change-version "1.0" --quota-change-subtype "BatchAml" --quota-change-requests "[{region:'EastUS',payload:'{VMFamily:standardA0_A7Family,NewLimit:200,Type:Dedicated}'}]"
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.support/supporttickets/{}", "2024-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.ticket_name = AAZStrArg(
            options=["--ticket-name"],
            help="Support ticket name.",
            required=True,
        )
        _args_schema.advanced_diagnostic_consent = AAZStrArg(
            options=["--advanced-diagnostic-consent"],
            help="Advanced diagnostic consent to be updated on the support ticket.",
            required=True,
            enum={"No": "No", "Yes": "Yes"},
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            help="Detailed description of the question or issue.",
            required=True,
        )
        _args_schema.file_workspace = AAZStrArg(
            options=["--file-workspace"],
            help="File workspace name.",
        )
        _args_schema.problem_classification = AAZStrArg(
            options=["--problem-classification"],
            help="Each Azure service has its own set of issue categories, also known as problem classification. This parameter is the unique Id for the type of problem you are experiencing.",
            required=True,
        )
        _args_schema.start_time = AAZDateTimeArg(
            options=["--start-time"],
            help="Time in UTC (ISO 8601 format) when the problem started. Default is today.",
        )
        _args_schema.require_24_by_7_response = AAZBoolArg(
            options=["--require-24-by-7-response"],
            help="Indicates if this requires a 24x7 response from Azure.",
        )
        _args_schema.secondary_consent = AAZListArg(
            options=["--secondary-consent"],
            help="This property indicates secondary consents for the support ticket",
        )
        _args_schema.severity = AAZStrArg(
            options=["--severity"],
            help="A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure. Note: 'Highest critical impact', also known as the 'Emergency - Severe impact' level in the Azure portal is reserved only for our Premium customers.",
            required=True,
            enum={"critical": "critical", "highestcriticalimpact": "highestcriticalimpact", "minimal": "minimal", "moderate": "moderate"},
        )
        _args_schema.title = AAZStrArg(
            options=["--title"],
            help="Title of the support ticket.",
            required=True,
        )

        secondary_consent = cls._args_schema.secondary_consent
        secondary_consent.Element = AAZObjectArg()

        _element = cls._args_schema.secondary_consent.Element
        _element.type = AAZStrArg(
            options=["type"],
            help="The service name for which the secondary consent is being provided. The value needs to be retrieved from the Problem Classification API response.",
        )
        _element.user_consent = AAZStrArg(
            options=["user-consent"],
            help="User consent value provided",
            enum={"No": "No", "Yes": "Yes"},
        )

        # define Arg Group "Contact"

        _args_schema = cls._args_schema
        _args_schema.contact_additional_emails = AAZListArg(
            options=["--contact-additional-emails"],
            arg_group="Contact",
            help="Additional email addresses listed will be copied on any correspondence about the support ticket.",
        )
        _args_schema.contact_country = AAZStrArg(
            options=["--contact-country"],
            arg_group="Contact",
            help="Country of the user. This is the ISO 3166-1 alpha-3 code.",
            required=True,
        )
        _args_schema.contact_first_name = AAZStrArg(
            options=["--contact-first-name"],
            arg_group="Contact",
            help="First name.",
            required=True,
        )
        _args_schema.contact_last_name = AAZStrArg(
            options=["--contact-last-name"],
            arg_group="Contact",
            help="Last name.",
            required=True,
        )
        _args_schema.contact_phone_number = AAZStrArg(
            options=["--contact-phone-number"],
            arg_group="Contact",
            help="Phone number. This is required if preferred contact method is phone.",
        )
        _args_schema.contact_method = AAZStrArg(
            options=["--contact-method"],
            arg_group="Contact",
            help="Preferred contact method.",
            required=True,
            enum={"email": "email", "phone": "phone"},
        )
        _args_schema.contact_language = AAZStrArg(
            options=["--contact-language"],
            arg_group="Contact",
            help={"short-summary": "Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Use the standard language-country code.", "long-summary": "Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German."},
            required=True,
        )
        _args_schema.contact_timezone = AAZStrArg(
            options=["--contact-timezone"],
            arg_group="Contact",
            help="Time zone of the user. This is the name of the time zone from Microsoft Time Zone Index Values.",
            required=True,
        )
        _args_schema.contact_email = AAZStrArg(
            options=["--contact-email"],
            arg_group="Contact",
            help="Primary email address.",
            required=True,
        )

        contact_additional_emails = cls._args_schema.contact_additional_emails
        contact_additional_emails.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.enrollment_id = AAZStrArg(
            options=["--enrollment-id"],
            arg_group="Properties",
            help="Enrollment Id associated with the support ticket.",
        )

        # define Arg Group "Quota"

        _args_schema = cls._args_schema
        _args_schema.quota_change_subtype = AAZStrArg(
            options=["--quota-change-subtype"],
            arg_group="Quota",
            help="Required for certain quota types when there is a sub type, such as Batch, for which you are requesting a quota increase.",
        )
        _args_schema.quota_change_version = AAZStrArg(
            options=["--quota-change-version"],
            arg_group="Quota",
            help="Quota change request version.",
        )
        _args_schema.quota_change_requests = AAZListArg(
            options=["--quota-change-requests"],
            arg_group="Quota",
            help="This property is required for providing the region and new quota limits.",
        )

        quota_change_requests = cls._args_schema.quota_change_requests
        quota_change_requests.Element = AAZObjectArg()

        _element = cls._args_schema.quota_change_requests.Element
        _element.payload = AAZStrArg(
            options=["payload"],
            help="Payload of the quota increase request.",
        )
        _element.region = AAZStrArg(
            options=["region"],
            help="Region for which the quota increase request is being made.",
        )

        # define Arg Group "Technical"

        _args_schema = cls._args_schema
        _args_schema.technical_resource = AAZStrArg(
            options=["--technical-resource"],
            arg_group="Technical",
            help="This is the resource Id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource) for which the support ticket is created.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SupportTicketsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SupportTicketsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "supportTicketName", self.ctx.args.ticket_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("advancedDiagnosticConsent", AAZStrType, ".advanced_diagnostic_consent", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("contactDetails", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("enrollmentId", AAZStrType, ".enrollment_id")
                properties.set_prop("fileWorkspaceName", AAZStrType, ".file_workspace")
                properties.set_prop("problemClassificationId", AAZStrType, ".problem_classification", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("problemStartTime", AAZStrType, ".start_time")
                properties.set_prop("quotaTicketDetails", AAZObjectType)
                properties.set_prop("require24X7Response", AAZBoolType, ".require_24_by_7_response")
                properties.set_prop("secondaryConsent", AAZListType, ".secondary_consent")
                properties.set_prop("severity", AAZStrType, ".severity", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("technicalTicketDetails", AAZObjectType)
                properties.set_prop("title", AAZStrType, ".title", typ_kwargs={"flags": {"required": True}})

            contact_details = _builder.get(".properties.contactDetails")
            if contact_details is not None:
                contact_details.set_prop("additionalEmailAddresses", AAZListType, ".contact_additional_emails")
                contact_details.set_prop("country", AAZStrType, ".contact_country", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("firstName", AAZStrType, ".contact_first_name", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("lastName", AAZStrType, ".contact_last_name", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("phoneNumber", AAZStrType, ".contact_phone_number")
                contact_details.set_prop("preferredContactMethod", AAZStrType, ".contact_method", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("preferredSupportLanguage", AAZStrType, ".contact_language", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("preferredTimeZone", AAZStrType, ".contact_timezone", typ_kwargs={"flags": {"required": True}})
                contact_details.set_prop("primaryEmailAddress", AAZStrType, ".contact_email", typ_kwargs={"flags": {"required": True}})

            additional_email_addresses = _builder.get(".properties.contactDetails.additionalEmailAddresses")
            if additional_email_addresses is not None:
                additional_email_addresses.set_elements(AAZStrType, ".")

            quota_ticket_details = _builder.get(".properties.quotaTicketDetails")
            if quota_ticket_details is not None:
                quota_ticket_details.set_prop("quotaChangeRequestSubType", AAZStrType, ".quota_change_subtype")
                quota_ticket_details.set_prop("quotaChangeRequestVersion", AAZStrType, ".quota_change_version")
                quota_ticket_details.set_prop("quotaChangeRequests", AAZListType, ".quota_change_requests")

            quota_change_requests = _builder.get(".properties.quotaTicketDetails.quotaChangeRequests")
            if quota_change_requests is not None:
                quota_change_requests.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.quotaTicketDetails.quotaChangeRequests[]")
            if _elements is not None:
                _elements.set_prop("payload", AAZStrType, ".payload")
                _elements.set_prop("region", AAZStrType, ".region")

            secondary_consent = _builder.get(".properties.secondaryConsent")
            if secondary_consent is not None:
                secondary_consent.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.secondaryConsent[]")
            if _elements is not None:
                _elements.set_prop("type", AAZStrType, ".type")
                _elements.set_prop("userConsent", AAZStrType, ".user_consent")

            technical_ticket_details = _builder.get(".properties.technicalTicketDetails")
            if technical_ticket_details is not None:
                technical_ticket_details.set_prop("resourceId", AAZStrType, ".technical_resource")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.advanced_diagnostic_consent = AAZStrType(
                serialized_name="advancedDiagnosticConsent",
                flags={"required": True},
            )
            properties.contact_details = AAZObjectType(
                serialized_name="contactDetails",
                flags={"required": True},
            )
            properties.created_date = AAZStrType(
                serialized_name="createdDate",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.enrollment_id = AAZStrType(
                serialized_name="enrollmentId",
            )
            properties.file_workspace_name = AAZStrType(
                serialized_name="fileWorkspaceName",
            )
            properties.is_temporary_ticket = AAZStrType(
                serialized_name="isTemporaryTicket",
                flags={"read_only": True},
            )
            properties.modified_date = AAZStrType(
                serialized_name="modifiedDate",
                flags={"read_only": True},
            )
            properties.problem_classification_display_name = AAZStrType(
                serialized_name="problemClassificationDisplayName",
                flags={"read_only": True},
            )
            properties.problem_classification_id = AAZStrType(
                serialized_name="problemClassificationId",
                flags={"required": True},
            )
            properties.problem_scoping_questions = AAZStrType(
                serialized_name="problemScopingQuestions",
            )
            properties.problem_start_time = AAZStrType(
                serialized_name="problemStartTime",
            )
            properties.quota_ticket_details = AAZObjectType(
                serialized_name="quotaTicketDetails",
            )
            properties.require24_x7_response = AAZBoolType(
                serialized_name="require24X7Response",
            )
            properties.secondary_consent = AAZListType(
                serialized_name="secondaryConsent",
            )
            properties.service_display_name = AAZStrType(
                serialized_name="serviceDisplayName",
                flags={"read_only": True},
            )
            properties.service_id = AAZStrType(
                serialized_name="serviceId",
                flags={"required": True},
            )
            properties.service_level_agreement = AAZObjectType(
                serialized_name="serviceLevelAgreement",
            )
            properties.severity = AAZStrType(
                flags={"required": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.support_engineer = AAZObjectType(
                serialized_name="supportEngineer",
            )
            properties.support_plan_display_name = AAZStrType(
                serialized_name="supportPlanDisplayName",
                flags={"read_only": True},
            )
            properties.support_plan_id = AAZStrType(
                serialized_name="supportPlanId",
            )
            properties.support_plan_type = AAZStrType(
                serialized_name="supportPlanType",
                flags={"read_only": True},
            )
            properties.support_ticket_id = AAZStrType(
                serialized_name="supportTicketId",
            )
            properties.technical_ticket_details = AAZObjectType(
                serialized_name="technicalTicketDetails",
            )
            properties.title = AAZStrType(
                flags={"required": True},
            )

            contact_details = cls._schema_on_200.properties.contact_details
            contact_details.additional_email_addresses = AAZListType(
                serialized_name="additionalEmailAddresses",
            )
            contact_details.country = AAZStrType(
                flags={"required": True},
            )
            contact_details.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            contact_details.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            contact_details.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            contact_details.preferred_contact_method = AAZStrType(
                serialized_name="preferredContactMethod",
                flags={"required": True},
            )
            contact_details.preferred_support_language = AAZStrType(
                serialized_name="preferredSupportLanguage",
                flags={"required": True},
            )
            contact_details.preferred_time_zone = AAZStrType(
                serialized_name="preferredTimeZone",
                flags={"required": True},
            )
            contact_details.primary_email_address = AAZStrType(
                serialized_name="primaryEmailAddress",
                flags={"required": True},
            )

            additional_email_addresses = cls._schema_on_200.properties.contact_details.additional_email_addresses
            additional_email_addresses.Element = AAZStrType()

            quota_ticket_details = cls._schema_on_200.properties.quota_ticket_details
            quota_ticket_details.quota_change_request_sub_type = AAZStrType(
                serialized_name="quotaChangeRequestSubType",
            )
            quota_ticket_details.quota_change_request_version = AAZStrType(
                serialized_name="quotaChangeRequestVersion",
            )
            quota_ticket_details.quota_change_requests = AAZListType(
                serialized_name="quotaChangeRequests",
            )

            quota_change_requests = cls._schema_on_200.properties.quota_ticket_details.quota_change_requests
            quota_change_requests.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.quota_ticket_details.quota_change_requests.Element
            _element.payload = AAZStrType()
            _element.region = AAZStrType()

            secondary_consent = cls._schema_on_200.properties.secondary_consent
            secondary_consent.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.secondary_consent.Element
            _element.type = AAZStrType()
            _element.user_consent = AAZStrType(
                serialized_name="userConsent",
            )

            service_level_agreement = cls._schema_on_200.properties.service_level_agreement
            service_level_agreement.expiration_time = AAZStrType(
                serialized_name="expirationTime",
                flags={"read_only": True},
            )
            service_level_agreement.sla_minutes = AAZIntType(
                serialized_name="slaMinutes",
                flags={"read_only": True},
            )
            service_level_agreement.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True},
            )

            support_engineer = cls._schema_on_200.properties.support_engineer
            support_engineer.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"read_only": True},
            )

            technical_ticket_details = cls._schema_on_200.properties.technical_ticket_details
            technical_ticket_details.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
