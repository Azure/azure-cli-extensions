# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "support in-subscription tickets update",
)
class Update(AAZCommand):
    """Update API allows you to update the severity level, ticket status, advanced diagnostic consent, secondary consent, and your contact information in the support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer. In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.

    :example: Update support ticket severity.
        az support in-subscription tickets update --ticket-name "TestTicketName" --severity "moderate"

    :example: Update support ticket status.
        az support in-subscription tickets update --ticket-name "TestTicketName" --status "closed"

    :example: Update support ticket customer contact details properties
        az support in-subscription tickets update --ticket-name "TestTicketName" --contact-additional-emails "xyz@contoso.com" "devs@contoso.com" --contact-country "USA" --contact-email "abc@contoso.com" --contact-first-name "Foo" --contact-language "en-us" --contact-last-name "Bar" --contact-method "phone" --contact-phone-number "123-456-7890" --contact-timezone "Pacific Standard Time"

    :example: Update advanced diagnostic consent of a support ticket
        az support in-subscription tickets update --ticket-name "TestTicketName" --advanced-diagnostic-consent "Yes"

    :example: Update secondary consent of a support ticket
        az support in-subscription tickets update --ticket-name "TestTicketName" --secondary-consent "[{type:VirtualMachineMemoryDump,user-consent:No}]"
        az support in-subscription tickets update --ticket-name "TestTicketName" --secondary-consent [0].type="VirtualMachineMemoryDump" --secondary-consent [0].user-consent="No"
        az support in-subscription tickets update --ticket-name "TestTicketName" --secondary-consent [0]="{type:VirtualMachineMemoryDump,user-consent:No}"
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.support/supporttickets/{}", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.ticket_name = AAZStrArg(
            options=["--ticket-name"],
            help="Support ticket name.",
            required=True,
        )
        _args_schema.advanced_diagnostic_consent = AAZStrArg(
            options=["--advanced-diagnostic-consent"],
            help="Advanced diagnostic consent to be updated on the support ticket.",
            enum={"No": "No", "Yes": "Yes"},
        )
        _args_schema.secondary_consent = AAZListArg(
            options=["--secondary-consent"],
            help="This property indicates secondary consents for the support ticket",
        )
        _args_schema.severity = AAZStrArg(
            options=["--severity"],
            help="Severity level.",
            enum={"critical": "critical", "highestcriticalimpact": "highestcriticalimpact", "minimal": "minimal", "moderate": "moderate"},
        )
        _args_schema.status = AAZStrArg(
            options=["--status"],
            help="Status to be updated on the ticket.",
            enum={"closed": "closed", "open": "open"},
        )

        secondary_consent = cls._args_schema.secondary_consent
        secondary_consent.Element = AAZObjectArg()

        _element = cls._args_schema.secondary_consent.Element
        _element.type = AAZStrArg(
            options=["type"],
            help="The service name for which the secondary consent is being provided. The value needs to be retrieved from the Problem Classification API response.",
        )
        _element.user_consent = AAZStrArg(
            options=["user-consent"],
            help="User consent value provided",
            enum={"No": "No", "Yes": "Yes"},
        )

        # define Arg Group "Contact"

        _args_schema = cls._args_schema
        _args_schema.contact_additional_emails = AAZListArg(
            options=["--contact-additional-emails"],
            arg_group="Contact",
            help="Email addresses listed will be copied on any correspondence about the support ticket.",
        )
        _args_schema.contact_country = AAZStrArg(
            options=["--contact-country"],
            arg_group="Contact",
            help="Country of the user. This is the ISO 3166-1 alpha-3 code.",
        )
        _args_schema.contact_first_name = AAZStrArg(
            options=["--contact-first-name"],
            arg_group="Contact",
            help="First name.",
        )
        _args_schema.contact_last_name = AAZStrArg(
            options=["--contact-last-name"],
            arg_group="Contact",
            help="Last name.",
        )
        _args_schema.contact_phone_number = AAZStrArg(
            options=["--contact-phone-number"],
            arg_group="Contact",
            help="Phone number. This is required if preferred contact method is phone.",
        )
        _args_schema.contact_method = AAZStrArg(
            options=["--contact-method"],
            arg_group="Contact",
            help="Preferred contact method.",
            enum={"email": "email", "phone": "phone"},
        )
        _args_schema.contact_language = AAZStrArg(
            options=["--contact-language"],
            arg_group="Contact",
            help={"short-summary": "Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Use the standard language-country code.", "long-summary": "Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German."},
        )
        _args_schema.contact_timezone = AAZStrArg(
            options=["--contact-timezone"],
            arg_group="Contact",
            help="Time zone of the user. This is the name of the time zone from Microsoft Time Zone Index Values",
        )
        _args_schema.contact_email = AAZStrArg(
            options=["--contact-email"],
            arg_group="Contact",
            help="Primary email address.",
        )

        contact_additional_emails = cls._args_schema.contact_additional_emails
        contact_additional_emails.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SupportTicketsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SupportTicketsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "supportTicketName", self.ctx.args.ticket_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("advancedDiagnosticConsent", AAZStrType, ".advanced_diagnostic_consent")
            _builder.set_prop("contactDetails", AAZObjectType)
            _builder.set_prop("secondaryConsent", AAZListType, ".secondary_consent")
            _builder.set_prop("severity", AAZStrType, ".severity")
            _builder.set_prop("status", AAZStrType, ".status")

            contact_details = _builder.get(".contactDetails")
            if contact_details is not None:
                contact_details.set_prop("additionalEmailAddresses", AAZListType, ".contact_additional_emails")
                contact_details.set_prop("country", AAZStrType, ".contact_country")
                contact_details.set_prop("firstName", AAZStrType, ".contact_first_name")
                contact_details.set_prop("lastName", AAZStrType, ".contact_last_name")
                contact_details.set_prop("phoneNumber", AAZStrType, ".contact_phone_number")
                contact_details.set_prop("preferredContactMethod", AAZStrType, ".contact_method")
                contact_details.set_prop("preferredSupportLanguage", AAZStrType, ".contact_language")
                contact_details.set_prop("preferredTimeZone", AAZStrType, ".contact_timezone")
                contact_details.set_prop("primaryEmailAddress", AAZStrType, ".contact_email")

            additional_email_addresses = _builder.get(".contactDetails.additionalEmailAddresses")
            if additional_email_addresses is not None:
                additional_email_addresses.set_elements(AAZStrType, ".")

            secondary_consent = _builder.get(".secondaryConsent")
            if secondary_consent is not None:
                secondary_consent.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".secondaryConsent[]")
            if _elements is not None:
                _elements.set_prop("type", AAZStrType, ".type")
                _elements.set_prop("userConsent", AAZStrType, ".user_consent")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.advanced_diagnostic_consent = AAZStrType(
                serialized_name="advancedDiagnosticConsent",
                flags={"required": True},
            )
            properties.contact_details = AAZObjectType(
                serialized_name="contactDetails",
                flags={"required": True},
            )
            properties.created_date = AAZStrType(
                serialized_name="createdDate",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.enrollment_id = AAZStrType(
                serialized_name="enrollmentId",
            )
            properties.file_workspace_name = AAZStrType(
                serialized_name="fileWorkspaceName",
            )
            properties.is_temporary_ticket = AAZStrType(
                serialized_name="isTemporaryTicket",
                flags={"read_only": True},
            )
            properties.modified_date = AAZStrType(
                serialized_name="modifiedDate",
                flags={"read_only": True},
            )
            properties.problem_classification_display_name = AAZStrType(
                serialized_name="problemClassificationDisplayName",
                flags={"read_only": True},
            )
            properties.problem_classification_id = AAZStrType(
                serialized_name="problemClassificationId",
                flags={"required": True},
            )
            properties.problem_scoping_questions = AAZStrType(
                serialized_name="problemScopingQuestions",
            )
            properties.problem_start_time = AAZStrType(
                serialized_name="problemStartTime",
            )
            properties.quota_ticket_details = AAZObjectType(
                serialized_name="quotaTicketDetails",
            )
            properties.require24_x7_response = AAZBoolType(
                serialized_name="require24X7Response",
            )
            properties.secondary_consent = AAZListType(
                serialized_name="secondaryConsent",
            )
            properties.service_display_name = AAZStrType(
                serialized_name="serviceDisplayName",
                flags={"read_only": True},
            )
            properties.service_id = AAZStrType(
                serialized_name="serviceId",
                flags={"required": True},
            )
            properties.service_level_agreement = AAZObjectType(
                serialized_name="serviceLevelAgreement",
            )
            properties.severity = AAZStrType(
                flags={"required": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.support_engineer = AAZObjectType(
                serialized_name="supportEngineer",
            )
            properties.support_plan_display_name = AAZStrType(
                serialized_name="supportPlanDisplayName",
                flags={"read_only": True},
            )
            properties.support_plan_id = AAZStrType(
                serialized_name="supportPlanId",
            )
            properties.support_plan_type = AAZStrType(
                serialized_name="supportPlanType",
                flags={"read_only": True},
            )
            properties.support_ticket_id = AAZStrType(
                serialized_name="supportTicketId",
            )
            properties.technical_ticket_details = AAZObjectType(
                serialized_name="technicalTicketDetails",
            )
            properties.title = AAZStrType(
                flags={"required": True},
            )

            contact_details = cls._schema_on_200.properties.contact_details
            contact_details.additional_email_addresses = AAZListType(
                serialized_name="additionalEmailAddresses",
            )
            contact_details.country = AAZStrType(
                flags={"required": True},
            )
            contact_details.first_name = AAZStrType(
                serialized_name="firstName",
                flags={"required": True},
            )
            contact_details.last_name = AAZStrType(
                serialized_name="lastName",
                flags={"required": True},
            )
            contact_details.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            contact_details.preferred_contact_method = AAZStrType(
                serialized_name="preferredContactMethod",
                flags={"required": True},
            )
            contact_details.preferred_support_language = AAZStrType(
                serialized_name="preferredSupportLanguage",
                flags={"required": True},
            )
            contact_details.preferred_time_zone = AAZStrType(
                serialized_name="preferredTimeZone",
                flags={"required": True},
            )
            contact_details.primary_email_address = AAZStrType(
                serialized_name="primaryEmailAddress",
                flags={"required": True},
            )

            additional_email_addresses = cls._schema_on_200.properties.contact_details.additional_email_addresses
            additional_email_addresses.Element = AAZStrType()

            quota_ticket_details = cls._schema_on_200.properties.quota_ticket_details
            quota_ticket_details.quota_change_request_sub_type = AAZStrType(
                serialized_name="quotaChangeRequestSubType",
            )
            quota_ticket_details.quota_change_request_version = AAZStrType(
                serialized_name="quotaChangeRequestVersion",
            )
            quota_ticket_details.quota_change_requests = AAZListType(
                serialized_name="quotaChangeRequests",
            )

            quota_change_requests = cls._schema_on_200.properties.quota_ticket_details.quota_change_requests
            quota_change_requests.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.quota_ticket_details.quota_change_requests.Element
            _element.payload = AAZStrType()
            _element.region = AAZStrType()

            secondary_consent = cls._schema_on_200.properties.secondary_consent
            secondary_consent.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.secondary_consent.Element
            _element.type = AAZStrType()
            _element.user_consent = AAZStrType(
                serialized_name="userConsent",
            )

            service_level_agreement = cls._schema_on_200.properties.service_level_agreement
            service_level_agreement.expiration_time = AAZStrType(
                serialized_name="expirationTime",
                flags={"read_only": True},
            )
            service_level_agreement.sla_minutes = AAZIntType(
                serialized_name="slaMinutes",
                flags={"read_only": True},
            )
            service_level_agreement.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True},
            )

            support_engineer = cls._schema_on_200.properties.support_engineer
            support_engineer.email_address = AAZStrType(
                serialized_name="emailAddress",
                flags={"read_only": True},
            )

            technical_ticket_details = cls._schema_on_200.properties.technical_ticket_details
            technical_ticket_details.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
