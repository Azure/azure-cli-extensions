# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Upload(AAZCommand):
    """This API allows you to upload content to a file
    """

    _aaz_info = {
        "version": "2024-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.support/fileworkspaces/{}/files/{}/upload", "2024-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.file_name = AAZStrArg(
            options=["--file-name"],
            help="File Name",
            required=True,
        )
        _args_schema.file_workspace_name = AAZStrArg(
            options=["--file-workspace-name"],
            help="File WorkspaceName",
            required=True,
        )

        # define Arg Group "UploadFile"

        _args_schema = cls._args_schema
        _args_schema.chunk_index = AAZIntArg(
            options=["--chunk-index"],
            arg_group="UploadFile",
            help="Index of the uploaded chunk (Index starts at 0)",
        )
        _args_schema.content = AAZStrArg(
            options=["--content"],
            arg_group="UploadFile",
            help="File Content in base64 encoded format",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FilesNoSubscriptionUpload(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class FilesNoSubscriptionUpload(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Support/fileWorkspaces/{fileWorkspaceName}/files/{fileName}/upload",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fileName", self.ctx.args.file_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "fileWorkspaceName", self.ctx.args.file_workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("chunkIndex", AAZIntType, ".chunk_index")
            _builder.set_prop("content", AAZStrType, ".content")

            return self.serialize_content(_content_value)

        def on_204(self, session):
            pass


class _UploadHelper:
    """Helper class for Upload"""


__all__ = ["Upload"]
