# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "orbital spacecraft list-available-contact",
)
class ListAvailableContact(AAZCommand):
    """List available contacts. A contact is available if the spacecraft is visible from the ground station for more than the minimum viable contact duration provided in the contact profile.

    :example: List Available Contacts
        az orbital spacecraft list-available-contact -g <resource-group> --spacecraft-name <spacecraft-name> --contact-profile "{id:<contact-profile-id>}" --ground-station-name <ground-station-name> --start-time "2022-11-14T00:55:31.820Z" --end-time "2022-11-15T00:55:31.820Z"
    """

    _aaz_info = {
        "version": "2022-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.orbital/spacecrafts/{}/listavailablecontacts", "2022-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.spacecraft_name = AAZStrArg(
            options=["--spacecraft-name"],
            help="Spacecraft ID.",
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.contact_profile = AAZObjectArg(
            options=["--contact-profile"],
            arg_group="Parameters",
            help="The reference to the contact profile resource.",
            required=True,
        )
        _args_schema.end_time = AAZDateTimeArg(
            options=["--end-time"],
            arg_group="Parameters",
            help="End time of a contact (ISO 8601 UTC standard).",
            required=True,
        )
        _args_schema.ground_station_name = AAZStrArg(
            options=["--ground-station-name"],
            arg_group="Parameters",
            help="Name of Azure Ground Station.",
            required=True,
        )
        _args_schema.start_time = AAZDateTimeArg(
            options=["--start-time"],
            arg_group="Parameters",
            help="Start time of a contact (ISO 8601 UTC standard).",
            required=True,
        )

        contact_profile = cls._args_schema.contact_profile
        contact_profile.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )
        return cls._args_schema

    def _execute_operations(self):
        yield self.SpacecraftsListAvailableContacts(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result

    class SpacecraftsListAvailableContacts(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}/listAvailableContacts",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "spacecraftName", self.ctx.args.spacecraft_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("contactProfile", AAZObjectType, ".contact_profile", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("endTime", AAZStrType, ".end_time", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("groundStationName", AAZStrType, ".ground_station_name", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("startTime", AAZStrType, ".start_time", typ_kwargs={"flags": {"required": True}})

            contact_profile = _builder.get(".contactProfile")
            if contact_profile is not None:
                contact_profile.set_prop("id", AAZStrType, ".id")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.ground_station_name = AAZStrType(
                serialized_name="groundStationName",
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.spacecraft = AAZObjectType()

            properties = cls._schema_on_200.value.Element.properties
            properties.end_azimuth_degrees = AAZFloatType(
                serialized_name="endAzimuthDegrees",
                flags={"read_only": True},
            )
            properties.end_elevation_degrees = AAZFloatType(
                serialized_name="endElevationDegrees",
                flags={"read_only": True},
            )
            properties.maximum_elevation_degrees = AAZFloatType(
                serialized_name="maximumElevationDegrees",
                flags={"read_only": True},
            )
            properties.rx_end_time = AAZStrType(
                serialized_name="rxEndTime",
                flags={"read_only": True},
            )
            properties.rx_start_time = AAZStrType(
                serialized_name="rxStartTime",
                flags={"read_only": True},
            )
            properties.start_azimuth_degrees = AAZFloatType(
                serialized_name="startAzimuthDegrees",
                flags={"read_only": True},
            )
            properties.start_elevation_degrees = AAZFloatType(
                serialized_name="startElevationDegrees",
                flags={"read_only": True},
            )
            properties.tx_end_time = AAZStrType(
                serialized_name="txEndTime",
                flags={"read_only": True},
            )
            properties.tx_start_time = AAZStrType(
                serialized_name="txStartTime",
                flags={"read_only": True},
            )

            spacecraft = cls._schema_on_200.value.Element.spacecraft
            spacecraft.id = AAZStrType()

            return cls._schema_on_200


__all__ = ["ListAvailableContact"]
