# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "orbital spacecraft create",
)
class Create(AAZCommand):
    """Create a spacecraft resource.

    :example: Create a Spacecraft
        az orbital spacecraft create --name <spacecraft-name> --resource-group <resource-group> -l eastus --norad-id 27424 --title-line "AQUA" --tle-line1 "1 27424U 02022A   22192.74014189  .00000435  00000+0  10624-3 0  9992" --tle-line2 "2 27424  98.2482 134.4016 0001650 100.5984  12.3416 14.57323336 73769" --links "[{name:downlink,bandwidth-m-hz:15,center-frequency-m-hz:8160,polarization:RHCP,direction:Downlink}]"
    """

    _aaz_info = {
        "version": "2022-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.orbital/spacecrafts/{}", "2022-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.spacecraft_name = AAZStrArg(
            options=["-n", "--name", "--spacecraft-name"],
            help="Spacecraft ID.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.links = AAZListArg(
            options=["--links"],
            arg_group="Properties",
            help="Immutable list of Spacecraft links.",
        )
        _args_schema.norad_id = AAZStrArg(
            options=["--norad-id"],
            arg_group="Properties",
            help="NORAD ID of the spacecraft.",
        )
        _args_schema.title_line = AAZStrArg(
            options=["--title-line"],
            arg_group="Properties",
            help="Title line of the two-line element set (TLE).",
        )
        _args_schema.tle_line1 = AAZStrArg(
            options=["--tle-line1"],
            arg_group="Properties",
            help="Line 1 of the two-line element set (TLE).",
        )
        _args_schema.tle_line2 = AAZStrArg(
            options=["--tle-line2"],
            arg_group="Properties",
            help="Line 2 of the two-line element set (TLE).",
        )

        links = cls._args_schema.links
        links.Element = AAZObjectArg()

        _element = cls._args_schema.links.Element
        _element.bandwidth_m_hz = AAZFloatArg(
            options=["bandwidth-m-hz"],
            help="Bandwidth in MHz.",
            required=True,
        )
        _element.center_frequency_m_hz = AAZFloatArg(
            options=["center-frequency-m-hz"],
            help="Center Frequency in MHz.",
            required=True,
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="Direction (uplink or downlink).",
            required=True,
            enum={"downlink": "downlink", "uplink": "uplink"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Link name.",
            required=True,
        )
        _element.polarization = AAZStrArg(
            options=["polarization"],
            help="Polarization. e.g. (RHCP, LHCP).",
            required=True,
            enum={"LHCP": "LHCP", "RHCP": "RHCP", "linearHorizontal": "linearHorizontal", "linearVertical": "linearVertical"},
        )
        return cls._args_schema

    def _execute_operations(self):
        yield self.SpacecraftsCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SpacecraftsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/spacecrafts/{spacecraftName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "spacecraftName", self.ctx.args.spacecraft_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("links", AAZListType, ".links")
                properties.set_prop("noradId", AAZStrType, ".norad_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("titleLine", AAZStrType, ".title_line")
                properties.set_prop("tleLine1", AAZStrType, ".tle_line1")
                properties.set_prop("tleLine2", AAZStrType, ".tle_line2")

            links = _builder.get(".properties.links")
            if links is not None:
                links.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.links[]")
            if _elements is not None:
                _elements.set_prop("bandwidthMHz", AAZFloatType, ".bandwidth_m_hz", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("centerFrequencyMHz", AAZFloatType, ".center_frequency_m_hz", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("polarization", AAZStrType, ".polarization", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.links = AAZListType()
            properties.norad_id = AAZStrType(
                serialized_name="noradId",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.title_line = AAZStrType(
                serialized_name="titleLine",
            )
            properties.tle_line1 = AAZStrType(
                serialized_name="tleLine1",
            )
            properties.tle_line2 = AAZStrType(
                serialized_name="tleLine2",
            )

            links = cls._schema_on_200_201.properties.links
            links.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.links.Element
            _element.authorizations = AAZListType(
                flags={"read_only": True},
            )
            _element.bandwidth_m_hz = AAZFloatType(
                serialized_name="bandwidthMHz",
                flags={"required": True},
            )
            _element.center_frequency_m_hz = AAZFloatType(
                serialized_name="centerFrequencyMHz",
                flags={"required": True},
            )
            _element.direction = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.polarization = AAZStrType(
                flags={"required": True},
            )

            authorizations = cls._schema_on_200_201.properties.links.Element.authorizations
            authorizations.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200_201.properties.links.Element.authorizations.Element
            _element.expiration_date = AAZStrType(
                serialized_name="expirationDate",
                flags={"read_only": True},
            )
            _element.ground_station = AAZStrType(
                serialized_name="groundStation",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


__all__ = ["Create"]
