# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "orbital contact-profile update",
)
class Update(AAZCommand):
    """Update contact profile.

    :example: Update Contact Profile tags
        az orbital contact-profile update --name <contact-profile-name> --resource-group <resource-group> --tags "{tag1:value1,tag2:value2}"
    """

    _aaz_info = {
        "version": "2022-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.orbital/contactprofiles/{}", "2022-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.contact_profile_name = AAZStrArg(
            options=["-n", "--name", "--contact-profile-name"],
            help="Contact Profile name.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The geo-location where the resource lives",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.auto_tracking_configuration = AAZStrArg(
            options=["--auto-tracking", "--auto-tracking-configuration"],
            arg_group="Properties",
            help="Auto-tracking configuration.",
            nullable=True,
            enum={"disabled": "disabled", "sBand": "sBand", "xBand": "xBand"},
        )
        _args_schema.event_hub_uri = AAZStrArg(
            options=["--event-hub-uri"],
            arg_group="Properties",
            help="ARM resource identifier of the Event Hub used for telemetry. Requires granting Orbital Resource Provider the rights to send telemetry into the hub.",
            nullable=True,
        )
        _args_schema.links = AAZListArg(
            options=["--links"],
            arg_group="Properties",
            help="Links of the Contact Profile. Describes RF links, modem processing, and IP endpoints.",
        )
        _args_schema.minimum_elevation_degrees = AAZFloatArg(
            options=["--min-elevation", "--minimum-elevation-degrees"],
            arg_group="Properties",
            help="Minimum viable elevation for the contact in decimal degrees. Used for listing the available contacts with a spacecraft at a given ground station.",
            nullable=True,
        )
        _args_schema.minimum_viable_contact_duration = AAZStrArg(
            options=["--min-viable-duration", "--minimum-viable-contact-duration"],
            arg_group="Properties",
            help="Minimum viable contact duration in ISO 8601 format. Used for listing the available contacts with a spacecraft at a given ground station.",
            nullable=True,
        )
        _args_schema.network_configuration = AAZObjectArg(
            options=["--network-configuration"],
            arg_group="Properties",
            help="Network configuration of customer virtual network.",
        )

        links = cls._args_schema.links
        links.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.links.Element
        _element.channels = AAZListArg(
            options=["channels"],
            help="Contact Profile Link Channel.",
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="Direction (uplink or downlink).",
            enum={"downlink": "downlink", "uplink": "uplink"},
        )
        _element.eirpd_bw = AAZFloatArg(
            options=["eirpd-bw"],
            help="Effective Isotropic Radiated Power (EIRP) in dBW. It is the required EIRP by the customer. Not used yet.",
            nullable=True,
        )
        _element.gain_over_temperature = AAZFloatArg(
            options=["gain-over-temperature"],
            help="Gain To Noise Temperature in db/K. It is the required G/T by the customer. Not used yet.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Link name.",
        )
        _element.polarization = AAZStrArg(
            options=["polarization"],
            help="Polarization. e.g. (RHCP, LHCP).",
            enum={"LHCP": "LHCP", "RHCP": "RHCP", "linearHorizontal": "linearHorizontal", "linearVertical": "linearVertical"},
        )

        channels = cls._args_schema.links.Element.channels
        channels.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.links.Element.channels.Element
        _element.bandwidth_m_hz = AAZFloatArg(
            options=["bandwidth-m-hz"],
            help="Bandwidth in MHz.",
        )
        _element.center_frequency_m_hz = AAZFloatArg(
            options=["center-frequency-m-hz"],
            help="Center Frequency in MHz.",
        )
        _element.decoding_configuration = AAZStrArg(
            options=["decoding-configuration"],
            help="Currently unused.",
            nullable=True,
        )
        _element.demodulation_configuration = AAZStrArg(
            options=["demodulation-configuration"],
            help="Copy of the modem configuration file such as Kratos QRadio or Kratos QuantumRx. Only valid for downlink directions. If provided, the modem connects to the customer endpoint and sends demodulated data instead of a VITA.49 stream.",
            nullable=True,
        )
        _element.encoding_configuration = AAZStrArg(
            options=["encoding-configuration"],
            help="Currently unused.",
            nullable=True,
        )
        _element.end_point = AAZObjectArg(
            options=["end-point"],
            help="Customer End point to store/retrieve data during a contact.",
        )
        _element.modulation_configuration = AAZStrArg(
            options=["modulation-configuration"],
            help="Copy of the modem configuration file such as Kratos QRadio. Only valid for uplink directions. If provided, the modem connects to the customer endpoint and accepts commands from the customer instead of a VITA.49 stream.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Channel name.",
        )

        end_point = cls._args_schema.links.Element.channels.Element.end_point
        end_point.end_point_name = AAZStrArg(
            options=["end-point-name"],
            help="Name of an end point.",
        )
        end_point.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP Address.",
        )
        end_point.port = AAZStrArg(
            options=["port"],
            help="TCP port to listen on to receive data.",
        )
        end_point.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol either UDP or TCP.",
            enum={"TCP": "TCP", "UDP": "UDP"},
        )

        network_configuration = cls._args_schema.network_configuration
        network_configuration.subnet_id = AAZStrArg(
            options=["subnet-id"],
            help="ARM resource identifier of the subnet delegated to the Microsoft.Orbital/orbitalGateways. Needs to be at least a class C subnet, and should not have any IP created in it.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.ContactProfilesGet(ctx=self.ctx)()
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        yield self.ContactProfilesCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ContactProfilesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "contactProfileName", self.ctx.args.contact_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_contact_profile_read(cls._schema_on_200)

            return cls._schema_on_200

    class ContactProfilesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Orbital/contactProfiles/{contactProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "contactProfileName", self.ctx.args.contact_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _build_schema_contact_profile_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("autoTrackingConfiguration", AAZStrType, ".auto_tracking_configuration")
                properties.set_prop("eventHubUri", AAZStrType, ".event_hub_uri")
                properties.set_prop("links", AAZListType, ".links", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("minimumElevationDegrees", AAZFloatType, ".minimum_elevation_degrees")
                properties.set_prop("minimumViableContactDuration", AAZStrType, ".minimum_viable_contact_duration")
                properties.set_prop("networkConfiguration", AAZObjectType, ".network_configuration", typ_kwargs={"flags": {"required": True}})

            links = _builder.get(".properties.links")
            if links is not None:
                links.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.links[]")
            if _elements is not None:
                _elements.set_prop("channels", AAZListType, ".channels", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("eirpdBW", AAZFloatType, ".eirpd_bw")
                _elements.set_prop("gainOverTemperature", AAZFloatType, ".gain_over_temperature")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("polarization", AAZStrType, ".polarization", typ_kwargs={"flags": {"required": True}})

            channels = _builder.get(".properties.links[].channels")
            if channels is not None:
                channels.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.links[].channels[]")
            if _elements is not None:
                _elements.set_prop("bandwidthMHz", AAZFloatType, ".bandwidth_m_hz", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("centerFrequencyMHz", AAZFloatType, ".center_frequency_m_hz", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("decodingConfiguration", AAZStrType, ".decoding_configuration")
                _elements.set_prop("demodulationConfiguration", AAZStrType, ".demodulation_configuration")
                _elements.set_prop("encodingConfiguration", AAZStrType, ".encoding_configuration")
                _elements.set_prop("endPoint", AAZObjectType, ".end_point", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("modulationConfiguration", AAZStrType, ".modulation_configuration")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            end_point = _builder.get(".properties.links[].channels[].endPoint")
            if end_point is not None:
                end_point.set_prop("endPointName", AAZStrType, ".end_point_name", typ_kwargs={"flags": {"required": True}})
                end_point.set_prop("ipAddress", AAZStrType, ".ip_address", typ_kwargs={"flags": {"required": True}})
                end_point.set_prop("port", AAZStrType, ".port", typ_kwargs={"flags": {"required": True}})
                end_point.set_prop("protocol", AAZStrType, ".protocol", typ_kwargs={"flags": {"required": True}})

            network_configuration = _builder.get(".properties.networkConfiguration")
            if network_configuration is not None:
                network_configuration.set_prop("subnetId", AAZStrType, ".subnet_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


_schema_contact_profile_read = None


def _build_schema_contact_profile_read(_schema):
    global _schema_contact_profile_read
    if _schema_contact_profile_read is not None:
        _schema.etag = _schema_contact_profile_read.etag
        _schema.id = _schema_contact_profile_read.id
        _schema.location = _schema_contact_profile_read.location
        _schema.name = _schema_contact_profile_read.name
        _schema.properties = _schema_contact_profile_read.properties
        _schema.system_data = _schema_contact_profile_read.system_data
        _schema.tags = _schema_contact_profile_read.tags
        _schema.type = _schema_contact_profile_read.type
        return

    _schema_contact_profile_read = AAZObjectType()

    contact_profile_read = _schema_contact_profile_read
    contact_profile_read.etag = AAZStrType(
        flags={"read_only": True},
    )
    contact_profile_read.id = AAZStrType(
        flags={"read_only": True},
    )
    contact_profile_read.location = AAZStrType(
        flags={"required": True},
    )
    contact_profile_read.name = AAZStrType(
        flags={"read_only": True},
    )
    contact_profile_read.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    contact_profile_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"read_only": True},
    )
    contact_profile_read.tags = AAZDictType()
    contact_profile_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_contact_profile_read.properties
    properties.auto_tracking_configuration = AAZStrType(
        serialized_name="autoTrackingConfiguration",
    )
    properties.event_hub_uri = AAZStrType(
        serialized_name="eventHubUri",
    )
    properties.links = AAZListType(
        flags={"required": True},
    )
    properties.minimum_elevation_degrees = AAZFloatType(
        serialized_name="minimumElevationDegrees",
    )
    properties.minimum_viable_contact_duration = AAZStrType(
        serialized_name="minimumViableContactDuration",
    )
    properties.network_configuration = AAZObjectType(
        serialized_name="networkConfiguration",
        flags={"required": True},
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )

    links = _schema_contact_profile_read.properties.links
    links.Element = AAZObjectType()

    _element = _schema_contact_profile_read.properties.links.Element
    _element.channels = AAZListType(
        flags={"required": True},
    )
    _element.direction = AAZStrType(
        flags={"required": True},
    )
    _element.eirpd_bw = AAZFloatType(
        serialized_name="eirpdBW",
    )
    _element.gain_over_temperature = AAZFloatType(
        serialized_name="gainOverTemperature",
    )
    _element.name = AAZStrType(
        flags={"required": True},
    )
    _element.polarization = AAZStrType(
        flags={"required": True},
    )

    channels = _schema_contact_profile_read.properties.links.Element.channels
    channels.Element = AAZObjectType()

    _element = _schema_contact_profile_read.properties.links.Element.channels.Element
    _element.bandwidth_m_hz = AAZFloatType(
        serialized_name="bandwidthMHz",
        flags={"required": True},
    )
    _element.center_frequency_m_hz = AAZFloatType(
        serialized_name="centerFrequencyMHz",
        flags={"required": True},
    )
    _element.decoding_configuration = AAZStrType(
        serialized_name="decodingConfiguration",
    )
    _element.demodulation_configuration = AAZStrType(
        serialized_name="demodulationConfiguration",
    )
    _element.encoding_configuration = AAZStrType(
        serialized_name="encodingConfiguration",
    )
    _element.end_point = AAZObjectType(
        serialized_name="endPoint",
        flags={"required": True},
    )
    _element.modulation_configuration = AAZStrType(
        serialized_name="modulationConfiguration",
    )
    _element.name = AAZStrType(
        flags={"required": True},
    )

    end_point = _schema_contact_profile_read.properties.links.Element.channels.Element.end_point
    end_point.end_point_name = AAZStrType(
        serialized_name="endPointName",
        flags={"required": True},
    )
    end_point.ip_address = AAZStrType(
        serialized_name="ipAddress",
        flags={"required": True},
    )
    end_point.port = AAZStrType(
        flags={"required": True},
    )
    end_point.protocol = AAZStrType(
        flags={"required": True},
    )

    network_configuration = _schema_contact_profile_read.properties.network_configuration
    network_configuration.subnet_id = AAZStrType(
        serialized_name="subnetId",
        flags={"required": True},
    )

    system_data = _schema_contact_profile_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
        flags={"read_only": True},
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
        flags={"read_only": True},
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
        flags={"read_only": True},
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
        flags={"read_only": True},
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
        flags={"read_only": True},
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
        flags={"read_only": True},
    )

    tags = _schema_contact_profile_read.tags
    tags.Element = AAZStrType()

    _schema.etag = _schema_contact_profile_read.etag
    _schema.id = _schema_contact_profile_read.id
    _schema.location = _schema_contact_profile_read.location
    _schema.name = _schema_contact_profile_read.name
    _schema.properties = _schema_contact_profile_read.properties
    _schema.system_data = _schema_contact_profile_read.system_data
    _schema.tags = _schema_contact_profile_read.tags
    _schema.type = _schema_contact_profile_read.type


__all__ = ["Update"]
