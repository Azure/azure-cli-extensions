# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Generic, List, Optional, TypeVar, Union
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ForecastOperations:
    """ForecastOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.mgmt.costmanagement.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def usage(
        self,
        scope: str,
        type: Union[str, "models.ForecastType"],
        timeframe: Union[str, "models.ForecastTimeframeType"],
        filter: Optional[str] = None,
        time_period: Optional["models.QueryTimePeriod"] = None,
        include_actual_cost: Optional[bool] = None,
        include_fresh_partial_cost: Optional[bool] = None,
        configuration: Optional["models.QueryDatasetConfiguration"] = None,
        aggregation: Optional[Dict[str, "QueryAggregation"]] = None,
        grouping: Optional[List["QueryGrouping"]] = None,
        query_filter: Optional["models.QueryFilter"] = None,
        **kwargs
    ) -> "models.QueryResult":
        """Lists the forecast charges for scope defined.

        :param scope: The scope associated with forecast operations. This includes
         '/subscriptions/{subscriptionId}/' for subscription scope,
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
         for Department scope,
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
         for EnrollmentAccount scope,
         '/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group
         scope,
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
         for billingProfile scope,
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
         for invoiceSection scope, and
         '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}'
         specific for partners.
        :type scope: str
        :param type: The type of the forecast.
        :type type: str or ~azure.mgmt.costmanagement.models.ForecastType
        :param timeframe: The time frame for pulling data for the forecast. If custom, then a specific
         time period must be provided.
        :type timeframe: str or ~azure.mgmt.costmanagement.models.ForecastTimeframeType
        :param filter: May be used to filter forecasts by properties/usageDate (Utc time),
         properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge',
         and 'and'. It does not currently support 'ne', 'or', or 'not'.
        :type filter: str
        :param time_period: Has time period for pulling data for the forecast.
        :type time_period: ~azure.mgmt.costmanagement.models.QueryTimePeriod
        :param include_actual_cost: a boolean determining if actualCost will be included.
        :type include_actual_cost: bool
        :param include_fresh_partial_cost: a boolean determining if FreshPartialCost will be included.
        :type include_fresh_partial_cost: bool
        :param configuration: Has configuration information for the data in the export. The
         configuration will be ignored if aggregation and grouping are provided.
        :type configuration: ~azure.mgmt.costmanagement.models.QueryDatasetConfiguration
        :param aggregation: Dictionary of aggregation expression to use in the query. The key of each
         item in the dictionary is the alias for the aggregated column. Query can have up to 2
         aggregation clauses.
        :type aggregation: dict[str, ~azure.mgmt.costmanagement.models.QueryAggregation]
        :param grouping: Array of group by expression to use in the query. Query can have up to 2 group
         by clauses.
        :type grouping: list[~azure.mgmt.costmanagement.models.QueryGrouping]
        :param query_filter: Has filter expression to use in the query.
        :type query_filter: ~azure.mgmt.costmanagement.models.QueryFilter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryResult or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.QueryResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.QueryResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})

        _parameters = models.ForecastDefinition(type=type, timeframe=timeframe, time_period=time_period, include_actual_cost=include_actual_cost, include_fresh_partial_cost=include_fresh_partial_cost, configuration=configuration, aggregation=aggregation, grouping=grouping, filter=query_filter)
        api_version = "2019-11-01"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.usage.metadata['url']
        path_format_arguments = {
            'scope': self._serialize.url("scope", scope, 'str', skip_quote=True),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_parameters, 'ForecastDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('QueryResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    usage.metadata = {'url': '/{scope}/providers/Microsoft.CostManagement/forecast'}

    async def external_cloud_provider_usage(
        self,
        external_cloud_provider_type: Union[str, "models.ExternalCloudProviderType"],
        external_cloud_provider_id: str,
        type: Union[str, "models.ForecastType"],
        timeframe: Union[str, "models.ForecastTimeframeType"],
        filter: Optional[str] = None,
        time_period: Optional["models.QueryTimePeriod"] = None,
        include_actual_cost: Optional[bool] = None,
        include_fresh_partial_cost: Optional[bool] = None,
        configuration: Optional["models.QueryDatasetConfiguration"] = None,
        aggregation: Optional[Dict[str, "QueryAggregation"]] = None,
        grouping: Optional[List["QueryGrouping"]] = None,
        query_filter: Optional["models.QueryFilter"] = None,
        **kwargs
    ) -> "models.QueryResult":
        """Lists the forecast charges for external cloud provider type defined.

        :param external_cloud_provider_type: The external cloud provider type associated with
         dimension/query operations. This includes 'externalSubscriptions' for linked account and
         'externalBillingAccounts' for consolidated account.
        :type external_cloud_provider_type: str or ~azure.mgmt.costmanagement.models.ExternalCloudProviderType
        :param external_cloud_provider_id: This can be '{externalSubscriptionId}' for linked account or
         '{externalBillingAccountId}' for consolidated account used with dimension/query operations.
        :type external_cloud_provider_id: str
        :param type: The type of the forecast.
        :type type: str or ~azure.mgmt.costmanagement.models.ForecastType
        :param timeframe: The time frame for pulling data for the forecast. If custom, then a specific
         time period must be provided.
        :type timeframe: str or ~azure.mgmt.costmanagement.models.ForecastTimeframeType
        :param filter: May be used to filter forecasts by properties/usageDate (Utc time),
         properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge',
         and 'and'. It does not currently support 'ne', 'or', or 'not'.
        :type filter: str
        :param time_period: Has time period for pulling data for the forecast.
        :type time_period: ~azure.mgmt.costmanagement.models.QueryTimePeriod
        :param include_actual_cost: a boolean determining if actualCost will be included.
        :type include_actual_cost: bool
        :param include_fresh_partial_cost: a boolean determining if FreshPartialCost will be included.
        :type include_fresh_partial_cost: bool
        :param configuration: Has configuration information for the data in the export. The
         configuration will be ignored if aggregation and grouping are provided.
        :type configuration: ~azure.mgmt.costmanagement.models.QueryDatasetConfiguration
        :param aggregation: Dictionary of aggregation expression to use in the query. The key of each
         item in the dictionary is the alias for the aggregated column. Query can have up to 2
         aggregation clauses.
        :type aggregation: dict[str, ~azure.mgmt.costmanagement.models.QueryAggregation]
        :param grouping: Array of group by expression to use in the query. Query can have up to 2 group
         by clauses.
        :type grouping: list[~azure.mgmt.costmanagement.models.QueryGrouping]
        :param query_filter: Has filter expression to use in the query.
        :type query_filter: ~azure.mgmt.costmanagement.models.QueryFilter
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: QueryResult or the result of cls(response)
        :rtype: ~azure.mgmt.costmanagement.models.QueryResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.QueryResult"]
        error_map = kwargs.pop('error_map', {404: ResourceNotFoundError, 409: ResourceExistsError})

        _parameters = models.ForecastDefinition(type=type, timeframe=timeframe, time_period=time_period, include_actual_cost=include_actual_cost, include_fresh_partial_cost=include_fresh_partial_cost, configuration=configuration, aggregation=aggregation, grouping=grouping, filter=query_filter)
        api_version = "2019-11-01"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.external_cloud_provider_usage.metadata['url']
        path_format_arguments = {
            'externalCloudProviderType': self._serialize.url("external_cloud_provider_type", external_cloud_provider_type, 'str'),
            'externalCloudProviderId': self._serialize.url("external_cloud_provider_id", external_cloud_provider_id, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        if filter is not None:
            query_parameters['$filter'] = self._serialize.query("filter", filter, 'str')
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        # Construct and send request
        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_parameters, 'ForecastDefinition')
        body_content_kwargs['content'] = body_content
        request = self._client.post(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('QueryResult', pipeline_response)

        if cls:
          return cls(pipeline_response, deserialized, {})

        return deserialized
    external_cloud_provider_usage.metadata = {'url': '/providers/Microsoft.CostManagement/{externalCloudProviderType}/{externalCloudProviderId}/forecast'}
