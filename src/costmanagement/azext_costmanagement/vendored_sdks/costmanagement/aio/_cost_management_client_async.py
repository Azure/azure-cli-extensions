# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration_async import CostManagementClientConfiguration
from .operations_async import ViewOperations
from .operations_async import AlertOperations
from .operations_async import ForecastOperations
from .operations_async import DimensionOperations
from .operations_async import QueryOperations
from .operations_async import OperationOperations
from .operations_async import ExportOperations
from .. import models


class CostManagementClient(object):
    """CostManagementClient.

    :ivar view: ViewOperations operations
    :vartype view: cost_management_client.aio.operations_async.ViewOperations
    :ivar alert: AlertOperations operations
    :vartype alert: cost_management_client.aio.operations_async.AlertOperations
    :ivar forecast: ForecastOperations operations
    :vartype forecast: cost_management_client.aio.operations_async.ForecastOperations
    :ivar dimension: DimensionOperations operations
    :vartype dimension: cost_management_client.aio.operations_async.DimensionOperations
    :ivar query: QueryOperations operations
    :vartype query: cost_management_client.aio.operations_async.QueryOperations
    :ivar operation: OperationOperations operations
    :vartype operation: cost_management_client.aio.operations_async.OperationOperations
    :ivar export: ExportOperations operations
    :vartype export: cost_management_client.aio.operations_async.ExportOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = CostManagementClientConfiguration(credential, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.view = ViewOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.alert = AlertOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.forecast = ForecastOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.dimension = DimensionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.query = QueryOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.export = ExportOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "CostManagementClient":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
