# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type
)
from azext_costmanagement.action import (
    AddTimePeriod,
    AddDatasetConfiguration,
    AddDatasetGrouping,
    AddDeliveryInfoDestination,
    AddScheduleRecurrencePeriod
)


def load_arguments(self, _):

    with self.argument_context('costmanagement dimension list') as c:
        c.argument('scope', help='The scope associated with dimension operations. This includes \'/subscriptions/{subsc'
                   'riptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGro'
                   'upName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId'
                   '}\' for Billing Account scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/de'
                   'partments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAccounts/{bi'
                   'llingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, \'/provider'
                   's/Microsoft.Management/managementGroups/{managementGroupId}\' for Management Group scope, \'/provid'
                   'ers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}\' for b'
                   'illingProfile scope, \'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfil'
                   'es/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and \'provider'
                   's/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific for partne'
                   'rs.')
        c.argument('filter', help='May be used to filter dimensions by properties/category, properties/usageStart, prop'
                   'erties/usageEnd. Supported operators are \'eq\',\'lt\', \'gt\', \'le\', \'ge\'.')
        c.argument('expand', help='May be used to expand the properties/data within a dimension category. By default, d'
                   'ata is not included when listing dimensions.')
        c.argument('skiptoken', help='Skiptoken is only used if a previous operation returned a partial result. If a pr'
                   'evious response contains a nextLink element, the value of the nextLink element will include a skipt'
                   'oken parameter that specifies a starting point to use for subsequent calls.')
        c.argument('top', help='May be used to limit the number of results to the most recent N dimension data.')

    with self.argument_context('costmanagement dimension by-external-cloud-provider-type') as c:
        c.argument('external_cloud_provider_type', arg_type=get_enum_type(['externalSubscriptions', 'externalBillingAcc'
                   'ounts']), help='The external cloud provider type associated with dimension/query operations. This i'
                   'ncludes \'externalSubscriptions\' for linked account and \'externalBillingAccounts\' for consolidat'
                   'ed account.')
        c.argument('external_cloud_provider_id', help='This can be \'{externalSubscriptionId}\' for linked account or '
                   '\'{externalBillingAccountId}\' for consolidated account used with dimension/query operations.')
        c.argument('filter', help='May be used to filter dimensions by properties/category, properties/usageStart, prop'
                   'erties/usageEnd. Supported operators are \'eq\',\'lt\', \'gt\', \'le\', \'ge\'.')
        c.argument('expand', help='May be used to expand the properties/data within a dimension category. By default, d'
                   'ata is not included when listing dimensions.')
        c.argument('skiptoken', help='Skiptoken is only used if a previous operation returned a partial result. If a pr'
                   'evious response contains a nextLink element, the value of the nextLink element will include a skipt'
                   'oken parameter that specifies a starting point to use for subsequent calls.')
        c.argument('top', help='May be used to limit the number of results to the most recent N dimension data.')

    with self.argument_context('costmanagement alert list') as c:
        c.argument('scope', help='The scope associated with alerts operations. This includes \'/subscriptions/{subscrip'
                   'tionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupN'
                   'ame}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}\''
                   ' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/de'
                   'partments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAccounts/{bi'
                   'llingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, \'/provider'
                   's/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, \'/provider'
                   's/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}\' for bil'
                   'lingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfile'
                   's/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and \'/provider'
                   's/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific for partne'
                   'rs.')

    with self.argument_context('costmanagement alert list-external') as c:
        c.argument('external_cloud_provider_type', arg_type=get_enum_type(['externalSubscriptions', 'externalBillingAcc'
                   'ounts']), help='The external cloud provider type associated with dimension/query operations. This i'
                   'ncludes \'externalSubscriptions\' for linked account and \'externalBillingAccounts\' for consolidat'
                   'ed account.')
        c.argument('external_cloud_provider_id', help='This can be \'{externalSubscriptionId}\' for linked account or '
                   '\'{externalBillingAccountId}\' for consolidated account used with dimension/query operations.')

    with self.argument_context('costmanagement forecast external-cloud-provider-usage') as c:
        c.argument('filter', help='May be used to filter forecasts by properties/usageDate (Utc time), properties/charg'
                   'eType or properties/grain. The filter supports \'eq\', \'lt\', \'gt\', \'le\', \'ge\', and \'and\'.'
                   ' It does not currently support \'ne\', \'or\', or \'not\'.')
        c.argument('external_cloud_provider_type', arg_type=get_enum_type(['externalSubscriptions', 'externalBillingAcc'
                   'ounts']), help='The external cloud provider type associated with dimension/query operations. This i'
                   'ncludes \'externalSubscriptions\' for linked account and \'externalBillingAccounts\' for consolidat'
                   'ed account.')
        c.argument('external_cloud_provider_id', help='This can be \'{externalSubscriptionId}\' for linked account or '
                   '\'{externalBillingAccountId}\' for consolidated account used with dimension/query operations.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']),
                   help='The type of the forecast.')
        c.argument('timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth', 'TheLastBi'
                   'llingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the forecast. If c'
                   'ustom, then a specific time period must be provided.')
        c.argument('time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data for the forec'
                   'ast. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('include_actual_cost', arg_type=get_three_state_flag(), help='a boolean determining if actualCost wi'
                   'll be included')
        c.argument('include_fresh_partial_cost', arg_type=get_three_state_flag(), help='a boolean determining if FreshP'
                   'artialCost will be included')
        c.argument('dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configuration informat'
                   'ion for the data in the export. The configuration will be ignored if aggregation and grouping are p'
                   'rovided. Expect value: columns=xx.')
        c.argument('dataset_aggregation', arg_type=CLIArgumentType(options_list=['--dataset-aggregation'], help='Dictio'
                   'nary of aggregation expression to use in the query. The key of each item in the dictionary is the a'
                   'lias for the aggregated column. Query can have up to 2 aggregation clauses. Expected value: json-st'
                   'ring/@json-file.'))
        c.argument('dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by expression to use '
                   'in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , '
                   'available KEYs are: type, name.')
        c.argument('dataset_filter', arg_type=CLIArgumentType(options_list=['--dataset-filter'], help='Has filter expre'
                   'ssion to use in the query. Expected value: json-string/@json-file.'))

    with self.argument_context('costmanagement forecast usage') as c:
        c.argument('filter', help='May be used to filter forecasts by properties/usageDate (Utc time), properties/charg'
                   'eType or properties/grain. The filter supports \'eq\', \'lt\', \'gt\', \'le\', \'ge\', and \'and\'.'
                   ' It does not currently support \'ne\', \'or\', or \'not\'.')
        c.argument('scope', help='The scope associated with forecast operations. This includes \'/subscriptions/{subscr'
                   'iptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{resourceGrou'
                   'pName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}'
                   '\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/'
                   'departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAccounts/{'
                   'billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, \'/provid'
                   'ers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, \'/provid'
                   'ers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}\' for b'
                   'illingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfi'
                   'les/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and \'/provid'
                   'ers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific for part'
                   'ners.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']),
                   help='The type of the forecast.')
        c.argument('timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth', 'TheLastBi'
                   'llingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the forecast. If c'
                   'ustom, then a specific time period must be provided.')
        c.argument('time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data for the forec'
                   'ast. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('include_actual_cost', arg_type=get_three_state_flag(), help='a boolean determining if actualCost wi'
                   'll be included')
        c.argument('include_fresh_partial_cost', arg_type=get_three_state_flag(), help='a boolean determining if FreshP'
                   'artialCost will be included')
        c.argument('dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configuration informat'
                   'ion for the data in the export. The configuration will be ignored if aggregation and grouping are p'
                   'rovided. Expect value: columns=xx.')
        c.argument('dataset_aggregation', arg_type=CLIArgumentType(options_list=['--dataset-aggregation'], help='Dictio'
                   'nary of aggregation expression to use in the query. The key of each item in the dictionary is the a'
                   'lias for the aggregated column. Query can have up to 2 aggregation clauses. Expected value: json-st'
                   'ring/@json-file.'))
        c.argument('dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by expression to use '
                   'in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , '
                   'available KEYs are: type, name.')
        c.argument('dataset_filter', arg_type=CLIArgumentType(options_list=['--dataset-filter'], help='Has filter expre'
                   'ssion to use in the query. Expected value: json-string/@json-file.'))

    with self.argument_context('costmanagement query usage') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']),
                   help='The type of the query.')
        c.argument('timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth', 'TheLastBi'
                   'llingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the query. If cust'
                   'om, then a specific time period must be provided.')
        c.argument('time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data for the query'
                   '. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configuration informat'
                   'ion for the data in the export. The configuration will be ignored if aggregation and grouping are p'
                   'rovided. Expect value: columns=xx.')
        c.argument('dataset_aggregation', arg_type=CLIArgumentType(options_list=['--dataset-aggregation'], help='Dictio'
                   'nary of aggregation expression to use in the query. The key of each item in the dictionary is the a'
                   'lias for the aggregated column. Query can have up to 2 aggregation clauses. Expected value: json-st'
                   'ring/@json-file.'))
        c.argument('dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by expression to use '
                   'in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , '
                   'available KEYs are: type, name.')
        c.argument('dataset_filter', arg_type=CLIArgumentType(options_list=['--dataset-filter'], help='Has filter expre'
                   'ssion to use in the query. Expected value: json-string/@json-file.'))

    with self.argument_context('costmanagement query usage-by-external-cloud-provider-type') as c:
        c.argument('external_cloud_provider_type', arg_type=get_enum_type(['externalSubscriptions', 'externalBillingAcc'
                   'ounts']), help='The external cloud provider type associated with dimension/query operations. This i'
                   'ncludes \'externalSubscriptions\' for linked account and \'externalBillingAccounts\' for consolidat'
                   'ed account.')
        c.argument('external_cloud_provider_id', help='This can be \'{externalSubscriptionId}\' for linked account or '
                   '\'{externalBillingAccountId}\' for consolidated account used with dimension/query operations.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']),
                   help='The type of the query.')
        c.argument('timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth', 'TheLastBi'
                   'llingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the query. If cust'
                   'om, then a specific time period must be provided.')
        c.argument('time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data for the query'
                   '. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configuration informat'
                   'ion for the data in the export. The configuration will be ignored if aggregation and grouping are p'
                   'rovided. Expect value: columns=xx.')
        c.argument('dataset_aggregation', arg_type=CLIArgumentType(options_list=['--dataset-aggregation'], help='Dictio'
                   'nary of aggregation expression to use in the query. The key of each item in the dictionary is the a'
                   'lias for the aggregated column. Query can have up to 2 aggregation clauses. Expected value: json-st'
                   'ring/@json-file.'))
        c.argument('dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by expression to use '
                   'in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , '
                   'available KEYs are: type, name.')
        c.argument('dataset_filter', arg_type=CLIArgumentType(options_list=['--dataset-filter'], help='Has filter expre'
                   'ssion to use in the query. Expected value: json-string/@json-file.'))

    with self.argument_context('costmanagement export list') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')

    with self.argument_context('costmanagement export show') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('export_name', help='Export Name.')

    with self.argument_context('costmanagement export create') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('export_name', help='Export Name.')
        c.argument('definition_type', arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']), help='The type '
                   'of the query.')
        c.argument('definition_timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
                    'TheLastBillingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the quer'
                   'y. If custom, then a specific time period must be provided.')
        c.argument('definition_time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data fo'
                   'r the query. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('definition_dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configurati'
                   'on information for the data in the export. The configuration will be ignored if aggregation and gro'
                   'uping are provided. Expect value: columns=xx.')
        c.argument('definition_dataset_aggregation', arg_type=CLIArgumentType(options_list=['--definition-dataset-aggre'
                   'gation'], help='Dictionary of aggregation expression to use in the query. The key of each item in t'
                   'he dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses. E'
                   'xpected value: json-string/@json-file.'))
        c.argument('definition_dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by express'
                   'ion to use in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VA'
                   'LUE2 ... , available KEYs are: type, name.')
        c.argument('definition_dataset_filter', arg_type=CLIArgumentType(options_list=['--definition-dataset-filter'],
                   help='Has filter expression to use in the query. Expected value: json-string/@json-file.'))
        c.argument('delivery_info_destination', action=AddDeliveryInfoDestination, nargs='+', help='Has destination for'
                   ' the export being delivered. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: resour'
                   'ce-id, container, root-folder-path.')
        c.argument('schedule_status', arg_type=get_enum_type(['Active', 'Inactive']), help='The status of the schedule.'
                   ' Whether active or not. If inactive, the export\'s scheduled execution is paused.')
        c.argument('schedule_recurrence', arg_type=get_enum_type(['Daily', 'Weekly', 'Monthly', 'Annually']), help='The'
                   ' schedule recurrence.')
        c.argument('schedule_recurrence_period', action=AddScheduleRecurrencePeriod, nargs='+', help='Has start and end'
                   ' date of the recurrence. The start date must be in future. If present, the end date must be greater'
                   ' than start date. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')

    with self.argument_context('costmanagement export update') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('export_name', help='Export Name.')
        c.argument('definition_type', arg_type=get_enum_type(['Usage', 'ActualCost', 'AmortizedCost']), help='The type '
                   'of the query.')
        c.argument('definition_timeframe', arg_type=get_enum_type(['MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
                    'TheLastBillingMonth', 'WeekToDate', 'Custom']), help='The time frame for pulling data for the quer'
                   'y. If custom, then a specific time period must be provided.')
        c.argument('definition_time_period', action=AddTimePeriod, nargs='+', help='Has time period for pulling data fo'
                   'r the query. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')
        c.argument('definition_dataset_configuration', action=AddDatasetConfiguration, nargs='+', help='Has configurati'
                   'on information for the data in the export. The configuration will be ignored if aggregation and gro'
                   'uping are provided. Expect value: columns=xx.')
        c.argument('definition_dataset_aggregation', arg_type=CLIArgumentType(options_list=['--definition-dataset-aggre'
                   'gation'], help='Dictionary of aggregation expression to use in the query. The key of each item in t'
                   'he dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses. E'
                   'xpected value: json-string/@json-file.'))
        c.argument('definition_dataset_grouping', action=AddDatasetGrouping, nargs='+', help='Array of group by express'
                   'ion to use in the query. Query can have up to 2 group by clauses. Expect value: KEY1=VALUE1 KEY2=VA'
                   'LUE2 ... , available KEYs are: type, name.')
        c.argument('definition_dataset_filter', arg_type=CLIArgumentType(options_list=['--definition-dataset-filter'],
                   help='Has filter expression to use in the query. Expected value: json-string/@json-file.'))
        c.argument('delivery_info_destination', action=AddDeliveryInfoDestination, nargs='+', help='Has destination for'
                   ' the export being delivered. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: resour'
                   'ce-id, container, root-folder-path.')
        c.argument('schedule_status', arg_type=get_enum_type(['Active', 'Inactive']), help='The status of the schedule.'
                   ' Whether active or not. If inactive, the export\'s scheduled execution is paused.')
        c.argument('schedule_recurrence', arg_type=get_enum_type(['Daily', 'Weekly', 'Monthly', 'Annually']), help='The'
                   ' schedule recurrence.')
        c.argument('schedule_recurrence_period', action=AddScheduleRecurrencePeriod, nargs='+', help='Has start and end'
                   ' date of the recurrence. The start date must be in future. If present, the end date must be greater'
                   ' than start date. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: from, to.')

    with self.argument_context('costmanagement export delete') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('export_name', help='Export Name.')

    with self.argument_context('costmanagement export execute') as c:
        c.argument('scope', help='The scope associated with query and export operations. This includes \'/subscriptions'
                   '/{subscriptionId}/\' for subscription scope, \'/subscriptions/{subscriptionId}/resourceGroups/{reso'
                   'urceGroupName}\' for resourceGroup scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAc'
                   'countId}\' for Billing Account scope and \'/providers/Microsoft.Billing/billingAccounts/{billingAcc'
                   'ountId}/departments/{departmentId}\' for Department scope, \'/providers/Microsoft.Billing/billingAc'
                   'counts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}\' for EnrollmentAccount scope, '
                   '\'/providers/Microsoft.Management/managementGroups/{managementGroupId} for Management Group scope, '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId'
                   '}\' for billingProfile scope, \'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/bil'
                   'lingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}\' for invoiceSection scope, and '
                   '\'/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}\' specific'
                   ' for partners.')
        c.argument('export_name', help='Export Name.')
