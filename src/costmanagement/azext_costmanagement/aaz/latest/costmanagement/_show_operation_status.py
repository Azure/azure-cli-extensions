# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "costmanagement show-operation-status",
)
class ShowOperationStatus(AAZCommand):
    """Get the status of the specified operation. This link is provided in the GenerateDetailedCostReport creation request response header.
    """

    _aaz_info = {
        "version": "2023-08-01",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.costmanagement/operationstatus/{}", "2023-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.operation_id = AAZStrArg(
            options=["--operation-id"],
            help="The target operation Id.",
            required=True,
        )
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="The ARM Resource ID for subscription, resource group, billing account, or other billing scopes. For details, see https://aka.ms/costmgmt/scopes.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GenerateDetailedCostReportOperationStatusGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GenerateDetailedCostReportOperationStatusGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.CostManagement/operationStatus/{operationId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "operationId", self.ctx.args.operation_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.end_time = AAZStrType(
                serialized_name="endTime",
            )
            _schema_on_200.error = AAZObjectType()
            _ShowOperationStatusHelper._build_schema_error_details_read(_schema_on_200.error)
            _schema_on_200.id = AAZStrType()
            _schema_on_200.name = AAZStrType()
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.start_time = AAZStrType(
                serialized_name="startTime",
            )
            _schema_on_200.status = AAZObjectType()
            _schema_on_200.type = AAZStrType()

            properties = cls._schema_on_200.properties
            properties.download_url = AAZStrType(
                serialized_name="downloadUrl",
            )
            properties.expiry_time = AAZStrType(
                serialized_name="expiryTime",
                flags={"read_only": True},
            )
            properties.valid_till = AAZStrType(
                serialized_name="validTill",
            )

            status = cls._schema_on_200.status
            status.status = AAZStrType()

            return cls._schema_on_200


class _ShowOperationStatusHelper:
    """Helper class for ShowOperationStatus"""

    _schema_error_details_read = None

    @classmethod
    def _build_schema_error_details_read(cls, _schema):
        if cls._schema_error_details_read is not None:
            _schema.code = cls._schema_error_details_read.code
            _schema.message = cls._schema_error_details_read.message
            return

        cls._schema_error_details_read = _schema_error_details_read = AAZObjectType()

        error_details_read = _schema_error_details_read
        error_details_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_details_read.message = AAZStrType(
            flags={"read_only": True},
        )

        _schema.code = cls._schema_error_details_read.code
        _schema.message = cls._schema_error_details_read.message


__all__ = ["ShowOperationStatus"]
