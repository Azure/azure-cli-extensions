# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "costmanagement markup-rule create",
)
class Create(AAZCommand):
    """Create a markup rule
    """

    _aaz_info = {
        "version": "2022-10-05-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/billingaccounts/{}/billingprofiles/{}/providers/microsoft.costmanagement/markuprules/{}", "2022-10-05-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.billing_account_id = AAZStrArg(
            options=["--billing-account-id"],
            help="BillingAccount ID",
            required=True,
        )
        _args_schema.billing_profile_id = AAZStrArg(
            options=["--billing-profile-id"],
            help="BillingProfile ID",
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["--name"],
            help="Markup rule name.",
            required=True,
        )

        # define Arg Group "MarkupRule"

        _args_schema = cls._args_schema
        _args_schema.e_tag = AAZStrArg(
            options=["--e-tag"],
            arg_group="MarkupRule",
            help="eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.customer_details = AAZObjectArg(
            options=["--customer-details"],
            arg_group="Properties",
            help="Customer information for the markup rule.",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="The description of the markup rule.",
        )
        _args_schema.end_date = AAZDateTimeArg(
            options=["--end-date"],
            arg_group="Properties",
            help="Ending date of the markup rule.",
        )
        _args_schema.percentage = AAZFloatArg(
            options=["--percentage"],
            arg_group="Properties",
            help="The markup percentage of the rule.",
        )
        _args_schema.start_date = AAZDateTimeArg(
            options=["--start-date"],
            arg_group="Properties",
            help="Starting date of the markup rule.",
        )

        customer_details = cls._args_schema.customer_details
        customer_details.billing_account_id = AAZStrArg(
            options=["billing-account-id"],
            help="Customer billing account id",
            required=True,
        )
        customer_details.billing_profile_id = AAZStrArg(
            options=["billing-profile-id"],
            help="Customer billing profile id",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MarkupRulesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MarkupRulesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/markupRules/{name}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "billingAccountId", self.ctx.args.billing_account_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "billingProfileId", self.ctx.args.billing_profile_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "name", self.ctx.args.name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-10-05-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("eTag", AAZStrType, ".e_tag")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("customerDetails", AAZObjectType, ".customer_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("endDate", AAZStrType, ".end_date")
                properties.set_prop("percentage", AAZFloatType, ".percentage", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("startDate", AAZStrType, ".start_date", typ_kwargs={"flags": {"required": True}})

            customer_details = _builder.get(".properties.customerDetails")
            if customer_details is not None:
                customer_details.set_prop("billingAccountId", AAZStrType, ".billing_account_id", typ_kwargs={"flags": {"required": True}})
                customer_details.set_prop("billingProfileId", AAZStrType, ".billing_profile_id", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.e_tag = AAZStrType(
                serialized_name="eTag",
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.customer_details = AAZObjectType(
                serialized_name="customerDetails",
                flags={"required": True},
            )
            properties.description = AAZStrType()
            properties.end_date = AAZStrType(
                serialized_name="endDate",
            )
            properties.percentage = AAZFloatType(
                flags={"required": True},
            )
            properties.start_date = AAZStrType(
                serialized_name="startDate",
                flags={"required": True},
            )

            customer_details = cls._schema_on_200_201.properties.customer_details
            customer_details.billing_account_id = AAZStrType(
                serialized_name="billingAccountId",
                flags={"required": True},
            )
            customer_details.billing_profile_id = AAZStrType(
                serialized_name="billingProfileId",
                flags={"required": True},
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
