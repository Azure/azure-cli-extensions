# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def fidalgo_admin_dev_center_list(client,
                                  resource_group_name=None,
                                  top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def fidalgo_admin_dev_center_show(client,
                                  resource_group_name,
                                  dev_center_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name)


def fidalgo_admin_dev_center_create(client,
                                    resource_group_name,
                                    dev_center_name,
                                    location,
                                    tags=None,
                                    type_=None,
                                    user_assigned_identities=None,
                                    no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       body=body)


def fidalgo_admin_dev_center_update(client,
                                    resource_group_name,
                                    dev_center_name,
                                    tags=None,
                                    location=None,
                                    type_=None,
                                    user_assigned_identities=None,
                                    no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    body['identity'] = {}
    if type_ is not None:
        body['identity']['type'] = type_
    if user_assigned_identities is not None:
        body['identity']['user_assigned_identities'] = user_assigned_identities
    if len(body['identity']) == 0:
        del body['identity']
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       body=body)


def fidalgo_admin_dev_center_delete(client,
                                    resource_group_name,
                                    dev_center_name,
                                    no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name)


def fidalgo_admin_project_list(client,
                               resource_group_name=None,
                               top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def fidalgo_admin_project_show(client,
                               resource_group_name,
                               project_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name)


def fidalgo_admin_project_create(client,
                                 resource_group_name,
                                 project_name,
                                 location,
                                 tags=None,
                                 dev_center_id=None,
                                 description=None,
                                 no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if dev_center_id is not None:
        body['dev_center_id'] = dev_center_id
    if description is not None:
        body['description'] = description
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       body=body)


def fidalgo_admin_project_update(client,
                                 resource_group_name,
                                 project_name,
                                 tags=None,
                                 location=None,
                                 dev_center_id=None,
                                 description=None,
                                 no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if dev_center_id is not None:
        body['dev_center_id'] = dev_center_id
    if description is not None:
        body['description'] = description
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       body=body)


def fidalgo_admin_project_delete(client,
                                 resource_group_name,
                                 project_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name)


def fidalgo_admin_environment_list(client,
                                   resource_group_name,
                                   project_name,
                                   top=None):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name,
                                  top=top)


def fidalgo_admin_environment_show(client,
                                   resource_group_name,
                                   project_name,
                                   environment_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      environment_name=environment_name)


def fidalgo_admin_environment_create(client,
                                     resource_group_name,
                                     project_name,
                                     environment_name,
                                     location,
                                     tags=None,
                                     description=None,
                                     catalog_item_name=None,
                                     template_uri=None,
                                     deployment_parameters=None,
                                     environment_type=None,
                                     no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if description is not None:
        body['description'] = description
    if catalog_item_name is not None:
        body['catalog_item_name'] = catalog_item_name
    if template_uri is not None:
        body['template_uri'] = template_uri
    if deployment_parameters is not None:
        body['deployment_parameters'] = deployment_parameters
    if environment_type is not None:
        body['environment_type'] = environment_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       environment_name=environment_name,
                       body=body)


def fidalgo_admin_environment_update(client,
                                     resource_group_name,
                                     project_name,
                                     environment_name,
                                     tags=None,
                                     location=None,
                                     description=None,
                                     catalog_item_name=None,
                                     template_uri=None,
                                     deployment_parameters=None,
                                     no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if description is not None:
        body['description'] = description
    if catalog_item_name is not None:
        body['catalog_item_name'] = catalog_item_name
    if template_uri is not None:
        body['template_uri'] = template_uri
    if deployment_parameters is not None:
        body['deployment_parameters'] = deployment_parameters
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       environment_name=environment_name,
                       body=body)


def fidalgo_admin_environment_delete(client,
                                     resource_group_name,
                                     project_name,
                                     environment_name,
                                     no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       environment_name=environment_name)


def fidalgo_admin_environment_deploy(client,
                                     resource_group_name,
                                     project_name,
                                     environment_name,
                                     parameters=None,
                                     no_wait=False):
    deployment = {}
    if parameters is not None:
        deployment['parameters'] = parameters
    return sdk_no_wait(no_wait,
                       client.begin_deploy,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       environment_name=environment_name,
                       deployment=deployment)


def fidalgo_admin_deployment_list(client,
                                  resource_group_name,
                                  project_name,
                                  environment_name,
                                  top=None):
    return client.list_by_environment(resource_group_name=resource_group_name,
                                      project_name=project_name,
                                      environment_name=environment_name,
                                      top=top)


def fidalgo_admin_environment_type_list(client,
                                        resource_group_name,
                                        project_name=None,
                                        top=None,
                                        dev_center_name=None):
    if resource_group_name and project_name is not None:
        return client.list_by_project(resource_group_name=resource_group_name,
                                      project_name=project_name,
                                      top=top)
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def fidalgo_admin_environment_type_show(client,
                                        resource_group_name,
                                        dev_center_name,
                                        environment_type_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      environment_type_name=environment_type_name)


def fidalgo_admin_environment_type_create(client,
                                          resource_group_name,
                                          dev_center_name,
                                          environment_type_name,
                                          tags=None,
                                          description=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if description is not None:
        body['description'] = description
    return client.create_or_update(resource_group_name=resource_group_name,
                                   dev_center_name=dev_center_name,
                                   environment_type_name=environment_type_name,
                                   body=body)


def fidalgo_admin_environment_type_update(client,
                                          resource_group_name,
                                          dev_center_name,
                                          environment_type_name,
                                          tags=None,
                                          description=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if description is not None:
        body['description'] = description
    return client.update(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         environment_type_name=environment_type_name,
                         body=body)


def fidalgo_admin_environment_type_delete(client,
                                          resource_group_name,
                                          dev_center_name,
                                          environment_type_name,
                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       environment_type_name=environment_type_name)


def fidalgo_admin_catalog_item_list(client,
                                    resource_group_name,
                                    dev_center_name=None,
                                    catalog_name=None,
                                    top=None,
                                    project_name=None):
    if resource_group_name and dev_center_name is not None and catalog_name is not None:
        return client.list_by_catalog(resource_group_name=resource_group_name,
                                      dev_center_name=dev_center_name,
                                      catalog_name=catalog_name,
                                      top=top)
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name,
                                  top=top)


def fidalgo_admin_catalog_item_show(client,
                                    resource_group_name,
                                    dev_center_name,
                                    catalog_name,
                                    catalog_item_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      catalog_name=catalog_name,
                      catalog_item_name=catalog_item_name)


def fidalgo_admin_catalog_item_create(client,
                                      resource_group_name,
                                      dev_center_name,
                                      catalog_name,
                                      catalog_item_name,
                                      description=None,
                                      template_path=None,
                                      parameters=None):
    body = {}
    if description is not None:
        body['description'] = description
    body['engine'] = {}
    body['engine']['type'] = "ARM"
    if template_path is not None:
        body['engine']['template_path'] = template_path
    if parameters is not None:
        body['engine']['parameters'] = parameters
    if len(body['engine']) == 0:
        del body['engine']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   dev_center_name=dev_center_name,
                                   catalog_name=catalog_name,
                                   catalog_item_name=catalog_item_name,
                                   body=body)


def fidalgo_admin_catalog_item_update(client,
                                      resource_group_name,
                                      dev_center_name,
                                      catalog_name,
                                      catalog_item_name,
                                      tags=None,
                                      description=None):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if description is not None:
        body['description'] = description
    return client.update(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         catalog_name=catalog_name,
                         catalog_item_name=catalog_item_name,
                         body=body)


def fidalgo_admin_catalog_item_delete(client,
                                      resource_group_name,
                                      dev_center_name,
                                      catalog_name,
                                      catalog_item_name):
    return client.delete(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         catalog_name=catalog_name,
                         catalog_item_name=catalog_item_name)


def fidalgo_admin_catalog_list(client,
                               resource_group_name,
                               dev_center_name,
                               top=None):
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def fidalgo_admin_catalog_show(client,
                               resource_group_name,
                               dev_center_name,
                               catalog_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      catalog_name=catalog_name)


def fidalgo_admin_catalog_create(client,
                                 resource_group_name,
                                 dev_center_name,
                                 catalog_name,
                                 git_hub=None,
                                 ado_git=None,
                                 no_wait=False):
    body = {}
    if git_hub is not None:
        body['git_hub'] = git_hub
    if ado_git is not None:
        body['ado_git'] = ado_git
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name,
                       body=body)


def fidalgo_admin_catalog_update(client,
                                 resource_group_name,
                                 dev_center_name,
                                 catalog_name,
                                 tags=None,
                                 git_hub=None,
                                 ado_git=None,
                                 no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if git_hub is not None:
        body['git_hub'] = git_hub
    if ado_git is not None:
        body['ado_git'] = ado_git
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name,
                       body=body)


def fidalgo_admin_catalog_delete(client,
                                 resource_group_name,
                                 dev_center_name,
                                 catalog_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name)


def fidalgo_admin_catalog_sync(client,
                               resource_group_name,
                               dev_center_name,
                               catalog_name,
                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_sync,
                       resource_group_name=resource_group_name,
                       dev_center_name=dev_center_name,
                       catalog_name=catalog_name)


def fidalgo_admin_mapping_list(client,
                               resource_group_name,
                               dev_center_name,
                               top=None):
    return client.list_by_dev_center(resource_group_name=resource_group_name,
                                     dev_center_name=dev_center_name,
                                     top=top)


def fidalgo_admin_mapping_show(client,
                               resource_group_name,
                               dev_center_name,
                               mapping_name):
    return client.get(resource_group_name=resource_group_name,
                      dev_center_name=dev_center_name,
                      mapping_name=mapping_name)


def fidalgo_admin_mapping_create(client,
                                 resource_group_name,
                                 dev_center_name,
                                 mapping_name,
                                 mapped_subscription_id=None,
                                 environment_type=None,
                                 project_id=None):
    body = {}
    if mapped_subscription_id is not None:
        body['mapped_subscription_id'] = mapped_subscription_id
    if environment_type is not None:
        body['environment_type'] = environment_type
    if project_id is not None:
        body['project_id'] = project_id
    return client.create_or_update(resource_group_name=resource_group_name,
                                   dev_center_name=dev_center_name,
                                   mapping_name=mapping_name,
                                   body=body)


def fidalgo_admin_mapping_update(client,
                                 resource_group_name,
                                 dev_center_name,
                                 mapping_name,
                                 mapped_subscription_id=None):
    body = {}
    if mapped_subscription_id is not None:
        body['mapped_subscription_id'] = mapped_subscription_id
    return client.update(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         mapping_name=mapping_name,
                         body=body)


def fidalgo_admin_mapping_delete(client,
                                 resource_group_name,
                                 dev_center_name,
                                 mapping_name):
    return client.delete(resource_group_name=resource_group_name,
                         dev_center_name=dev_center_name,
                         mapping_name=mapping_name)


def fidalgo_admin_operation_statuses_show(client,
                                          location,
                                          operation_id):
    return client.get(location=location,
                      operation_id=operation_id)


def fidalgo_admin_sku_list(client,
                           top=None):
    return client.list_by_subscription(top=top)


def fidalgo_admin_pool_list(client,
                            resource_group_name,
                            project_name,
                            top=None):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name,
                                  top=top)


def fidalgo_admin_pool_show(client,
                            resource_group_name,
                            project_name,
                            pool_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      pool_name=pool_name)


def fidalgo_admin_pool_create(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              location,
                              tags=None,
                              sku=None,
                              machine_definition_id=None,
                              network_settings_id=None,
                              no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if sku is not None:
        body['sku'] = sku
    if machine_definition_id is not None:
        body['machine_definition_id'] = machine_definition_id
    if network_settings_id is not None:
        body['network_settings_id'] = network_settings_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       body=body)


def fidalgo_admin_pool_update(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              tags=None,
                              location=None,
                              sku=None,
                              machine_definition_id=None,
                              network_settings_id=None,
                              no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if sku is not None:
        body['sku'] = sku
    if machine_definition_id is not None:
        body['machine_definition_id'] = machine_definition_id
    if network_settings_id is not None:
        body['network_settings_id'] = network_settings_id
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name,
                       body=body)


def fidalgo_admin_pool_delete(client,
                              resource_group_name,
                              project_name,
                              pool_name,
                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       project_name=project_name,
                       pool_name=pool_name)


def fidalgo_admin_machine_definition_list(client,
                                          resource_group_name=None,
                                          top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def fidalgo_admin_machine_definition_show(client,
                                          resource_group_name,
                                          machine_definition_name):
    return client.get(resource_group_name=resource_group_name,
                      machine_definition_name=machine_definition_name)


def fidalgo_admin_machine_definition_create(client,
                                            resource_group_name,
                                            machine_definition_name,
                                            location,
                                            tags=None,
                                            image_reference=None,
                                            no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if image_reference is not None:
        body['image_reference'] = image_reference
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       machine_definition_name=machine_definition_name,
                       body=body)


def fidalgo_admin_machine_definition_update(client,
                                            resource_group_name,
                                            machine_definition_name,
                                            tags=None,
                                            location=None,
                                            image_reference=None,
                                            no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if image_reference is not None:
        body['image_reference'] = image_reference
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       machine_definition_name=machine_definition_name,
                       body=body)


def fidalgo_admin_machine_definition_delete(client,
                                            resource_group_name,
                                            machine_definition_name,
                                            no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       machine_definition_name=machine_definition_name)


def fidalgo_admin_network_setting_list(client,
                                       resource_group_name=None,
                                       top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def fidalgo_admin_network_setting_show(client,
                                       resource_group_name,
                                       network_setting_name):
    return client.get(resource_group_name=resource_group_name,
                      network_setting_name=network_setting_name)


def fidalgo_admin_network_setting_create(client,
                                         resource_group_name,
                                         network_setting_name,
                                         location,
                                         tags=None,
                                         subnet_id=None,
                                         networking_resource_group_id=None,
                                         domain_name=None,
                                         organization_unit=None,
                                         domain_username=None,
                                         domain_password=None,
                                         no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    body['location'] = location
    if subnet_id is not None:
        body['subnet_id'] = subnet_id
    if networking_resource_group_id is not None:
        body['networking_resource_group_id'] = networking_resource_group_id
    if domain_name is not None:
        body['domain_name'] = domain_name
    if organization_unit is not None:
        body['organization_unit'] = organization_unit
    if domain_username is not None:
        body['domain_username'] = domain_username
    if domain_password is not None:
        body['domain_password'] = domain_password
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       network_setting_name=network_setting_name,
                       body=body)


def fidalgo_admin_network_setting_update(client,
                                         resource_group_name,
                                         network_setting_name,
                                         tags=None,
                                         location=None,
                                         subnet_id=None,
                                         networking_resource_group_id=None,
                                         domain_name=None,
                                         organization_unit=None,
                                         domain_username=None,
                                         domain_password=None,
                                         no_wait=False):
    body = {}
    if tags is not None:
        body['tags'] = tags
    if location is not None:
        body['location'] = location
    if subnet_id is not None:
        body['subnet_id'] = subnet_id
    if networking_resource_group_id is not None:
        body['networking_resource_group_id'] = networking_resource_group_id
    if domain_name is not None:
        body['domain_name'] = domain_name
    if organization_unit is not None:
        body['organization_unit'] = organization_unit
    if domain_username is not None:
        body['domain_username'] = domain_username
    if domain_password is not None:
        body['domain_password'] = domain_password
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       network_setting_name=network_setting_name,
                       body=body)


def fidalgo_admin_network_setting_delete(client,
                                         resource_group_name,
                                         network_setting_name,
                                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       network_setting_name=network_setting_name)


def fidalgo_admin_network_setting_show_health_detail(client,
                                                     resource_group_name,
                                                     network_setting_name):
    return client.get_health_details(resource_group_name=resource_group_name,
                                     network_setting_name=network_setting_name)
