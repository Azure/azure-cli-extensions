# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._fidalgo_enums import *


class AvailableOperations(msrest.serialization.Model):
    """Available operations of the service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Collection of available operation details.
    :vartype value: list[~fidalgo.models.OperationDetail]
    :ivar next_link: URL client should use to fetch the next page (per server side paging).
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationDetail]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AvailableOperations, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class Catalog(Resource):
    """Represents a catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~fidalgo.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~fidalgo.models.GitCatalog
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar ignored_catalog_items: Manifests which have been ignored as duplicates.
    :vartype ignored_catalog_items: list[str]
    :ivar invalid_catalog_items: Manifests which are invalid due to schema or validation errors.
    :vartype invalid_catalog_items: list[str]
    :ivar last_sync_time: When the catalog was last synced.
    :vartype last_sync_time: ~datetime.datetime
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'ignored_catalog_items': {'readonly': True},
        'invalid_catalog_items': {'readonly': True},
        'last_sync_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'git_hub': {'key': 'properties.gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'properties.adoGit', 'type': 'GitCatalog'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'ignored_catalog_items': {'key': 'properties.ignoredCatalogItems', 'type': '[str]'},
        'invalid_catalog_items': {'key': 'properties.invalidCatalogItems', 'type': '[str]'},
        'last_sync_time': {'key': 'properties.lastSyncTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(Catalog, self).__init__(**kwargs)
        self.system_data = None
        self.git_hub = git_hub
        self.ado_git = ado_git
        self.provisioning_state = None
        self.ignored_catalog_items = None
        self.invalid_catalog_items = None
        self.last_sync_time = None


class CatalogItem(Resource):
    """A catalog item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param description: Description of the catalog item.
    :type description: str
    :param engine: The catalog item engine.
    :type engine: ~fidalgo.models.CatalogItemEngineProperties
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'engine': {'key': 'properties.engine', 'type': 'CatalogItemEngineProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        engine: Optional["CatalogItemEngineProperties"] = None,
        **kwargs
    ):
        super(CatalogItem, self).__init__(**kwargs)
        self.system_data = None
        self.description = description
        self.engine = engine
        self.provisioning_state = None


class CatalogItemEngineProperties(msrest.serialization.Model):
    """Properties of a catalog item engine.

    :param type: The type of catalog item used to deploy the environment. Possible values include:
     "ARM".
    :type type: str or ~fidalgo.models.CatalogItemType
    :param template_path: Path to the catalog item entrypoint file.
    :type template_path: str
    :param parameters: Parameters that can be provided to the catalog item.
    :type parameters: list[~fidalgo.models.CatalogItemParameterProperties]
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'template_path': {'key': 'templatePath', 'type': 'str'},
        'parameters': {'key': 'parameters', 'type': '[CatalogItemParameterProperties]'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "CatalogItemType"]] = None,
        template_path: Optional[str] = None,
        parameters: Optional[List["CatalogItemParameterProperties"]] = None,
        **kwargs
    ):
        super(CatalogItemEngineProperties, self).__init__(**kwargs)
        self.type = type
        self.template_path = template_path
        self.parameters = parameters


class CatalogItemListResult(msrest.serialization.Model):
    """Results of the catalog item list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.CatalogItem]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CatalogItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogItemListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class CatalogItemParameterProperties(msrest.serialization.Model):
    """Properties of a catalog item parameter.

    :param name: The name of the parameter.
    :type name: str
    :param type: The type accepted for the parameter value.
    :type type: str
    :param description: Description of the parameter.
    :type description: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        type: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(CatalogItemParameterProperties, self).__init__(**kwargs)
        self.name = name
        self.type = type
        self.description = description


class CatalogItemUpdateProperties(msrest.serialization.Model):
    """Properties of a catalog item which can be updated after creation.

    :param description: Description of the catalog item.
    :type description: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        **kwargs
    ):
        super(CatalogItemUpdateProperties, self).__init__(**kwargs)
        self.description = description


class CatalogItemProperties(CatalogItemUpdateProperties):
    """Properties of a catalog item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param description: Description of the catalog item.
    :type description: str
    :param engine: The catalog item engine.
    :type engine: ~fidalgo.models.CatalogItemEngineProperties
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'engine': {'key': 'engine', 'type': 'CatalogItemEngineProperties'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        engine: Optional["CatalogItemEngineProperties"] = None,
        **kwargs
    ):
        super(CatalogItemProperties, self).__init__(description=description, **kwargs)
        self.engine = engine
        self.provisioning_state = None


class CatalogItemUpdate(msrest.serialization.Model):
    """The catalog item's properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param description: Description of the catalog item.
    :type description: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(CatalogItemUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.description = description


class CatalogListResult(msrest.serialization.Model):
    """Results of the catalog list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Catalog]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Catalog]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CatalogListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class CatalogUpdateProperties(msrest.serialization.Model):
    """Properties of a catalog. These properties can be updated after the resource has been created.

    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~fidalgo.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~fidalgo.models.GitCatalog
    """

    _attribute_map = {
        'git_hub': {'key': 'gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'adoGit', 'type': 'GitCatalog'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogUpdateProperties, self).__init__(**kwargs)
        self.git_hub = git_hub
        self.ado_git = ado_git


class CatalogProperties(CatalogUpdateProperties):
    """Properties of a catalog.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~fidalgo.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~fidalgo.models.GitCatalog
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar ignored_catalog_items: Manifests which have been ignored as duplicates.
    :vartype ignored_catalog_items: list[str]
    :ivar invalid_catalog_items: Manifests which are invalid due to schema or validation errors.
    :vartype invalid_catalog_items: list[str]
    :ivar last_sync_time: When the catalog was last synced.
    :vartype last_sync_time: ~datetime.datetime
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'ignored_catalog_items': {'readonly': True},
        'invalid_catalog_items': {'readonly': True},
        'last_sync_time': {'readonly': True},
    }

    _attribute_map = {
        'git_hub': {'key': 'gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'adoGit', 'type': 'GitCatalog'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'ignored_catalog_items': {'key': 'ignoredCatalogItems', 'type': '[str]'},
        'invalid_catalog_items': {'key': 'invalidCatalogItems', 'type': '[str]'},
        'last_sync_time': {'key': 'lastSyncTime', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogProperties, self).__init__(git_hub=git_hub, ado_git=ado_git, **kwargs)
        self.provisioning_state = None
        self.ignored_catalog_items = None
        self.invalid_catalog_items = None
        self.last_sync_time = None


class CatalogUpdate(msrest.serialization.Model):
    """The catalog's properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param git_hub: Properties for a GitHub catalog type.
    :type git_hub: ~fidalgo.models.GitCatalog
    :param ado_git: Properties for an Azure DevOps catalog type.
    :type ado_git: ~fidalgo.models.GitCatalog
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'git_hub': {'key': 'properties.gitHub', 'type': 'GitCatalog'},
        'ado_git': {'key': 'properties.adoGit', 'type': 'GitCatalog'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        git_hub: Optional["GitCatalog"] = None,
        ado_git: Optional["GitCatalog"] = None,
        **kwargs
    ):
        super(CatalogUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.git_hub = git_hub
        self.ado_git = ado_git


class CloudErrorBody(msrest.serialization.Model):
    """An error response from the Fidalgo service.

    :param code: An identifier for the error. Codes are invariant and are intended to be consumed
     programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable for display in a user
     interface.
    :type message: str
    :param target: The target of the particular error. For example, the name of the property in
     error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~fidalgo.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["CloudErrorBody"]] = None,
        **kwargs
    ):
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class Deployment(msrest.serialization.Model):
    """Details of a specific deployment of an environment.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provisioning_state: Current provisioning state of the deployment.
    :vartype provisioning_state: str
    :ivar logs: Deployment logs.
    :vartype logs: str
    :ivar parameters: Deployment parameters passed to the catalog item.
    :vartype parameters: object
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'logs': {'readonly': True},
        'parameters': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'logs': {'key': 'properties.logs', 'type': 'str'},
        'parameters': {'key': 'properties.parameters', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Deployment, self).__init__(**kwargs)
        self.provisioning_state = None
        self.logs = None
        self.parameters = None


class DeploymentHistoryResult(msrest.serialization.Model):
    """Results of the get deployment history operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Recent deployment history.
    :vartype value: list[~fidalgo.models.Deployment]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Deployment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DeploymentHistoryResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DevCenter(TrackedResource):
    """Represents a devcenter resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param identity: Managed identity properties.
    :type identity: ~fidalgo.models.IdentityProperties
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'identity': {'key': 'identity', 'type': 'IdentityProperties'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["IdentityProperties"] = None,
        **kwargs
    ):
        super(DevCenter, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.identity = identity
        self.provisioning_state = None


class DevCenterListResult(msrest.serialization.Model):
    """Result of the list devcenters operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.DevCenter]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DevCenter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(DevCenterListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class TrackedResourceUpdate(msrest.serialization.Model):
    """Base tracked resource type for PATCH updates.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(TrackedResourceUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DevCenterUpdate(TrackedResourceUpdate):
    """The devcenter resource for partial updates. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param identity: Managed identity properties.
    :type identity: ~fidalgo.models.IdentityProperties
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'identity': {'key': 'identity', 'type': 'IdentityProperties'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        identity: Optional["IdentityProperties"] = None,
        **kwargs
    ):
        super(DevCenterUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.identity = identity


class Environment(TrackedResource):
    """Represents an environment resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param description: Description of the Environment.
    :type description: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param template_uri: Uri of a template used to deploy resources to the environment.
    :type template_uri: str
    :param deployment_parameters: Deployment parameters passed to catalog item.
    :type deployment_parameters: object
    :param environment_type: Environment type.
    :type environment_type: str
    :ivar provisioning_state: The provisioning state of the environment.
    :vartype provisioning_state: str
    :ivar resource_group_id: The identifier of the resource group containing the environment's
     resources.
    :vartype resource_group_id: str
    :ivar outputs: Outputs from the deployment.
    :vartype outputs: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'resource_group_id': {'readonly': True},
        'outputs': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'catalog_item_name': {'key': 'properties.catalogItemName', 'type': 'str'},
        'template_uri': {'key': 'properties.templateUri', 'type': 'str'},
        'deployment_parameters': {'key': 'properties.deploymentParameters', 'type': 'object'},
        'environment_type': {'key': 'properties.environmentType', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'resource_group_id': {'key': 'properties.resourceGroupId', 'type': 'str'},
        'outputs': {'key': 'properties.outputs', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        template_uri: Optional[str] = None,
        deployment_parameters: Optional[object] = None,
        environment_type: Optional[str] = None,
        **kwargs
    ):
        super(Environment, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.description = description
        self.catalog_item_name = catalog_item_name
        self.template_uri = template_uri
        self.deployment_parameters = deployment_parameters
        self.environment_type = environment_type
        self.provisioning_state = None
        self.resource_group_id = None
        self.outputs = None


class EnvironmentDeploy(msrest.serialization.Model):
    """An environment deployment.

    :param parameters: Deployment parameters passed to catalog item.
    :type parameters: object
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        parameters: Optional[object] = None,
        **kwargs
    ):
        super(EnvironmentDeploy, self).__init__(**kwargs)
        self.parameters = parameters


class EnvironmentListResult(msrest.serialization.Model):
    """Results of the environment list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Environment]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Environment]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EnvironmentListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class EnvironmentUpdateProperties(msrest.serialization.Model):
    """Properties of an environment. These properties can be updated after the resource has been created.

    :param description: Description of the Environment.
    :type description: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param template_uri: Uri of a template used to deploy resources to the environment.
    :type template_uri: str
    :param deployment_parameters: Deployment parameters passed to catalog item.
    :type deployment_parameters: object
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'catalog_item_name': {'key': 'catalogItemName', 'type': 'str'},
        'template_uri': {'key': 'templateUri', 'type': 'str'},
        'deployment_parameters': {'key': 'deploymentParameters', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        template_uri: Optional[str] = None,
        deployment_parameters: Optional[object] = None,
        **kwargs
    ):
        super(EnvironmentUpdateProperties, self).__init__(**kwargs)
        self.description = description
        self.catalog_item_name = catalog_item_name
        self.template_uri = template_uri
        self.deployment_parameters = deployment_parameters


class EnvironmentProperties(EnvironmentUpdateProperties):
    """Properties of an environment.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param description: Description of the Environment.
    :type description: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param template_uri: Uri of a template used to deploy resources to the environment.
    :type template_uri: str
    :param deployment_parameters: Deployment parameters passed to catalog item.
    :type deployment_parameters: object
    :param environment_type: Environment type.
    :type environment_type: str
    :ivar provisioning_state: The provisioning state of the environment.
    :vartype provisioning_state: str
    :ivar resource_group_id: The identifier of the resource group containing the environment's
     resources.
    :vartype resource_group_id: str
    :ivar outputs: Outputs from the deployment.
    :vartype outputs: object
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'resource_group_id': {'readonly': True},
        'outputs': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'catalog_item_name': {'key': 'catalogItemName', 'type': 'str'},
        'template_uri': {'key': 'templateUri', 'type': 'str'},
        'deployment_parameters': {'key': 'deploymentParameters', 'type': 'object'},
        'environment_type': {'key': 'environmentType', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'resource_group_id': {'key': 'resourceGroupId', 'type': 'str'},
        'outputs': {'key': 'outputs', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        template_uri: Optional[str] = None,
        deployment_parameters: Optional[object] = None,
        environment_type: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentProperties, self).__init__(description=description, catalog_item_name=catalog_item_name, template_uri=template_uri, deployment_parameters=deployment_parameters, **kwargs)
        self.environment_type = environment_type
        self.provisioning_state = None
        self.resource_group_id = None
        self.outputs = None


class EnvironmentType(Resource):
    """Represents an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param description: Description of the environment type.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentType, self).__init__(**kwargs)
        self.system_data = None
        self.tags = tags
        self.description = description
        self.provisioning_state = None


class EnvironmentTypeListResult(msrest.serialization.Model):
    """Result of the environment type list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.EnvironmentType]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[EnvironmentType]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(EnvironmentTypeListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class EnvironmentTypeUpdateProperties(msrest.serialization.Model):
    """Properties of an environment type. These properties can be updated after the resource has been created.

    :param description: Description of the environment type.
    :type description: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentTypeUpdateProperties, self).__init__(**kwargs)
        self.description = description


class EnvironmentTypeProperties(EnvironmentTypeUpdateProperties):
    """Properties of an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param description: Description of the environment type.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentTypeProperties, self).__init__(description=description, **kwargs)
        self.provisioning_state = None


class EnvironmentTypeUpdate(msrest.serialization.Model):
    """The environment type for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param description: Description of the environment type.
    :type description: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(EnvironmentTypeUpdate, self).__init__(**kwargs)
        self.tags = tags
        self.description = description


class EnvironmentUpdate(TrackedResourceUpdate):
    """The environment properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param description: Description of the Environment.
    :type description: str
    :param catalog_item_name: Name of the catalog item.
    :type catalog_item_name: str
    :param template_uri: Uri of a template used to deploy resources to the environment.
    :type template_uri: str
    :param deployment_parameters: Deployment parameters passed to catalog item.
    :type deployment_parameters: object
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'catalog_item_name': {'key': 'properties.catalogItemName', 'type': 'str'},
        'template_uri': {'key': 'properties.templateUri', 'type': 'str'},
        'deployment_parameters': {'key': 'properties.deploymentParameters', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        description: Optional[str] = None,
        catalog_item_name: Optional[str] = None,
        template_uri: Optional[str] = None,
        deployment_parameters: Optional[object] = None,
        **kwargs
    ):
        super(EnvironmentUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.description = description
        self.catalog_item_name = catalog_item_name
        self.template_uri = template_uri
        self.deployment_parameters = deployment_parameters


class GitCatalog(msrest.serialization.Model):
    """Properties for a Git repository catalog.

    :param uri: Git URI.
    :type uri: str
    :param branch: Git branch.
    :type branch: str
    :param secret_identifier: A reference to the Key Vault secret containing a security token to
     authenticate to a Git repository.
    :type secret_identifier: str
    :param path: The folder where the catalog items can be found inside the repository.
    :type path: str
    """

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
        'branch': {'key': 'branch', 'type': 'str'},
        'secret_identifier': {'key': 'secretIdentifier', 'type': 'str'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        branch: Optional[str] = None,
        secret_identifier: Optional[str] = None,
        path: Optional[str] = None,
        **kwargs
    ):
        super(GitCatalog, self).__init__(**kwargs)
        self.uri = uri
        self.branch = branch
        self.secret_identifier = secret_identifier
        self.path = path


class HealthCheck(msrest.serialization.Model):
    """An individual health check item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the health check item. Possible values include: "Pending",
     "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype status: str or ~fidalgo.models.HealthCheckStatus
    :ivar display_name: The display name of this health check item.
    :vartype display_name: str
    :ivar start_date_time: Start time of health check item.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: End time of the health check item.
    :vartype end_date_time: ~datetime.datetime
    :ivar error_type: The type of error that occurred during this health check.
    :vartype error_type: str
    :ivar recommended_action: The recommended action to fix the corresponding error.
    :vartype recommended_action: str
    :ivar additional_details: Additional details about the health check or the recommended action.
    :vartype additional_details: str
    """

    _validation = {
        'status': {'readonly': True},
        'display_name': {'readonly': True},
        'start_date_time': {'readonly': True},
        'end_date_time': {'readonly': True},
        'error_type': {'readonly': True},
        'recommended_action': {'readonly': True},
        'additional_details': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'endDateTime', 'type': 'iso-8601'},
        'error_type': {'key': 'errorType', 'type': 'str'},
        'recommended_action': {'key': 'recommendedAction', 'type': 'str'},
        'additional_details': {'key': 'additionalDetails', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthCheck, self).__init__(**kwargs)
        self.status = None
        self.display_name = None
        self.start_date_time = None
        self.end_date_time = None
        self.error_type = None
        self.recommended_action = None
        self.additional_details = None


class HealthCheckStatusDetails(Resource):
    """HealthCheckStatusDetails.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :ivar start_date_time: Start time of last execution of the health checks.
    :vartype start_date_time: ~datetime.datetime
    :ivar end_date_time: End time of last execution of the health checks.
    :vartype end_date_time: ~datetime.datetime
    :ivar health_checks: Details for each health check item.
    :vartype health_checks: list[~fidalgo.models.HealthCheck]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'start_date_time': {'readonly': True},
        'end_date_time': {'readonly': True},
        'health_checks': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'start_date_time': {'key': 'properties.startDateTime', 'type': 'iso-8601'},
        'end_date_time': {'key': 'properties.endDateTime', 'type': 'iso-8601'},
        'health_checks': {'key': 'properties.healthChecks', 'type': '[HealthCheck]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthCheckStatusDetails, self).__init__(**kwargs)
        self.system_data = None
        self.start_date_time = None
        self.end_date_time = None
        self.health_checks = None


class IdentityProperties(msrest.serialization.Model):
    """Managed identity for the resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of the resource identity. This property will only be
     provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant id associated with the resource. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :param type: The type of identity used for the resource. The type 'SystemAssigned,
     UserAssigned' includes both an implicitly created identity and a user assigned identity. The
     type 'None' will remove any identities from the resource. Possible values include:
     "SystemAssigned", "UserAssigned", "SystemAssigned, UserAssigned", "None".
    :type type: str or ~fidalgo.models.ResourceIdentityType
    :param user_assigned_identities: The list of user identities associated with the resource. The
     user identity dictionary key references will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
    :type user_assigned_identities: dict[str, ~fidalgo.models.UserAssignedIdentitiesValue]
    """

    _validation = {
        'principal_id': {'readonly': True},
        'tenant_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'user_assigned_identities': {'key': 'userAssignedIdentities', 'type': '{UserAssignedIdentitiesValue}'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "ResourceIdentityType"]] = None,
        user_assigned_identities: Optional[Dict[str, "UserAssignedIdentitiesValue"]] = None,
        **kwargs
    ):
        super(IdentityProperties, self).__init__(**kwargs)
        self.principal_id = None
        self.tenant_id = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class ImageReference(msrest.serialization.Model):
    """Image reference information.

    :param id: Image resource ID.
    :type id: str
    :param publisher: The image publisher.
    :type publisher: str
    :param offer: The image offer.
    :type offer: str
    :param sku: The image sku.
    :type sku: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'publisher': {'key': 'publisher', 'type': 'str'},
        'offer': {'key': 'offer', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        publisher: Optional[str] = None,
        offer: Optional[str] = None,
        sku: Optional[str] = None,
        **kwargs
    ):
        super(ImageReference, self).__init__(**kwargs)
        self.id = id
        self.publisher = publisher
        self.offer = offer
        self.sku = sku


class MachineDefinition(TrackedResource):
    """Represents a definition for a Developer Machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param image_reference: Image reference information.
    :type image_reference: ~fidalgo.models.ImageReference
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'image_reference': {'key': 'properties.imageReference', 'type': 'ImageReference'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        image_reference: Optional["ImageReference"] = None,
        **kwargs
    ):
        super(MachineDefinition, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.image_reference = image_reference
        self.provisioning_state = None


class MachineDefinitionListResult(msrest.serialization.Model):
    """Results of the machine definition list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.MachineDefinition]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[MachineDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MachineDefinitionListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class MachineDefinitionUpdateProperties(msrest.serialization.Model):
    """Properties of a Machine Definition. These properties can be updated after the resource has been created.

    :param image_reference: Image reference information.
    :type image_reference: ~fidalgo.models.ImageReference
    """

    _attribute_map = {
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
    }

    def __init__(
        self,
        *,
        image_reference: Optional["ImageReference"] = None,
        **kwargs
    ):
        super(MachineDefinitionUpdateProperties, self).__init__(**kwargs)
        self.image_reference = image_reference


class MachineDefinitionProperties(MachineDefinitionUpdateProperties):
    """Properties of a Machine Definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param image_reference: Image reference information.
    :type image_reference: ~fidalgo.models.ImageReference
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'image_reference': {'key': 'imageReference', 'type': 'ImageReference'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        image_reference: Optional["ImageReference"] = None,
        **kwargs
    ):
        super(MachineDefinitionProperties, self).__init__(image_reference=image_reference, **kwargs)
        self.provisioning_state = None


class MachineDefinitionUpdate(TrackedResourceUpdate):
    """Partial update of a machine definition resource.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param image_reference: Image reference information.
    :type image_reference: ~fidalgo.models.ImageReference
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'image_reference': {'key': 'properties.imageReference', 'type': 'ImageReference'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        image_reference: Optional["ImageReference"] = None,
        **kwargs
    ):
        super(MachineDefinitionUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.image_reference = image_reference


class Mapping(Resource):
    """Represents a mapping between a subscription and an environment type, or between a management group and an environment type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param mapped_subscription_id: Id of a subscription that the environment type will be mapped
     to. The environment's resources will be deployed into this subscription.
    :type mapped_subscription_id: str
    :param environment_type: Environment type (e.g. Dev/Test).
    :type environment_type: str
    :param project_id: Resource Id of a project that this mapping is associated with.
    :type project_id: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'mapped_subscription_id': {'key': 'properties.mappedSubscriptionId', 'type': 'str'},
        'environment_type': {'key': 'properties.environmentType', 'type': 'str'},
        'project_id': {'key': 'properties.projectId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        mapped_subscription_id: Optional[str] = None,
        environment_type: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs
    ):
        super(Mapping, self).__init__(**kwargs)
        self.system_data = None
        self.mapped_subscription_id = mapped_subscription_id
        self.environment_type = environment_type
        self.project_id = project_id
        self.provisioning_state = None


class MappingListResult(msrest.serialization.Model):
    """Result of the mapping list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Mapping]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Mapping]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(MappingListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class MappingUpdateProperties(msrest.serialization.Model):
    """Properties of a mapping. These properties can be updated after the resource has been created.

    :param mapped_subscription_id: Id of a subscription that the environment type will be mapped
     to. The environment's resources will be deployed into this subscription.
    :type mapped_subscription_id: str
    """

    _attribute_map = {
        'mapped_subscription_id': {'key': 'mappedSubscriptionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        mapped_subscription_id: Optional[str] = None,
        **kwargs
    ):
        super(MappingUpdateProperties, self).__init__(**kwargs)
        self.mapped_subscription_id = mapped_subscription_id


class MappingProperties(MappingUpdateProperties):
    """Properties of an environment mapping.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param mapped_subscription_id: Id of a subscription that the environment type will be mapped
     to. The environment's resources will be deployed into this subscription.
    :type mapped_subscription_id: str
    :param environment_type: Environment type (e.g. Dev/Test).
    :type environment_type: str
    :param project_id: Resource Id of a project that this mapping is associated with.
    :type project_id: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'mapped_subscription_id': {'key': 'mappedSubscriptionId', 'type': 'str'},
        'environment_type': {'key': 'environmentType', 'type': 'str'},
        'project_id': {'key': 'projectId', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        mapped_subscription_id: Optional[str] = None,
        environment_type: Optional[str] = None,
        project_id: Optional[str] = None,
        **kwargs
    ):
        super(MappingProperties, self).__init__(mapped_subscription_id=mapped_subscription_id, **kwargs)
        self.environment_type = environment_type
        self.project_id = project_id
        self.provisioning_state = None


class MappingUpdate(msrest.serialization.Model):
    """The environment mapping for partial update. Properties not provided in the update request will not be changed.

    :param mapped_subscription_id: Id of a subscription that the environment type will be mapped
     to. The environment's resources will be deployed into this subscription.
    :type mapped_subscription_id: str
    """

    _attribute_map = {
        'mapped_subscription_id': {'key': 'properties.mappedSubscriptionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        mapped_subscription_id: Optional[str] = None,
        **kwargs
    ):
        super(MappingUpdate, self).__init__(**kwargs)
        self.mapped_subscription_id = mapped_subscription_id


class NetworkSettingsUpdateProperties(msrest.serialization.Model):
    """Properties of network settings. These properties can be updated after the resource has been created.

    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param networking_resource_group_id: Target resource group id for NICs to be placed. Required
     format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'.
    :type networking_resource_group_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    """

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'networking_resource_group_id': {'key': 'networkingResourceGroupId', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'organization_unit': {'key': 'organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'domainUsername', 'type': 'str'},
        'domain_password': {'key': 'domainPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
        networking_resource_group_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkSettingsUpdateProperties, self).__init__(**kwargs)
        self.subnet_id = subnet_id
        self.networking_resource_group_id = networking_resource_group_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password


class NetworkProperties(NetworkSettingsUpdateProperties):
    """Network properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param networking_resource_group_id: Target resource group id for NICs to be placed. Required
     format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'.
    :type networking_resource_group_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar health_check_status: Overall health status of the network connection. Health checks are
     run on creation, update, and periodically to validate the network connection. Possible values
     include: "Pending", "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype health_check_status: str or ~fidalgo.models.HealthCheckStatus
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'health_check_status': {'readonly': True},
    }

    _attribute_map = {
        'subnet_id': {'key': 'subnetId', 'type': 'str'},
        'networking_resource_group_id': {'key': 'networkingResourceGroupId', 'type': 'str'},
        'domain_name': {'key': 'domainName', 'type': 'str'},
        'organization_unit': {'key': 'organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'domainUsername', 'type': 'str'},
        'domain_password': {'key': 'domainPassword', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'health_check_status': {'key': 'healthCheckStatus', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        subnet_id: Optional[str] = None,
        networking_resource_group_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkProperties, self).__init__(subnet_id=subnet_id, networking_resource_group_id=networking_resource_group_id, domain_name=domain_name, organization_unit=organization_unit, domain_username=domain_username, domain_password=domain_password, **kwargs)
        self.provisioning_state = None
        self.health_check_status = None


class NetworkSettings(TrackedResource):
    """Network related settings.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param networking_resource_group_id: Target resource group id for NICs to be placed. Required
     format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'.
    :type networking_resource_group_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    :ivar health_check_status: Overall health status of the network connection. Health checks are
     run on creation, update, and periodically to validate the network connection. Possible values
     include: "Pending", "Running", "Passed", "Failed", "Warning", "Unknown".
    :vartype health_check_status: str or ~fidalgo.models.HealthCheckStatus
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'health_check_status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'networking_resource_group_id': {'key': 'properties.networkingResourceGroupId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'organization_unit': {'key': 'properties.organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'properties.domainUsername', 'type': 'str'},
        'domain_password': {'key': 'properties.domainPassword', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'health_check_status': {'key': 'properties.healthCheckStatus', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        subnet_id: Optional[str] = None,
        networking_resource_group_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkSettings, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.subnet_id = subnet_id
        self.networking_resource_group_id = networking_resource_group_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password
        self.provisioning_state = None
        self.health_check_status = None


class NetworkSettingsListResult(msrest.serialization.Model):
    """Result of the network settings list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.NetworkSettings]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NetworkSettings]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(NetworkSettingsListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class NetworkSettingsUpdate(TrackedResourceUpdate):
    """The network settings properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param subnet_id: The subnet to attach Virtual Machines to.
    :type subnet_id: str
    :param networking_resource_group_id: Target resource group id for NICs to be placed. Required
     format: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'.
    :type networking_resource_group_id: str
    :param domain_name: Active Directory domain name.
    :type domain_name: str
    :param organization_unit: Active Directory domain Organization Unit (OU).
    :type organization_unit: str
    :param domain_username: The username of an Active Directory account (user or service account)
     that has permissions to create computer objects in Active Directory. Required format:
     admin@contoso.com.
    :type domain_username: str
    :param domain_password: The password for the account used to join domain.
    :type domain_password: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
        'networking_resource_group_id': {'key': 'properties.networkingResourceGroupId', 'type': 'str'},
        'domain_name': {'key': 'properties.domainName', 'type': 'str'},
        'organization_unit': {'key': 'properties.organizationUnit', 'type': 'str'},
        'domain_username': {'key': 'properties.domainUsername', 'type': 'str'},
        'domain_password': {'key': 'properties.domainPassword', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        subnet_id: Optional[str] = None,
        networking_resource_group_id: Optional[str] = None,
        domain_name: Optional[str] = None,
        organization_unit: Optional[str] = None,
        domain_username: Optional[str] = None,
        domain_password: Optional[str] = None,
        **kwargs
    ):
        super(NetworkSettingsUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.subnet_id = subnet_id
        self.networking_resource_group_id = networking_resource_group_id
        self.domain_name = domain_name
        self.organization_unit = organization_unit
        self.domain_username = domain_username
        self.domain_password = domain_password


class OperationDetail(msrest.serialization.Model):
    """Operation detail payload.

    :param name: Name of the operation.
    :type name: str
    :param is_data_action: Indicates whether the operation is a data action.
    :type is_data_action: bool
    :param display: Display of the operation.
    :type display: ~fidalgo.models.OperationDisplay
    :param origin: Origin of the operation.
    :type origin: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        display: Optional["OperationDisplay"] = None,
        origin: Optional[str] = None,
        **kwargs
    ):
        super(OperationDetail, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.display = display
        self.origin = origin


class OperationDisplay(msrest.serialization.Model):
    """Operation display payload.

    :param provider: Resource provider of the operation.
    :type provider: str
    :param resource: Resource of the operation.
    :type resource: str
    :param operation: Localized friendly name for the operation.
    :type operation: str
    :param description: Localized friendly description for the operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationStatus(msrest.serialization.Model):
    """The current status of an async operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified ID for the operation status.
    :vartype id: str
    :ivar name: The operation id name.
    :vartype name: str
    :ivar status: Provisioning state of the resource.
    :vartype status: str
    :ivar start_time: The start time of the operation.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the operation.
    :vartype end_time: ~datetime.datetime
    :ivar percent_complete: Percent of the operation that is complete.
    :vartype percent_complete: float
    :ivar properties: Custom operation properties, populated only for a successful operation.
    :vartype properties: object
    :param error: Operation Error message.
    :type error: ~fidalgo.models.OperationStatusError
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'percent_complete': {'readonly': True, 'maximum': 100, 'minimum': 0},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'percent_complete': {'key': 'percentComplete', 'type': 'float'},
        'properties': {'key': 'properties', 'type': 'object'},
        'error': {'key': 'error', 'type': 'OperationStatusError'},
    }

    def __init__(
        self,
        *,
        error: Optional["OperationStatusError"] = None,
        **kwargs
    ):
        super(OperationStatus, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = None
        self.start_time = None
        self.end_time = None
        self.percent_complete = None
        self.properties = None
        self.error = error


class OperationStatusError(msrest.serialization.Model):
    """Operation Error message.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationStatusError, self).__init__(**kwargs)
        self.code = None
        self.message = None


class Pool(TrackedResource):
    """A pool of Virtual Machines.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param sku: The SKU for the virtual machine. Defines the type of virtual machines used in the
     pool.
    :type sku: ~fidalgo.models.Sku
    :param machine_definition_id: Resource Id of a Machine Definition.
    :type machine_definition_id: str
    :param network_settings_id: Resource Id of a Network Settings resource.
    :type network_settings_id: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'machine_definition_id': {'key': 'properties.machineDefinitionId', 'type': 'str'},
        'network_settings_id': {'key': 'properties.networkSettingsId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["Sku"] = None,
        machine_definition_id: Optional[str] = None,
        network_settings_id: Optional[str] = None,
        **kwargs
    ):
        super(Pool, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.sku = sku
        self.machine_definition_id = machine_definition_id
        self.network_settings_id = network_settings_id
        self.provisioning_state = None


class PoolListResult(msrest.serialization.Model):
    """Results of the machine pool list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Pool]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Pool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(PoolListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class PoolUpdateProperties(msrest.serialization.Model):
    """Properties of a Pool. These properties can be updated after the resource has been created.

    :param sku: The SKU for the virtual machine. Defines the type of virtual machines used in the
     pool.
    :type sku: ~fidalgo.models.Sku
    :param machine_definition_id: Resource Id of a Machine Definition.
    :type machine_definition_id: str
    :param network_settings_id: Resource Id of a Network Settings resource.
    :type network_settings_id: str
    """

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'},
        'machine_definition_id': {'key': 'machineDefinitionId', 'type': 'str'},
        'network_settings_id': {'key': 'networkSettingsId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sku: Optional["Sku"] = None,
        machine_definition_id: Optional[str] = None,
        network_settings_id: Optional[str] = None,
        **kwargs
    ):
        super(PoolUpdateProperties, self).__init__(**kwargs)
        self.sku = sku
        self.machine_definition_id = machine_definition_id
        self.network_settings_id = network_settings_id


class PoolProperties(PoolUpdateProperties):
    """Properties of a Pool.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param sku: The SKU for the virtual machine. Defines the type of virtual machines used in the
     pool.
    :type sku: ~fidalgo.models.Sku
    :param machine_definition_id: Resource Id of a Machine Definition.
    :type machine_definition_id: str
    :param network_settings_id: Resource Id of a Network Settings resource.
    :type network_settings_id: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'sku': {'key': 'sku', 'type': 'Sku'},
        'machine_definition_id': {'key': 'machineDefinitionId', 'type': 'str'},
        'network_settings_id': {'key': 'networkSettingsId', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        sku: Optional["Sku"] = None,
        machine_definition_id: Optional[str] = None,
        network_settings_id: Optional[str] = None,
        **kwargs
    ):
        super(PoolProperties, self).__init__(sku=sku, machine_definition_id=machine_definition_id, network_settings_id=network_settings_id, **kwargs)
        self.provisioning_state = None


class PoolUpdate(TrackedResourceUpdate):
    """The pool properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param sku: The SKU for the virtual machine. Defines the type of virtual machines used in the
     pool.
    :type sku: ~fidalgo.models.Sku
    :param machine_definition_id: Resource Id of a Machine Definition.
    :type machine_definition_id: str
    :param network_settings_id: Resource Id of a Network Settings resource.
    :type network_settings_id: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'machine_definition_id': {'key': 'properties.machineDefinitionId', 'type': 'str'},
        'network_settings_id': {'key': 'properties.networkSettingsId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        sku: Optional["Sku"] = None,
        machine_definition_id: Optional[str] = None,
        network_settings_id: Optional[str] = None,
        **kwargs
    ):
        super(PoolUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.sku = sku
        self.machine_definition_id = machine_definition_id
        self.network_settings_id = network_settings_id


class Project(TrackedResource):
    """Represents a project resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~fidalgo.models.SystemData
    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'dev_center_id': {'key': 'properties.devCenterId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Project, self).__init__(tags=tags, location=location, **kwargs)
        self.system_data = None
        self.dev_center_id = dev_center_id
        self.description = description
        self.provisioning_state = None


class ProjectListResult(msrest.serialization.Model):
    """Results of the project list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Project]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Project]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProjectListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class ProjectUpdateProperties(msrest.serialization.Model):
    """Properties of a project. These properties can be updated after the resource has been created.

    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    """

    _attribute_map = {
        'dev_center_id': {'key': 'devCenterId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectUpdateProperties, self).__init__(**kwargs)
        self.dev_center_id = dev_center_id
        self.description = description


class ProjectProperties(ProjectUpdateProperties):
    """Properties of a project.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    :ivar provisioning_state: The provisioning state of the resource.
    :vartype provisioning_state: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'dev_center_id': {'key': 'devCenterId', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectProperties, self).__init__(dev_center_id=dev_center_id, description=description, **kwargs)
        self.provisioning_state = None


class ProjectUpdate(TrackedResourceUpdate):
    """The project properties for partial update. Properties not provided in the update request will not be changed.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The geo-location where the resource lives.
    :type location: str
    :param dev_center_id: Resource Id of an associated DevCenter.
    :type dev_center_id: str
    :param description: Description of the project.
    :type description: str
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'dev_center_id': {'key': 'properties.devCenterId', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        dev_center_id: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(ProjectUpdate, self).__init__(tags=tags, location=location, **kwargs)
        self.dev_center_id = dev_center_id
        self.description = description


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class Sku(msrest.serialization.Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU.
    :type name: str
    :param tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Possible values include: "Free", "Basic",
     "Standard", "Premium".
    :type tier: str or ~fidalgo.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for the same SKU, then
     that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class SkuListResult(msrest.serialization.Model):
    """Results of the Microsoft.Fidalgo SKU list operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: Current page of results.
    :vartype value: list[~fidalgo.models.Sku]
    :ivar next_link: URL to get the next set of results if there are any.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Sku]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SkuListResult, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~fidalgo.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~fidalgo.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UserAssignedIdentitiesValue(msrest.serialization.Model):
    """Additional properties for User-assigned Managed identities.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal id of user assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client id of user assigned identity.
    :vartype client_id: str
    """

    _validation = {
        'principal_id': {'readonly': True},
        'client_id': {'readonly': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'client_id': {'key': 'clientId', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(UserAssignedIdentitiesValue, self).__init__(**kwargs)
        self.principal_id = None
        self.client_id = None
