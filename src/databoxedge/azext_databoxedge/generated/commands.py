# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_databoxedge.generated._client_factory import cf_device
    data_box_edge_device = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._device_operations#DeviceOp'
        'erations.{}',
        client_factory=cf_device)
    with self.command_group('data-box-edge device', data_box_edge_device, client_factory=cf_device) as g:
        g.custom_command('list', 'data_box_edge_device_list')
        g.custom_show_command('show', 'data_box_edge_device_show')
        g.custom_command('create', 'data_box_edge_device_create', supports_no_wait=True)
        g.custom_command('update', 'data_box_edge_device_update')
        g.custom_command('delete', 'data_box_edge_device_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('download-update', 'data_box_edge_device_download_update', supports_no_wait=True)
        g.custom_command('install-update', 'data_box_edge_device_install_update', supports_no_wait=True)
        g.custom_command('scan-for-update', 'data_box_edge_device_scan_for_update', supports_no_wait=True)
        g.custom_command('show-update-summary', 'data_box_edge_device_show_update_summary')
        g.custom_wait_command('wait', 'data_box_edge_device_show')

    from azext_databoxedge.generated._client_factory import cf_alert
    data_box_edge_alert = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._alert_operations#AlertOper'
        'ations.{}',
        client_factory=cf_alert)
    with self.command_group('data-box-edge alert', data_box_edge_alert, client_factory=cf_alert) as g:
        g.custom_command('list', 'data_box_edge_alert_list')
        g.custom_show_command('show', 'data_box_edge_alert_show')

    from azext_databoxedge.generated._client_factory import cf_bandwidth_schedule
    data_box_edge_bandwidth_schedule = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._bandwidth_schedule_operati'
        'ons#BandwidthScheduleOperations.{}',
        client_factory=cf_bandwidth_schedule)
    with self.command_group('data-box-edge bandwidth-schedule', data_box_edge_bandwidth_schedule,
                            client_factory=cf_bandwidth_schedule) as g:
        g.custom_command('list', 'data_box_edge_bandwidth_schedule_list')
        g.custom_show_command('show', 'data_box_edge_bandwidth_schedule_show')
        g.custom_command('create', 'data_box_edge_bandwidth_schedule_create', supports_no_wait=True)
        g.custom_command('update', 'data_box_edge_bandwidth_schedule_update', supports_no_wait=True)
        g.custom_command('delete', 'data_box_edge_bandwidth_schedule_delete', supports_no_wait=True,
                         confirmation=True)
        g.custom_wait_command('wait', 'data_box_edge_bandwidth_schedule_show')

    from azext_databoxedge.generated._client_factory import cf_job
    data_box_edge_job = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._job_operations#JobOperatio'
        'ns.{}',
        client_factory=cf_job)
    with self.command_group('data-box-edge', data_box_edge_job, client_factory=cf_job, is_preview=True) as g:
        g.custom_command('show-job', 'data_box_edge_show_job')

    from azext_databoxedge.generated._client_factory import cf_node
    data_box_edge_node = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._node_operations#NodeOperat'
        'ions.{}',
        client_factory=cf_node)
    with self.command_group('data-box-edge', data_box_edge_node, client_factory=cf_node, is_preview=True) as g:
        g.custom_command('list-node', 'data_box_edge_list_node')

    from azext_databoxedge.generated._client_factory import cf_order
    data_box_edge_order = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._order_operations#OrderOper'
        'ations.{}',
        client_factory=cf_order)
    with self.command_group('data-box-edge order', data_box_edge_order, client_factory=cf_order) as g:
        g.custom_command('list', 'data_box_edge_order_list')
        g.custom_show_command('show', 'data_box_edge_order_show')
        g.custom_command('create', 'data_box_edge_order_create', supports_no_wait=True)
        g.custom_command('update', 'data_box_edge_order_update', supports_no_wait=True)
        g.custom_command('delete', 'data_box_edge_order_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'data_box_edge_order_show')

    from azext_databoxedge.generated._client_factory import cf_sku
    data_box_edge_sku = CliCommandType(
        operations_tmpl='azext_databoxedge.vendored_sdks.databoxedge.v2019_08_01.operations._sku_operations#SkuOperatio'
        'ns.{}',
        client_factory=cf_sku)
    with self.command_group('data-box-edge', data_box_edge_sku, client_factory=cf_sku, is_preview=True) as g:
        g.custom_command('list-sku', 'data_box_edge_list_sku')
