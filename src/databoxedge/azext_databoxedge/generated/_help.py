# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.help_files import helps


helps['databoxedge device'] = """
    type: group
    short-summary: databoxedge device
"""

helps['databoxedge device list'] = """
    type: command
    short-summary: "Gets all the Data Box Edge/Data Box Gateway devices in a resource group. And Gets all the Data Box \
Edge/Data Box Gateway devices in a subscription."
    examples:
      - name: DataBoxEdgeDeviceGetByResourceGroup
        text: |-
               az databoxedge device list --resource-group "GroupForEdgeAutomation"
      - name: DataBoxEdgeDeviceGetBySubscription
        text: |-
               az databoxedge device list
"""

helps['databoxedge device show'] = """
    type: command
    short-summary: "Gets the properties of the Data Box Edge/Data Box Gateway device."
    examples:
      - name: DataBoxEdgeDeviceGetByName
        text: |-
               az databoxedge device show --name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device create'] = """
    type: command
    short-summary: "Create a Data Box Edge/Data Box Gateway resource."
    parameters:
      - name: --sku
        short-summary: "The SKU type."
        long-summary: |
            Usage: --sku name=XX tier=XX

            name: SKU name.
            tier: The SKU tier. This is based on the SKU name.
    examples:
      - name: DataBoxEdgeDevicePut
        text: |-
               az databoxedge device create --location "eastus" --sku name="Edge" tier="Standard" --name \
"testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device update'] = """
    type: command
    short-summary: "Modifies a Data Box Edge/Data Box Gateway resource."
    examples:
      - name: DataBoxEdgeDevicePatch
        text: |-
               az databoxedge device update --name "testedgedevice" --tags Key1="value1" Key2="value2" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device delete'] = """
    type: command
    short-summary: "Deletes the Data Box Edge/Data Box Gateway device."
    examples:
      - name: DataBoxEdgeDeviceDelete
        text: |-
               az databoxedge device delete --name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device create-or-update-security-setting'] = """
    type: command
    short-summary: "Updates the security settings on a Data Box Edge/Data Box Gateway device."
    parameters:
      - name: --device-admin-password
        short-summary: "Device administrator password as an encrypted string (encrypted using RSA PKCS #1) is used to \
sign into the  local web UI of the device. The Actual password should have at least 8 characters that are a \
combination of  uppercase, lowercase, numeric, and special characters."
        long-summary: |
            Usage: --device-admin-password value=XX encryption-cert-thumbprint=XX encryption-algorithm=XX

            value: Required. The value of the secret.
            encryption-cert-thumbprint: Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, \
it will be null.
            encryption-algorithm: Required. The algorithm used to encrypt "Value".
    examples:
      - name: CreateOrUpdateSecuritySettings
        text: |-
               az databoxedge device create-or-update-security-setting --name "testedgedevice" --resource-group \
"AzureVM" --device-admin-password encryption-algorithm="AES256" encryption-cert-thumbprint="7DCBDFC44ED968D232C9A998FC1\
05B5C70E84BE0" value="jJ5MvXa/AEWvwxviS92uCjatCXeyLYTy8jx/k105MjQRXT7i6Do8qpEcQ8d+OBbwmQTnwKW0CYyzzVRCc0uZcPCf6PsWtP4l6\
wvcKGAP66PwK68eEkTUOmp+wUHc4hk02kWmTWeAjBZkuDBP3xK1RnZo95g2RE4i1UgKNP5BEKCLd71O104DW3AWW41mh9XLWNOaxw+VjQY7wmvlE6XkvpkM\
hcGuha2u7lx8zi9ZkcMvJVYDYK36Fb/K3KhBAmDjjDmVq04jtBlcSTXQObt0nlj4BwGGtdrpeIpr67zqr5i3cPm6e6AleIaIhp6sI/uyGSMiT3oev2eg49u\
2ii7kVA=="
"""

helps['databoxedge device download-update'] = """
    type: command
    short-summary: "Downloads the updates on a Data Box Edge/Data Box Gateway device."
    examples:
      - name: DownloadUpdatesPost
        text: |-
               az databoxedge device download-update --name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device get-extended-information'] = """
    type: command
    short-summary: "Gets additional information for the specified Data Box Edge/Data Box Gateway device."
    examples:
      - name: ExtendedInfoPost
        text: |-
               az databoxedge device get-extended-information --name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge device get-network-setting'] = """
    type: command
    short-summary: "Gets the network settings of the specified Data Box Edge/Data Box Gateway device."
    examples:
      - name: NetworkSettingsGet
        text: |-
               az databoxedge device get-network-setting --name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge device get-update-summary'] = """
    type: command
    short-summary: "Gets information about the availability of updates based on the last scan of the device. It also \
gets information about any ongoing download or install jobs on the device."
    examples:
      - name: UpdateSummaryGet
        text: |-
               az databoxedge device get-update-summary --name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge device install-update'] = """
    type: command
    short-summary: "Installs the updates on the Data Box Edge/Data Box Gateway device."
    examples:
      - name: InstallUpdatesPost
        text: |-
               az databoxedge device install-update --name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device scan-for-update'] = """
    type: command
    short-summary: "Scans for updates on a Data Box Edge/Data Box Gateway device."
    examples:
      - name: ScanForUpdatesPost
        text: |-
               az databoxedge device scan-for-update --name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device upload-certificate'] = """
    type: command
    short-summary: "Uploads registration certificate for the device."
    examples:
      - name: UploadCertificatePost
        text: |-
               az databoxedge device upload-certificate --name "testedgedevice" --certificate \
"MIIC9DCCAdygAwIBAgIQWJae7GNjiI9Mcv/gJyrOPTANBgkqhkiG9w0BAQUFADASMRAwDgYDVQQDDAdXaW5kb3dzMB4XDTE4MTEyNzAwMTA0NVoXDTIxMT\
EyODAwMTA0NVowEjEQMA4GA1UEAwwHV2luZG93czCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKxkRExqxf0qH1avnyORptIbRC2yQwqe3EIbJ\
2FPKr5jtAppGeX/dGKrFSnX+7/0HFr77aJHafdpEAtOiLyJ4zCAVs0obZCCIq4qJdmjYUTU0UXH/w/YzXfQA0d9Zh9AN+NJBX9xj05NzgsT24fkgsK2v6mW\
JQXT7YcWAsl5sEYPnx1e+MrupNyVSL/RUJmrS+etJSysHtFeWRhsUhVAs1DD5ExJvBLU3WH0IsojEvpXcjrutB5/MDQNrd/StGI6WovoSSPH7FyT9tgERx+\
q+Yg3YUGzfaIPCctlrRGehcdtzdNoKd0rsX62yCq0U6POoSfwe22NJu41oAUMd7e6R8cCAwEAAaNGMEQwEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBB\
YEFDd0VxnS3LnMIfwc7xW4b4IZWG5GMA4GA1UdDwEB/wQEAwIFIDANBgkqhkiG9w0BAQUFAAOCAQEAPQRby2u9celvtvL/DLEb5Vt3/tPStRQC5MyTD62L5\
RT/q8E6EMCXVZNkXF5WlWucLJi/18tY+9PNgP9xWLJh7kpSWlWdi9KPtwMqKDlEH8L2TnQdjimt9XuiCrTnoFy/1X2BGLY/rCaUJNSd15QCkz2xeW+Z+YSk\
2GwAc/A/4YfNpqSIMfNuPrT76o02VdD9WmJUA3fS/HY0sU9qgQRS/3F5/0EPS+HYQ0SvXCK9tggcCd4O050ytNBMJC9qMOJ7yE0iOrFfOJSCfDAuPhn/rHF\
h79Kn1moF+/CE+nc0/2RPiLC8r54/rt5dYyyxJDfXg0a3VrrX39W69WZGW5OXiw==" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge device wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge device is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge device is successfully created.
        text: |-
               az databoxedge device wait --name "testedgedevice" --resource-group "GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge device is successfully deleted.
        text: |-
               az databoxedge device wait --name "testedgedevice" --resource-group "GroupForEdgeAutomation" --deleted
"""

helps['databoxedge alert'] = """
    type: group
    short-summary: databoxedge alert
"""

helps['databoxedge alert list'] = """
    type: command
    short-summary: "Gets all the alerts for a Data Box Edge/Data Box Gateway device."
    examples:
      - name: AlertGetAllInDevice
        text: |-
               az databoxedge alert list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge alert show'] = """
    type: command
    short-summary: "Gets an alert by name."
    examples:
      - name: AlertGet
        text: |-
               az databoxedge alert show --name "159a00c7-8543-4343-9435-263ac87df3bb" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge bandwidth-schedule'] = """
    type: group
    short-summary: databoxedge bandwidth-schedule
"""

helps['databoxedge bandwidth-schedule list'] = """
    type: command
    short-summary: "Gets all the bandwidth schedules for a Data Box Edge/Data Box Gateway device."
    examples:
      - name: BandwidthScheduleGetAllInDevice
        text: |-
               az databoxedge bandwidth-schedule list --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge bandwidth-schedule show'] = """
    type: command
    short-summary: "Gets the properties of the specified bandwidth schedule."
    examples:
      - name: BandwidthScheduleGet
        text: |-
               az databoxedge bandwidth-schedule show --name "bandwidth-1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge bandwidth-schedule create'] = """
    type: command
    short-summary: "Create a bandwidth schedule."
    examples:
      - name: BandwidthSchedulePut
        text: |-
               az databoxedge bandwidth-schedule create --name "bandwidth-1" --device-name "testedgedevice" --days \
"Sunday" --days "Monday" --rate-in-mbps 100 --start "0:0:0" --stop "13:59:0" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge bandwidth-schedule update'] = """
    type: command
    short-summary: "Update a bandwidth schedule."
"""

helps['databoxedge bandwidth-schedule delete'] = """
    type: command
    short-summary: "Deletes the specified bandwidth schedule."
    examples:
      - name: BandwidthScheduleDelete
        text: |-
               az databoxedge bandwidth-schedule delete --name "bandwidth-1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge bandwidth-schedule wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge bandwidth-schedule is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge bandwidth-schedule is successfully \
created.
        text: |-
               az databoxedge bandwidth-schedule wait --name "bandwidth-1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge bandwidth-schedule is successfully \
updated.
        text: |-
               az databoxedge bandwidth-schedule wait --name "bandwidth-1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation" --updated
      - name: Pause executing next line of CLI script until the databoxedge bandwidth-schedule is successfully \
deleted.
        text: |-
               az databoxedge bandwidth-schedule wait --name "bandwidth-1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation" --deleted
"""

helps['databoxedge job'] = """
    type: group
    short-summary: databoxedge job
"""

helps['databoxedge job show'] = """
    type: command
    short-summary: "Gets the details of a specified job on a Data Box Edge/Data Box Gateway device."
    examples:
      - name: JobsGet
        text: |-
               az databoxedge job show --name "159a00c7-8543-4343-9435-263ac87df3bb" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge node'] = """
    type: group
    short-summary: databoxedge node
"""

helps['databoxedge node list'] = """
    type: command
    short-summary: "Gets all the nodes currently configured under this Data Box Edge device."
    examples:
      - name: NodesGetAllInDevice
        text: |-
               az databoxedge node list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge operation-status'] = """
    type: group
    short-summary: databoxedge operation-status
"""

helps['databoxedge operation-status show'] = """
    type: command
    short-summary: "Gets the details of a specified job on a Data Box Edge/Data Box Gateway device."
    examples:
      - name: OperationsStatusGet
        text: |-
               az databoxedge operation-status show --name "159a00c7-8543-4343-9435-263ac87df3bb" --device-name \
"testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge order'] = """
    type: group
    short-summary: databoxedge order
"""

helps['databoxedge order list'] = """
    type: command
    short-summary: "Lists all the orders related to a Data Box Edge/Data Box Gateway device."
    examples:
      - name: OrderGetAllInDevice
        text: |-
               az databoxedge order list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge order show'] = """
    type: command
    short-summary: "Gets a specific order by name."
    examples:
      - name: OrderGet
        text: |-
               az databoxedge order show --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge order create'] = """
    type: command
    short-summary: "Create an order."
    parameters:
      - name: --contact-information
        short-summary: "The contact details."
        long-summary: |
            Usage: --contact-information contact-person=XX company-name=XX phone=XX email-list=XX

            contact-person: Required. The contact person name.
            company-name: Required. The name of the company.
            phone: Required. The phone number.
            email-list: Required. The email list.
      - name: --shipping-address
        short-summary: "The shipping address."
        long-summary: |
            Usage: --shipping-address address-line1=XX address-line2=XX address-line3=XX postal-code=XX city=XX \
state=XX country=XX

            address-line1: Required. The address line1.
            address-line2: The address line2.
            address-line3: The address line3.
            postal-code: Required. The postal code.
            city: Required. The city name.
            state: Required. The state name.
            country: Required. The country name.
    examples:
      - name: OrderPut
        text: |-
               az databoxedge order create --device-name "testedgedevice" --contact-information \
company-name="Microsoft" contact-person="John Mcclane" email-list="john@microsoft.com" phone="(800) 426-9400" \
--shipping-address address-line1="Microsoft Corporation" address-line2="One Microsoft Way" address-line3="Redmond" \
city="WA" country="USA" postal-code="98052" state="WA" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge order update'] = """
    type: command
    short-summary: "Update an order."
    parameters:
      - name: --contact-information
        short-summary: "The contact details."
        long-summary: |
            Usage: --contact-information contact-person=XX company-name=XX phone=XX email-list=XX

            contact-person: Required. The contact person name.
            company-name: Required. The name of the company.
            phone: Required. The phone number.
            email-list: Required. The email list.
      - name: --shipping-address
        short-summary: "The shipping address."
        long-summary: |
            Usage: --shipping-address address-line1=XX address-line2=XX address-line3=XX postal-code=XX city=XX \
state=XX country=XX

            address-line1: Required. The address line1.
            address-line2: The address line2.
            address-line3: The address line3.
            postal-code: Required. The postal code.
            city: Required. The city name.
            state: Required. The state name.
            country: Required. The country name.
"""

helps['databoxedge order delete'] = """
    type: command
    short-summary: "Deletes the order related to the device."
    examples:
      - name: OrderDelete
        text: |-
               az databoxedge order delete --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge order wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge order is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge order is successfully created.
        text: |-
               az databoxedge order wait --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation" \
--created
      - name: Pause executing next line of CLI script until the databoxedge order is successfully updated.
        text: |-
               az databoxedge order wait --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation" \
--updated
      - name: Pause executing next line of CLI script until the databoxedge order is successfully deleted.
        text: |-
               az databoxedge order wait --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation" \
--deleted
"""

helps['databoxedge role'] = """
    type: group
    short-summary: databoxedge role
"""

helps['databoxedge role list'] = """
    type: command
    short-summary: "Lists all the roles configured in a Data Box Edge/Data Box Gateway device."
    examples:
      - name: RoleGetAllInDevice
        text: |-
               az databoxedge role list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge role show'] = """
    type: command
    short-summary: "Gets a specific role by name."
    examples:
      - name: RoleGet
        text: |-
               az databoxedge role show --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge role create'] = """
    type: command
    short-summary: "Create a role."
    examples:
      - name: RolePut
        text: |-
               az databoxedge role create --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --role "{\\"kind\\":\\"IOT\\",\\"properties\\":{\\"hostPlatform\\":\\"Linux\\",\\"ioTDeviceDet\
ails\\":{\\"authentication\\":{\\"symmetricKey\\":{\\"connectionString\\":{\\"encryptionAlgorithm\\":\\"AES256\\",\\"en\
cryptionCertThumbprint\\":\\"348586569999244\\",\\"value\\":\\"Encrypted<<HostName=iothub.azure-devices.net;DeviceId=io\
tDevice;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQwd8=>>\\"}}},\\"deviceId\\":\\"iotdevice\\",\\"ioTHostHub\
\\":\\"iothub.azure-devices.net\\"},\\"ioTEdgeDeviceDetails\\":{\\"authentication\\":{\\"symmetricKey\\":{\\"connection\
String\\":{\\"encryptionAlgorithm\\":\\"AES256\\",\\"encryptionCertThumbprint\\":\\"1245475856069999244\\",\\"value\\":\
\\"Encrypted<<HostName=iothub.azure-devices.net;DeviceId=iotEdge;SharedAccessKey=2C750FscEas3JmQ8Bnui5yQWZPyml0/UiRt1bQ\
wd8=>>\\"}}},\\"deviceId\\":\\"iotEdge\\",\\"ioTHostHub\\":\\"iothub.azure-devices.net\\"},\\"roleStatus\\":\\"Enabled\
\\",\\"shareMappings\\":[]}}"
"""

helps['databoxedge role update'] = """
    type: command
    short-summary: "Update a role."
"""

helps['databoxedge role delete'] = """
    type: command
    short-summary: "Deletes the role on the device."
    examples:
      - name: RoleDelete
        text: |-
               az databoxedge role delete --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge role wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge role is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge role is successfully created.
        text: |-
               az databoxedge role wait --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge role is successfully updated.
        text: |-
               az databoxedge role wait --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --updated
      - name: Pause executing next line of CLI script until the databoxedge role is successfully deleted.
        text: |-
               az databoxedge role wait --name "IoTRole1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --deleted
"""

helps['databoxedge share'] = """
    type: group
    short-summary: databoxedge share
"""

helps['databoxedge share list'] = """
    type: command
    short-summary: "Lists all the shares in a Data Box Edge/Data Box Gateway device."
    examples:
      - name: ShareGetAllInDevice
        text: |-
               az databoxedge share list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge share show'] = """
    type: command
    short-summary: "Gets a share by name."
    examples:
      - name: ShareGet
        text: |-
               az databoxedge share show --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge share create'] = """
    type: command
    short-summary: "Creates a new share or updates an existing share on the device."
    parameters:
      - name: --azure-container-info
        short-summary: "Azure container mapping for the share."
        long-summary: |
            Usage: --azure-container-info storage-account-credential-id=XX container-name=XX data-format=XX

            storage-account-credential-id: Required. ID of the storage account credential used to access storage.
            container-name: Required. Container name (Based on the data format specified, this represents the name of \
Azure Files/Page blob/Block blob).
            data-format: Required. Storage format used for the file represented by the share.
      - name: --user-access-rights
        short-summary: "Mapping of users and corresponding access rights on the share (required for SMB protocol)."
        long-summary: |
            Usage: --user-access-rights user-id=XX access-type=XX

            user-id: Required. User ID (already existing in the device).
            access-type: Required. Type of access to be allowed for the user.

            Multiple actions can be specified by using more than one --user-access-rights argument.
      - name: --client-access-rights
        short-summary: "List of IP addresses and corresponding access rights on the share(required for NFS protocol)."
        long-summary: |
            Usage: --client-access-rights client=XX access-permission=XX

            client: Required. IP of the client.
            access-permission: Required. Type of access to be allowed for the client.

            Multiple actions can be specified by using more than one --client-access-rights argument.
      - name: --refresh-details
        short-summary: "Details of the refresh job on this share."
        long-summary: |
            Usage: --refresh-details in-progress-refresh-job-id=XX last-completed-refresh-job-time-in-utc=XX \
error-manifest-file=XX last-job=XX

            in-progress-refresh-job-id: If a refresh job is currently in progress on this share or container, this \
field indicates the ARM resource ID of that job. The field is empty if no job is in progress.
            last-completed-refresh-job-time-in-utc: Indicates the completed time for the last refresh job on this \
particular share or container, if any.This could be a failed job or a successful job.
            error-manifest-file: Indicates the relative path of the error xml for the last refresh job on this \
particular share or container, if any. This could be a failed job or a successful job.
            last-job: Indicates the id of the last refresh job on this particular share or container,if any. This \
could be a failed job or a successful job.
    examples:
      - name: SharePut
        text: |-
               az databoxedge share create --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --description "" --access-protocol "SMB" --azure-container-info \
container-name="testContainerSMB" data-format="BlockBlob" storage-account-credential-id="/subscriptions/4385cf00-2d3a-4\
25a-832f-f4285b1c9dce/resourceGroups/GroupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedge\
device/storageAccountCredentials/sac1" --data-policy "Cloud" --monitoring-status "Enabled" --share-status "Online" \
--user-access-rights access-type="Change" user-id="/subscriptions/4385cf00-2d3a-425a-832f-f4285b1c9dce/resourceGroups/G\
roupForEdgeAutomation/providers/Microsoft.DataBoxEdge/dataBoxEdgeDevices/testedgedevice/users/user2"
"""

helps['databoxedge share update'] = """
    type: command
    short-summary: "Update a new share or updates an existing share on the device."
    parameters:
      - name: --azure-container-info
        short-summary: "Azure container mapping for the share."
        long-summary: |
            Usage: --azure-container-info storage-account-credential-id=XX container-name=XX data-format=XX

            storage-account-credential-id: Required. ID of the storage account credential used to access storage.
            container-name: Required. Container name (Based on the data format specified, this represents the name of \
Azure Files/Page blob/Block blob).
            data-format: Required. Storage format used for the file represented by the share.
      - name: --user-access-rights
        short-summary: "Mapping of users and corresponding access rights on the share (required for SMB protocol)."
        long-summary: |
            Usage: --user-access-rights user-id=XX access-type=XX

            user-id: Required. User ID (already existing in the device).
            access-type: Required. Type of access to be allowed for the user.

            Multiple actions can be specified by using more than one --user-access-rights argument.
      - name: --client-access-rights
        short-summary: "List of IP addresses and corresponding access rights on the share(required for NFS protocol)."
        long-summary: |
            Usage: --client-access-rights client=XX access-permission=XX

            client: Required. IP of the client.
            access-permission: Required. Type of access to be allowed for the client.

            Multiple actions can be specified by using more than one --client-access-rights argument.
      - name: --refresh-details
        short-summary: "Details of the refresh job on this share."
        long-summary: |
            Usage: --refresh-details in-progress-refresh-job-id=XX last-completed-refresh-job-time-in-utc=XX \
error-manifest-file=XX last-job=XX

            in-progress-refresh-job-id: If a refresh job is currently in progress on this share or container, this \
field indicates the ARM resource ID of that job. The field is empty if no job is in progress.
            last-completed-refresh-job-time-in-utc: Indicates the completed time for the last refresh job on this \
particular share or container, if any.This could be a failed job or a successful job.
            error-manifest-file: Indicates the relative path of the error xml for the last refresh job on this \
particular share or container, if any. This could be a failed job or a successful job.
            last-job: Indicates the id of the last refresh job on this particular share or container,if any. This \
could be a failed job or a successful job.
"""

helps['databoxedge share delete'] = """
    type: command
    short-summary: "Deletes the share on the Data Box Edge/Data Box Gateway device."
    examples:
      - name: ShareDelete
        text: |-
               az databoxedge share delete --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge share refresh'] = """
    type: command
    short-summary: "Refreshes the share metadata with the data from the cloud."
    examples:
      - name: ShareRefreshPost
        text: |-
               az databoxedge share refresh --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge share wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge share is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge share is successfully created.
        text: |-
               az databoxedge share wait --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge share is successfully updated.
        text: |-
               az databoxedge share wait --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --updated
      - name: Pause executing next line of CLI script until the databoxedge share is successfully deleted.
        text: |-
               az databoxedge share wait --name "smbshare" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --deleted
"""

helps['databoxedge storage-account-credentials'] = """
    type: group
    short-summary: databoxedge storage-account-credentials
"""

helps['databoxedge storage-account-credentials list'] = """
    type: command
    short-summary: "Gets all the storage account credentials in a Data Box Edge/Data Box Gateway device."
    examples:
      - name: SACGetAllInDevice
        text: |-
               az databoxedge storage-account-credentials list --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge storage-account-credentials show'] = """
    type: command
    short-summary: "Gets the properties of the specified storage account credential."
    examples:
      - name: SACGet
        text: |-
               az databoxedge storage-account-credentials show --name "sac1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge storage-account-credentials delete'] = """
    type: command
    short-summary: "Deletes the storage account credential."
    examples:
      - name: SACDelete
        text: |-
               az databoxedge storage-account-credentials delete --name "sac1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge storage-account-credentials wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge storage-account-credentials \
is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge storage-account-credentials is \
successfully deleted.
        text: |-
               az databoxedge storage-account-credentials wait --name "sac1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation" --deleted
"""

helps['databoxedge storage-account'] = """
    type: group
    short-summary: databoxedge storage-account
"""

helps['databoxedge storage-account list'] = """
    type: command
    short-summary: "Lists all the storage accounts in a Data Box Edge/Data Box Gateway device."
    examples:
      - name: StorageAccountGetAllInDevice
        text: |-
               az databoxedge storage-account list --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge storage-account show'] = """
    type: command
    short-summary: "Gets a StorageAccount by name."
    examples:
      - name: StorageAccountGet
        text: |-
               az databoxedge storage-account show --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --name "blobstorageaccount1"
"""

helps['databoxedge storage-account delete'] = """
    type: command
    short-summary: "Deletes the StorageAccount on the Data Box Edge/Data Box Gateway device."
    examples:
      - name: StorageAccountDelete
        text: |-
               az databoxedge storage-account delete --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --name "storageaccount1"
"""

helps['databoxedge storage-account wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge storage-account is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge storage-account is successfully deleted.
        text: |-
               az databoxedge storage-account wait --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --name "blobstorageaccount1" --deleted
"""

helps['databoxedge container'] = """
    type: group
    short-summary: databoxedge container
"""

helps['databoxedge container list'] = """
    type: command
    short-summary: "Lists all the containers of a storage Account in a Data Box Edge/Data Box Gateway device."
    examples:
      - name: ContainerListAllInDevice
        text: |-
               az databoxedge container list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation" \
--storage-account-name "storageaccount1"
"""

helps['databoxedge container show'] = """
    type: command
    short-summary: "Gets a container by name."
    examples:
      - name: ContainerGet
        text: |-
               az databoxedge container show --name "blobcontainer1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --storage-account-name "storageaccount1"
"""

helps['databoxedge container create'] = """
    type: command
    short-summary: "Creates a new container or updates an existing container on the device."
    examples:
      - name: ContainerPut
        text: |-
               az databoxedge container create --data-format "BlockBlob" --name "blobcontainer1" --device-name \
"testedgedevice" --resource-group "GroupForEdgeAutomation" --storage-account-name "storageaccount1"
"""

helps['databoxedge container update'] = """
    type: command
    short-summary: "Update a new container or updates an existing container on the device."
"""

helps['databoxedge container delete'] = """
    type: command
    short-summary: "Deletes the container on the Data Box Edge/Data Box Gateway device."
    examples:
      - name: ContainerDelete
        text: |-
               az databoxedge container delete --name "blobcontainer1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --storage-account-name "storageaccount1"
"""

helps['databoxedge container refresh'] = """
    type: command
    short-summary: "Refreshes the container metadata with the data from the cloud."
    examples:
      - name: ContainerRefresh
        text: |-
               az databoxedge container refresh --name "blobcontainer1" --device-name "testedgedevice" \
--resource-group "GroupForEdgeAutomation" --storage-account-name "storageaccount1"
"""

helps['databoxedge container wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge container is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge container is successfully created.
        text: |-
               az databoxedge container wait --name "blobcontainer1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --storage-account-name "storageaccount1" --created
      - name: Pause executing next line of CLI script until the databoxedge container is successfully updated.
        text: |-
               az databoxedge container wait --name "blobcontainer1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --storage-account-name "storageaccount1" --updated
      - name: Pause executing next line of CLI script until the databoxedge container is successfully deleted.
        text: |-
               az databoxedge container wait --name "blobcontainer1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --storage-account-name "storageaccount1" --deleted
"""

helps['databoxedge trigger'] = """
    type: group
    short-summary: databoxedge trigger
"""

helps['databoxedge trigger list'] = """
    type: command
    short-summary: "Lists all the triggers configured in the device."
    examples:
      - name: TriggerGetAllInDevice
        text: |-
               az databoxedge trigger list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge trigger show'] = """
    type: command
    short-summary: "Get a specific trigger by name."
    examples:
      - name: TriggerGet
        text: |-
               az databoxedge trigger show --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge trigger create'] = """
    type: command
    short-summary: "Create a trigger."
    parameters:
      - name: --file-event-trigger
        short-summary: "Trigger details."
        long-summary: |
            Usage: --file-event-trigger custom-context-tag=XX role-id=XX share-id=XX kind=XX

            custom-context-tag: A custom context tag typically used to correlate the trigger against its usage. For \
example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the \
name or the image URL of the module.
            role-id: Required. Compute role ID.
            share-id: Required. File share ID.
            kind: Required. Trigger Kind.
      - name: --periodic-timer-event-trigger
        short-summary: "Trigger details."
        long-summary: |
            Usage: --periodic-timer-event-trigger custom-context-tag=XX role-id=XX start-time=XX schedule=XX topic=XX \
kind=XX

            custom-context-tag: A custom context tag typically used to correlate the trigger against its usage. For \
example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the \
name or the image URL of the module.
            role-id: Required. Compute role ID.
            start-time: Required. The time of the day that results in a valid trigger. Schedule is computed with \
reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device \
timezone. The value will always be returned as UTC time.
            schedule: Required. Periodic frequency at which timer event needs to be raised. Supports daily, hourly, \
minutes, and seconds.
            topic: Topic where periodic events are published to IoT device.
            kind: Required. Trigger Kind.
    examples:
      - name: TriggerPut
        text: |-
               az databoxedge trigger create --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --file-event-trigger custom-context-tag="CustomContextTags-1235346475"
"""

helps['databoxedge trigger update'] = """
    type: command
    short-summary: "Update a trigger."
    parameters:
      - name: --file-event-trigger
        short-summary: "Trigger details."
        long-summary: |
            Usage: --file-event-trigger custom-context-tag=XX role-id=XX share-id=XX kind=XX

            custom-context-tag: A custom context tag typically used to correlate the trigger against its usage. For \
example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the \
name or the image URL of the module.
            role-id: Required. Compute role ID.
            share-id: Required. File share ID.
            kind: Required. Trigger Kind.
      - name: --periodic-timer-event-trigger
        short-summary: "Trigger details."
        long-summary: |
            Usage: --periodic-timer-event-trigger custom-context-tag=XX role-id=XX start-time=XX schedule=XX topic=XX \
kind=XX

            custom-context-tag: A custom context tag typically used to correlate the trigger against its usage. For \
example, if a periodic timer trigger is intended for certain specific IoT modules in the device, the tag can be the \
name or the image URL of the module.
            role-id: Required. Compute role ID.
            start-time: Required. The time of the day that results in a valid trigger. Schedule is computed with \
reference to the time specified upto seconds. If timezone is not specified the time will considered to be in device \
timezone. The value will always be returned as UTC time.
            schedule: Required. Periodic frequency at which timer event needs to be raised. Supports daily, hourly, \
minutes, and seconds.
            topic: Topic where periodic events are published to IoT device.
            kind: Required. Trigger Kind.
"""

helps['databoxedge trigger delete'] = """
    type: command
    short-summary: "Deletes the trigger on the gateway device."
    examples:
      - name: TriggerDelete
        text: |-
               az databoxedge trigger delete --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge trigger wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge trigger is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge trigger is successfully created.
        text: |-
               az databoxedge trigger wait --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge trigger is successfully updated.
        text: |-
               az databoxedge trigger wait --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --updated
      - name: Pause executing next line of CLI script until the databoxedge trigger is successfully deleted.
        text: |-
               az databoxedge trigger wait --name "trigger1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --deleted
"""

helps['databoxedge user'] = """
    type: group
    short-summary: databoxedge user
"""

helps['databoxedge user list'] = """
    type: command
    short-summary: "Gets all the users registered on a Data Box Edge/Data Box Gateway device."
    examples:
      - name: UserGetAllInDevice
        text: |-
               az databoxedge user list --device-name "testedgedevice" --resource-group "GroupForEdgeAutomation"
"""

helps['databoxedge user show'] = """
    type: command
    short-summary: "Gets the properties of the specified user."
    examples:
      - name: UserGet
        text: |-
               az databoxedge user show --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge user create'] = """
    type: command
    short-summary: "Creates a new user or updates an existing user's information on a Data Box Edge/Data Box Gateway \
device."
    parameters:
      - name: --encrypted-password
        short-summary: "The password details."
        long-summary: |
            Usage: --encrypted-password value=XX encryption-cert-thumbprint=XX encryption-algorithm=XX

            value: Required. The value of the secret.
            encryption-cert-thumbprint: Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, \
it will be null.
            encryption-algorithm: Required. The algorithm used to encrypt "Value".
      - name: --share-access-rights
        short-summary: "List of shares that the user has rights on. This field should not be specified during user \
creation."
        long-summary: |
            Usage: --share-access-rights share-id=XX access-type=XX

            share-id: Required. The share ID.
            access-type: Required. Type of access to be allowed on the share for this user.

            Multiple actions can be specified by using more than one --share-access-rights argument.
    examples:
      - name: UserPut
        text: |-
               az databoxedge user create --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --encrypted-password encryption-algorithm="None" encryption-cert-thumbprint="blah" \
value="Password@1" --user-type "Share"
"""

helps['databoxedge user update'] = """
    type: command
    short-summary: "Update a new user or updates an existing user's information on a Data Box Edge/Data Box Gateway \
device."
    parameters:
      - name: --encrypted-password
        short-summary: "The password details."
        long-summary: |
            Usage: --encrypted-password value=XX encryption-cert-thumbprint=XX encryption-algorithm=XX

            value: Required. The value of the secret.
            encryption-cert-thumbprint: Thumbprint certificate used to encrypt \"Value\". If the value is unencrypted, \
it will be null.
            encryption-algorithm: Required. The algorithm used to encrypt "Value".
      - name: --share-access-rights
        short-summary: "List of shares that the user has rights on. This field should not be specified during user \
creation."
        long-summary: |
            Usage: --share-access-rights share-id=XX access-type=XX

            share-id: Required. The share ID.
            access-type: Required. Type of access to be allowed on the share for this user.

            Multiple actions can be specified by using more than one --share-access-rights argument.
"""

helps['databoxedge user delete'] = """
    type: command
    short-summary: "Deletes the user on a databox edge/gateway device."
    examples:
      - name: UserDelete
        text: |-
               az databoxedge user delete --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation"
"""

helps['databoxedge user wait'] = """
    type: command
    short-summary: Place the CLI in a waiting state until a condition of the databoxedge user is met.
    examples:
      - name: Pause executing next line of CLI script until the databoxedge user is successfully created.
        text: |-
               az databoxedge user wait --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --created
      - name: Pause executing next line of CLI script until the databoxedge user is successfully updated.
        text: |-
               az databoxedge user wait --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --updated
      - name: Pause executing next line of CLI script until the databoxedge user is successfully deleted.
        text: |-
               az databoxedge user wait --name "user1" --device-name "testedgedevice" --resource-group \
"GroupForEdgeAutomation" --deleted
"""

helps['databoxedge sku'] = """
    type: group
    short-summary: databoxedge sku
"""

helps['databoxedge sku list'] = """
    type: command
    short-summary: "List all the available Skus in the region and information related to them."
    examples:
      - name: ListSkus
        text: |-
               az databoxedge sku list
"""
