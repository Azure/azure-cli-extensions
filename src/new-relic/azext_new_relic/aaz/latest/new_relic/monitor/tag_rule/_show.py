# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "new-relic monitor tag-rule show",
)
class Show(AAZCommand):
    """Get a TagRule

    :example: Get a TagRule.
        az new-relic monitor tag-rule show --resource-group MyResourceGroup --monitor-name MyNewRelicMonitor --name default
    """

    _aaz_info = {
        "version": "2022-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/newrelic.observability/monitors/{}/tagrules/{}", "2022-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Name of the Monitors resource",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.rule_set_name = AAZStrArg(
            options=["-n", "--name", "--rule-set-name"],
            help="Name of the TagRule",
            required=True,
            id_part="child_name_1",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.TagRulesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class TagRulesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/tagRules/{ruleSetName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleSetName", self.ctx.args.rule_set_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.log_rules = AAZObjectType(
                serialized_name="logRules",
            )
            properties.metric_rules = AAZObjectType(
                serialized_name="metricRules",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            log_rules = cls._schema_on_200.properties.log_rules
            log_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            log_rules.send_aad_logs = AAZStrType(
                serialized_name="sendAadLogs",
            )
            log_rules.send_activity_logs = AAZStrType(
                serialized_name="sendActivityLogs",
            )
            log_rules.send_subscription_logs = AAZStrType(
                serialized_name="sendSubscriptionLogs",
            )

            filtering_tags = cls._schema_on_200.properties.log_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _ShowHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            metric_rules = cls._schema_on_200.properties.metric_rules
            metric_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            metric_rules.send_metrics = AAZStrType(
                serialized_name="sendMetrics",
            )
            metric_rules.user_email = AAZStrType(
                serialized_name="userEmail",
            )

            filtering_tags = cls._schema_on_200.properties.metric_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _ShowHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_filtering_tag_read = None

    @classmethod
    def _build_schema_filtering_tag_read(cls, _schema):
        if cls._schema_filtering_tag_read is not None:
            _schema.action = cls._schema_filtering_tag_read.action
            _schema.name = cls._schema_filtering_tag_read.name
            _schema.value = cls._schema_filtering_tag_read.value
            return

        cls._schema_filtering_tag_read = _schema_filtering_tag_read = AAZObjectType()

        filtering_tag_read = _schema_filtering_tag_read
        filtering_tag_read.action = AAZStrType()
        filtering_tag_read.name = AAZStrType()
        filtering_tag_read.value = AAZStrType()

        _schema.action = cls._schema_filtering_tag_read.action
        _schema.name = cls._schema_filtering_tag_read.name
        _schema.value = cls._schema_filtering_tag_read.value


__all__ = ["Show"]
