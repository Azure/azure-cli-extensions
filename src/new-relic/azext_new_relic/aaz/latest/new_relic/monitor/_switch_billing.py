# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "new-relic monitor switch-billing",
)
class SwitchBilling(AAZCommand):
    """Switches the billing for NewRelic monitor resource.
    """

    _aaz_info = {
        "version": "2022-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/newrelic.observability/monitors/{}/switchbilling", "2022-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Name of the Monitors resource",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Request"

        _args_schema = cls._args_schema
        _args_schema.azure_resource_id = AAZStrArg(
            options=["--azure-resource-id"],
            arg_group="Request",
            help="Azure resource Id",
        )
        _args_schema.organization_id = AAZStrArg(
            options=["--organization-id"],
            arg_group="Request",
            help="Organization id",
        )
        _args_schema.plan_data = AAZObjectArg(
            options=["--plan-data"],
            arg_group="Request",
            help="Plan details",
        )
        _args_schema.user_email = AAZStrArg(
            options=["--user-email"],
            arg_group="Request",
            help="User Email",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$",
            ),
        )

        plan_data = cls._args_schema.plan_data
        plan_data.billing_cycle = AAZStrArg(
            options=["billing-cycle"],
            help="Different billing cycles like MONTHLY/WEEKLY. this could be enum",
            enum={"MONTHLY": "MONTHLY", "WEEKLY": "WEEKLY", "YEARLY": "YEARLY"},
        )
        plan_data.effective_date = AAZDateTimeArg(
            options=["effective-date"],
            help="date when plan was applied",
        )
        plan_data.plan_details = AAZStrArg(
            options=["plan-details"],
            help="plan id as published by NewRelic",
        )
        plan_data.usage_type = AAZStrArg(
            options=["usage-type"],
            help="Different usage type like PAYG/COMMITTED. this could be enum",
            enum={"COMMITTED": "COMMITTED", "PAYG": "PAYG"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MonitorsSwitchBilling(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitorsSwitchBilling(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)
            if session.http_response.status_code in [202]:
                return self.on_202(session)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/switchBilling",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("azureResourceId", AAZStrType, ".azure_resource_id")
            _builder.set_prop("organizationId", AAZStrType, ".organization_id")
            _builder.set_prop("planData", AAZObjectType, ".plan_data")
            _builder.set_prop("userEmail", AAZStrType, ".user_email", typ_kwargs={"flags": {"required": True}})

            plan_data = _builder.get(".planData")
            if plan_data is not None:
                plan_data.set_prop("billingCycle", AAZStrType, ".billing_cycle")
                plan_data.set_prop("effectiveDate", AAZStrType, ".effective_date")
                plan_data.set_prop("planDetails", AAZStrType, ".plan_details")
                plan_data.set_prop("usageType", AAZStrType, ".usage_type")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.identity = AAZObjectType()
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.account_creation_source = AAZStrType(
                serialized_name="accountCreationSource",
            )
            properties.liftr_resource_category = AAZStrType(
                serialized_name="liftrResourceCategory",
            )
            properties.liftr_resource_preference = AAZIntType(
                serialized_name="liftrResourcePreference",
                flags={"read_only": True},
            )
            properties.marketplace_subscription_id = AAZStrType(
                serialized_name="marketplaceSubscriptionId",
                flags={"read_only": True},
            )
            properties.marketplace_subscription_status = AAZStrType(
                serialized_name="marketplaceSubscriptionStatus",
            )
            properties.monitoring_status = AAZStrType(
                serialized_name="monitoringStatus",
            )
            properties.new_relic_account_properties = AAZObjectType(
                serialized_name="newRelicAccountProperties",
            )
            properties.org_creation_source = AAZStrType(
                serialized_name="orgCreationSource",
            )
            properties.plan_data = AAZObjectType(
                serialized_name="planData",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.user_info = AAZObjectType(
                serialized_name="userInfo",
            )

            new_relic_account_properties = cls._schema_on_200.properties.new_relic_account_properties
            new_relic_account_properties.account_info = AAZObjectType(
                serialized_name="accountInfo",
            )
            new_relic_account_properties.organization_info = AAZObjectType(
                serialized_name="organizationInfo",
            )
            new_relic_account_properties.single_sign_on_properties = AAZObjectType(
                serialized_name="singleSignOnProperties",
            )
            new_relic_account_properties.user_id = AAZStrType(
                serialized_name="userId",
            )

            account_info = cls._schema_on_200.properties.new_relic_account_properties.account_info
            account_info.account_id = AAZStrType(
                serialized_name="accountId",
            )
            account_info.ingestion_key = AAZStrType(
                serialized_name="ingestionKey",
                flags={"secret": True},
            )
            account_info.region = AAZStrType()

            organization_info = cls._schema_on_200.properties.new_relic_account_properties.organization_info
            organization_info.organization_id = AAZStrType(
                serialized_name="organizationId",
            )

            single_sign_on_properties = cls._schema_on_200.properties.new_relic_account_properties.single_sign_on_properties
            single_sign_on_properties.enterprise_app_id = AAZStrType(
                serialized_name="enterpriseAppId",
            )
            single_sign_on_properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            single_sign_on_properties.single_sign_on_state = AAZStrType(
                serialized_name="singleSignOnState",
            )
            single_sign_on_properties.single_sign_on_url = AAZStrType(
                serialized_name="singleSignOnUrl",
            )

            plan_data = cls._schema_on_200.properties.plan_data
            plan_data.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
            )
            plan_data.effective_date = AAZStrType(
                serialized_name="effectiveDate",
            )
            plan_data.plan_details = AAZStrType(
                serialized_name="planDetails",
            )
            plan_data.usage_type = AAZStrType(
                serialized_name="usageType",
            )

            user_info = cls._schema_on_200.properties.user_info
            user_info.country = AAZStrType()
            user_info.email_address = AAZStrType(
                serialized_name="emailAddress",
            )
            user_info.first_name = AAZStrType(
                serialized_name="firstName",
            )
            user_info.last_name = AAZStrType(
                serialized_name="lastName",
            )
            user_info.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

        def on_202(self, session):
            pass

        def on_204(self, session):
            pass


class _SwitchBillingHelper:
    """Helper class for SwitchBilling"""


__all__ = ["SwitchBilling"]
