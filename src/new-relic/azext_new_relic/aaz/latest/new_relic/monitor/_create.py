# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "new-relic monitor create",
)
class Create(AAZCommand):
    """Create a NewRelicMonitorResource

    :example: Create a NewRelicMonitorResource.
        az new-relic monitor create --resource-group MyResourceGroup --name MyNewRelicMonitor --location eastus2euap --user-info first-name="vdftzcggiref" last-name="bcsztgqovdlmzf" email-address="UserEmail@123.com" phone-number="123456" --plan-data billing-cycle="MONTHLY" effective-date='2022-10-25T15:14:33+02:00' plan-details="newrelic-pay-as-you-go-free-live@TIDgmz7xq9ge3py@PUBIDnewrelicinc1635200720692.newrelic_liftr_payg" usage-type="PAYG" --account-creation-source "LIFTR" --org-creation-source "LIFTR" --tags key6976=oaxfhf
    """

    _aaz_info = {
        "version": "2022-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/newrelic.observability/monitors/{}", "2022-07-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["-n", "--name", "--monitor-name"],
            help="Name of the Monitors resource",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.account_creation_source = AAZStrArg(
            options=["--account-source", "--account-creation-source"],
            arg_group="Properties",
            help="Source of account creation",
            enum={"LIFTR": "LIFTR", "NEWRELIC": "NEWRELIC"},
        )
        _args_schema.new_relic_account = AAZObjectArg(
            options=["--new-relic-account"],
            arg_group="Properties",
            help="MarketplaceSubscriptionStatus of the resource",
        )
        _args_schema.org_creation_source = AAZStrArg(
            options=["--org-creation-source"],
            arg_group="Properties",
            help="Source of org creation",
            enum={"LIFTR": "LIFTR", "NEWRELIC": "NEWRELIC"},
        )
        _args_schema.plan_data = AAZObjectArg(
            options=["--plan-data"],
            arg_group="Properties",
            help="Plan details",
        )
        _args_schema.user_info = AAZObjectArg(
            options=["--user-info"],
            arg_group="Properties",
            help="User Info",
        )

        new_relic_account = cls._args_schema.new_relic_account
        new_relic_account.account_info = AAZObjectArg(
            options=["account-info"],
            help="NewRelic Account Information",
        )
        new_relic_account.organization_info = AAZObjectArg(
            options=["organization-info"],
            help="NewRelic Organization Information",
        )
        new_relic_account.single_sign_on_properties = AAZObjectArg(
            options=["single-sign-on-properties"],
            help="date when plan was applied",
        )
        new_relic_account.user_id = AAZStrArg(
            options=["user-id"],
            help="User id",
        )

        account_info = cls._args_schema.new_relic_account.account_info
        account_info.account_id = AAZStrArg(
            options=["account-id"],
            help="Account id",
        )
        account_info.ingestion_key = AAZPasswordArg(
            options=["ingestion-key"],
            help="ingestion key of account",
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        account_info.region = AAZStrArg(
            options=["region"],
            help="NewRelic account region",
        )

        organization_info = cls._args_schema.new_relic_account.organization_info
        organization_info.organization_id = AAZStrArg(
            options=["organization-id"],
            help="Organization id",
        )

        single_sign_on_properties = cls._args_schema.new_relic_account.single_sign_on_properties
        single_sign_on_properties.enterprise_app_id = AAZStrArg(
            options=["enterprise-app-id"],
            help="The Id of the Enterprise App used for Single sign-on.",
        )
        single_sign_on_properties.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Provisioning state",
            enum={"Accepted": "Accepted", "Canceled": "Canceled", "Creating": "Creating", "Deleted": "Deleted", "Deleting": "Deleting", "Failed": "Failed", "NotSpecified": "NotSpecified", "Succeeded": "Succeeded", "Updating": "Updating"},
        )
        single_sign_on_properties.single_sign_on_state = AAZStrArg(
            options=["single-sign-on-state"],
            help="Single sign-on state",
            enum={"Disable": "Disable", "Enable": "Enable", "Existing": "Existing", "Initial": "Initial"},
        )
        single_sign_on_properties.single_sign_on_url = AAZStrArg(
            options=["single-sign-on-url"],
            help="The login URL specific to this NewRelic Organization",
        )

        plan_data = cls._args_schema.plan_data
        plan_data.billing_cycle = AAZStrArg(
            options=["billing-cycle"],
            help="Different billing cycles like MONTHLY/WEEKLY. this could be enum",
            enum={"MONTHLY": "MONTHLY", "WEEKLY": "WEEKLY", "YEARLY": "YEARLY"},
        )
        plan_data.effective_date = AAZDateTimeArg(
            options=["effective-date"],
            help="date when plan was applied",
        )
        plan_data.plan_details = AAZStrArg(
            options=["plan-details"],
            help="plan id as published by NewRelic",
        )
        plan_data.usage_type = AAZStrArg(
            options=["usage-type"],
            help="Different usage type like PAYG/COMMITTED. this could be enum",
            enum={"COMMITTED": "COMMITTED", "PAYG": "PAYG"},
        )

        user_info = cls._args_schema.user_info
        user_info.country = AAZStrArg(
            options=["country"],
            help="country if user",
        )
        user_info.email_address = AAZStrArg(
            options=["email-address"],
            help="User Email",
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$",
            ),
        )
        user_info.first_name = AAZStrArg(
            options=["first-name"],
            help="First name",
            fmt=AAZStrArgFormat(
                max_length=50,
            ),
        )
        user_info.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name",
            fmt=AAZStrArgFormat(
                max_length=50,
            ),
        )
        user_info.phone_number = AAZStrArg(
            options=["phone-number"],
            help="Contact phone number",
            fmt=AAZStrArgFormat(
                max_length=40,
            ),
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Resource",
            help="The managed service identities assigned to this resource.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            required=True,
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.MonitorsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitorsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("accountCreationSource", AAZStrType, ".account_creation_source")
                properties.set_prop("newRelicAccountProperties", AAZObjectType, ".new_relic_account")
                properties.set_prop("orgCreationSource", AAZStrType, ".org_creation_source")
                properties.set_prop("planData", AAZObjectType, ".plan_data")
                properties.set_prop("userInfo", AAZObjectType, ".user_info")

            new_relic_account_properties = _builder.get(".properties.newRelicAccountProperties")
            if new_relic_account_properties is not None:
                new_relic_account_properties.set_prop("accountInfo", AAZObjectType, ".account_info")
                new_relic_account_properties.set_prop("organizationInfo", AAZObjectType, ".organization_info")
                new_relic_account_properties.set_prop("singleSignOnProperties", AAZObjectType, ".single_sign_on_properties")
                new_relic_account_properties.set_prop("userId", AAZStrType, ".user_id")

            account_info = _builder.get(".properties.newRelicAccountProperties.accountInfo")
            if account_info is not None:
                account_info.set_prop("accountId", AAZStrType, ".account_id")
                account_info.set_prop("ingestionKey", AAZStrType, ".ingestion_key", typ_kwargs={"flags": {"secret": True}})
                account_info.set_prop("region", AAZStrType, ".region")

            organization_info = _builder.get(".properties.newRelicAccountProperties.organizationInfo")
            if organization_info is not None:
                organization_info.set_prop("organizationId", AAZStrType, ".organization_id")

            single_sign_on_properties = _builder.get(".properties.newRelicAccountProperties.singleSignOnProperties")
            if single_sign_on_properties is not None:
                single_sign_on_properties.set_prop("enterpriseAppId", AAZStrType, ".enterprise_app_id")
                single_sign_on_properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
                single_sign_on_properties.set_prop("singleSignOnState", AAZStrType, ".single_sign_on_state")
                single_sign_on_properties.set_prop("singleSignOnUrl", AAZStrType, ".single_sign_on_url")

            plan_data = _builder.get(".properties.planData")
            if plan_data is not None:
                plan_data.set_prop("billingCycle", AAZStrType, ".billing_cycle")
                plan_data.set_prop("effectiveDate", AAZStrType, ".effective_date")
                plan_data.set_prop("planDetails", AAZStrType, ".plan_details")
                plan_data.set_prop("usageType", AAZStrType, ".usage_type")

            user_info = _builder.get(".properties.userInfo")
            if user_info is not None:
                user_info.set_prop("country", AAZStrType, ".country")
                user_info.set_prop("emailAddress", AAZStrType, ".email_address")
                user_info.set_prop("firstName", AAZStrType, ".first_name")
                user_info.set_prop("lastName", AAZStrType, ".last_name")
                user_info.set_prop("phoneNumber", AAZStrType, ".phone_number")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.account_creation_source = AAZStrType(
                serialized_name="accountCreationSource",
            )
            properties.liftr_resource_category = AAZStrType(
                serialized_name="liftrResourceCategory",
            )
            properties.liftr_resource_preference = AAZIntType(
                serialized_name="liftrResourcePreference",
                flags={"read_only": True},
            )
            properties.marketplace_subscription_id = AAZStrType(
                serialized_name="marketplaceSubscriptionId",
                flags={"read_only": True},
            )
            properties.marketplace_subscription_status = AAZStrType(
                serialized_name="marketplaceSubscriptionStatus",
            )
            properties.monitoring_status = AAZStrType(
                serialized_name="monitoringStatus",
            )
            properties.new_relic_account_properties = AAZObjectType(
                serialized_name="newRelicAccountProperties",
            )
            properties.org_creation_source = AAZStrType(
                serialized_name="orgCreationSource",
            )
            properties.plan_data = AAZObjectType(
                serialized_name="planData",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.user_info = AAZObjectType(
                serialized_name="userInfo",
            )

            new_relic_account_properties = cls._schema_on_200_201.properties.new_relic_account_properties
            new_relic_account_properties.account_info = AAZObjectType(
                serialized_name="accountInfo",
            )
            new_relic_account_properties.organization_info = AAZObjectType(
                serialized_name="organizationInfo",
            )
            new_relic_account_properties.single_sign_on_properties = AAZObjectType(
                serialized_name="singleSignOnProperties",
            )
            new_relic_account_properties.user_id = AAZStrType(
                serialized_name="userId",
            )

            account_info = cls._schema_on_200_201.properties.new_relic_account_properties.account_info
            account_info.account_id = AAZStrType(
                serialized_name="accountId",
            )
            account_info.ingestion_key = AAZStrType(
                serialized_name="ingestionKey",
                flags={"secret": True},
            )
            account_info.region = AAZStrType()

            organization_info = cls._schema_on_200_201.properties.new_relic_account_properties.organization_info
            organization_info.organization_id = AAZStrType(
                serialized_name="organizationId",
            )

            single_sign_on_properties = cls._schema_on_200_201.properties.new_relic_account_properties.single_sign_on_properties
            single_sign_on_properties.enterprise_app_id = AAZStrType(
                serialized_name="enterpriseAppId",
            )
            single_sign_on_properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            single_sign_on_properties.single_sign_on_state = AAZStrType(
                serialized_name="singleSignOnState",
            )
            single_sign_on_properties.single_sign_on_url = AAZStrType(
                serialized_name="singleSignOnUrl",
            )

            plan_data = cls._schema_on_200_201.properties.plan_data
            plan_data.billing_cycle = AAZStrType(
                serialized_name="billingCycle",
            )
            plan_data.effective_date = AAZStrType(
                serialized_name="effectiveDate",
            )
            plan_data.plan_details = AAZStrType(
                serialized_name="planDetails",
            )
            plan_data.usage_type = AAZStrType(
                serialized_name="usageType",
            )

            user_info = cls._schema_on_200_201.properties.user_info
            user_info.country = AAZStrType()
            user_info.email_address = AAZStrType(
                serialized_name="emailAddress",
            )
            user_info.first_name = AAZStrType(
                serialized_name="firstName",
            )
            user_info.last_name = AAZStrType(
                serialized_name="lastName",
            )
            user_info.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
