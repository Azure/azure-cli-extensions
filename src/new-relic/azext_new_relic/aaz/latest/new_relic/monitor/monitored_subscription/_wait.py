# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "new-relic monitor monitored-subscription wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/newrelic.observability/monitors/{}/monitoredsubscriptions/{}", "2024-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.configuration_name = AAZStrArg(
            options=["--configuration-name"],
            help="The configuration name. Only 'default' value is supported.",
            required=True,
            id_part="child_name_1",
            default="default",
            enum={"default": "default"},
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Name of the Monitoring resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            options=["--resource-group","--g"],
            help="Name of resource group. You can configure the default group using az configure --defaults group=<name>.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MonitoredSubscriptionsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class MonitoredSubscriptionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.monitored_subscription_list = AAZListType(
                serialized_name="monitoredSubscriptionList",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            monitored_subscription_list = cls._schema_on_200.properties.monitored_subscription_list
            monitored_subscription_list.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.monitored_subscription_list.Element
            _element.error = AAZStrType()
            _element.status = AAZStrType()
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )
            _element.tag_rules = AAZObjectType(
                serialized_name="tagRules",
            )

            tag_rules = cls._schema_on_200.properties.monitored_subscription_list.Element.tag_rules
            tag_rules.log_rules = AAZObjectType(
                serialized_name="logRules",
            )
            tag_rules.metric_rules = AAZObjectType(
                serialized_name="metricRules",
            )
            tag_rules.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            log_rules = cls._schema_on_200.properties.monitored_subscription_list.Element.tag_rules.log_rules
            log_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            log_rules.send_aad_logs = AAZStrType(
                serialized_name="sendAadLogs",
            )
            log_rules.send_activity_logs = AAZStrType(
                serialized_name="sendActivityLogs",
            )
            log_rules.send_subscription_logs = AAZStrType(
                serialized_name="sendSubscriptionLogs",
            )

            filtering_tags = cls._schema_on_200.properties.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _WaitHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            metric_rules = cls._schema_on_200.properties.monitored_subscription_list.Element.tag_rules.metric_rules
            metric_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            metric_rules.send_metrics = AAZStrType(
                serialized_name="sendMetrics",
            )
            metric_rules.user_email = AAZStrType(
                serialized_name="userEmail",
            )

            filtering_tags = cls._schema_on_200.properties.monitored_subscription_list.Element.tag_rules.metric_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _WaitHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_filtering_tag_read = None

    @classmethod
    def _build_schema_filtering_tag_read(cls, _schema):
        if cls._schema_filtering_tag_read is not None:
            _schema.action = cls._schema_filtering_tag_read.action
            _schema.name = cls._schema_filtering_tag_read.name
            _schema.value = cls._schema_filtering_tag_read.value
            return

        cls._schema_filtering_tag_read = _schema_filtering_tag_read = AAZObjectType()

        filtering_tag_read = _schema_filtering_tag_read
        filtering_tag_read.action = AAZStrType()
        filtering_tag_read.name = AAZStrType()
        filtering_tag_read.value = AAZStrType()

        _schema.action = cls._schema_filtering_tag_read.action
        _schema.name = cls._schema_filtering_tag_read.name
        _schema.value = cls._schema_filtering_tag_read.value


__all__ = ["Wait"]
