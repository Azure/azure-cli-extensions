# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "new-relic monitor monitored-subscription create",
)
class Create(AAZCommand):
    """Create the subscriptions that should be monitored by the NewRelic monitor resource.
    
    :example: Create the subscriptions that should be monitored by the NewRelic monitor resource.
    Please run below commands in the mentioned order
    1) az new-relic monitor monitored-subscription create --resource-group MyResourceGroup --monitor-name MyNewRelicMonitor --configuration-name default --patch-operation AddBegin --subscriptions "[{status:'InProgress',subscription-id:'subscription-id'}]"
    2) az new-relic monitor monitored-subscription create --resource-group MyResourceGroup --monitor-name MyNewRelicMonitor --configuration-name default --patch-operation AddComplete --subscriptions "[{status:'Active',subscription-id:'subscription-id'}]"        
    """

    _aaz_info = {
        "version": "2024-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/newrelic.observability/monitors/{}/monitoredsubscriptions/{}", "2024-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.configuration_name = AAZStrArg(
            options=["--configuration-name"],
            help="The configuration name. Only 'default' value is supported.",
            required=True,
            enum={"default": "default"},
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Name of the Monitoring resource",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^.*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            options=["--resource-group","--g"],
            help="Name of resource group. You can configure the default group using az configure --defaults group=<name>.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.monitored_subscription_list = AAZListArg(
            options=["-n", "--subscriptions", "--monitored-subscription-list"],
            arg_group="Properties",
            help="List of subscriptions and the state of the monitoring.",
        )
        _args_schema.patch_operation = AAZStrArg(
            options=["--patch-operation"],
            arg_group="Properties",
            help="The operation for the patch on the resource.",
            enum={"Active": "Active", "AddBegin": "AddBegin", "AddComplete": "AddComplete", "DeleteBegin": "DeleteBegin", "DeleteComplete": "DeleteComplete"},
        )

        monitored_subscription_list = cls._args_schema.monitored_subscription_list
        monitored_subscription_list.Element = AAZObjectArg()

        _element = cls._args_schema.monitored_subscription_list.Element
        _element.error = AAZStrArg(
            options=["error"],
            help="The reason of not monitoring the subscription.",
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The state of monitoring.",
            enum={"Active": "Active", "Deleting": "Deleting", "Failed": "Failed", "InProgress": "InProgress"},
        )
        _element.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="The subscriptionId to be monitored.",
        )
        _element.tag_rules = AAZObjectArg(
            options=["tag-rules"],
            help="The resource-specific properties for this resource.",
        )

        tag_rules = cls._args_schema.monitored_subscription_list.Element.tag_rules
        tag_rules.log_rules = AAZObjectArg(
            options=["log-rules"],
            help="Set of rules for sending logs for the Monitor resource.",
        )
        tag_rules.metric_rules = AAZObjectArg(
            options=["metric-rules"],
            help="Set of rules for sending metrics for the Monitor resource.",
        )

        log_rules = cls._args_schema.monitored_subscription_list.Element.tag_rules.log_rules
        log_rules.filtering_tags = AAZListArg(
            options=["filtering-tags"],
            help="List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.",
        )
        log_rules.send_aad_logs = AAZStrArg(
            options=["send-aad-logs"],
            help="Flag specifying if AAD logs should be sent for the Monitor resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        log_rules.send_activity_logs = AAZStrArg(
            options=["send-activity-logs"],
            help="Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        log_rules.send_subscription_logs = AAZStrArg(
            options=["send-subscription-logs"],
            help="Flag specifying if subscription logs should be sent for the Monitor resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        filtering_tags = cls._args_schema.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags
        filtering_tags.Element = AAZObjectArg()
        cls._build_args_filtering_tag_create(filtering_tags.Element)

        metric_rules = cls._args_schema.monitored_subscription_list.Element.tag_rules.metric_rules
        metric_rules.filtering_tags = AAZListArg(
            options=["filtering-tags"],
            help="List of filtering tags to be used for capturing metrics.",
        )
        metric_rules.send_metrics = AAZStrArg(
            options=["send-metrics"],
            help="Flag specifying if metrics should be sent for the Monitor resource.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        metric_rules.user_email = AAZStrArg(
            options=["user-email"],
            help="User Email",
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\.)+[A-Za-z]{2,}$",
            ),
        )

        filtering_tags = cls._args_schema.monitored_subscription_list.Element.tag_rules.metric_rules.filtering_tags
        filtering_tags.Element = AAZObjectArg()
        cls._build_args_filtering_tag_create(filtering_tags.Element)
        return cls._args_schema

    _args_filtering_tag_create = None

    @classmethod
    def _build_args_filtering_tag_create(cls, _schema):
        if cls._args_filtering_tag_create is not None:
            _schema.action = cls._args_filtering_tag_create.action
            _schema.name = cls._args_filtering_tag_create.name
            _schema.value = cls._args_filtering_tag_create.value
            return

        cls._args_filtering_tag_create = AAZObjectArg()

        filtering_tag_create = cls._args_filtering_tag_create
        filtering_tag_create.action = AAZStrArg(
            options=["action"],
            help="Valid actions for a filtering tag. Exclusion takes priority over inclusion.",
            enum={"Exclude": "Exclude", "Include": "Include"},
        )
        filtering_tag_create.name = AAZStrArg(
            options=["name"],
            help="The name (also known as the key) of the tag.",
        )
        filtering_tag_create.value = AAZStrArg(
            options=["value"],
            help="The value of the tag.",
        )

        _schema.action = cls._args_filtering_tag_create.action
        _schema.name = cls._args_filtering_tag_create.name
        _schema.value = cls._args_filtering_tag_create.value

    def _execute_operations(self):
        self.pre_operations()
        yield self.MonitoredSubscriptionsCreateorUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MonitoredSubscriptionsCreateorUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/NewRelic.Observability/monitors/{monitorName}/monitoredSubscriptions/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("monitoredSubscriptionList", AAZListType, ".monitored_subscription_list")
                properties.set_prop("patchOperation", AAZStrType, ".patch_operation")

            monitored_subscription_list = _builder.get(".properties.monitoredSubscriptionList")
            if monitored_subscription_list is not None:
                monitored_subscription_list.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.monitoredSubscriptionList[]")
            if _elements is not None:
                _elements.set_prop("error", AAZStrType, ".error")
                _elements.set_prop("status", AAZStrType, ".status")
                _elements.set_prop("subscriptionId", AAZStrType, ".subscription_id")
                _elements.set_prop("tagRules", AAZObjectType, ".tag_rules")

            tag_rules = _builder.get(".properties.monitoredSubscriptionList[].tagRules")
            if tag_rules is not None:
                tag_rules.set_prop("logRules", AAZObjectType, ".log_rules")
                tag_rules.set_prop("metricRules", AAZObjectType, ".metric_rules")

            log_rules = _builder.get(".properties.monitoredSubscriptionList[].tagRules.logRules")
            if log_rules is not None:
                log_rules.set_prop("filteringTags", AAZListType, ".filtering_tags")
                log_rules.set_prop("sendAadLogs", AAZStrType, ".send_aad_logs")
                log_rules.set_prop("sendActivityLogs", AAZStrType, ".send_activity_logs")
                log_rules.set_prop("sendSubscriptionLogs", AAZStrType, ".send_subscription_logs")

            filtering_tags = _builder.get(".properties.monitoredSubscriptionList[].tagRules.logRules.filteringTags")
            if filtering_tags is not None:
                _CreateHelper._build_schema_filtering_tag_create(filtering_tags.set_elements(AAZObjectType, "."))

            metric_rules = _builder.get(".properties.monitoredSubscriptionList[].tagRules.metricRules")
            if metric_rules is not None:
                metric_rules.set_prop("filteringTags", AAZListType, ".filtering_tags")
                metric_rules.set_prop("sendMetrics", AAZStrType, ".send_metrics")
                metric_rules.set_prop("userEmail", AAZStrType, ".user_email")

            filtering_tags = _builder.get(".properties.monitoredSubscriptionList[].tagRules.metricRules.filteringTags")
            if filtering_tags is not None:
                _CreateHelper._build_schema_filtering_tag_create(filtering_tags.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.monitored_subscription_list = AAZListType(
                serialized_name="monitoredSubscriptionList",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            monitored_subscription_list = cls._schema_on_200_201.properties.monitored_subscription_list
            monitored_subscription_list.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.monitored_subscription_list.Element
            _element.error = AAZStrType()
            _element.status = AAZStrType()
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )
            _element.tag_rules = AAZObjectType(
                serialized_name="tagRules",
            )

            tag_rules = cls._schema_on_200_201.properties.monitored_subscription_list.Element.tag_rules
            tag_rules.log_rules = AAZObjectType(
                serialized_name="logRules",
            )
            tag_rules.metric_rules = AAZObjectType(
                serialized_name="metricRules",
            )
            tag_rules.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            log_rules = cls._schema_on_200_201.properties.monitored_subscription_list.Element.tag_rules.log_rules
            log_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            log_rules.send_aad_logs = AAZStrType(
                serialized_name="sendAadLogs",
            )
            log_rules.send_activity_logs = AAZStrType(
                serialized_name="sendActivityLogs",
            )
            log_rules.send_subscription_logs = AAZStrType(
                serialized_name="sendSubscriptionLogs",
            )

            filtering_tags = cls._schema_on_200_201.properties.monitored_subscription_list.Element.tag_rules.log_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _CreateHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            metric_rules = cls._schema_on_200_201.properties.monitored_subscription_list.Element.tag_rules.metric_rules
            metric_rules.filtering_tags = AAZListType(
                serialized_name="filteringTags",
            )
            metric_rules.send_metrics = AAZStrType(
                serialized_name="sendMetrics",
            )
            metric_rules.user_email = AAZStrType(
                serialized_name="userEmail",
            )

            filtering_tags = cls._schema_on_200_201.properties.monitored_subscription_list.Element.tag_rules.metric_rules.filtering_tags
            filtering_tags.Element = AAZObjectType()
            _CreateHelper._build_schema_filtering_tag_read(filtering_tags.Element)

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_filtering_tag_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("action", AAZStrType, ".action")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("value", AAZStrType, ".value")

    _schema_filtering_tag_read = None

    @classmethod
    def _build_schema_filtering_tag_read(cls, _schema):
        if cls._schema_filtering_tag_read is not None:
            _schema.action = cls._schema_filtering_tag_read.action
            _schema.name = cls._schema_filtering_tag_read.name
            _schema.value = cls._schema_filtering_tag_read.value
            return

        cls._schema_filtering_tag_read = _schema_filtering_tag_read = AAZObjectType()

        filtering_tag_read = _schema_filtering_tag_read
        filtering_tag_read.action = AAZStrType()
        filtering_tag_read.name = AAZStrType()
        filtering_tag_read.value = AAZStrType()

        _schema.action = cls._schema_filtering_tag_read.action
        _schema.name = cls._schema_filtering_tag_read.name
        _schema.value = cls._schema_filtering_tag_read.value


__all__ = ["Create"]
