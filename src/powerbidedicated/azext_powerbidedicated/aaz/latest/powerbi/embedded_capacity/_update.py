# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "powerbi embedded-capacity update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update the specified PowerBI embedded capacity.

    :example: Update sku name for the specified PowerBI embedded capacity.
        az powerbi embedded-capacity update --resource-group "TestRG" --name "azsdktest" --sku-name "A1"

    :example: Update administrator members the specified PowerBI embedded capacity without waiting.
        az powerbi embedded-capacity update --resource-group "TestRG" --name "azsdktest" --sku-name "A1" --administration-members "azsdktest3@microsoft.com" --no-wait
    """

    _aaz_info = {
        "version": "2017-10-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.powerbidedicated/capacities/{}", "2017-10-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = False

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the Dedicated capacity. It must be at least 3 characters in length, and no more than 63.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z][a-z0-9]*$",
                max_length=63,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.administration_members = AAZListArg(
            options=["--administration-members"],
            help="An array of administrator user identities.",
            nullable=True,
        )
        _args_schema.sku_name = AAZStrArg(
            options=["--sku-name"],
            help="Name of the SKU level. For more information, please refer                                           to https://azure.microsoft.com/en-                                           us/pricing/details/power-bi-embedded/. Allowed values:                                           A1, A2, A3, A4, A5, A6.",
        )
        _args_schema.sku_tier = AAZStrArg(
            options=["--sku-tier"],
            help="The name of the Azure pricing tier to which the SKU                                           applies.",
            nullable=True,
            enum={"PBIE_Azure": "PBIE_Azure"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...].",
            nullable=True,
        )

        administration_members = cls._args_schema.administration_members
        administration_members.Element = AAZStrArg(
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CapacitiesGetDetails(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.CapacitiesCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CapacitiesGetDetails(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dedicatedCapacityName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-10-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_dedicated_capacity_read(cls._schema_on_200)

            return cls._schema_on_200

    class CapacitiesCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PowerBIDedicated/capacities/{dedicatedCapacityName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dedicatedCapacityName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-10-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_dedicated_capacity_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("sku", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administration", AAZObjectType)

            administration = _builder.get(".properties.administration")
            if administration is not None:
                administration.set_prop("members", AAZListType, ".administration_members")

            members = _builder.get(".properties.administration.members")
            if members is not None:
                members.set_elements(AAZStrType, ".")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku_name", typ_kwargs={"flags": {"required": True}})
                sku.set_prop("tier", AAZStrType, ".sku_tier")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_dedicated_capacity_read = None

    @classmethod
    def _build_schema_dedicated_capacity_read(cls, _schema):
        if cls._schema_dedicated_capacity_read is not None:
            _schema.id = cls._schema_dedicated_capacity_read.id
            _schema.location = cls._schema_dedicated_capacity_read.location
            _schema.name = cls._schema_dedicated_capacity_read.name
            _schema.properties = cls._schema_dedicated_capacity_read.properties
            _schema.sku = cls._schema_dedicated_capacity_read.sku
            _schema.tags = cls._schema_dedicated_capacity_read.tags
            _schema.type = cls._schema_dedicated_capacity_read.type
            return

        cls._schema_dedicated_capacity_read = _schema_dedicated_capacity_read = AAZObjectType()

        dedicated_capacity_read = _schema_dedicated_capacity_read
        dedicated_capacity_read.id = AAZStrType(
            flags={"read_only": True},
        )
        dedicated_capacity_read.location = AAZStrType(
            flags={"required": True},
        )
        dedicated_capacity_read.name = AAZStrType(
            flags={"read_only": True},
        )
        dedicated_capacity_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        dedicated_capacity_read.sku = AAZObjectType(
            flags={"required": True},
        )
        dedicated_capacity_read.tags = AAZDictType()
        dedicated_capacity_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_dedicated_capacity_read.properties
        properties.administration = AAZObjectType()
        properties.friendly_name = AAZStrType(
            serialized_name="friendlyName",
            flags={"read_only": True},
        )
        properties.mode = AAZStrType(
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.state = AAZStrType(
            flags={"read_only": True},
        )
        properties.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )

        administration = _schema_dedicated_capacity_read.properties.administration
        administration.members = AAZListType()

        members = _schema_dedicated_capacity_read.properties.administration.members
        members.Element = AAZStrType()

        sku = _schema_dedicated_capacity_read.sku
        sku.capacity = AAZIntType()
        sku.name = AAZStrType(
            flags={"required": True},
        )
        sku.tier = AAZStrType()

        tags = _schema_dedicated_capacity_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_dedicated_capacity_read.id
        _schema.location = cls._schema_dedicated_capacity_read.location
        _schema.name = cls._schema_dedicated_capacity_read.name
        _schema.properties = cls._schema_dedicated_capacity_read.properties
        _schema.sku = cls._schema_dedicated_capacity_read.sku
        _schema.tags = cls._schema_dedicated_capacity_read.tags
        _schema.type = cls._schema_dedicated_capacity_read.type


__all__ = ["Update"]
