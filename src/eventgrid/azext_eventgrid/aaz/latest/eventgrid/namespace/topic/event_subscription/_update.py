# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "eventgrid namespace topic event-subscription update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update an event subscription of a namespace topic.

    :example: Update event subscription
        az eventgrid namespace topic event-subscription create -g rg --topic-name topic -n event-subscription --namespace-name name --filters-configuration "{includedEventTypes:['All']}"
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}", "2023-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.event_subscription_name = AAZStrArg(
            options=["-n", "--name", "--event-subscription-name"],
            help="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            required=True,
            id_part="child_name_2",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.namespace_name = AAZStrArg(
            options=["--namespace-name"],
            help="Name of the namespace.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.topic_name = AAZStrArg(
            options=["--topic-name"],
            help="Name of the namespace topic.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.delivery_configuration = AAZObjectArg(
            options=["--delivery-configuration"],
            arg_group="Properties",
            help="Information about the delivery configuration of the event subscription.",
            nullable=True,
        )
        _args_schema.event_delivery_schema = AAZStrArg(
            options=["--event-delivery-schema"],
            arg_group="Properties",
            help="The event delivery schema for the event subscription.",
            nullable=True,
            enum={"CloudEventSchemaV1_0": "CloudEventSchemaV1_0"},
        )
        _args_schema.filters_configuration = AAZObjectArg(
            options=["--filters-configuration"],
            arg_group="Properties",
            help="Information about the filter for the event subscription.",
            nullable=True,
        )

        delivery_configuration = cls._args_schema.delivery_configuration
        delivery_configuration.delivery_mode = AAZStrArg(
            options=["delivery-mode"],
            help="Delivery mode of the event subscription.",
            nullable=True,
            enum={"Queue": "Queue"},
        )
        delivery_configuration.queue = AAZObjectArg(
            options=["queue"],
            help="This property should be populated when deliveryMode is queue and represents information about the queue subscription.",
            nullable=True,
        )

        queue = cls._args_schema.delivery_configuration.queue
        queue.dead_letter_destination_with_resource_identity = AAZObjectArg(
            options=["dead-letter-destination-with-resource-identity"],
            help="The dead letter destination of the event subscription.",
            nullable=True,
        )
        queue.event_time_to_live = AAZDurationArg(
            options=["event-time-to-live"],
            help="Time span duration in ISO 8601 format that determines how long messages are available to the subscription from the time the message was published.",
            nullable=True,
        )
        queue.max_delivery_count = AAZIntArg(
            options=["max-delivery-count"],
            help="The maximum delivery count of the events.",
            nullable=True,
        )
        queue.receive_lock_duration_in_seconds = AAZIntArg(
            options=["receive-lock-duration-in-seconds"],
            help="Maximum period in seconds in which once the message is in received (by the client) state and waiting to be accepted, released or rejected.",
            nullable=True,
        )

        dead_letter_destination_with_resource_identity = cls._args_schema.delivery_configuration.queue.dead_letter_destination_with_resource_identity
        dead_letter_destination_with_resource_identity.dead_letter_destination = AAZObjectArg(
            options=["dead-letter-destination"],
            help="Information about the destination where events have to be delivered for the event subscription.",
            nullable=True,
        )
        dead_letter_destination_with_resource_identity.identity = AAZObjectArg(
            options=["identity"],
            help="The identity to use when dead-lettering events.",
            nullable=True,
        )

        dead_letter_destination = cls._args_schema.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination
        dead_letter_destination.storage_blob = AAZObjectArg(
            options=["storage-blob"],
        )

        storage_blob = cls._args_schema.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination.storage_blob
        storage_blob.blob_container_name = AAZStrArg(
            options=["blob-container-name"],
            help="The name of the Storage blob container that is the destination of the deadletter events",
            nullable=True,
        )
        storage_blob.resource_id = AAZResourceIdArg(
            options=["resource-id"],
            help="The Azure Resource ID of the storage account that is the destination of the deadletter events",
            nullable=True,
        )

        identity = cls._args_schema.delivery_configuration.queue.dead_letter_destination_with_resource_identity.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.",
            nullable=True,
            enum={"SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identity = AAZStrArg(
            options=["user-assigned-identity"],
            help="The user identity associated with the resource.",
            nullable=True,
        )

        filters_configuration = cls._args_schema.filters_configuration
        filters_configuration.filters = AAZListArg(
            options=["filters"],
            help="An array of filters that are used for filtering event subscriptions.",
            nullable=True,
        )
        filters_configuration.included_event_types = AAZListArg(
            options=["included-event-types"],
            help="A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
            nullable=True,
        )

        filters = cls._args_schema.filters_configuration.filters
        filters.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.filters_configuration.filters.Element
        _element.bool_equals = AAZObjectArg(
            options=["bool-equals"],
        )
        _element.number_greater_than = AAZObjectArg(
            options=["number-greater-than"],
        )
        _element.number_greater_than_or_equals = AAZObjectArg(
            options=["number-greater-than-or-equals"],
        )
        _element.number_in = AAZObjectArg(
            options=["number-in"],
        )
        _element.number_in_range = AAZObjectArg(
            options=["number-in-range"],
        )
        _element.number_less_than = AAZObjectArg(
            options=["number-less-than"],
        )
        _element.number_less_than_or_equals = AAZObjectArg(
            options=["number-less-than-or-equals"],
        )
        _element.number_not_in = AAZObjectArg(
            options=["number-not-in"],
        )
        _element.number_not_in_range = AAZObjectArg(
            options=["number-not-in-range"],
        )
        _element.string_begins_with = AAZObjectArg(
            options=["string-begins-with"],
        )
        _element.string_contains = AAZObjectArg(
            options=["string-contains"],
        )
        _element.string_ends_with = AAZObjectArg(
            options=["string-ends-with"],
        )
        _element.string_in = AAZObjectArg(
            options=["string-in"],
        )
        _element.string_not_begins_with = AAZObjectArg(
            options=["string-not-begins-with"],
        )
        _element.string_not_contains = AAZObjectArg(
            options=["string-not-contains"],
        )
        _element.string_not_ends_with = AAZObjectArg(
            options=["string-not-ends-with"],
        )
        _element.string_not_in = AAZObjectArg(
            options=["string-not-in"],
        )
        _element.key = AAZStrArg(
            options=["key"],
            help="The field/property in the event based on which you want to filter.",
            nullable=True,
        )

        bool_equals = cls._args_schema.filters_configuration.filters.Element.bool_equals
        bool_equals.value = AAZBoolArg(
            options=["value"],
            help="The boolean filter value.",
            nullable=True,
        )

        number_greater_than = cls._args_schema.filters_configuration.filters.Element.number_greater_than
        number_greater_than.value = AAZFloatArg(
            options=["value"],
            help="The filter value.",
            nullable=True,
        )

        number_greater_than_or_equals = cls._args_schema.filters_configuration.filters.Element.number_greater_than_or_equals
        number_greater_than_or_equals.value = AAZFloatArg(
            options=["value"],
            help="The filter value.",
            nullable=True,
        )

        number_in = cls._args_schema.filters_configuration.filters.Element.number_in
        number_in.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.number_in.values
        values.Element = AAZFloatArg(
            nullable=True,
        )

        number_in_range = cls._args_schema.filters_configuration.filters.Element.number_in_range
        number_in_range.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.number_in_range.values
        values.Element = AAZListArg(
            nullable=True,
        )

        _element = cls._args_schema.filters_configuration.filters.Element.number_in_range.values.Element
        _element.Element = AAZFloatArg(
            nullable=True,
        )

        number_less_than = cls._args_schema.filters_configuration.filters.Element.number_less_than
        number_less_than.value = AAZFloatArg(
            options=["value"],
            help="The filter value.",
            nullable=True,
        )

        number_less_than_or_equals = cls._args_schema.filters_configuration.filters.Element.number_less_than_or_equals
        number_less_than_or_equals.value = AAZFloatArg(
            options=["value"],
            help="The filter value.",
            nullable=True,
        )

        number_not_in = cls._args_schema.filters_configuration.filters.Element.number_not_in
        number_not_in.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.number_not_in.values
        values.Element = AAZFloatArg(
            nullable=True,
        )

        number_not_in_range = cls._args_schema.filters_configuration.filters.Element.number_not_in_range
        number_not_in_range.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.number_not_in_range.values
        values.Element = AAZListArg(
            nullable=True,
        )

        _element = cls._args_schema.filters_configuration.filters.Element.number_not_in_range.values.Element
        _element.Element = AAZFloatArg(
            nullable=True,
        )

        string_begins_with = cls._args_schema.filters_configuration.filters.Element.string_begins_with
        string_begins_with.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_begins_with.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_contains = cls._args_schema.filters_configuration.filters.Element.string_contains
        string_contains.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_contains.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_ends_with = cls._args_schema.filters_configuration.filters.Element.string_ends_with
        string_ends_with.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_ends_with.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_in = cls._args_schema.filters_configuration.filters.Element.string_in
        string_in.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_in.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_not_begins_with = cls._args_schema.filters_configuration.filters.Element.string_not_begins_with
        string_not_begins_with.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_not_begins_with.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_not_contains = cls._args_schema.filters_configuration.filters.Element.string_not_contains
        string_not_contains.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_not_contains.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_not_ends_with = cls._args_schema.filters_configuration.filters.Element.string_not_ends_with
        string_not_ends_with.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_not_ends_with.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        string_not_in = cls._args_schema.filters_configuration.filters.Element.string_not_in
        string_not_in.values = AAZListArg(
            options=["values"],
            help="The set of filter values.",
            nullable=True,
        )

        values = cls._args_schema.filters_configuration.filters.Element.string_not_in.values
        values.Element = AAZStrArg(
            nullable=True,
        )

        included_event_types = cls._args_schema.filters_configuration.included_event_types
        included_event_types.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NamespaceTopicEventSubscriptionsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.NamespaceTopicEventSubscriptionsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NamespaceTopicEventSubscriptionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "eventSubscriptionName", self.ctx.args.event_subscription_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_subscription_read(cls._schema_on_200)

            return cls._schema_on_200

    class NamespaceTopicEventSubscriptionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "eventSubscriptionName", self.ctx.args.event_subscription_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_subscription_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("deliveryConfiguration", AAZObjectType, ".delivery_configuration")
                properties.set_prop("eventDeliverySchema", AAZStrType, ".event_delivery_schema")
                properties.set_prop("filtersConfiguration", AAZObjectType, ".filters_configuration")

            delivery_configuration = _builder.get(".properties.deliveryConfiguration")
            if delivery_configuration is not None:
                delivery_configuration.set_prop("deliveryMode", AAZStrType, ".delivery_mode")
                delivery_configuration.set_prop("queue", AAZObjectType, ".queue")

            queue = _builder.get(".properties.deliveryConfiguration.queue")
            if queue is not None:
                queue.set_prop("deadLetterDestinationWithResourceIdentity", AAZObjectType, ".dead_letter_destination_with_resource_identity")
                queue.set_prop("eventTimeToLive", AAZStrType, ".event_time_to_live")
                queue.set_prop("maxDeliveryCount", AAZIntType, ".max_delivery_count")
                queue.set_prop("receiveLockDurationInSeconds", AAZIntType, ".receive_lock_duration_in_seconds")

            dead_letter_destination_with_resource_identity = _builder.get(".properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity")
            if dead_letter_destination_with_resource_identity is not None:
                dead_letter_destination_with_resource_identity.set_prop("deadLetterDestination", AAZObjectType, ".dead_letter_destination")
                dead_letter_destination_with_resource_identity.set_prop("identity", AAZObjectType, ".identity")

            dead_letter_destination = _builder.get(".properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination")
            if dead_letter_destination is not None:
                dead_letter_destination.set_const("endpointType", "StorageBlob", AAZStrType, ".storage_blob", typ_kwargs={"flags": {"required": True}})
                dead_letter_destination.discriminate_by("endpointType", "StorageBlob")

            disc_storage_blob = _builder.get(".properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination{endpointType:StorageBlob}")
            if disc_storage_blob is not None:
                disc_storage_blob.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.deadLetterDestination{endpointType:StorageBlob}.properties")
            if properties is not None:
                properties.set_prop("blobContainerName", AAZStrType, ".storage_blob.blob_container_name")
                properties.set_prop("resourceId", AAZStrType, ".storage_blob.resource_id")

            identity = _builder.get(".properties.deliveryConfiguration.queue.deadLetterDestinationWithResourceIdentity.identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type")
                identity.set_prop("userAssignedIdentity", AAZStrType, ".user_assigned_identity")

            filters_configuration = _builder.get(".properties.filtersConfiguration")
            if filters_configuration is not None:
                filters_configuration.set_prop("filters", AAZListType, ".filters")
                filters_configuration.set_prop("includedEventTypes", AAZListType, ".included_event_types")

            filters = _builder.get(".properties.filtersConfiguration.filters")
            if filters is not None:
                filters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.filtersConfiguration.filters[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_const("operatorType", "BoolEquals", AAZStrType, ".bool_equals", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberGreaterThan", AAZStrType, ".number_greater_than", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberGreaterThanOrEquals", AAZStrType, ".number_greater_than_or_equals", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberIn", AAZStrType, ".number_in", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberInRange", AAZStrType, ".number_in_range", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberLessThan", AAZStrType, ".number_less_than", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberLessThanOrEquals", AAZStrType, ".number_less_than_or_equals", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberNotIn", AAZStrType, ".number_not_in", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "NumberNotInRange", AAZStrType, ".number_not_in_range", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringBeginsWith", AAZStrType, ".string_begins_with", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringContains", AAZStrType, ".string_contains", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringEndsWith", AAZStrType, ".string_ends_with", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringIn", AAZStrType, ".string_in", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringNotBeginsWith", AAZStrType, ".string_not_begins_with", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringNotContains", AAZStrType, ".string_not_contains", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringNotEndsWith", AAZStrType, ".string_not_ends_with", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("operatorType", "StringNotIn", AAZStrType, ".string_not_in", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("operatorType", "BoolEquals")
                _elements.discriminate_by("operatorType", "NumberGreaterThan")
                _elements.discriminate_by("operatorType", "NumberGreaterThanOrEquals")
                _elements.discriminate_by("operatorType", "NumberIn")
                _elements.discriminate_by("operatorType", "NumberInRange")
                _elements.discriminate_by("operatorType", "NumberLessThan")
                _elements.discriminate_by("operatorType", "NumberLessThanOrEquals")
                _elements.discriminate_by("operatorType", "NumberNotIn")
                _elements.discriminate_by("operatorType", "NumberNotInRange")
                _elements.discriminate_by("operatorType", "StringBeginsWith")
                _elements.discriminate_by("operatorType", "StringContains")
                _elements.discriminate_by("operatorType", "StringEndsWith")
                _elements.discriminate_by("operatorType", "StringIn")
                _elements.discriminate_by("operatorType", "StringNotBeginsWith")
                _elements.discriminate_by("operatorType", "StringNotContains")
                _elements.discriminate_by("operatorType", "StringNotEndsWith")
                _elements.discriminate_by("operatorType", "StringNotIn")

            disc_bool_equals = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:BoolEquals}")
            if disc_bool_equals is not None:
                disc_bool_equals.set_prop("value", AAZBoolType, ".bool_equals.value")

            disc_number_greater_than = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberGreaterThan}")
            if disc_number_greater_than is not None:
                disc_number_greater_than.set_prop("value", AAZFloatType, ".number_greater_than.value")

            disc_number_greater_than_or_equals = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberGreaterThanOrEquals}")
            if disc_number_greater_than_or_equals is not None:
                disc_number_greater_than_or_equals.set_prop("value", AAZFloatType, ".number_greater_than_or_equals.value")

            disc_number_in = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberIn}")
            if disc_number_in is not None:
                disc_number_in.set_prop("values", AAZListType, ".number_in.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberIn}.values")
            if values is not None:
                values.set_elements(AAZFloatType, ".")

            disc_number_in_range = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberInRange}")
            if disc_number_in_range is not None:
                disc_number_in_range.set_prop("values", AAZListType, ".number_in_range.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberInRange}.values")
            if values is not None:
                values.set_elements(AAZListType, ".")

            _elements = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberInRange}.values[]")
            if _elements is not None:
                _elements.set_elements(AAZFloatType, ".")

            disc_number_less_than = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberLessThan}")
            if disc_number_less_than is not None:
                disc_number_less_than.set_prop("value", AAZFloatType, ".number_less_than.value")

            disc_number_less_than_or_equals = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberLessThanOrEquals}")
            if disc_number_less_than_or_equals is not None:
                disc_number_less_than_or_equals.set_prop("value", AAZFloatType, ".number_less_than_or_equals.value")

            disc_number_not_in = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberNotIn}")
            if disc_number_not_in is not None:
                disc_number_not_in.set_prop("values", AAZListType, ".number_not_in.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberNotIn}.values")
            if values is not None:
                values.set_elements(AAZFloatType, ".")

            disc_number_not_in_range = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberNotInRange}")
            if disc_number_not_in_range is not None:
                disc_number_not_in_range.set_prop("values", AAZListType, ".number_not_in_range.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberNotInRange}.values")
            if values is not None:
                values.set_elements(AAZListType, ".")

            _elements = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:NumberNotInRange}.values[]")
            if _elements is not None:
                _elements.set_elements(AAZFloatType, ".")

            disc_string_begins_with = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringBeginsWith}")
            if disc_string_begins_with is not None:
                disc_string_begins_with.set_prop("values", AAZListType, ".string_begins_with.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringBeginsWith}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_contains = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringContains}")
            if disc_string_contains is not None:
                disc_string_contains.set_prop("values", AAZListType, ".string_contains.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringContains}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_ends_with = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringEndsWith}")
            if disc_string_ends_with is not None:
                disc_string_ends_with.set_prop("values", AAZListType, ".string_ends_with.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringEndsWith}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_in = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringIn}")
            if disc_string_in is not None:
                disc_string_in.set_prop("values", AAZListType, ".string_in.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringIn}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_not_begins_with = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotBeginsWith}")
            if disc_string_not_begins_with is not None:
                disc_string_not_begins_with.set_prop("values", AAZListType, ".string_not_begins_with.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotBeginsWith}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_not_contains = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotContains}")
            if disc_string_not_contains is not None:
                disc_string_not_contains.set_prop("values", AAZListType, ".string_not_contains.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotContains}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_not_ends_with = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotEndsWith}")
            if disc_string_not_ends_with is not None:
                disc_string_not_ends_with.set_prop("values", AAZListType, ".string_not_ends_with.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotEndsWith}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            disc_string_not_in = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotIn}")
            if disc_string_not_in is not None:
                disc_string_not_in.set_prop("values", AAZListType, ".string_not_in.values")

            values = _builder.get(".properties.filtersConfiguration.filters[]{operatorType:StringNotIn}.values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            included_event_types = _builder.get(".properties.filtersConfiguration.includedEventTypes")
            if included_event_types is not None:
                included_event_types.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_subscription_read = None

    @classmethod
    def _build_schema_subscription_read(cls, _schema):
        if cls._schema_subscription_read is not None:
            _schema.id = cls._schema_subscription_read.id
            _schema.name = cls._schema_subscription_read.name
            _schema.properties = cls._schema_subscription_read.properties
            _schema.system_data = cls._schema_subscription_read.system_data
            _schema.type = cls._schema_subscription_read.type
            return

        cls._schema_subscription_read = _schema_subscription_read = AAZObjectType()

        subscription_read = _schema_subscription_read
        subscription_read.id = AAZStrType(
            flags={"read_only": True},
        )
        subscription_read.name = AAZStrType(
            flags={"read_only": True},
        )
        subscription_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        subscription_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        subscription_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_subscription_read.properties
        properties.delivery_configuration = AAZObjectType(
            serialized_name="deliveryConfiguration",
        )
        properties.event_delivery_schema = AAZStrType(
            serialized_name="eventDeliverySchema",
        )
        properties.filters_configuration = AAZObjectType(
            serialized_name="filtersConfiguration",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        delivery_configuration = _schema_subscription_read.properties.delivery_configuration
        delivery_configuration.delivery_mode = AAZStrType(
            serialized_name="deliveryMode",
        )
        delivery_configuration.queue = AAZObjectType()

        queue = _schema_subscription_read.properties.delivery_configuration.queue
        queue.dead_letter_destination_with_resource_identity = AAZObjectType(
            serialized_name="deadLetterDestinationWithResourceIdentity",
        )
        queue.event_time_to_live = AAZStrType(
            serialized_name="eventTimeToLive",
        )
        queue.max_delivery_count = AAZIntType(
            serialized_name="maxDeliveryCount",
        )
        queue.receive_lock_duration_in_seconds = AAZIntType(
            serialized_name="receiveLockDurationInSeconds",
        )

        dead_letter_destination_with_resource_identity = _schema_subscription_read.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity
        dead_letter_destination_with_resource_identity.dead_letter_destination = AAZObjectType(
            serialized_name="deadLetterDestination",
        )
        dead_letter_destination_with_resource_identity.identity = AAZObjectType()

        dead_letter_destination = _schema_subscription_read.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination
        dead_letter_destination.endpoint_type = AAZStrType(
            serialized_name="endpointType",
            flags={"required": True},
        )

        disc_storage_blob = _schema_subscription_read.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination.discriminate_by("endpoint_type", "StorageBlob")
        disc_storage_blob.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_subscription_read.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination.discriminate_by("endpoint_type", "StorageBlob").properties
        properties.blob_container_name = AAZStrType(
            serialized_name="blobContainerName",
        )
        properties.resource_id = AAZStrType(
            serialized_name="resourceId",
        )

        identity = _schema_subscription_read.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.identity
        identity.type = AAZStrType()
        identity.user_assigned_identity = AAZStrType(
            serialized_name="userAssignedIdentity",
        )

        filters_configuration = _schema_subscription_read.properties.filters_configuration
        filters_configuration.filters = AAZListType()
        filters_configuration.included_event_types = AAZListType(
            serialized_name="includedEventTypes",
        )

        filters = _schema_subscription_read.properties.filters_configuration.filters
        filters.Element = AAZObjectType()

        _element = _schema_subscription_read.properties.filters_configuration.filters.Element
        _element.key = AAZStrType()
        _element.operator_type = AAZStrType(
            serialized_name="operatorType",
            flags={"required": True},
        )

        disc_bool_equals = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "BoolEquals")
        disc_bool_equals.value = AAZBoolType()

        disc_number_greater_than = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberGreaterThan")
        disc_number_greater_than.value = AAZFloatType()

        disc_number_greater_than_or_equals = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberGreaterThanOrEquals")
        disc_number_greater_than_or_equals.value = AAZFloatType()

        disc_number_in = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberIn")
        disc_number_in.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberIn").values
        values.Element = AAZFloatType()

        disc_number_in_range = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange")
        disc_number_in_range.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange").values
        values.Element = AAZListType()

        _element = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange").values.Element
        _element.Element = AAZFloatType()

        disc_number_less_than = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberLessThan")
        disc_number_less_than.value = AAZFloatType()

        disc_number_less_than_or_equals = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberLessThanOrEquals")
        disc_number_less_than_or_equals.value = AAZFloatType()

        disc_number_not_in = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotIn")
        disc_number_not_in.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotIn").values
        values.Element = AAZFloatType()

        disc_number_not_in_range = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange")
        disc_number_not_in_range.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange").values
        values.Element = AAZListType()

        _element = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange").values.Element
        _element.Element = AAZFloatType()

        disc_string_begins_with = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringBeginsWith")
        disc_string_begins_with.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringBeginsWith").values
        values.Element = AAZStrType()

        disc_string_contains = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringContains")
        disc_string_contains.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringContains").values
        values.Element = AAZStrType()

        disc_string_ends_with = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringEndsWith")
        disc_string_ends_with.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringEndsWith").values
        values.Element = AAZStrType()

        disc_string_in = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringIn")
        disc_string_in.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringIn").values
        values.Element = AAZStrType()

        disc_string_not_begins_with = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotBeginsWith")
        disc_string_not_begins_with.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotBeginsWith").values
        values.Element = AAZStrType()

        disc_string_not_contains = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotContains")
        disc_string_not_contains.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotContains").values
        values.Element = AAZStrType()

        disc_string_not_ends_with = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotEndsWith")
        disc_string_not_ends_with.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotEndsWith").values
        values.Element = AAZStrType()

        disc_string_not_in = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotIn")
        disc_string_not_in.values = AAZListType()

        values = _schema_subscription_read.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotIn").values
        values.Element = AAZStrType()

        included_event_types = _schema_subscription_read.properties.filters_configuration.included_event_types
        included_event_types.Element = AAZStrType()

        system_data = _schema_subscription_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_subscription_read.id
        _schema.name = cls._schema_subscription_read.name
        _schema.properties = cls._schema_subscription_read.properties
        _schema.system_data = cls._schema_subscription_read.system_data
        _schema.type = cls._schema_subscription_read.type


__all__ = ["Update"]
