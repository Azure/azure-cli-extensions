# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "eventgrid namespace topic event-subscription show",
    is_preview=True,
)
class Show(AAZCommand):
    """Show an event subscription of a namespace topic.

    :example: Show event subscription
        az eventgrid namespace topic event-subscription show -g rg --topic-name topic -n event-subscription --namespace-name name
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/topics/{}/eventsubscriptions/{}", "2023-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.event_subscription_name = AAZStrArg(
            options=["-n", "--name", "--event-subscription-name"],
            help="Name of the event subscription to be created. Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.",
            required=True,
            id_part="child_name_2",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.namespace_name = AAZStrArg(
            options=["--namespace-name"],
            help="Name of the namespace.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.topic_name = AAZStrArg(
            options=["--topic-name"],
            help="Name of the namespace topic.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NamespaceTopicEventSubscriptionsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NamespaceTopicEventSubscriptionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/topics/{topicName}/eventSubscriptions/{eventSubscriptionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "eventSubscriptionName", self.ctx.args.event_subscription_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "topicName", self.ctx.args.topic_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.delivery_configuration = AAZObjectType(
                serialized_name="deliveryConfiguration",
            )
            properties.event_delivery_schema = AAZStrType(
                serialized_name="eventDeliverySchema",
            )
            properties.filters_configuration = AAZObjectType(
                serialized_name="filtersConfiguration",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            delivery_configuration = cls._schema_on_200.properties.delivery_configuration
            delivery_configuration.delivery_mode = AAZStrType(
                serialized_name="deliveryMode",
            )
            delivery_configuration.queue = AAZObjectType()

            queue = cls._schema_on_200.properties.delivery_configuration.queue
            queue.dead_letter_destination_with_resource_identity = AAZObjectType(
                serialized_name="deadLetterDestinationWithResourceIdentity",
            )
            queue.event_time_to_live = AAZStrType(
                serialized_name="eventTimeToLive",
            )
            queue.max_delivery_count = AAZIntType(
                serialized_name="maxDeliveryCount",
            )
            queue.receive_lock_duration_in_seconds = AAZIntType(
                serialized_name="receiveLockDurationInSeconds",
            )

            dead_letter_destination_with_resource_identity = cls._schema_on_200.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity
            dead_letter_destination_with_resource_identity.dead_letter_destination = AAZObjectType(
                serialized_name="deadLetterDestination",
            )
            dead_letter_destination_with_resource_identity.identity = AAZObjectType()

            dead_letter_destination = cls._schema_on_200.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination
            dead_letter_destination.endpoint_type = AAZStrType(
                serialized_name="endpointType",
                flags={"required": True},
            )

            disc_storage_blob = cls._schema_on_200.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination.discriminate_by("endpoint_type", "StorageBlob")
            disc_storage_blob.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.dead_letter_destination.discriminate_by("endpoint_type", "StorageBlob").properties
            properties.blob_container_name = AAZStrType(
                serialized_name="blobContainerName",
            )
            properties.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            identity = cls._schema_on_200.properties.delivery_configuration.queue.dead_letter_destination_with_resource_identity.identity
            identity.type = AAZStrType()
            identity.user_assigned_identity = AAZStrType(
                serialized_name="userAssignedIdentity",
            )

            filters_configuration = cls._schema_on_200.properties.filters_configuration
            filters_configuration.filters = AAZListType()
            filters_configuration.included_event_types = AAZListType(
                serialized_name="includedEventTypes",
            )

            filters = cls._schema_on_200.properties.filters_configuration.filters
            filters.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.filters_configuration.filters.Element
            _element.key = AAZStrType()
            _element.operator_type = AAZStrType(
                serialized_name="operatorType",
                flags={"required": True},
            )

            disc_bool_equals = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "BoolEquals")
            disc_bool_equals.value = AAZBoolType()

            disc_number_greater_than = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberGreaterThan")
            disc_number_greater_than.value = AAZFloatType()

            disc_number_greater_than_or_equals = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberGreaterThanOrEquals")
            disc_number_greater_than_or_equals.value = AAZFloatType()

            disc_number_in = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberIn")
            disc_number_in.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberIn").values
            values.Element = AAZFloatType()

            disc_number_in_range = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange")
            disc_number_in_range.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange").values
            values.Element = AAZListType()

            _element = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberInRange").values.Element
            _element.Element = AAZFloatType()

            disc_number_less_than = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberLessThan")
            disc_number_less_than.value = AAZFloatType()

            disc_number_less_than_or_equals = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberLessThanOrEquals")
            disc_number_less_than_or_equals.value = AAZFloatType()

            disc_number_not_in = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotIn")
            disc_number_not_in.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotIn").values
            values.Element = AAZFloatType()

            disc_number_not_in_range = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange")
            disc_number_not_in_range.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange").values
            values.Element = AAZListType()

            _element = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "NumberNotInRange").values.Element
            _element.Element = AAZFloatType()

            disc_string_begins_with = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringBeginsWith")
            disc_string_begins_with.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringBeginsWith").values
            values.Element = AAZStrType()

            disc_string_contains = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringContains")
            disc_string_contains.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringContains").values
            values.Element = AAZStrType()

            disc_string_ends_with = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringEndsWith")
            disc_string_ends_with.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringEndsWith").values
            values.Element = AAZStrType()

            disc_string_in = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringIn")
            disc_string_in.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringIn").values
            values.Element = AAZStrType()

            disc_string_not_begins_with = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotBeginsWith")
            disc_string_not_begins_with.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotBeginsWith").values
            values.Element = AAZStrType()

            disc_string_not_contains = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotContains")
            disc_string_not_contains.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotContains").values
            values.Element = AAZStrType()

            disc_string_not_ends_with = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotEndsWith")
            disc_string_not_ends_with.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotEndsWith").values
            values.Element = AAZStrType()

            disc_string_not_in = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotIn")
            disc_string_not_in.values = AAZListType()

            values = cls._schema_on_200.properties.filters_configuration.filters.Element.discriminate_by("operator_type", "StringNotIn").values
            values.Element = AAZStrType()

            included_event_types = cls._schema_on_200.properties.filters_configuration.included_event_types
            included_event_types.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
