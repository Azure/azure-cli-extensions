# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "eventgrid namespace create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new namespace.

    :example: Create namespace
        az eventgrid namespace create -g rg -n namespace
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}", "2023-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.namespace_name = AAZStrArg(
            options=["-n", "--name", "--namespace-name"],
            help="Name of the namespace.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "NamespaceInfo"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="NamespaceInfo",
            help="Identity information for the Namespace resource.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="NamespaceInfo",
            help="Location of the resource.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="NamespaceInfo",
            help="Represents available Sku pricing tiers.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="NamespaceInfo",
            help="Tags of the resource.",
        )

        identity = cls._args_schema.identity
        identity.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The principal ID of resource identity.",
        )
        identity.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="The tenant ID of resource.",
        )
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of managed identity used.",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The list of user identities associated with the resource.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg()

        _element = cls._args_schema.identity.user_assigned_identities.Element
        _element.client_id = AAZStrArg(
            options=["client-id"],
            help="The client id of user assigned identity.",
        )
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The principal id of user assigned identity.",
        )

        sku = cls._args_schema.sku
        sku.capacity = AAZIntArg(
            options=["capacity"],
            help="Specifies the number of Throughput Units that defines the capacity for the namespace.",
        )
        sku.name = AAZStrArg(
            options=["name"],
            help="The name of the SKU.",
            enum={"Standard": "Standard"},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.inbound_ip_rules = AAZListArg(
            options=["--inbound-ip-rules"],
            arg_group="Properties",
            help="This can be used to restrict traffic from specific IPs instead of all IPs. Note: These are considered only if PublicNetworkAccess is enabled.",
        )
        _args_schema.is_zone_redundant = AAZBoolArg(
            options=["--is-zone-redundant"],
            arg_group="Properties",
            help="Allows the user to specify if the service is zone-redundant.",
        )
        _args_schema.minimum_tls_version_allowed = AAZStrArg(
            options=["--minimum-tls-version-allowed"],
            arg_group="Properties",
            help="Minimum TLS version of the publisher allowed to publish to this namespace. Only TLS version 1.2 is supported.",
            enum={"1.0": "1.0", "1.1": "1.1", "1.2": "1.2"},
        )
        _args_schema.private_endpoint_connections = AAZListArg(
            options=["--private-endpoint-connections"],
            arg_group="Properties",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="This determines if traffic is allowed over public network.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.topic_spaces_configuration = AAZObjectArg(
            options=["--topic-spaces-configuration"],
            arg_group="Properties",
            help="Topic spaces configuration information for the namespace resource",
        )

        inbound_ip_rules = cls._args_schema.inbound_ip_rules
        inbound_ip_rules.Element = AAZObjectArg()

        _element = cls._args_schema.inbound_ip_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Action to perform based on the match or no match of the IpMask.",
            enum={"Allow": "Allow"},
        )
        _element.ip_mask = AAZStrArg(
            options=["ip-mask"],
            help="IP Address in CIDR notation e.g., 10.0.0.0/8.",
        )

        private_endpoint_connections = cls._args_schema.private_endpoint_connections
        private_endpoint_connections.Element = AAZObjectArg()

        _element = cls._args_schema.private_endpoint_connections.Element
        _element.group_ids = AAZListArg(
            options=["group-ids"],
            help="GroupIds from the private link service resource.",
        )
        _element.private_endpoint = AAZObjectArg(
            options=["private-endpoint"],
            help="The Private Endpoint resource for this Connection.",
        )
        _element.private_link_service_connection_state = AAZObjectArg(
            options=["private-link-service-connection-state"],
            help="Details about the state of the connection.",
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            help="Provisioning state of the Private Endpoint Connection.",
            enum={"Canceled": "Canceled", "Creating": "Creating", "Deleting": "Deleting", "Failed": "Failed", "Succeeded": "Succeeded", "Updating": "Updating"},
        )

        group_ids = cls._args_schema.private_endpoint_connections.Element.group_ids
        group_ids.Element = AAZStrArg()

        private_endpoint = cls._args_schema.private_endpoint_connections.Element.private_endpoint
        private_endpoint.id = AAZStrArg(
            options=["id"],
            help="The ARM identifier for Private Endpoint.",
        )

        private_link_service_connection_state = cls._args_schema.private_endpoint_connections.Element.private_link_service_connection_state
        private_link_service_connection_state.actions_required = AAZStrArg(
            options=["actions-required"],
            help="Actions required (if any).",
        )
        private_link_service_connection_state.description = AAZStrArg(
            options=["description"],
            help="Description of the connection state.",
        )
        private_link_service_connection_state.status = AAZStrArg(
            options=["status"],
            help="Status of the connection.",
            enum={"Approved": "Approved", "Disconnected": "Disconnected", "Pending": "Pending", "Rejected": "Rejected"},
        )

        topic_spaces_configuration = cls._args_schema.topic_spaces_configuration
        topic_spaces_configuration.client_authentication = AAZObjectArg(
            options=["client-authentication"],
            help="Client authentication settings for topic spaces configuration.",
        )
        topic_spaces_configuration.maximum_client_sessions_per_authentication_name = AAZIntArg(
            options=["maximum-client-sessions-per-authentication-name"],
            help="The maximum number of sessions per authentication name.",
        )
        topic_spaces_configuration.maximum_session_expiry_in_hours = AAZIntArg(
            options=["maximum-session-expiry-in-hours"],
            help="The maximum session expiry in hours.",
        )
        topic_spaces_configuration.route_topic_resource_id = AAZStrArg(
            options=["route-topic-resource-id"],
            help="Fully qualified Azure Resource Id for the Event Grid Topic to which events will be routed to from TopicSpaces under a namespace.",
        )
        topic_spaces_configuration.routing_enrichments = AAZObjectArg(
            options=["routing-enrichments"],
            help="Routing enrichments for topic spaces configuration",
        )
        topic_spaces_configuration.routing_identity_info = AAZObjectArg(
            options=["routing-identity-info"],
            help="Routing identity info for topic spaces configuration.",
        )
        topic_spaces_configuration.state = AAZStrArg(
            options=["state"],
            help="Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.",
            default="Disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        client_authentication = cls._args_schema.topic_spaces_configuration.client_authentication
        client_authentication.alternative_authentication_name_sources = AAZListArg(
            options=["alternative-authentication-name-sources"],
            help="Alternative authentication name sources related to client authentication settings for namespace resource.",
        )

        alternative_authentication_name_sources = cls._args_schema.topic_spaces_configuration.client_authentication.alternative_authentication_name_sources
        alternative_authentication_name_sources.Element = AAZStrArg(
            enum={"ClientCertificateDns": "ClientCertificateDns", "ClientCertificateEmail": "ClientCertificateEmail", "ClientCertificateIp": "ClientCertificateIp", "ClientCertificateSubject": "ClientCertificateSubject", "ClientCertificateUri": "ClientCertificateUri"},
        )

        routing_enrichments = cls._args_schema.topic_spaces_configuration.routing_enrichments
        routing_enrichments.dynamic = AAZListArg(
            options=["dynamic"],
        )
        routing_enrichments.static = AAZListArg(
            options=["static"],
        )

        dynamic = cls._args_schema.topic_spaces_configuration.routing_enrichments.dynamic
        dynamic.Element = AAZObjectArg()

        _element = cls._args_schema.topic_spaces_configuration.routing_enrichments.dynamic.Element
        _element.key = AAZStrArg(
            options=["key"],
            help="Dynamic routing enrichment key.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Dynamic routing enrichment value.",
        )

        static = cls._args_schema.topic_spaces_configuration.routing_enrichments.static
        static.Element = AAZObjectArg()

        _element = cls._args_schema.topic_spaces_configuration.routing_enrichments.static.Element
        _element.key = AAZStrArg(
            options=["key"],
            help="Static routing enrichment key.",
        )
        _element.value_type = AAZStrArg(
            options=["value-type"],
            help="Static routing enrichment value type. For e.g. this property value can be 'String'.",
            enum={"String": "String"},
        )

        routing_identity_info = cls._args_schema.topic_spaces_configuration.routing_identity_info
        routing_identity_info.type = AAZStrArg(
            options=["type"],
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )
        routing_identity_info.user_assigned_identity = AAZStrArg(
            options=["user-assigned-identity"],
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NamespacesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NamespacesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("sku", AAZObjectType, ".sku")
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("principalId", AAZStrType, ".principal_id")
                identity.set_prop("tenantId", AAZStrType, ".tenant_id")
                identity.set_prop("type", AAZStrType, ".type")
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".identity.userAssignedIdentities{}")
            if _elements is not None:
                _elements.set_prop("clientId", AAZStrType, ".client_id")
                _elements.set_prop("principalId", AAZStrType, ".principal_id")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("inboundIpRules", AAZListType, ".inbound_ip_rules")
                properties.set_prop("isZoneRedundant", AAZBoolType, ".is_zone_redundant")
                properties.set_prop("minimumTlsVersionAllowed", AAZStrType, ".minimum_tls_version_allowed")
                properties.set_prop("privateEndpointConnections", AAZListType, ".private_endpoint_connections")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("topicSpacesConfiguration", AAZObjectType, ".topic_spaces_configuration")

            inbound_ip_rules = _builder.get(".properties.inboundIpRules")
            if inbound_ip_rules is not None:
                inbound_ip_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.inboundIpRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("ipMask", AAZStrType, ".ip_mask")

            private_endpoint_connections = _builder.get(".properties.privateEndpointConnections")
            if private_endpoint_connections is not None:
                private_endpoint_connections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.privateEndpointConnections[]")
            if _elements is not None:
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.privateEndpointConnections[].properties")
            if properties is not None:
                properties.set_prop("groupIds", AAZListType, ".group_ids")
                properties.set_prop("privateEndpoint", AAZObjectType, ".private_endpoint")
                properties.set_prop("privateLinkServiceConnectionState", AAZObjectType, ".private_link_service_connection_state")
                properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")

            group_ids = _builder.get(".properties.privateEndpointConnections[].properties.groupIds")
            if group_ids is not None:
                group_ids.set_elements(AAZStrType, ".")

            private_endpoint = _builder.get(".properties.privateEndpointConnections[].properties.privateEndpoint")
            if private_endpoint is not None:
                private_endpoint.set_prop("id", AAZStrType, ".id")

            private_link_service_connection_state = _builder.get(".properties.privateEndpointConnections[].properties.privateLinkServiceConnectionState")
            if private_link_service_connection_state is not None:
                private_link_service_connection_state.set_prop("actionsRequired", AAZStrType, ".actions_required")
                private_link_service_connection_state.set_prop("description", AAZStrType, ".description")
                private_link_service_connection_state.set_prop("status", AAZStrType, ".status")

            topic_spaces_configuration = _builder.get(".properties.topicSpacesConfiguration")
            if topic_spaces_configuration is not None:
                topic_spaces_configuration.set_prop("clientAuthentication", AAZObjectType, ".client_authentication")
                topic_spaces_configuration.set_prop("maximumClientSessionsPerAuthenticationName", AAZIntType, ".maximum_client_sessions_per_authentication_name")
                topic_spaces_configuration.set_prop("maximumSessionExpiryInHours", AAZIntType, ".maximum_session_expiry_in_hours")
                topic_spaces_configuration.set_prop("routeTopicResourceId", AAZStrType, ".route_topic_resource_id")
                topic_spaces_configuration.set_prop("routingEnrichments", AAZObjectType, ".routing_enrichments")
                topic_spaces_configuration.set_prop("routingIdentityInfo", AAZObjectType, ".routing_identity_info")
                topic_spaces_configuration.set_prop("state", AAZStrType, ".state")

            client_authentication = _builder.get(".properties.topicSpacesConfiguration.clientAuthentication")
            if client_authentication is not None:
                client_authentication.set_prop("alternativeAuthenticationNameSources", AAZListType, ".alternative_authentication_name_sources")

            alternative_authentication_name_sources = _builder.get(".properties.topicSpacesConfiguration.clientAuthentication.alternativeAuthenticationNameSources")
            if alternative_authentication_name_sources is not None:
                alternative_authentication_name_sources.set_elements(AAZStrType, ".")

            routing_enrichments = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments")
            if routing_enrichments is not None:
                routing_enrichments.set_prop("dynamic", AAZListType, ".dynamic")
                routing_enrichments.set_prop("static", AAZListType, ".static")

            dynamic = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.dynamic")
            if dynamic is not None:
                dynamic.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.dynamic[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_prop("value", AAZStrType, ".value")

            static = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.static")
            if static is not None:
                static.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.static[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_prop("valueType", AAZStrType, ".value_type")

            routing_identity_info = _builder.get(".properties.topicSpacesConfiguration.routingIdentityInfo")
            if routing_identity_info is not None:
                routing_identity_info.set_prop("type", AAZStrType, ".type")
                routing_identity_info.set_prop("userAssignedIdentity", AAZStrType, ".user_assigned_identity")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("capacity", AAZIntType, ".capacity")
                sku.set_prop("name", AAZStrType, ".name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.sku = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
            )
            identity.type = AAZStrType()
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
            )

            properties = cls._schema_on_200_201.properties
            properties.inbound_ip_rules = AAZListType(
                serialized_name="inboundIpRules",
            )
            properties.is_zone_redundant = AAZBoolType(
                serialized_name="isZoneRedundant",
            )
            properties.minimum_tls_version_allowed = AAZStrType(
                serialized_name="minimumTlsVersionAllowed",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.topic_spaces_configuration = AAZObjectType(
                serialized_name="topicSpacesConfiguration",
            )
            properties.topics_configuration = AAZObjectType(
                serialized_name="topicsConfiguration",
            )

            inbound_ip_rules = cls._schema_on_200_201.properties.inbound_ip_rules
            inbound_ip_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.inbound_ip_rules.Element
            _element.action = AAZStrType()
            _element.ip_mask = AAZStrType(
                serialized_name="ipMask",
            )

            private_endpoint_connections = cls._schema_on_200_201.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties
            properties.group_ids = AAZListType(
                serialized_name="groupIds",
            )
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )

            group_ids = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.group_ids
            group_ids.Element = AAZStrType()

            private_endpoint = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType()

            private_link_service_connection_state = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
            )
            private_link_service_connection_state.description = AAZStrType()
            private_link_service_connection_state.status = AAZStrType()

            topic_spaces_configuration = cls._schema_on_200_201.properties.topic_spaces_configuration
            topic_spaces_configuration.client_authentication = AAZObjectType(
                serialized_name="clientAuthentication",
            )
            topic_spaces_configuration.hostname = AAZStrType(
                flags={"read_only": True},
            )
            topic_spaces_configuration.maximum_client_sessions_per_authentication_name = AAZIntType(
                serialized_name="maximumClientSessionsPerAuthenticationName",
            )
            topic_spaces_configuration.maximum_session_expiry_in_hours = AAZIntType(
                serialized_name="maximumSessionExpiryInHours",
            )
            topic_spaces_configuration.route_topic_resource_id = AAZStrType(
                serialized_name="routeTopicResourceId",
            )
            topic_spaces_configuration.routing_enrichments = AAZObjectType(
                serialized_name="routingEnrichments",
            )
            topic_spaces_configuration.routing_identity_info = AAZObjectType(
                serialized_name="routingIdentityInfo",
            )
            topic_spaces_configuration.state = AAZStrType()

            client_authentication = cls._schema_on_200_201.properties.topic_spaces_configuration.client_authentication
            client_authentication.alternative_authentication_name_sources = AAZListType(
                serialized_name="alternativeAuthenticationNameSources",
            )

            alternative_authentication_name_sources = cls._schema_on_200_201.properties.topic_spaces_configuration.client_authentication.alternative_authentication_name_sources
            alternative_authentication_name_sources.Element = AAZStrType()

            routing_enrichments = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_enrichments
            routing_enrichments.dynamic = AAZListType()
            routing_enrichments.static = AAZListType()

            dynamic = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_enrichments.dynamic
            dynamic.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_enrichments.dynamic.Element
            _element.key = AAZStrType()
            _element.value = AAZStrType()

            static = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_enrichments.static
            static.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_enrichments.static.Element
            _element.key = AAZStrType()
            _element.value_type = AAZStrType(
                serialized_name="valueType",
            )

            routing_identity_info = cls._schema_on_200_201.properties.topic_spaces_configuration.routing_identity_info
            routing_identity_info.type = AAZStrType()
            routing_identity_info.user_assigned_identity = AAZStrType(
                serialized_name="userAssignedIdentity",
            )

            topics_configuration = cls._schema_on_200_201.properties.topics_configuration
            topics_configuration.hostname = AAZStrType(
                flags={"read_only": True},
            )

            sku = cls._schema_on_200_201.sku
            sku.capacity = AAZIntType()
            sku.name = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
