# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "eventgrid namespace client update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a client.

    :example: Update client
        az eventgrid namespace client update -g rg --namespace-name name -n client-name --description test
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}/clients/{}", "2023-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.client_name = AAZStrArg(
            options=["-n", "--name", "--client-name"],
            help="Name of the client.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[-a-zA-Z0-9:\._]*$",
                max_length=128,
                min_length=1,
            ),
        )
        _args_schema.namespace_name = AAZStrArg(
            options=["--namespace-name"],
            help="Name of the namespace.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.attributes = AAZFreeFormDictArg(
            options=["--attributes"],
            arg_group="Properties",
            help="Attributes for the client.",
            nullable=True,
        )
        _args_schema.authentication = AAZObjectArg(
            options=["--authentication"],
            arg_group="Properties",
            help="Authentication information for the client.",
            nullable=True,
        )
        _args_schema.client_certificate_authentication = AAZObjectArg(
            options=["--client-certificate-authentication"],
            arg_group="Properties",
            help="The client certificate authentication information.",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Description for the Client resource.",
            nullable=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="Indicates if the client is enabled or not. Default value is Enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        authentication = cls._args_schema.authentication
        authentication.certificate_subject = AAZObjectArg(
            options=["certificate-subject"],
            help="The CA certificate subject name used for authentication.",
            nullable=True,
        )
        authentication.certificate_thumbprint = AAZObjectArg(
            options=["certificate-thumbprint"],
            help="The self signed certificate's thumbprints data used for authentication.",
            nullable=True,
        )

        certificate_subject = cls._args_schema.authentication.certificate_subject
        certificate_subject.common_name = AAZStrArg(
            options=["common-name"],
            help="The common name field in the subject name. The allowed limit is 64 characters and it should be specified.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=64,
                min_length=0,
            ),
        )
        certificate_subject.country_code = AAZStrArg(
            options=["country-code"],
            help="The country code field in the subject name. If present, the country code should be represented by two-letter code defined in ISO 2166-1 (alpha-2). For example: 'US'.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=2,
                min_length=2,
            ),
        )
        certificate_subject.organization = AAZStrArg(
            options=["organization"],
            help="The organization field in the subject name. If present, the allowed limit is 64 characters.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=64,
                min_length=0,
            ),
        )
        certificate_subject.organization_unit = AAZStrArg(
            options=["organization-unit"],
            help="The organization unit field in the subject name. If present, the allowed limit is 32 characters.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=32,
                min_length=0,
            ),
        )

        certificate_thumbprint = cls._args_schema.authentication.certificate_thumbprint
        certificate_thumbprint.primary = AAZStrArg(
            options=["primary"],
            help="The primary thumbprint used for validation.",
            nullable=True,
        )
        certificate_thumbprint.secondary = AAZStrArg(
            options=["secondary"],
            help="The secondary thumbprint used for validation.",
            nullable=True,
        )

        client_certificate_authentication = cls._args_schema.client_certificate_authentication
        client_certificate_authentication.allowed_thumbprints = AAZListArg(
            options=["allowed-thumbprints"],
            help="The list of thumbprints that are allowed during client authentication. This property is required only if the validationScheme is 'ThumbprintMatch'.",
            nullable=True,
        )
        client_certificate_authentication.validation_scheme = AAZStrArg(
            options=["validation-scheme"],
            help="The validation scheme used to authenticate the client. Default value is SubjectMatchesAuthenticationName.",
            nullable=True,
            enum={"DnsMatchesAuthenticationName": "DnsMatchesAuthenticationName", "EmailMatchesAuthenticationName": "EmailMatchesAuthenticationName", "IpMatchesAuthenticationName": "IpMatchesAuthenticationName", "SubjectMatchesAuthenticationName": "SubjectMatchesAuthenticationName", "ThumbprintMatch": "ThumbprintMatch", "UriMatchesAuthenticationName": "UriMatchesAuthenticationName"},
        )

        allowed_thumbprints = cls._args_schema.client_certificate_authentication.allowed_thumbprints
        allowed_thumbprints.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ClientsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ClientsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ClientsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clientName", self.ctx.args.client_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_client_read(cls._schema_on_200)

            return cls._schema_on_200

    class ClientsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}/clients/{clientName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clientName", self.ctx.args.client_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_client_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("attributes", AAZFreeFormDictType, ".attributes")
                properties.set_prop("authentication", AAZObjectType, ".authentication")
                properties.set_prop("clientCertificateAuthentication", AAZObjectType, ".client_certificate_authentication")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("state", AAZStrType, ".state")

            attributes = _builder.get(".properties.attributes")
            if attributes is not None:
                attributes.set_anytype_elements(".")

            authentication = _builder.get(".properties.authentication")
            if authentication is not None:
                authentication.set_prop("certificateSubject", AAZObjectType, ".certificate_subject")
                authentication.set_prop("certificateThumbprint", AAZObjectType, ".certificate_thumbprint")

            certificate_subject = _builder.get(".properties.authentication.certificateSubject")
            if certificate_subject is not None:
                certificate_subject.set_prop("commonName", AAZStrType, ".common_name")
                certificate_subject.set_prop("countryCode", AAZStrType, ".country_code")
                certificate_subject.set_prop("organization", AAZStrType, ".organization")
                certificate_subject.set_prop("organizationUnit", AAZStrType, ".organization_unit")

            certificate_thumbprint = _builder.get(".properties.authentication.certificateThumbprint")
            if certificate_thumbprint is not None:
                certificate_thumbprint.set_prop("primary", AAZStrType, ".primary")
                certificate_thumbprint.set_prop("secondary", AAZStrType, ".secondary")

            client_certificate_authentication = _builder.get(".properties.clientCertificateAuthentication")
            if client_certificate_authentication is not None:
                client_certificate_authentication.set_prop("allowedThumbprints", AAZListType, ".allowed_thumbprints")
                client_certificate_authentication.set_prop("validationScheme", AAZStrType, ".validation_scheme")

            allowed_thumbprints = _builder.get(".properties.clientCertificateAuthentication.allowedThumbprints")
            if allowed_thumbprints is not None:
                allowed_thumbprints.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_client_read = None

    @classmethod
    def _build_schema_client_read(cls, _schema):
        if cls._schema_client_read is not None:
            _schema.id = cls._schema_client_read.id
            _schema.name = cls._schema_client_read.name
            _schema.properties = cls._schema_client_read.properties
            _schema.system_data = cls._schema_client_read.system_data
            _schema.type = cls._schema_client_read.type
            return

        cls._schema_client_read = _schema_client_read = AAZObjectType()

        client_read = _schema_client_read
        client_read.id = AAZStrType(
            flags={"read_only": True},
        )
        client_read.name = AAZStrType(
            flags={"read_only": True},
        )
        client_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        client_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        client_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_client_read.properties
        properties.attributes = AAZFreeFormDictType()
        properties.authentication = AAZObjectType()
        properties.authentication_name = AAZStrType(
            serialized_name="authenticationName",
        )
        properties.client_certificate_authentication = AAZObjectType(
            serialized_name="clientCertificateAuthentication",
        )
        properties.description = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.state = AAZStrType()

        authentication = _schema_client_read.properties.authentication
        authentication.certificate_subject = AAZObjectType(
            serialized_name="certificateSubject",
        )
        authentication.certificate_thumbprint = AAZObjectType(
            serialized_name="certificateThumbprint",
        )

        certificate_subject = _schema_client_read.properties.authentication.certificate_subject
        certificate_subject.common_name = AAZStrType(
            serialized_name="commonName",
        )
        certificate_subject.country_code = AAZStrType(
            serialized_name="countryCode",
        )
        certificate_subject.organization = AAZStrType()
        certificate_subject.organization_unit = AAZStrType(
            serialized_name="organizationUnit",
        )

        certificate_thumbprint = _schema_client_read.properties.authentication.certificate_thumbprint
        certificate_thumbprint.primary = AAZStrType()
        certificate_thumbprint.secondary = AAZStrType()

        client_certificate_authentication = _schema_client_read.properties.client_certificate_authentication
        client_certificate_authentication.allowed_thumbprints = AAZListType(
            serialized_name="allowedThumbprints",
        )
        client_certificate_authentication.validation_scheme = AAZStrType(
            serialized_name="validationScheme",
        )

        allowed_thumbprints = _schema_client_read.properties.client_certificate_authentication.allowed_thumbprints
        allowed_thumbprints.Element = AAZStrType()

        system_data = _schema_client_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_client_read.id
        _schema.name = cls._schema_client_read.name
        _schema.properties = cls._schema_client_read.properties
        _schema.system_data = cls._schema_client_read.system_data
        _schema.type = cls._schema_client_read.type


__all__ = ["Update"]
