# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "eventgrid namespace update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a namespace.

    :example: Update namespace
        az eventgrid namespace update -g rg -n namespoace --tags "{tag:test}" --sku "{name:standard,capacity:2}" --topic-spaces-configuration "{maximumSessionExpiryInHours:1}"
    """

    _aaz_info = {
        "version": "2023-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.eventgrid/namespaces/{}", "2023-06-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.namespace_name = AAZStrArg(
            options=["-n", "--name", "--namespace-name"],
            help="Name of the namespace.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]*$",
                max_length=50,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "NamespaceUpdateParameters"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="NamespaceUpdateParameters",
            help="Namespace resource identity information.",
        )
        _args_schema.sku = AAZObjectArg(
            options=["--sku"],
            arg_group="NamespaceUpdateParameters",
            help="Represents available Sku pricing tiers.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="NamespaceUpdateParameters",
            help="Tags of the namespace resource.",
        )

        identity = cls._args_schema.identity
        identity.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The principal ID of resource identity.",
        )
        identity.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="The tenant ID of resource.",
        )
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of managed identity used.",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned, UserAssigned": "SystemAssigned, UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The list of user identities associated with the resource.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg()

        _element = cls._args_schema.identity.user_assigned_identities.Element
        _element.client_id = AAZStrArg(
            options=["client-id"],
            help="The client id of user assigned identity.",
        )
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The principal id of user assigned identity.",
        )

        sku = cls._args_schema.sku
        sku.capacity = AAZIntArg(
            options=["capacity"],
            help="Specifies the number of Throughput Units that defines the capacity for the namespace.",
        )
        sku.name = AAZStrArg(
            options=["name"],
            help="The name of the SKU.",
            enum={"Standard": "Standard"},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.inbound_ip_rules = AAZListArg(
            options=["--inbound-ip-rules"],
            arg_group="Properties",
            help="This can be used to restrict traffic from specific IPs instead of all IPs.",
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="This determines if traffic is allowed over public network.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.topic_spaces_configuration = AAZObjectArg(
            options=["--topic-spaces-configuration"],
            arg_group="Properties",
            help="Topic spaces configuration properties that can be updated.",
        )

        inbound_ip_rules = cls._args_schema.inbound_ip_rules
        inbound_ip_rules.Element = AAZObjectArg()

        _element = cls._args_schema.inbound_ip_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="Action to perform based on the match or no match of the IpMask.",
            enum={"Allow": "Allow"},
        )
        _element.ip_mask = AAZStrArg(
            options=["ip-mask"],
            help="IP Address in CIDR notation e.g., 10.0.0.0/8.",
        )

        topic_spaces_configuration = cls._args_schema.topic_spaces_configuration
        topic_spaces_configuration.client_authentication = AAZObjectArg(
            options=["client-authentication"],
            help="Client authentication settings for topic spaces configuration.",
        )
        topic_spaces_configuration.maximum_client_sessions_per_authentication_name = AAZIntArg(
            options=["maximum-client-sessions-per-authentication-name"],
            help="The maximum number of sessions per authentication name.",
        )
        topic_spaces_configuration.maximum_session_expiry_in_hours = AAZIntArg(
            options=["maximum-session-expiry-in-hours"],
            help="The maximum session expiry in hours.",
        )
        topic_spaces_configuration.route_topic_resource_id = AAZStrArg(
            options=["route-topic-resource-id"],
            help="This property is used to specify custom topic to which events will be routed to from topic spaces configuration under namespace.",
        )
        topic_spaces_configuration.routing_enrichments = AAZObjectArg(
            options=["routing-enrichments"],
            help="Routing enrichments for topic spaces configuration.",
        )
        topic_spaces_configuration.routing_identity_info = AAZObjectArg(
            options=["routing-identity-info"],
            help="Routing identity info for topic spaces configuration.",
        )
        topic_spaces_configuration.state = AAZStrArg(
            options=["state"],
            help="Indicate if Topic Spaces Configuration is enabled for the namespace. Default is Disabled.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        client_authentication = cls._args_schema.topic_spaces_configuration.client_authentication
        client_authentication.alternative_authentication_name_sources = AAZListArg(
            options=["alternative-authentication-name-sources"],
            help="Alternative authentication name sources related to client authentication settings for namespace resource.",
        )

        alternative_authentication_name_sources = cls._args_schema.topic_spaces_configuration.client_authentication.alternative_authentication_name_sources
        alternative_authentication_name_sources.Element = AAZStrArg(
            enum={"ClientCertificateDns": "ClientCertificateDns", "ClientCertificateEmail": "ClientCertificateEmail", "ClientCertificateIp": "ClientCertificateIp", "ClientCertificateSubject": "ClientCertificateSubject", "ClientCertificateUri": "ClientCertificateUri"},
        )

        routing_enrichments = cls._args_schema.topic_spaces_configuration.routing_enrichments
        routing_enrichments.dynamic = AAZListArg(
            options=["dynamic"],
        )
        routing_enrichments.static = AAZListArg(
            options=["static"],
        )

        dynamic = cls._args_schema.topic_spaces_configuration.routing_enrichments.dynamic
        dynamic.Element = AAZObjectArg()

        _element = cls._args_schema.topic_spaces_configuration.routing_enrichments.dynamic.Element
        _element.key = AAZStrArg(
            options=["key"],
            help="Dynamic routing enrichment key.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Dynamic routing enrichment value.",
        )

        static = cls._args_schema.topic_spaces_configuration.routing_enrichments.static
        static.Element = AAZObjectArg()

        _element = cls._args_schema.topic_spaces_configuration.routing_enrichments.static.Element
        _element.key = AAZStrArg(
            options=["key"],
            help="Static routing enrichment key.",
        )
        _element.value_type = AAZStrArg(
            options=["value-type"],
            help="Static routing enrichment value type. For e.g. this property value can be 'String'.",
            enum={"String": "String"},
        )

        routing_identity_info = cls._args_schema.topic_spaces_configuration.routing_identity_info
        routing_identity_info.type = AAZStrArg(
            options=["type"],
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )
        routing_identity_info.user_assigned_identity = AAZStrArg(
            options=["user-assigned-identity"],
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NamespacesUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NamespacesUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/namespaces/{namespaceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("sku", AAZObjectType, ".sku")
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("principalId", AAZStrType, ".principal_id")
                identity.set_prop("tenantId", AAZStrType, ".tenant_id")
                identity.set_prop("type", AAZStrType, ".type")
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".identity.userAssignedIdentities{}")
            if _elements is not None:
                _elements.set_prop("clientId", AAZStrType, ".client_id")
                _elements.set_prop("principalId", AAZStrType, ".principal_id")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("inboundIpRules", AAZListType, ".inbound_ip_rules")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("topicSpacesConfiguration", AAZObjectType, ".topic_spaces_configuration")

            inbound_ip_rules = _builder.get(".properties.inboundIpRules")
            if inbound_ip_rules is not None:
                inbound_ip_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.inboundIpRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("ipMask", AAZStrType, ".ip_mask")

            topic_spaces_configuration = _builder.get(".properties.topicSpacesConfiguration")
            if topic_spaces_configuration is not None:
                topic_spaces_configuration.set_prop("clientAuthentication", AAZObjectType, ".client_authentication")
                topic_spaces_configuration.set_prop("maximumClientSessionsPerAuthenticationName", AAZIntType, ".maximum_client_sessions_per_authentication_name")
                topic_spaces_configuration.set_prop("maximumSessionExpiryInHours", AAZIntType, ".maximum_session_expiry_in_hours")
                topic_spaces_configuration.set_prop("routeTopicResourceId", AAZStrType, ".route_topic_resource_id")
                topic_spaces_configuration.set_prop("routingEnrichments", AAZObjectType, ".routing_enrichments")
                topic_spaces_configuration.set_prop("routingIdentityInfo", AAZObjectType, ".routing_identity_info")
                topic_spaces_configuration.set_prop("state", AAZStrType, ".state")

            client_authentication = _builder.get(".properties.topicSpacesConfiguration.clientAuthentication")
            if client_authentication is not None:
                client_authentication.set_prop("alternativeAuthenticationNameSources", AAZListType, ".alternative_authentication_name_sources")

            alternative_authentication_name_sources = _builder.get(".properties.topicSpacesConfiguration.clientAuthentication.alternativeAuthenticationNameSources")
            if alternative_authentication_name_sources is not None:
                alternative_authentication_name_sources.set_elements(AAZStrType, ".")

            routing_enrichments = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments")
            if routing_enrichments is not None:
                routing_enrichments.set_prop("dynamic", AAZListType, ".dynamic")
                routing_enrichments.set_prop("static", AAZListType, ".static")

            dynamic = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.dynamic")
            if dynamic is not None:
                dynamic.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.dynamic[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_prop("value", AAZStrType, ".value")

            static = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.static")
            if static is not None:
                static.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.topicSpacesConfiguration.routingEnrichments.static[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_prop("valueType", AAZStrType, ".value_type")

            routing_identity_info = _builder.get(".properties.topicSpacesConfiguration.routingIdentityInfo")
            if routing_identity_info is not None:
                routing_identity_info.set_prop("type", AAZStrType, ".type")
                routing_identity_info.set_prop("userAssignedIdentity", AAZStrType, ".user_assigned_identity")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("capacity", AAZIntType, ".capacity")
                sku.set_prop("name", AAZStrType, ".name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_namespace_read(cls._schema_on_200)

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""

    _schema_namespace_read = None

    @classmethod
    def _build_schema_namespace_read(cls, _schema):
        if cls._schema_namespace_read is not None:
            _schema.id = cls._schema_namespace_read.id
            _schema.identity = cls._schema_namespace_read.identity
            _schema.location = cls._schema_namespace_read.location
            _schema.name = cls._schema_namespace_read.name
            _schema.properties = cls._schema_namespace_read.properties
            _schema.sku = cls._schema_namespace_read.sku
            _schema.system_data = cls._schema_namespace_read.system_data
            _schema.tags = cls._schema_namespace_read.tags
            _schema.type = cls._schema_namespace_read.type
            return

        cls._schema_namespace_read = _schema_namespace_read = AAZObjectType()

        namespace_read = _schema_namespace_read
        namespace_read.id = AAZStrType(
            flags={"read_only": True},
        )
        namespace_read.identity = AAZObjectType()
        namespace_read.location = AAZStrType(
            flags={"required": True},
        )
        namespace_read.name = AAZStrType(
            flags={"read_only": True},
        )
        namespace_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        namespace_read.sku = AAZObjectType()
        namespace_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        namespace_read.tags = AAZDictType()
        namespace_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_namespace_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )
        identity.type = AAZStrType()
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_namespace_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_namespace_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
        )

        properties = _schema_namespace_read.properties
        properties.inbound_ip_rules = AAZListType(
            serialized_name="inboundIpRules",
        )
        properties.is_zone_redundant = AAZBoolType(
            serialized_name="isZoneRedundant",
        )
        properties.minimum_tls_version_allowed = AAZStrType(
            serialized_name="minimumTlsVersionAllowed",
        )
        properties.private_endpoint_connections = AAZListType(
            serialized_name="privateEndpointConnections",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_network_access = AAZStrType(
            serialized_name="publicNetworkAccess",
        )
        properties.topic_spaces_configuration = AAZObjectType(
            serialized_name="topicSpacesConfiguration",
        )
        properties.topics_configuration = AAZObjectType(
            serialized_name="topicsConfiguration",
        )

        inbound_ip_rules = _schema_namespace_read.properties.inbound_ip_rules
        inbound_ip_rules.Element = AAZObjectType()

        _element = _schema_namespace_read.properties.inbound_ip_rules.Element
        _element.action = AAZStrType()
        _element.ip_mask = AAZStrType(
            serialized_name="ipMask",
        )

        private_endpoint_connections = _schema_namespace_read.properties.private_endpoint_connections
        private_endpoint_connections.Element = AAZObjectType()

        _element = _schema_namespace_read.properties.private_endpoint_connections.Element
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_namespace_read.properties.private_endpoint_connections.Element.properties
        properties.group_ids = AAZListType(
            serialized_name="groupIds",
        )
        properties.private_endpoint = AAZObjectType(
            serialized_name="privateEndpoint",
        )
        properties.private_link_service_connection_state = AAZObjectType(
            serialized_name="privateLinkServiceConnectionState",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )

        group_ids = _schema_namespace_read.properties.private_endpoint_connections.Element.properties.group_ids
        group_ids.Element = AAZStrType()

        private_endpoint = _schema_namespace_read.properties.private_endpoint_connections.Element.properties.private_endpoint
        private_endpoint.id = AAZStrType()

        private_link_service_connection_state = _schema_namespace_read.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
        private_link_service_connection_state.actions_required = AAZStrType(
            serialized_name="actionsRequired",
        )
        private_link_service_connection_state.description = AAZStrType()
        private_link_service_connection_state.status = AAZStrType()

        topic_spaces_configuration = _schema_namespace_read.properties.topic_spaces_configuration
        topic_spaces_configuration.client_authentication = AAZObjectType(
            serialized_name="clientAuthentication",
        )
        topic_spaces_configuration.hostname = AAZStrType(
            flags={"read_only": True},
        )
        topic_spaces_configuration.maximum_client_sessions_per_authentication_name = AAZIntType(
            serialized_name="maximumClientSessionsPerAuthenticationName",
        )
        topic_spaces_configuration.maximum_session_expiry_in_hours = AAZIntType(
            serialized_name="maximumSessionExpiryInHours",
        )
        topic_spaces_configuration.route_topic_resource_id = AAZStrType(
            serialized_name="routeTopicResourceId",
        )
        topic_spaces_configuration.routing_enrichments = AAZObjectType(
            serialized_name="routingEnrichments",
        )
        topic_spaces_configuration.routing_identity_info = AAZObjectType(
            serialized_name="routingIdentityInfo",
        )
        topic_spaces_configuration.state = AAZStrType()

        client_authentication = _schema_namespace_read.properties.topic_spaces_configuration.client_authentication
        client_authentication.alternative_authentication_name_sources = AAZListType(
            serialized_name="alternativeAuthenticationNameSources",
        )

        alternative_authentication_name_sources = _schema_namespace_read.properties.topic_spaces_configuration.client_authentication.alternative_authentication_name_sources
        alternative_authentication_name_sources.Element = AAZStrType()

        routing_enrichments = _schema_namespace_read.properties.topic_spaces_configuration.routing_enrichments
        routing_enrichments.dynamic = AAZListType()
        routing_enrichments.static = AAZListType()

        dynamic = _schema_namespace_read.properties.topic_spaces_configuration.routing_enrichments.dynamic
        dynamic.Element = AAZObjectType()

        _element = _schema_namespace_read.properties.topic_spaces_configuration.routing_enrichments.dynamic.Element
        _element.key = AAZStrType()
        _element.value = AAZStrType()

        static = _schema_namespace_read.properties.topic_spaces_configuration.routing_enrichments.static
        static.Element = AAZObjectType()

        _element = _schema_namespace_read.properties.topic_spaces_configuration.routing_enrichments.static.Element
        _element.key = AAZStrType()
        _element.value_type = AAZStrType(
            serialized_name="valueType",
        )

        routing_identity_info = _schema_namespace_read.properties.topic_spaces_configuration.routing_identity_info
        routing_identity_info.type = AAZStrType()
        routing_identity_info.user_assigned_identity = AAZStrType(
            serialized_name="userAssignedIdentity",
        )

        topics_configuration = _schema_namespace_read.properties.topics_configuration
        topics_configuration.hostname = AAZStrType(
            flags={"read_only": True},
        )

        sku = _schema_namespace_read.sku
        sku.capacity = AAZIntType()
        sku.name = AAZStrType()

        system_data = _schema_namespace_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_namespace_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_namespace_read.id
        _schema.identity = cls._schema_namespace_read.identity
        _schema.location = cls._schema_namespace_read.location
        _schema.name = cls._schema_namespace_read.name
        _schema.properties = cls._schema_namespace_read.properties
        _schema.sku = cls._schema_namespace_read.sku
        _schema.system_data = cls._schema_namespace_read.system_data
        _schema.tags = cls._schema_namespace_read.tags
        _schema.type = cls._schema_namespace_read.type


__all__ = ["Update"]
