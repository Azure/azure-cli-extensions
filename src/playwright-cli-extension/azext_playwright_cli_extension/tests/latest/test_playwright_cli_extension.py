# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, JMESPathCheck

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_list_playwright_quota_by_subscription(self, resource_group):
        self.kwargs.update({
            'location': 'eastus'
        })

        # Execute the command to list quotas
        result = self.cmd(
            'az playwright-testing quota list --location {location}',
            checks=[
                JMESPathCheck("length(@)", 2, 'Expected exactly two quota entries in the list'),
                JMESPathCheck('[0].name', 'ScalableExecution', 'Expected first quota name to be ScalableExecution'),
                JMESPathCheck('[0].provisioningState', 'Succeeded', 'Expected provisioning state to be Succeeded'),
                JMESPathCheck('[0].freeTrial.state', 'Expired', 'Expected free trial state to be Expired'),
                JMESPathCheck('[1].name', 'Reporting', 'Expected second quota name to be Reporting'),  # Additional check for the second item
                JMESPathCheck('[1].provisioningState', 'Succeeded', 'Expected second provisioning state to be Succeeded'),
                JMESPathCheck('[1].freeTrial.state', 'Expired', 'Expected second free trial state to be Expired')
            ]
        ).get_output_in_json()

        # Perform additional checks on the response
        assert len(result) > 0, "Quota list should not be empty."
        for item in result:
            assert 'name' in item, "Each quota entry should have a name."
            assert 'provisioningState' in item, "Each quota entry should have a provisioningState."
            assert 'freeTrial' in item, "Each quota entry should include freeTrial information."
            assert 'state' in item['freeTrial'], "Each freeTrial entry should have a state."

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_show_playwright_quota_by_name(self, resource_group):
        self.kwargs.update({
            'location': 'eastus',
            'quota_name': 'ScalableExecution'
        })

        # Execute the command to show quota for a specific quota name
        result = self.cmd(
            'az playwright-testing quota show --location {location} --quota-name {quota_name}',
            checks=[
                JMESPathCheck('name', 'ScalableExecution', 'Expected quota name to be ScalableExecution'),
                JMESPathCheck('provisioningState', 'Succeeded', 'Expected provisioning state to be Succeeded'),
                JMESPathCheck('freeTrial.state', 'Expired', 'Expected free trial state to be Expired'),
                JMESPathCheck('offeringType', 'NotApplicable', 'Expected offering type to be NotApplicable')
            ]
        ).get_output_in_json()

        # Perform additional checks on the response
        assert result is not None, "Response should not be empty."
        assert 'name' in result, "Quota should have a name."
        assert 'provisioningState' in result, "Quota should have a provisioning state."
        assert 'freeTrial' in result, "Quota should have freeTrial information."
        assert 'state' in result['freeTrial'], "freeTrial should have a state."
        assert 'offeringType' in result, "Quota should have an offeringType."


class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_playwright_workspace_quota_not_found(self, resource_group):
        self.kwargs.update({
            'resource_group': 'testingworkspaceap2-rg',
            'workspace_name': 'testingworkspaceap2',
            'quota_name': 'ScalableExecution'
        })

        # Attempt to fetch a non-existent quota and validate the 404 response
        self.cmd(
            "az playwright-testing workspace quota show "
            "--resource-group {resource_group} "
            "--workspace-name {workspace_name} "
            "--quota-name {quota_name}",
            expect_failure=True
        )

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_create_playwright_workspace(self, resource_group):
        self.kwargs.update({
            'location': 'eastus',
            'workspace_name': 'testingworkspaceap4',
            'resource_group': 'testingworkspaceap2-rg'
        })

        # Execute the command to create the workspace
        result = self.cmd(
            'az playwright-testing workspace create --resource-group {resource_group} --workspace-name {workspace_name} --location {location}',
            checks=[
                JMESPathCheck('name', 'testingworkspaceap4', 'Expected workspace name to be testingworkspaceap4'),
                JMESPathCheck('provisioningState', 'Succeeded', 'Expected provisioning state to be Succeeded'),
                JMESPathCheck('localAuth', 'Disabled', 'Expected localAuth to be Disabled'),
                JMESPathCheck('location', 'eastus', 'Expected location to be eastus'),
                JMESPathCheck('regionalAffinity', 'Enabled', 'Expected regionalAffinity to be Enabled'),
                JMESPathCheck('reporting', 'Enabled', 'Expected reporting to be Enabled'),
                JMESPathCheck('scalableExecution', 'Enabled', 'Expected scalableExecution to be Enabled')
            ]
        ).get_output_in_json()

        # Perform additional checks on the response
        assert result is not None, "Response should not be empty."
        assert 'name' in result, "Workspace should have a name."
        assert 'provisioningState' in result, "Workspace should have a provisioning state."
        assert 'localAuth' in result, "Workspace should have a localAuth field."
        assert 'location' in result, "Workspace should have a location."
        assert 'regionalAffinity' in result, "Workspace should have regionalAffinity."
        assert 'reporting' in result, "Workspace should have reporting enabled."
        assert 'scalableExecution' in result, "Workspace should have scalableExecution enabled."

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_show_playwright_workspace(self, resource_group):
        self.kwargs.update({
            'location': 'eastus',
            'workspace_name': 'testingworkspaceap4',  # Workspace name is 'testingworkspaceap4'
            'resource_group': 'testingworkspaceap2-rg'
        })

        # Execute the command to show the workspace details
        result = self.cmd(
            'az playwright-testing workspace show --resource-group {resource_group} --workspace-name {workspace_name}',
            checks=[
                JMESPathCheck('name', 'testingworkspaceap4', 'Expected workspace name to be testingworkspaceap4'),
                JMESPathCheck('provisioningState', 'Succeeded', 'Expected provisioning state to be Succeeded'),
                JMESPathCheck('localAuth', 'Disabled', 'Expected localAuth to be Disabled'),
                JMESPathCheck('location', 'eastus', 'Expected location to be eastus'),
                JMESPathCheck('regionalAffinity', 'Enabled', 'Expected regionalAffinity to be Enabled'),
                JMESPathCheck('reporting', 'Enabled', 'Expected reporting to be Enabled'),
                JMESPathCheck('scalableExecution', 'Enabled', 'Expected scalableExecution to be Enabled')
            ]
        ).get_output_in_json()

        # Perform additional checks on the response
        assert result is not None, "Response should not be empty."
        assert 'name' in result, "Workspace should have a name."
        assert 'provisioningState' in result, "Workspace should have a provisioning state."
        assert 'localAuth' in result, "Workspace should have a localAuth field."
        assert 'location' in result, "Workspace should have a location."
        assert 'regionalAffinity' in result, "Workspace should have regionalAffinity."
        assert 'reporting' in result, "Workspace should have reporting enabled."
        assert 'scalableExecution' in result, "Workspace should have scalableExecution enabled."

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_update_playwright_workspace(self, resource_group):
        self.kwargs.update({
            'location': 'eastus',
            'workspace_name': 'testingworkspaceap4',
            'resource_group': 'testingworkspaceap2-rg'
        })

        # Execute the command to update the workspace with regional affinity disabled
        result = self.cmd(
            'az playwright-testing workspace update --resource-group {resource_group} --workspace-name {workspace_name} --regional-affinity Disabled',
            checks=[
                JMESPathCheck('name', 'testingworkspaceap4', 'Expected workspace name to be testingworkspaceap4'),
                JMESPathCheck('provisioningState', 'Succeeded', 'Expected provisioning state to be Succeeded'),
                JMESPathCheck('localAuth', 'Disabled', 'Expected localAuth to be Disabled'),
                JMESPathCheck('location', 'eastus', 'Expected location to be eastus'),
                JMESPathCheck('regionalAffinity', 'Disabled', 'Expected regionalAffinity to be Disabled'),
                JMESPathCheck('reporting', 'Enabled', 'Expected reporting to be Enabled'),
                JMESPathCheck('scalableExecution', 'Enabled', 'Expected scalableExecution to be Enabled')
            ]
        ).get_output_in_json()

        # Perform additional checks on the response
        assert result is not None, "Response should not be empty."
        assert 'name' in result, "Workspace should have a name."
        assert 'provisioningState' in result, "Workspace should have a provisioning state."
        assert 'localAuth' in result, "Workspace should have a localAuth field."
        assert 'location' in result, "Workspace should have a location."
        assert 'regionalAffinity' in result, "Workspace should have regionalAffinity."
        assert 'reporting' in result, "Workspace should have reporting enabled."
        assert 'scalableExecution' in result, "Workspace should have scalableExecution enabled."

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_delete_playwright_workspace(self, resource_group):
        self.kwargs.update({
            'location': 'eastus',
            'workspace_name': 'testingworkspaceap4',
            'resource_group': 'testingworkspaceap2-rg'
        })

        # Execute the command to delete the workspace with the --yes flag to skip confirmation
        result = self.cmd(
            'az playwright-testing workspace delete --resource-group {resource_group} --workspace-name {workspace_name} --yes',
            checks=[]
        )
        
        # Since the delete command does not return output, we can check for the absence of errors
        # Just ensure no exceptions are raised and the result doesn't contain unexpected output.
        assert result is not None, "Delete command should not raise an exception."

class PlaywrightCliExtensionScenario(ScenarioTest):
    @ResourceGroupPreparer(name_prefix='test_rg', location='eastus')
    def test_list_playwright_workspaces(self, resource_group):
        self.kwargs.update({
            'resource_group': 'testingworkspaceap2-rg'
        })

        # Execute the command to list workspaces in the specified resource group
        result = self.cmd(
            'az playwright-testing workspace list --resource-group {resource_group}',
            checks=[]
        ).get_output_in_json()

        # Perform a check to ensure the result is not empty and has items
        assert result is not None, "Response should not be empty."
        assert isinstance(result, list), "Expected the result to be a list."
        assert len(result) > 0, "Expected the list of workspaces to have more than 0 items."

        first_workspace = result[0]
        assert 'name' in first_workspace, "Workspace should have a name."
        assert 'location' in first_workspace, "Workspace should have a location."
        assert 'provisioningState' in first_workspace, "Workspace should have a provisioning state."
        assert 'regionalAffinity' in first_workspace, "Workspace should have regionalAffinity."