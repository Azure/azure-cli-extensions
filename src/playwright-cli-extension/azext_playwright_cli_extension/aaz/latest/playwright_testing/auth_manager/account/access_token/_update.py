# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "playwright-testing auth-manager account access-token update",
)
class Update(AAZCommand):
    """Update an access-token for the account with given access-token id. Authorization required is Bearer JWT Access token provided by EntraID.
    """

    _aaz_info = {
        "version": "2024-12-01",
        "resources": [
            ["data-plane:microsoft.playwrighttesting.authmanager", "/accounts/{}/access-tokens/{}", "2024-12-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="Supported Azure Playwright Service API Endpoints.",
            required=True,
        )

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.access_token_id = AAZUuidArg(
            options=["--access-token-id"],
            help="The access-token id.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="[A-Za-z0-9]+(-[A-Za-z0-9]+)+",
                max_length=64,
            ),
        )
        _args_schema.account_id = AAZStrArg(
            options=["--account-id"],
            help="The account id.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="[A-Za-z0-9]+(_[A-Za-z0-9]+)*(-[A-Za-z0-9]+)+",
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AccessTokensGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.AccessTokensCreateOrReplace(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AccessTokensGet(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftPlaywrighttestingAuthmanagerDataPlaneClient_playwright_cli_extension"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/accounts/{accountId}/access-tokens/{accessTokenId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "accessTokenId", self.ctx.args.access_token_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "accountId", self.ctx.args.account_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _schema_on_200.expiry_at = AAZStrType(
                serialized_name="expiryAt",
                flags={"required": True},
            )
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.jwt_token = AAZStrType(
                serialized_name="jwtToken",
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.state = AAZStrType(
                flags={"read_only": True},
            )

            return cls._schema_on_200

    class AccessTokensCreateOrReplace(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftPlaywrighttestingAuthmanagerDataPlaneClient_playwright_cli_extension"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [201, 200]:
                return self.on_201_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/accounts/{accountId}/access-tokens/{accessTokenId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "accessTokenId", self.ctx.args.access_token_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "accountId", self.ctx.args.account_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-12-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_201_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_201_200
            )

        _schema_on_201_200 = None

        @classmethod
        def _build_schema_on_201_200(cls):
            if cls._schema_on_201_200 is not None:
                return cls._schema_on_201_200

            cls._schema_on_201_200 = AAZObjectType()

            _schema_on_201_200 = cls._schema_on_201_200
            _schema_on_201_200.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _schema_on_201_200.expiry_at = AAZStrType(
                serialized_name="expiryAt",
                flags={"required": True},
            )
            _schema_on_201_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_201_200.jwt_token = AAZStrType(
                serialized_name="jwtToken",
                flags={"read_only": True},
            )
            _schema_on_201_200.name = AAZStrType(
                flags={"required": True},
            )
            _schema_on_201_200.state = AAZStrType(
                flags={"read_only": True},
            )

            return cls._schema_on_201_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
