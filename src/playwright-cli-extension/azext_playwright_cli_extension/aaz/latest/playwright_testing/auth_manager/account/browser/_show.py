# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "playwright-testing auth-manager account browser show",
)
class Show(AAZCommand):
    """Get remote browsers corresponding to given account id and redirects the client for running Playwright tests. Authorization required is Bearer JWT Access token provided by EntraID or Microsoft Playwright Testing Service.
    """

    _aaz_info = {
        "version": "2024-12-01",
        "resources": [
            ["data-plane:microsoft.playwrighttesting.authmanager", "/accounts/{}/browsers", "2024-12-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Client"

        _args_schema = cls._args_schema
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="Client",
            help="Supported Azure Playwright Service API Endpoints.",
            required=True,
        )

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.account_id = AAZStrArg(
            options=["--account-id"],
            help="The account id.",
            required=True,
        )
        _args_schema.os = AAZStrArg(
            options=["--os"],
            help="The os provided by client for remote test runs.",
            default="Linux",
            enum={"Linux": "Linux", "Windows": "Windows"},
        )
        _args_schema.run_id = AAZStrArg(
            options=["--run-id"],
            help="The run id provided by client for corresponding remote test run.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AccountsGetBrowsers(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class AccountsGetBrowsers(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftPlaywrighttestingAuthmanagerDataPlaneClient_playwright_cli_extension"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [302]:
                return self.on_302(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/accounts/{accountId}/browsers",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "endpoint", self.ctx.args.endpoint,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "accountId", self.ctx.args.account_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "os", self.ctx.args.os,
                ),
                **self.serialize_query_param(
                    "runId", self.ctx.args.run_id,
                ),
                **self.serialize_query_param(
                    "api-version", "2024-12-01",
                    required=True,
                ),
            }
            return parameters

        def on_302(self, session):
            pass


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
