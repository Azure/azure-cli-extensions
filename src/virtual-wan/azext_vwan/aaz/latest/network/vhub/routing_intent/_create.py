# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network vhub routing-intent create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a routing intent in the virtual hub.

    :example: Create a routing intent with two routing policies.
        az network vhub routing-intent create -n MyRoutingIntent -g MyResourceGroup --vhub MyVirtualHub --routing-policies "[{name:InternetTraffic,destinations:[Internet],next-hop:MyFirewallId},{name:PrivateTrafficPolicy,destinations:[PrivateTraffic],next-hop:MyFirewallId}]"
    """

    _aaz_info = {
        "version": "2021-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/virtualhubs/{}/routingintent/{}", "2021-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.routing_intent_name = AAZStrArg(
            options=["-n", "--name", "--routing-intent-name"],
            help="Name of the routing intent.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.vhub = AAZStrArg(
            options=["--vhub"],
            help="Name of the virtual hub.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.routing_policies = AAZListArg(
            options=["--routing-policies"],
            arg_group="Properties",
            help="List of routing policies.",
        )

        routing_policies = cls._args_schema.routing_policies
        routing_policies.Element = AAZObjectArg()

        _element = cls._args_schema.routing_policies.Element
        _element.destinations = AAZListArg(
            options=["destinations"],
            help="List of all destinations which this routing policy is applicable to (for example: Internet, PrivateTraffic).",
            required=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The unique name for the routing policy.",
            required=True,
        )
        _element.next_hop = AAZStrArg(
            options=["next-hop"],
            help="The next hop resource id on which this routing policy is applicable to.",
            required=True,
        )

        destinations = cls._args_schema.routing_policies.Element.destinations
        destinations.Element = AAZStrArg()

        # define Arg Group "RoutingIntentParameters"
        return cls._args_schema

    def _execute_operations(self):
        yield self.RoutingIntentCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class RoutingIntentCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualHubs/{virtualHubName}/routingIntent/{routingIntentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "routingIntentName", self.ctx.args.routing_intent_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualHubName", self.ctx.args.vhub,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".routing_intent_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("routingPolicies", AAZListType, ".routing_policies")

            routing_policies = _builder.get(".properties.routingPolicies")
            if routing_policies is not None:
                routing_policies.set_elements(AAZObjectType)

            _elements = _builder.get(".properties.routingPolicies[]")
            if _elements is not None:
                _elements.set_prop("destinations", AAZListType, ".destinations", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("nextHop", AAZStrType, ".next_hop", typ_kwargs={"flags": {"required": True}})

            destinations = _builder.get(".properties.routingPolicies[].destinations")
            if destinations is not None:
                destinations.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.name = AAZStrType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.routing_policies = AAZListType(
                serialized_name="routingPolicies",
            )

            routing_policies = cls._schema_on_200_201.properties.routing_policies
            routing_policies.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.routing_policies.Element
            _element.destinations = AAZListType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.next_hop = AAZStrType(
                serialized_name="nextHop",
                flags={"required": True},
            )

            destinations = cls._schema_on_200_201.properties.routing_policies.Element.destinations
            destinations.Element = AAZStrType()

            return cls._schema_on_200_201


__all__ = ["Create"]
