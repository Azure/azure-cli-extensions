# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network p2s-vpn-gateway reset",
)
class Reset(AAZCommand):
    """Resets the primary of the p2s vpn gateway in the specified resource group.

    :example: Resets the primary of the p2s vpn gateway.
        az network p2s-vpn-gateway reset -g MyResourceGroup -n MyP2sGateway
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/p2svpngateways/{}/reset", "2023-09-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the gateway.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.P2SVpnGatewaysReset(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class P2SVpnGatewaysReset(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/p2svpnGateways/{gatewayName}/reset",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "gatewayName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.id = AAZStrType()
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.custom_dns_servers = AAZListType(
                serialized_name="customDnsServers",
            )
            properties.is_routing_preference_internet = AAZBoolType(
                serialized_name="isRoutingPreferenceInternet",
            )
            properties.p2_s_connection_configurations = AAZListType(
                serialized_name="p2SConnectionConfigurations",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.virtual_hub = AAZObjectType(
                serialized_name="virtualHub",
            )
            _ResetHelper._build_schema_sub_resource_read(properties.virtual_hub)
            properties.vpn_client_connection_health = AAZObjectType(
                serialized_name="vpnClientConnectionHealth",
            )
            properties.vpn_gateway_scale_unit = AAZIntType(
                serialized_name="vpnGatewayScaleUnit",
            )
            properties.vpn_server_configuration = AAZObjectType(
                serialized_name="vpnServerConfiguration",
            )
            _ResetHelper._build_schema_sub_resource_read(properties.vpn_server_configuration)

            custom_dns_servers = cls._schema_on_200.properties.custom_dns_servers
            custom_dns_servers.Element = AAZStrType()

            p2_s_connection_configurations = cls._schema_on_200.properties.p2_s_connection_configurations
            p2_s_connection_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.p2_s_connection_configurations.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType()
            _element.name = AAZStrType()
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties
            properties.configuration_policy_group_associations = AAZListType(
                serialized_name="configurationPolicyGroupAssociations",
                flags={"read_only": True},
            )
            properties.enable_internet_security = AAZBoolType(
                serialized_name="enableInternetSecurity",
            )
            properties.previous_configuration_policy_group_associations = AAZListType(
                serialized_name="previousConfigurationPolicyGroupAssociations",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.routing_configuration = AAZObjectType(
                serialized_name="routingConfiguration",
            )
            properties.vpn_client_address_pool = AAZObjectType(
                serialized_name="vpnClientAddressPool",
            )

            configuration_policy_group_associations = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.configuration_policy_group_associations
            configuration_policy_group_associations.Element = AAZObjectType()
            _ResetHelper._build_schema_sub_resource_read(configuration_policy_group_associations.Element)

            previous_configuration_policy_group_associations = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations
            previous_configuration_policy_group_associations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType()
            _element.name = AAZStrType()
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations.Element.properties
            properties.is_default = AAZBoolType(
                serialized_name="isDefault",
            )
            properties.p2_s_connection_configurations = AAZListType(
                serialized_name="p2SConnectionConfigurations",
                flags={"read_only": True},
            )
            properties.policy_members = AAZListType(
                serialized_name="policyMembers",
            )
            properties.priority = AAZIntType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            p2_s_connection_configurations = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations.Element.properties.p2_s_connection_configurations
            p2_s_connection_configurations.Element = AAZObjectType()
            _ResetHelper._build_schema_sub_resource_read(p2_s_connection_configurations.Element)

            policy_members = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations.Element.properties.policy_members
            policy_members.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.previous_configuration_policy_group_associations.Element.properties.policy_members.Element
            _element.attribute_type = AAZStrType(
                serialized_name="attributeType",
            )
            _element.attribute_value = AAZStrType(
                serialized_name="attributeValue",
            )
            _element.name = AAZStrType()

            routing_configuration = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration
            routing_configuration.associated_route_table = AAZObjectType(
                serialized_name="associatedRouteTable",
            )
            _ResetHelper._build_schema_sub_resource_read(routing_configuration.associated_route_table)
            routing_configuration.inbound_route_map = AAZObjectType(
                serialized_name="inboundRouteMap",
            )
            _ResetHelper._build_schema_sub_resource_read(routing_configuration.inbound_route_map)
            routing_configuration.outbound_route_map = AAZObjectType(
                serialized_name="outboundRouteMap",
            )
            _ResetHelper._build_schema_sub_resource_read(routing_configuration.outbound_route_map)
            routing_configuration.propagated_route_tables = AAZObjectType(
                serialized_name="propagatedRouteTables",
            )
            routing_configuration.vnet_routes = AAZObjectType(
                serialized_name="vnetRoutes",
            )

            propagated_route_tables = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.propagated_route_tables
            propagated_route_tables.ids = AAZListType()
            propagated_route_tables.labels = AAZListType()

            ids = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.propagated_route_tables.ids
            ids.Element = AAZObjectType()
            _ResetHelper._build_schema_sub_resource_read(ids.Element)

            labels = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.propagated_route_tables.labels
            labels.Element = AAZStrType()

            vnet_routes = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes
            vnet_routes.bgp_connections = AAZListType(
                serialized_name="bgpConnections",
                flags={"read_only": True},
            )
            vnet_routes.static_routes = AAZListType(
                serialized_name="staticRoutes",
            )
            vnet_routes.static_routes_config = AAZObjectType(
                serialized_name="staticRoutesConfig",
            )

            bgp_connections = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes.bgp_connections
            bgp_connections.Element = AAZObjectType()
            _ResetHelper._build_schema_sub_resource_read(bgp_connections.Element)

            static_routes = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes.static_routes
            static_routes.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes.static_routes.Element
            _element.address_prefixes = AAZListType(
                serialized_name="addressPrefixes",
            )
            _element.name = AAZStrType()
            _element.next_hop_ip_address = AAZStrType(
                serialized_name="nextHopIpAddress",
            )

            address_prefixes = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes.static_routes.Element.address_prefixes
            address_prefixes.Element = AAZStrType()

            static_routes_config = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.routing_configuration.vnet_routes.static_routes_config
            static_routes_config.propagate_static_routes = AAZBoolType(
                serialized_name="propagateStaticRoutes",
                flags={"read_only": True},
            )
            static_routes_config.vnet_local_route_override_criteria = AAZStrType(
                serialized_name="vnetLocalRouteOverrideCriteria",
            )

            vpn_client_address_pool = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.vpn_client_address_pool
            vpn_client_address_pool.address_prefixes = AAZListType(
                serialized_name="addressPrefixes",
            )

            address_prefixes = cls._schema_on_200.properties.p2_s_connection_configurations.Element.properties.vpn_client_address_pool.address_prefixes
            address_prefixes.Element = AAZStrType()

            vpn_client_connection_health = cls._schema_on_200.properties.vpn_client_connection_health
            vpn_client_connection_health.allocated_ip_addresses = AAZListType(
                serialized_name="allocatedIpAddresses",
            )
            vpn_client_connection_health.total_egress_bytes_transferred = AAZIntType(
                serialized_name="totalEgressBytesTransferred",
                flags={"read_only": True},
            )
            vpn_client_connection_health.total_ingress_bytes_transferred = AAZIntType(
                serialized_name="totalIngressBytesTransferred",
                flags={"read_only": True},
            )
            vpn_client_connection_health.vpn_client_connections_count = AAZIntType(
                serialized_name="vpnClientConnectionsCount",
            )

            allocated_ip_addresses = cls._schema_on_200.properties.vpn_client_connection_health.allocated_ip_addresses
            allocated_ip_addresses.Element = AAZStrType()

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ResetHelper:
    """Helper class for Reset"""

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Reset"]
