# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network vpn-gateway update",
)
class Update(AAZCommand):
    """Update settings of a site-to-site VPN gateway.

    :example: Update settings of a site-to-site VPN gateway.
        az network vpn-gateway create -g MyRG --vhub MyVHub --name MyVPNGateway --tags foo=bar
    """

    _aaz_info = {
        "version": "2022-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/vpngateways/{}", "2022-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the VPN gateway.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vhub = AAZResourceIdArg(
            options=["--vhub"],
            help="Name or ID of a virtual hub.",
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{subscription}/resourceGroups/{resource_group}/providers/Microsoft.Network/virtualHubs/{}",
            ),
        )
        _args_schema.scale_unit = AAZIntArg(
            options=["--scale-unit"],
            help="The scale unit for this VPN gateway.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...].",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "BGP Peering"

        _args_schema = cls._args_schema
        _args_schema.asn = AAZIntArg(
            options=["--asn"],
            arg_group="BGP Peering",
            help="BGP speaker's ASN.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=0,
            ),
        )
        _args_schema.bgp_peering_address = AAZStrArg(
            options=["--bgp-peering-address"],
            arg_group="BGP Peering",
            help="Peering address and BGP identifier of this BGP speaker.",
            nullable=True,
        )
        _args_schema.peer_weight = AAZIntArg(
            options=["--peer-weight"],
            arg_group="BGP Peering",
            help="Weight added to routes learned from this BGP speaker.",
            nullable=True,
        )

        # define Arg Group "BgpSettings"

        # define Arg Group "Properties"

        # define Arg Group "VpnGatewayParameters"
        return cls._args_schema

    _args_ipsec_policy_update = None

    @classmethod
    def _build_args_ipsec_policy_update(cls, _schema):
        if cls._args_ipsec_policy_update is not None:
            _schema.dh_group = cls._args_ipsec_policy_update.dh_group
            _schema.ike_encryption = cls._args_ipsec_policy_update.ike_encryption
            _schema.ike_integrity = cls._args_ipsec_policy_update.ike_integrity
            _schema.ipsec_encryption = cls._args_ipsec_policy_update.ipsec_encryption
            _schema.ipsec_integrity = cls._args_ipsec_policy_update.ipsec_integrity
            _schema.pfs_group = cls._args_ipsec_policy_update.pfs_group
            _schema.sa_data_size_kilobytes = cls._args_ipsec_policy_update.sa_data_size_kilobytes
            _schema.sa_life_time_seconds = cls._args_ipsec_policy_update.sa_life_time_seconds
            return

        cls._args_ipsec_policy_update = AAZObjectArg(
            nullable=True,
        )

        ipsec_policy_update = cls._args_ipsec_policy_update
        ipsec_policy_update.dh_group = AAZStrArg(
            options=["dh-group"],
            help="The DH Group used in IKE Phase 1 for initial SA.",
            enum={"DHGroup1": "DHGroup1", "DHGroup14": "DHGroup14", "DHGroup2": "DHGroup2", "DHGroup2048": "DHGroup2048", "DHGroup24": "DHGroup24", "ECP256": "ECP256", "ECP384": "ECP384", "None": "None"},
        )
        ipsec_policy_update.ike_encryption = AAZStrArg(
            options=["ike-encryption"],
            help="The IKE encryption algorithm (IKE phase 2).",
            enum={"AES128": "AES128", "AES192": "AES192", "AES256": "AES256", "DES": "DES", "DES3": "DES3", "GCMAES128": "GCMAES128", "GCMAES256": "GCMAES256"},
        )
        ipsec_policy_update.ike_integrity = AAZStrArg(
            options=["ike-integrity"],
            help="The IKE integrity algorithm (IKE phase 2).",
            enum={"GCMAES128": "GCMAES128", "GCMAES256": "GCMAES256", "MD5": "MD5", "SHA1": "SHA1", "SHA256": "SHA256", "SHA384": "SHA384"},
        )
        ipsec_policy_update.ipsec_encryption = AAZStrArg(
            options=["ipsec-encryption"],
            help="The IPSec encryption algorithm (IKE phase 1).",
            enum={"AES128": "AES128", "AES192": "AES192", "AES256": "AES256", "DES": "DES", "DES3": "DES3", "GCMAES128": "GCMAES128", "GCMAES192": "GCMAES192", "GCMAES256": "GCMAES256", "None": "None"},
        )
        ipsec_policy_update.ipsec_integrity = AAZStrArg(
            options=["ipsec-integrity"],
            help="The IPSec integrity algorithm (IKE phase 1).",
            enum={"GCMAES128": "GCMAES128", "GCMAES192": "GCMAES192", "GCMAES256": "GCMAES256", "MD5": "MD5", "SHA1": "SHA1", "SHA256": "SHA256"},
        )
        ipsec_policy_update.pfs_group = AAZStrArg(
            options=["pfs-group"],
            help="The Pfs Group used in IKE Phase 2 for new child SA.",
            enum={"ECP256": "ECP256", "ECP384": "ECP384", "None": "None", "PFS1": "PFS1", "PFS14": "PFS14", "PFS2": "PFS2", "PFS2048": "PFS2048", "PFS24": "PFS24", "PFSMM": "PFSMM"},
        )
        ipsec_policy_update.sa_data_size_kilobytes = AAZIntArg(
            options=["sa-data-size-kilobytes"],
            help="The IPSec Security Association (also called Quick Mode or Phase 2 SA) payload size in KB for a site to site VPN tunnel.",
        )
        ipsec_policy_update.sa_life_time_seconds = AAZIntArg(
            options=["sa-life-time-seconds"],
            help="The IPSec Security Association (also called Quick Mode or Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.",
        )

        _schema.dh_group = cls._args_ipsec_policy_update.dh_group
        _schema.ike_encryption = cls._args_ipsec_policy_update.ike_encryption
        _schema.ike_integrity = cls._args_ipsec_policy_update.ike_integrity
        _schema.ipsec_encryption = cls._args_ipsec_policy_update.ipsec_encryption
        _schema.ipsec_integrity = cls._args_ipsec_policy_update.ipsec_integrity
        _schema.pfs_group = cls._args_ipsec_policy_update.pfs_group
        _schema.sa_data_size_kilobytes = cls._args_ipsec_policy_update.sa_data_size_kilobytes
        _schema.sa_life_time_seconds = cls._args_ipsec_policy_update.sa_life_time_seconds

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    _args_vpn_nat_rule_mapping_update = None

    @classmethod
    def _build_args_vpn_nat_rule_mapping_update(cls, _schema):
        if cls._args_vpn_nat_rule_mapping_update is not None:
            _schema.address_space = cls._args_vpn_nat_rule_mapping_update.address_space
            _schema.port_range = cls._args_vpn_nat_rule_mapping_update.port_range
            return

        cls._args_vpn_nat_rule_mapping_update = AAZObjectArg(
            nullable=True,
        )

        vpn_nat_rule_mapping_update = cls._args_vpn_nat_rule_mapping_update
        vpn_nat_rule_mapping_update.address_space = AAZStrArg(
            options=["address-space"],
            help="Address space for Vpn NatRule mapping.",
            nullable=True,
        )
        vpn_nat_rule_mapping_update.port_range = AAZStrArg(
            options=["port-range"],
            help="Port range for Vpn NatRule mapping.",
            nullable=True,
        )

        _schema.address_space = cls._args_vpn_nat_rule_mapping_update.address_space
        _schema.port_range = cls._args_vpn_nat_rule_mapping_update.port_range

    def _execute_operations(self):
        self.pre_operations()
        self.VpnGatewaysGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.VpnGatewaysCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    # @register_callback
    def pre_operations(self):
        pass

    # @register_callback
    def post_operations(self):
        pass

    # @register_callback
    def pre_instance_update(self, instance):
        pass

    # @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class VpnGatewaysGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "gatewayName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_vpn_gateway_read(cls._schema_on_200)

            return cls._schema_on_200

    class VpnGatewaysCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/vpnGateways/{gatewayName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "gatewayName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _build_schema_vpn_gateway_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("bgpSettings", AAZObjectType)
                properties.set_prop("virtualHub", AAZObjectType)
                properties.set_prop("vpnGatewayScaleUnit", AAZIntType, ".scale_unit")

            bgp_settings = _builder.get(".properties.bgpSettings")
            if bgp_settings is not None:
                bgp_settings.set_prop("asn", AAZIntType, ".asn")
                bgp_settings.set_prop("bgpPeeringAddress", AAZStrType, ".bgp_peering_address")
                bgp_settings.set_prop("peerWeight", AAZIntType, ".peer_weight")

            virtual_hub = _builder.get(".properties.virtualHub")
            if virtual_hub is not None:
                virtual_hub.set_prop("id", AAZStrType, ".vhub")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


def _build_schema_ipsec_policy_update(_builder):
    if _builder is None:
        return
    _builder.set_prop("dhGroup", AAZStrType, ".dh_group", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("ikeEncryption", AAZStrType, ".ike_encryption", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("ikeIntegrity", AAZStrType, ".ike_integrity", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("ipsecEncryption", AAZStrType, ".ipsec_encryption", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("ipsecIntegrity", AAZStrType, ".ipsec_integrity", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("pfsGroup", AAZStrType, ".pfs_group", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("saDataSizeKilobytes", AAZIntType, ".sa_data_size_kilobytes", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("saLifeTimeSeconds", AAZIntType, ".sa_life_time_seconds", typ_kwargs={"flags": {"required": True}})


def _build_schema_sub_resource_update(_builder):
    if _builder is None:
        return
    _builder.set_prop("id", AAZStrType, ".id")


def _build_schema_vpn_nat_rule_mapping_update(_builder):
    if _builder is None:
        return
    _builder.set_prop("addressSpace", AAZStrType, ".address_space")
    _builder.set_prop("portRange", AAZStrType, ".port_range")


_schema_ipsec_policy_read = None


def _build_schema_ipsec_policy_read(_schema):
    global _schema_ipsec_policy_read
    if _schema_ipsec_policy_read is not None:
        _schema.dh_group = _schema_ipsec_policy_read.dh_group
        _schema.ike_encryption = _schema_ipsec_policy_read.ike_encryption
        _schema.ike_integrity = _schema_ipsec_policy_read.ike_integrity
        _schema.ipsec_encryption = _schema_ipsec_policy_read.ipsec_encryption
        _schema.ipsec_integrity = _schema_ipsec_policy_read.ipsec_integrity
        _schema.pfs_group = _schema_ipsec_policy_read.pfs_group
        _schema.sa_data_size_kilobytes = _schema_ipsec_policy_read.sa_data_size_kilobytes
        _schema.sa_life_time_seconds = _schema_ipsec_policy_read.sa_life_time_seconds
        return

    _schema_ipsec_policy_read = AAZObjectType()

    ipsec_policy_read = _schema_ipsec_policy_read
    ipsec_policy_read.dh_group = AAZStrType(
        serialized_name="dhGroup",
        flags={"required": True},
    )
    ipsec_policy_read.ike_encryption = AAZStrType(
        serialized_name="ikeEncryption",
        flags={"required": True},
    )
    ipsec_policy_read.ike_integrity = AAZStrType(
        serialized_name="ikeIntegrity",
        flags={"required": True},
    )
    ipsec_policy_read.ipsec_encryption = AAZStrType(
        serialized_name="ipsecEncryption",
        flags={"required": True},
    )
    ipsec_policy_read.ipsec_integrity = AAZStrType(
        serialized_name="ipsecIntegrity",
        flags={"required": True},
    )
    ipsec_policy_read.pfs_group = AAZStrType(
        serialized_name="pfsGroup",
        flags={"required": True},
    )
    ipsec_policy_read.sa_data_size_kilobytes = AAZIntType(
        serialized_name="saDataSizeKilobytes",
        flags={"required": True},
    )
    ipsec_policy_read.sa_life_time_seconds = AAZIntType(
        serialized_name="saLifeTimeSeconds",
        flags={"required": True},
    )

    _schema.dh_group = _schema_ipsec_policy_read.dh_group
    _schema.ike_encryption = _schema_ipsec_policy_read.ike_encryption
    _schema.ike_integrity = _schema_ipsec_policy_read.ike_integrity
    _schema.ipsec_encryption = _schema_ipsec_policy_read.ipsec_encryption
    _schema.ipsec_integrity = _schema_ipsec_policy_read.ipsec_integrity
    _schema.pfs_group = _schema_ipsec_policy_read.pfs_group
    _schema.sa_data_size_kilobytes = _schema_ipsec_policy_read.sa_data_size_kilobytes
    _schema.sa_life_time_seconds = _schema_ipsec_policy_read.sa_life_time_seconds


_schema_sub_resource_read = None


def _build_schema_sub_resource_read(_schema):
    global _schema_sub_resource_read
    if _schema_sub_resource_read is not None:
        _schema.id = _schema_sub_resource_read.id
        return

    _schema_sub_resource_read = AAZObjectType()

    sub_resource_read = _schema_sub_resource_read
    sub_resource_read.id = AAZStrType()

    _schema.id = _schema_sub_resource_read.id


_schema_vpn_gateway_read = None


def _build_schema_vpn_gateway_read(_schema):
    global _schema_vpn_gateway_read
    if _schema_vpn_gateway_read is not None:
        _schema.etag = _schema_vpn_gateway_read.etag
        _schema.id = _schema_vpn_gateway_read.id
        _schema.location = _schema_vpn_gateway_read.location
        _schema.name = _schema_vpn_gateway_read.name
        _schema.properties = _schema_vpn_gateway_read.properties
        _schema.tags = _schema_vpn_gateway_read.tags
        _schema.type = _schema_vpn_gateway_read.type
        return

    _schema_vpn_gateway_read = AAZObjectType()

    vpn_gateway_read = _schema_vpn_gateway_read
    vpn_gateway_read.etag = AAZStrType(
        flags={"read_only": True},
    )
    vpn_gateway_read.id = AAZStrType()
    vpn_gateway_read.location = AAZStrType(
        flags={"required": True},
    )
    vpn_gateway_read.name = AAZStrType(
        flags={"read_only": True},
    )
    vpn_gateway_read.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    vpn_gateway_read.tags = AAZDictType()
    vpn_gateway_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_vpn_gateway_read.properties
    properties.bgp_settings = AAZObjectType(
        serialized_name="bgpSettings",
    )
    properties.connections = AAZListType()
    properties.enable_bgp_route_translation_for_nat = AAZBoolType(
        serialized_name="enableBgpRouteTranslationForNat",
    )
    properties.ip_configurations = AAZListType(
        serialized_name="ipConfigurations",
        flags={"read_only": True},
    )
    properties.is_routing_preference_internet = AAZBoolType(
        serialized_name="isRoutingPreferenceInternet",
    )
    properties.nat_rules = AAZListType(
        serialized_name="natRules",
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.virtual_hub = AAZObjectType(
        serialized_name="virtualHub",
    )
    properties.vpn_gateway_scale_unit = AAZIntType(
        serialized_name="vpnGatewayScaleUnit",
    )

    bgp_settings = _schema_vpn_gateway_read.properties.bgp_settings
    bgp_settings.asn = AAZIntType()
    bgp_settings.bgp_peering_address = AAZStrType(
        serialized_name="bgpPeeringAddress",
    )
    bgp_settings.bgp_peering_addresses = AAZListType(
        serialized_name="bgpPeeringAddresses",
    )
    bgp_settings.peer_weight = AAZIntType(
        serialized_name="peerWeight",
    )

    bgp_peering_addresses = _schema_vpn_gateway_read.properties.bgp_settings.bgp_peering_addresses
    bgp_peering_addresses.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.bgp_settings.bgp_peering_addresses.Element
    _element.custom_bgp_ip_addresses = AAZListType(
        serialized_name="customBgpIpAddresses",
    )
    _element.default_bgp_ip_addresses = AAZListType(
        serialized_name="defaultBgpIpAddresses",
        flags={"read_only": True},
    )
    _element.ipconfiguration_id = AAZStrType(
        serialized_name="ipconfigurationId",
    )
    _element.tunnel_ip_addresses = AAZListType(
        serialized_name="tunnelIpAddresses",
        flags={"read_only": True},
    )

    custom_bgp_ip_addresses = _schema_vpn_gateway_read.properties.bgp_settings.bgp_peering_addresses.Element.custom_bgp_ip_addresses
    custom_bgp_ip_addresses.Element = AAZStrType()

    default_bgp_ip_addresses = _schema_vpn_gateway_read.properties.bgp_settings.bgp_peering_addresses.Element.default_bgp_ip_addresses
    default_bgp_ip_addresses.Element = AAZStrType(
        flags={"read_only": True},
    )

    tunnel_ip_addresses = _schema_vpn_gateway_read.properties.bgp_settings.bgp_peering_addresses.Element.tunnel_ip_addresses
    tunnel_ip_addresses.Element = AAZStrType(
        flags={"read_only": True},
    )

    connections = _schema_vpn_gateway_read.properties.connections
    connections.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.connections.Element
    _element.etag = AAZStrType(
        flags={"read_only": True},
    )
    _element.id = AAZStrType()
    _element.name = AAZStrType()
    _element.properties = AAZObjectType(
        flags={"client_flatten": True},
    )

    properties = _schema_vpn_gateway_read.properties.connections.Element.properties
    properties.connection_bandwidth = AAZIntType(
        serialized_name="connectionBandwidth",
    )
    properties.connection_status = AAZStrType(
        serialized_name="connectionStatus",
        flags={"read_only": True},
    )
    properties.dpd_timeout_seconds = AAZIntType(
        serialized_name="dpdTimeoutSeconds",
    )
    properties.egress_bytes_transferred = AAZIntType(
        serialized_name="egressBytesTransferred",
        flags={"read_only": True},
    )
    properties.enable_bgp = AAZBoolType(
        serialized_name="enableBgp",
    )
    properties.enable_internet_security = AAZBoolType(
        serialized_name="enableInternetSecurity",
    )
    properties.enable_rate_limiting = AAZBoolType(
        serialized_name="enableRateLimiting",
    )
    properties.ingress_bytes_transferred = AAZIntType(
        serialized_name="ingressBytesTransferred",
        flags={"read_only": True},
    )
    properties.ipsec_policies = AAZListType(
        serialized_name="ipsecPolicies",
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.remote_vpn_site = AAZObjectType(
        serialized_name="remoteVpnSite",
    )
    _build_schema_sub_resource_read(properties.remote_vpn_site)
    properties.routing_configuration = AAZObjectType(
        serialized_name="routingConfiguration",
    )
    properties.routing_weight = AAZIntType(
        serialized_name="routingWeight",
    )
    properties.shared_key = AAZStrType(
        serialized_name="sharedKey",
    )
    properties.traffic_selector_policies = AAZListType(
        serialized_name="trafficSelectorPolicies",
    )
    properties.use_local_azure_ip_address = AAZBoolType(
        serialized_name="useLocalAzureIpAddress",
    )
    properties.use_policy_based_traffic_selectors = AAZBoolType(
        serialized_name="usePolicyBasedTrafficSelectors",
    )
    properties.vpn_connection_protocol_type = AAZStrType(
        serialized_name="vpnConnectionProtocolType",
    )
    properties.vpn_link_connections = AAZListType(
        serialized_name="vpnLinkConnections",
    )

    ipsec_policies = _schema_vpn_gateway_read.properties.connections.Element.properties.ipsec_policies
    ipsec_policies.Element = AAZObjectType()
    _build_schema_ipsec_policy_read(ipsec_policies.Element)

    routing_configuration = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration
    routing_configuration.associated_route_table = AAZObjectType(
        serialized_name="associatedRouteTable",
    )
    _build_schema_sub_resource_read(routing_configuration.associated_route_table)
    routing_configuration.inbound_route_map = AAZObjectType(
        serialized_name="inboundRouteMap",
    )
    _build_schema_sub_resource_read(routing_configuration.inbound_route_map)
    routing_configuration.outbound_route_map = AAZObjectType(
        serialized_name="outboundRouteMap",
    )
    _build_schema_sub_resource_read(routing_configuration.outbound_route_map)
    routing_configuration.propagated_route_tables = AAZObjectType(
        serialized_name="propagatedRouteTables",
    )
    routing_configuration.vnet_routes = AAZObjectType(
        serialized_name="vnetRoutes",
    )

    propagated_route_tables = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.propagated_route_tables
    propagated_route_tables.ids = AAZListType()
    propagated_route_tables.labels = AAZListType()

    ids = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.propagated_route_tables.ids
    ids.Element = AAZObjectType()
    _build_schema_sub_resource_read(ids.Element)

    labels = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.propagated_route_tables.labels
    labels.Element = AAZStrType()

    vnet_routes = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes
    vnet_routes.bgp_connections = AAZListType(
        serialized_name="bgpConnections",
        flags={"read_only": True},
    )
    vnet_routes.static_routes = AAZListType(
        serialized_name="staticRoutes",
    )
    vnet_routes.static_routes_config = AAZObjectType(
        serialized_name="staticRoutesConfig",
    )

    bgp_connections = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes.bgp_connections
    bgp_connections.Element = AAZObjectType()
    _build_schema_sub_resource_read(bgp_connections.Element)

    static_routes = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes.static_routes
    static_routes.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes.static_routes.Element
    _element.address_prefixes = AAZListType(
        serialized_name="addressPrefixes",
    )
    _element.name = AAZStrType()
    _element.next_hop_ip_address = AAZStrType(
        serialized_name="nextHopIpAddress",
    )

    address_prefixes = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes.static_routes.Element.address_prefixes
    address_prefixes.Element = AAZStrType()

    static_routes_config = _schema_vpn_gateway_read.properties.connections.Element.properties.routing_configuration.vnet_routes.static_routes_config
    static_routes_config.propagate_static_routes = AAZBoolType(
        serialized_name="propagateStaticRoutes",
        flags={"read_only": True},
    )
    static_routes_config.vnet_local_route_override_criteria = AAZStrType(
        serialized_name="vnetLocalRouteOverrideCriteria",
    )

    traffic_selector_policies = _schema_vpn_gateway_read.properties.connections.Element.properties.traffic_selector_policies
    traffic_selector_policies.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.connections.Element.properties.traffic_selector_policies.Element
    _element.local_address_ranges = AAZListType(
        serialized_name="localAddressRanges",
        flags={"required": True},
    )
    _element.remote_address_ranges = AAZListType(
        serialized_name="remoteAddressRanges",
        flags={"required": True},
    )

    local_address_ranges = _schema_vpn_gateway_read.properties.connections.Element.properties.traffic_selector_policies.Element.local_address_ranges
    local_address_ranges.Element = AAZStrType()

    remote_address_ranges = _schema_vpn_gateway_read.properties.connections.Element.properties.traffic_selector_policies.Element.remote_address_ranges
    remote_address_ranges.Element = AAZStrType()

    vpn_link_connections = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections
    vpn_link_connections.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element
    _element.etag = AAZStrType(
        flags={"read_only": True},
    )
    _element.id = AAZStrType()
    _element.name = AAZStrType()
    _element.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    _element.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties
    properties.connection_bandwidth = AAZIntType(
        serialized_name="connectionBandwidth",
    )
    properties.connection_status = AAZStrType(
        serialized_name="connectionStatus",
        flags={"read_only": True},
    )
    properties.egress_bytes_transferred = AAZIntType(
        serialized_name="egressBytesTransferred",
        flags={"read_only": True},
    )
    properties.egress_nat_rules = AAZListType(
        serialized_name="egressNatRules",
    )
    properties.enable_bgp = AAZBoolType(
        serialized_name="enableBgp",
    )
    properties.enable_rate_limiting = AAZBoolType(
        serialized_name="enableRateLimiting",
    )
    properties.ingress_bytes_transferred = AAZIntType(
        serialized_name="ingressBytesTransferred",
        flags={"read_only": True},
    )
    properties.ingress_nat_rules = AAZListType(
        serialized_name="ingressNatRules",
    )
    properties.ipsec_policies = AAZListType(
        serialized_name="ipsecPolicies",
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.routing_weight = AAZIntType(
        serialized_name="routingWeight",
    )
    properties.shared_key = AAZStrType(
        serialized_name="sharedKey",
    )
    properties.use_local_azure_ip_address = AAZBoolType(
        serialized_name="useLocalAzureIpAddress",
    )
    properties.use_policy_based_traffic_selectors = AAZBoolType(
        serialized_name="usePolicyBasedTrafficSelectors",
    )
    properties.vpn_connection_protocol_type = AAZStrType(
        serialized_name="vpnConnectionProtocolType",
    )
    properties.vpn_gateway_custom_bgp_addresses = AAZListType(
        serialized_name="vpnGatewayCustomBgpAddresses",
    )
    properties.vpn_link_connection_mode = AAZStrType(
        serialized_name="vpnLinkConnectionMode",
    )
    properties.vpn_site_link = AAZObjectType(
        serialized_name="vpnSiteLink",
    )
    _build_schema_sub_resource_read(properties.vpn_site_link)

    egress_nat_rules = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties.egress_nat_rules
    egress_nat_rules.Element = AAZObjectType()
    _build_schema_sub_resource_read(egress_nat_rules.Element)

    ingress_nat_rules = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties.ingress_nat_rules
    ingress_nat_rules.Element = AAZObjectType()
    _build_schema_sub_resource_read(ingress_nat_rules.Element)

    ipsec_policies = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties.ipsec_policies
    ipsec_policies.Element = AAZObjectType()
    _build_schema_ipsec_policy_read(ipsec_policies.Element)

    vpn_gateway_custom_bgp_addresses = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties.vpn_gateway_custom_bgp_addresses
    vpn_gateway_custom_bgp_addresses.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.connections.Element.properties.vpn_link_connections.Element.properties.vpn_gateway_custom_bgp_addresses.Element
    _element.custom_bgp_ip_address = AAZStrType(
        serialized_name="customBgpIpAddress",
        flags={"required": True},
    )
    _element.ip_configuration_id = AAZStrType(
        serialized_name="ipConfigurationId",
        flags={"required": True},
    )

    ip_configurations = _schema_vpn_gateway_read.properties.ip_configurations
    ip_configurations.Element = AAZObjectType(
        flags={"read_only": True},
    )

    _element = _schema_vpn_gateway_read.properties.ip_configurations.Element
    _element.id = AAZStrType(
        flags={"read_only": True},
    )
    _element.private_ip_address = AAZStrType(
        serialized_name="privateIpAddress",
        flags={"read_only": True},
    )
    _element.public_ip_address = AAZStrType(
        serialized_name="publicIpAddress",
        flags={"read_only": True},
    )

    nat_rules = _schema_vpn_gateway_read.properties.nat_rules
    nat_rules.Element = AAZObjectType()

    _element = _schema_vpn_gateway_read.properties.nat_rules.Element
    _element.etag = AAZStrType(
        flags={"read_only": True},
    )
    _element.id = AAZStrType()
    _element.name = AAZStrType()
    _element.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    _element.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_vpn_gateway_read.properties.nat_rules.Element.properties
    properties.egress_vpn_site_link_connections = AAZListType(
        serialized_name="egressVpnSiteLinkConnections",
        flags={"read_only": True},
    )
    properties.external_mappings = AAZListType(
        serialized_name="externalMappings",
    )
    properties.ingress_vpn_site_link_connections = AAZListType(
        serialized_name="ingressVpnSiteLinkConnections",
        flags={"read_only": True},
    )
    properties.internal_mappings = AAZListType(
        serialized_name="internalMappings",
    )
    properties.ip_configuration_id = AAZStrType(
        serialized_name="ipConfigurationId",
    )
    properties.mode = AAZStrType()
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.type = AAZStrType()

    egress_vpn_site_link_connections = _schema_vpn_gateway_read.properties.nat_rules.Element.properties.egress_vpn_site_link_connections
    egress_vpn_site_link_connections.Element = AAZObjectType()
    _build_schema_sub_resource_read(egress_vpn_site_link_connections.Element)

    external_mappings = _schema_vpn_gateway_read.properties.nat_rules.Element.properties.external_mappings
    external_mappings.Element = AAZObjectType()
    _build_schema_vpn_nat_rule_mapping_read(external_mappings.Element)

    ingress_vpn_site_link_connections = _schema_vpn_gateway_read.properties.nat_rules.Element.properties.ingress_vpn_site_link_connections
    ingress_vpn_site_link_connections.Element = AAZObjectType()
    _build_schema_sub_resource_read(ingress_vpn_site_link_connections.Element)

    internal_mappings = _schema_vpn_gateway_read.properties.nat_rules.Element.properties.internal_mappings
    internal_mappings.Element = AAZObjectType()
    _build_schema_vpn_nat_rule_mapping_read(internal_mappings.Element)

    virtual_hub = _schema_vpn_gateway_read.properties.virtual_hub
    virtual_hub.id = AAZStrType()

    tags = _schema_vpn_gateway_read.tags
    tags.Element = AAZStrType()

    _schema.etag = _schema_vpn_gateway_read.etag
    _schema.id = _schema_vpn_gateway_read.id
    _schema.location = _schema_vpn_gateway_read.location
    _schema.name = _schema_vpn_gateway_read.name
    _schema.properties = _schema_vpn_gateway_read.properties
    _schema.tags = _schema_vpn_gateway_read.tags
    _schema.type = _schema_vpn_gateway_read.type


_schema_vpn_nat_rule_mapping_read = None


def _build_schema_vpn_nat_rule_mapping_read(_schema):
    global _schema_vpn_nat_rule_mapping_read
    if _schema_vpn_nat_rule_mapping_read is not None:
        _schema.address_space = _schema_vpn_nat_rule_mapping_read.address_space
        _schema.port_range = _schema_vpn_nat_rule_mapping_read.port_range
        return

    _schema_vpn_nat_rule_mapping_read = AAZObjectType()

    vpn_nat_rule_mapping_read = _schema_vpn_nat_rule_mapping_read
    vpn_nat_rule_mapping_read.address_space = AAZStrType(
        serialized_name="addressSpace",
    )
    vpn_nat_rule_mapping_read.port_range = AAZStrType(
        serialized_name="portRange",
    )

    _schema.address_space = _schema_vpn_nat_rule_mapping_read.address_space
    _schema.port_range = _schema_vpn_nat_rule_mapping_read.port_range


__all__ = ["Update"]
