# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('portal dashboard list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('portal dashboard show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dashboard_name', options_list=['--name', '-n'], help='The name of the dashboard.', id_part='name')

    with self.argument_context('portal dashboard create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dashboard_name', options_list=['--name', '-n'], help='The name of the dashboard.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('lenses', arg_type=CLIArgumentType(options_list=['--lenses'], help='The dashboard lenses. Expected v'
                   'alue: json-string/@json-file.'))
        c.argument('metadata', arg_type=CLIArgumentType(options_list=['--metadata'], help='The dashboard metadata. Expe'
                   'cted value: json-string/@json-file.'))

    with self.argument_context('portal dashboard update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dashboard_name', options_list=['--name', '-n'], help='The name of the dashboard.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('lenses', arg_type=CLIArgumentType(options_list=['--lenses'], help='The dashboard lenses. Expected v'
                   'alue: json-string/@json-file.'))
        c.argument('metadata', arg_type=CLIArgumentType(options_list=['--metadata'], help='The dashboard metadata. Expe'
                   'cted value: json-string/@json-file.'))

    with self.argument_context('portal dashboard delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('dashboard_name', options_list=['--name', '-n'], help='The name of the dashboard.', id_part='name')
