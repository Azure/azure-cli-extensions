# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg):
    pass


# EXAMPLE: /Dashboards/put/Create or update a Dashboard
@try_manual
def step__dashboards_put_create_or_update_a_dashboard(test, rg):
    test.cmd('az portal dashboard create '
             '--location "eastus" '
             '--lenses "[{{\\"order\\":1,\\"parts\\":[{{\\"position\\":{{\\"colSpan\\":3,\\"rowSpan\\":4,\\"x\\":1,\\"y'
             '\\":2}}}},{{\\"position\\":{{\\"colSpan\\":6,\\"rowSpan\\":6,\\"x\\":5,\\"y\\":5}}}}]}},{{\\"order\\":2,'
             '\\"parts\\":[]}}]" '
             '--metadata "{{\\"metadata\\":{{\\"ColSpan\\":2,\\"RowSpan\\":1,\\"X\\":4,\\"Y\\":3}}}}" '
             '--tags aKey="aValue" anotherKey="anotherValue" '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("location", "eastus", case_sensitive=False),
                 test.check("metadata.metadata.ColSpan", 2),
                 test.check("metadata.metadata.RowSpan", 1),
                 test.check("metadata.metadata.X", 4),
                 test.check("metadata.metadata.Y", 3),
                 test.check("tags.aKey", "aValue", case_sensitive=False),
                 test.check("tags.anotherKey", "anotherValue", case_sensitive=False),
                 test.check("name", "{myDashboard}", case_sensitive=False),
             ])


# EXAMPLE: /Dashboards/get/Get a Dashboard
@try_manual
def step__dashboards_get_get_a_dashboard(test, rg):
    test.cmd('az portal dashboard show '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("location", "eastus", case_sensitive=False),
                 test.check("metadata.metadata.ColSpan", 2),
                 test.check("metadata.metadata.RowSpan", 1),
                 test.check("metadata.metadata.X", 4),
                 test.check("metadata.metadata.Y", 3),
                 test.check("tags.aKey", "aValue", case_sensitive=False),
                 test.check("tags.anotherKey", "anotherValue", case_sensitive=False),
                 test.check("name", "{myDashboard}", case_sensitive=False),
             ])


# EXAMPLE: /Dashboards/get/List all custom resource providers on the resourceGroup
@try_manual
def step__dashboards_get(test, rg):
    test.cmd('az portal dashboard list '
             '--resource-group "{rg}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Dashboards/get/List all custom resource providers on the subscription
@try_manual
def step__dashboards_get2(test, rg):
    test.cmd('az portal dashboard list '
             '-g ""',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Dashboards/patch/Update a Dashboard
@try_manual
def step__dashboards_patch_update_a_dashboard(test, rg):
    test.cmd('az portal dashboard update '
             '--tags aKey="bValue" anotherKey="anotherValue2" '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=[
                 test.check("location", "eastus", case_sensitive=False),
                 test.check("metadata.metadata.ColSpan", 2),
                 test.check("metadata.metadata.RowSpan", 1),
                 test.check("metadata.metadata.X", 4),
                 test.check("metadata.metadata.Y", 3),
                 test.check("tags.aKey", "bValue", case_sensitive=False),
                 test.check("tags.anotherKey", "anotherValue2", case_sensitive=False),
                 test.check("name", "{myDashboard}", case_sensitive=False),
             ])


# EXAMPLE: /TenantConfigurations/put/Create or update Tenant configuration
@try_manual
def step__tenantconfigurations_put(test, rg):
    test.cmd('az portal tenant-configuration create '
             '--enforce-private-markdown-storage true',
             checks=[])


# EXAMPLE: /TenantConfigurations/get/Get Tenant configuration
@try_manual
def step__tenantconfigurations_get(test, rg):
    test.cmd('az portal tenant-configuration show',
             checks=[])


# EXAMPLE: /TenantConfigurations/get/Get list of Tenant configurations
@try_manual
def step__tenantconfigurations_get2(test, rg):
    test.cmd('az portal tenant-configuration list',
             checks=[])


# EXAMPLE: /Dashboards/delete/Delete a Dashboard
@try_manual
def step__dashboards_delete_delete_a_dashboard(test, rg):
    test.cmd('az portal dashboard delete -y '
             '--name "{myDashboard}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /TenantConfigurations/delete/Delete Tenant configuration
@try_manual
def step__tenantconfigurations_delete(test, rg):
    test.cmd('az portal tenant-configuration delete -y',
             checks=[])


@try_manual
def cleanup(test, rg):
    pass


@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step__dashboards_put_create_or_update_a_dashboard(test, rg)
    step__dashboards_get_get_a_dashboard(test, rg)
    step__dashboards_get(test, rg)
    step__dashboards_get2(test, rg)
    step__dashboards_patch_update_a_dashboard(test, rg)
    step__tenantconfigurations_put(test, rg)
    step__tenantconfigurations_get(test, rg)
    step__tenantconfigurations_get2(test, rg)
    step__dashboards_delete_delete_a_dashboard(test, rg)
    step__tenantconfigurations_delete(test, rg)
    cleanup(test, rg)


@try_manual
class PortalScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestportal_testRG'[:7], key='rg', parameter_name='rg')
    def test_portal(self, rg):

        self.kwargs.update({
            'myDashboard': 'testDashboard',
        })

        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()
