# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "portal dashboard create",
)
class Create(AAZCommand):
    """Create a Dashboard.

    :example: Create a Dashboard
        az portal dashboard create --location "eastus" --name "testDashboard" --resource-group "testRG" --input-path "/src/json/properties.json" --tags aKey=aValue anotherKey=anotherValue
    """

    _aaz_info = {
        "version": "2022-12-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.portal/dashboards/{}", "2022-12-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the dashboard.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.lenses = AAZListArg(
            options=["--lenses"],
            arg_group="Properties",
            help="The dashboard lenses.",
        )
        _args_schema.metadata = AAZFreeFormDictArg(
            options=["--metadata"],
            arg_group="Properties",
            help="The dashboard metadata.",
        )

        lenses = cls._args_schema.lenses
        lenses.Element = AAZObjectArg()

        _element = cls._args_schema.lenses.Element
        _element.metadata = AAZFreeFormDictArg(
            options=["metadata"],
            help="The dashboard len's metadata.",
        )
        _element.order = AAZIntArg(
            options=["order"],
            help="The lens order.",
            required=True,
        )
        _element.parts = AAZListArg(
            options=["parts"],
            help="The dashboard parts.",
            required=True,
        )

        parts = cls._args_schema.lenses.Element.parts
        parts.Element = AAZObjectArg()

        _element = cls._args_schema.lenses.Element.parts.Element
        _element.metadata = AAZFreeFormDictArg(
            options=["metadata"],
            help="The dashboard part's metadata.",
        )
        _element.position = AAZObjectArg(
            options=["position"],
            help="The dashboard's part position.",
            required=True,
        )

        position = cls._args_schema.lenses.Element.parts.Element.position
        position.col_span = AAZIntArg(
            options=["col-span"],
            help="The dashboard's part column span.",
            required=True,
        )
        position.metadata = AAZFreeFormDictArg(
            options=["metadata"],
            help="The dashboard part's metadata.",
        )
        position.row_span = AAZIntArg(
            options=["row-span"],
            help="The dashboard's part row span.",
            required=True,
        )
        position.x = AAZIntArg(
            options=["x"],
            help="The dashboard's part x coordinate.",
            required=True,
        )
        position.y = AAZIntArg(
            options=["y"],
            help="The dashboard's part y coordinate.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.DashboardsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DashboardsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Portal/dashboards/{dashboardName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dashboardName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-12-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("lenses", AAZListType, ".lenses")
                properties.set_prop("metadata", AAZFreeFormDictType, ".metadata")

            lenses = _builder.get(".properties.lenses")
            if lenses is not None:
                lenses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.lenses[]")
            if _elements is not None:
                _elements.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                _elements.set_prop("order", AAZIntType, ".order", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("parts", AAZListType, ".parts", typ_kwargs={"flags": {"required": True}})

            metadata = _builder.get(".properties.lenses[].metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            parts = _builder.get(".properties.lenses[].parts")
            if parts is not None:
                parts.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.lenses[].parts[]")
            if _elements is not None:
                _elements.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                _elements.set_prop("position", AAZObjectType, ".position", typ_kwargs={"flags": {"required": True}})

            metadata = _builder.get(".properties.lenses[].parts[].metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            position = _builder.get(".properties.lenses[].parts[].position")
            if position is not None:
                position.set_prop("colSpan", AAZIntType, ".col_span", typ_kwargs={"flags": {"required": True}})
                position.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                position.set_prop("rowSpan", AAZIntType, ".row_span", typ_kwargs={"flags": {"required": True}})
                position.set_prop("x", AAZIntType, ".x", typ_kwargs={"flags": {"required": True}})
                position.set_prop("y", AAZIntType, ".y", typ_kwargs={"flags": {"required": True}})

            metadata = _builder.get(".properties.lenses[].parts[].position.metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.lenses = AAZListType()
            properties.metadata = AAZFreeFormDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            lenses = cls._schema_on_200_201.properties.lenses
            lenses.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.lenses.Element
            _element.metadata = AAZFreeFormDictType()
            _element.order = AAZIntType(
                flags={"required": True},
            )
            _element.parts = AAZListType(
                flags={"required": True},
            )

            parts = cls._schema_on_200_201.properties.lenses.Element.parts
            parts.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.lenses.Element.parts.Element
            _element.metadata = AAZFreeFormDictType()
            _element.position = AAZObjectType(
                flags={"required": True},
            )

            position = cls._schema_on_200_201.properties.lenses.Element.parts.Element.position
            position.col_span = AAZIntType(
                serialized_name="colSpan",
                flags={"required": True},
            )
            position.metadata = AAZFreeFormDictType()
            position.row_span = AAZIntType(
                serialized_name="rowSpan",
                flags={"required": True},
            )
            position.x = AAZIntType(
                flags={"required": True},
            )
            position.y = AAZIntType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
