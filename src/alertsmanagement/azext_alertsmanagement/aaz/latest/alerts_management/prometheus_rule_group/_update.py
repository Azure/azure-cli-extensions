# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "alerts-management prometheus-rule-group update",
)
class Update(AAZCommand):
    """Update a Prometheus rule group definition.

    :example: Update a Prometheus rule group definition.
        az alerts-management prometheus-rule-group update -n TestPrometheusRuleGroup -g MyResourceGroup --tags key=value
    """

    _aaz_info = {
        "version": "2023-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.alertsmanagement/prometheusrulegroups/{}", "2023-03-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the rule group.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[^:@/#{}%&+*<>?]+$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["--cluster-name"],
            arg_group="Properties",
            help="Apply rule to data from a specific cluster.",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Rule group description.",
            nullable=True,
        )
        _args_schema.enabled = AAZBoolArg(
            options=["--enabled"],
            arg_group="Properties",
            help="Enable/disable rule group.",
            nullable=True,
        )
        _args_schema.interval = AAZDurationArg(
            options=["--interval"],
            arg_group="Properties",
            help="The interval in which to run the Prometheus rule group represented in ISO 8601 duration format. Should be between 1 and 15 minutes",
            nullable=True,
        )
        _args_schema.rules = AAZListArg(
            options=["--rules"],
            arg_group="Properties",
            help="Defines the rules in the Prometheus rule group.",
        )
        _args_schema.scopes = AAZListArg(
            options=["--scopes"],
            arg_group="Properties",
            help="Target Azure Monitor workspaces resource ids. This api-version is currently limited to creating with one scope. This may change in future.",
        )

        rules = cls._args_schema.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.rules.Element
        _element.actions = AAZListArg(
            options=["actions"],
            help="Actions that are performed when the alert rule becomes active, and when an alert condition is resolved.",
            nullable=True,
        )
        _element.alert = AAZStrArg(
            options=["alert"],
            help="Alert rule name.",
            nullable=True,
        )
        _element.annotations = AAZDictArg(
            options=["annotations"],
            help="The annotations clause specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links. The annotation values can be templated.",
            nullable=True,
        )
        _element.enabled = AAZBoolArg(
            options=["enabled"],
            help="Enable/disable rule.",
            nullable=True,
        )
        _element.expression = AAZStrArg(
            options=["expression"],
            help="The PromQL expression to evaluate. https://prometheus.io/docs/prometheus/latest/querying/basics/. Evaluated periodically as given by 'interval', and the result recorded as a new set of time series with the metric name as given by 'record'.",
        )
        _element['for'] = AAZDurationArg(
            options=["for"],
            help="The amount of time alert must be active before firing.",
            nullable=True,
        )
        _element.labels = AAZDictArg(
            options=["labels"],
            help="Labels to add or overwrite before storing the result.",
            nullable=True,
        )
        _element.record = AAZStrArg(
            options=["record"],
            help="Recorded metrics name.",
            nullable=True,
        )
        _element.resolve_configuration = AAZObjectArg(
            options=["resolve-configuration"],
            help="Defines the configuration for resolving fired alerts. Only relevant for alerts.",
            nullable=True,
        )
        _element.severity = AAZIntArg(
            options=["severity"],
            help="The severity of the alerts fired by the rule. Must be between 0 and 4.",
            nullable=True,
        )

        actions = cls._args_schema.rules.Element.actions
        actions.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.rules.Element.actions.Element
        _element.action_group_id = AAZStrArg(
            options=["action-group-id"],
            help="The resource id of the action group to use.",
            nullable=True,
        )
        _element.action_properties = AAZDictArg(
            options=["action-properties"],
            help="The properties of an action group object.",
            nullable=True,
        )

        action_properties = cls._args_schema.rules.Element.actions.Element.action_properties
        action_properties.Element = AAZStrArg(
            nullable=True,
        )

        annotations = cls._args_schema.rules.Element.annotations
        annotations.Element = AAZStrArg(
            nullable=True,
        )

        labels = cls._args_schema.rules.Element.labels
        labels.Element = AAZStrArg(
            nullable=True,
        )

        resolve_configuration = cls._args_schema.rules.Element.resolve_configuration
        resolve_configuration.auto_resolved = AAZBoolArg(
            options=["auto-resolved"],
            help="Enable alert auto-resolution.",
            nullable=True,
        )
        resolve_configuration.time_to_resolve = AAZDurationArg(
            options=["time-to-resolve"],
            help="Alert auto-resolution timeout.",
            nullable=True,
        )

        scopes = cls._args_schema.scopes
        scopes.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PrometheusRuleGroupsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.PrometheusRuleGroupsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PrometheusRuleGroupsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/prometheusRuleGroups/{ruleGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleGroupName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_prometheus_rule_group_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class PrometheusRuleGroupsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/prometheusRuleGroups/{ruleGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleGroupName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_prometheus_rule_group_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("clusterName", AAZStrType, ".cluster_name")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("enabled", AAZBoolType, ".enabled")
                properties.set_prop("interval", AAZStrType, ".interval")
                properties.set_prop("rules", AAZListType, ".rules", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("scopes", AAZListType, ".scopes", typ_kwargs={"flags": {"required": True}})

            rules = _builder.get(".properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rules[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("alert", AAZStrType, ".alert")
                _elements.set_prop("annotations", AAZDictType, ".annotations")
                _elements.set_prop("enabled", AAZBoolType, ".enabled")
                _elements.set_prop("expression", AAZStrType, ".expression", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("for", AAZStrType, ".for")
                _elements.set_prop("labels", AAZDictType, ".labels")
                _elements.set_prop("record", AAZStrType, ".record")
                _elements.set_prop("resolveConfiguration", AAZObjectType, ".resolve_configuration")
                _elements.set_prop("severity", AAZIntType, ".severity")

            actions = _builder.get(".properties.rules[].actions")
            if actions is not None:
                actions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.rules[].actions[]")
            if _elements is not None:
                _elements.set_prop("actionGroupId", AAZStrType, ".action_group_id")
                _elements.set_prop("actionProperties", AAZDictType, ".action_properties")

            action_properties = _builder.get(".properties.rules[].actions[].actionProperties")
            if action_properties is not None:
                action_properties.set_elements(AAZStrType, ".")

            annotations = _builder.get(".properties.rules[].annotations")
            if annotations is not None:
                annotations.set_elements(AAZStrType, ".")

            labels = _builder.get(".properties.rules[].labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".")

            resolve_configuration = _builder.get(".properties.rules[].resolveConfiguration")
            if resolve_configuration is not None:
                resolve_configuration.set_prop("autoResolved", AAZBoolType, ".auto_resolved")
                resolve_configuration.set_prop("timeToResolve", AAZStrType, ".time_to_resolve")

            scopes = _builder.get(".properties.scopes")
            if scopes is not None:
                scopes.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_prometheus_rule_group_resource_read = None

    @classmethod
    def _build_schema_prometheus_rule_group_resource_read(cls, _schema):
        if cls._schema_prometheus_rule_group_resource_read is not None:
            _schema.id = cls._schema_prometheus_rule_group_resource_read.id
            _schema.location = cls._schema_prometheus_rule_group_resource_read.location
            _schema.name = cls._schema_prometheus_rule_group_resource_read.name
            _schema.properties = cls._schema_prometheus_rule_group_resource_read.properties
            _schema.system_data = cls._schema_prometheus_rule_group_resource_read.system_data
            _schema.tags = cls._schema_prometheus_rule_group_resource_read.tags
            _schema.type = cls._schema_prometheus_rule_group_resource_read.type
            return

        cls._schema_prometheus_rule_group_resource_read = _schema_prometheus_rule_group_resource_read = AAZObjectType()

        prometheus_rule_group_resource_read = _schema_prometheus_rule_group_resource_read
        prometheus_rule_group_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        prometheus_rule_group_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        prometheus_rule_group_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        prometheus_rule_group_resource_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        prometheus_rule_group_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        prometheus_rule_group_resource_read.tags = AAZDictType()
        prometheus_rule_group_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_prometheus_rule_group_resource_read.properties
        properties.cluster_name = AAZStrType(
            serialized_name="clusterName",
        )
        properties.description = AAZStrType()
        properties.enabled = AAZBoolType()
        properties.interval = AAZStrType()
        properties.rules = AAZListType(
            flags={"required": True},
        )
        properties.scopes = AAZListType(
            flags={"required": True},
        )

        rules = _schema_prometheus_rule_group_resource_read.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_prometheus_rule_group_resource_read.properties.rules.Element
        _element.actions = AAZListType()
        _element.alert = AAZStrType()
        _element.annotations = AAZDictType()
        _element.enabled = AAZBoolType()
        _element.expression = AAZStrType(
            flags={"required": True},
        )
        _element["for"] = AAZStrType()
        _element.labels = AAZDictType()
        _element.record = AAZStrType()
        _element.resolve_configuration = AAZObjectType(
            serialized_name="resolveConfiguration",
        )
        _element.severity = AAZIntType()

        actions = _schema_prometheus_rule_group_resource_read.properties.rules.Element.actions
        actions.Element = AAZObjectType()

        _element = _schema_prometheus_rule_group_resource_read.properties.rules.Element.actions.Element
        _element.action_group_id = AAZStrType(
            serialized_name="actionGroupId",
        )
        _element.action_properties = AAZDictType(
            serialized_name="actionProperties",
        )

        action_properties = _schema_prometheus_rule_group_resource_read.properties.rules.Element.actions.Element.action_properties
        action_properties.Element = AAZStrType()

        annotations = _schema_prometheus_rule_group_resource_read.properties.rules.Element.annotations
        annotations.Element = AAZStrType()

        labels = _schema_prometheus_rule_group_resource_read.properties.rules.Element.labels
        labels.Element = AAZStrType()

        resolve_configuration = _schema_prometheus_rule_group_resource_read.properties.rules.Element.resolve_configuration
        resolve_configuration.auto_resolved = AAZBoolType(
            serialized_name="autoResolved",
        )
        resolve_configuration.time_to_resolve = AAZStrType(
            serialized_name="timeToResolve",
        )

        scopes = _schema_prometheus_rule_group_resource_read.properties.scopes
        scopes.Element = AAZStrType()

        system_data = _schema_prometheus_rule_group_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_prometheus_rule_group_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_prometheus_rule_group_resource_read.id
        _schema.location = cls._schema_prometheus_rule_group_resource_read.location
        _schema.name = cls._schema_prometheus_rule_group_resource_read.name
        _schema.properties = cls._schema_prometheus_rule_group_resource_read.properties
        _schema.system_data = cls._schema_prometheus_rule_group_resource_read.system_data
        _schema.tags = cls._schema_prometheus_rule_group_resource_read.tags
        _schema.type = cls._schema_prometheus_rule_group_resource_read.type


__all__ = ["Update"]
