# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_smart_group_show_history
from .example_steps import step_smart_group_show
from .example_steps import step_alert_show
from .example_steps import step_alert_show_summary
from .example_steps import step_smart_group_show_all
from .example_steps import step_alert_show_all
from .example_steps import step_alert_meta_data
from .example_steps import step_smart_group_change_state
from .example_steps import step_alert_change_state
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    # STEP NOT FOUND: /ActionRules/put/PutActionRule
    # STEP NOT FOUND: /SmartDetectorAlertRules/put/Create or update a Smart Detector alert rule
    # STEP NOT FOUND: /SmartDetectorAlertRules/get/Get a Smart Detector alert rule
    # STEP NOT FOUND: /ActionRules/get/GetActionRuleById
    # STEP NOT FOUND: /SmartDetectorAlertRules/get/List alert rules
    # STEP NOT FOUND: /ActionRules/get/GetActionRulesResourceGroupWide
    step_smart_group_show_history(test, checks=[])
    step_smart_group_show(test, checks=[])
    # STEP NOT FOUND: /SmartDetectorAlertRules/get/List Smart Detector alert rules
    step_alert_show(test, checks=[])
    step_alert_show_summary(test, checks=[])
    step_smart_group_show_all(test, checks=[])
    # STEP NOT FOUND: /ActionRules/get/GetActionRulesSubscriptionWide
    step_alert_show_all(test, checks=[])
    step_alert_meta_data(test, checks=[])
    # STEP NOT FOUND: /SmartDetectorAlertRules/patch/Patch alert rules
    # STEP NOT FOUND: /ActionRules/patch/PatchActionRule
    step_smart_group_change_state(test, checks=[])
    step_alert_change_state(test, checks=[])
    # STEP NOT FOUND: /SmartDetectorAlertRules/delete/Delete a Smart Detector alert rule
    # STEP NOT FOUND: /ActionRules/delete/DeleteActionRule
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class AlertsmanagementScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(AlertsmanagementScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myAlertProcessingRule': 'DailySuppression',
            'myAlertProcessingRule2': 'AddActionGroupToSubscription',
            'myAlertProcessingRule3': 'AddActionGroupsBySeverity',
            'myAlertProcessingRule4': 'RemoveActionGroupsMaintenanceWindow',
            'myAlertProcessingRule5': 'RemoveActionGroupsSpecificAlertRule',
            'myAlertProcessingRule6': 'RemoveActionGroupsRecurringMaintenance',
            'myAlertProcessingRule7': 'RemoveActionGroupsOutsideBusinessHours',
            'myAlertProcessingRule8': 'WeeklySuppression',
        })

    @ResourceGroupPreparer(name_prefix='clitestalertsmanagement_RGId1'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestalertsmanagement_RGId2'[:7], key='rg_3', parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestalertsmanagement_Rgid2'[:7], key='rg_4', parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='clitestalertsmanagement_alertscorrelationrg'[:7], key='rg',
                           parameter_name='rg')
    def test_alertsmanagement_Scenario(self, rg_2, rg_3, rg_4, rg):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
