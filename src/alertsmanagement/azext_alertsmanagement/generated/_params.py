# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_alertsmanagement.action import (
    AddConditions,
    AddActions,
    AddRecurrences
)


def load_arguments(self, _):

    with self.argument_context('alertsmanagement alert-processing-rule list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('alertsmanagement alert-processing-rule show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('alert_processing_rule_name', options_list=['--name', '-n', '--alert-processing-rule-name'],
                   type=str, help='The name of the alert processing rule that needs to be fetched.', id_part='name')

    with self.argument_context('alertsmanagement alert-processing-rule create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('alert_processing_rule_name', options_list=['--name', '-n', '--alert-processing-rule-name'],
                   type=str, help='The name of the alert processing rule that needs to be created/updated.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('scopes', nargs='+', help='Scopes on which alert processing rule will apply.')
        c.argument('conditions', action=AddConditions, nargs='+', help='Conditions on which alerts will be filtered.')
        c.argument('actions', action=AddActions, nargs='+', help='Actions to be applied.')
        c.argument('description', type=str, help='Description of alert processing rule.')
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates if the given alert processing rule is '
                   'enabled or disabled.')
        c.argument('effective_from', type=str, help='Scheduling effective from time. Date-Time in ISO-8601 format '
                   'without timezone suffix.', arg_group='Schedule')
        c.argument('effective_until', type=str, help='Scheduling effective until time. Date-Time in ISO-8601 format '
                   'without timezone suffix.', arg_group='Schedule')
        c.argument('time_zone', type=str, help='Scheduling time zone.', arg_group='Schedule')
        c.argument('recurrences', action=AddRecurrences, nargs='+', help='List of recurrences.', arg_group='Schedule')

    with self.argument_context('alertsmanagement alert-processing-rule update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('alert_processing_rule_name', options_list=['--name', '-n', '--alert-processing-rule-name'],
                   type=str, help='The name that needs to be updated.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('enabled', arg_type=get_three_state_flag(), help='Indicates if the given alert processing rule is '
                   'enabled or disabled.')

    with self.argument_context('alertsmanagement alert-processing-rule delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('alert_processing_rule_name', options_list=['--name', '-n', '--alert-processing-rule-name'],
                   type=str, help='The name of the alert processing rule that needs to be deleted.', id_part='name')

    with self.argument_context('alertsmanagement alert show') as c:
        c.argument('alert_id', type=str, help='Unique ID of an alert instance.', id_part='name')

    with self.argument_context('alertsmanagement alert change-state') as c:
        c.argument('alert_id', type=str, help='Unique ID of an alert instance.', id_part='name')
        c.argument('new_state', arg_type=get_enum_type(['New', 'Acknowledged', 'Closed']), help='New state of the '
                   'alert.')

    with self.argument_context('alertsmanagement alert show-all') as c:
        c.argument('target_resource', type=str, help='Filter by target resource( which is full ARM ID) Default value '
                   'is select all.')
        c.argument('target_resource_type', type=str, help='Filter by target resource type. Default value is select '
                   'all.')
        c.argument('target_resource_group', type=str, help='Filter by target resource group name. Default value is '
                   'select all.')
        c.argument('monitor_service', arg_type=get_enum_type(['Application Insights', 'ActivityLog Administrative',
                                                              'ActivityLog Security', 'ActivityLog Recommendation',
                                                              'ActivityLog Policy', 'ActivityLog Autoscale', 'Log '
                                                              'Analytics', 'Nagios', 'Platform', 'SCOM',
                                                              'ServiceHealth', 'SmartDetector', 'VM Insights',
                                                              'Zabbix']), help='Filter by monitor service which '
                   'generates the alert instance. Default value is select all.')
        c.argument('monitor_condition', arg_type=get_enum_type(['Fired', 'Resolved']), help='Filter by monitor '
                   'condition which is either \'Fired\' or \'Resolved\'. Default value is to select all.')
        c.argument('severity', arg_type=get_enum_type(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']), help='Filter by '
                   'severity.  Default value is select all.')
        c.argument('alert_state', arg_type=get_enum_type(['New', 'Acknowledged', 'Closed']), help='Filter by state of '
                   'the alert instance. Default value is to select all.')
        c.argument('alert_rule', type=str, help='Filter by specific alert rule.  Default value is to select all.')
        c.argument('smart_group_id', type=str, help='Filter the alerts list by the Smart Group Id. Default value is '
                   'none.')
        c.argument('include_context', arg_type=get_three_state_flag(), help='Include context which has contextual data '
                   'specific to the monitor service. Default value is false\'')
        c.argument('include_egress_config', arg_type=get_three_state_flag(), help='Include egress config which would '
                   'be used for displaying the content in portal.  Default value is \'false\'.')
        c.argument('page_count', type=int, help='Determines number of alerts returned per page in response. '
                   'Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum '
                   'value allowed is 25. Default value is 25.')
        c.argument('sort_by', arg_type=get_enum_type(['name', 'severity', 'alertState', 'monitorCondition',
                                                      'targetResource', 'targetResourceName', 'targetResourceGroup',
                                                      'targetResourceType', 'startDateTime', 'lastModifiedDateTime']),
                   help='Sort the query results by input field,  Default value is \'lastModifiedDateTime\'.')
        c.argument('sort_order', arg_type=get_enum_type(['asc', 'desc']), help='Sort the query results order in either '
                   'ascending or descending.  Default value is \'desc\' for time fields and \'asc\' for others.')
        c.argument('select', type=str, help='This filter allows to selection of the fields(comma separated) which '
                   'would  be part of the essential section. This would allow to project only the  required fields '
                   'rather than getting entire content.  Default is to fetch all the fields in the essentials section.')
        c.argument('time_range', arg_type=get_enum_type(['1h', '1d', '7d', '30d']), help='Filter by time range by '
                   'below listed values. Default value is 1 day.')
        c.argument('custom_time_range', type=str, help='Filter by custom time range in the format '
                   '<start-time>/<end-time>  where time is in (ISO-8601 format)\'. Permissible values is within 30 '
                   'days from  query time. Either timeRange or customTimeRange could be used but not both. Default is '
                   'none.')

    with self.argument_context('alertsmanagement alert show-history') as c:
        c.argument('alert_id', type=str, help='Unique ID of an alert instance.', id_part='name')

    with self.argument_context('alertsmanagement alert show-summary') as c:
        c.argument('groupby', arg_type=get_enum_type(['severity', 'alertState', 'monitorCondition', 'monitorService',
                                                      'signalType', 'alertRule']), help='This parameter allows the '
                   'result set to be grouped by input fields (Maximum 2 comma separated fields supported). For '
                   'example, groupby=severity or groupby=severity,alertstate.')
        c.argument('include_smart_groups_count', arg_type=get_three_state_flag(), help='Include count of the '
                   'SmartGroups as part of the summary. Default value is \'false\'.')
        c.argument('target_resource', type=str, help='Filter by target resource( which is full ARM ID) Default value '
                   'is select all.')
        c.argument('target_resource_type', type=str, help='Filter by target resource type. Default value is select '
                   'all.')
        c.argument('target_resource_group', type=str, help='Filter by target resource group name. Default value is '
                   'select all.')
        c.argument('monitor_service', arg_type=get_enum_type(['Application Insights', 'ActivityLog Administrative',
                                                              'ActivityLog Security', 'ActivityLog Recommendation',
                                                              'ActivityLog Policy', 'ActivityLog Autoscale', 'Log '
                                                              'Analytics', 'Nagios', 'Platform', 'SCOM',
                                                              'ServiceHealth', 'SmartDetector', 'VM Insights',
                                                              'Zabbix']), help='Filter by monitor service which '
                   'generates the alert instance. Default value is select all.')
        c.argument('monitor_condition', arg_type=get_enum_type(['Fired', 'Resolved']), help='Filter by monitor '
                   'condition which is either \'Fired\' or \'Resolved\'. Default value is to select all.')
        c.argument('severity', arg_type=get_enum_type(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']), help='Filter by '
                   'severity.  Default value is select all.')
        c.argument('alert_state', arg_type=get_enum_type(['New', 'Acknowledged', 'Closed']), help='Filter by state of '
                   'the alert instance. Default value is to select all.')
        c.argument('alert_rule', type=str, help='Filter by specific alert rule.  Default value is to select all.')
        c.argument('time_range', arg_type=get_enum_type(['1h', '1d', '7d', '30d']), help='Filter by time range by '
                   'below listed values. Default value is 1 day.')
        c.argument('custom_time_range', type=str, help='Filter by custom time range in the format '
                   '<start-time>/<end-time>  where time is in (ISO-8601 format)\'. Permissible values is within 30 '
                   'days from  query time. Either timeRange or customTimeRange could be used but not both. Default is '
                   'none.')

    with self.argument_context('alertsmanagement smart-group show') as c:
        c.argument('smart_group_id', type=str, help='Smart group unique id.', id_part='name')

    with self.argument_context('alertsmanagement smart-group change-state') as c:
        c.argument('smart_group_id', type=str, help='Smart group unique id.', id_part='name')
        c.argument('new_state', arg_type=get_enum_type(['New', 'Acknowledged', 'Closed']), help='New state of the '
                   'alert.')

    with self.argument_context('alertsmanagement smart-group show-all') as c:
        c.argument('target_resource', type=str, help='Filter by target resource( which is full ARM ID) Default value '
                   'is select all.')
        c.argument('target_resource_group', type=str, help='Filter by target resource group name. Default value is '
                   'select all.')
        c.argument('target_resource_type', type=str, help='Filter by target resource type. Default value is select '
                   'all.')
        c.argument('monitor_service', arg_type=get_enum_type(['Application Insights', 'ActivityLog Administrative',
                                                              'ActivityLog Security', 'ActivityLog Recommendation',
                                                              'ActivityLog Policy', 'ActivityLog Autoscale', 'Log '
                                                              'Analytics', 'Nagios', 'Platform', 'SCOM',
                                                              'ServiceHealth', 'SmartDetector', 'VM Insights',
                                                              'Zabbix']), help='Filter by monitor service which '
                   'generates the alert instance. Default value is select all.')
        c.argument('monitor_condition', arg_type=get_enum_type(['Fired', 'Resolved']), help='Filter by monitor '
                   'condition which is either \'Fired\' or \'Resolved\'. Default value is to select all.')
        c.argument('severity', arg_type=get_enum_type(['Sev0', 'Sev1', 'Sev2', 'Sev3', 'Sev4']), help='Filter by '
                   'severity.  Default value is select all.')
        c.argument('smart_group_state', arg_type=get_enum_type(['New', 'Acknowledged', 'Closed']), help='Filter by '
                   'state of the smart group. Default value is to select all.')
        c.argument('time_range', arg_type=get_enum_type(['1h', '1d', '7d', '30d']), help='Filter by time range by '
                   'below listed values. Default value is 1 day.')
        c.argument('page_count', type=int, help='Determines number of alerts returned per page in response. '
                   'Permissible value is between 1 to 250. When the "includeContent"  filter is selected, maximum '
                   'value allowed is 25. Default value is 25.')
        c.argument('sort_by', arg_type=get_enum_type(['alertsCount', 'state', 'severity', 'startDateTime',
                                                      'lastModifiedDateTime']), help='Sort the query results by input '
                   'field. Default value is sort by \'lastModifiedDateTime\'.')
        c.argument('sort_order', arg_type=get_enum_type(['asc', 'desc']), help='Sort the query results order in either '
                   'ascending or descending.  Default value is \'desc\' for time fields and \'asc\' for others.')

    with self.argument_context('alertsmanagement smart-group show-history') as c:
        c.argument('smart_group_id', type=str, help='Smart group unique id.', id_part='name')
