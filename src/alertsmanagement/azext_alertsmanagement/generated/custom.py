# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines


def alertsmanagement_alert_processing_rule_list(client,
                                                resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def alertsmanagement_alert_processing_rule_show(client,
                                                resource_group_name,
                                                alert_processing_rule_name):
    return client.get_by_name(resource_group_name=resource_group_name,
                              alert_processing_rule_name=alert_processing_rule_name)


def alertsmanagement_alert_processing_rule_create(client,
                                                  resource_group_name,
                                                  alert_processing_rule_name,
                                                  location,
                                                  tags=None,
                                                  scopes=None,
                                                  conditions=None,
                                                  actions=None,
                                                  description=None,
                                                  enabled=None,
                                                  effective_from=None,
                                                  effective_until=None,
                                                  time_zone=None,
                                                  recurrences=None):
    alert_processing_rule = {}
    alert_processing_rule['location'] = location
    if tags is not None:
        alert_processing_rule['tags'] = tags
    alert_processing_rule['properties'] = {}
    if scopes is not None:
        alert_processing_rule['properties']['scopes'] = scopes
    if conditions is not None:
        alert_processing_rule['properties']['conditions'] = conditions
    if actions is not None:
        alert_processing_rule['properties']['actions'] = actions
    if description is not None:
        alert_processing_rule['properties']['description'] = description
    if enabled is not None:
        alert_processing_rule['properties']['enabled'] = enabled
    else:
        alert_processing_rule['properties']['enabled'] = True
    alert_processing_rule['properties']['schedule'] = {}
    if effective_from is not None:
        alert_processing_rule['properties']['schedule']['effective_from'] = effective_from
    if effective_until is not None:
        alert_processing_rule['properties']['schedule']['effective_until'] = effective_until
    if time_zone is not None:
        alert_processing_rule['properties']['schedule']['time_zone'] = time_zone
    if recurrences is not None:
        alert_processing_rule['properties']['schedule']['recurrences'] = recurrences
    if len(alert_processing_rule['properties']['schedule']) == 0:
        del alert_processing_rule['properties']['schedule']
    return client.create_or_update(resource_group_name=resource_group_name,
                                   alert_processing_rule_name=alert_processing_rule_name,
                                   alert_processing_rule=alert_processing_rule)


def alertsmanagement_alert_processing_rule_update(client,
                                                  resource_group_name,
                                                  alert_processing_rule_name,
                                                  tags=None,
                                                  enabled=None):
    alert_processing_rule_patch = {}
    if tags is not None:
        alert_processing_rule_patch['tags'] = tags
    if enabled is not None:
        alert_processing_rule_patch['enabled'] = enabled
    return client.update(resource_group_name=resource_group_name,
                         alert_processing_rule_name=alert_processing_rule_name,
                         alert_processing_rule_patch=alert_processing_rule_patch)


def alertsmanagement_alert_processing_rule_delete(client,
                                                  resource_group_name,
                                                  alert_processing_rule_name):
    return client.delete(resource_group_name=resource_group_name,
                         alert_processing_rule_name=alert_processing_rule_name)


def alertsmanagement_alert_show(client,
                                alert_id):
    return client.get_by_id(alert_id=alert_id)


def alertsmanagement_alert_change_state(client,
                                        alert_id,
                                        new_state):
    return client.change_state(alert_id=alert_id,
                               new_state=new_state)


def alertsmanagement_alert_meta_data(client):
    return client.meta_data(identifier="MonitorServiceList")


def alertsmanagement_alert_show_all(client,
                                    target_resource=None,
                                    target_resource_type=None,
                                    target_resource_group=None,
                                    monitor_service=None,
                                    monitor_condition=None,
                                    severity=None,
                                    alert_state=None,
                                    alert_rule=None,
                                    smart_group_id=None,
                                    include_context=None,
                                    include_egress_config=None,
                                    page_count=None,
                                    sort_by=None,
                                    sort_order=None,
                                    select=None,
                                    time_range=None,
                                    custom_time_range=None):
    return client.get_all(target_resource=target_resource,
                          target_resource_type=target_resource_type,
                          target_resource_group=target_resource_group,
                          monitor_service=monitor_service,
                          monitor_condition=monitor_condition,
                          severity=severity,
                          alert_state=alert_state,
                          alert_rule=alert_rule,
                          smart_group_id=smart_group_id,
                          include_context=include_context,
                          include_egress_config=include_egress_config,
                          page_count=page_count,
                          sort_by=sort_by,
                          sort_order=sort_order,
                          select=select,
                          time_range=time_range,
                          custom_time_range=custom_time_range)


def alertsmanagement_alert_show_history(client,
                                        alert_id):
    return client.get_history(alert_id=alert_id)


def alertsmanagement_alert_show_summary(client,
                                        groupby,
                                        include_smart_groups_count=None,
                                        target_resource=None,
                                        target_resource_type=None,
                                        target_resource_group=None,
                                        monitor_service=None,
                                        monitor_condition=None,
                                        severity=None,
                                        alert_state=None,
                                        alert_rule=None,
                                        time_range=None,
                                        custom_time_range=None):
    return client.get_summary(groupby=groupby,
                              include_smart_groups_count=include_smart_groups_count,
                              target_resource=target_resource,
                              target_resource_type=target_resource_type,
                              target_resource_group=target_resource_group,
                              monitor_service=monitor_service,
                              monitor_condition=monitor_condition,
                              severity=severity,
                              alert_state=alert_state,
                              alert_rule=alert_rule,
                              time_range=time_range,
                              custom_time_range=custom_time_range)


def alertsmanagement_smart_group_show(client,
                                      smart_group_id):
    return client.get_by_id(smart_group_id=smart_group_id)


def alertsmanagement_smart_group_change_state(client,
                                              smart_group_id,
                                              new_state):
    return client.change_state(smart_group_id=smart_group_id,
                               new_state=new_state)


def alertsmanagement_smart_group_show_all(client,
                                          target_resource=None,
                                          target_resource_group=None,
                                          target_resource_type=None,
                                          monitor_service=None,
                                          monitor_condition=None,
                                          severity=None,
                                          smart_group_state=None,
                                          time_range=None,
                                          page_count=None,
                                          sort_by=None,
                                          sort_order=None):
    return client.get_all(target_resource=target_resource,
                          target_resource_group=target_resource_group,
                          target_resource_type=target_resource_type,
                          monitor_service=monitor_service,
                          monitor_condition=monitor_condition,
                          severity=severity,
                          smart_group_state=smart_group_state,
                          time_range=time_range,
                          page_count=page_count,
                          sort_by=sort_by,
                          sort_order=sort_order)


def alertsmanagement_smart_group_show_history(client,
                                              smart_group_id):
    return client.get_history(smart_group_id=smart_group_id)
