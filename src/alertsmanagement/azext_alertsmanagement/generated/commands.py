# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_alertsmanagement.generated._client_factory import cf_alert_processing_rule, cf_alert, cf_smart_group


alertsmanagement_alert = CliCommandType(
    operations_tmpl=(
        'azext_alertsmanagement.vendored_sdks.alertsmanagement.operations._alerts_operations#AlertsOperations.{}'
    ),
    client_factory=cf_alert,
)


alertsmanagement_alert_processing_rule = CliCommandType(
    operations_tmpl='azext_alertsmanagement.vendored_sdks.alertsmanagement.operations._alert_processing_rules_operations#AlertProcessingRulesOperations.{}',
    client_factory=cf_alert_processing_rule,
)


alertsmanagement_smart_group = CliCommandType(
    operations_tmpl='azext_alertsmanagement.vendored_sdks.alertsmanagement.operations._smart_groups_operations#SmartGroupsOperations.{}',
    client_factory=cf_smart_group,
)


def load_command_table(self, _):

    with self.command_group('alertsmanagement alert', alertsmanagement_alert, client_factory=cf_alert) as g:
        g.custom_show_command('show', 'alertsmanagement_alert_show')
        g.custom_command('change-state', 'alertsmanagement_alert_change_state')
        g.custom_command('meta-data', 'alertsmanagement_alert_meta_data')
        g.custom_command('show-all', 'alertsmanagement_alert_show_all')
        g.custom_command('show-history', 'alertsmanagement_alert_show_history')
        g.custom_command('show-summary', 'alertsmanagement_alert_show_summary')

    with self.command_group(
        'alertsmanagement alert-processing-rule',
        alertsmanagement_alert_processing_rule,
        client_factory=cf_alert_processing_rule,
    ) as g:
        g.custom_command('list', 'alertsmanagement_alert_processing_rule_list')
        g.custom_show_command('show', 'alertsmanagement_alert_processing_rule_show')
        g.custom_command('create', 'alertsmanagement_alert_processing_rule_create')
        g.custom_command('update', 'alertsmanagement_alert_processing_rule_update')
        g.custom_command('delete', 'alertsmanagement_alert_processing_rule_delete', confirmation=True)

    with self.command_group(
        'alertsmanagement smart-group', alertsmanagement_smart_group, client_factory=cf_smart_group
    ) as g:
        g.custom_show_command('show', 'alertsmanagement_smart_group_show')
        g.custom_command('change-state', 'alertsmanagement_smart_group_change_state')
        g.custom_command('show-all', 'alertsmanagement_smart_group_show_all')
        g.custom_command('show-history', 'alertsmanagement_smart_group_show_history')

    with self.command_group('alertsmanagement', is_experimental=True):
        pass
