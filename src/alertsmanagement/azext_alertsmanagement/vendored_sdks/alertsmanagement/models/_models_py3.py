# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._alerts_management_client_enums import *


class Action(msrest.serialization.Model):
    """Action to be applied.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AddActionGroups, RemoveAllActionGroups.

    All required parameters must be populated in order to send to Azure.

    :param action_type: Required. Action that should be applied.Constant filled by server.
     Possible values include: "AddActionGroups", "RemoveAllActionGroups".
    :type action_type: str or ~azure.mgmt.alertsmanagement.models.ActionType
    """

    _validation = {
        'action_type': {'required': True},
    }

    _attribute_map = {
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    _subtype_map = {
        'action_type': {'AddActionGroups': 'AddActionGroups', 'RemoveAllActionGroups': 'RemoveAllActionGroups'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Action, self).__init__(**kwargs)
        self.action_type = None  # type: Optional[str]


class AddActionGroups(Action):
    """Add action groups to alert processing rule.

    All required parameters must be populated in order to send to Azure.

    :param action_type: Required. Action that should be applied.Constant filled by server.
     Possible values include: "AddActionGroups", "RemoveAllActionGroups".
    :type action_type: str or ~azure.mgmt.alertsmanagement.models.ActionType
    :param action_group_ids: Required. List of action group Ids to add to alert processing rule.
    :type action_group_ids: list[str]
    """

    _validation = {
        'action_type': {'required': True},
        'action_group_ids': {'required': True},
    }

    _attribute_map = {
        'action_type': {'key': 'actionType', 'type': 'str'},
        'action_group_ids': {'key': 'actionGroupIds', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        action_group_ids: List[str],
        **kwargs
    ):
        super(AddActionGroups, self).__init__(**kwargs)
        self.action_type = 'AddActionGroups'  # type: str
        self.action_group_ids = action_group_ids


class Resource(msrest.serialization.Model):
    """An azure resource object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.type = None
        self.name = None


class Alert(Resource):
    """An alert created in alert management service.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param properties: Alert property bag.
    :type properties: ~azure.mgmt.alertsmanagement.models.AlertProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AlertProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["AlertProperties"] = None,
        **kwargs
    ):
        super(Alert, self).__init__(**kwargs)
        self.properties = properties


class AlertModification(Resource):
    """Alert Modification details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param properties: Properties of the alert modification item.
    :type properties: ~azure.mgmt.alertsmanagement.models.AlertModificationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AlertModificationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["AlertModificationProperties"] = None,
        **kwargs
    ):
        super(AlertModification, self).__init__(**kwargs)
        self.properties = properties


class AlertModificationItem(msrest.serialization.Model):
    """Alert modification item.

    :param modification_event: Reason for the modification. Possible values include:
     "AlertCreated", "StateChange", "MonitorConditionChange", "SeverityChange",
     "ActionRuleTriggered", "ActionRuleSuppressed", "ActionsTriggered", "ActionsSuppressed",
     "ActionsFailed".
    :type modification_event: str or ~azure.mgmt.alertsmanagement.models.AlertModificationEvent
    :param old_value: Old value.
    :type old_value: str
    :param new_value: New value.
    :type new_value: str
    :param modified_at: Modified date and time.
    :type modified_at: str
    :param modified_by: Modified user details (Principal client name).
    :type modified_by: str
    :param comments: Modification comments.
    :type comments: str
    :param description: Description of the modification.
    :type description: str
    """

    _attribute_map = {
        'modification_event': {'key': 'modificationEvent', 'type': 'str'},
        'old_value': {'key': 'oldValue', 'type': 'str'},
        'new_value': {'key': 'newValue', 'type': 'str'},
        'modified_at': {'key': 'modifiedAt', 'type': 'str'},
        'modified_by': {'key': 'modifiedBy', 'type': 'str'},
        'comments': {'key': 'comments', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        modification_event: Optional[Union[str, "AlertModificationEvent"]] = None,
        old_value: Optional[str] = None,
        new_value: Optional[str] = None,
        modified_at: Optional[str] = None,
        modified_by: Optional[str] = None,
        comments: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(AlertModificationItem, self).__init__(**kwargs)
        self.modification_event = modification_event
        self.old_value = old_value
        self.new_value = new_value
        self.modified_at = modified_at
        self.modified_by = modified_by
        self.comments = comments
        self.description = description


class AlertModificationProperties(msrest.serialization.Model):
    """Properties of the alert modification item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar alert_id: Unique Id of the alert for which the history is being retrieved.
    :vartype alert_id: str
    :param modifications: Modification details.
    :type modifications: list[~azure.mgmt.alertsmanagement.models.AlertModificationItem]
    """

    _validation = {
        'alert_id': {'readonly': True},
    }

    _attribute_map = {
        'alert_id': {'key': 'alertId', 'type': 'str'},
        'modifications': {'key': 'modifications', 'type': '[AlertModificationItem]'},
    }

    def __init__(
        self,
        *,
        modifications: Optional[List["AlertModificationItem"]] = None,
        **kwargs
    ):
        super(AlertModificationProperties, self).__init__(**kwargs)
        self.alert_id = None
        self.modifications = modifications


class ManagedResource(Resource):
    """An azure managed resource object.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(ManagedResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags


class AlertProcessingRule(ManagedResource):
    """Alert processing rule object containing target scopes, conditions and scheduling logic.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param location: Required. Resource location.
    :type location: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param properties: Alert processing rule properties.
    :type properties: ~azure.mgmt.alertsmanagement.models.AlertProcessingRuleProperties
    :ivar system_data: Alert processing rule system data.
    :vartype system_data: ~azure.mgmt.alertsmanagement.models.SystemData
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'AlertProcessingRuleProperties'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        properties: Optional["AlertProcessingRuleProperties"] = None,
        **kwargs
    ):
        super(AlertProcessingRule, self).__init__(location=location, tags=tags, **kwargs)
        self.properties = properties
        self.system_data = None


class AlertProcessingRuleProperties(msrest.serialization.Model):
    """Alert processing rule properties defining scopes, conditions and scheduling logic for alert processing rule.

    All required parameters must be populated in order to send to Azure.

    :param scopes: Required. Scopes on which alert processing rule will apply.
    :type scopes: list[str]
    :param conditions: Conditions on which alerts will be filtered.
    :type conditions: list[~azure.mgmt.alertsmanagement.models.Condition]
    :param schedule: Scheduling for alert processing rule.
    :type schedule: ~azure.mgmt.alertsmanagement.models.Schedule
    :param actions: Required. Actions to be applied.
    :type actions: list[~azure.mgmt.alertsmanagement.models.Action]
    :param description: Description of alert processing rule.
    :type description: str
    :param enabled: Indicates if the given alert processing rule is enabled or disabled.
    :type enabled: bool
    """

    _validation = {
        'scopes': {'required': True},
        'actions': {'required': True},
    }

    _attribute_map = {
        'scopes': {'key': 'scopes', 'type': '[str]'},
        'conditions': {'key': 'conditions', 'type': '[Condition]'},
        'schedule': {'key': 'schedule', 'type': 'Schedule'},
        'actions': {'key': 'actions', 'type': '[Action]'},
        'description': {'key': 'description', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        scopes: List[str],
        actions: List["Action"],
        conditions: Optional[List["Condition"]] = None,
        schedule: Optional["Schedule"] = None,
        description: Optional[str] = None,
        enabled: Optional[bool] = True,
        **kwargs
    ):
        super(AlertProcessingRuleProperties, self).__init__(**kwargs)
        self.scopes = scopes
        self.conditions = conditions
        self.schedule = schedule
        self.actions = actions
        self.description = description
        self.enabled = enabled


class AlertProcessingRulesList(msrest.serialization.Model):
    """List of alert processing rules.

    :param next_link: URL to fetch the next set of alert processing rules.
    :type next_link: str
    :param value: List of alert processing rules.
    :type value: list[~azure.mgmt.alertsmanagement.models.AlertProcessingRule]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[AlertProcessingRule]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["AlertProcessingRule"]] = None,
        **kwargs
    ):
        super(AlertProcessingRulesList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class AlertProperties(msrest.serialization.Model):
    """Alert property bag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param essentials: This object contains consistent fields across different monitor services.
    :type essentials: ~azure.mgmt.alertsmanagement.models.Essentials
    :ivar context: Any object.
    :vartype context: object
    :ivar egress_config: Any object.
    :vartype egress_config: object
    """

    _validation = {
        'context': {'readonly': True},
        'egress_config': {'readonly': True},
    }

    _attribute_map = {
        'essentials': {'key': 'essentials', 'type': 'Essentials'},
        'context': {'key': 'context', 'type': 'object'},
        'egress_config': {'key': 'egressConfig', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        essentials: Optional["Essentials"] = None,
        **kwargs
    ):
        super(AlertProperties, self).__init__(**kwargs)
        self.essentials = essentials
        self.context = None
        self.egress_config = None


class AlertsList(msrest.serialization.Model):
    """List the alerts.

    :param next_link: URL to fetch the next set of alerts.
    :type next_link: str
    :param value: List of alerts.
    :type value: list[~azure.mgmt.alertsmanagement.models.Alert]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Alert]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["Alert"]] = None,
        **kwargs
    ):
        super(AlertsList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class AlertsMetaData(msrest.serialization.Model):
    """alert meta data information.

    :param properties: alert meta data property bag.
    :type properties: ~azure.mgmt.alertsmanagement.models.AlertsMetaDataProperties
    """

    _attribute_map = {
        'properties': {'key': 'properties', 'type': 'AlertsMetaDataProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["AlertsMetaDataProperties"] = None,
        **kwargs
    ):
        super(AlertsMetaData, self).__init__(**kwargs)
        self.properties = properties


class AlertsMetaDataProperties(msrest.serialization.Model):
    """alert meta data property bag.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: MonitorServiceList.

    All required parameters must be populated in order to send to Azure.

    :param metadata_identifier: Required. Identification of the information to be retrieved by API
     call.Constant filled by server.  Possible values include: "MonitorServiceList".
    :type metadata_identifier: str or ~azure.mgmt.alertsmanagement.models.MetadataIdentifier
    """

    _validation = {
        'metadata_identifier': {'required': True},
    }

    _attribute_map = {
        'metadata_identifier': {'key': 'metadataIdentifier', 'type': 'str'},
    }

    _subtype_map = {
        'metadata_identifier': {'MonitorServiceList': 'MonitorServiceList'}
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AlertsMetaDataProperties, self).__init__(**kwargs)
        self.metadata_identifier = None  # type: Optional[str]


class AlertsSummary(Resource):
    """Summary of alerts based on the input filters and 'groupby' parameters.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param properties: Group the result set.
    :type properties: ~azure.mgmt.alertsmanagement.models.AlertsSummaryGroup
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AlertsSummaryGroup'},
    }

    def __init__(
        self,
        *,
        properties: Optional["AlertsSummaryGroup"] = None,
        **kwargs
    ):
        super(AlertsSummary, self).__init__(**kwargs)
        self.properties = properties


class AlertsSummaryGroup(msrest.serialization.Model):
    """Group the result set.

    :param total: Total count of the result set.
    :type total: long
    :param smart_groups_count: Total count of the smart groups.
    :type smart_groups_count: long
    :param groupedby: Name of the field aggregated.
    :type groupedby: str
    :param values: List of the items.
    :type values: list[~azure.mgmt.alertsmanagement.models.AlertsSummaryGroupItem]
    """

    _attribute_map = {
        'total': {'key': 'total', 'type': 'long'},
        'smart_groups_count': {'key': 'smartGroupsCount', 'type': 'long'},
        'groupedby': {'key': 'groupedby', 'type': 'str'},
        'values': {'key': 'values', 'type': '[AlertsSummaryGroupItem]'},
    }

    def __init__(
        self,
        *,
        total: Optional[int] = None,
        smart_groups_count: Optional[int] = None,
        groupedby: Optional[str] = None,
        values: Optional[List["AlertsSummaryGroupItem"]] = None,
        **kwargs
    ):
        super(AlertsSummaryGroup, self).__init__(**kwargs)
        self.total = total
        self.smart_groups_count = smart_groups_count
        self.groupedby = groupedby
        self.values = values


class AlertsSummaryGroupItem(msrest.serialization.Model):
    """Alerts summary group item.

    :param name: Value of the aggregated field.
    :type name: str
    :param count: Count of the aggregated field.
    :type count: long
    :param groupedby: Name of the field aggregated.
    :type groupedby: str
    :param values: List of the items.
    :type values: list[~azure.mgmt.alertsmanagement.models.AlertsSummaryGroupItem]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
        'groupedby': {'key': 'groupedby', 'type': 'str'},
        'values': {'key': 'values', 'type': '[AlertsSummaryGroupItem]'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        count: Optional[int] = None,
        groupedby: Optional[str] = None,
        values: Optional[List["AlertsSummaryGroupItem"]] = None,
        **kwargs
    ):
        super(AlertsSummaryGroupItem, self).__init__(**kwargs)
        self.name = name
        self.count = count
        self.groupedby = groupedby
        self.values = values


class Condition(msrest.serialization.Model):
    """Condition to trigger an alert processing rule.

    :param field: Field for a given condition. Possible values include: "Severity",
     "MonitorService", "MonitorCondition", "SignalType", "TargetResourceType", "TargetResource",
     "TargetResourceGroup", "AlertRuleId", "AlertRuleName", "Description", "AlertContext".
    :type field: str or ~azure.mgmt.alertsmanagement.models.Field
    :param operator: Operator for a given condition. Possible values include: "Equals",
     "NotEquals", "Contains", "DoesNotContain".
    :type operator: str or ~azure.mgmt.alertsmanagement.models.Operator
    :param values: List of values to match for a given condition.
    :type values: list[str]
    """

    _attribute_map = {
        'field': {'key': 'field', 'type': 'str'},
        'operator': {'key': 'operator', 'type': 'str'},
        'values': {'key': 'values', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        field: Optional[Union[str, "Field"]] = None,
        operator: Optional[Union[str, "Operator"]] = None,
        values: Optional[List[str]] = None,
        **kwargs
    ):
        super(Condition, self).__init__(**kwargs)
        self.field = field
        self.operator = operator
        self.values = values


class Recurrence(msrest.serialization.Model):
    """Recurrence object.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: DailyRecurrence, MonthlyRecurrence, WeeklyRecurrence.

    All required parameters must be populated in order to send to Azure.

    :param recurrence_type: Required. Specifies when the recurrence should be applied.Constant
     filled by server.  Possible values include: "Daily", "Weekly", "Monthly".
    :type recurrence_type: str or ~azure.mgmt.alertsmanagement.models.RecurrenceType
    :param start_time: Start time for recurrence.
    :type start_time: str
    :param end_time: End time for recurrence.
    :type end_time: str
    """

    _validation = {
        'recurrence_type': {'required': True},
    }

    _attribute_map = {
        'recurrence_type': {'key': 'recurrenceType', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
    }

    _subtype_map = {
        'recurrence_type': {'Daily': 'DailyRecurrence', 'Monthly': 'MonthlyRecurrence', 'Weekly': 'WeeklyRecurrence'}
    }

    def __init__(
        self,
        *,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs
    ):
        super(Recurrence, self).__init__(**kwargs)
        self.recurrence_type = None  # type: Optional[str]
        self.start_time = start_time
        self.end_time = end_time


class DailyRecurrence(Recurrence):
    """Daily recurrence object.

    All required parameters must be populated in order to send to Azure.

    :param recurrence_type: Required. Specifies when the recurrence should be applied.Constant
     filled by server.  Possible values include: "Daily", "Weekly", "Monthly".
    :type recurrence_type: str or ~azure.mgmt.alertsmanagement.models.RecurrenceType
    :param start_time: Start time for recurrence.
    :type start_time: str
    :param end_time: End time for recurrence.
    :type end_time: str
    """

    _validation = {
        'recurrence_type': {'required': True},
    }

    _attribute_map = {
        'recurrence_type': {'key': 'recurrenceType', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs
    ):
        super(DailyRecurrence, self).__init__(start_time=start_time, end_time=end_time, **kwargs)
        self.recurrence_type = 'Daily'  # type: str


class ErrorResponse(msrest.serialization.Model):
    """An error response from the service.

    :param error: Details of error response.
    :type error: ~azure.mgmt.alertsmanagement.models.ErrorResponseBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponseBody'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorResponseBody"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseBody(msrest.serialization.Model):
    """Details of error response.

    :param code: Error code, intended to be consumed programmatically.
    :type code: str
    :param message: Description of the error, intended for display in user interface.
    :type message: str
    :param target: Target of the particular error, for example name of the property.
    :type target: str
    :param details: A list of additional details about the error.
    :type details: list[~azure.mgmt.alertsmanagement.models.ErrorResponseBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponseBody]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        target: Optional[str] = None,
        details: Optional[List["ErrorResponseBody"]] = None,
        **kwargs
    ):
        super(ErrorResponseBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class Essentials(msrest.serialization.Model):
    """This object contains consistent fields across different monitor services.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar severity: Severity of alert Sev0 being highest and Sev4 being lowest. Possible values
     include: "Sev0", "Sev1", "Sev2", "Sev3", "Sev4".
    :vartype severity: str or ~azure.mgmt.alertsmanagement.models.Severity
    :ivar signal_type: The type of signal the alert is based on, which could be metrics, logs or
     activity logs. Possible values include: "Metric", "Log", "Unknown".
    :vartype signal_type: str or ~azure.mgmt.alertsmanagement.models.SignalType
    :ivar alert_state: Alert object state, which can be modified by the user. Possible values
     include: "New", "Acknowledged", "Closed".
    :vartype alert_state: str or ~azure.mgmt.alertsmanagement.models.AlertState
    :ivar monitor_condition: Condition of the rule at the monitor service. It represents whether
     the underlying conditions have crossed the defined alert rule thresholds. Possible values
     include: "Fired", "Resolved".
    :vartype monitor_condition: str or ~azure.mgmt.alertsmanagement.models.MonitorCondition
    :param target_resource: Target ARM resource, on which alert got created.
    :type target_resource: str
    :param target_resource_name: Name of the target ARM resource name, on which alert got created.
    :type target_resource_name: str
    :param target_resource_group: Resource group of target ARM resource, on which alert got
     created.
    :type target_resource_group: str
    :param target_resource_type: Resource type of target ARM resource, on which alert got created.
    :type target_resource_type: str
    :ivar monitor_service: Monitor service on which the rule(monitor) is set. Possible values
     include: "Application Insights", "ActivityLog Administrative", "ActivityLog Security",
     "ActivityLog Recommendation", "ActivityLog Policy", "ActivityLog Autoscale", "Log Analytics",
     "Nagios", "Platform", "SCOM", "ServiceHealth", "SmartDetector", "VM Insights", "Zabbix".
    :vartype monitor_service: str or ~azure.mgmt.alertsmanagement.models.MonitorService
    :ivar alert_rule: Rule(monitor) which fired alert instance. Depending on the monitor service,
     this would be ARM id or name of the rule.
    :vartype alert_rule: str
    :ivar source_created_id: Unique Id created by monitor service for each alert instance. This
     could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.
    :vartype source_created_id: str
    :ivar smart_group_id: Unique Id of the smart group.
    :vartype smart_group_id: str
    :ivar smart_grouping_reason: Verbose reason describing the reason why this alert instance is
     added to a smart group.
    :vartype smart_grouping_reason: str
    :ivar start_date_time: Creation time(ISO-8601 format) of alert instance.
    :vartype start_date_time: ~datetime.datetime
    :ivar last_modified_date_time: Last modification time(ISO-8601 format) of alert instance.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar monitor_condition_resolved_date_time: Resolved time(ISO-8601 format) of alert instance.
     This will be updated when monitor service resolves the alert instance because the rule
     condition is no longer met.
    :vartype monitor_condition_resolved_date_time: ~datetime.datetime
    :ivar last_modified_user_name: User who last modified the alert, in case of monitor service
     updates user would be 'system', otherwise name of the user.
    :vartype last_modified_user_name: str
    """

    _validation = {
        'severity': {'readonly': True},
        'signal_type': {'readonly': True},
        'alert_state': {'readonly': True},
        'monitor_condition': {'readonly': True},
        'monitor_service': {'readonly': True},
        'alert_rule': {'readonly': True},
        'source_created_id': {'readonly': True},
        'smart_group_id': {'readonly': True},
        'smart_grouping_reason': {'readonly': True},
        'start_date_time': {'readonly': True},
        'last_modified_date_time': {'readonly': True},
        'monitor_condition_resolved_date_time': {'readonly': True},
        'last_modified_user_name': {'readonly': True},
    }

    _attribute_map = {
        'severity': {'key': 'severity', 'type': 'str'},
        'signal_type': {'key': 'signalType', 'type': 'str'},
        'alert_state': {'key': 'alertState', 'type': 'str'},
        'monitor_condition': {'key': 'monitorCondition', 'type': 'str'},
        'target_resource': {'key': 'targetResource', 'type': 'str'},
        'target_resource_name': {'key': 'targetResourceName', 'type': 'str'},
        'target_resource_group': {'key': 'targetResourceGroup', 'type': 'str'},
        'target_resource_type': {'key': 'targetResourceType', 'type': 'str'},
        'monitor_service': {'key': 'monitorService', 'type': 'str'},
        'alert_rule': {'key': 'alertRule', 'type': 'str'},
        'source_created_id': {'key': 'sourceCreatedId', 'type': 'str'},
        'smart_group_id': {'key': 'smartGroupId', 'type': 'str'},
        'smart_grouping_reason': {'key': 'smartGroupingReason', 'type': 'str'},
        'start_date_time': {'key': 'startDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'lastModifiedDateTime', 'type': 'iso-8601'},
        'monitor_condition_resolved_date_time': {'key': 'monitorConditionResolvedDateTime', 'type': 'iso-8601'},
        'last_modified_user_name': {'key': 'lastModifiedUserName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        target_resource: Optional[str] = None,
        target_resource_name: Optional[str] = None,
        target_resource_group: Optional[str] = None,
        target_resource_type: Optional[str] = None,
        **kwargs
    ):
        super(Essentials, self).__init__(**kwargs)
        self.severity = None
        self.signal_type = None
        self.alert_state = None
        self.monitor_condition = None
        self.target_resource = target_resource
        self.target_resource_name = target_resource_name
        self.target_resource_group = target_resource_group
        self.target_resource_type = target_resource_type
        self.monitor_service = None
        self.alert_rule = None
        self.source_created_id = None
        self.smart_group_id = None
        self.smart_grouping_reason = None
        self.start_date_time = None
        self.last_modified_date_time = None
        self.monitor_condition_resolved_date_time = None
        self.last_modified_user_name = None


class MonitorServiceDetails(msrest.serialization.Model):
    """Details of a monitor service.

    :param name: Monitor service name.
    :type name: str
    :param display_name: Monitor service display name.
    :type display_name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display_name: Optional[str] = None,
        **kwargs
    ):
        super(MonitorServiceDetails, self).__init__(**kwargs)
        self.name = name
        self.display_name = display_name


class MonitorServiceList(AlertsMetaDataProperties):
    """Monitor service details.

    All required parameters must be populated in order to send to Azure.

    :param metadata_identifier: Required. Identification of the information to be retrieved by API
     call.Constant filled by server.  Possible values include: "MonitorServiceList".
    :type metadata_identifier: str or ~azure.mgmt.alertsmanagement.models.MetadataIdentifier
    :param data: Required. Array of operations.
    :type data: list[~azure.mgmt.alertsmanagement.models.MonitorServiceDetails]
    """

    _validation = {
        'metadata_identifier': {'required': True},
        'data': {'required': True},
    }

    _attribute_map = {
        'metadata_identifier': {'key': 'metadataIdentifier', 'type': 'str'},
        'data': {'key': 'data', 'type': '[MonitorServiceDetails]'},
    }

    def __init__(
        self,
        *,
        data: List["MonitorServiceDetails"],
        **kwargs
    ):
        super(MonitorServiceList, self).__init__(**kwargs)
        self.metadata_identifier = 'MonitorServiceList'  # type: str
        self.data = data


class MonthlyRecurrence(Recurrence):
    """Monthly recurrence object.

    All required parameters must be populated in order to send to Azure.

    :param recurrence_type: Required. Specifies when the recurrence should be applied.Constant
     filled by server.  Possible values include: "Daily", "Weekly", "Monthly".
    :type recurrence_type: str or ~azure.mgmt.alertsmanagement.models.RecurrenceType
    :param start_time: Start time for recurrence.
    :type start_time: str
    :param end_time: End time for recurrence.
    :type end_time: str
    :param days_of_month: Required. Specifies the values for monthly recurrence pattern.
    :type days_of_month: list[int]
    """

    _validation = {
        'recurrence_type': {'required': True},
        'days_of_month': {'required': True},
    }

    _attribute_map = {
        'recurrence_type': {'key': 'recurrenceType', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
        'days_of_month': {'key': 'daysOfMonth', 'type': '[int]'},
    }

    def __init__(
        self,
        *,
        days_of_month: List[int],
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs
    ):
        super(MonthlyRecurrence, self).__init__(start_time=start_time, end_time=end_time, **kwargs)
        self.recurrence_type = 'Monthly'  # type: str
        self.days_of_month = days_of_month


class Operation(msrest.serialization.Model):
    """Operation provided by provider.

    :param name: Name of the operation.
    :type name: str
    :param display: Properties of the operation.
    :type display: ~azure.mgmt.alertsmanagement.models.OperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["OperationDisplay"] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class OperationDisplay(msrest.serialization.Model):
    """Properties of the operation.

    :param provider: Provider name.
    :type provider: str
    :param resource: Resource name.
    :type resource: str
    :param operation: Operation name.
    :type operation: str
    :param description: Description of the operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationsList(msrest.serialization.Model):
    """Lists the operations available in the AlertsManagement RP.

    All required parameters must be populated in order to send to Azure.

    :param next_link: URL to fetch the next set of alerts.
    :type next_link: str
    :param value: Required. Array of operations.
    :type value: list[~azure.mgmt.alertsmanagement.models.Operation]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        *,
        value: List["Operation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OperationsList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class PatchObject(msrest.serialization.Model):
    """Data contract for patch.

    :param tags: A set of tags. Tags to be updated.
    :type tags: dict[str, str]
    :param enabled: Indicates if the given alert processing rule is enabled or disabled.
    :type enabled: bool
    """

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        super(PatchObject, self).__init__(**kwargs)
        self.tags = tags
        self.enabled = enabled


class RemoveAllActionGroups(Action):
    """Indicates if all action groups should be removed.

    All required parameters must be populated in order to send to Azure.

    :param action_type: Required. Action that should be applied.Constant filled by server.
     Possible values include: "AddActionGroups", "RemoveAllActionGroups".
    :type action_type: str or ~azure.mgmt.alertsmanagement.models.ActionType
    """

    _validation = {
        'action_type': {'required': True},
    }

    _attribute_map = {
        'action_type': {'key': 'actionType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RemoveAllActionGroups, self).__init__(**kwargs)
        self.action_type = 'RemoveAllActionGroups'  # type: str


class Schedule(msrest.serialization.Model):
    """Scheduling configuration for a given alert processing rule.

    :param effective_from: Scheduling effective from time. Date-Time in ISO-8601 format without
     timezone suffix.
    :type effective_from: str
    :param effective_until: Scheduling effective until time. Date-Time in ISO-8601 format without
     timezone suffix.
    :type effective_until: str
    :param time_zone: Scheduling time zone.
    :type time_zone: str
    :param recurrences: List of recurrences.
    :type recurrences: list[~azure.mgmt.alertsmanagement.models.Recurrence]
    """

    _validation = {
        'effective_from': {'pattern': r'^(?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))$'},
        'effective_until': {'pattern': r'^(?:(\d{4}-\d{2}-\d{2})T(\d{2}:\d{2}:\d{2}(?:\.\d+)?))$'},
    }

    _attribute_map = {
        'effective_from': {'key': 'effectiveFrom', 'type': 'str'},
        'effective_until': {'key': 'effectiveUntil', 'type': 'str'},
        'time_zone': {'key': 'timeZone', 'type': 'str'},
        'recurrences': {'key': 'recurrences', 'type': '[Recurrence]'},
    }

    def __init__(
        self,
        *,
        effective_from: Optional[str] = None,
        effective_until: Optional[str] = None,
        time_zone: Optional[str] = None,
        recurrences: Optional[List["Recurrence"]] = None,
        **kwargs
    ):
        super(Schedule, self).__init__(**kwargs)
        self.effective_from = effective_from
        self.effective_until = effective_until
        self.time_zone = time_zone
        self.recurrences = recurrences


class SmartGroup(Resource):
    """Set of related alerts grouped together smartly by AMS.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param alerts_count: Total number of alerts in smart group.
    :type alerts_count: long
    :ivar smart_group_state: Smart group state. Possible values include: "New", "Acknowledged",
     "Closed".
    :vartype smart_group_state: str or ~azure.mgmt.alertsmanagement.models.State
    :ivar severity: Severity of smart group is the highest(Sev0 >... > Sev4) severity of all the
     alerts in the group. Possible values include: "Sev0", "Sev1", "Sev2", "Sev3", "Sev4".
    :vartype severity: str or ~azure.mgmt.alertsmanagement.models.Severity
    :ivar start_date_time: Creation time of smart group. Date-Time in ISO-8601 format.
    :vartype start_date_time: ~datetime.datetime
    :ivar last_modified_date_time: Last updated time of smart group. Date-Time in ISO-8601 format.
    :vartype last_modified_date_time: ~datetime.datetime
    :ivar last_modified_user_name: Last modified by user name.
    :vartype last_modified_user_name: str
    :param resources: Summary of target resources in the smart group.
    :type resources: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param resource_types: Summary of target resource types in the smart group.
    :type resource_types: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param resource_groups: Summary of target resource groups in the smart group.
    :type resource_groups: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param monitor_services: Summary of monitorServices in the smart group.
    :type monitor_services: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param monitor_conditions: Summary of monitorConditions in the smart group.
    :type monitor_conditions:
     list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param alert_states: Summary of alertStates in the smart group.
    :type alert_states: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param alert_severities: Summary of alertSeverities in the smart group.
    :type alert_severities: list[~azure.mgmt.alertsmanagement.models.SmartGroupAggregatedProperty]
    :param next_link: The URI to fetch the next page of alerts. Call ListNext() with this URI to
     fetch the next page alerts.
    :type next_link: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
        'smart_group_state': {'readonly': True},
        'severity': {'readonly': True},
        'start_date_time': {'readonly': True},
        'last_modified_date_time': {'readonly': True},
        'last_modified_user_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'alerts_count': {'key': 'properties.alertsCount', 'type': 'long'},
        'smart_group_state': {'key': 'properties.smartGroupState', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'start_date_time': {'key': 'properties.startDateTime', 'type': 'iso-8601'},
        'last_modified_date_time': {'key': 'properties.lastModifiedDateTime', 'type': 'iso-8601'},
        'last_modified_user_name': {'key': 'properties.lastModifiedUserName', 'type': 'str'},
        'resources': {'key': 'properties.resources', 'type': '[SmartGroupAggregatedProperty]'},
        'resource_types': {'key': 'properties.resourceTypes', 'type': '[SmartGroupAggregatedProperty]'},
        'resource_groups': {'key': 'properties.resourceGroups', 'type': '[SmartGroupAggregatedProperty]'},
        'monitor_services': {'key': 'properties.monitorServices', 'type': '[SmartGroupAggregatedProperty]'},
        'monitor_conditions': {'key': 'properties.monitorConditions', 'type': '[SmartGroupAggregatedProperty]'},
        'alert_states': {'key': 'properties.alertStates', 'type': '[SmartGroupAggregatedProperty]'},
        'alert_severities': {'key': 'properties.alertSeverities', 'type': '[SmartGroupAggregatedProperty]'},
        'next_link': {'key': 'properties.nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        alerts_count: Optional[int] = None,
        resources: Optional[List["SmartGroupAggregatedProperty"]] = None,
        resource_types: Optional[List["SmartGroupAggregatedProperty"]] = None,
        resource_groups: Optional[List["SmartGroupAggregatedProperty"]] = None,
        monitor_services: Optional[List["SmartGroupAggregatedProperty"]] = None,
        monitor_conditions: Optional[List["SmartGroupAggregatedProperty"]] = None,
        alert_states: Optional[List["SmartGroupAggregatedProperty"]] = None,
        alert_severities: Optional[List["SmartGroupAggregatedProperty"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SmartGroup, self).__init__(**kwargs)
        self.alerts_count = alerts_count
        self.smart_group_state = None
        self.severity = None
        self.start_date_time = None
        self.last_modified_date_time = None
        self.last_modified_user_name = None
        self.resources = resources
        self.resource_types = resource_types
        self.resource_groups = resource_groups
        self.monitor_services = monitor_services
        self.monitor_conditions = monitor_conditions
        self.alert_states = alert_states
        self.alert_severities = alert_severities
        self.next_link = next_link


class SmartGroupAggregatedProperty(msrest.serialization.Model):
    """Aggregated property of each type.

    :param name: Name of the type.
    :type name: str
    :param count: Total number of items of type.
    :type count: long
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'count': {'key': 'count', 'type': 'long'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        count: Optional[int] = None,
        **kwargs
    ):
        super(SmartGroupAggregatedProperty, self).__init__(**kwargs)
        self.name = name
        self.count = count


class SmartGroupModification(Resource):
    """Alert Modification details.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar type: Azure resource type.
    :vartype type: str
    :ivar name: Azure resource name.
    :vartype name: str
    :param properties: Properties of the smartGroup modification item.
    :type properties: ~azure.mgmt.alertsmanagement.models.SmartGroupModificationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SmartGroupModificationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["SmartGroupModificationProperties"] = None,
        **kwargs
    ):
        super(SmartGroupModification, self).__init__(**kwargs)
        self.properties = properties


class SmartGroupModificationItem(msrest.serialization.Model):
    """smartGroup modification item.

    :param modification_event: Reason for the modification. Possible values include:
     "SmartGroupCreated", "StateChange", "AlertAdded", "AlertRemoved".
    :type modification_event: str or
     ~azure.mgmt.alertsmanagement.models.SmartGroupModificationEvent
    :param old_value: Old value.
    :type old_value: str
    :param new_value: New value.
    :type new_value: str
    :param modified_at: Modified date and time.
    :type modified_at: str
    :param modified_by: Modified user details (Principal client name).
    :type modified_by: str
    :param comments: Modification comments.
    :type comments: str
    :param description: Description of the modification.
    :type description: str
    """

    _attribute_map = {
        'modification_event': {'key': 'modificationEvent', 'type': 'str'},
        'old_value': {'key': 'oldValue', 'type': 'str'},
        'new_value': {'key': 'newValue', 'type': 'str'},
        'modified_at': {'key': 'modifiedAt', 'type': 'str'},
        'modified_by': {'key': 'modifiedBy', 'type': 'str'},
        'comments': {'key': 'comments', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        modification_event: Optional[Union[str, "SmartGroupModificationEvent"]] = None,
        old_value: Optional[str] = None,
        new_value: Optional[str] = None,
        modified_at: Optional[str] = None,
        modified_by: Optional[str] = None,
        comments: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(SmartGroupModificationItem, self).__init__(**kwargs)
        self.modification_event = modification_event
        self.old_value = old_value
        self.new_value = new_value
        self.modified_at = modified_at
        self.modified_by = modified_by
        self.comments = comments
        self.description = description


class SmartGroupModificationProperties(msrest.serialization.Model):
    """Properties of the smartGroup modification item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar smart_group_id: Unique Id of the smartGroup for which the history is being retrieved.
    :vartype smart_group_id: str
    :param modifications: Modification details.
    :type modifications: list[~azure.mgmt.alertsmanagement.models.SmartGroupModificationItem]
    :param next_link: URL to fetch the next set of results.
    :type next_link: str
    """

    _validation = {
        'smart_group_id': {'readonly': True},
    }

    _attribute_map = {
        'smart_group_id': {'key': 'smartGroupId', 'type': 'str'},
        'modifications': {'key': 'modifications', 'type': '[SmartGroupModificationItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        modifications: Optional[List["SmartGroupModificationItem"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SmartGroupModificationProperties, self).__init__(**kwargs)
        self.smart_group_id = None
        self.modifications = modifications
        self.next_link = next_link


class SmartGroupsList(msrest.serialization.Model):
    """List the alerts.

    :param next_link: URL to fetch the next set of alerts.
    :type next_link: str
    :param value: List of alerts.
    :type value: list[~azure.mgmt.alertsmanagement.models.SmartGroup]
    """

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[SmartGroup]'},
    }

    def __init__(
        self,
        *,
        next_link: Optional[str] = None,
        value: Optional[List["SmartGroup"]] = None,
        **kwargs
    ):
        super(SmartGroupsList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.alertsmanagement.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.alertsmanagement.models.CreatedByType
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class WeeklyRecurrence(Recurrence):
    """Weekly recurrence object.

    All required parameters must be populated in order to send to Azure.

    :param recurrence_type: Required. Specifies when the recurrence should be applied.Constant
     filled by server.  Possible values include: "Daily", "Weekly", "Monthly".
    :type recurrence_type: str or ~azure.mgmt.alertsmanagement.models.RecurrenceType
    :param start_time: Start time for recurrence.
    :type start_time: str
    :param end_time: End time for recurrence.
    :type end_time: str
    :param days_of_week: Required. Specifies the values for weekly recurrence pattern.
    :type days_of_week: list[str or ~azure.mgmt.alertsmanagement.models.DaysOfWeek]
    """

    _validation = {
        'recurrence_type': {'required': True},
        'days_of_week': {'required': True},
    }

    _attribute_map = {
        'recurrence_type': {'key': 'recurrenceType', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
        'days_of_week': {'key': 'daysOfWeek', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        days_of_week: List[Union[str, "DaysOfWeek"]],
        start_time: Optional[str] = None,
        end_time: Optional[str] = None,
        **kwargs
    ):
        super(WeeklyRecurrence, self).__init__(start_time=start_time, end_time=end_time, **kwargs)
        self.recurrence_type = 'Weekly'  # type: str
        self.days_of_week = days_of_week
