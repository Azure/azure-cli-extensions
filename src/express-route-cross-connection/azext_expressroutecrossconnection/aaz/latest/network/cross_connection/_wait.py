# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network cross-connection wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/expressroutecrossconnections/{}", "2018-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Express route cross-connection name.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ExpressRouteCrossConnectionsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ExpressRouteCrossConnectionsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "crossConnectionName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.id = AAZStrType()
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.bandwidth_in_mbps = AAZIntType(
                serialized_name="bandwidthInMbps",
            )
            properties.express_route_circuit = AAZObjectType(
                serialized_name="expressRouteCircuit",
            )
            properties.peering_location = AAZStrType(
                serialized_name="peeringLocation",
            )
            properties.peerings = AAZListType()
            properties.primary_azure_port = AAZStrType(
                serialized_name="primaryAzurePort",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.s_tag = AAZIntType(
                serialized_name="sTag",
                flags={"read_only": True},
            )
            properties.secondary_azure_port = AAZStrType(
                serialized_name="secondaryAzurePort",
                flags={"read_only": True},
            )
            properties.service_provider_notes = AAZStrType(
                serialized_name="serviceProviderNotes",
            )
            properties.service_provider_provisioning_state = AAZStrType(
                serialized_name="serviceProviderProvisioningState",
            )

            express_route_circuit = cls._schema_on_200.properties.express_route_circuit
            express_route_circuit.id = AAZStrType()

            peerings = cls._schema_on_200.properties.peerings
            peerings.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.peerings.Element
            _element.etag = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZStrType()
            _element.name = AAZStrType()
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.properties.peerings.Element.properties
            properties.azure_asn = AAZIntType(
                serialized_name="azureASN",
                flags={"read_only": True},
            )
            properties.gateway_manager_etag = AAZStrType(
                serialized_name="gatewayManagerEtag",
            )
            properties.ipv6_peering_config = AAZObjectType(
                serialized_name="ipv6PeeringConfig",
            )
            _WaitHelper._build_schema_ipv6_express_route_circuit_peering_config_read(properties.ipv6_peering_config)
            properties.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            properties.microsoft_peering_config = AAZObjectType(
                serialized_name="microsoftPeeringConfig",
            )
            _WaitHelper._build_schema_express_route_circuit_peering_config_read(properties.microsoft_peering_config)
            properties.peer_asn = AAZIntType(
                serialized_name="peerASN",
            )
            properties.peering_type = AAZStrType(
                serialized_name="peeringType",
            )
            properties.primary_azure_port = AAZStrType(
                serialized_name="primaryAzurePort",
                flags={"read_only": True},
            )
            properties.primary_peer_address_prefix = AAZStrType(
                serialized_name="primaryPeerAddressPrefix",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.secondary_azure_port = AAZStrType(
                serialized_name="secondaryAzurePort",
                flags={"read_only": True},
            )
            properties.secondary_peer_address_prefix = AAZStrType(
                serialized_name="secondaryPeerAddressPrefix",
            )
            properties.shared_key = AAZStrType(
                serialized_name="sharedKey",
            )
            properties.state = AAZStrType()
            properties.vlan_id = AAZIntType(
                serialized_name="vlanId",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_express_route_circuit_peering_config_read = None

    @classmethod
    def _build_schema_express_route_circuit_peering_config_read(cls, _schema):
        if cls._schema_express_route_circuit_peering_config_read is not None:
            _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
            _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
            _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
            _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
            _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
            _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name
            return

        cls._schema_express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read = AAZObjectType()

        express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read
        express_route_circuit_peering_config_read.advertised_communities = AAZListType(
            serialized_name="advertisedCommunities",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes = AAZListType(
            serialized_name="advertisedPublicPrefixes",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes_state = AAZStrType(
            serialized_name="advertisedPublicPrefixesState",
        )
        express_route_circuit_peering_config_read.customer_asn = AAZIntType(
            serialized_name="customerASN",
        )
        express_route_circuit_peering_config_read.legacy_mode = AAZIntType(
            serialized_name="legacyMode",
        )
        express_route_circuit_peering_config_read.routing_registry_name = AAZStrType(
            serialized_name="routingRegistryName",
        )

        advertised_communities = _schema_express_route_circuit_peering_config_read.advertised_communities
        advertised_communities.Element = AAZStrType()

        advertised_public_prefixes = _schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrType()

        _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
        _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
        _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
        _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
        _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name

    _schema_ipv6_express_route_circuit_peering_config_read = None

    @classmethod
    def _build_schema_ipv6_express_route_circuit_peering_config_read(cls, _schema):
        if cls._schema_ipv6_express_route_circuit_peering_config_read is not None:
            _schema.microsoft_peering_config = cls._schema_ipv6_express_route_circuit_peering_config_read.microsoft_peering_config
            _schema.primary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix
            _schema.route_filter = cls._schema_ipv6_express_route_circuit_peering_config_read.route_filter
            _schema.secondary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix
            _schema.state = cls._schema_ipv6_express_route_circuit_peering_config_read.state
            return

        cls._schema_ipv6_express_route_circuit_peering_config_read = _schema_ipv6_express_route_circuit_peering_config_read = AAZObjectType()

        ipv6_express_route_circuit_peering_config_read = _schema_ipv6_express_route_circuit_peering_config_read
        ipv6_express_route_circuit_peering_config_read.microsoft_peering_config = AAZObjectType(
            serialized_name="microsoftPeeringConfig",
        )
        cls._build_schema_express_route_circuit_peering_config_read(ipv6_express_route_circuit_peering_config_read.microsoft_peering_config)
        ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix = AAZStrType(
            serialized_name="primaryPeerAddressPrefix",
        )
        ipv6_express_route_circuit_peering_config_read.route_filter = AAZObjectType(
            serialized_name="routeFilter",
        )
        cls._build_schema_route_filter_read(ipv6_express_route_circuit_peering_config_read.route_filter)
        ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix = AAZStrType(
            serialized_name="secondaryPeerAddressPrefix",
        )
        ipv6_express_route_circuit_peering_config_read.state = AAZStrType()

        _schema.microsoft_peering_config = cls._schema_ipv6_express_route_circuit_peering_config_read.microsoft_peering_config
        _schema.primary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix
        _schema.route_filter = cls._schema_ipv6_express_route_circuit_peering_config_read.route_filter
        _schema.secondary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix
        _schema.state = cls._schema_ipv6_express_route_circuit_peering_config_read.state

    _schema_route_filter_read = None

    @classmethod
    def _build_schema_route_filter_read(cls, _schema):
        if cls._schema_route_filter_read is not None:
            _schema.etag = cls._schema_route_filter_read.etag
            _schema.id = cls._schema_route_filter_read.id
            _schema.location = cls._schema_route_filter_read.location
            _schema.name = cls._schema_route_filter_read.name
            _schema.properties = cls._schema_route_filter_read.properties
            _schema.tags = cls._schema_route_filter_read.tags
            _schema.type = cls._schema_route_filter_read.type
            return

        cls._schema_route_filter_read = _schema_route_filter_read = AAZObjectType()

        route_filter_read = _schema_route_filter_read
        route_filter_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        route_filter_read.id = AAZStrType()
        route_filter_read.location = AAZStrType(
            flags={"required": True},
        )
        route_filter_read.name = AAZStrType(
            flags={"read_only": True},
        )
        route_filter_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        route_filter_read.tags = AAZDictType()
        route_filter_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_route_filter_read.properties
        properties.peerings = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rules = AAZListType()

        peerings = _schema_route_filter_read.properties.peerings
        peerings.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.peerings.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.peerings.Element.properties
        properties.azure_asn = AAZIntType(
            serialized_name="azureASN",
        )
        properties.connections = AAZListType()
        properties.gateway_manager_etag = AAZStrType(
            serialized_name="gatewayManagerEtag",
        )
        properties.ipv6_peering_config = AAZObjectType(
            serialized_name="ipv6PeeringConfig",
        )
        cls._build_schema_ipv6_express_route_circuit_peering_config_read(properties.ipv6_peering_config)
        properties.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        properties.microsoft_peering_config = AAZObjectType(
            serialized_name="microsoftPeeringConfig",
        )
        cls._build_schema_express_route_circuit_peering_config_read(properties.microsoft_peering_config)
        properties.peer_asn = AAZIntType(
            serialized_name="peerASN",
        )
        properties.peering_type = AAZStrType(
            serialized_name="peeringType",
        )
        properties.primary_azure_port = AAZStrType(
            serialized_name="primaryAzurePort",
        )
        properties.primary_peer_address_prefix = AAZStrType(
            serialized_name="primaryPeerAddressPrefix",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )
        properties.route_filter = AAZObjectType(
            serialized_name="routeFilter",
        )
        cls._build_schema_route_filter_read(properties.route_filter)
        properties.secondary_azure_port = AAZStrType(
            serialized_name="secondaryAzurePort",
        )
        properties.secondary_peer_address_prefix = AAZStrType(
            serialized_name="secondaryPeerAddressPrefix",
        )
        properties.shared_key = AAZStrType(
            serialized_name="sharedKey",
        )
        properties.state = AAZStrType()
        properties.stats = AAZObjectType()
        properties.vlan_id = AAZIntType(
            serialized_name="vlanId",
        )

        connections = _schema_route_filter_read.properties.peerings.Element.properties.connections
        connections.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.peerings.Element.properties.connections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.peerings.Element.properties.connections.Element.properties
        properties.address_prefix = AAZStrType(
            serialized_name="addressPrefix",
        )
        properties.authorization_key = AAZStrType(
            serialized_name="authorizationKey",
        )
        properties.circuit_connection_status = AAZStrType(
            serialized_name="circuitConnectionStatus",
            flags={"read_only": True},
        )
        properties.express_route_circuit_peering = AAZObjectType(
            serialized_name="expressRouteCircuitPeering",
        )
        cls._build_schema_sub_resource_read(properties.express_route_circuit_peering)
        properties.peer_express_route_circuit_peering = AAZObjectType(
            serialized_name="peerExpressRouteCircuitPeering",
        )
        cls._build_schema_sub_resource_read(properties.peer_express_route_circuit_peering)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        stats = _schema_route_filter_read.properties.peerings.Element.properties.stats
        stats.primarybytes_in = AAZIntType(
            serialized_name="primarybytesIn",
        )
        stats.primarybytes_out = AAZIntType(
            serialized_name="primarybytesOut",
        )
        stats.secondarybytes_in = AAZIntType(
            serialized_name="secondarybytesIn",
        )
        stats.secondarybytes_out = AAZIntType(
            serialized_name="secondarybytesOut",
        )

        rules = _schema_route_filter_read.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.location = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.rules.Element.properties
        properties.access = AAZStrType(
            flags={"required": True},
        )
        properties.communities = AAZListType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.route_filter_rule_type = AAZStrType(
            serialized_name="routeFilterRuleType",
            flags={"required": True},
        )

        communities = _schema_route_filter_read.properties.rules.Element.properties.communities
        communities.Element = AAZStrType()

        tags = _schema_route_filter_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_route_filter_read.etag
        _schema.id = cls._schema_route_filter_read.id
        _schema.location = cls._schema_route_filter_read.location
        _schema.name = cls._schema_route_filter_read.name
        _schema.properties = cls._schema_route_filter_read.properties
        _schema.tags = cls._schema_route_filter_read.tags
        _schema.type = cls._schema_route_filter_read.type

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Wait"]
