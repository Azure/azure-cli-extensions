# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network cross-connection peering update",
)
class Update(AAZCommand):
    """Update peering settings for an express route cross connection.
    """

    _aaz_info = {
        "version": "2018-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/expressroutecrossconnections/{}/peerings/{}", "2018-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cross_connection_name = AAZStrArg(
            options=["--cross-connection-name"],
            help="Express route cross-connection name.",
            required=True,
            id_part="name",
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the peering.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.peer_asn = AAZIntArg(
            options=["--peer-asn"],
            help="Autonomous system number of the customer/connectivity provider.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        _args_schema.peering_type = AAZStrArg(
            options=["--peering-type"],
            help="BGP peering type for the circuit.",
            nullable=True,
            enum={"AzurePrivatePeering": "AzurePrivatePeering", "AzurePublicPeering": "AzurePublicPeering", "MicrosoftPeering": "MicrosoftPeering"},
        )
        _args_schema.shared_key = AAZStrArg(
            options=["--shared-key"],
            help="Key for generating an MD5 for the BGP session.",
            nullable=True,
        )
        _args_schema.vlan_id = AAZIntArg(
            options=["--vlan-id"],
            help="Identifier used to identify the customer.",
            nullable=True,
        )

        # define Arg Group "PeeringParameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.ipv6_peering_config = AAZObjectArg(
            options=["--ipv6-peering-config"],
            arg_group="Properties",
            help="The IPv6 peering configuration.",
            nullable=True,
        )
        _args_schema.microsoft_peering_config = AAZObjectArg(
            options=["--microsoft-peering-config"],
            arg_group="Properties",
            help="The Microsoft peering configuration.",
            nullable=True,
        )
        _args_schema.primary_peer_address_prefix = AAZStrArg(
            options=["--primary-peer-address-prefix"],
            arg_group="Properties",
            help="The primary address prefix.",
            nullable=True,
        )
        _args_schema.secondary_peer_address_prefix = AAZStrArg(
            options=["--secondary-peer-address-prefix"],
            arg_group="Properties",
            help="The secondary address prefix.",
            nullable=True,
        )

        ipv6_peering_config = cls._args_schema.ipv6_peering_config
        ipv6_peering_config.microsoft_peering_config = AAZObjectArg(
            options=["microsoft-peering-config"],
            help="The Microsoft peering configuration.",
            nullable=True,
        )
        ipv6_peering_config.primary_peer_address_prefix = AAZStrArg(
            options=["primary-peer-address-prefix"],
            help="The primary address prefix.",
            nullable=True,
        )
        ipv6_peering_config.secondary_peer_address_prefix = AAZStrArg(
            options=["secondary-peer-address-prefix"],
            help="The secondary address prefix.",
            nullable=True,
        )

        microsoft_peering_config = cls._args_schema.ipv6_peering_config.microsoft_peering_config
        microsoft_peering_config.advertised_public_prefixes = AAZListArg(
            options=["advertised-public-prefixes"],
            help="The reference of AdvertisedPublicPrefixes.",
            nullable=True,
        )
        microsoft_peering_config.customer_asn = AAZIntArg(
            options=["customer-asn"],
            help="The CustomerASN of the peering.",
            nullable=True,
        )
        microsoft_peering_config.routing_registry_name = AAZStrArg(
            options=["routing-registry-name"],
            help="The RoutingRegistryName of the configuration.",
            nullable=True,
        )

        advertised_public_prefixes = cls._args_schema.ipv6_peering_config.microsoft_peering_config.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        microsoft_peering_config = cls._args_schema.microsoft_peering_config
        microsoft_peering_config.advertised_public_prefixes = AAZListArg(
            options=["advertised-public-prefixes"],
            help="The reference of AdvertisedPublicPrefixes.",
            nullable=True,
        )
        microsoft_peering_config.customer_asn = AAZIntArg(
            options=["customer-asn"],
            help="The CustomerASN of the peering.",
            nullable=True,
        )
        microsoft_peering_config.routing_registry_name = AAZStrArg(
            options=["routing-registry-name"],
            help="The RoutingRegistryName of the configuration.",
            nullable=True,
        )

        advertised_public_prefixes = cls._args_schema.microsoft_peering_config.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    _args_express_route_circuit_peering_config_update = None

    @classmethod
    def _build_args_express_route_circuit_peering_config_update(cls, _schema):
        if cls._args_express_route_circuit_peering_config_update is not None:
            _schema.advertised_communities = cls._args_express_route_circuit_peering_config_update.advertised_communities
            _schema.advertised_public_prefixes = cls._args_express_route_circuit_peering_config_update.advertised_public_prefixes
            _schema.advertised_public_prefixes_state = cls._args_express_route_circuit_peering_config_update.advertised_public_prefixes_state
            _schema.customer_asn = cls._args_express_route_circuit_peering_config_update.customer_asn
            _schema.legacy_mode = cls._args_express_route_circuit_peering_config_update.legacy_mode
            _schema.routing_registry_name = cls._args_express_route_circuit_peering_config_update.routing_registry_name
            return

        cls._args_express_route_circuit_peering_config_update = AAZObjectArg(
            nullable=True,
        )

        express_route_circuit_peering_config_update = cls._args_express_route_circuit_peering_config_update
        express_route_circuit_peering_config_update.advertised_communities = AAZListArg(
            options=["advertised-communities"],
            nullable=True,
        )
        express_route_circuit_peering_config_update.advertised_public_prefixes = AAZListArg(
            options=["advertised-public-prefixes"],
            nullable=True,
        )
        express_route_circuit_peering_config_update.advertised_public_prefixes_state = AAZStrArg(
            options=["advertised-public-prefixes-state"],
            nullable=True,
            enum={"Configured": "Configured", "Configuring": "Configuring", "NotConfigured": "NotConfigured", "ValidationNeeded": "ValidationNeeded"},
        )
        express_route_circuit_peering_config_update.customer_asn = AAZIntArg(
            options=["customer-asn"],
            nullable=True,
        )
        express_route_circuit_peering_config_update.legacy_mode = AAZIntArg(
            options=["legacy-mode"],
            nullable=True,
        )
        express_route_circuit_peering_config_update.routing_registry_name = AAZStrArg(
            options=["routing-registry-name"],
            nullable=True,
        )

        advertised_communities = cls._args_express_route_circuit_peering_config_update.advertised_communities
        advertised_communities.Element = AAZStrArg(
            nullable=True,
        )

        advertised_public_prefixes = cls._args_express_route_circuit_peering_config_update.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrArg(
            nullable=True,
        )

        _schema.advertised_communities = cls._args_express_route_circuit_peering_config_update.advertised_communities
        _schema.advertised_public_prefixes = cls._args_express_route_circuit_peering_config_update.advertised_public_prefixes
        _schema.advertised_public_prefixes_state = cls._args_express_route_circuit_peering_config_update.advertised_public_prefixes_state
        _schema.customer_asn = cls._args_express_route_circuit_peering_config_update.customer_asn
        _schema.legacy_mode = cls._args_express_route_circuit_peering_config_update.legacy_mode
        _schema.routing_registry_name = cls._args_express_route_circuit_peering_config_update.routing_registry_name

    _args_ipv6_express_route_circuit_peering_config_update = None

    @classmethod
    def _build_args_ipv6_express_route_circuit_peering_config_update(cls, _schema):
        if cls._args_ipv6_express_route_circuit_peering_config_update is not None:
            _schema.microsoft_peering_config = cls._args_ipv6_express_route_circuit_peering_config_update.microsoft_peering_config
            _schema.primary_peer_address_prefix = cls._args_ipv6_express_route_circuit_peering_config_update.primary_peer_address_prefix
            _schema.route_filter = cls._args_ipv6_express_route_circuit_peering_config_update.route_filter
            _schema.secondary_peer_address_prefix = cls._args_ipv6_express_route_circuit_peering_config_update.secondary_peer_address_prefix
            _schema.state = cls._args_ipv6_express_route_circuit_peering_config_update.state
            return

        cls._args_ipv6_express_route_circuit_peering_config_update = AAZObjectArg(
            nullable=True,
        )

        ipv6_express_route_circuit_peering_config_update = cls._args_ipv6_express_route_circuit_peering_config_update
        ipv6_express_route_circuit_peering_config_update.microsoft_peering_config = AAZObjectArg(
            options=["microsoft-peering-config"],
            nullable=True,
        )
        cls._build_args_express_route_circuit_peering_config_update(ipv6_express_route_circuit_peering_config_update.microsoft_peering_config)
        ipv6_express_route_circuit_peering_config_update.primary_peer_address_prefix = AAZStrArg(
            options=["primary-peer-address-prefix"],
            nullable=True,
        )
        ipv6_express_route_circuit_peering_config_update.route_filter = AAZObjectArg(
            options=["route-filter"],
            nullable=True,
        )
        cls._build_args_route_filter_update(ipv6_express_route_circuit_peering_config_update.route_filter)
        ipv6_express_route_circuit_peering_config_update.secondary_peer_address_prefix = AAZStrArg(
            options=["secondary-peer-address-prefix"],
            nullable=True,
        )
        ipv6_express_route_circuit_peering_config_update.state = AAZStrArg(
            options=["state"],
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        _schema.microsoft_peering_config = cls._args_ipv6_express_route_circuit_peering_config_update.microsoft_peering_config
        _schema.primary_peer_address_prefix = cls._args_ipv6_express_route_circuit_peering_config_update.primary_peer_address_prefix
        _schema.route_filter = cls._args_ipv6_express_route_circuit_peering_config_update.route_filter
        _schema.secondary_peer_address_prefix = cls._args_ipv6_express_route_circuit_peering_config_update.secondary_peer_address_prefix
        _schema.state = cls._args_ipv6_express_route_circuit_peering_config_update.state

    _args_route_filter_update = None

    @classmethod
    def _build_args_route_filter_update(cls, _schema):
        if cls._args_route_filter_update is not None:
            _schema.id = cls._args_route_filter_update.id
            _schema.location = cls._args_route_filter_update.location
            _schema.peerings = cls._args_route_filter_update.peerings
            _schema.rules = cls._args_route_filter_update.rules
            _schema.tags = cls._args_route_filter_update.tags
            return

        cls._args_route_filter_update = AAZObjectArg(
            nullable=True,
        )

        route_filter_update = cls._args_route_filter_update
        route_filter_update.id = AAZResourceIdArg(
            options=["id"],
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeFilters/{}",
            ),
        )
        route_filter_update.location = AAZResourceLocationArg(
            options=["l", "location"],
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        route_filter_update.peerings = AAZListArg(
            options=["peerings"],
            nullable=True,
        )
        route_filter_update.rules = AAZListArg(
            options=["rules"],
            nullable=True,
        )
        route_filter_update.tags = AAZDictArg(
            options=["tags"],
            nullable=True,
        )

        peerings = cls._args_route_filter_update.peerings
        peerings.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_route_filter_update.peerings.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/expressRouteCircuits/{}/peerings/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.azure_asn = AAZIntArg(
            options=["azure-asn"],
            nullable=True,
        )
        _element.connections = AAZListArg(
            options=["connections"],
            nullable=True,
        )
        _element.gateway_manager_etag = AAZStrArg(
            options=["gateway-manager-etag"],
            nullable=True,
        )
        _element.ipv6_peering_config = AAZObjectArg(
            options=["ipv6-peering-config"],
            nullable=True,
        )
        cls._build_args_ipv6_express_route_circuit_peering_config_update(_element.ipv6_peering_config)
        _element.last_modified_by = AAZStrArg(
            options=["last-modified-by"],
            nullable=True,
        )
        _element.microsoft_peering_config = AAZObjectArg(
            options=["microsoft-peering-config"],
            nullable=True,
        )
        cls._build_args_express_route_circuit_peering_config_update(_element.microsoft_peering_config)
        _element.peer_asn = AAZIntArg(
            options=["peer-asn"],
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        _element.peering_type = AAZStrArg(
            options=["peering-type"],
            nullable=True,
            enum={"AzurePrivatePeering": "AzurePrivatePeering", "AzurePublicPeering": "AzurePublicPeering", "MicrosoftPeering": "MicrosoftPeering"},
        )
        _element.primary_azure_port = AAZStrArg(
            options=["primary-azure-port"],
            nullable=True,
        )
        _element.primary_peer_address_prefix = AAZStrArg(
            options=["primary-peer-address-prefix"],
            nullable=True,
        )
        _element.provisioning_state = AAZStrArg(
            options=["provisioning-state"],
            nullable=True,
        )
        _element.route_filter = AAZObjectArg(
            options=["route-filter"],
            nullable=True,
        )
        cls._build_args_route_filter_update(_element.route_filter)
        _element.secondary_azure_port = AAZStrArg(
            options=["secondary-azure-port"],
            nullable=True,
        )
        _element.secondary_peer_address_prefix = AAZStrArg(
            options=["secondary-peer-address-prefix"],
            nullable=True,
        )
        _element.shared_key = AAZStrArg(
            options=["shared-key"],
            nullable=True,
        )
        _element.state = AAZStrArg(
            options=["state"],
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _element.stats = AAZObjectArg(
            options=["stats"],
            nullable=True,
        )
        _element.vlan_id = AAZIntArg(
            options=["vlan-id"],
            nullable=True,
        )

        connections = cls._args_route_filter_update.peerings.Element.connections
        connections.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_route_filter_update.peerings.Element.connections.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/expressRouteCircuits/{}/peerings/{}/connections/{}",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            nullable=True,
        )
        _element.authorization_key = AAZStrArg(
            options=["authorization-key"],
            nullable=True,
        )
        _element.express_route_circuit_peering = AAZObjectArg(
            options=["express-route-circuit-peering"],
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.express_route_circuit_peering)
        _element.peer_express_route_circuit_peering = AAZObjectArg(
            options=["peer-express-route-circuit-peering"],
            nullable=True,
        )
        cls._build_args_sub_resource_update(_element.peer_express_route_circuit_peering)

        stats = cls._args_route_filter_update.peerings.Element.stats
        stats.primarybytes_in = AAZIntArg(
            options=["primarybytes-in"],
            nullable=True,
        )
        stats.primarybytes_out = AAZIntArg(
            options=["primarybytes-out"],
            nullable=True,
        )
        stats.secondarybytes_in = AAZIntArg(
            options=["secondarybytes-in"],
            nullable=True,
        )
        stats.secondarybytes_out = AAZIntArg(
            options=["secondarybytes-out"],
            nullable=True,
        )

        rules = cls._args_route_filter_update.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_route_filter_update.rules.Element
        _element.id = AAZResourceIdArg(
            options=["id"],
            nullable=True,
            fmt=AAZResourceIdArgFormat(
                template="/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Network/routeFilters/{}/routeFilterRules/{}",
            ),
        )
        _element.location = AAZResourceLocationArg(
            options=["l", "location"],
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.access = AAZStrArg(
            options=["access"],
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        _element.communities = AAZListArg(
            options=["communities"],
        )
        _element.route_filter_rule_type = AAZStrArg(
            options=["route-filter-rule-type"],
            enum={"Community": "Community"},
        )

        communities = cls._args_route_filter_update.rules.Element.communities
        communities.Element = AAZStrArg(
            nullable=True,
        )

        tags = cls._args_route_filter_update.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        _schema.id = cls._args_route_filter_update.id
        _schema.location = cls._args_route_filter_update.location
        _schema.peerings = cls._args_route_filter_update.peerings
        _schema.rules = cls._args_route_filter_update.rules
        _schema.tags = cls._args_route_filter_update.tags

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    def _execute_operations(self):
        self.pre_operations()
        self.ExpressRouteCrossConnectionPeeringsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ExpressRouteCrossConnectionPeeringsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ExpressRouteCrossConnectionPeeringsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "crossConnectionName", self.ctx.args.cross_connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "peeringName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_express_route_cross_connection_peering_read(cls._schema_on_200)

            return cls._schema_on_200

    class ExpressRouteCrossConnectionPeeringsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/expressRouteCrossConnections/{crossConnectionName}/peerings/{peeringName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "crossConnectionName", self.ctx.args.cross_connection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "peeringName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_express_route_cross_connection_peering_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("ipv6PeeringConfig", AAZObjectType, ".ipv6_peering_config")
                properties.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config")
                properties.set_prop("peerASN", AAZIntType, ".peer_asn")
                properties.set_prop("peeringType", AAZStrType, ".peering_type")
                properties.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
                properties.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")
                properties.set_prop("sharedKey", AAZStrType, ".shared_key")
                properties.set_prop("vlanId", AAZIntType, ".vlan_id")

            ipv6_peering_config = _builder.get(".properties.ipv6PeeringConfig")
            if ipv6_peering_config is not None:
                ipv6_peering_config.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config")
                ipv6_peering_config.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
                ipv6_peering_config.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")

            microsoft_peering_config = _builder.get(".properties.ipv6PeeringConfig.microsoftPeeringConfig")
            if microsoft_peering_config is not None:
                microsoft_peering_config.set_prop("advertisedPublicPrefixes", AAZListType, ".advertised_public_prefixes")
                microsoft_peering_config.set_prop("customerASN", AAZIntType, ".customer_asn")
                microsoft_peering_config.set_prop("routingRegistryName", AAZStrType, ".routing_registry_name")

            advertised_public_prefixes = _builder.get(".properties.ipv6PeeringConfig.microsoftPeeringConfig.advertisedPublicPrefixes")
            if advertised_public_prefixes is not None:
                advertised_public_prefixes.set_elements(AAZStrType, ".")

            microsoft_peering_config = _builder.get(".properties.microsoftPeeringConfig")
            if microsoft_peering_config is not None:
                microsoft_peering_config.set_prop("advertisedPublicPrefixes", AAZListType, ".advertised_public_prefixes")
                microsoft_peering_config.set_prop("customerASN", AAZIntType, ".customer_asn")
                microsoft_peering_config.set_prop("routingRegistryName", AAZStrType, ".routing_registry_name")

            advertised_public_prefixes = _builder.get(".properties.microsoftPeeringConfig.advertisedPublicPrefixes")
            if advertised_public_prefixes is not None:
                advertised_public_prefixes.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_express_route_circuit_peering_config_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("advertisedCommunities", AAZListType, ".advertised_communities")
        _builder.set_prop("advertisedPublicPrefixes", AAZListType, ".advertised_public_prefixes")
        _builder.set_prop("advertisedPublicPrefixesState", AAZStrType, ".advertised_public_prefixes_state")
        _builder.set_prop("customerASN", AAZIntType, ".customer_asn")
        _builder.set_prop("legacyMode", AAZIntType, ".legacy_mode")
        _builder.set_prop("routingRegistryName", AAZStrType, ".routing_registry_name")

        advertised_communities = _builder.get(".advertisedCommunities")
        if advertised_communities is not None:
            advertised_communities.set_elements(AAZStrType, ".")

        advertised_public_prefixes = _builder.get(".advertisedPublicPrefixes")
        if advertised_public_prefixes is not None:
            advertised_public_prefixes.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_ipv6_express_route_circuit_peering_config_update(cls, _builder):
        if _builder is None:
            return
        cls._build_schema_express_route_circuit_peering_config_update(_builder.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config"))
        _builder.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
        cls._build_schema_route_filter_update(_builder.set_prop("routeFilter", AAZObjectType, ".route_filter"))
        _builder.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")
        _builder.set_prop("state", AAZStrType, ".state")

    @classmethod
    def _build_schema_route_filter_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")
        _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
        _builder.set_prop("tags", AAZDictType, ".tags")

        properties = _builder.get(".properties")
        if properties is not None:
            properties.set_prop("peerings", AAZListType, ".peerings")
            properties.set_prop("rules", AAZListType, ".rules")

        peerings = _builder.get(".properties.peerings")
        if peerings is not None:
            peerings.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.peerings[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, ".id")
            _elements.set_prop("name", AAZStrType, ".name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.peerings[].properties")
        if properties is not None:
            properties.set_prop("azureASN", AAZIntType, ".azure_asn")
            properties.set_prop("connections", AAZListType, ".connections")
            properties.set_prop("gatewayManagerEtag", AAZStrType, ".gateway_manager_etag")
            cls._build_schema_ipv6_express_route_circuit_peering_config_update(properties.set_prop("ipv6PeeringConfig", AAZObjectType, ".ipv6_peering_config"))
            properties.set_prop("lastModifiedBy", AAZStrType, ".last_modified_by")
            cls._build_schema_express_route_circuit_peering_config_update(properties.set_prop("microsoftPeeringConfig", AAZObjectType, ".microsoft_peering_config"))
            properties.set_prop("peerASN", AAZIntType, ".peer_asn")
            properties.set_prop("peeringType", AAZStrType, ".peering_type")
            properties.set_prop("primaryAzurePort", AAZStrType, ".primary_azure_port")
            properties.set_prop("primaryPeerAddressPrefix", AAZStrType, ".primary_peer_address_prefix")
            properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
            cls._build_schema_route_filter_update(properties.set_prop("routeFilter", AAZObjectType, ".route_filter"))
            properties.set_prop("secondaryAzurePort", AAZStrType, ".secondary_azure_port")
            properties.set_prop("secondaryPeerAddressPrefix", AAZStrType, ".secondary_peer_address_prefix")
            properties.set_prop("sharedKey", AAZStrType, ".shared_key")
            properties.set_prop("state", AAZStrType, ".state")
            properties.set_prop("stats", AAZObjectType, ".stats")
            properties.set_prop("vlanId", AAZIntType, ".vlan_id")

        connections = _builder.get(".properties.peerings[].properties.connections")
        if connections is not None:
            connections.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.peerings[].properties.connections[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, ".id")
            _elements.set_prop("name", AAZStrType, ".name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.peerings[].properties.connections[].properties")
        if properties is not None:
            properties.set_prop("addressPrefix", AAZStrType, ".address_prefix")
            properties.set_prop("authorizationKey", AAZStrType, ".authorization_key")
            cls._build_schema_sub_resource_update(properties.set_prop("expressRouteCircuitPeering", AAZObjectType, ".express_route_circuit_peering"))
            cls._build_schema_sub_resource_update(properties.set_prop("peerExpressRouteCircuitPeering", AAZObjectType, ".peer_express_route_circuit_peering"))

        stats = _builder.get(".properties.peerings[].properties.stats")
        if stats is not None:
            stats.set_prop("primarybytesIn", AAZIntType, ".primarybytes_in")
            stats.set_prop("primarybytesOut", AAZIntType, ".primarybytes_out")
            stats.set_prop("secondarybytesIn", AAZIntType, ".secondarybytes_in")
            stats.set_prop("secondarybytesOut", AAZIntType, ".secondarybytes_out")

        rules = _builder.get(".properties.rules")
        if rules is not None:
            rules.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".properties.rules[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, ".id")
            _elements.set_prop("location", AAZStrType, ".location")
            _elements.set_prop("name", AAZStrType, ".name")
            _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties.rules[].properties")
        if properties is not None:
            properties.set_prop("access", AAZStrType, ".access", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("communities", AAZListType, ".communities", typ_kwargs={"flags": {"required": True}})
            properties.set_prop("routeFilterRuleType", AAZStrType, ".route_filter_rule_type", typ_kwargs={"flags": {"required": True}})

        communities = _builder.get(".properties.rules[].properties.communities")
        if communities is not None:
            communities.set_elements(AAZStrType, ".")

        tags = _builder.get(".tags")
        if tags is not None:
            tags.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    _schema_express_route_circuit_peering_config_read = None

    @classmethod
    def _build_schema_express_route_circuit_peering_config_read(cls, _schema):
        if cls._schema_express_route_circuit_peering_config_read is not None:
            _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
            _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
            _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
            _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
            _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
            _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name
            return

        cls._schema_express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read = AAZObjectType()

        express_route_circuit_peering_config_read = _schema_express_route_circuit_peering_config_read
        express_route_circuit_peering_config_read.advertised_communities = AAZListType(
            serialized_name="advertisedCommunities",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes = AAZListType(
            serialized_name="advertisedPublicPrefixes",
        )
        express_route_circuit_peering_config_read.advertised_public_prefixes_state = AAZStrType(
            serialized_name="advertisedPublicPrefixesState",
        )
        express_route_circuit_peering_config_read.customer_asn = AAZIntType(
            serialized_name="customerASN",
        )
        express_route_circuit_peering_config_read.legacy_mode = AAZIntType(
            serialized_name="legacyMode",
        )
        express_route_circuit_peering_config_read.routing_registry_name = AAZStrType(
            serialized_name="routingRegistryName",
        )

        advertised_communities = _schema_express_route_circuit_peering_config_read.advertised_communities
        advertised_communities.Element = AAZStrType()

        advertised_public_prefixes = _schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        advertised_public_prefixes.Element = AAZStrType()

        _schema.advertised_communities = cls._schema_express_route_circuit_peering_config_read.advertised_communities
        _schema.advertised_public_prefixes = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes
        _schema.advertised_public_prefixes_state = cls._schema_express_route_circuit_peering_config_read.advertised_public_prefixes_state
        _schema.customer_asn = cls._schema_express_route_circuit_peering_config_read.customer_asn
        _schema.legacy_mode = cls._schema_express_route_circuit_peering_config_read.legacy_mode
        _schema.routing_registry_name = cls._schema_express_route_circuit_peering_config_read.routing_registry_name

    _schema_express_route_cross_connection_peering_read = None

    @classmethod
    def _build_schema_express_route_cross_connection_peering_read(cls, _schema):
        if cls._schema_express_route_cross_connection_peering_read is not None:
            _schema.etag = cls._schema_express_route_cross_connection_peering_read.etag
            _schema.id = cls._schema_express_route_cross_connection_peering_read.id
            _schema.name = cls._schema_express_route_cross_connection_peering_read.name
            _schema.properties = cls._schema_express_route_cross_connection_peering_read.properties
            return

        cls._schema_express_route_cross_connection_peering_read = _schema_express_route_cross_connection_peering_read = AAZObjectType()

        express_route_cross_connection_peering_read = _schema_express_route_cross_connection_peering_read
        express_route_cross_connection_peering_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        express_route_cross_connection_peering_read.id = AAZStrType()
        express_route_cross_connection_peering_read.name = AAZStrType()
        express_route_cross_connection_peering_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_express_route_cross_connection_peering_read.properties
        properties.azure_asn = AAZIntType(
            serialized_name="azureASN",
            flags={"read_only": True},
        )
        properties.gateway_manager_etag = AAZStrType(
            serialized_name="gatewayManagerEtag",
        )
        properties.ipv6_peering_config = AAZObjectType(
            serialized_name="ipv6PeeringConfig",
        )
        cls._build_schema_ipv6_express_route_circuit_peering_config_read(properties.ipv6_peering_config)
        properties.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        properties.microsoft_peering_config = AAZObjectType(
            serialized_name="microsoftPeeringConfig",
        )
        cls._build_schema_express_route_circuit_peering_config_read(properties.microsoft_peering_config)
        properties.peer_asn = AAZIntType(
            serialized_name="peerASN",
        )
        properties.peering_type = AAZStrType(
            serialized_name="peeringType",
        )
        properties.primary_azure_port = AAZStrType(
            serialized_name="primaryAzurePort",
            flags={"read_only": True},
        )
        properties.primary_peer_address_prefix = AAZStrType(
            serialized_name="primaryPeerAddressPrefix",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.secondary_azure_port = AAZStrType(
            serialized_name="secondaryAzurePort",
            flags={"read_only": True},
        )
        properties.secondary_peer_address_prefix = AAZStrType(
            serialized_name="secondaryPeerAddressPrefix",
        )
        properties.shared_key = AAZStrType(
            serialized_name="sharedKey",
        )
        properties.state = AAZStrType()
        properties.vlan_id = AAZIntType(
            serialized_name="vlanId",
        )

        _schema.etag = cls._schema_express_route_cross_connection_peering_read.etag
        _schema.id = cls._schema_express_route_cross_connection_peering_read.id
        _schema.name = cls._schema_express_route_cross_connection_peering_read.name
        _schema.properties = cls._schema_express_route_cross_connection_peering_read.properties

    _schema_ipv6_express_route_circuit_peering_config_read = None

    @classmethod
    def _build_schema_ipv6_express_route_circuit_peering_config_read(cls, _schema):
        if cls._schema_ipv6_express_route_circuit_peering_config_read is not None:
            _schema.microsoft_peering_config = cls._schema_ipv6_express_route_circuit_peering_config_read.microsoft_peering_config
            _schema.primary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix
            _schema.route_filter = cls._schema_ipv6_express_route_circuit_peering_config_read.route_filter
            _schema.secondary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix
            _schema.state = cls._schema_ipv6_express_route_circuit_peering_config_read.state
            return

        cls._schema_ipv6_express_route_circuit_peering_config_read = _schema_ipv6_express_route_circuit_peering_config_read = AAZObjectType()

        ipv6_express_route_circuit_peering_config_read = _schema_ipv6_express_route_circuit_peering_config_read
        ipv6_express_route_circuit_peering_config_read.microsoft_peering_config = AAZObjectType(
            serialized_name="microsoftPeeringConfig",
        )
        cls._build_schema_express_route_circuit_peering_config_read(ipv6_express_route_circuit_peering_config_read.microsoft_peering_config)
        ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix = AAZStrType(
            serialized_name="primaryPeerAddressPrefix",
        )
        ipv6_express_route_circuit_peering_config_read.route_filter = AAZObjectType(
            serialized_name="routeFilter",
        )
        cls._build_schema_route_filter_read(ipv6_express_route_circuit_peering_config_read.route_filter)
        ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix = AAZStrType(
            serialized_name="secondaryPeerAddressPrefix",
        )
        ipv6_express_route_circuit_peering_config_read.state = AAZStrType()

        _schema.microsoft_peering_config = cls._schema_ipv6_express_route_circuit_peering_config_read.microsoft_peering_config
        _schema.primary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.primary_peer_address_prefix
        _schema.route_filter = cls._schema_ipv6_express_route_circuit_peering_config_read.route_filter
        _schema.secondary_peer_address_prefix = cls._schema_ipv6_express_route_circuit_peering_config_read.secondary_peer_address_prefix
        _schema.state = cls._schema_ipv6_express_route_circuit_peering_config_read.state

    _schema_route_filter_read = None

    @classmethod
    def _build_schema_route_filter_read(cls, _schema):
        if cls._schema_route_filter_read is not None:
            _schema.etag = cls._schema_route_filter_read.etag
            _schema.id = cls._schema_route_filter_read.id
            _schema.location = cls._schema_route_filter_read.location
            _schema.name = cls._schema_route_filter_read.name
            _schema.properties = cls._schema_route_filter_read.properties
            _schema.tags = cls._schema_route_filter_read.tags
            _schema.type = cls._schema_route_filter_read.type
            return

        cls._schema_route_filter_read = _schema_route_filter_read = AAZObjectType()

        route_filter_read = _schema_route_filter_read
        route_filter_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        route_filter_read.id = AAZStrType()
        route_filter_read.location = AAZStrType(
            flags={"required": True},
        )
        route_filter_read.name = AAZStrType(
            flags={"read_only": True},
        )
        route_filter_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        route_filter_read.tags = AAZDictType()
        route_filter_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_route_filter_read.properties
        properties.peerings = AAZListType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rules = AAZListType()

        peerings = _schema_route_filter_read.properties.peerings
        peerings.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.peerings.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.peerings.Element.properties
        properties.azure_asn = AAZIntType(
            serialized_name="azureASN",
        )
        properties.connections = AAZListType()
        properties.gateway_manager_etag = AAZStrType(
            serialized_name="gatewayManagerEtag",
        )
        properties.ipv6_peering_config = AAZObjectType(
            serialized_name="ipv6PeeringConfig",
        )
        cls._build_schema_ipv6_express_route_circuit_peering_config_read(properties.ipv6_peering_config)
        properties.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        properties.microsoft_peering_config = AAZObjectType(
            serialized_name="microsoftPeeringConfig",
        )
        cls._build_schema_express_route_circuit_peering_config_read(properties.microsoft_peering_config)
        properties.peer_asn = AAZIntType(
            serialized_name="peerASN",
        )
        properties.peering_type = AAZStrType(
            serialized_name="peeringType",
        )
        properties.primary_azure_port = AAZStrType(
            serialized_name="primaryAzurePort",
        )
        properties.primary_peer_address_prefix = AAZStrType(
            serialized_name="primaryPeerAddressPrefix",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )
        properties.route_filter = AAZObjectType(
            serialized_name="routeFilter",
        )
        cls._build_schema_route_filter_read(properties.route_filter)
        properties.secondary_azure_port = AAZStrType(
            serialized_name="secondaryAzurePort",
        )
        properties.secondary_peer_address_prefix = AAZStrType(
            serialized_name="secondaryPeerAddressPrefix",
        )
        properties.shared_key = AAZStrType(
            serialized_name="sharedKey",
        )
        properties.state = AAZStrType()
        properties.stats = AAZObjectType()
        properties.vlan_id = AAZIntType(
            serialized_name="vlanId",
        )

        connections = _schema_route_filter_read.properties.peerings.Element.properties.connections
        connections.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.peerings.Element.properties.connections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.peerings.Element.properties.connections.Element.properties
        properties.address_prefix = AAZStrType(
            serialized_name="addressPrefix",
        )
        properties.authorization_key = AAZStrType(
            serialized_name="authorizationKey",
        )
        properties.circuit_connection_status = AAZStrType(
            serialized_name="circuitConnectionStatus",
            flags={"read_only": True},
        )
        properties.express_route_circuit_peering = AAZObjectType(
            serialized_name="expressRouteCircuitPeering",
        )
        cls._build_schema_sub_resource_read(properties.express_route_circuit_peering)
        properties.peer_express_route_circuit_peering = AAZObjectType(
            serialized_name="peerExpressRouteCircuitPeering",
        )
        cls._build_schema_sub_resource_read(properties.peer_express_route_circuit_peering)
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        stats = _schema_route_filter_read.properties.peerings.Element.properties.stats
        stats.primarybytes_in = AAZIntType(
            serialized_name="primarybytesIn",
        )
        stats.primarybytes_out = AAZIntType(
            serialized_name="primarybytesOut",
        )
        stats.secondarybytes_in = AAZIntType(
            serialized_name="secondarybytesIn",
        )
        stats.secondarybytes_out = AAZIntType(
            serialized_name="secondarybytesOut",
        )

        rules = _schema_route_filter_read.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_route_filter_read.properties.rules.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.location = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_route_filter_read.properties.rules.Element.properties
        properties.access = AAZStrType(
            flags={"required": True},
        )
        properties.communities = AAZListType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.route_filter_rule_type = AAZStrType(
            serialized_name="routeFilterRuleType",
            flags={"required": True},
        )

        communities = _schema_route_filter_read.properties.rules.Element.properties.communities
        communities.Element = AAZStrType()

        tags = _schema_route_filter_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_route_filter_read.etag
        _schema.id = cls._schema_route_filter_read.id
        _schema.location = cls._schema_route_filter_read.location
        _schema.name = cls._schema_route_filter_read.name
        _schema.properties = cls._schema_route_filter_read.properties
        _schema.tags = cls._schema_route_filter_read.tags
        _schema.type = cls._schema_route_filter_read.type

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Update"]
