# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkcloud virtualmachine create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new virtual machine or update the properties of the existing virtual machine.

    :example: Create virtual machine
        az networkcloud virtualmachine create --resource-group "resourceGroupName" --name "virtualMachineName" --extended-location name="/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ExtendedLocation/customLocations/clusterExtendedLocationName" type="CustomLocation" --location "location" --admin-username "admin" --boot-method "UEFI" --cloud-services-network-attachment attached-network-id="/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/CloudServicesNetworks/cloudServicesNetworkName" --cpu-cores 2 --memory-size 8 --network-attachments "[{attachedNetworkId:'/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l3Networks/l3NetworkName',defaultGateway:'True',ipAllocationMethod:'Dynamic',ipv4Address:'198.51.100.1',ipv6Address:'2001:0db8:0000:0000:0000:0000:0000:0000',networkAttachmentName:'networkAttachmentName'}]" --network-data "bmV0d29ya0RhdGVTYW1wbGU=" --placement-hints "[{hintType:'Affinity',resourceId:'/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/racks/rackName',schedulingExecution:'Hard,scope:''}]" --ssh-key-values "ssh-rsa AAtsE3njSONzDYRIZv/WLjVuMfrUSByHp+jfaaOLHTIIB4fJvo6dQUZxE20w2iDHV3tEkmnTo84eba97VMueQD6OzJPEyWZMRpz8UYWOd0IXeRqiFu1lawNblZhwNT= admin@vm" --storage-profile disk-size=120 create-option="Ephemeral" delete-option="Delete" --tags key1="myvalues1" --tags key2="myvalues2" --user-data "dXNlckRhdGVTYW1wbGU=" --vm-device-model "T2" --vm-image "myacr.azurecr.io/ubuntu-pw:20.04" --vm-image-repository-credentials password="password" registry-url="myacr.azurecr.io" username="username"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkcloud/virtualmachines/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.virtual_machine_name = AAZStrArg(
            options=["-n", "--name", "--virtual-machine-name"],
            help="The name of the virtual machine.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9]{0,62}[a-zA-Z0-9])$",
            ),
        )

        # define Arg Group "Authentication"

        _args_schema = cls._args_schema
        _args_schema.admin_username = AAZStrArg(
            options=["--admin-username"],
            arg_group="Authentication",
            help="The name of the administrator to which the ssh public keys will be added into the authorized keys.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-z_][a-z0-9_]{0,31}$",
                max_length=32,
                min_length=1,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.boot_method = AAZStrArg(
            options=["--boot-method"],
            arg_group="Properties",
            help="Selects the boot method for the virtual machine.",
            default="UEFI",
            enum={"BIOS": "BIOS", "UEFI": "UEFI"},
        )
        _args_schema.cloud_services_network_attachment = AAZObjectArg(
            options=["--csn", "--cloud-services-network-attachment"],
            arg_group="Properties",
            help="The cloud service network that provides platform-level services for the virtual machine.",
            required=True,
        )
        _args_schema.cpu_cores = AAZIntArg(
            options=["--cpu-cores"],
            arg_group="Properties",
            help="The number of CPU cores in the virtual machine.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=2,
            ),
        )
        _args_schema.memory_size_gb = AAZIntArg(
            options=["--memory-size", "--memory-size-gb"],
            arg_group="Properties",
            help="The memory size of the virtual machine in GB.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        _args_schema.network_attachments = AAZListArg(
            options=["--na", "--network-attachments"],
            arg_group="Properties",
            help="The list of network attachments to the virtual machine.",
        )
        _args_schema.network_data = AAZStrArg(
            options=["--nd", "--network-data"],
            arg_group="Properties",
            help="The Base64 encoded cloud-init network data.",
        )
        _args_schema.placement_hints = AAZListArg(
            options=["--ph", "--placement-hints"],
            arg_group="Properties",
            help="The scheduling hints for the virtual machine.",
        )
        _args_schema.ssh_public_keys = AAZListArg(
            options=["--ssh-public-keys"],
            arg_group="Properties",
            help="The list of ssh public keys. Each key will be added to the virtual machine using the cloud-init ssh_authorized_keys mechanism for the adminUsername.",
        )
        _args_schema.storage_profile = AAZObjectArg(
            options=["--storage-profile"],
            arg_group="Properties",
            help="The storage profile that specifies size and other parameters about the disks related to the virtual machine.",
            required=True,
        )
        _args_schema.user_data = AAZStrArg(
            options=["--ud", "--user-data"],
            arg_group="Properties",
            help="The Base64 encoded cloud-init user data.",
        )
        _args_schema.vm_device_model = AAZStrArg(
            options=["--vm-device-model"],
            arg_group="Properties",
            help="The type of the device model to use.",
            default="T2",
            enum={"T1": "T1", "T2": "T2"},
        )
        _args_schema.vm_image = AAZStrArg(
            options=["--vm-image"],
            arg_group="Properties",
            help="The virtual machine image that is currently provisioned to the OS disk, using the full url and tag notation used to pull the image.",
            required=True,
        )
        _args_schema.vm_image_repository_credentials = AAZObjectArg(
            options=["--vmi-creds", "--vm-image-repository-credentials"],
            arg_group="Properties",
            help="The credentials used to login to the image repository that has access to the specified image.",
        )

        cloud_services_network_attachment = cls._args_schema.cloud_services_network_attachment
        cloud_services_network_attachment.attached_network_id = AAZResourceIdArg(
            options=["attached-network-id"],
            help="The resource ID of the associated network attached to the virtual machine. It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.",
            required=True,
        )
        cloud_services_network_attachment.default_gateway = AAZStrArg(
            options=["default-gateway"],
            help="The indicator of whether this is the default gateway. Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.",
            enum={"False": "False", "True": "True"},
        )
        cloud_services_network_attachment.ip_allocation_method = AAZStrArg(
            options=["ip-allocation-method"],
            help="The IP allocation mechanism for the virtual machine. Dynamic and Static are only valid for l3Network which may also specify Disabled. Otherwise, Disabled is the only permitted value.",
            required=True,
            enum={"Disabled": "Disabled", "Dynamic": "Dynamic", "Static": "Static"},
        )
        cloud_services_network_attachment.ipv4_address = AAZStrArg(
            options=["ipv4-address"],
            help="The IPv4 address of the virtual machine.  This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.  If IPAllocationMethod is: Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network. Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network. Disabled - this field will be empty.",
        )
        cloud_services_network_attachment.ipv6_address = AAZStrArg(
            options=["ipv6-address"],
            help="The IPv6 address of the virtual machine.  This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.  If IPAllocationMethod is: Static - this field must contain an IPv6 address range from within the range specified in the attached network. Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network. Disabled - this field will be empty.",
        )
        cloud_services_network_attachment.network_attachment_name = AAZStrArg(
            options=["network-attachment-name"],
            help="The associated network's interface name. If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine. If the user doesn’t specify this value, the default interface name of the network resource will be used. For a CloudServicesNetwork resource, this name will be ignored.",
            fmt=AAZStrArgFormat(
                max_length=15,
            ),
        )

        network_attachments = cls._args_schema.network_attachments
        network_attachments.Element = AAZObjectArg()

        _element = cls._args_schema.network_attachments.Element
        _element.attached_network_id = AAZResourceIdArg(
            options=["attached-network-id"],
            help="The resource ID of the associated network attached to the virtual machine. It can be one of cloudServicesNetwork, l3Network, l2Network or trunkedNetwork resources.",
            required=True,
        )
        _element.default_gateway = AAZStrArg(
            options=["default-gateway"],
            help="The indicator of whether this is the default gateway. Only one of the attached networks (including the CloudServicesNetwork attachment) for a single machine may be specified as True.",
            enum={"False": "False", "True": "True"},
        )
        _element.ip_allocation_method = AAZStrArg(
            options=["ip-allocation-method"],
            help="The IP allocation mechanism for the virtual machine. Dynamic and Static are only valid for l3Network which may also specify Disabled. Otherwise, Disabled is the only permitted value.",
            required=True,
            enum={"Disabled": "Disabled", "Dynamic": "Dynamic", "Static": "Static"},
        )
        _element.ipv4_address = AAZStrArg(
            options=["ipv4-address"],
            help="The IPv4 address of the virtual machine.  This field is used only if the attached network has IPAllocationType of IPV4 or DualStack.  If IPAllocationMethod is: Static - this field must contain a user specified IPv4 address from within the subnet specified in the attached network. Dynamic - this field is read-only, but will be populated with an address from within the subnet specified in the attached network. Disabled - this field will be empty.",
        )
        _element.ipv6_address = AAZStrArg(
            options=["ipv6-address"],
            help="The IPv6 address of the virtual machine.  This field is used only if the attached network has IPAllocationType of IPV6 or DualStack.  If IPAllocationMethod is: Static - this field must contain an IPv6 address range from within the range specified in the attached network. Dynamic - this field is read-only, but will be populated with an range from within the subnet specified in the attached network. Disabled - this field will be empty.",
        )
        _element.network_attachment_name = AAZStrArg(
            options=["network-attachment-name"],
            help="The associated network's interface name. If specified, the network attachment name has a maximum length of 15 characters and must be unique to this virtual machine. If the user doesn’t specify this value, the default interface name of the network resource will be used. For a CloudServicesNetwork resource, this name will be ignored.",
            fmt=AAZStrArgFormat(
                max_length=15,
            ),
        )

        placement_hints = cls._args_schema.placement_hints
        placement_hints.Element = AAZObjectArg()

        _element = cls._args_schema.placement_hints.Element
        _element.hint_type = AAZStrArg(
            options=["hint-type"],
            help="The specification of whether this hint supports affinity or anti-affinity with the referenced resources.",
            required=True,
            enum={"Affinity": "Affinity", "AntiAffinity": "AntiAffinity"},
        )
        _element.resource_id = AAZResourceIdArg(
            options=["resource-id"],
            help="The resource ID of the target object that the placement hints will be checked against, e.g., the bare metal node to host the virtual machine.",
            required=True,
        )
        _element.scheduling_execution = AAZStrArg(
            options=["scheduling-execution"],
            help="The indicator of whether the hint is a hard or soft requirement during scheduling.",
            required=True,
            enum={"Hard": "Hard", "Soft": "Soft"},
        )
        _element.scope = AAZStrArg(
            options=["scope"],
            help="The scope for the virtual machine affinity or anti-affinity placement hint. It should always be \"Machine\" in the case of node affinity.",
            required=True,
            enum={"Machine": "Machine", "Rack": "Rack"},
        )

        ssh_public_keys = cls._args_schema.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()

        _element = cls._args_schema.ssh_public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="The public ssh key of the user.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        storage_profile = cls._args_schema.storage_profile
        storage_profile.create_option = AAZStrArg(
            options=["create-option"],
            help="The strategy for creating the OS disk.",
            default="Ephemeral",
            enum={"Ephemeral": "Ephemeral"},
        )
        storage_profile.delete_option = AAZStrArg(
            options=["delete-option"],
            help="The strategy for deleting the OS disk.",
            default="Delete",
            enum={"Delete": "Delete"},
        )
        storage_profile.disk_size_gb = AAZIntArg(
            options=["disk-size", "disk-size-gb"],
            help="The size of the disk in gigabytes. Required if the createOption is Ephemeral.",
            required=True,
        )
        storage_profile.volume_attachments = AAZListArg(
            options=["volume-attachments"],
            help="The resource IDs of volumes that are requested to be attached to the virtual machine.",
        )

        volume_attachments = cls._args_schema.storage_profile.volume_attachments
        volume_attachments.Element = AAZStrArg()

        vm_image_repository_credentials = cls._args_schema.vm_image_repository_credentials
        vm_image_repository_credentials.password = AAZStrArg(
            options=["password"],
            help="The password or token used to access an image in the target repository.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        vm_image_repository_credentials.registry_url = AAZStrArg(
            options=["registry-url"],
            help="The URL of the authentication server used to validate the repository credentials.",
            required=True,
        )
        vm_image_repository_credentials.username = AAZStrArg(
            options=["username"],
            help="The username used to access an image in the target repository.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        # define Arg Group "VirtualMachineParameters"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="VirtualMachineParameters",
            help="The extended location of the cluster associated with the resource.",
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="VirtualMachineParameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="VirtualMachineParameters",
            help="Resource tags.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The resource ID of the extended location on which the resource will be created.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The extended location type, for example, CustomLocation.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.VirtualMachinesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class VirtualMachinesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/virtualMachines/{virtualMachineName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualMachineName", self.ctx.args.virtual_machine_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("adminUsername", AAZStrType, ".admin_username", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("bootMethod", AAZStrType, ".boot_method")
                properties.set_prop("cloudServicesNetworkAttachment", AAZObjectType, ".cloud_services_network_attachment", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("cpuCores", AAZIntType, ".cpu_cores", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("memorySizeGB", AAZIntType, ".memory_size_gb", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkAttachments", AAZListType, ".network_attachments")
                properties.set_prop("networkData", AAZStrType, ".network_data")
                properties.set_prop("placementHints", AAZListType, ".placement_hints")
                properties.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")
                properties.set_prop("storageProfile", AAZObjectType, ".storage_profile", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("userData", AAZStrType, ".user_data")
                properties.set_prop("vmDeviceModel", AAZStrType, ".vm_device_model")
                properties.set_prop("vmImage", AAZStrType, ".vm_image", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("vmImageRepositoryCredentials", AAZObjectType, ".vm_image_repository_credentials")

            cloud_services_network_attachment = _builder.get(".properties.cloudServicesNetworkAttachment")
            if cloud_services_network_attachment is not None:
                cloud_services_network_attachment.set_prop("attachedNetworkId", AAZStrType, ".attached_network_id", typ_kwargs={"flags": {"required": True}})
                cloud_services_network_attachment.set_prop("defaultGateway", AAZStrType, ".default_gateway")
                cloud_services_network_attachment.set_prop("ipAllocationMethod", AAZStrType, ".ip_allocation_method", typ_kwargs={"flags": {"required": True}})
                cloud_services_network_attachment.set_prop("ipv4Address", AAZStrType, ".ipv4_address")
                cloud_services_network_attachment.set_prop("ipv6Address", AAZStrType, ".ipv6_address")
                cloud_services_network_attachment.set_prop("networkAttachmentName", AAZStrType, ".network_attachment_name")

            network_attachments = _builder.get(".properties.networkAttachments")
            if network_attachments is not None:
                network_attachments.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkAttachments[]")
            if _elements is not None:
                _elements.set_prop("attachedNetworkId", AAZStrType, ".attached_network_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("defaultGateway", AAZStrType, ".default_gateway")
                _elements.set_prop("ipAllocationMethod", AAZStrType, ".ip_allocation_method", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("ipv4Address", AAZStrType, ".ipv4_address")
                _elements.set_prop("ipv6Address", AAZStrType, ".ipv6_address")
                _elements.set_prop("networkAttachmentName", AAZStrType, ".network_attachment_name")

            placement_hints = _builder.get(".properties.placementHints")
            if placement_hints is not None:
                placement_hints.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.placementHints[]")
            if _elements is not None:
                _elements.set_prop("hintType", AAZStrType, ".hint_type", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("resourceId", AAZStrType, ".resource_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("schedulingExecution", AAZStrType, ".scheduling_execution", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("scope", AAZStrType, ".scope", typ_kwargs={"flags": {"required": True}})

            ssh_public_keys = _builder.get(".properties.sshPublicKeys")
            if ssh_public_keys is not None:
                ssh_public_keys.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.sshPublicKeys[]")
            if _elements is not None:
                _elements.set_prop("keyData", AAZStrType, ".key_data", typ_kwargs={"flags": {"required": True}})

            storage_profile = _builder.get(".properties.storageProfile")
            if storage_profile is not None:
                storage_profile.set_prop("osDisk", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
                storage_profile.set_prop("volumeAttachments", AAZListType, ".volume_attachments")

            os_disk = _builder.get(".properties.storageProfile.osDisk")
            if os_disk is not None:
                os_disk.set_prop("createOption", AAZStrType, ".create_option")
                os_disk.set_prop("deleteOption", AAZStrType, ".delete_option")
                os_disk.set_prop("diskSizeGB", AAZIntType, ".disk_size_gb", typ_kwargs={"flags": {"required": True}})

            volume_attachments = _builder.get(".properties.storageProfile.volumeAttachments")
            if volume_attachments is not None:
                volume_attachments.set_elements(AAZStrType, ".")

            vm_image_repository_credentials = _builder.get(".properties.vmImageRepositoryCredentials")
            if vm_image_repository_credentials is not None:
                vm_image_repository_credentials.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
                vm_image_repository_credentials.set_prop("registryUrl", AAZStrType, ".registry_url", typ_kwargs={"flags": {"required": True}})
                vm_image_repository_credentials.set_prop("username", AAZStrType, ".username", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
                flags={"required": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.admin_username = AAZStrType(
                serialized_name="adminUsername",
                flags={"required": True},
            )
            properties.availability_zone = AAZStrType(
                serialized_name="availabilityZone",
                flags={"read_only": True},
            )
            properties.bare_metal_machine_id = AAZStrType(
                serialized_name="bareMetalMachineId",
                flags={"read_only": True},
            )
            properties.boot_method = AAZStrType(
                serialized_name="bootMethod",
            )
            properties.cloud_services_network_attachment = AAZObjectType(
                serialized_name="cloudServicesNetworkAttachment",
                flags={"required": True},
            )
            properties.cluster_id = AAZStrType(
                serialized_name="clusterId",
                flags={"read_only": True},
            )
            properties.cpu_cores = AAZIntType(
                serialized_name="cpuCores",
                flags={"required": True},
            )
            properties.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            properties.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            properties.isolate_emulator_thread = AAZStrType(
                serialized_name="isolateEmulatorThread",
            )
            properties.memory_size_gb = AAZIntType(
                serialized_name="memorySizeGB",
                flags={"required": True},
            )
            properties.network_attachments = AAZListType(
                serialized_name="networkAttachments",
            )
            properties.network_data = AAZStrType(
                serialized_name="networkData",
            )
            properties.placement_hints = AAZListType(
                serialized_name="placementHints",
            )
            properties.power_state = AAZStrType(
                serialized_name="powerState",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.ssh_public_keys = AAZListType(
                serialized_name="sshPublicKeys",
            )
            properties.storage_profile = AAZObjectType(
                serialized_name="storageProfile",
                flags={"required": True},
            )
            properties.user_data = AAZStrType(
                serialized_name="userData",
            )
            properties.virtio_interface = AAZStrType(
                serialized_name="virtioInterface",
            )
            properties.vm_device_model = AAZStrType(
                serialized_name="vmDeviceModel",
            )
            properties.vm_image = AAZStrType(
                serialized_name="vmImage",
                flags={"required": True},
            )
            properties.vm_image_repository_credentials = AAZObjectType(
                serialized_name="vmImageRepositoryCredentials",
            )
            properties.volumes = AAZListType(
                flags={"read_only": True},
            )

            cloud_services_network_attachment = cls._schema_on_200_201.properties.cloud_services_network_attachment
            cloud_services_network_attachment.attached_network_id = AAZStrType(
                serialized_name="attachedNetworkId",
                flags={"required": True},
            )
            cloud_services_network_attachment.default_gateway = AAZStrType(
                serialized_name="defaultGateway",
            )
            cloud_services_network_attachment.ip_allocation_method = AAZStrType(
                serialized_name="ipAllocationMethod",
                flags={"required": True},
            )
            cloud_services_network_attachment.ipv4_address = AAZStrType(
                serialized_name="ipv4Address",
            )
            cloud_services_network_attachment.ipv6_address = AAZStrType(
                serialized_name="ipv6Address",
            )
            cloud_services_network_attachment.mac_address = AAZStrType(
                serialized_name="macAddress",
                flags={"read_only": True},
            )
            cloud_services_network_attachment.network_attachment_name = AAZStrType(
                serialized_name="networkAttachmentName",
            )

            network_attachments = cls._schema_on_200_201.properties.network_attachments
            network_attachments.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_attachments.Element
            _element.attached_network_id = AAZStrType(
                serialized_name="attachedNetworkId",
                flags={"required": True},
            )
            _element.default_gateway = AAZStrType(
                serialized_name="defaultGateway",
            )
            _element.ip_allocation_method = AAZStrType(
                serialized_name="ipAllocationMethod",
                flags={"required": True},
            )
            _element.ipv4_address = AAZStrType(
                serialized_name="ipv4Address",
            )
            _element.ipv6_address = AAZStrType(
                serialized_name="ipv6Address",
            )
            _element.mac_address = AAZStrType(
                serialized_name="macAddress",
                flags={"read_only": True},
            )
            _element.network_attachment_name = AAZStrType(
                serialized_name="networkAttachmentName",
            )

            placement_hints = cls._schema_on_200_201.properties.placement_hints
            placement_hints.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.placement_hints.Element
            _element.hint_type = AAZStrType(
                serialized_name="hintType",
                flags={"required": True},
            )
            _element.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )
            _element.scheduling_execution = AAZStrType(
                serialized_name="schedulingExecution",
                flags={"required": True},
            )
            _element.scope = AAZStrType(
                flags={"required": True},
            )

            ssh_public_keys = cls._schema_on_200_201.properties.ssh_public_keys
            ssh_public_keys.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.ssh_public_keys.Element
            _element.key_data = AAZStrType(
                serialized_name="keyData",
                flags={"required": True},
            )

            storage_profile = cls._schema_on_200_201.properties.storage_profile
            storage_profile.os_disk = AAZObjectType(
                serialized_name="osDisk",
                flags={"required": True},
            )
            storage_profile.volume_attachments = AAZListType(
                serialized_name="volumeAttachments",
            )

            os_disk = cls._schema_on_200_201.properties.storage_profile.os_disk
            os_disk.create_option = AAZStrType(
                serialized_name="createOption",
            )
            os_disk.delete_option = AAZStrType(
                serialized_name="deleteOption",
            )
            os_disk.disk_size_gb = AAZIntType(
                serialized_name="diskSizeGB",
                flags={"required": True},
            )

            volume_attachments = cls._schema_on_200_201.properties.storage_profile.volume_attachments
            volume_attachments.Element = AAZStrType()

            vm_image_repository_credentials = cls._schema_on_200_201.properties.vm_image_repository_credentials
            vm_image_repository_credentials.password = AAZStrType(
                flags={"secret": True},
            )
            vm_image_repository_credentials.registry_url = AAZStrType(
                serialized_name="registryUrl",
                flags={"required": True},
            )
            vm_image_repository_credentials.username = AAZStrType(
                flags={"required": True},
            )

            volumes = cls._schema_on_200_201.properties.volumes
            volumes.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
