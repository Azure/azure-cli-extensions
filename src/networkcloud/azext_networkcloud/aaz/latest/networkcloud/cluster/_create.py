# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkcloud cluster create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new cluster or update the properties of the cluster if it exists.

    :example: Create or update single rack cluster
        az networkcloud cluster create --name "clusterName" -g "resourceGroupName" --extended-location name="/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ExtendedLocation/customLocations/clusterManagerExtendedLocationName" type="CustomLocation" --location "eastus" --analytics-workspace-id "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/microsoft.operationalInsights/workspaces/logAnalyticsWorkspaceName" --cluster-location "Foo Street, 3rd Floor, row 9" --cluster-service-principal application-id="12345678-1234-1234-1234-123456789012" password="password" principal-id="00000008-0004-0004-0004-000000000012" tenant-id="80000000-4000-4000-4000-120000000000" --cluster-type "SingleRack" --cluster-version "3.0.0" --compute-deployment-threshold type="PercentSuccess" grouping="PerCluster" value=90  --network-fabric-id "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default" --aggregator-or-single-rack-definition network-rack-id="/subscriptions/subscriptionId/resourceGroups/rgName/providers/Microsoft.Network/virtualNetworks/cmName/subnets/ClusterManagerSubnet" rack-sku-id="/subscriptions/subscriptionId/providers/Microsoft.NetworkCloud/rackSkus/VLab_Single_DellR750_8C2M_x70r3_9" rack-serial-number=b99m99r1 rack-location='b99m99r1' availability-zone=1 storage-appliance-configuration-data="[{rackSlot:1,adminCredentials:{username:'adminuser',password:'password'},storageApplianceName:name,serialNumber:serial}]" bare-metal-machine-configuration-data="[{bmcCredentials:{password:'bmcPassword',username:'root'},bmcMacAddress:'AA:BB:CC:DD:E7:08',bootMacAddress:'AA:BB:CC:F8:71:2E',machineName:lab00r750wkr1,rackSlot:2,serialNumber:5HS7PK3},{bmcCredentials:{password:'bmcPassword',username:'root'},bmcMacAddress:'AA:BB:CC:FD:DC:76',bootMacAddress:'AA:BB:CC:F8:50:CA',machineName:lab00r750wkr8,rackSlot:11,serialNumber:9M56PK3}]" --tags key1="myvalue1" key2="myvalue2"

    :example: Create or update single rack cluster using json file input
        az networkcloud cluster create --name "clusterName" -g "resourceGroupName" --extended-location name="/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.ExtendedLocation/customLocations/clusterManagerExtendedLocationName" type="CustomLocation" --location "eastus" --analytics-workspace-id "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/microsoft.operationalInsights/workspaces/logAnalyticsWorkspaceName" --cluster-location "Foo Street, 3rd Floor, row 9" --cluster-service-principal application-id="12345678-1234-1234-1234-123456789012" password="password" principal-id="00000008-0004-0004-0004-000000000012" tenant-id="80000000-4000-4000-4000-120000000000" --cluster-type "SingleRack" --cluster-version "3.0.0" --compute-deployment-threshold type="PercentSuccess" grouping="PerCluster" value=90  --network-fabric-id "/subscriptions/subscriptionId/resourceGroups/resourceGroupName/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/default" --aggregator-or-single-rack-definition ./aggregator-or-single-rack-definition.json --tags key1="myvalue1" key2="myvalue2
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkcloud/clusters/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["-n", "--name", "--cluster-name"],
            help="The name of the cluster.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "ClusterParameters"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="ClusterParameters",
            help="The extended location of the cluster manager associated with the cluster.",
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="ClusterParameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="ClusterParameters",
            help="Resource tags.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The resource ID of the extended location on which the resource will be created.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The extended location type, for example, CustomLocation.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.aggregator_or_single_rack_definition = AAZObjectArg(
            options=["--aggregator-or-single-rack-definition"],
            arg_group="Properties",
            help="The rack definition that is intended to reflect only a single rack in a single rack cluster, or an aggregator rack in a multi-rack cluster.",
            required=True,
        )
        cls._build_args_rack_definition_create(_args_schema.aggregator_or_single_rack_definition)
        _args_schema.analytics_workspace_id = AAZStrArg(
            options=["--analytics-workspace-id"],
            arg_group="Properties",
            help="The resource ID of the Log Analytics Workspace that will be used for storing relevant logs.",
        )
        _args_schema.cluster_location = AAZStrArg(
            options=["--cluster-location"],
            arg_group="Properties",
            help="The customer-provided location information to identify where the cluster resides.",
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        _args_schema.cluster_service_principal = AAZObjectArg(
            options=["--cluster-service-principal"],
            arg_group="Properties",
            help="The service principal to be used by the cluster during Arc Appliance installation.",
        )
        _args_schema.cluster_type = AAZStrArg(
            options=["--cluster-type"],
            arg_group="Properties",
            help="The type of rack configuration for the cluster.",
            required=True,
            enum={"MultiRack": "MultiRack", "SingleRack": "SingleRack"},
        )
        _args_schema.cluster_version = AAZStrArg(
            options=["--cluster-version"],
            arg_group="Properties",
            help="The current runtime version of the cluster.",
            required=True,
        )
        _args_schema.compute_deployment_threshold = AAZObjectArg(
            options=["--compute-deployment-threshold"],
            arg_group="Properties",
            help="The validation threshold indicating the allowable failures of compute machines during environment validation and deployment.",
        )
        _args_schema.compute_rack_definitions = AAZListArg(
            options=["--compute-rack-definitions"],
            arg_group="Properties",
            help="The list of rack definitions for the compute racks in a multi-rack cluster, or an empty list in a single-rack cluster.",
        )
        _args_schema.managed_resource_group_configuration = AAZObjectArg(
            options=["--managed-resource-group-configuration"],
            arg_group="Properties",
            help="The configuration of the managed resource group associated with the resource.",
        )
        _args_schema.network_fabric_id = AAZResourceIdArg(
            options=["--network-fabric-id"],
            arg_group="Properties",
            help="The resource ID of the Network Fabric associated with the cluster.",
            required=True,
        )
        _args_schema.runtime_protection = AAZObjectArg(
            options=["--runtime-protection"],
            arg_group="Properties",
            help="The settings for cluster runtime protection.",
        )
        _args_schema.secret_archive = AAZObjectArg(
            options=["--secret-archive"],
            arg_group="Properties",
            help="The configuration for use of a key vault to store secrets for later retrieval by the operator.",
        )
        _args_schema.update_strategy = AAZObjectArg(
            options=["--update-strategy"],
            arg_group="Properties",
            help="The strategy for updating the cluster.",
        )

        cluster_service_principal = cls._args_schema.cluster_service_principal
        cluster_service_principal.application_id = AAZStrArg(
            options=["application-id"],
            help="The application ID, also known as client ID, of the service principal.",
            required=True,
        )
        cluster_service_principal.password = AAZStrArg(
            options=["password"],
            help="The password of the service principal.",
            required=True,
        )
        cluster_service_principal.principal_id = AAZStrArg(
            options=["principal-id"],
            help="The principal ID, also known as the object ID, of the service principal.",
            required=True,
        )
        cluster_service_principal.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="The tenant ID, also known as the directory ID, of the tenant in which the service principal is created.",
            required=True,
        )

        compute_deployment_threshold = cls._args_schema.compute_deployment_threshold
        compute_deployment_threshold.grouping = AAZStrArg(
            options=["grouping"],
            help="Selection of how the type evaluation is applied to the cluster calculation.",
            required=True,
            enum={"PerCluster": "PerCluster", "PerRack": "PerRack"},
        )
        compute_deployment_threshold.type = AAZStrArg(
            options=["type"],
            help="Selection of how the threshold should be evaluated.",
            required=True,
            enum={"CountSuccess": "CountSuccess", "PercentSuccess": "PercentSuccess"},
        )
        compute_deployment_threshold.value = AAZIntArg(
            options=["value"],
            help="The numeric threshold value.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )

        compute_rack_definitions = cls._args_schema.compute_rack_definitions
        compute_rack_definitions.Element = AAZObjectArg()
        cls._build_args_rack_definition_create(compute_rack_definitions.Element)

        managed_resource_group_configuration = cls._args_schema.managed_resource_group_configuration
        managed_resource_group_configuration.location = AAZStrArg(
            options=["location"],
            help="The location of the managed resource group. If not specified, the location of the parent resource is chosen.",
        )
        managed_resource_group_configuration.name = AAZStrArg(
            options=["name"],
            help="The name for the managed resource group. If not specified, the unique name is automatically generated.",
            fmt=AAZStrArgFormat(
                max_length=75,
            ),
        )

        runtime_protection = cls._args_schema.runtime_protection
        runtime_protection.enforcement_level = AAZStrArg(
            options=["enforcement-level"],
            help="The mode of operation for runtime protection.",
            default="Disabled",
            enum={"Audit": "Audit", "Disabled": "Disabled", "OnDemand": "OnDemand", "Passive": "Passive", "RealTime": "RealTime"},
        )

        secret_archive = cls._args_schema.secret_archive
        secret_archive.key_vault_id = AAZResourceIdArg(
            options=["key-vault-id"],
            help="The resource ID of the key vault to archive the secrets of the cluster.",
            required=True,
        )
        secret_archive.use_key_vault = AAZStrArg(
            options=["use-key-vault"],
            help="The indicator if the specified key vault should be used to archive the secrets of the cluster.",
            default="False",
            enum={"False": "False", "True": "True"},
        )

        update_strategy = cls._args_schema.update_strategy
        update_strategy.max_unavailable = AAZIntArg(
            options=["max-unavailable"],
            help="The maximum number of worker nodes that can be offline within the increment of update, e.g., rack-by-rack. Limited by the maximum number of machines in the increment. Defaults to the whole increment size.",
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        update_strategy.strategy_type = AAZStrArg(
            options=["strategy-type"],
            help="The mode of operation for runtime protection.",
            required=True,
            enum={"Rack": "Rack"},
        )
        update_strategy.threshold_type = AAZStrArg(
            options=["threshold-type"],
            help="Selection of how the threshold should be evaluated.",
            required=True,
            enum={"CountSuccess": "CountSuccess", "PercentSuccess": "PercentSuccess"},
        )
        update_strategy.threshold_value = AAZIntArg(
            options=["threshold-value"],
            help="The numeric threshold value.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=0,
            ),
        )
        update_strategy.wait_time_minutes = AAZIntArg(
            options=["wait-time-minutes"],
            help="The time to wait between the increments of update defined by the strategy.",
            default=15,
            fmt=AAZIntArgFormat(
                maximum=60,
                minimum=0,
            ),
        )
        return cls._args_schema

    _args_administrative_credentials_create = None

    @classmethod
    def _build_args_administrative_credentials_create(cls, _schema):
        if cls._args_administrative_credentials_create is not None:
            _schema.password = cls._args_administrative_credentials_create.password
            _schema.username = cls._args_administrative_credentials_create.username
            return

        cls._args_administrative_credentials_create = AAZObjectArg()

        administrative_credentials_create = cls._args_administrative_credentials_create
        administrative_credentials_create.password = AAZStrArg(
            options=["password"],
            help="The password of the administrator of the device used during initialization.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        administrative_credentials_create.username = AAZStrArg(
            options=["username"],
            help="The username of the administrator of the device used during initialization.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        _schema.password = cls._args_administrative_credentials_create.password
        _schema.username = cls._args_administrative_credentials_create.username

    _args_rack_definition_create = None

    @classmethod
    def _build_args_rack_definition_create(cls, _schema):
        if cls._args_rack_definition_create is not None:
            _schema.availability_zone = cls._args_rack_definition_create.availability_zone
            _schema.bare_metal_machine_configuration_data = cls._args_rack_definition_create.bare_metal_machine_configuration_data
            _schema.network_rack_id = cls._args_rack_definition_create.network_rack_id
            _schema.rack_location = cls._args_rack_definition_create.rack_location
            _schema.rack_serial_number = cls._args_rack_definition_create.rack_serial_number
            _schema.rack_sku_id = cls._args_rack_definition_create.rack_sku_id
            _schema.storage_appliance_configuration_data = cls._args_rack_definition_create.storage_appliance_configuration_data
            return

        cls._args_rack_definition_create = AAZObjectArg()

        rack_definition_create = cls._args_rack_definition_create
        rack_definition_create.availability_zone = AAZStrArg(
            options=["availability-zone"],
            help="The zone name used for this rack when created.",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]{1,10}$",
            ),
        )
        rack_definition_create.bare_metal_machine_configuration_data = AAZListArg(
            options=["bare-metal-machine-configuration-data"],
            help="The unordered list of bare metal machine configuration.",
        )
        rack_definition_create.network_rack_id = AAZResourceIdArg(
            options=["network-rack-id"],
            help="The resource ID of the network rack that matches this rack definition.",
            required=True,
        )
        rack_definition_create.rack_location = AAZStrArg(
            options=["rack-location"],
            help="The free-form description of the rack's location.",
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        rack_definition_create.rack_serial_number = AAZStrArg(
            options=["rack-serial-number"],
            help="The unique identifier for the rack within Network Cloud cluster. An alternate unique alphanumeric value other than a serial number may be provided if desired.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=64,
                min_length=1,
            ),
        )
        rack_definition_create.rack_sku_id = AAZResourceIdArg(
            options=["rack-sku-id"],
            help="The resource ID of the sku for the rack being added.",
            required=True,
        )
        rack_definition_create.storage_appliance_configuration_data = AAZListArg(
            options=["storage-appliance-configuration-data"],
            help="The list of storage appliance configuration data for this rack.",
        )

        bare_metal_machine_configuration_data = cls._args_rack_definition_create.bare_metal_machine_configuration_data
        bare_metal_machine_configuration_data.Element = AAZObjectArg()

        _element = cls._args_rack_definition_create.bare_metal_machine_configuration_data.Element
        _element.bmc_credentials = AAZObjectArg(
            options=["bmc-credentials"],
            help="The credentials of the baseboard management controller on this bare metal machine.",
            required=True,
        )
        cls._build_args_administrative_credentials_create(_element.bmc_credentials)
        _element.bmc_mac_address = AAZStrArg(
            options=["bmc-mac-address"],
            help="The MAC address of the BMC for this machine.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
            ),
        )
        _element.boot_mac_address = AAZStrArg(
            options=["boot-mac-address"],
            help="The MAC address associated with the PXE NIC card.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$",
            ),
        )
        _element.machine_details = AAZStrArg(
            options=["machine-details"],
            help="The free-form additional information about the machine, e.g. an asset tag.",
            fmt=AAZStrArgFormat(
                max_length=256,
            ),
        )
        _element.machine_name = AAZStrArg(
            options=["machine-name"],
            help="The user-provided name for the bare metal machine created from this specification. If not provided, the machine name will be generated programmatically.",
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9]{0,62}[a-zA-Z0-9])$",
            ),
        )
        _element.rack_slot = AAZIntArg(
            options=["rack-slot"],
            help="The slot the physical machine is in the rack based on the BOM configuration.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=256,
                minimum=1,
            ),
        )
        _element.serial_number = AAZStrArg(
            options=["serial-number"],
            help="The serial number of the machine. Hardware suppliers may use an alternate value. For example, service tag.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=64,
            ),
        )

        storage_appliance_configuration_data = cls._args_rack_definition_create.storage_appliance_configuration_data
        storage_appliance_configuration_data.Element = AAZObjectArg()

        _element = cls._args_rack_definition_create.storage_appliance_configuration_data.Element
        _element.admin_credentials = AAZObjectArg(
            options=["admin-credentials"],
            help="The credentials of the administrative interface on this storage appliance.",
            required=True,
        )
        cls._build_args_administrative_credentials_create(_element.admin_credentials)
        _element.rack_slot = AAZIntArg(
            options=["rack-slot"],
            help="The slot that storage appliance is in the rack based on the BOM configuration.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=256,
                minimum=1,
            ),
        )
        _element.serial_number = AAZStrArg(
            options=["serial-number"],
            help="The serial number of the appliance.",
            required=True,
        )
        _element.storage_appliance_name = AAZStrArg(
            options=["storage-appliance-name"],
            help="The user-provided name for the storage appliance that will be created from this specification.",
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )

        _schema.availability_zone = cls._args_rack_definition_create.availability_zone
        _schema.bare_metal_machine_configuration_data = cls._args_rack_definition_create.bare_metal_machine_configuration_data
        _schema.network_rack_id = cls._args_rack_definition_create.network_rack_id
        _schema.rack_location = cls._args_rack_definition_create.rack_location
        _schema.rack_serial_number = cls._args_rack_definition_create.rack_serial_number
        _schema.rack_sku_id = cls._args_rack_definition_create.rack_sku_id
        _schema.storage_appliance_configuration_data = cls._args_rack_definition_create.storage_appliance_configuration_data

    def _execute_operations(self):
        self.pre_operations()
        yield self.ClustersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ClustersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/clusters/{clusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "clusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                _CreateHelper._build_schema_rack_definition_create(properties.set_prop("aggregatorOrSingleRackDefinition", AAZObjectType, ".aggregator_or_single_rack_definition", typ_kwargs={"flags": {"required": True}}))
                properties.set_prop("analyticsWorkspaceId", AAZStrType, ".analytics_workspace_id")
                properties.set_prop("clusterLocation", AAZStrType, ".cluster_location")
                properties.set_prop("clusterServicePrincipal", AAZObjectType, ".cluster_service_principal")
                properties.set_prop("clusterType", AAZStrType, ".cluster_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("clusterVersion", AAZStrType, ".cluster_version", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("computeDeploymentThreshold", AAZObjectType, ".compute_deployment_threshold")
                properties.set_prop("computeRackDefinitions", AAZListType, ".compute_rack_definitions")
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType, ".managed_resource_group_configuration")
                properties.set_prop("networkFabricId", AAZStrType, ".network_fabric_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("runtimeProtectionConfiguration", AAZObjectType, ".runtime_protection")
                properties.set_prop("secretArchive", AAZObjectType, ".secret_archive")
                properties.set_prop("updateStrategy", AAZObjectType, ".update_strategy")

            cluster_service_principal = _builder.get(".properties.clusterServicePrincipal")
            if cluster_service_principal is not None:
                cluster_service_principal.set_prop("applicationId", AAZStrType, ".application_id", typ_kwargs={"flags": {"required": True}})
                cluster_service_principal.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
                cluster_service_principal.set_prop("principalId", AAZStrType, ".principal_id", typ_kwargs={"flags": {"required": True}})
                cluster_service_principal.set_prop("tenantId", AAZStrType, ".tenant_id", typ_kwargs={"flags": {"required": True}})

            compute_deployment_threshold = _builder.get(".properties.computeDeploymentThreshold")
            if compute_deployment_threshold is not None:
                compute_deployment_threshold.set_prop("grouping", AAZStrType, ".grouping", typ_kwargs={"flags": {"required": True}})
                compute_deployment_threshold.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                compute_deployment_threshold.set_prop("value", AAZIntType, ".value", typ_kwargs={"flags": {"required": True}})

            compute_rack_definitions = _builder.get(".properties.computeRackDefinitions")
            if compute_rack_definitions is not None:
                _CreateHelper._build_schema_rack_definition_create(compute_rack_definitions.set_elements(AAZObjectType, "."))

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("location", AAZStrType, ".location")
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".name")

            runtime_protection_configuration = _builder.get(".properties.runtimeProtectionConfiguration")
            if runtime_protection_configuration is not None:
                runtime_protection_configuration.set_prop("enforcementLevel", AAZStrType, ".enforcement_level")

            secret_archive = _builder.get(".properties.secretArchive")
            if secret_archive is not None:
                secret_archive.set_prop("keyVaultId", AAZStrType, ".key_vault_id", typ_kwargs={"flags": {"required": True}})
                secret_archive.set_prop("useKeyVault", AAZStrType, ".use_key_vault")

            update_strategy = _builder.get(".properties.updateStrategy")
            if update_strategy is not None:
                update_strategy.set_prop("maxUnavailable", AAZIntType, ".max_unavailable")
                update_strategy.set_prop("strategyType", AAZStrType, ".strategy_type", typ_kwargs={"flags": {"required": True}})
                update_strategy.set_prop("thresholdType", AAZStrType, ".threshold_type", typ_kwargs={"flags": {"required": True}})
                update_strategy.set_prop("thresholdValue", AAZIntType, ".threshold_value", typ_kwargs={"flags": {"required": True}})
                update_strategy.set_prop("waitTimeMinutes", AAZIntType, ".wait_time_minutes")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
                flags={"required": True},
            )
            _CreateHelper._build_schema_extended_location_read(_schema_on_200_201.extended_location)
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.aggregator_or_single_rack_definition = AAZObjectType(
                serialized_name="aggregatorOrSingleRackDefinition",
                flags={"required": True},
            )
            _CreateHelper._build_schema_rack_definition_read(properties.aggregator_or_single_rack_definition)
            properties.analytics_workspace_id = AAZStrType(
                serialized_name="analyticsWorkspaceId",
            )
            properties.available_upgrade_versions = AAZListType(
                serialized_name="availableUpgradeVersions",
                flags={"read_only": True},
            )
            properties.cluster_capacity = AAZObjectType(
                serialized_name="clusterCapacity",
            )
            properties.cluster_connection_status = AAZStrType(
                serialized_name="clusterConnectionStatus",
                flags={"read_only": True},
            )
            properties.cluster_extended_location = AAZObjectType(
                serialized_name="clusterExtendedLocation",
            )
            _CreateHelper._build_schema_extended_location_read(properties.cluster_extended_location)
            properties.cluster_location = AAZStrType(
                serialized_name="clusterLocation",
            )
            properties.cluster_manager_connection_status = AAZStrType(
                serialized_name="clusterManagerConnectionStatus",
                flags={"read_only": True},
            )
            properties.cluster_manager_id = AAZStrType(
                serialized_name="clusterManagerId",
                flags={"read_only": True},
            )
            properties.cluster_service_principal = AAZObjectType(
                serialized_name="clusterServicePrincipal",
            )
            properties.cluster_type = AAZStrType(
                serialized_name="clusterType",
                flags={"required": True},
            )
            properties.cluster_version = AAZStrType(
                serialized_name="clusterVersion",
                flags={"required": True},
            )
            properties.compute_deployment_threshold = AAZObjectType(
                serialized_name="computeDeploymentThreshold",
            )
            properties.compute_rack_definitions = AAZListType(
                serialized_name="computeRackDefinitions",
            )
            properties.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            properties.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            properties.hybrid_aks_extended_location = AAZObjectType(
                serialized_name="hybridAksExtendedLocation",
            )
            _CreateHelper._build_schema_extended_location_read(properties.hybrid_aks_extended_location)
            properties.managed_resource_group_configuration = AAZObjectType(
                serialized_name="managedResourceGroupConfiguration",
            )
            properties.manual_action_count = AAZIntType(
                serialized_name="manualActionCount",
                flags={"read_only": True},
            )
            properties.network_fabric_id = AAZStrType(
                serialized_name="networkFabricId",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.runtime_protection_configuration = AAZObjectType(
                serialized_name="runtimeProtectionConfiguration",
            )
            properties.secret_archive = AAZObjectType(
                serialized_name="secretArchive",
            )
            properties.support_expiry_date = AAZStrType(
                serialized_name="supportExpiryDate",
                flags={"read_only": True},
            )
            properties.update_strategy = AAZObjectType(
                serialized_name="updateStrategy",
            )
            properties.workload_resource_ids = AAZListType(
                serialized_name="workloadResourceIds",
                flags={"read_only": True},
            )

            available_upgrade_versions = cls._schema_on_200_201.properties.available_upgrade_versions
            available_upgrade_versions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.available_upgrade_versions.Element
            _element.control_impact = AAZStrType(
                serialized_name="controlImpact",
                flags={"read_only": True},
            )
            _element.expected_duration = AAZStrType(
                serialized_name="expectedDuration",
                flags={"read_only": True},
            )
            _element.impact_description = AAZStrType(
                serialized_name="impactDescription",
                flags={"read_only": True},
            )
            _element.support_expiry_date = AAZStrType(
                serialized_name="supportExpiryDate",
                flags={"read_only": True},
            )
            _element.target_cluster_version = AAZStrType(
                serialized_name="targetClusterVersion",
                flags={"read_only": True},
            )
            _element.workload_impact = AAZStrType(
                serialized_name="workloadImpact",
                flags={"read_only": True},
            )

            cluster_capacity = cls._schema_on_200_201.properties.cluster_capacity
            cluster_capacity.available_appliance_storage_gb = AAZIntType(
                serialized_name="availableApplianceStorageGB",
            )
            cluster_capacity.available_core_count = AAZIntType(
                serialized_name="availableCoreCount",
            )
            cluster_capacity.available_host_storage_gb = AAZIntType(
                serialized_name="availableHostStorageGB",
            )
            cluster_capacity.available_memory_gb = AAZIntType(
                serialized_name="availableMemoryGB",
            )
            cluster_capacity.total_appliance_storage_gb = AAZIntType(
                serialized_name="totalApplianceStorageGB",
            )
            cluster_capacity.total_core_count = AAZIntType(
                serialized_name="totalCoreCount",
            )
            cluster_capacity.total_host_storage_gb = AAZIntType(
                serialized_name="totalHostStorageGB",
            )
            cluster_capacity.total_memory_gb = AAZIntType(
                serialized_name="totalMemoryGB",
            )

            cluster_service_principal = cls._schema_on_200_201.properties.cluster_service_principal
            cluster_service_principal.application_id = AAZStrType(
                serialized_name="applicationId",
                flags={"required": True},
            )
            cluster_service_principal.password = AAZStrType(
                flags={"secret": True},
            )
            cluster_service_principal.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            cluster_service_principal.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"required": True},
            )

            compute_deployment_threshold = cls._schema_on_200_201.properties.compute_deployment_threshold
            compute_deployment_threshold.grouping = AAZStrType(
                flags={"required": True},
            )
            compute_deployment_threshold.type = AAZStrType(
                flags={"required": True},
            )
            compute_deployment_threshold.value = AAZIntType(
                flags={"required": True},
            )

            compute_rack_definitions = cls._schema_on_200_201.properties.compute_rack_definitions
            compute_rack_definitions.Element = AAZObjectType()
            _CreateHelper._build_schema_rack_definition_read(compute_rack_definitions.Element)

            managed_resource_group_configuration = cls._schema_on_200_201.properties.managed_resource_group_configuration
            managed_resource_group_configuration.location = AAZStrType()
            managed_resource_group_configuration.name = AAZStrType()

            runtime_protection_configuration = cls._schema_on_200_201.properties.runtime_protection_configuration
            runtime_protection_configuration.enforcement_level = AAZStrType(
                serialized_name="enforcementLevel",
            )

            secret_archive = cls._schema_on_200_201.properties.secret_archive
            secret_archive.key_vault_id = AAZStrType(
                serialized_name="keyVaultId",
                flags={"required": True},
            )
            secret_archive.use_key_vault = AAZStrType(
                serialized_name="useKeyVault",
            )

            update_strategy = cls._schema_on_200_201.properties.update_strategy
            update_strategy.max_unavailable = AAZIntType(
                serialized_name="maxUnavailable",
            )
            update_strategy.strategy_type = AAZStrType(
                serialized_name="strategyType",
                flags={"required": True},
            )
            update_strategy.threshold_type = AAZStrType(
                serialized_name="thresholdType",
                flags={"required": True},
            )
            update_strategy.threshold_value = AAZIntType(
                serialized_name="thresholdValue",
                flags={"required": True},
            )
            update_strategy.wait_time_minutes = AAZIntType(
                serialized_name="waitTimeMinutes",
            )

            workload_resource_ids = cls._schema_on_200_201.properties.workload_resource_ids
            workload_resource_ids.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_administrative_credentials_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
        _builder.set_prop("username", AAZStrType, ".username", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_rack_definition_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("availabilityZone", AAZStrType, ".availability_zone")
        _builder.set_prop("bareMetalMachineConfigurationData", AAZListType, ".bare_metal_machine_configuration_data")
        _builder.set_prop("networkRackId", AAZStrType, ".network_rack_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("rackLocation", AAZStrType, ".rack_location")
        _builder.set_prop("rackSerialNumber", AAZStrType, ".rack_serial_number", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("rackSkuId", AAZStrType, ".rack_sku_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("storageApplianceConfigurationData", AAZListType, ".storage_appliance_configuration_data")

        bare_metal_machine_configuration_data = _builder.get(".bareMetalMachineConfigurationData")
        if bare_metal_machine_configuration_data is not None:
            bare_metal_machine_configuration_data.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".bareMetalMachineConfigurationData[]")
        if _elements is not None:
            cls._build_schema_administrative_credentials_create(_elements.set_prop("bmcCredentials", AAZObjectType, ".bmc_credentials", typ_kwargs={"flags": {"required": True}}))
            _elements.set_prop("bmcMacAddress", AAZStrType, ".bmc_mac_address", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("bootMacAddress", AAZStrType, ".boot_mac_address", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("machineDetails", AAZStrType, ".machine_details")
            _elements.set_prop("machineName", AAZStrType, ".machine_name")
            _elements.set_prop("rackSlot", AAZIntType, ".rack_slot", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("serialNumber", AAZStrType, ".serial_number", typ_kwargs={"flags": {"required": True}})

        storage_appliance_configuration_data = _builder.get(".storageApplianceConfigurationData")
        if storage_appliance_configuration_data is not None:
            storage_appliance_configuration_data.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".storageApplianceConfigurationData[]")
        if _elements is not None:
            cls._build_schema_administrative_credentials_create(_elements.set_prop("adminCredentials", AAZObjectType, ".admin_credentials", typ_kwargs={"flags": {"required": True}}))
            _elements.set_prop("rackSlot", AAZIntType, ".rack_slot", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("serialNumber", AAZStrType, ".serial_number", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("storageApplianceName", AAZStrType, ".storage_appliance_name")

    _schema_administrative_credentials_read = None

    @classmethod
    def _build_schema_administrative_credentials_read(cls, _schema):
        if cls._schema_administrative_credentials_read is not None:
            _schema.password = cls._schema_administrative_credentials_read.password
            _schema.username = cls._schema_administrative_credentials_read.username
            return

        cls._schema_administrative_credentials_read = _schema_administrative_credentials_read = AAZObjectType()

        administrative_credentials_read = _schema_administrative_credentials_read
        administrative_credentials_read.password = AAZStrType(
            flags={"secret": True},
        )
        administrative_credentials_read.username = AAZStrType(
            flags={"required": True},
        )

        _schema.password = cls._schema_administrative_credentials_read.password
        _schema.username = cls._schema_administrative_credentials_read.username

    _schema_extended_location_read = None

    @classmethod
    def _build_schema_extended_location_read(cls, _schema):
        if cls._schema_extended_location_read is not None:
            _schema.name = cls._schema_extended_location_read.name
            _schema.type = cls._schema_extended_location_read.type
            return

        cls._schema_extended_location_read = _schema_extended_location_read = AAZObjectType()

        extended_location_read = _schema_extended_location_read
        extended_location_read.name = AAZStrType(
            flags={"required": True},
        )
        extended_location_read.type = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_extended_location_read.name
        _schema.type = cls._schema_extended_location_read.type

    _schema_rack_definition_read = None

    @classmethod
    def _build_schema_rack_definition_read(cls, _schema):
        if cls._schema_rack_definition_read is not None:
            _schema.availability_zone = cls._schema_rack_definition_read.availability_zone
            _schema.bare_metal_machine_configuration_data = cls._schema_rack_definition_read.bare_metal_machine_configuration_data
            _schema.network_rack_id = cls._schema_rack_definition_read.network_rack_id
            _schema.rack_location = cls._schema_rack_definition_read.rack_location
            _schema.rack_serial_number = cls._schema_rack_definition_read.rack_serial_number
            _schema.rack_sku_id = cls._schema_rack_definition_read.rack_sku_id
            _schema.storage_appliance_configuration_data = cls._schema_rack_definition_read.storage_appliance_configuration_data
            return

        cls._schema_rack_definition_read = _schema_rack_definition_read = AAZObjectType()

        rack_definition_read = _schema_rack_definition_read
        rack_definition_read.availability_zone = AAZStrType(
            serialized_name="availabilityZone",
        )
        rack_definition_read.bare_metal_machine_configuration_data = AAZListType(
            serialized_name="bareMetalMachineConfigurationData",
        )
        rack_definition_read.network_rack_id = AAZStrType(
            serialized_name="networkRackId",
            flags={"required": True},
        )
        rack_definition_read.rack_location = AAZStrType(
            serialized_name="rackLocation",
        )
        rack_definition_read.rack_serial_number = AAZStrType(
            serialized_name="rackSerialNumber",
            flags={"required": True},
        )
        rack_definition_read.rack_sku_id = AAZStrType(
            serialized_name="rackSkuId",
            flags={"required": True},
        )
        rack_definition_read.storage_appliance_configuration_data = AAZListType(
            serialized_name="storageApplianceConfigurationData",
        )

        bare_metal_machine_configuration_data = _schema_rack_definition_read.bare_metal_machine_configuration_data
        bare_metal_machine_configuration_data.Element = AAZObjectType()

        _element = _schema_rack_definition_read.bare_metal_machine_configuration_data.Element
        _element.bmc_connection_string = AAZStrType(
            serialized_name="bmcConnectionString",
            flags={"read_only": True},
        )
        _element.bmc_credentials = AAZObjectType(
            serialized_name="bmcCredentials",
            flags={"required": True},
        )
        cls._build_schema_administrative_credentials_read(_element.bmc_credentials)
        _element.bmc_mac_address = AAZStrType(
            serialized_name="bmcMacAddress",
            flags={"required": True},
        )
        _element.boot_mac_address = AAZStrType(
            serialized_name="bootMacAddress",
            flags={"required": True},
        )
        _element.machine_details = AAZStrType(
            serialized_name="machineDetails",
        )
        _element.machine_name = AAZStrType(
            serialized_name="machineName",
        )
        _element.rack_slot = AAZIntType(
            serialized_name="rackSlot",
            flags={"required": True},
        )
        _element.serial_number = AAZStrType(
            serialized_name="serialNumber",
            flags={"required": True},
        )

        storage_appliance_configuration_data = _schema_rack_definition_read.storage_appliance_configuration_data
        storage_appliance_configuration_data.Element = AAZObjectType()

        _element = _schema_rack_definition_read.storage_appliance_configuration_data.Element
        _element.admin_credentials = AAZObjectType(
            serialized_name="adminCredentials",
            flags={"required": True},
        )
        cls._build_schema_administrative_credentials_read(_element.admin_credentials)
        _element.rack_slot = AAZIntType(
            serialized_name="rackSlot",
            flags={"required": True},
        )
        _element.serial_number = AAZStrType(
            serialized_name="serialNumber",
            flags={"required": True},
        )
        _element.storage_appliance_name = AAZStrType(
            serialized_name="storageApplianceName",
        )

        _schema.availability_zone = cls._schema_rack_definition_read.availability_zone
        _schema.bare_metal_machine_configuration_data = cls._schema_rack_definition_read.bare_metal_machine_configuration_data
        _schema.network_rack_id = cls._schema_rack_definition_read.network_rack_id
        _schema.rack_location = cls._schema_rack_definition_read.rack_location
        _schema.rack_serial_number = cls._schema_rack_definition_read.rack_serial_number
        _schema.rack_sku_id = cls._schema_rack_definition_read.rack_sku_id
        _schema.storage_appliance_configuration_data = cls._schema_rack_definition_read.storage_appliance_configuration_data


__all__ = ["Create"]
