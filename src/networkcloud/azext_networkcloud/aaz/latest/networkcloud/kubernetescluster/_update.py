# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkcloud kubernetescluster update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update the properties of the provided Kubernetes cluster, or update the tags associated with the Kubernetes cluster. Properties and tag updates can be done independently.

    :example: Patch Kubernetes cluster
        az networkcloud kubernetescluster update --name "kubernetesClusterName" --resource-group "resourceGroupName" --kubernetes-version "1.25.4" --control-plane-node-configuration count="3" --tags key1="myvalue1" key2="myvalue2"

    :example: Update Kubernetes cluster administrator credentials
        az networkcloud kubernetescluster update --name "kubernetesClusterName" --resource-group "resourceGroupName" --ssh-key-values 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgt5SjWU= admin@vm'

    :example: Update Kubernetes cluster control node administrator credentials
        az networkcloud kubernetescluster update --name "kubernetesClusterName" --resource-group "resourceGroupName" --control-plane-node-configuration ssh-key-values="['ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgt5SjWU= admin@vm']"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkcloud/kubernetesclusters/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.kubernetes_cluster_name = AAZStrArg(
            options=["-n", "--name", "--kubernetes-cluster-name"],
            help="The name of the Kubernetes cluster.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "AdministratorConfiguration"

        _args_schema = cls._args_schema
        _args_schema.ssh_public_keys = AAZListArg(
            options=["--ssh-public-keys"],
            arg_group="AdministratorConfiguration",
            help="SshPublicKey represents the public key used to authenticate with a resource through SSH.",
        )

        ssh_public_keys = cls._args_schema.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()

        _element = cls._args_schema.ssh_public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="The SSH public key data.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        # define Arg Group "KubernetesClusterUpdateParameters"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="KubernetesClusterUpdateParameters",
            help="The Azure resource tags that will replace the existing ones.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.control_plane_node_configuration = AAZObjectArg(
            options=["--control-plane-node-configuration"],
            arg_group="Properties",
            help="The defining characteristics of the control plane that can be patched for this Kubernetes cluster.",
        )
        _args_schema.kubernetes_version = AAZStrArg(
            options=["--kubernetes-version"],
            arg_group="Properties",
            help="The Kubernetes version for this cluster. Accepts n.n, n.n.n, and n.n.n-n format. The interpreted version used will be resolved into this field after creation or update.",
        )

        control_plane_node_configuration = cls._args_schema.control_plane_node_configuration
        control_plane_node_configuration.ssh_public_keys = AAZListArg(
            options=["ssh-public-keys"],
            help="SshPublicKey represents the public key used to authenticate with a resource through SSH.",
        )
        control_plane_node_configuration.count = AAZIntArg(
            options=["count"],
            help="The number of virtual machines that use this configuration.",
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )

        ssh_public_keys = cls._args_schema.control_plane_node_configuration.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()

        _element = cls._args_schema.control_plane_node_configuration.ssh_public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="The SSH public key data.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.KubernetesClustersUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class KubernetesClustersUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "kubernetesClusterName", self.ctx.args.kubernetes_cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administratorConfiguration", AAZObjectType)
                properties.set_prop("controlPlaneNodeConfiguration", AAZObjectType, ".control_plane_node_configuration")
                properties.set_prop("kubernetesVersion", AAZStrType, ".kubernetes_version")

            administrator_configuration = _builder.get(".properties.administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                ssh_public_keys.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.administratorConfiguration.sshPublicKeys[]")
            if _elements is not None:
                _elements.set_prop("keyData", AAZStrType, ".key_data", typ_kwargs={"flags": {"required": True}})

            control_plane_node_configuration = _builder.get(".properties.controlPlaneNodeConfiguration")
            if control_plane_node_configuration is not None:
                control_plane_node_configuration.set_prop("administratorConfiguration", AAZObjectType)
                control_plane_node_configuration.set_prop("count", AAZIntType, ".count")

            administrator_configuration = _builder.get(".properties.controlPlaneNodeConfiguration.administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.controlPlaneNodeConfiguration.administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                ssh_public_keys.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.controlPlaneNodeConfiguration.administratorConfiguration.sshPublicKeys[]")
            if _elements is not None:
                _elements.set_prop("keyData", AAZStrType, ".key_data", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_kubernetes_cluster_read(cls._schema_on_200)

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""

    _schema_kubernetes_cluster_read = None

    @classmethod
    def _build_schema_kubernetes_cluster_read(cls, _schema):
        if cls._schema_kubernetes_cluster_read is not None:
            _schema.extended_location = cls._schema_kubernetes_cluster_read.extended_location
            _schema.id = cls._schema_kubernetes_cluster_read.id
            _schema.location = cls._schema_kubernetes_cluster_read.location
            _schema.name = cls._schema_kubernetes_cluster_read.name
            _schema.properties = cls._schema_kubernetes_cluster_read.properties
            _schema.system_data = cls._schema_kubernetes_cluster_read.system_data
            _schema.tags = cls._schema_kubernetes_cluster_read.tags
            _schema.type = cls._schema_kubernetes_cluster_read.type
            return

        cls._schema_kubernetes_cluster_read = _schema_kubernetes_cluster_read = AAZObjectType()

        kubernetes_cluster_read = _schema_kubernetes_cluster_read
        kubernetes_cluster_read.extended_location = AAZObjectType(
            serialized_name="extendedLocation",
            flags={"required": True},
        )
        kubernetes_cluster_read.id = AAZStrType(
            flags={"read_only": True},
        )
        kubernetes_cluster_read.location = AAZStrType(
            flags={"required": True},
        )
        kubernetes_cluster_read.name = AAZStrType(
            flags={"read_only": True},
        )
        kubernetes_cluster_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        kubernetes_cluster_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        kubernetes_cluster_read.tags = AAZDictType()
        kubernetes_cluster_read.type = AAZStrType(
            flags={"read_only": True},
        )

        extended_location = _schema_kubernetes_cluster_read.extended_location
        extended_location.name = AAZStrType(
            flags={"required": True},
        )
        extended_location.type = AAZStrType(
            flags={"required": True},
        )

        properties = _schema_kubernetes_cluster_read.properties
        properties.aad_configuration = AAZObjectType(
            serialized_name="aadConfiguration",
        )
        properties.administrator_configuration = AAZObjectType(
            serialized_name="administratorConfiguration",
        )
        properties.attached_network_ids = AAZListType(
            serialized_name="attachedNetworkIds",
            flags={"read_only": True},
        )
        properties.available_upgrades = AAZListType(
            serialized_name="availableUpgrades",
            flags={"read_only": True},
        )
        properties.cluster_id = AAZStrType(
            serialized_name="clusterId",
            flags={"read_only": True},
        )
        properties.connected_cluster_id = AAZStrType(
            serialized_name="connectedClusterId",
            flags={"read_only": True},
        )
        properties.control_plane_kubernetes_version = AAZStrType(
            serialized_name="controlPlaneKubernetesVersion",
            flags={"read_only": True},
        )
        properties.control_plane_node_configuration = AAZObjectType(
            serialized_name="controlPlaneNodeConfiguration",
            flags={"required": True},
        )
        properties.detailed_status = AAZStrType(
            serialized_name="detailedStatus",
            flags={"read_only": True},
        )
        properties.detailed_status_message = AAZStrType(
            serialized_name="detailedStatusMessage",
            flags={"read_only": True},
        )
        properties.feature_statuses = AAZListType(
            serialized_name="featureStatuses",
            flags={"read_only": True},
        )
        properties.initial_agent_pool_configurations = AAZListType(
            serialized_name="initialAgentPoolConfigurations",
            flags={"required": True},
        )
        properties.kubernetes_version = AAZStrType(
            serialized_name="kubernetesVersion",
            flags={"required": True},
        )
        properties.managed_resource_group_configuration = AAZObjectType(
            serialized_name="managedResourceGroupConfiguration",
        )
        properties.network_configuration = AAZObjectType(
            serialized_name="networkConfiguration",
            flags={"required": True},
        )
        properties.nodes = AAZListType(
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        aad_configuration = _schema_kubernetes_cluster_read.properties.aad_configuration
        aad_configuration.admin_group_object_ids = AAZListType(
            serialized_name="adminGroupObjectIds",
            flags={"required": True},
        )

        admin_group_object_ids = _schema_kubernetes_cluster_read.properties.aad_configuration.admin_group_object_ids
        admin_group_object_ids.Element = AAZStrType()

        administrator_configuration = _schema_kubernetes_cluster_read.properties.administrator_configuration
        administrator_configuration.admin_username = AAZStrType(
            serialized_name="adminUsername",
        )
        administrator_configuration.ssh_public_keys = AAZListType(
            serialized_name="sshPublicKeys",
        )

        ssh_public_keys = _schema_kubernetes_cluster_read.properties.administrator_configuration.ssh_public_keys
        ssh_public_keys.Element = AAZObjectType()
        cls._build_schema_ssh_public_key_read(ssh_public_keys.Element)

        attached_network_ids = _schema_kubernetes_cluster_read.properties.attached_network_ids
        attached_network_ids.Element = AAZStrType()

        available_upgrades = _schema_kubernetes_cluster_read.properties.available_upgrades
        available_upgrades.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.available_upgrades.Element
        _element.availability_lifecycle = AAZStrType(
            serialized_name="availabilityLifecycle",
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        control_plane_node_configuration = _schema_kubernetes_cluster_read.properties.control_plane_node_configuration
        control_plane_node_configuration.administrator_configuration = AAZObjectType(
            serialized_name="administratorConfiguration",
        )
        control_plane_node_configuration.availability_zones = AAZListType(
            serialized_name="availabilityZones",
        )
        control_plane_node_configuration.count = AAZIntType(
            flags={"required": True},
        )
        control_plane_node_configuration.vm_sku_name = AAZStrType(
            serialized_name="vmSkuName",
            flags={"required": True},
        )

        administrator_configuration = _schema_kubernetes_cluster_read.properties.control_plane_node_configuration.administrator_configuration
        administrator_configuration.admin_username = AAZStrType(
            serialized_name="adminUsername",
        )
        administrator_configuration.ssh_public_keys = AAZListType(
            serialized_name="sshPublicKeys",
        )

        ssh_public_keys = _schema_kubernetes_cluster_read.properties.control_plane_node_configuration.administrator_configuration.ssh_public_keys
        ssh_public_keys.Element = AAZObjectType()
        cls._build_schema_ssh_public_key_read(ssh_public_keys.Element)

        availability_zones = _schema_kubernetes_cluster_read.properties.control_plane_node_configuration.availability_zones
        availability_zones.Element = AAZStrType()

        feature_statuses = _schema_kubernetes_cluster_read.properties.feature_statuses
        feature_statuses.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.feature_statuses.Element
        _element.detailed_status = AAZStrType(
            serialized_name="detailedStatus",
            flags={"read_only": True},
        )
        _element.detailed_status_message = AAZStrType(
            serialized_name="detailedStatusMessage",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        initial_agent_pool_configurations = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations
        initial_agent_pool_configurations.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element
        _element.administrator_configuration = AAZObjectType(
            serialized_name="administratorConfiguration",
        )
        _element.agent_options = AAZObjectType(
            serialized_name="agentOptions",
        )
        _element.attached_network_configuration = AAZObjectType(
            serialized_name="attachedNetworkConfiguration",
        )
        _element.availability_zones = AAZListType(
            serialized_name="availabilityZones",
        )
        _element.count = AAZIntType(
            flags={"required": True},
        )
        _element.labels = AAZListType()
        _element.mode = AAZStrType(
            flags={"required": True},
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )
        _element.taints = AAZListType()
        _element.upgrade_settings = AAZObjectType(
            serialized_name="upgradeSettings",
        )
        _element.vm_sku_name = AAZStrType(
            serialized_name="vmSkuName",
            flags={"required": True},
        )

        administrator_configuration = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.administrator_configuration
        administrator_configuration.admin_username = AAZStrType(
            serialized_name="adminUsername",
        )
        administrator_configuration.ssh_public_keys = AAZListType(
            serialized_name="sshPublicKeys",
        )

        ssh_public_keys = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.administrator_configuration.ssh_public_keys
        ssh_public_keys.Element = AAZObjectType()
        cls._build_schema_ssh_public_key_read(ssh_public_keys.Element)

        agent_options = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.agent_options
        agent_options.hugepages_count = AAZIntType(
            serialized_name="hugepagesCount",
            flags={"required": True},
        )
        agent_options.hugepages_size = AAZStrType(
            serialized_name="hugepagesSize",
        )

        attached_network_configuration = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.attached_network_configuration
        attached_network_configuration.l2_networks = AAZListType(
            serialized_name="l2Networks",
        )
        attached_network_configuration.l3_networks = AAZListType(
            serialized_name="l3Networks",
        )
        attached_network_configuration.trunked_networks = AAZListType(
            serialized_name="trunkedNetworks",
        )

        l2_networks = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.attached_network_configuration.l2_networks
        l2_networks.Element = AAZObjectType()
        cls._build_schema_l2_network_attachment_configuration_read(l2_networks.Element)

        l3_networks = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.attached_network_configuration.l3_networks
        l3_networks.Element = AAZObjectType()
        cls._build_schema_l3_network_attachment_configuration_read(l3_networks.Element)

        trunked_networks = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.attached_network_configuration.trunked_networks
        trunked_networks.Element = AAZObjectType()
        cls._build_schema_trunked_network_attachment_configuration_read(trunked_networks.Element)

        availability_zones = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.availability_zones
        availability_zones.Element = AAZStrType()

        labels = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.labels
        labels.Element = AAZObjectType()
        cls._build_schema_kubernetes_label_read(labels.Element)

        taints = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.taints
        taints.Element = AAZObjectType()
        cls._build_schema_kubernetes_label_read(taints.Element)

        upgrade_settings = _schema_kubernetes_cluster_read.properties.initial_agent_pool_configurations.Element.upgrade_settings
        upgrade_settings.max_surge = AAZStrType(
            serialized_name="maxSurge",
        )

        managed_resource_group_configuration = _schema_kubernetes_cluster_read.properties.managed_resource_group_configuration
        managed_resource_group_configuration.location = AAZStrType()
        managed_resource_group_configuration.name = AAZStrType()

        network_configuration = _schema_kubernetes_cluster_read.properties.network_configuration
        network_configuration.attached_network_configuration = AAZObjectType(
            serialized_name="attachedNetworkConfiguration",
        )
        network_configuration.bgp_service_load_balancer_configuration = AAZObjectType(
            serialized_name="bgpServiceLoadBalancerConfiguration",
        )
        network_configuration.cloud_services_network_id = AAZStrType(
            serialized_name="cloudServicesNetworkId",
            flags={"required": True},
        )
        network_configuration.cni_network_id = AAZStrType(
            serialized_name="cniNetworkId",
            flags={"required": True},
        )
        network_configuration.dns_service_ip = AAZStrType(
            serialized_name="dnsServiceIp",
        )
        network_configuration.pod_cidrs = AAZListType(
            serialized_name="podCidrs",
        )
        network_configuration.service_cidrs = AAZListType(
            serialized_name="serviceCidrs",
        )

        attached_network_configuration = _schema_kubernetes_cluster_read.properties.network_configuration.attached_network_configuration
        attached_network_configuration.l2_networks = AAZListType(
            serialized_name="l2Networks",
        )
        attached_network_configuration.l3_networks = AAZListType(
            serialized_name="l3Networks",
        )
        attached_network_configuration.trunked_networks = AAZListType(
            serialized_name="trunkedNetworks",
        )

        l2_networks = _schema_kubernetes_cluster_read.properties.network_configuration.attached_network_configuration.l2_networks
        l2_networks.Element = AAZObjectType()
        cls._build_schema_l2_network_attachment_configuration_read(l2_networks.Element)

        l3_networks = _schema_kubernetes_cluster_read.properties.network_configuration.attached_network_configuration.l3_networks
        l3_networks.Element = AAZObjectType()
        cls._build_schema_l3_network_attachment_configuration_read(l3_networks.Element)

        trunked_networks = _schema_kubernetes_cluster_read.properties.network_configuration.attached_network_configuration.trunked_networks
        trunked_networks.Element = AAZObjectType()
        cls._build_schema_trunked_network_attachment_configuration_read(trunked_networks.Element)

        bgp_service_load_balancer_configuration = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration
        bgp_service_load_balancer_configuration.bgp_advertisements = AAZListType(
            serialized_name="bgpAdvertisements",
        )
        bgp_service_load_balancer_configuration.bgp_peers = AAZListType(
            serialized_name="bgpPeers",
        )
        bgp_service_load_balancer_configuration.fabric_peering_enabled = AAZStrType(
            serialized_name="fabricPeeringEnabled",
        )
        bgp_service_load_balancer_configuration.ip_address_pools = AAZListType(
            serialized_name="ipAddressPools",
        )

        bgp_advertisements = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements
        bgp_advertisements.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element
        _element.advertise_to_fabric = AAZStrType(
            serialized_name="advertiseToFabric",
        )
        _element.communities = AAZListType()
        _element.ip_address_pools = AAZListType(
            serialized_name="ipAddressPools",
            flags={"required": True},
        )
        _element.peers = AAZListType()

        communities = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.communities
        communities.Element = AAZStrType()

        ip_address_pools = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.ip_address_pools
        ip_address_pools.Element = AAZStrType()

        peers = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.peers
        peers.Element = AAZStrType()

        bgp_peers = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_peers
        bgp_peers.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_peers.Element
        _element.bfd_enabled = AAZStrType(
            serialized_name="bfdEnabled",
        )
        _element.bgp_multi_hop = AAZStrType(
            serialized_name="bgpMultiHop",
        )
        _element.hold_time = AAZStrType(
            serialized_name="holdTime",
        )
        _element.keep_alive_time = AAZStrType(
            serialized_name="keepAliveTime",
        )
        _element.my_asn = AAZIntType(
            serialized_name="myAsn",
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )
        _element.peer_address = AAZStrType(
            serialized_name="peerAddress",
            flags={"required": True},
        )
        _element.peer_asn = AAZIntType(
            serialized_name="peerAsn",
            flags={"required": True},
        )
        _element.peer_port = AAZIntType(
            serialized_name="peerPort",
        )

        ip_address_pools = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools
        ip_address_pools.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element
        _element.addresses = AAZListType(
            flags={"required": True},
        )
        _element.auto_assign = AAZStrType(
            serialized_name="autoAssign",
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )
        _element.only_use_host_ips = AAZStrType(
            serialized_name="onlyUseHostIps",
        )

        addresses = _schema_kubernetes_cluster_read.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element.addresses
        addresses.Element = AAZStrType()

        pod_cidrs = _schema_kubernetes_cluster_read.properties.network_configuration.pod_cidrs
        pod_cidrs.Element = AAZStrType()

        service_cidrs = _schema_kubernetes_cluster_read.properties.network_configuration.service_cidrs
        service_cidrs.Element = AAZStrType()

        nodes = _schema_kubernetes_cluster_read.properties.nodes
        nodes.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.nodes.Element
        _element.agent_pool_id = AAZStrType(
            serialized_name="agentPoolId",
            flags={"read_only": True},
        )
        _element.availability_zone = AAZStrType(
            serialized_name="availabilityZone",
            flags={"read_only": True},
        )
        _element.bare_metal_machine_id = AAZStrType(
            serialized_name="bareMetalMachineId",
            flags={"read_only": True},
        )
        _element.cpu_cores = AAZIntType(
            serialized_name="cpuCores",
            flags={"read_only": True},
        )
        _element.detailed_status = AAZStrType(
            serialized_name="detailedStatus",
            flags={"read_only": True},
        )
        _element.detailed_status_message = AAZStrType(
            serialized_name="detailedStatusMessage",
            flags={"read_only": True},
        )
        _element.disk_size_gb = AAZIntType(
            serialized_name="diskSizeGB",
            flags={"read_only": True},
        )
        _element.image = AAZStrType(
            flags={"read_only": True},
        )
        _element.kubernetes_version = AAZStrType(
            serialized_name="kubernetesVersion",
            flags={"read_only": True},
        )
        _element.labels = AAZListType(
            flags={"read_only": True},
        )
        _element.memory_size_gb = AAZIntType(
            serialized_name="memorySizeGB",
            flags={"read_only": True},
        )
        _element.mode = AAZStrType(
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.network_attachments = AAZListType(
            serialized_name="networkAttachments",
            flags={"read_only": True},
        )
        _element.power_state = AAZStrType(
            serialized_name="powerState",
            flags={"read_only": True},
        )
        _element.role = AAZStrType(
            flags={"read_only": True},
        )
        _element.taints = AAZListType(
            flags={"read_only": True},
        )
        _element.vm_sku_name = AAZStrType(
            serialized_name="vmSkuName",
            flags={"read_only": True},
        )

        labels = _schema_kubernetes_cluster_read.properties.nodes.Element.labels
        labels.Element = AAZObjectType()
        cls._build_schema_kubernetes_label_read(labels.Element)

        network_attachments = _schema_kubernetes_cluster_read.properties.nodes.Element.network_attachments
        network_attachments.Element = AAZObjectType()

        _element = _schema_kubernetes_cluster_read.properties.nodes.Element.network_attachments.Element
        _element.attached_network_id = AAZStrType(
            serialized_name="attachedNetworkId",
            flags={"required": True},
        )
        _element.default_gateway = AAZStrType(
            serialized_name="defaultGateway",
        )
        _element.ip_allocation_method = AAZStrType(
            serialized_name="ipAllocationMethod",
            flags={"required": True},
        )
        _element.ipv4_address = AAZStrType(
            serialized_name="ipv4Address",
        )
        _element.ipv6_address = AAZStrType(
            serialized_name="ipv6Address",
        )
        _element.mac_address = AAZStrType(
            serialized_name="macAddress",
            flags={"read_only": True},
        )
        _element.network_attachment_name = AAZStrType(
            serialized_name="networkAttachmentName",
        )

        taints = _schema_kubernetes_cluster_read.properties.nodes.Element.taints
        taints.Element = AAZObjectType()
        cls._build_schema_kubernetes_label_read(taints.Element)

        system_data = _schema_kubernetes_cluster_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_kubernetes_cluster_read.tags
        tags.Element = AAZStrType()

        _schema.extended_location = cls._schema_kubernetes_cluster_read.extended_location
        _schema.id = cls._schema_kubernetes_cluster_read.id
        _schema.location = cls._schema_kubernetes_cluster_read.location
        _schema.name = cls._schema_kubernetes_cluster_read.name
        _schema.properties = cls._schema_kubernetes_cluster_read.properties
        _schema.system_data = cls._schema_kubernetes_cluster_read.system_data
        _schema.tags = cls._schema_kubernetes_cluster_read.tags
        _schema.type = cls._schema_kubernetes_cluster_read.type

    _schema_kubernetes_label_read = None

    @classmethod
    def _build_schema_kubernetes_label_read(cls, _schema):
        if cls._schema_kubernetes_label_read is not None:
            _schema.key = cls._schema_kubernetes_label_read.key
            _schema.value = cls._schema_kubernetes_label_read.value
            return

        cls._schema_kubernetes_label_read = _schema_kubernetes_label_read = AAZObjectType()

        kubernetes_label_read = _schema_kubernetes_label_read
        kubernetes_label_read.key = AAZStrType(
            flags={"required": True},
        )
        kubernetes_label_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.key = cls._schema_kubernetes_label_read.key
        _schema.value = cls._schema_kubernetes_label_read.value

    _schema_l2_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_l2_network_attachment_configuration_read(cls, _schema):
        if cls._schema_l2_network_attachment_configuration_read is not None:
            _schema.network_id = cls._schema_l2_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_l2_network_attachment_configuration_read.plugin_type
            return

        cls._schema_l2_network_attachment_configuration_read = _schema_l2_network_attachment_configuration_read = AAZObjectType()

        l2_network_attachment_configuration_read = _schema_l2_network_attachment_configuration_read
        l2_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        l2_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.network_id = cls._schema_l2_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_l2_network_attachment_configuration_read.plugin_type

    _schema_l3_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_l3_network_attachment_configuration_read(cls, _schema):
        if cls._schema_l3_network_attachment_configuration_read is not None:
            _schema.ipam_enabled = cls._schema_l3_network_attachment_configuration_read.ipam_enabled
            _schema.network_id = cls._schema_l3_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_l3_network_attachment_configuration_read.plugin_type
            return

        cls._schema_l3_network_attachment_configuration_read = _schema_l3_network_attachment_configuration_read = AAZObjectType()

        l3_network_attachment_configuration_read = _schema_l3_network_attachment_configuration_read
        l3_network_attachment_configuration_read.ipam_enabled = AAZStrType(
            serialized_name="ipamEnabled",
        )
        l3_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        l3_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.ipam_enabled = cls._schema_l3_network_attachment_configuration_read.ipam_enabled
        _schema.network_id = cls._schema_l3_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_l3_network_attachment_configuration_read.plugin_type

    _schema_ssh_public_key_read = None

    @classmethod
    def _build_schema_ssh_public_key_read(cls, _schema):
        if cls._schema_ssh_public_key_read is not None:
            _schema.key_data = cls._schema_ssh_public_key_read.key_data
            return

        cls._schema_ssh_public_key_read = _schema_ssh_public_key_read = AAZObjectType()

        ssh_public_key_read = _schema_ssh_public_key_read
        ssh_public_key_read.key_data = AAZStrType(
            serialized_name="keyData",
            flags={"required": True},
        )

        _schema.key_data = cls._schema_ssh_public_key_read.key_data

    _schema_trunked_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_trunked_network_attachment_configuration_read(cls, _schema):
        if cls._schema_trunked_network_attachment_configuration_read is not None:
            _schema.network_id = cls._schema_trunked_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_trunked_network_attachment_configuration_read.plugin_type
            return

        cls._schema_trunked_network_attachment_configuration_read = _schema_trunked_network_attachment_configuration_read = AAZObjectType()

        trunked_network_attachment_configuration_read = _schema_trunked_network_attachment_configuration_read
        trunked_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        trunked_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.network_id = cls._schema_trunked_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_trunked_network_attachment_configuration_read.plugin_type


__all__ = ["Update"]
