# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkcloud kubernetescluster agentpool create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new Kubernetes cluster agent pool or update the properties of the existing one.

    :example: Create or update agent pool of the Kubernetes cluster
        az networkcloud kubernetescluster agentpool create --name "poolName" --kubernetes-cluster-name "kubernetesClusterName" --resource-group "resourceGroupName" --admin-username "azureuser" --ssh-key-values 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgt5SjWU= admin@vm' --count 3 --mode "System" --vm-sku-name "NC-XXXXX" --agent-options hugepages-count=96 hugepages-size="1G" --attached-network-configuration l2-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l2Networks/l2NetworkName',pluginType:'DPDK'}]" l3-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l3Networks/l3NetworkName,pluginType:'SRIOV',ipamEnabled:'False'}]" trunked-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/trunkedNetworks/trunkedNetworkName',pluginType:'MACVLAN'}]" --labels="[{key:'kubernetes.label',value:'true'}]" --taints="[{key:'kubernetes.taint',value:'true'}]" --upgrade-settings max-surge="1" --availability-zones="['zone1','zone2']"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkcloud/kubernetesclusters/{}/agentpools/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.agent_pool_name = AAZStrArg(
            options=["-n", "--name", "--agent-pool-name"],
            help="The name of the Kubernetes cluster agent pool.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _args_schema.kubernetes_cluster_name = AAZStrArg(
            options=["--kubernetes-cluster-name"],
            help="The name of the Kubernetes cluster.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "AdministratorConfiguration"

        _args_schema = cls._args_schema
        _args_schema.admin_username = AAZStrArg(
            options=["--admin-username"],
            arg_group="AdministratorConfiguration",
            help="The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.",
        )
        _args_schema.ssh_public_keys = AAZListArg(
            options=["--ssh-public-keys"],
            arg_group="AdministratorConfiguration",
            help="The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.",
        )

        ssh_public_keys = cls._args_schema.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()

        _element = cls._args_schema.ssh_public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="The SSH public key data.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        # define Arg Group "AgentPoolParameters"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="AgentPoolParameters",
            help="The extended location of the cluster associated with the resource.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="AgentPoolParameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="AgentPoolParameters",
            help="Resource tags.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The resource ID of the extended location on which the resource will be created.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The extended location type, for example, CustomLocation.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.agent_options = AAZObjectArg(
            options=["--agent-options"],
            arg_group="Properties",
            help="The configurations that will be applied to each agent in this agent pool.",
        )
        _args_schema.attached_network_configuration = AAZObjectArg(
            options=["--attached-network-configuration"],
            arg_group="Properties",
            help="The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster. These networks are in addition to the networks connected in the Kubernetes cluster attached network configuration.",
        )
        _args_schema.availability_zones = AAZListArg(
            options=["--availability-zones"],
            arg_group="Properties",
            help="The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.",
        )
        _args_schema.count = AAZIntArg(
            options=["--count"],
            arg_group="Properties",
            help="The number of virtual machines that use this configuration.",
            required=True,
        )
        _args_schema.labels = AAZListArg(
            options=["--labels"],
            arg_group="Properties",
            help="The labels applied to the nodes in this agent pool.",
        )
        _args_schema.mode = AAZStrArg(
            options=["--mode"],
            arg_group="Properties",
            help="The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.",
            required=True,
            enum={"NotApplicable": "NotApplicable", "System": "System", "User": "User"},
        )
        _args_schema.taints = AAZListArg(
            options=["--taints"],
            arg_group="Properties",
            help="The taints applied to the nodes in this agent pool.",
        )
        _args_schema.upgrade_settings = AAZObjectArg(
            options=["--upgrade-settings"],
            arg_group="Properties",
            help="The configuration of the agent pool.",
        )
        _args_schema.vm_sku_name = AAZStrArg(
            options=["--vm-sku-name"],
            arg_group="Properties",
            help="The name of the VM SKU that determines the size of resources allocated for node VMs.",
            required=True,
        )

        agent_options = cls._args_schema.agent_options
        agent_options.hugepages_count = AAZIntArg(
            options=["hugepages-count"],
            help="The number of hugepages to allocate.",
            required=True,
        )
        agent_options.hugepages_size = AAZStrArg(
            options=["hugepages-size"],
            help="The size of the hugepages to allocate.",
            default="2M",
            enum={"1G": "1G", "2M": "2M"},
        )

        attached_network_configuration = cls._args_schema.attached_network_configuration
        attached_network_configuration.l2_networks = AAZListArg(
            options=["l2-networks"],
            help="The list of Layer 2 Networks and related configuration for attachment.",
        )
        attached_network_configuration.l3_networks = AAZListArg(
            options=["l3-networks"],
            help="The list of Layer 3 Networks and related configuration for attachment.",
        )
        attached_network_configuration.trunked_networks = AAZListArg(
            options=["trunked-networks"],
            help="The list of Trunked Networks and related configuration for attachment.",
        )

        l2_networks = cls._args_schema.attached_network_configuration.l2_networks
        l2_networks.Element = AAZObjectArg()

        _element = cls._args_schema.attached_network_configuration.l2_networks.Element
        _element.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        _element.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        l3_networks = cls._args_schema.attached_network_configuration.l3_networks
        l3_networks.Element = AAZObjectArg()

        _element = cls._args_schema.attached_network_configuration.l3_networks.Element
        _element.ipam_enabled = AAZStrArg(
            options=["ipam-enabled"],
            help="The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.",
            default="False",
            enum={"False": "False", "True": "True"},
        )
        _element.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        _element.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        trunked_networks = cls._args_schema.attached_network_configuration.trunked_networks
        trunked_networks.Element = AAZObjectArg()

        _element = cls._args_schema.attached_network_configuration.trunked_networks.Element
        _element.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        _element.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        availability_zones = cls._args_schema.availability_zones
        availability_zones.Element = AAZStrArg()

        labels = cls._args_schema.labels
        labels.Element = AAZObjectArg()
        cls._build_args_kubernetes_label_create(labels.Element)

        taints = cls._args_schema.taints
        taints.Element = AAZObjectArg()
        cls._build_args_kubernetes_label_create(taints.Element)

        upgrade_settings = cls._args_schema.upgrade_settings
        upgrade_settings.max_surge = AAZStrArg(
            options=["max-surge"],
            help="The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.",
            default="1",
        )
        return cls._args_schema

    _args_kubernetes_label_create = None

    @classmethod
    def _build_args_kubernetes_label_create(cls, _schema):
        if cls._args_kubernetes_label_create is not None:
            _schema.key = cls._args_kubernetes_label_create.key
            _schema.value = cls._args_kubernetes_label_create.value
            return

        cls._args_kubernetes_label_create = AAZObjectArg()

        kubernetes_label_create = cls._args_kubernetes_label_create
        kubernetes_label_create.key = AAZStrArg(
            options=["key"],
            help="The name of the label or taint.",
            required=True,
        )
        kubernetes_label_create.value = AAZStrArg(
            options=["value"],
            help="The value of the label or taint.",
            required=True,
        )

        _schema.key = cls._args_kubernetes_label_create.key
        _schema.value = cls._args_kubernetes_label_create.value

    def _execute_operations(self):
        self.pre_operations()
        yield self.AgentPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AgentPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}/agentPools/{agentPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "agentPoolName", self.ctx.args.agent_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "kubernetesClusterName", self.ctx.args.kubernetes_cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administratorConfiguration", AAZObjectType)
                properties.set_prop("agentOptions", AAZObjectType, ".agent_options")
                properties.set_prop("attachedNetworkConfiguration", AAZObjectType, ".attached_network_configuration")
                properties.set_prop("availabilityZones", AAZListType, ".availability_zones")
                properties.set_prop("count", AAZIntType, ".count", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("labels", AAZListType, ".labels")
                properties.set_prop("mode", AAZStrType, ".mode", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("taints", AAZListType, ".taints")
                properties.set_prop("upgradeSettings", AAZObjectType, ".upgrade_settings")
                properties.set_prop("vmSkuName", AAZStrType, ".vm_sku_name", typ_kwargs={"flags": {"required": True}})

            administrator_configuration = _builder.get(".properties.administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("adminUsername", AAZStrType, ".admin_username")
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                ssh_public_keys.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.administratorConfiguration.sshPublicKeys[]")
            if _elements is not None:
                _elements.set_prop("keyData", AAZStrType, ".key_data", typ_kwargs={"flags": {"required": True}})

            agent_options = _builder.get(".properties.agentOptions")
            if agent_options is not None:
                agent_options.set_prop("hugepagesCount", AAZIntType, ".hugepages_count", typ_kwargs={"flags": {"required": True}})
                agent_options.set_prop("hugepagesSize", AAZStrType, ".hugepages_size")

            attached_network_configuration = _builder.get(".properties.attachedNetworkConfiguration")
            if attached_network_configuration is not None:
                attached_network_configuration.set_prop("l2Networks", AAZListType, ".l2_networks")
                attached_network_configuration.set_prop("l3Networks", AAZListType, ".l3_networks")
                attached_network_configuration.set_prop("trunkedNetworks", AAZListType, ".trunked_networks")

            l2_networks = _builder.get(".properties.attachedNetworkConfiguration.l2Networks")
            if l2_networks is not None:
                l2_networks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.attachedNetworkConfiguration.l2Networks[]")
            if _elements is not None:
                _elements.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("pluginType", AAZStrType, ".plugin_type")

            l3_networks = _builder.get(".properties.attachedNetworkConfiguration.l3Networks")
            if l3_networks is not None:
                l3_networks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.attachedNetworkConfiguration.l3Networks[]")
            if _elements is not None:
                _elements.set_prop("ipamEnabled", AAZStrType, ".ipam_enabled")
                _elements.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("pluginType", AAZStrType, ".plugin_type")

            trunked_networks = _builder.get(".properties.attachedNetworkConfiguration.trunkedNetworks")
            if trunked_networks is not None:
                trunked_networks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.attachedNetworkConfiguration.trunkedNetworks[]")
            if _elements is not None:
                _elements.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("pluginType", AAZStrType, ".plugin_type")

            availability_zones = _builder.get(".properties.availabilityZones")
            if availability_zones is not None:
                availability_zones.set_elements(AAZStrType, ".")

            labels = _builder.get(".properties.labels")
            if labels is not None:
                _CreateHelper._build_schema_kubernetes_label_create(labels.set_elements(AAZObjectType, "."))

            taints = _builder.get(".properties.taints")
            if taints is not None:
                _CreateHelper._build_schema_kubernetes_label_create(taints.set_elements(AAZObjectType, "."))

            upgrade_settings = _builder.get(".properties.upgradeSettings")
            if upgrade_settings is not None:
                upgrade_settings.set_prop("maxSurge", AAZStrType, ".max_surge")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrator_configuration = AAZObjectType(
                serialized_name="administratorConfiguration",
            )
            properties.agent_options = AAZObjectType(
                serialized_name="agentOptions",
            )
            properties.attached_network_configuration = AAZObjectType(
                serialized_name="attachedNetworkConfiguration",
            )
            properties.availability_zones = AAZListType(
                serialized_name="availabilityZones",
            )
            properties.count = AAZIntType(
                flags={"required": True},
            )
            properties.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            properties.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            properties.kubernetes_version = AAZStrType(
                serialized_name="kubernetesVersion",
                flags={"read_only": True},
            )
            properties.labels = AAZListType()
            properties.mode = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.taints = AAZListType()
            properties.upgrade_settings = AAZObjectType(
                serialized_name="upgradeSettings",
            )
            properties.vm_sku_name = AAZStrType(
                serialized_name="vmSkuName",
                flags={"required": True},
            )

            administrator_configuration = cls._schema_on_200_201.properties.administrator_configuration
            administrator_configuration.admin_username = AAZStrType(
                serialized_name="adminUsername",
            )
            administrator_configuration.ssh_public_keys = AAZListType(
                serialized_name="sshPublicKeys",
            )

            ssh_public_keys = cls._schema_on_200_201.properties.administrator_configuration.ssh_public_keys
            ssh_public_keys.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.administrator_configuration.ssh_public_keys.Element
            _element.key_data = AAZStrType(
                serialized_name="keyData",
                flags={"required": True},
            )

            agent_options = cls._schema_on_200_201.properties.agent_options
            agent_options.hugepages_count = AAZIntType(
                serialized_name="hugepagesCount",
                flags={"required": True},
            )
            agent_options.hugepages_size = AAZStrType(
                serialized_name="hugepagesSize",
            )

            attached_network_configuration = cls._schema_on_200_201.properties.attached_network_configuration
            attached_network_configuration.l2_networks = AAZListType(
                serialized_name="l2Networks",
            )
            attached_network_configuration.l3_networks = AAZListType(
                serialized_name="l3Networks",
            )
            attached_network_configuration.trunked_networks = AAZListType(
                serialized_name="trunkedNetworks",
            )

            l2_networks = cls._schema_on_200_201.properties.attached_network_configuration.l2_networks
            l2_networks.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.attached_network_configuration.l2_networks.Element
            _element.network_id = AAZStrType(
                serialized_name="networkId",
                flags={"required": True},
            )
            _element.plugin_type = AAZStrType(
                serialized_name="pluginType",
            )

            l3_networks = cls._schema_on_200_201.properties.attached_network_configuration.l3_networks
            l3_networks.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.attached_network_configuration.l3_networks.Element
            _element.ipam_enabled = AAZStrType(
                serialized_name="ipamEnabled",
            )
            _element.network_id = AAZStrType(
                serialized_name="networkId",
                flags={"required": True},
            )
            _element.plugin_type = AAZStrType(
                serialized_name="pluginType",
            )

            trunked_networks = cls._schema_on_200_201.properties.attached_network_configuration.trunked_networks
            trunked_networks.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.attached_network_configuration.trunked_networks.Element
            _element.network_id = AAZStrType(
                serialized_name="networkId",
                flags={"required": True},
            )
            _element.plugin_type = AAZStrType(
                serialized_name="pluginType",
            )

            availability_zones = cls._schema_on_200_201.properties.availability_zones
            availability_zones.Element = AAZStrType()

            labels = cls._schema_on_200_201.properties.labels
            labels.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(labels.Element)

            taints = cls._schema_on_200_201.properties.taints
            taints.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(taints.Element)

            upgrade_settings = cls._schema_on_200_201.properties.upgrade_settings
            upgrade_settings.max_surge = AAZStrType(
                serialized_name="maxSurge",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_kubernetes_label_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("key", AAZStrType, ".key", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    _schema_kubernetes_label_read = None

    @classmethod
    def _build_schema_kubernetes_label_read(cls, _schema):
        if cls._schema_kubernetes_label_read is not None:
            _schema.key = cls._schema_kubernetes_label_read.key
            _schema.value = cls._schema_kubernetes_label_read.value
            return

        cls._schema_kubernetes_label_read = _schema_kubernetes_label_read = AAZObjectType()

        kubernetes_label_read = _schema_kubernetes_label_read
        kubernetes_label_read.key = AAZStrType(
            flags={"required": True},
        )
        kubernetes_label_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.key = cls._schema_kubernetes_label_read.key
        _schema.value = cls._schema_kubernetes_label_read.value


__all__ = ["Create"]
