# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkcloud kubernetescluster create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new Kubernetes cluster or update the properties of the existing one.

    :example: Create or update Kubernetes cluster
        az networkcloud kubernetescluster create --name "kubernetesClusterName" --resource-group "resourceGroupName" --location "location" --kubernetes-version "1.XX.Y" --extended-location name="/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.ExtendedLocation/customLocations/clusterExtendedLocationName" type=CustomLocation --aad-configuration admin-group-object-ids=["f110271b-XXXX-4163-9b99-214d91660f0e"] --admin-username "azureuser" --ssh-key-values "ssh-rsa AAAAB3NzaC1yc2EAAAADAQAt5SjWU= admin@vm" --initial-agent-pool-configurations "[{count:1,mode:'System',name:'systemPool-1',vmSkuName:'NC-XXXXX',agentOptions:{hugepagesCount:96,hugepagesSize:1G},upgradeSettings:{maxSurge:'10%'},adminUsername:'azureuser',ssh-key-values:['ssh-rsa AAAAB3NzaC1yc2EAAAADAQAt5SjWU= admin@vm']}]" --control-plane-node-configuration count=1 vmSkuName='NC-YYYYY' adminUsername='azureuser' ssh-key-values="['ssh-rsa AAAAB3NzaC1yc2EAAAADAQAt5SjWU= admin@vm']" --network-configuration cloud-services-network-id="/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/cloudServicesNetworks/cloudServicesNetworkName" cni-network-id="/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l3Networks/l3NetworkName" pod-cidrs=["10.244.0.0/16"] service-cidrs=["10.96.0.0/16"] dns-service-ip="10.96.0.10" attached-network-configuration.l2-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l2Networks/l2NetworkName',pluginType:'DPDK'}]" attached-network-configuration.l3-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/l3Networks/l3NetworkName',pluginType:'SRIOV',ipamEnabled:'False'}]" attached-network-configuration.trunked-networks="[{networkId:'/subscriptions/123e4567-e89b-12d3-a456-426655440000/resourceGroups/resourceGroupName/providers/Microsoft.NetworkCloud/trunkedNetworks/trunkedNetworkName',pluginType:'MACVLAN'}]" bgp-service-load-balancer-configuration.bgp-advertisements="[{advertiseToFabric:'True',communities:['64512:100'],ipAddressPools:['pool1'],peers:['peer1']}]" bgp-service-load-balancer-configuration.fabric-peering-enabled="True" bgp-service-load-balancer-configuration.bgp-peers="[{bfdEnabled:'False',bgpMultiHop:'False',holdTime:'P300s',keepAliveTime:'P300s',myAsn:64512,name:'peer1',peerAddress:'203.0.113.254',peerAsn:64497,peerPort:179}]" bgp-service-load-balancer-configuration.ip-address-pools="[{addresses:['198.51.102.0/24'],autoAssign:'True',name:'pool1',onlyUseHostIps:'True'}]"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.networkcloud/kubernetesclusters/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.kubernetes_cluster_name = AAZStrArg(
            options=["-n", "--name", "--kubernetes-cluster-name"],
            help="The name of the Kubernetes cluster.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "AdministratorConfiguration"

        _args_schema = cls._args_schema
        _args_schema.admin_username = AAZStrArg(
            options=["--admin-username"],
            arg_group="AdministratorConfiguration",
            help="The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.",
        )
        _args_schema.ssh_public_keys = AAZListArg(
            options=["--ssh-public-keys"],
            arg_group="AdministratorConfiguration",
            help="The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.",
        )

        ssh_public_keys = cls._args_schema.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()
        cls._build_args_ssh_public_key_create(ssh_public_keys.Element)

        # define Arg Group "KubernetesClusterParameters"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="KubernetesClusterParameters",
            help="The extended location of the cluster associated with the resource.",
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="KubernetesClusterParameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="KubernetesClusterParameters",
            help="Resource tags.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The resource ID of the extended location on which the resource will be created.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The extended location type, for example, CustomLocation.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.aad_configuration = AAZObjectArg(
            options=["--aad-configuration"],
            arg_group="Properties",
            help="The Azure Active Directory Integration properties.",
        )
        _args_schema.control_plane_node_configuration = AAZObjectArg(
            options=["--control-plane-node-configuration"],
            arg_group="Properties",
            help="The defining characteristics of the control plane for this Kubernetes Cluster.",
            required=True,
        )
        _args_schema.initial_agent_pool_configurations = AAZListArg(
            options=["--initial-agent-pool-configurations"],
            arg_group="Properties",
            help="The agent pools that are created with this Kubernetes cluster for running critical system services and workloads. This data in this field is only used during creation, and the field will be empty following the creation of the Kubernetes Cluster. After creation, the management of agent pools is done using the agentPools sub-resource.",
            required=True,
        )
        _args_schema.kubernetes_version = AAZStrArg(
            options=["--kubernetes-version"],
            arg_group="Properties",
            help="The Kubernetes version for this cluster. Accepts n.n, n.n.n, and n.n.n-n format. The interpreted version used will be resolved into this field after creation or update.",
            required=True,
        )
        _args_schema.managed_resource_group_configuration = AAZObjectArg(
            options=["--managed-resource-group-configuration"],
            arg_group="Properties",
            help="The configuration of the managed resource group associated with the resource.",
        )
        _args_schema.network_configuration = AAZObjectArg(
            options=["--network-configuration"],
            arg_group="Properties",
            help="The configuration of the Kubernetes cluster networking, including the attachment of networks that span the cluster.",
            required=True,
        )

        aad_configuration = cls._args_schema.aad_configuration
        aad_configuration.admin_group_object_ids = AAZListArg(
            options=["admin-group-object-ids"],
            help="The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.",
            required=True,
        )

        admin_group_object_ids = cls._args_schema.aad_configuration.admin_group_object_ids
        admin_group_object_ids.Element = AAZStrArg()

        control_plane_node_configuration = cls._args_schema.control_plane_node_configuration
        control_plane_node_configuration.admin_username = AAZStrArg(
            options=["admin-username"],
            help="The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.",
        )
        control_plane_node_configuration.ssh_public_keys = AAZListArg(
            options=["ssh-public-keys"],
            help="The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.",
        )
        control_plane_node_configuration.availability_zones = AAZListArg(
            options=["availability-zones"],
            help="The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane. If not specified, all availability zones will be used.",
        )
        control_plane_node_configuration.count = AAZIntArg(
            options=["count"],
            help="The number of virtual machines that use this configuration.",
            required=True,
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        control_plane_node_configuration.vm_sku_name = AAZStrArg(
            options=["vm-sku-name"],
            help="The name of the VM SKU supplied during creation.",
            required=True,
        )

        ssh_public_keys = cls._args_schema.control_plane_node_configuration.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()
        cls._build_args_ssh_public_key_create(ssh_public_keys.Element)

        availability_zones = cls._args_schema.control_plane_node_configuration.availability_zones
        availability_zones.Element = AAZStrArg()

        initial_agent_pool_configurations = cls._args_schema.initial_agent_pool_configurations
        initial_agent_pool_configurations.Element = AAZObjectArg()

        _element = cls._args_schema.initial_agent_pool_configurations.Element
        _element.admin_username = AAZStrArg(
            options=["admin-username"],
            help="The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.",
        )
        _element.ssh_public_keys = AAZListArg(
            options=["ssh-public-keys"],
            help="The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.",
        )
        _element.agent_options = AAZObjectArg(
            options=["agent-options"],
            help="The configurations that will be applied to each agent in this agent pool.",
        )
        _element.attached_network_configuration = AAZObjectArg(
            options=["attached-network-configuration"],
            help="The configuration of networks being attached to the agent pool for use by the workloads that run on this Kubernetes cluster. These networks are in addition to the networks connected in the Kubernetes cluster attached network configuration.",
        )
        _element.availability_zones = AAZListArg(
            options=["availability-zones"],
            help="The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.",
        )
        _element.count = AAZIntArg(
            options=["count"],
            help="The number of virtual machines that use this configuration.",
            required=True,
        )
        _element.labels = AAZListArg(
            options=["labels"],
            help="The labels applied to the nodes in this agent pool.",
        )
        _element.mode = AAZStrArg(
            options=["mode"],
            help="The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.",
            required=True,
            enum={"NotApplicable": "NotApplicable", "System": "System", "User": "User"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name that will be used for the agent pool resource representing this agent pool.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^([a-zA-Z0-9][a-zA-Z0-9-_]{0,28}[a-zA-Z0-9])$",
            ),
        )
        _element.taints = AAZListArg(
            options=["taints"],
            help="The taints applied to the nodes in this agent pool.",
        )
        _element.upgrade_settings = AAZObjectArg(
            options=["upgrade-settings"],
            help="The configuration of the agent pool.",
        )
        _element.vm_sku_name = AAZStrArg(
            options=["vm-sku-name"],
            help="The name of the VM SKU that determines the size of resources allocated for node VMs.",
            required=True,
        )

        ssh_public_keys = cls._args_schema.initial_agent_pool_configurations.Element.ssh_public_keys
        ssh_public_keys.Element = AAZObjectArg()
        cls._build_args_ssh_public_key_create(ssh_public_keys.Element)

        agent_options = cls._args_schema.initial_agent_pool_configurations.Element.agent_options
        agent_options.hugepages_count = AAZIntArg(
            options=["hugepages-count"],
            help="The number of hugepages to allocate.",
            required=True,
        )
        agent_options.hugepages_size = AAZStrArg(
            options=["hugepages-size"],
            help="The size of the hugepages to allocate.",
            default="2M",
            enum={"1G": "1G", "2M": "2M"},
        )

        attached_network_configuration = cls._args_schema.initial_agent_pool_configurations.Element.attached_network_configuration
        attached_network_configuration.l2_networks = AAZListArg(
            options=["l2-networks"],
            help="The list of Layer 2 Networks and related configuration for attachment.",
        )
        attached_network_configuration.l3_networks = AAZListArg(
            options=["l3-networks"],
            help="The list of Layer 3 Networks and related configuration for attachment.",
        )
        attached_network_configuration.trunked_networks = AAZListArg(
            options=["trunked-networks"],
            help="The list of Trunked Networks and related configuration for attachment.",
        )

        l2_networks = cls._args_schema.initial_agent_pool_configurations.Element.attached_network_configuration.l2_networks
        l2_networks.Element = AAZObjectArg()
        cls._build_args_l2_network_attachment_configuration_create(l2_networks.Element)

        l3_networks = cls._args_schema.initial_agent_pool_configurations.Element.attached_network_configuration.l3_networks
        l3_networks.Element = AAZObjectArg()
        cls._build_args_l3_network_attachment_configuration_create(l3_networks.Element)

        trunked_networks = cls._args_schema.initial_agent_pool_configurations.Element.attached_network_configuration.trunked_networks
        trunked_networks.Element = AAZObjectArg()
        cls._build_args_trunked_network_attachment_configuration_create(trunked_networks.Element)

        availability_zones = cls._args_schema.initial_agent_pool_configurations.Element.availability_zones
        availability_zones.Element = AAZStrArg()

        labels = cls._args_schema.initial_agent_pool_configurations.Element.labels
        labels.Element = AAZObjectArg()
        cls._build_args_kubernetes_label_create(labels.Element)

        taints = cls._args_schema.initial_agent_pool_configurations.Element.taints
        taints.Element = AAZObjectArg()
        cls._build_args_kubernetes_label_create(taints.Element)

        upgrade_settings = cls._args_schema.initial_agent_pool_configurations.Element.upgrade_settings
        upgrade_settings.max_surge = AAZStrArg(
            options=["max-surge"],
            help="The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.",
            default="1",
        )

        managed_resource_group_configuration = cls._args_schema.managed_resource_group_configuration
        managed_resource_group_configuration.location = AAZStrArg(
            options=["location"],
            help="The location of the managed resource group. If not specified, the location of the parent resource is chosen.",
        )
        managed_resource_group_configuration.name = AAZStrArg(
            options=["name"],
            help="The name for the managed resource group. If not specified, the unique name is automatically generated.",
            fmt=AAZStrArgFormat(
                max_length=75,
            ),
        )

        network_configuration = cls._args_schema.network_configuration
        network_configuration.attached_network_configuration = AAZObjectArg(
            options=["attached-network-configuration"],
            help="The configuration of networks being attached to the cluster for use by the workloads that run on this Kubernetes cluster.",
        )
        network_configuration.bgp_service_load_balancer_configuration = AAZObjectArg(
            options=["bgp-service-load-balancer-configuration"],
            help="The configuration of the BGP service load balancer for this Kubernetes cluster.",
        )
        network_configuration.cloud_services_network_id = AAZResourceIdArg(
            options=["cloud-services-network-id"],
            help="The resource ID of the associated Cloud Services network.",
            required=True,
        )
        network_configuration.cni_network_id = AAZResourceIdArg(
            options=["cni-network-id"],
            help="The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.",
            required=True,
        )
        network_configuration.dns_service_ip = AAZStrArg(
            options=["dns-service-ip"],
            help="The IP address assigned to the Kubernetes DNS service. It must be within the Kubernetes service address range specified in service CIDR.",
        )
        network_configuration.pod_cidrs = AAZListArg(
            options=["pod-cidrs"],
            help="The CIDR notation IP ranges from which to assign pod IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.",
        )
        network_configuration.service_cidrs = AAZListArg(
            options=["service-cidrs"],
            help="The CIDR notation IP ranges from which to assign service IPs. One IPv4 CIDR is expected for single-stack networking. Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.",
        )

        attached_network_configuration = cls._args_schema.network_configuration.attached_network_configuration
        attached_network_configuration.l2_networks = AAZListArg(
            options=["l2-networks"],
            help="The list of Layer 2 Networks and related configuration for attachment.",
        )
        attached_network_configuration.l3_networks = AAZListArg(
            options=["l3-networks"],
            help="The list of Layer 3 Networks and related configuration for attachment.",
        )
        attached_network_configuration.trunked_networks = AAZListArg(
            options=["trunked-networks"],
            help="The list of Trunked Networks and related configuration for attachment.",
        )

        l2_networks = cls._args_schema.network_configuration.attached_network_configuration.l2_networks
        l2_networks.Element = AAZObjectArg()
        cls._build_args_l2_network_attachment_configuration_create(l2_networks.Element)

        l3_networks = cls._args_schema.network_configuration.attached_network_configuration.l3_networks
        l3_networks.Element = AAZObjectArg()
        cls._build_args_l3_network_attachment_configuration_create(l3_networks.Element)

        trunked_networks = cls._args_schema.network_configuration.attached_network_configuration.trunked_networks
        trunked_networks.Element = AAZObjectArg()
        cls._build_args_trunked_network_attachment_configuration_create(trunked_networks.Element)

        bgp_service_load_balancer_configuration = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration
        bgp_service_load_balancer_configuration.bgp_advertisements = AAZListArg(
            options=["bgp-advertisements"],
            help="The association of IP address pools to the communities and peers, allowing for announcement of IPs.",
        )
        bgp_service_load_balancer_configuration.bgp_peers = AAZListArg(
            options=["bgp-peers"],
            help="The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.",
        )
        bgp_service_load_balancer_configuration.fabric_peering_enabled = AAZStrArg(
            options=["fabric-peering-enabled"],
            help="The indicator to specify if the load balancer peers with the network fabric.",
            default="True",
            enum={"False": "False", "True": "True"},
        )
        bgp_service_load_balancer_configuration.ip_address_pools = AAZListArg(
            options=["ip-address-pools"],
            help="The list of pools of IP addresses that can be allocated to Load Balancer services.",
        )

        bgp_advertisements = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements
        bgp_advertisements.Element = AAZObjectArg()

        _element = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element
        _element.advertise_to_fabric = AAZStrArg(
            options=["advertise-to-fabric"],
            help="The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.",
            default="True",
            enum={"False": "False", "True": "True"},
        )
        _element.communities = AAZListArg(
            options=["communities"],
            help="The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.",
        )
        _element.ip_address_pools = AAZListArg(
            options=["ip-address-pools"],
            help="The names of the IP address pools associated with this announcement.",
            required=True,
        )
        _element.peers = AAZListArg(
            options=["peers"],
            help="The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.",
        )

        communities = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.communities
        communities.Element = AAZStrArg()

        ip_address_pools = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.ip_address_pools
        ip_address_pools.Element = AAZStrArg()

        peers = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.peers
        peers.Element = AAZStrArg()

        bgp_peers = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_peers
        bgp_peers.Element = AAZObjectArg()

        _element = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.bgp_peers.Element
        _element.bfd_enabled = AAZStrArg(
            options=["bfd-enabled"],
            help="The indicator of BFD enablement for this BgpPeer.",
            default="False",
            enum={"False": "False", "True": "True"},
        )
        _element.bgp_multi_hop = AAZStrArg(
            options=["bgp-multi-hop"],
            help="The indicator to enable multi-hop peering support.",
            default="False",
            enum={"False": "False", "True": "True"},
        )
        _element.hold_time = AAZStrArg(
            options=["hold-time"],
            help="The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.",
        )
        _element.keep_alive_time = AAZStrArg(
            options=["keep-alive-time"],
            help="The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.",
        )
        _element.my_asn = AAZIntArg(
            options=["my-asn"],
            help="The autonomous system number used for the local end of the BGP session.",
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=0,
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name used to identify this BGP peer for association with a BGP advertisement.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]([a-z0-9.-]{0,61}[a-z0-9]){0,1}$",
            ),
        )
        _element.password = AAZStrArg(
            options=["password"],
            help="The authentication password for routers enforcing TCP MD5 authenticated sessions.",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]{0,80}$",
                max_length=80,
            ),
        )
        _element.peer_address = AAZStrArg(
            options=["peer-address"],
            help="The IPv4 or IPv6 address used to connect this BGP session.",
            required=True,
        )
        _element.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="The autonomous system number expected from the remote end of the BGP session.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=0,
            ),
        )
        _element.peer_port = AAZIntArg(
            options=["peer-port"],
            help="The port used to connect this BGP session.",
            default=179,
        )

        ip_address_pools = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools
        ip_address_pools.Element = AAZObjectArg()

        _element = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element
        _element.addresses = AAZListArg(
            options=["addresses"],
            help="The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.",
            required=True,
        )
        _element.auto_assign = AAZStrArg(
            options=["auto-assign"],
            help="The indicator to determine if automatic allocation from the pool should occur.",
            default="True",
            enum={"False": "False", "True": "True"},
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name used to identify this IP address pool for association with a BGP advertisement.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]([a-z0-9.-]{0,61}[a-z0-9]){0,1}$",
            ),
        )
        _element.only_use_host_ips = AAZStrArg(
            options=["only-use-host-ips"],
            help="The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.",
            default="True",
            enum={"False": "False", "True": "True"},
        )

        addresses = cls._args_schema.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element.addresses
        addresses.Element = AAZStrArg()

        pod_cidrs = cls._args_schema.network_configuration.pod_cidrs
        pod_cidrs.Element = AAZStrArg()

        service_cidrs = cls._args_schema.network_configuration.service_cidrs
        service_cidrs.Element = AAZStrArg()
        return cls._args_schema

    _args_kubernetes_label_create = None

    @classmethod
    def _build_args_kubernetes_label_create(cls, _schema):
        if cls._args_kubernetes_label_create is not None:
            _schema.key = cls._args_kubernetes_label_create.key
            _schema.value = cls._args_kubernetes_label_create.value
            return

        cls._args_kubernetes_label_create = AAZObjectArg()

        kubernetes_label_create = cls._args_kubernetes_label_create
        kubernetes_label_create.key = AAZStrArg(
            options=["key"],
            help="The name of the label or taint.",
            required=True,
        )
        kubernetes_label_create.value = AAZStrArg(
            options=["value"],
            help="The value of the label or taint.",
            required=True,
        )

        _schema.key = cls._args_kubernetes_label_create.key
        _schema.value = cls._args_kubernetes_label_create.value

    _args_l2_network_attachment_configuration_create = None

    @classmethod
    def _build_args_l2_network_attachment_configuration_create(cls, _schema):
        if cls._args_l2_network_attachment_configuration_create is not None:
            _schema.network_id = cls._args_l2_network_attachment_configuration_create.network_id
            _schema.plugin_type = cls._args_l2_network_attachment_configuration_create.plugin_type
            return

        cls._args_l2_network_attachment_configuration_create = AAZObjectArg()

        l2_network_attachment_configuration_create = cls._args_l2_network_attachment_configuration_create
        l2_network_attachment_configuration_create.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        l2_network_attachment_configuration_create.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        _schema.network_id = cls._args_l2_network_attachment_configuration_create.network_id
        _schema.plugin_type = cls._args_l2_network_attachment_configuration_create.plugin_type

    _args_l3_network_attachment_configuration_create = None

    @classmethod
    def _build_args_l3_network_attachment_configuration_create(cls, _schema):
        if cls._args_l3_network_attachment_configuration_create is not None:
            _schema.ipam_enabled = cls._args_l3_network_attachment_configuration_create.ipam_enabled
            _schema.network_id = cls._args_l3_network_attachment_configuration_create.network_id
            _schema.plugin_type = cls._args_l3_network_attachment_configuration_create.plugin_type
            return

        cls._args_l3_network_attachment_configuration_create = AAZObjectArg()

        l3_network_attachment_configuration_create = cls._args_l3_network_attachment_configuration_create
        l3_network_attachment_configuration_create.ipam_enabled = AAZStrArg(
            options=["ipam-enabled"],
            help="The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.",
            default="False",
            enum={"False": "False", "True": "True"},
        )
        l3_network_attachment_configuration_create.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        l3_network_attachment_configuration_create.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        _schema.ipam_enabled = cls._args_l3_network_attachment_configuration_create.ipam_enabled
        _schema.network_id = cls._args_l3_network_attachment_configuration_create.network_id
        _schema.plugin_type = cls._args_l3_network_attachment_configuration_create.plugin_type

    _args_ssh_public_key_create = None

    @classmethod
    def _build_args_ssh_public_key_create(cls, _schema):
        if cls._args_ssh_public_key_create is not None:
            _schema.key_data = cls._args_ssh_public_key_create.key_data
            return

        cls._args_ssh_public_key_create = AAZObjectArg()

        ssh_public_key_create = cls._args_ssh_public_key_create
        ssh_public_key_create.key_data = AAZStrArg(
            options=["key-data"],
            help="The SSH public key data.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        _schema.key_data = cls._args_ssh_public_key_create.key_data

    _args_trunked_network_attachment_configuration_create = None

    @classmethod
    def _build_args_trunked_network_attachment_configuration_create(cls, _schema):
        if cls._args_trunked_network_attachment_configuration_create is not None:
            _schema.network_id = cls._args_trunked_network_attachment_configuration_create.network_id
            _schema.plugin_type = cls._args_trunked_network_attachment_configuration_create.plugin_type
            return

        cls._args_trunked_network_attachment_configuration_create = AAZObjectArg()

        trunked_network_attachment_configuration_create = cls._args_trunked_network_attachment_configuration_create
        trunked_network_attachment_configuration_create.network_id = AAZResourceIdArg(
            options=["network-id"],
            help="The resource ID of the network that is being configured for attachment.",
            required=True,
        )
        trunked_network_attachment_configuration_create.plugin_type = AAZStrArg(
            options=["plugin-type"],
            help="The indicator of how this network will be utilized by the Kubernetes cluster.",
            default="SRIOV",
            enum={"DPDK": "DPDK", "IPVLAN": "IPVLAN", "MACVLAN": "MACVLAN", "OSDevice": "OSDevice", "SRIOV": "SRIOV"},
        )

        _schema.network_id = cls._args_trunked_network_attachment_configuration_create.network_id
        _schema.plugin_type = cls._args_trunked_network_attachment_configuration_create.plugin_type

    def _execute_operations(self):
        self.pre_operations()
        yield self.KubernetesClustersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class KubernetesClustersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NetworkCloud/kubernetesClusters/{kubernetesClusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "kubernetesClusterName", self.ctx.args.kubernetes_cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("aadConfiguration", AAZObjectType, ".aad_configuration")
                properties.set_prop("administratorConfiguration", AAZObjectType)
                properties.set_prop("controlPlaneNodeConfiguration", AAZObjectType, ".control_plane_node_configuration", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("initialAgentPoolConfigurations", AAZListType, ".initial_agent_pool_configurations", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("kubernetesVersion", AAZStrType, ".kubernetes_version", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType, ".managed_resource_group_configuration")
                properties.set_prop("networkConfiguration", AAZObjectType, ".network_configuration", typ_kwargs={"flags": {"required": True}})

            aad_configuration = _builder.get(".properties.aadConfiguration")
            if aad_configuration is not None:
                aad_configuration.set_prop("adminGroupObjectIds", AAZListType, ".admin_group_object_ids", typ_kwargs={"flags": {"required": True}})

            admin_group_object_ids = _builder.get(".properties.aadConfiguration.adminGroupObjectIds")
            if admin_group_object_ids is not None:
                admin_group_object_ids.set_elements(AAZStrType, ".")

            administrator_configuration = _builder.get(".properties.administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("adminUsername", AAZStrType, ".admin_username")
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                _CreateHelper._build_schema_ssh_public_key_create(ssh_public_keys.set_elements(AAZObjectType, "."))

            control_plane_node_configuration = _builder.get(".properties.controlPlaneNodeConfiguration")
            if control_plane_node_configuration is not None:
                control_plane_node_configuration.set_prop("administratorConfiguration", AAZObjectType)
                control_plane_node_configuration.set_prop("availabilityZones", AAZListType, ".availability_zones")
                control_plane_node_configuration.set_prop("count", AAZIntType, ".count", typ_kwargs={"flags": {"required": True}})
                control_plane_node_configuration.set_prop("vmSkuName", AAZStrType, ".vm_sku_name", typ_kwargs={"flags": {"required": True}})

            administrator_configuration = _builder.get(".properties.controlPlaneNodeConfiguration.administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("adminUsername", AAZStrType, ".admin_username")
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.controlPlaneNodeConfiguration.administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                _CreateHelper._build_schema_ssh_public_key_create(ssh_public_keys.set_elements(AAZObjectType, "."))

            availability_zones = _builder.get(".properties.controlPlaneNodeConfiguration.availabilityZones")
            if availability_zones is not None:
                availability_zones.set_elements(AAZStrType, ".")

            initial_agent_pool_configurations = _builder.get(".properties.initialAgentPoolConfigurations")
            if initial_agent_pool_configurations is not None:
                initial_agent_pool_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.initialAgentPoolConfigurations[]")
            if _elements is not None:
                _elements.set_prop("administratorConfiguration", AAZObjectType)
                _elements.set_prop("agentOptions", AAZObjectType, ".agent_options")
                _elements.set_prop("attachedNetworkConfiguration", AAZObjectType, ".attached_network_configuration")
                _elements.set_prop("availabilityZones", AAZListType, ".availability_zones")
                _elements.set_prop("count", AAZIntType, ".count", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("labels", AAZListType, ".labels")
                _elements.set_prop("mode", AAZStrType, ".mode", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("taints", AAZListType, ".taints")
                _elements.set_prop("upgradeSettings", AAZObjectType, ".upgrade_settings")
                _elements.set_prop("vmSkuName", AAZStrType, ".vm_sku_name", typ_kwargs={"flags": {"required": True}})

            administrator_configuration = _builder.get(".properties.initialAgentPoolConfigurations[].administratorConfiguration")
            if administrator_configuration is not None:
                administrator_configuration.set_prop("adminUsername", AAZStrType, ".admin_username")
                administrator_configuration.set_prop("sshPublicKeys", AAZListType, ".ssh_public_keys")

            ssh_public_keys = _builder.get(".properties.initialAgentPoolConfigurations[].administratorConfiguration.sshPublicKeys")
            if ssh_public_keys is not None:
                _CreateHelper._build_schema_ssh_public_key_create(ssh_public_keys.set_elements(AAZObjectType, "."))

            agent_options = _builder.get(".properties.initialAgentPoolConfigurations[].agentOptions")
            if agent_options is not None:
                agent_options.set_prop("hugepagesCount", AAZIntType, ".hugepages_count", typ_kwargs={"flags": {"required": True}})
                agent_options.set_prop("hugepagesSize", AAZStrType, ".hugepages_size")

            attached_network_configuration = _builder.get(".properties.initialAgentPoolConfigurations[].attachedNetworkConfiguration")
            if attached_network_configuration is not None:
                attached_network_configuration.set_prop("l2Networks", AAZListType, ".l2_networks")
                attached_network_configuration.set_prop("l3Networks", AAZListType, ".l3_networks")
                attached_network_configuration.set_prop("trunkedNetworks", AAZListType, ".trunked_networks")

            l2_networks = _builder.get(".properties.initialAgentPoolConfigurations[].attachedNetworkConfiguration.l2Networks")
            if l2_networks is not None:
                _CreateHelper._build_schema_l2_network_attachment_configuration_create(l2_networks.set_elements(AAZObjectType, "."))

            l3_networks = _builder.get(".properties.initialAgentPoolConfigurations[].attachedNetworkConfiguration.l3Networks")
            if l3_networks is not None:
                _CreateHelper._build_schema_l3_network_attachment_configuration_create(l3_networks.set_elements(AAZObjectType, "."))

            trunked_networks = _builder.get(".properties.initialAgentPoolConfigurations[].attachedNetworkConfiguration.trunkedNetworks")
            if trunked_networks is not None:
                _CreateHelper._build_schema_trunked_network_attachment_configuration_create(trunked_networks.set_elements(AAZObjectType, "."))

            availability_zones = _builder.get(".properties.initialAgentPoolConfigurations[].availabilityZones")
            if availability_zones is not None:
                availability_zones.set_elements(AAZStrType, ".")

            labels = _builder.get(".properties.initialAgentPoolConfigurations[].labels")
            if labels is not None:
                _CreateHelper._build_schema_kubernetes_label_create(labels.set_elements(AAZObjectType, "."))

            taints = _builder.get(".properties.initialAgentPoolConfigurations[].taints")
            if taints is not None:
                _CreateHelper._build_schema_kubernetes_label_create(taints.set_elements(AAZObjectType, "."))

            upgrade_settings = _builder.get(".properties.initialAgentPoolConfigurations[].upgradeSettings")
            if upgrade_settings is not None:
                upgrade_settings.set_prop("maxSurge", AAZStrType, ".max_surge")

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("location", AAZStrType, ".location")
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".name")

            network_configuration = _builder.get(".properties.networkConfiguration")
            if network_configuration is not None:
                network_configuration.set_prop("attachedNetworkConfiguration", AAZObjectType, ".attached_network_configuration")
                network_configuration.set_prop("bgpServiceLoadBalancerConfiguration", AAZObjectType, ".bgp_service_load_balancer_configuration")
                network_configuration.set_prop("cloudServicesNetworkId", AAZStrType, ".cloud_services_network_id", typ_kwargs={"flags": {"required": True}})
                network_configuration.set_prop("cniNetworkId", AAZStrType, ".cni_network_id", typ_kwargs={"flags": {"required": True}})
                network_configuration.set_prop("dnsServiceIp", AAZStrType, ".dns_service_ip")
                network_configuration.set_prop("podCidrs", AAZListType, ".pod_cidrs")
                network_configuration.set_prop("serviceCidrs", AAZListType, ".service_cidrs")

            attached_network_configuration = _builder.get(".properties.networkConfiguration.attachedNetworkConfiguration")
            if attached_network_configuration is not None:
                attached_network_configuration.set_prop("l2Networks", AAZListType, ".l2_networks")
                attached_network_configuration.set_prop("l3Networks", AAZListType, ".l3_networks")
                attached_network_configuration.set_prop("trunkedNetworks", AAZListType, ".trunked_networks")

            l2_networks = _builder.get(".properties.networkConfiguration.attachedNetworkConfiguration.l2Networks")
            if l2_networks is not None:
                _CreateHelper._build_schema_l2_network_attachment_configuration_create(l2_networks.set_elements(AAZObjectType, "."))

            l3_networks = _builder.get(".properties.networkConfiguration.attachedNetworkConfiguration.l3Networks")
            if l3_networks is not None:
                _CreateHelper._build_schema_l3_network_attachment_configuration_create(l3_networks.set_elements(AAZObjectType, "."))

            trunked_networks = _builder.get(".properties.networkConfiguration.attachedNetworkConfiguration.trunkedNetworks")
            if trunked_networks is not None:
                _CreateHelper._build_schema_trunked_network_attachment_configuration_create(trunked_networks.set_elements(AAZObjectType, "."))

            bgp_service_load_balancer_configuration = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration")
            if bgp_service_load_balancer_configuration is not None:
                bgp_service_load_balancer_configuration.set_prop("bgpAdvertisements", AAZListType, ".bgp_advertisements")
                bgp_service_load_balancer_configuration.set_prop("bgpPeers", AAZListType, ".bgp_peers")
                bgp_service_load_balancer_configuration.set_prop("fabricPeeringEnabled", AAZStrType, ".fabric_peering_enabled")
                bgp_service_load_balancer_configuration.set_prop("ipAddressPools", AAZListType, ".ip_address_pools")

            bgp_advertisements = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpAdvertisements")
            if bgp_advertisements is not None:
                bgp_advertisements.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpAdvertisements[]")
            if _elements is not None:
                _elements.set_prop("advertiseToFabric", AAZStrType, ".advertise_to_fabric")
                _elements.set_prop("communities", AAZListType, ".communities")
                _elements.set_prop("ipAddressPools", AAZListType, ".ip_address_pools", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("peers", AAZListType, ".peers")

            communities = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpAdvertisements[].communities")
            if communities is not None:
                communities.set_elements(AAZStrType, ".")

            ip_address_pools = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpAdvertisements[].ipAddressPools")
            if ip_address_pools is not None:
                ip_address_pools.set_elements(AAZStrType, ".")

            peers = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpAdvertisements[].peers")
            if peers is not None:
                peers.set_elements(AAZStrType, ".")

            bgp_peers = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpPeers")
            if bgp_peers is not None:
                bgp_peers.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.bgpPeers[]")
            if _elements is not None:
                _elements.set_prop("bfdEnabled", AAZStrType, ".bfd_enabled")
                _elements.set_prop("bgpMultiHop", AAZStrType, ".bgp_multi_hop")
                _elements.set_prop("holdTime", AAZStrType, ".hold_time")
                _elements.set_prop("keepAliveTime", AAZStrType, ".keep_alive_time")
                _elements.set_prop("myAsn", AAZIntType, ".my_asn")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
                _elements.set_prop("peerAddress", AAZStrType, ".peer_address", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("peerAsn", AAZIntType, ".peer_asn", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("peerPort", AAZIntType, ".peer_port")

            ip_address_pools = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.ipAddressPools")
            if ip_address_pools is not None:
                ip_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.ipAddressPools[]")
            if _elements is not None:
                _elements.set_prop("addresses", AAZListType, ".addresses", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("autoAssign", AAZStrType, ".auto_assign")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("onlyUseHostIps", AAZStrType, ".only_use_host_ips")

            addresses = _builder.get(".properties.networkConfiguration.bgpServiceLoadBalancerConfiguration.ipAddressPools[].addresses")
            if addresses is not None:
                addresses.set_elements(AAZStrType, ".")

            pod_cidrs = _builder.get(".properties.networkConfiguration.podCidrs")
            if pod_cidrs is not None:
                pod_cidrs.set_elements(AAZStrType, ".")

            service_cidrs = _builder.get(".properties.networkConfiguration.serviceCidrs")
            if service_cidrs is not None:
                service_cidrs.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
                flags={"required": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.aad_configuration = AAZObjectType(
                serialized_name="aadConfiguration",
            )
            properties.administrator_configuration = AAZObjectType(
                serialized_name="administratorConfiguration",
            )
            properties.attached_network_ids = AAZListType(
                serialized_name="attachedNetworkIds",
                flags={"read_only": True},
            )
            properties.available_upgrades = AAZListType(
                serialized_name="availableUpgrades",
                flags={"read_only": True},
            )
            properties.cluster_id = AAZStrType(
                serialized_name="clusterId",
                flags={"read_only": True},
            )
            properties.connected_cluster_id = AAZStrType(
                serialized_name="connectedClusterId",
                flags={"read_only": True},
            )
            properties.control_plane_kubernetes_version = AAZStrType(
                serialized_name="controlPlaneKubernetesVersion",
                flags={"read_only": True},
            )
            properties.control_plane_node_configuration = AAZObjectType(
                serialized_name="controlPlaneNodeConfiguration",
                flags={"required": True},
            )
            properties.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            properties.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            properties.feature_statuses = AAZListType(
                serialized_name="featureStatuses",
                flags={"read_only": True},
            )
            properties.initial_agent_pool_configurations = AAZListType(
                serialized_name="initialAgentPoolConfigurations",
                flags={"required": True},
            )
            properties.kubernetes_version = AAZStrType(
                serialized_name="kubernetesVersion",
                flags={"required": True},
            )
            properties.managed_resource_group_configuration = AAZObjectType(
                serialized_name="managedResourceGroupConfiguration",
            )
            properties.network_configuration = AAZObjectType(
                serialized_name="networkConfiguration",
                flags={"required": True},
            )
            properties.nodes = AAZListType(
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            aad_configuration = cls._schema_on_200_201.properties.aad_configuration
            aad_configuration.admin_group_object_ids = AAZListType(
                serialized_name="adminGroupObjectIds",
                flags={"required": True},
            )

            admin_group_object_ids = cls._schema_on_200_201.properties.aad_configuration.admin_group_object_ids
            admin_group_object_ids.Element = AAZStrType()

            administrator_configuration = cls._schema_on_200_201.properties.administrator_configuration
            administrator_configuration.admin_username = AAZStrType(
                serialized_name="adminUsername",
            )
            administrator_configuration.ssh_public_keys = AAZListType(
                serialized_name="sshPublicKeys",
            )

            ssh_public_keys = cls._schema_on_200_201.properties.administrator_configuration.ssh_public_keys
            ssh_public_keys.Element = AAZObjectType()
            _CreateHelper._build_schema_ssh_public_key_read(ssh_public_keys.Element)

            attached_network_ids = cls._schema_on_200_201.properties.attached_network_ids
            attached_network_ids.Element = AAZStrType()

            available_upgrades = cls._schema_on_200_201.properties.available_upgrades
            available_upgrades.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.available_upgrades.Element
            _element.availability_lifecycle = AAZStrType(
                serialized_name="availabilityLifecycle",
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            control_plane_node_configuration = cls._schema_on_200_201.properties.control_plane_node_configuration
            control_plane_node_configuration.administrator_configuration = AAZObjectType(
                serialized_name="administratorConfiguration",
            )
            control_plane_node_configuration.availability_zones = AAZListType(
                serialized_name="availabilityZones",
            )
            control_plane_node_configuration.count = AAZIntType(
                flags={"required": True},
            )
            control_plane_node_configuration.vm_sku_name = AAZStrType(
                serialized_name="vmSkuName",
                flags={"required": True},
            )

            administrator_configuration = cls._schema_on_200_201.properties.control_plane_node_configuration.administrator_configuration
            administrator_configuration.admin_username = AAZStrType(
                serialized_name="adminUsername",
            )
            administrator_configuration.ssh_public_keys = AAZListType(
                serialized_name="sshPublicKeys",
            )

            ssh_public_keys = cls._schema_on_200_201.properties.control_plane_node_configuration.administrator_configuration.ssh_public_keys
            ssh_public_keys.Element = AAZObjectType()
            _CreateHelper._build_schema_ssh_public_key_read(ssh_public_keys.Element)

            availability_zones = cls._schema_on_200_201.properties.control_plane_node_configuration.availability_zones
            availability_zones.Element = AAZStrType()

            feature_statuses = cls._schema_on_200_201.properties.feature_statuses
            feature_statuses.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.feature_statuses.Element
            _element.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            _element.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            initial_agent_pool_configurations = cls._schema_on_200_201.properties.initial_agent_pool_configurations
            initial_agent_pool_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element
            _element.administrator_configuration = AAZObjectType(
                serialized_name="administratorConfiguration",
            )
            _element.agent_options = AAZObjectType(
                serialized_name="agentOptions",
            )
            _element.attached_network_configuration = AAZObjectType(
                serialized_name="attachedNetworkConfiguration",
            )
            _element.availability_zones = AAZListType(
                serialized_name="availabilityZones",
            )
            _element.count = AAZIntType(
                flags={"required": True},
            )
            _element.labels = AAZListType()
            _element.mode = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.taints = AAZListType()
            _element.upgrade_settings = AAZObjectType(
                serialized_name="upgradeSettings",
            )
            _element.vm_sku_name = AAZStrType(
                serialized_name="vmSkuName",
                flags={"required": True},
            )

            administrator_configuration = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.administrator_configuration
            administrator_configuration.admin_username = AAZStrType(
                serialized_name="adminUsername",
            )
            administrator_configuration.ssh_public_keys = AAZListType(
                serialized_name="sshPublicKeys",
            )

            ssh_public_keys = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.administrator_configuration.ssh_public_keys
            ssh_public_keys.Element = AAZObjectType()
            _CreateHelper._build_schema_ssh_public_key_read(ssh_public_keys.Element)

            agent_options = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.agent_options
            agent_options.hugepages_count = AAZIntType(
                serialized_name="hugepagesCount",
                flags={"required": True},
            )
            agent_options.hugepages_size = AAZStrType(
                serialized_name="hugepagesSize",
            )

            attached_network_configuration = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.attached_network_configuration
            attached_network_configuration.l2_networks = AAZListType(
                serialized_name="l2Networks",
            )
            attached_network_configuration.l3_networks = AAZListType(
                serialized_name="l3Networks",
            )
            attached_network_configuration.trunked_networks = AAZListType(
                serialized_name="trunkedNetworks",
            )

            l2_networks = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.attached_network_configuration.l2_networks
            l2_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_l2_network_attachment_configuration_read(l2_networks.Element)

            l3_networks = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.attached_network_configuration.l3_networks
            l3_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_l3_network_attachment_configuration_read(l3_networks.Element)

            trunked_networks = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.attached_network_configuration.trunked_networks
            trunked_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_trunked_network_attachment_configuration_read(trunked_networks.Element)

            availability_zones = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.availability_zones
            availability_zones.Element = AAZStrType()

            labels = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.labels
            labels.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(labels.Element)

            taints = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.taints
            taints.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(taints.Element)

            upgrade_settings = cls._schema_on_200_201.properties.initial_agent_pool_configurations.Element.upgrade_settings
            upgrade_settings.max_surge = AAZStrType(
                serialized_name="maxSurge",
            )

            managed_resource_group_configuration = cls._schema_on_200_201.properties.managed_resource_group_configuration
            managed_resource_group_configuration.location = AAZStrType()
            managed_resource_group_configuration.name = AAZStrType()

            network_configuration = cls._schema_on_200_201.properties.network_configuration
            network_configuration.attached_network_configuration = AAZObjectType(
                serialized_name="attachedNetworkConfiguration",
            )
            network_configuration.bgp_service_load_balancer_configuration = AAZObjectType(
                serialized_name="bgpServiceLoadBalancerConfiguration",
            )
            network_configuration.cloud_services_network_id = AAZStrType(
                serialized_name="cloudServicesNetworkId",
                flags={"required": True},
            )
            network_configuration.cni_network_id = AAZStrType(
                serialized_name="cniNetworkId",
                flags={"required": True},
            )
            network_configuration.dns_service_ip = AAZStrType(
                serialized_name="dnsServiceIp",
            )
            network_configuration.pod_cidrs = AAZListType(
                serialized_name="podCidrs",
            )
            network_configuration.service_cidrs = AAZListType(
                serialized_name="serviceCidrs",
            )

            attached_network_configuration = cls._schema_on_200_201.properties.network_configuration.attached_network_configuration
            attached_network_configuration.l2_networks = AAZListType(
                serialized_name="l2Networks",
            )
            attached_network_configuration.l3_networks = AAZListType(
                serialized_name="l3Networks",
            )
            attached_network_configuration.trunked_networks = AAZListType(
                serialized_name="trunkedNetworks",
            )

            l2_networks = cls._schema_on_200_201.properties.network_configuration.attached_network_configuration.l2_networks
            l2_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_l2_network_attachment_configuration_read(l2_networks.Element)

            l3_networks = cls._schema_on_200_201.properties.network_configuration.attached_network_configuration.l3_networks
            l3_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_l3_network_attachment_configuration_read(l3_networks.Element)

            trunked_networks = cls._schema_on_200_201.properties.network_configuration.attached_network_configuration.trunked_networks
            trunked_networks.Element = AAZObjectType()
            _CreateHelper._build_schema_trunked_network_attachment_configuration_read(trunked_networks.Element)

            bgp_service_load_balancer_configuration = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration
            bgp_service_load_balancer_configuration.bgp_advertisements = AAZListType(
                serialized_name="bgpAdvertisements",
            )
            bgp_service_load_balancer_configuration.bgp_peers = AAZListType(
                serialized_name="bgpPeers",
            )
            bgp_service_load_balancer_configuration.fabric_peering_enabled = AAZStrType(
                serialized_name="fabricPeeringEnabled",
            )
            bgp_service_load_balancer_configuration.ip_address_pools = AAZListType(
                serialized_name="ipAddressPools",
            )

            bgp_advertisements = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements
            bgp_advertisements.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element
            _element.advertise_to_fabric = AAZStrType(
                serialized_name="advertiseToFabric",
            )
            _element.communities = AAZListType()
            _element.ip_address_pools = AAZListType(
                serialized_name="ipAddressPools",
                flags={"required": True},
            )
            _element.peers = AAZListType()

            communities = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.communities
            communities.Element = AAZStrType()

            ip_address_pools = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.ip_address_pools
            ip_address_pools.Element = AAZStrType()

            peers = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_advertisements.Element.peers
            peers.Element = AAZStrType()

            bgp_peers = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_peers
            bgp_peers.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.bgp_peers.Element
            _element.bfd_enabled = AAZStrType(
                serialized_name="bfdEnabled",
            )
            _element.bgp_multi_hop = AAZStrType(
                serialized_name="bgpMultiHop",
            )
            _element.hold_time = AAZStrType(
                serialized_name="holdTime",
            )
            _element.keep_alive_time = AAZStrType(
                serialized_name="keepAliveTime",
            )
            _element.my_asn = AAZIntType(
                serialized_name="myAsn",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.peer_address = AAZStrType(
                serialized_name="peerAddress",
                flags={"required": True},
            )
            _element.peer_asn = AAZIntType(
                serialized_name="peerAsn",
                flags={"required": True},
            )
            _element.peer_port = AAZIntType(
                serialized_name="peerPort",
            )

            ip_address_pools = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools
            ip_address_pools.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element
            _element.addresses = AAZListType(
                flags={"required": True},
            )
            _element.auto_assign = AAZStrType(
                serialized_name="autoAssign",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.only_use_host_ips = AAZStrType(
                serialized_name="onlyUseHostIps",
            )

            addresses = cls._schema_on_200_201.properties.network_configuration.bgp_service_load_balancer_configuration.ip_address_pools.Element.addresses
            addresses.Element = AAZStrType()

            pod_cidrs = cls._schema_on_200_201.properties.network_configuration.pod_cidrs
            pod_cidrs.Element = AAZStrType()

            service_cidrs = cls._schema_on_200_201.properties.network_configuration.service_cidrs
            service_cidrs.Element = AAZStrType()

            nodes = cls._schema_on_200_201.properties.nodes
            nodes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.nodes.Element
            _element.agent_pool_id = AAZStrType(
                serialized_name="agentPoolId",
                flags={"read_only": True},
            )
            _element.availability_zone = AAZStrType(
                serialized_name="availabilityZone",
                flags={"read_only": True},
            )
            _element.bare_metal_machine_id = AAZStrType(
                serialized_name="bareMetalMachineId",
                flags={"read_only": True},
            )
            _element.cpu_cores = AAZIntType(
                serialized_name="cpuCores",
                flags={"read_only": True},
            )
            _element.detailed_status = AAZStrType(
                serialized_name="detailedStatus",
                flags={"read_only": True},
            )
            _element.detailed_status_message = AAZStrType(
                serialized_name="detailedStatusMessage",
                flags={"read_only": True},
            )
            _element.disk_size_gb = AAZIntType(
                serialized_name="diskSizeGB",
                flags={"read_only": True},
            )
            _element.image = AAZStrType(
                flags={"read_only": True},
            )
            _element.kubernetes_version = AAZStrType(
                serialized_name="kubernetesVersion",
                flags={"read_only": True},
            )
            _element.labels = AAZListType(
                flags={"read_only": True},
            )
            _element.memory_size_gb = AAZIntType(
                serialized_name="memorySizeGB",
                flags={"read_only": True},
            )
            _element.mode = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.network_attachments = AAZListType(
                serialized_name="networkAttachments",
                flags={"read_only": True},
            )
            _element.power_state = AAZStrType(
                serialized_name="powerState",
                flags={"read_only": True},
            )
            _element.role = AAZStrType(
                flags={"read_only": True},
            )
            _element.taints = AAZListType(
                flags={"read_only": True},
            )
            _element.vm_sku_name = AAZStrType(
                serialized_name="vmSkuName",
                flags={"read_only": True},
            )

            labels = cls._schema_on_200_201.properties.nodes.Element.labels
            labels.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(labels.Element)

            network_attachments = cls._schema_on_200_201.properties.nodes.Element.network_attachments
            network_attachments.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.nodes.Element.network_attachments.Element
            _element.attached_network_id = AAZStrType(
                serialized_name="attachedNetworkId",
                flags={"required": True},
            )
            _element.default_gateway = AAZStrType(
                serialized_name="defaultGateway",
            )
            _element.ip_allocation_method = AAZStrType(
                serialized_name="ipAllocationMethod",
                flags={"required": True},
            )
            _element.ipv4_address = AAZStrType(
                serialized_name="ipv4Address",
            )
            _element.ipv6_address = AAZStrType(
                serialized_name="ipv6Address",
            )
            _element.mac_address = AAZStrType(
                serialized_name="macAddress",
                flags={"read_only": True},
            )
            _element.network_attachment_name = AAZStrType(
                serialized_name="networkAttachmentName",
            )

            taints = cls._schema_on_200_201.properties.nodes.Element.taints
            taints.Element = AAZObjectType()
            _CreateHelper._build_schema_kubernetes_label_read(taints.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_kubernetes_label_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("key", AAZStrType, ".key", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_l2_network_attachment_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("pluginType", AAZStrType, ".plugin_type")

    @classmethod
    def _build_schema_l3_network_attachment_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("ipamEnabled", AAZStrType, ".ipam_enabled")
        _builder.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("pluginType", AAZStrType, ".plugin_type")

    @classmethod
    def _build_schema_ssh_public_key_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("keyData", AAZStrType, ".key_data", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_trunked_network_attachment_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("networkId", AAZStrType, ".network_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("pluginType", AAZStrType, ".plugin_type")

    _schema_kubernetes_label_read = None

    @classmethod
    def _build_schema_kubernetes_label_read(cls, _schema):
        if cls._schema_kubernetes_label_read is not None:
            _schema.key = cls._schema_kubernetes_label_read.key
            _schema.value = cls._schema_kubernetes_label_read.value
            return

        cls._schema_kubernetes_label_read = _schema_kubernetes_label_read = AAZObjectType()

        kubernetes_label_read = _schema_kubernetes_label_read
        kubernetes_label_read.key = AAZStrType(
            flags={"required": True},
        )
        kubernetes_label_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.key = cls._schema_kubernetes_label_read.key
        _schema.value = cls._schema_kubernetes_label_read.value

    _schema_l2_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_l2_network_attachment_configuration_read(cls, _schema):
        if cls._schema_l2_network_attachment_configuration_read is not None:
            _schema.network_id = cls._schema_l2_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_l2_network_attachment_configuration_read.plugin_type
            return

        cls._schema_l2_network_attachment_configuration_read = _schema_l2_network_attachment_configuration_read = AAZObjectType()

        l2_network_attachment_configuration_read = _schema_l2_network_attachment_configuration_read
        l2_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        l2_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.network_id = cls._schema_l2_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_l2_network_attachment_configuration_read.plugin_type

    _schema_l3_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_l3_network_attachment_configuration_read(cls, _schema):
        if cls._schema_l3_network_attachment_configuration_read is not None:
            _schema.ipam_enabled = cls._schema_l3_network_attachment_configuration_read.ipam_enabled
            _schema.network_id = cls._schema_l3_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_l3_network_attachment_configuration_read.plugin_type
            return

        cls._schema_l3_network_attachment_configuration_read = _schema_l3_network_attachment_configuration_read = AAZObjectType()

        l3_network_attachment_configuration_read = _schema_l3_network_attachment_configuration_read
        l3_network_attachment_configuration_read.ipam_enabled = AAZStrType(
            serialized_name="ipamEnabled",
        )
        l3_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        l3_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.ipam_enabled = cls._schema_l3_network_attachment_configuration_read.ipam_enabled
        _schema.network_id = cls._schema_l3_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_l3_network_attachment_configuration_read.plugin_type

    _schema_ssh_public_key_read = None

    @classmethod
    def _build_schema_ssh_public_key_read(cls, _schema):
        if cls._schema_ssh_public_key_read is not None:
            _schema.key_data = cls._schema_ssh_public_key_read.key_data
            return

        cls._schema_ssh_public_key_read = _schema_ssh_public_key_read = AAZObjectType()

        ssh_public_key_read = _schema_ssh_public_key_read
        ssh_public_key_read.key_data = AAZStrType(
            serialized_name="keyData",
            flags={"required": True},
        )

        _schema.key_data = cls._schema_ssh_public_key_read.key_data

    _schema_trunked_network_attachment_configuration_read = None

    @classmethod
    def _build_schema_trunked_network_attachment_configuration_read(cls, _schema):
        if cls._schema_trunked_network_attachment_configuration_read is not None:
            _schema.network_id = cls._schema_trunked_network_attachment_configuration_read.network_id
            _schema.plugin_type = cls._schema_trunked_network_attachment_configuration_read.plugin_type
            return

        cls._schema_trunked_network_attachment_configuration_read = _schema_trunked_network_attachment_configuration_read = AAZObjectType()

        trunked_network_attachment_configuration_read = _schema_trunked_network_attachment_configuration_read
        trunked_network_attachment_configuration_read.network_id = AAZStrType(
            serialized_name="networkId",
            flags={"required": True},
        )
        trunked_network_attachment_configuration_read.plugin_type = AAZStrType(
            serialized_name="pluginType",
        )

        _schema.network_id = cls._schema_trunked_network_attachment_configuration_read.network_id
        _schema.plugin_type = cls._schema_trunked_network_attachment_configuration_read.plugin_type


__all__ = ["Create"]
