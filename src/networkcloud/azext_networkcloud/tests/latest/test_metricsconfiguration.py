# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# --------------------------------------------------------------------------------------------
# pylint: disable=too-few-public-methods,unnecessary-pass,unused-argument

"""
MetricsConfiguration tests scenarios
"""

from azure.cli.testsdk import ScenarioTest

from .config import CONFIG


def setup_scenario1(test):
    """Env setup_scenario1"""
    pass


def cleanup_scenario1(test):
    """Env cleanup_scenario1"""
    pass


def call_scenario1(test):
    """# Testcase: scenario1"""
    setup_scenario1(test)
    step_create(test, checks=[test.check("provisioningState", "Succeeded")])
    step_update(
        test,
        checks=[
            test.check("tags", "{tagsUpdate}"),
            test.check("provisioningState", "Succeeded"),
        ],
    )
    step_show(test, checks=[])
    step_list_resource_group(test, checks=[])
    step_delete(test, checks=[])
    cleanup_scenario1(test)


def step_create(test, checks=None):
    """MetricsConfiguration create operation"""
    if checks is None:
        checks = []
    test.cmd(
        "az networkcloud cluster metricsconfiguration create --cluster-name {clusterName} "
        '--extended-location name={extendedLocation} type="CustomLocation" '
        "--location {location} --collection-interval {collectionInterval} "
        "--enabled-metrics {enabledMetrics} --tags {tags} "
        "--resource-group {rg}",
        checks=checks,
    )


def step_show(test, checks=None):
    """MetricsConfiguration show operation"""
    if checks is None:
        checks = []
    test.cmd(
        "az networkcloud cluster metricsconfiguration show --cluster-name {clusterName} --resource-group {rg}"
    )


def step_delete(test, checks=None):
    """MetricsConfiguration delete operation"""
    if checks is None:
        checks = []
    test.cmd(
        "az networkcloud cluster metricsconfiguration delete --cluster-name {clusterName} --resource-group {rg} -y"
    )


def step_list_resource_group(test, checks=None):
    """MetricsConfiguration list by resource group operation"""
    if checks is None:
        checks = []
    test.cmd(
        "az networkcloud cluster metricsconfiguration list "
        "--cluster-name {clusterName} --resource-group {rg}"
    )


def step_update(test, checks=None):
    """MetricsConfiguration update operation"""
    if checks is None:
        checks = []
    test.cmd(
        "az networkcloud cluster metricsconfiguration update "
        "--cluster-name {clusterName} --tags {tagsUpdate} "
        "--enabled-metrics {enabledMetrics} "
        "--collection-interval {collectionInterval} --resource-group {rg}"
    )


class MetricsConfigurationScenarioTest(ScenarioTest):
    """MetricsConfiguration scenario test"""

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.kwargs.update(
            {
                # Autogenerated resource group is not used in this scenario as it depends on the
                # parent resource cluster to be present in the RG
                "rg": CONFIG.get("METRICSCONFIGURATION", "resource_group"),
                "location": CONFIG.get("METRICSCONFIGURATION", "location"),
                "extendedLocation": CONFIG.get(
                    "METRICSCONFIGURATION", "extended_location"
                ),
                "tags": CONFIG.get("METRICSCONFIGURATION", "tags"),
                "collectionInterval": CONFIG.get(
                    "METRICSCONFIGURATION", "collection_interval"
                ),
                "enabledMetrics": CONFIG.get("METRICSCONFIGURATION", "enabled_metrics"),
                "tagsUpdate": CONFIG.get("METRICSCONFIGURATION", "tags_update"),
                "clusterName": CONFIG.get("METRICSCONFIGURATION", "cluster_name"),
            }
        )

    def test_metricsconfiguration_scenario1(self):
        """test scenario for MetricsConfiguration CRUD operations"""
        call_scenario1(self)
