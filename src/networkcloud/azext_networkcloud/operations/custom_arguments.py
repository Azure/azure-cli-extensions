# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Custom code that is added in addition to auto-generated by aaz-dev code.
# --------------------------------------------------------------------------------------------
# pylint: disable=too-many-lines,no-member,inconsistent-return-statements
# pylint: disable=too-many-statements,too-few-public-methods

"""
Custom argument format
"""
import abc
import os

from azure.cli.core import keys
from azure.cli.core.aaz._arg_fmt import AAZBaseArgFormat
from azure.cli.core.aaz.exceptions import AAZInvalidArgValueError
from azure.cli.core.azclierror import InvalidArgumentValueError
from knack.log import get_logger

logger = get_logger(__name__)


# Custom Argument to support both SSH file path and SSH key
class AAZFileStringArgFormat(AAZBaseArgFormat):
    def __call__(self, ctx, value):
        data = value._data

        if data is None or not data:
            return value
        assert isinstance(data, dict)
        ssh_data = data["key_data"]
        if ssh_data is None:
            return value

        # Check if the data contains ssh key
        try:
            if keys.is_valid_ssh_rsa_public_key(ssh_data):
                value._data["key_data"] = ssh_data
                return value
        except Exception as excep:
            raise InvalidArgumentValueError(
                "Unsupported SSH Key is provided."
            ) from excep

        #  Check if the data has the path to the ssh key with "~"
        if os.fspath(ssh_data).startswith("~"):
            value._data["key_data"] = self.read_file(
                os.path.expanduser("~") + ssh_data.split("~")[1]
            )
            return value
        #  Check if the data has the path to the ssh key
        if os.path.isfile(ssh_data):
            value._data["key_data"] = self.read_file(ssh_data)
            return value

        raise AAZInvalidArgValueError(
            f"Invalid Format '{data}' should be either the ssh key or file path to ssh key."
        )

    @abc.abstractmethod
    def read_file(self, file_path):
        with open(file_path, "r", encoding="utf-8") as k:
            content = k.read()
        try:
            if keys.is_valid_ssh_rsa_public_key(content):
                return content
        except Exception as excep:
            raise InvalidArgumentValueError(
                f"Unsupported Key {file_path} is provided."
            ) from excep
