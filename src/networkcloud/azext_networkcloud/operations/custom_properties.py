# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Custom code that is added in addition to auto-generated by aaz-dev code.
# --------------------------------------------------------------------------------------------
# pylint: disable=too-many-lines,no-member,inconsistent-return-statements
# pylint: disable=too-many-statements,too-few-public-methods

"""
Helper class for all POST commands that return extra properties back to the customer
"""

import tarfile
import urllib

from azure.cli.core.aaz import has_value
from azure.cli.core.azclierror import AzureInternalError
from knack.log import get_logger

logger = get_logger(__name__)


class CustomActionProperties:
    """Helper class for all POST commands that return extra properties back to the customer"""

    # Custom handling of response will display the output head and the result URL
    # it will also save files into output directory if provided
    @staticmethod
    def _output(parent_cmd, *args, **kwargs):  # pylint: disable=unused-argument
        args = parent_cmd.ctx.args
        properties = parent_cmd.ctx.vars.instance.properties

        # Display the output head to the console
        if has_value(properties.output_head):
            logger.warning(properties.output_head.to_serialized_data())
            logger.warning("\n================================")

        # Display the result URL
        if has_value(properties.result_url):
            result_url = properties.result_url.to_serialized_data()
            logger.warning(
                "Script execution result can be found in storage account: \n %s \n",
                result_url,
            )
            # extract result to the provided directory
            if has_value(args.output):
                output_directory = args.output.to_serialized_data()

                try:
                    with urllib.request.urlopen(result_url) as result:
                        with tarfile.open(fileobj=result, mode="r:gz") as tar:
                            tar.extractall(path=output_directory)
                            logger.warning(
                                "Extracted results are available in directory: %s",
                                output_directory,
                            )
                except Exception as excep:
                    raise AzureInternalError(
                        f"failed to retrieve output, error {excep}"
                    ) from excep
        else:
            result = parent_cmd.deserialize_output(
                parent_cmd.ctx.vars.instance, client_flatten=True
            )
            return result
