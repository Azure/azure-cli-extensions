# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "purestorageblock reservation get-resource-limit",
    is_preview=True,
)
class GetResourceLimit(AAZCommand):
    """Limits constraining certain resource properties.
    """

    _aaz_info = {
        "version": "2024-11-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/reservations/{}/getresourcelimits", "2024-11-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.reservation_name = AAZStrArg(
            options=["--reservation-name"],
            help="Name of the reservation.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_]{1,127}$",
                max_length=127,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ReservationsGetResourceLimits(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReservationsGetResourceLimits(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/reservations/{reservationName}/getResourceLimits",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "reservationName", self.ctx.args.reservation_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.performance_policy = AAZObjectType(
                serialized_name="performancePolicy",
                flags={"required": True},
            )
            _schema_on_200.protection_policy = AAZObjectType(
                serialized_name="protectionPolicy",
                flags={"required": True},
            )
            _schema_on_200.storage_pool = AAZObjectType(
                serialized_name="storagePool",
                flags={"required": True},
            )
            _schema_on_200.volume = AAZObjectType(
                flags={"required": True},
            )

            performance_policy = cls._schema_on_200.performance_policy
            performance_policy.bandwidth_limit = AAZObjectType(
                serialized_name="bandwidthLimit",
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(performance_policy.bandwidth_limit)
            performance_policy.iops_limit = AAZObjectType(
                serialized_name="iopsLimit",
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(performance_policy.iops_limit)

            protection_policy = cls._schema_on_200.protection_policy
            protection_policy.frequency = AAZObjectType(
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(protection_policy.frequency)
            protection_policy.retention = AAZObjectType(
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(protection_policy.retention)

            storage_pool = cls._schema_on_200.storage_pool
            storage_pool.physical_availability_zones = AAZListType(
                serialized_name="physicalAvailabilityZones",
                flags={"required": True},
            )
            storage_pool.provisioned_bandwidth_mb_per_sec = AAZObjectType(
                serialized_name="provisionedBandwidthMbPerSec",
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(storage_pool.provisioned_bandwidth_mb_per_sec)
            storage_pool.provisioned_iops = AAZObjectType(
                serialized_name="provisionedIops",
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(storage_pool.provisioned_iops)

            physical_availability_zones = cls._schema_on_200.storage_pool.physical_availability_zones
            physical_availability_zones.Element = AAZStrType()

            volume = cls._schema_on_200.volume
            volume.provisioned_size = AAZObjectType(
                serialized_name="provisionedSize",
                flags={"required": True},
            )
            _GetResourceLimitHelper._build_schema_range_limits_read(volume.provisioned_size)

            return cls._schema_on_200


class _GetResourceLimitHelper:
    """Helper class for GetResourceLimit"""

    _schema_range_limits_read = None

    @classmethod
    def _build_schema_range_limits_read(cls, _schema):
        if cls._schema_range_limits_read is not None:
            _schema.max = cls._schema_range_limits_read.max
            _schema.min = cls._schema_range_limits_read.min
            return

        cls._schema_range_limits_read = _schema_range_limits_read = AAZObjectType()

        range_limits_read = _schema_range_limits_read
        range_limits_read.max = AAZIntType(
            flags={"required": True},
        )
        range_limits_read.min = AAZIntType(
            flags={"required": True},
        )

        _schema.max = cls._schema_range_limits_read.max
        _schema.min = cls._schema_range_limits_read.min


__all__ = ["GetResourceLimit"]
