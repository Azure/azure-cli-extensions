# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "purestorageblock storage-pool finalize-avs-connection",
    is_preview=True,
)
class FinalizeAvsConnection(AAZCommand):
    """Finalize an already started AVS connection to a specific AVS SDDC
    """

    _aaz_info = {
        "version": "2024-11-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/storagepools/{}/finalizeavsconnection", "2024-11-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_pool_name = AAZStrArg(
            options=["--storage-pool-name"],
            help="Name of the storage pool",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_]{1,127}$",
                max_length=127,
                min_length=1,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.service_initialization_data = AAZObjectArg(
            options=["--service-initialization-data"],
            arg_group="Properties",
            help="Explicit AVS connection information",
        )
        _args_schema.service_initialization_data_enc = AAZStrArg(
            options=["--service-initialization-data-enc"],
            arg_group="Properties",
            help="Encoded AVS connection information",
        )

        service_initialization_data = cls._args_schema.service_initialization_data
        service_initialization_data.service_account_password = AAZPasswordArg(
            options=["service-account-password"],
            help="Service account password",
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        service_initialization_data.service_account_username = AAZStrArg(
            options=["service-account-username"],
            help="Service account username",
        )
        service_initialization_data.v_sphere_certificate = AAZStrArg(
            options=["v-sphere-certificate"],
            help="AVS instance's vSphere certificate",
        )
        service_initialization_data.v_sphere_ip = AAZStrArg(
            options=["v-sphere-ip"],
            help="AVS instance's vSphere IP address",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.StoragePoolsFinalizeAvsConnection(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class StoragePoolsFinalizeAvsConnection(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    None,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/finalizeAvsConnection",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storagePoolName", self.ctx.args.storage_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("serviceInitializationData", AAZObjectType, ".service_initialization_data")
            _builder.set_prop("serviceInitializationDataEnc", AAZStrType, ".service_initialization_data_enc")

            service_initialization_data = _builder.get(".serviceInitializationData")
            if service_initialization_data is not None:
                service_initialization_data.set_prop("serviceAccountPassword", AAZStrType, ".service_account_password", typ_kwargs={"flags": {"secret": True}})
                service_initialization_data.set_prop("serviceAccountUsername", AAZStrType, ".service_account_username")
                service_initialization_data.set_prop("vSphereCertificate", AAZStrType, ".v_sphere_certificate")
                service_initialization_data.set_prop("vSphereIp", AAZStrType, ".v_sphere_ip")

            return self.serialize_content(_content_value)


class _FinalizeAvsConnectionHelper:
    """Helper class for FinalizeAvsConnection"""


__all__ = ["FinalizeAvsConnection"]
