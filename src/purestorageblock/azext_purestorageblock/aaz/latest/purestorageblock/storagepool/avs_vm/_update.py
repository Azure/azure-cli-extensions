# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "purestorageblock storagepool avs-vm update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update an AVS VM

    :example: AvsVMUpdateExample
        az purestorageblock storagepool avs-vm update --resource-group rgpurestorage --storage-pool-name storagePoolname --avs-vm-id cbdec-ddbb --soft-deletion {"destroyed":false}
    """

    _aaz_info = {
        "version": "2024-11-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/purestorage.block/storagepools/{}/avsvms/{}", "2024-11-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.avs_vm_id = AAZStrArg(
            options=["-n", "--name", "--avs-vm-id"],
            help="ID of the AVS VM",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-fA-F0-9\\-]{1,64}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_pool_name = AAZStrArg(
            options=["--storage-pool-name"],
            help="Name of the storage pool",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\-_]{1,127}$",
                max_length=127,
                min_length=1,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.soft_deletion = AAZObjectArg(
            options=["--soft-deletion"],
            arg_group="Properties",
            help="AVS VM's soft-deletion state",
        )

        soft_deletion = cls._args_schema.soft_deletion
        soft_deletion.destroyed = AAZBoolArg(
            options=["destroyed"],
            help="If false, the resource is active; if true, the resource has been destroyed; resources can be soft-deleted by setting destroyed to true, and recovered by setting it to false",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.AvsVmsUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AvsVmsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PureStorage.Block/storagePools/{storagePoolName}/avsVms/{avsVmId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "avsVmId", self.ctx.args.avs_vm_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storagePoolName", self.ctx.args.storage_pool_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("softDeletion", AAZObjectType, ".soft_deletion")

            soft_deletion = _builder.get(".properties.softDeletion")
            if soft_deletion is not None:
                soft_deletion.set_prop("destroyed", AAZBoolType, ".destroyed")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.avs = AAZObjectType(
                flags={"read_only": True},
            )
            properties.created_timestamp = AAZStrType(
                serialized_name="createdTimestamp",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.soft_deletion = AAZObjectType(
                serialized_name="softDeletion",
            )
            properties.space = AAZObjectType(
                flags={"read_only": True},
            )
            properties.storage_pool_internal_id = AAZStrType(
                serialized_name="storagePoolInternalId",
                flags={"read_only": True},
            )
            properties.storage_pool_resource_id = AAZStrType(
                serialized_name="storagePoolResourceId",
                flags={"read_only": True},
            )
            properties.volume_container_type = AAZStrType(
                serialized_name="volumeContainerType",
                flags={"read_only": True},
            )

            avs = cls._schema_on_200.properties.avs
            avs.avs_vm_internal_id = AAZStrType(
                serialized_name="avsVmInternalId",
                flags={"required": True},
            )
            avs.vm_id = AAZStrType(
                serialized_name="vmId",
                flags={"required": True},
            )
            avs.vm_name = AAZStrType(
                serialized_name="vmName",
                flags={"required": True},
            )
            avs.vm_type = AAZStrType(
                serialized_name="vmType",
                flags={"required": True},
            )

            soft_deletion = cls._schema_on_200.properties.soft_deletion
            soft_deletion.destroyed = AAZBoolType(
                flags={"required": True},
            )
            soft_deletion.eradication_timestamp = AAZStrType(
                serialized_name="eradicationTimestamp",
                flags={"read_only": True},
            )

            space = cls._schema_on_200.properties.space
            space.shared = AAZIntType(
                flags={"required": True},
            )
            space.snapshots = AAZIntType(
                flags={"required": True},
            )
            space.total_used = AAZIntType(
                serialized_name="totalUsed",
                flags={"required": True},
            )
            space.unique = AAZIntType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
