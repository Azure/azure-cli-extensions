# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('dnc controller show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc controller create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)

    with self.argument_context('dnc controller delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc controller wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc delegated-network list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dnc orchestrator-instance-service list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dnc orchestrator-instance-service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc orchestrator-instance-service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned', 'None']), help='The '
                   'type of identity used for orchestrator cluster. Type \'SystemAssigned\' will use an implicitly '
                   'created identity orchestrator clusters', arg_group='Identity')
        c.argument('orchestrator_app_id', type=str, help='AAD ID used with apiserver')
        c.argument('orchestrator_tenant_id', type=str, help='TenantID of server App ID')
        c.argument('cluster_root_ca', type=str, help='RootCA certificate of kubernetes cluster base64 encoded')
        c.argument('api_server_endpoint', type=str, help='K8s APIServer url. Either one of apiServerEndpoint or '
                   'privateLinkResourceId can be specified')
        c.argument('private_link_resource_id', options_list=['--priv-link-resource-id'], type=str, help='private link '
                   'arm resource id. Either one of apiServerEndpoint or privateLinkResourceId can be specified')
        c.argument('id_', options_list=['--id'], type=str, help='controller arm resource id', arg_group='Controller '
                   'Details')

    with self.argument_context('dnc orchestrator-instance-service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')
        c.argument('force_delete', arg_type=get_three_state_flag(), help='Force delete resource')

    with self.argument_context('dnc orchestrator-instance-service wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc delegated-subnet-service list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('dnc delegated-subnet-service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')

    with self.argument_context('dnc delegated-subnet-service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('id_', options_list=['--id'], type=str, help='controller arm resource id', arg_group='Controller '
                   'Details')
        c.argument('subnet_details_id', type=str, help='subnet arm resource id', arg_group='Subnet Details')

    with self.argument_context('dnc delegated-subnet-service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')
        c.argument('force_delete', arg_type=get_three_state_flag(), help='Force delete resource')

    with self.argument_context('dnc delegated-subnet-service wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('resource_name', type=str, help='The name of the resource. It must be a minimum of 3 characters, '
                   'and a maximum of 63.', id_part='name')
