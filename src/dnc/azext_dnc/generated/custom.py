# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def dnc_controller_show(client,
                        resource_group_name,
                        resource_name):
    return client.get_details(resource_group_name=resource_group_name,
                              resource_name=resource_name)


def dnc_controller_create(client,
                          resource_group_name,
                          resource_name,
                          location=None,
                          tags=None,
                          no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name,
                       parameters=parameters)


def dnc_controller_delete(client,
                          resource_group_name,
                          resource_name,
                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name)


def dnc_delegated_network_list(client,
                               resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def dnc_orchestrator_instance_service_list(client,
                                           resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def dnc_orchestrator_instance_service_show(client,
                                           resource_group_name,
                                           resource_name):
    return client.get_details(resource_group_name=resource_group_name,
                              resource_name=resource_name)


def dnc_orchestrator_instance_service_create(client,
                                             resource_group_name,
                                             resource_name,
                                             location=None,
                                             tags=None,
                                             type_=None,
                                             orchestrator_app_id=None,
                                             orchestrator_tenant_id=None,
                                             cluster_root_ca=None,
                                             api_server_endpoint=None,
                                             private_link_resource_id=None,
                                             id_=None,
                                             no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = "Kubernetes"
    parameters['tags'] = tags
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['properties'] = {}
    parameters['properties']['orchestrator_app_id'] = orchestrator_app_id
    parameters['properties']['orchestrator_tenant_id'] = orchestrator_tenant_id
    parameters['properties']['cluster_root_ca'] = cluster_root_ca
    parameters['properties']['api_server_endpoint'] = api_server_endpoint
    parameters['properties']['private_link_resource_id'] = private_link_resource_id
    parameters['properties']['controller_details'] = {}
    parameters['properties']['controller_details']['id'] = id_
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name,
                       parameters=parameters)


def dnc_orchestrator_instance_service_delete(client,
                                             resource_group_name,
                                             resource_name,
                                             force_delete=None,
                                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name,
                       force_delete=force_delete)


def dnc_delegated_subnet_service_list(client,
                                      resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def dnc_delegated_subnet_service_show(client,
                                      resource_group_name,
                                      resource_name):
    return client.get_details(resource_group_name=resource_group_name,
                              resource_name=resource_name)


def dnc_delegated_subnet_service_create(client,
                                        resource_group_name,
                                        resource_name,
                                        location=None,
                                        tags=None,
                                        id_=None,
                                        subnet_details_id=None,
                                        no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['controller_details'] = {}
    parameters['controller_details']['id'] = id_
    parameters['subnet_details'] = {}
    parameters['subnet_details']['id'] = subnet_details_id
    return sdk_no_wait(no_wait,
                       client.begin_put_details,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name,
                       parameters=parameters)


def dnc_delegated_subnet_service_delete(client,
                                        resource_group_name,
                                        resource_name,
                                        force_delete=None,
                                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete_details,
                       resource_group_name=resource_group_name,
                       resource_name=resource_name,
                       force_delete=force_delete)
