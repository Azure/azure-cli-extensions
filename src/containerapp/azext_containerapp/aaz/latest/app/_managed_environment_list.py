# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "app managed-environment-list",
)
class ManagedEnvironmentList(AAZCommand):
    """List all Managed Environments for a subscription.
    """

    _aaz_info = {
        "version": "2022-11-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.app/managedenvironments", "2022-11-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ManagedEnvironmentsListBySubscription(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ManagedEnvironmentsListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.App/managedEnvironments",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.kind = AAZStrType()
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.sku = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.app_logs_configuration = AAZObjectType(
                serialized_name="appLogsConfiguration",
            )
            properties.custom_domain_configuration = AAZObjectType(
                serialized_name="customDomainConfiguration",
            )
            properties.dapr_ai_connection_string = AAZStrType(
                serialized_name="daprAIConnectionString",
            )
            properties.dapr_ai_instrumentation_key = AAZStrType(
                serialized_name="daprAIInstrumentationKey",
            )
            properties.dapr_configuration = AAZObjectType(
                serialized_name="daprConfiguration",
            )
            properties.default_domain = AAZStrType(
                serialized_name="defaultDomain",
                flags={"read_only": True},
            )
            properties.deployment_errors = AAZStrType(
                serialized_name="deploymentErrors",
                flags={"read_only": True},
            )
            properties.event_stream_endpoint = AAZStrType(
                serialized_name="eventStreamEndpoint",
                flags={"read_only": True},
            )
            properties.keda_configuration = AAZObjectType(
                serialized_name="kedaConfiguration",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.quotas = AAZObjectType()
            properties.static_ip = AAZStrType(
                serialized_name="staticIp",
                flags={"read_only": True},
            )
            properties.vnet_configuration = AAZObjectType(
                serialized_name="vnetConfiguration",
            )
            properties.workload_profiles = AAZListType(
                serialized_name="workloadProfiles",
            )
            properties.zone_redundant = AAZBoolType(
                serialized_name="zoneRedundant",
            )

            app_logs_configuration = cls._schema_on_200.value.Element.properties.app_logs_configuration
            app_logs_configuration.destination = AAZStrType()
            app_logs_configuration.log_analytics_configuration = AAZObjectType(
                serialized_name="logAnalyticsConfiguration",
            )

            log_analytics_configuration = cls._schema_on_200.value.Element.properties.app_logs_configuration.log_analytics_configuration
            log_analytics_configuration.customer_id = AAZStrType(
                serialized_name="customerId",
            )

            custom_domain_configuration = cls._schema_on_200.value.Element.properties.custom_domain_configuration
            custom_domain_configuration.certificate_password = AAZStrType(
                serialized_name="certificatePassword",
            )
            custom_domain_configuration.certificate_value = AAZStrType(
                serialized_name="certificateValue",
            )
            custom_domain_configuration.custom_domain_verification_id = AAZStrType(
                serialized_name="customDomainVerificationId",
                flags={"read_only": True},
            )
            custom_domain_configuration.dns_suffix = AAZStrType(
                serialized_name="dnsSuffix",
            )
            custom_domain_configuration.expiration_date = AAZStrType(
                serialized_name="expirationDate",
                flags={"read_only": True},
            )
            custom_domain_configuration.subject_name = AAZStrType(
                serialized_name="subjectName",
                flags={"read_only": True},
            )
            custom_domain_configuration.thumbprint = AAZStrType(
                flags={"read_only": True},
            )

            dapr_configuration = cls._schema_on_200.value.Element.properties.dapr_configuration
            dapr_configuration.version = AAZStrType(
                flags={"read_only": True},
            )

            keda_configuration = cls._schema_on_200.value.Element.properties.keda_configuration
            keda_configuration.version = AAZStrType(
                flags={"read_only": True},
            )

            quotas = cls._schema_on_200.value.Element.properties.quotas
            quotas.cores = AAZObjectType()

            cores = cls._schema_on_200.value.Element.properties.quotas.cores
            cores.total = AAZFloatType(
                flags={"read_only": True},
            )
            cores.used = AAZFloatType(
                flags={"read_only": True},
            )

            vnet_configuration = cls._schema_on_200.value.Element.properties.vnet_configuration
            vnet_configuration.docker_bridge_cidr = AAZStrType(
                serialized_name="dockerBridgeCidr",
            )
            vnet_configuration.infrastructure_subnet_id = AAZStrType(
                serialized_name="infrastructureSubnetId",
            )
            vnet_configuration.internal = AAZBoolType()
            vnet_configuration.outbound_settings = AAZObjectType(
                serialized_name="outboundSettings",
            )
            vnet_configuration.platform_reserved_cidr = AAZStrType(
                serialized_name="platformReservedCidr",
            )
            vnet_configuration.platform_reserved_dns_ip = AAZStrType(
                serialized_name="platformReservedDnsIP",
            )
            vnet_configuration.runtime_subnet_id = AAZStrType(
                serialized_name="runtimeSubnetId",
            )

            outbound_settings = cls._schema_on_200.value.Element.properties.vnet_configuration.outbound_settings
            outbound_settings.out_bound_type = AAZStrType(
                serialized_name="outBoundType",
            )
            outbound_settings.virtual_network_appliance_ip = AAZStrType(
                serialized_name="virtualNetworkApplianceIp",
            )

            workload_profiles = cls._schema_on_200.value.Element.properties.workload_profiles
            workload_profiles.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.workload_profiles.Element
            _element.maximum_count = AAZIntType(
                serialized_name="maximumCount",
                flags={"required": True},
            )
            _element.minimum_count = AAZIntType(
                serialized_name="minimumCount",
                flags={"required": True},
            )
            _element.workload_profile_name = AAZStrType(
                serialized_name="workloadProfileName",
                flags={"required": True},
            )
            _element.workload_profile_type = AAZStrType(
                serialized_name="workloadProfileType",
                flags={"required": True},
            )

            sku = cls._schema_on_200.value.Element.sku
            sku.name = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ManagedEnvironmentListHelper:
    """Helper class for ManagedEnvironmentList"""


__all__ = ["ManagedEnvironmentList"]
