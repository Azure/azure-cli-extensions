# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "document-db cluster update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a mongo cluster.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.documentdb/mongoclusters/{}", "2024-07-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cluster_name = AAZStrArg(
            options=["-n", "--name", "--cluster-name"],
            help="The name of the mongo cluster.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]+(-[a-z0-9]+)*",
                max_length=40,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Administrator"

        _args_schema = cls._args_schema
        _args_schema.administrator_password = AAZStrArg(
            options=["--administrator-password"],
            arg_group="Administrator",
            help="The administrator password.",
            nullable=True,
        )
        _args_schema.administrator_name = AAZStrArg(
            options=["--administrator-name"],
            arg_group="Administrator",
            help="The administrator user name.",
            nullable=True,
        )

        # define Arg Group "Compute"

        _args_schema = cls._args_schema
        _args_schema.compute_tier = AAZStrArg(
            options=["--compute-tier"],
            arg_group="Compute",
            help="The compute tier to assign to the cluster, where each tier maps to a virtual-core and memory size. Example values: 'M30', 'M40'.",
            nullable=True,
        )

        # define Arg Group "HighAvailability"

        _args_schema = cls._args_schema
        _args_schema.high_availability_mode = AAZStrArg(
            options=["--high-availability-mode"],
            arg_group="HighAvailability",
            help="The target high availability mode requested for the cluster.",
            nullable=True,
            enum={"Disabled": "Disabled", "SameZone": "SameZone", "ZoneRedundantPreferred": "ZoneRedundantPreferred"},
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.preview_features = AAZListArg(
            options=["--preview-features"],
            arg_group="Properties",
            help="List of private endpoint connections.",
            nullable=True,
        )
        _args_schema.public_network_access = AAZStrArg(
            options=["--public-network-access"],
            arg_group="Properties",
            help="Whether or not public endpoint access is allowed for this mongo cluster.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.server_version = AAZStrArg(
            options=["--server-version"],
            arg_group="Properties",
            help="The Mongo DB server version. Defaults to the latest available version if not specified.",
            nullable=True,
        )

        preview_features = cls._args_schema.preview_features
        preview_features.Element = AAZStrArg(
            nullable=True,
            enum={"GeoReplicas": "GeoReplicas"},
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Sharding"

        _args_schema = cls._args_schema
        _args_schema.shard_count = AAZIntArg(
            options=["--shard-count"],
            arg_group="Sharding",
            help="Number of shards to provision on the cluster.",
            nullable=True,
        )

        # define Arg Group "Storage"

        _args_schema = cls._args_schema
        _args_schema.storage_size = AAZIntArg(
            options=["--storage-size"],
            arg_group="Storage",
            help="The size of the data disk assigned to each server in Gigabytes (Gb).",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MongoClustersGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.MongoClustersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MongoClustersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/mongoClusters/{mongoClusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "mongoClusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _UpdateHelper._build_schema_azure_resourcemanager_commontypes_systemdata_read(_schema_on_200.system_data)
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.administrator = AAZObjectType()
            properties.backup = AAZObjectType()
            properties.cluster_status = AAZStrType(
                serialized_name="clusterStatus",
                flags={"read_only": True},
            )
            properties.compute = AAZObjectType()
            properties.connection_string = AAZStrType(
                serialized_name="connectionString",
                flags={"read_only": True},
            )
            properties.high_availability = AAZObjectType(
                serialized_name="highAvailability",
            )
            properties.infrastructure_version = AAZStrType(
                serialized_name="infrastructureVersion",
                flags={"read_only": True},
            )
            properties.preview_features = AAZListType(
                serialized_name="previewFeatures",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.replica = AAZObjectType(
                flags={"read_only": True},
            )
            properties.server_version = AAZStrType(
                serialized_name="serverVersion",
            )
            properties.sharding = AAZObjectType()
            properties.storage = AAZObjectType()

            administrator = cls._schema_on_200.properties.administrator
            administrator.user_name = AAZStrType(
                serialized_name="userName",
            )

            backup = cls._schema_on_200.properties.backup
            backup.earliest_restore_time = AAZStrType(
                serialized_name="earliestRestoreTime",
                flags={"read_only": True},
            )

            compute = cls._schema_on_200.properties.compute
            compute.tier = AAZStrType()

            high_availability = cls._schema_on_200.properties.high_availability
            high_availability.target_mode = AAZStrType(
                serialized_name="targetMode",
            )

            preview_features = cls._schema_on_200.properties.preview_features
            preview_features.Element = AAZStrType()

            private_endpoint_connections = cls._schema_on_200.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _UpdateHelper._build_schema_azure_resourcemanager_commontypes_systemdata_read(_element.system_data)
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties.private_endpoint_connections.Element.properties
            properties.group_ids = AAZListType(
                serialized_name="groupIds",
                flags={"read_only": True},
            )
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            group_ids = cls._schema_on_200.properties.private_endpoint_connections.Element.properties.group_ids
            group_ids.Element = AAZStrType()

            private_endpoint = cls._schema_on_200.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType(
                flags={"read_only": True},
            )

            private_link_service_connection_state = cls._schema_on_200.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
            )
            private_link_service_connection_state.description = AAZStrType()
            private_link_service_connection_state.status = AAZStrType()

            replica = cls._schema_on_200.properties.replica
            replica.replication_state = AAZStrType(
                serialized_name="replicationState",
                flags={"read_only": True},
            )
            replica.role = AAZStrType(
                flags={"read_only": True},
            )
            replica.source_resource_id = AAZStrType(
                serialized_name="sourceResourceId",
                flags={"read_only": True},
            )

            sharding = cls._schema_on_200.properties.sharding
            sharding.shard_count = AAZIntType(
                serialized_name="shardCount",
            )

            storage = cls._schema_on_200.properties.storage
            storage.size_gb = AAZIntType(
                serialized_name="sizeGb",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200

    class MongoClustersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DocumentDB/mongoClusters/{mongoClusterName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "mongoClusterName", self.ctx.args.cluster_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _UpdateHelper._build_schema_azure_resourcemanager_commontypes_systemdata_read(_schema_on_200_201.system_data)
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrator = AAZObjectType()
            properties.backup = AAZObjectType()
            properties.cluster_status = AAZStrType(
                serialized_name="clusterStatus",
                flags={"read_only": True},
            )
            properties.compute = AAZObjectType()
            properties.connection_string = AAZStrType(
                serialized_name="connectionString",
                flags={"read_only": True},
            )
            properties.high_availability = AAZObjectType(
                serialized_name="highAvailability",
            )
            properties.infrastructure_version = AAZStrType(
                serialized_name="infrastructureVersion",
                flags={"read_only": True},
            )
            properties.preview_features = AAZListType(
                serialized_name="previewFeatures",
            )
            properties.private_endpoint_connections = AAZListType(
                serialized_name="privateEndpointConnections",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.public_network_access = AAZStrType(
                serialized_name="publicNetworkAccess",
            )
            properties.replica = AAZObjectType(
                flags={"read_only": True},
            )
            properties.server_version = AAZStrType(
                serialized_name="serverVersion",
            )
            properties.sharding = AAZObjectType()
            properties.storage = AAZObjectType()

            administrator = cls._schema_on_200_201.properties.administrator
            administrator.user_name = AAZStrType(
                serialized_name="userName",
            )

            backup = cls._schema_on_200_201.properties.backup
            backup.earliest_restore_time = AAZStrType(
                serialized_name="earliestRestoreTime",
                flags={"read_only": True},
            )

            compute = cls._schema_on_200_201.properties.compute
            compute.tier = AAZStrType()

            high_availability = cls._schema_on_200_201.properties.high_availability
            high_availability.target_mode = AAZStrType(
                serialized_name="targetMode",
            )

            preview_features = cls._schema_on_200_201.properties.preview_features
            preview_features.Element = AAZStrType()

            private_endpoint_connections = cls._schema_on_200_201.properties.private_endpoint_connections
            private_endpoint_connections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.private_endpoint_connections.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _UpdateHelper._build_schema_azure_resourcemanager_commontypes_systemdata_read(_element.system_data)
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties
            properties.group_ids = AAZListType(
                serialized_name="groupIds",
                flags={"read_only": True},
            )
            properties.private_endpoint = AAZObjectType(
                serialized_name="privateEndpoint",
            )
            properties.private_link_service_connection_state = AAZObjectType(
                serialized_name="privateLinkServiceConnectionState",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            group_ids = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.group_ids
            group_ids.Element = AAZStrType()

            private_endpoint = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_endpoint
            private_endpoint.id = AAZStrType(
                flags={"read_only": True},
            )

            private_link_service_connection_state = cls._schema_on_200_201.properties.private_endpoint_connections.Element.properties.private_link_service_connection_state
            private_link_service_connection_state.actions_required = AAZStrType(
                serialized_name="actionsRequired",
            )
            private_link_service_connection_state.description = AAZStrType()
            private_link_service_connection_state.status = AAZStrType()

            replica = cls._schema_on_200_201.properties.replica
            replica.replication_state = AAZStrType(
                serialized_name="replicationState",
                flags={"read_only": True},
            )
            replica.role = AAZStrType(
                flags={"read_only": True},
            )
            replica.source_resource_id = AAZStrType(
                serialized_name="sourceResourceId",
                flags={"read_only": True},
            )

            sharding = cls._schema_on_200_201.properties.sharding
            sharding.shard_count = AAZIntType(
                serialized_name="shardCount",
            )

            storage = cls._schema_on_200_201.properties.storage
            storage.size_gb = AAZIntType(
                serialized_name="sizeGb",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("administrator", AAZObjectType)
                properties.set_prop("compute", AAZObjectType)
                properties.set_prop("highAvailability", AAZObjectType)
                properties.set_prop("previewFeatures", AAZListType, ".preview_features")
                properties.set_prop("publicNetworkAccess", AAZStrType, ".public_network_access")
                properties.set_prop("serverVersion", AAZStrType, ".server_version")
                properties.set_prop("sharding", AAZObjectType)
                properties.set_prop("storage", AAZObjectType)

            administrator = _builder.get(".properties.administrator")
            if administrator is not None:
                administrator.set_prop("password", AAZStrType, ".administrator_password")
                administrator.set_prop("userName", AAZStrType, ".administrator_name")

            compute = _builder.get(".properties.compute")
            if compute is not None:
                compute.set_prop("tier", AAZStrType, ".compute_tier")

            high_availability = _builder.get(".properties.highAvailability")
            if high_availability is not None:
                high_availability.set_prop("targetMode", AAZStrType, ".high_availability_mode")

            preview_features = _builder.get(".properties.previewFeatures")
            if preview_features is not None:
                preview_features.set_elements(AAZStrType, ".")

            sharding = _builder.get(".properties.sharding")
            if sharding is not None:
                sharding.set_prop("shardCount", AAZIntType, ".shard_count")

            storage = _builder.get(".properties.storage")
            if storage is not None:
                storage.set_prop("sizeGb", AAZIntType, ".storage_size")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_azure_resourcemanager_commontypes_systemdata_read = None

    @classmethod
    def _build_schema_azure_resourcemanager_commontypes_systemdata_read(cls, _schema):
        if cls._schema_azure_resourcemanager_commontypes_systemdata_read is not None:
            _schema.created_at = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_at
            _schema.created_by = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_by
            _schema.created_by_type = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_by_type
            _schema.last_modified_at = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_at
            _schema.last_modified_by = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_by
            _schema.last_modified_by_type = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_by_type
            return

        cls._schema_azure_resourcemanager_commontypes_systemdata_read = _schema_azure_resourcemanager_commontypes_systemdata_read = AAZObjectType(
            flags={"read_only": True}
        )

        azure_resourcemanager_commontypes_systemdata_read = _schema_azure_resourcemanager_commontypes_systemdata_read
        azure_resourcemanager_commontypes_systemdata_read.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        azure_resourcemanager_commontypes_systemdata_read.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        azure_resourcemanager_commontypes_systemdata_read.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        azure_resourcemanager_commontypes_systemdata_read.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        azure_resourcemanager_commontypes_systemdata_read.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        azure_resourcemanager_commontypes_systemdata_read.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.created_at = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_at
        _schema.created_by = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_by
        _schema.created_by_type = cls._schema_azure_resourcemanager_commontypes_systemdata_read.created_by_type
        _schema.last_modified_at = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_at
        _schema.last_modified_by = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_by
        _schema.last_modified_by_type = cls._schema_azure_resourcemanager_commontypes_systemdata_read.last_modified_by_type


__all__ = ["Update"]
