# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "informatica data-management organization serverless-runtime update",
)
class Update(AAZCommand):
    """Update a InformaticaServerlessRuntimeResource
    """

    _aaz_info = {
        "version": "2024-05-08",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/informatica.datamanagement/organizations/{}/serverlessruntimes/{}", "2024-05-08"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Name of the Organizations resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_-]*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.serverless_runtime_name = AAZStrArg(
            options=["-n", "--name", "--serverless-runtime-name"],
            help="Name of the Serverless Runtime resource",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_-]*$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.advanced_custom_properties = AAZListArg(
            options=["--advanced-custom-properties"],
            arg_group="Properties",
            help="String KV pairs indicating Advanced custom properties.",
            nullable=True,
        )
        _args_schema.application_type = AAZStrArg(
            options=["--application-type"],
            arg_group="Properties",
            help="Application type of the Serverless Runtime environment.",
            nullable=True,
            enum={"CDI": "CDI", "CDIE": "CDIE"},
        )
        _args_schema.compute_units = AAZStrArg(
            options=["--compute-units"],
            arg_group="Properties",
            help="Compute units of the serverless runtime.",
            nullable=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="description of the serverless runtime.",
            nullable=True,
        )
        _args_schema.execution_timeout = AAZStrArg(
            options=["--execution-timeout"],
            arg_group="Properties",
            help="Serverless Execution timeout",
            nullable=True,
        )
        _args_schema.platform = AAZStrArg(
            options=["--platform"],
            arg_group="Properties",
            help="Platform type of the Serverless Runtime.",
            nullable=True,
            enum={"AZURE": "AZURE"},
        )
        _args_schema.serverless_account_location = AAZStrArg(
            options=["--serverless-account-location"],
            arg_group="Properties",
            help="Serverless account creation location",
        )
        _args_schema.serverless_runtime_config = AAZObjectArg(
            options=["--serverless-runtime-config"],
            arg_group="Properties",
            help="Serverless config properties",
            nullable=True,
        )
        _args_schema.serverless_runtime_network_profile = AAZObjectArg(
            options=["--serverless-runtime-network-profile"],
            arg_group="Properties",
            help="Informatica Serverless Network profile properties.",
            nullable=True,
        )
        _args_schema.serverless_runtime_tags = AAZListArg(
            options=["--serverless-runtime-tags"],
            arg_group="Properties",
            help="Serverless Runtime Tags",
            nullable=True,
        )
        _args_schema.serverless_runtime_user_context_properties = AAZObjectArg(
            options=["--serverless-runtime-user-context-properties"],
            arg_group="Properties",
            help="Serverless runtime user context properties",
            nullable=True,
        )
        _args_schema.supplementary_file_location = AAZStrArg(
            options=["--supplementary-file-location"],
            arg_group="Properties",
            help="Supplementary file location.",
            nullable=True,
        )

        advanced_custom_properties = cls._args_schema.advanced_custom_properties
        advanced_custom_properties.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.advanced_custom_properties.Element
        _element.key = AAZStrArg(
            options=["key"],
            help="advanced custom properties key",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="advanced custom properties value",
            nullable=True,
        )

        serverless_runtime_config = cls._args_schema.serverless_runtime_config
        serverless_runtime_config.cdi_config_props = AAZListArg(
            options=["cdi-config-props"],
            help="The List of Informatica Serverless Runtime CDI Config Properties.",
            nullable=True,
        )
        serverless_runtime_config.cdie_config_props = AAZListArg(
            options=["cdie-config-props"],
            help="The List of Informatica Serverless Runtime CDIE Config Properties.",
            nullable=True,
        )

        cdi_config_props = cls._args_schema.serverless_runtime_config.cdi_config_props
        cdi_config_props.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_cdi_config_props_update(cdi_config_props.Element)

        cdie_config_props = cls._args_schema.serverless_runtime_config.cdie_config_props
        cdie_config_props.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_cdi_config_props_update(cdie_config_props.Element)

        serverless_runtime_network_profile = cls._args_schema.serverless_runtime_network_profile
        serverless_runtime_network_profile.network_interface_configuration = AAZObjectArg(
            options=["network-interface-configuration"],
            help="Network Interface Configuration Profile",
        )

        network_interface_configuration = cls._args_schema.serverless_runtime_network_profile.network_interface_configuration
        network_interface_configuration.subnet_id = AAZResourceIdArg(
            options=["subnet-id"],
            help="Virtual network subnet resource id",
        )
        network_interface_configuration.vnet_id = AAZResourceIdArg(
            options=["vnet-id"],
            help="Virtual network resource id",
        )
        network_interface_configuration.vnet_resource_guid = AAZStrArg(
            options=["vnet-resource-guid"],
            help="Virtual network resource guid",
            nullable=True,
        )

        serverless_runtime_tags = cls._args_schema.serverless_runtime_tags
        serverless_runtime_tags.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.serverless_runtime_tags.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name (also known as the key) of the tag.",
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the tag.",
            nullable=True,
        )

        serverless_runtime_user_context_properties = cls._args_schema.serverless_runtime_user_context_properties
        serverless_runtime_user_context_properties.user_context_token = AAZStrArg(
            options=["user-context-token"],
            help="User context token for OBO flow.",
        )
        return cls._args_schema

    _args_cdi_config_props_update = None

    @classmethod
    def _build_args_cdi_config_props_update(cls, _schema):
        if cls._args_cdi_config_props_update is not None:
            _schema.application_configs = cls._args_cdi_config_props_update.application_configs
            _schema.engine_name = cls._args_cdi_config_props_update.engine_name
            _schema.engine_version = cls._args_cdi_config_props_update.engine_version
            return

        cls._args_cdi_config_props_update = AAZObjectArg(
            nullable=True,
        )

        cdi_config_props_update = cls._args_cdi_config_props_update
        cdi_config_props_update.application_configs = AAZListArg(
            options=["application-configs"],
            help="ApplicationConfigs of the CDI or CDIE.",
        )
        cdi_config_props_update.engine_name = AAZStrArg(
            options=["engine-name"],
            help="EngineName of the application config.",
        )
        cdi_config_props_update.engine_version = AAZStrArg(
            options=["engine-version"],
            help="EngineVersion of the application config.",
        )

        application_configs = cls._args_cdi_config_props_update.application_configs
        application_configs.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_cdi_config_props_update.application_configs.Element
        _element.customized = AAZStrArg(
            options=["customized"],
            help="Customized value of the application config.",
        )
        _element.default_value = AAZStrArg(
            options=["default-value"],
            help="Default value of the application config.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the application config.",
        )
        _element.platform = AAZStrArg(
            options=["platform"],
            help="Platform type of the application config.",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Type of the application config.",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Value of the application config.",
        )

        _schema.application_configs = cls._args_cdi_config_props_update.application_configs
        _schema.engine_name = cls._args_cdi_config_props_update.engine_name
        _schema.engine_version = cls._args_cdi_config_props_update.engine_version

    def _execute_operations(self):
        self.pre_operations()
        self.ServerlessRuntimesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ServerlessRuntimesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ServerlessRuntimesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serverlessRuntimeName", self.ctx.args.serverless_runtime_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-08",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_informatica_serverless_runtime_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class ServerlessRuntimesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/serverlessRuntimes/{serverlessRuntimeName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serverlessRuntimeName", self.ctx.args.serverless_runtime_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-08",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_informatica_serverless_runtime_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("advancedCustomProperties", AAZListType, ".advanced_custom_properties")
                properties.set_prop("applicationType", AAZStrType, ".application_type")
                properties.set_prop("computeUnits", AAZStrType, ".compute_units")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("executionTimeout", AAZStrType, ".execution_timeout")
                properties.set_prop("platform", AAZStrType, ".platform")
                properties.set_prop("serverlessAccountLocation", AAZStrType, ".serverless_account_location", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("serverlessRuntimeConfig", AAZObjectType, ".serverless_runtime_config")
                properties.set_prop("serverlessRuntimeNetworkProfile", AAZObjectType, ".serverless_runtime_network_profile")
                properties.set_prop("serverlessRuntimeTags", AAZListType, ".serverless_runtime_tags")
                properties.set_prop("serverlessRuntimeUserContextProperties", AAZObjectType, ".serverless_runtime_user_context_properties")
                properties.set_prop("supplementaryFileLocation", AAZStrType, ".supplementary_file_location")

            advanced_custom_properties = _builder.get(".properties.advancedCustomProperties")
            if advanced_custom_properties is not None:
                advanced_custom_properties.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.advancedCustomProperties[]")
            if _elements is not None:
                _elements.set_prop("key", AAZStrType, ".key")
                _elements.set_prop("value", AAZStrType, ".value")

            serverless_runtime_config = _builder.get(".properties.serverlessRuntimeConfig")
            if serverless_runtime_config is not None:
                serverless_runtime_config.set_prop("cdiConfigProps", AAZListType, ".cdi_config_props")
                serverless_runtime_config.set_prop("cdieConfigProps", AAZListType, ".cdie_config_props")

            cdi_config_props = _builder.get(".properties.serverlessRuntimeConfig.cdiConfigProps")
            if cdi_config_props is not None:
                _UpdateHelper._build_schema_cdi_config_props_update(cdi_config_props.set_elements(AAZObjectType, "."))

            cdie_config_props = _builder.get(".properties.serverlessRuntimeConfig.cdieConfigProps")
            if cdie_config_props is not None:
                _UpdateHelper._build_schema_cdi_config_props_update(cdie_config_props.set_elements(AAZObjectType, "."))

            serverless_runtime_network_profile = _builder.get(".properties.serverlessRuntimeNetworkProfile")
            if serverless_runtime_network_profile is not None:
                serverless_runtime_network_profile.set_prop("networkInterfaceConfiguration", AAZObjectType, ".network_interface_configuration", typ_kwargs={"flags": {"required": True}})

            network_interface_configuration = _builder.get(".properties.serverlessRuntimeNetworkProfile.networkInterfaceConfiguration")
            if network_interface_configuration is not None:
                network_interface_configuration.set_prop("subnetId", AAZStrType, ".subnet_id", typ_kwargs={"flags": {"required": True}})
                network_interface_configuration.set_prop("vnetId", AAZStrType, ".vnet_id", typ_kwargs={"flags": {"required": True}})
                network_interface_configuration.set_prop("vnetResourceGuid", AAZStrType, ".vnet_resource_guid")

            serverless_runtime_tags = _builder.get(".properties.serverlessRuntimeTags")
            if serverless_runtime_tags is not None:
                serverless_runtime_tags.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.serverlessRuntimeTags[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            serverless_runtime_user_context_properties = _builder.get(".properties.serverlessRuntimeUserContextProperties")
            if serverless_runtime_user_context_properties is not None:
                serverless_runtime_user_context_properties.set_prop("userContextToken", AAZStrType, ".user_context_token", typ_kwargs={"flags": {"required": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_cdi_config_props_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("applicationConfigs", AAZListType, ".application_configs", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("engineName", AAZStrType, ".engine_name", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("engineVersion", AAZStrType, ".engine_version", typ_kwargs={"flags": {"required": True}})

        application_configs = _builder.get(".applicationConfigs")
        if application_configs is not None:
            application_configs.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".applicationConfigs[]")
        if _elements is not None:
            _elements.set_prop("customized", AAZStrType, ".customized", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("defaultValue", AAZStrType, ".default_value", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("platform", AAZStrType, ".platform", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
            _elements.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    _schema_cdi_config_props_read = None

    @classmethod
    def _build_schema_cdi_config_props_read(cls, _schema):
        if cls._schema_cdi_config_props_read is not None:
            _schema.application_configs = cls._schema_cdi_config_props_read.application_configs
            _schema.engine_name = cls._schema_cdi_config_props_read.engine_name
            _schema.engine_version = cls._schema_cdi_config_props_read.engine_version
            return

        cls._schema_cdi_config_props_read = _schema_cdi_config_props_read = AAZObjectType()

        cdi_config_props_read = _schema_cdi_config_props_read
        cdi_config_props_read.application_configs = AAZListType(
            serialized_name="applicationConfigs",
            flags={"required": True},
        )
        cdi_config_props_read.engine_name = AAZStrType(
            serialized_name="engineName",
            flags={"required": True},
        )
        cdi_config_props_read.engine_version = AAZStrType(
            serialized_name="engineVersion",
            flags={"required": True},
        )

        application_configs = _schema_cdi_config_props_read.application_configs
        application_configs.Element = AAZObjectType()

        _element = _schema_cdi_config_props_read.application_configs.Element
        _element.customized = AAZStrType(
            flags={"required": True},
        )
        _element.default_value = AAZStrType(
            serialized_name="defaultValue",
            flags={"required": True},
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )
        _element.platform = AAZStrType(
            flags={"required": True},
        )
        _element.type = AAZStrType(
            flags={"required": True},
        )
        _element.value = AAZStrType(
            flags={"required": True},
        )

        _schema.application_configs = cls._schema_cdi_config_props_read.application_configs
        _schema.engine_name = cls._schema_cdi_config_props_read.engine_name
        _schema.engine_version = cls._schema_cdi_config_props_read.engine_version

    _schema_informatica_serverless_runtime_resource_read = None

    @classmethod
    def _build_schema_informatica_serverless_runtime_resource_read(cls, _schema):
        if cls._schema_informatica_serverless_runtime_resource_read is not None:
            _schema.id = cls._schema_informatica_serverless_runtime_resource_read.id
            _schema.name = cls._schema_informatica_serverless_runtime_resource_read.name
            _schema.properties = cls._schema_informatica_serverless_runtime_resource_read.properties
            _schema.system_data = cls._schema_informatica_serverless_runtime_resource_read.system_data
            _schema.type = cls._schema_informatica_serverless_runtime_resource_read.type
            return

        cls._schema_informatica_serverless_runtime_resource_read = _schema_informatica_serverless_runtime_resource_read = AAZObjectType()

        informatica_serverless_runtime_resource_read = _schema_informatica_serverless_runtime_resource_read
        informatica_serverless_runtime_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        informatica_serverless_runtime_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        informatica_serverless_runtime_resource_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        informatica_serverless_runtime_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        informatica_serverless_runtime_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_informatica_serverless_runtime_resource_read.properties
        properties.advanced_custom_properties = AAZListType(
            serialized_name="advancedCustomProperties",
        )
        properties.application_type = AAZStrType(
            serialized_name="applicationType",
        )
        properties.compute_units = AAZStrType(
            serialized_name="computeUnits",
        )
        properties.description = AAZStrType()
        properties.execution_timeout = AAZStrType(
            serialized_name="executionTimeout",
        )
        properties.platform = AAZStrType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.serverless_account_location = AAZStrType(
            serialized_name="serverlessAccountLocation",
            flags={"required": True},
        )
        properties.serverless_runtime_config = AAZObjectType(
            serialized_name="serverlessRuntimeConfig",
        )
        properties.serverless_runtime_network_profile = AAZObjectType(
            serialized_name="serverlessRuntimeNetworkProfile",
        )
        properties.serverless_runtime_tags = AAZListType(
            serialized_name="serverlessRuntimeTags",
        )
        properties.serverless_runtime_user_context_properties = AAZObjectType(
            serialized_name="serverlessRuntimeUserContextProperties",
        )
        properties.supplementary_file_location = AAZStrType(
            serialized_name="supplementaryFileLocation",
        )

        advanced_custom_properties = _schema_informatica_serverless_runtime_resource_read.properties.advanced_custom_properties
        advanced_custom_properties.Element = AAZObjectType()

        _element = _schema_informatica_serverless_runtime_resource_read.properties.advanced_custom_properties.Element
        _element.key = AAZStrType()
        _element.value = AAZStrType()

        serverless_runtime_config = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_config
        serverless_runtime_config.cdi_config_props = AAZListType(
            serialized_name="cdiConfigProps",
        )
        serverless_runtime_config.cdie_config_props = AAZListType(
            serialized_name="cdieConfigProps",
        )

        cdi_config_props = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_config.cdi_config_props
        cdi_config_props.Element = AAZObjectType()
        cls._build_schema_cdi_config_props_read(cdi_config_props.Element)

        cdie_config_props = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_config.cdie_config_props
        cdie_config_props.Element = AAZObjectType()
        cls._build_schema_cdi_config_props_read(cdie_config_props.Element)

        serverless_runtime_network_profile = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_network_profile
        serverless_runtime_network_profile.network_interface_configuration = AAZObjectType(
            serialized_name="networkInterfaceConfiguration",
            flags={"required": True},
        )

        network_interface_configuration = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_network_profile.network_interface_configuration
        network_interface_configuration.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )
        network_interface_configuration.vnet_id = AAZStrType(
            serialized_name="vnetId",
            flags={"required": True},
        )
        network_interface_configuration.vnet_resource_guid = AAZStrType(
            serialized_name="vnetResourceGuid",
        )

        serverless_runtime_tags = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_tags
        serverless_runtime_tags.Element = AAZObjectType()

        _element = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_tags.Element
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        serverless_runtime_user_context_properties = _schema_informatica_serverless_runtime_resource_read.properties.serverless_runtime_user_context_properties
        serverless_runtime_user_context_properties.user_context_token = AAZStrType(
            serialized_name="userContextToken",
            flags={"required": True},
        )

        system_data = _schema_informatica_serverless_runtime_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_informatica_serverless_runtime_resource_read.id
        _schema.name = cls._schema_informatica_serverless_runtime_resource_read.name
        _schema.properties = cls._schema_informatica_serverless_runtime_resource_read.properties
        _schema.system_data = cls._schema_informatica_serverless_runtime_resource_read.system_data
        _schema.type = cls._schema_informatica_serverless_runtime_resource_read.type


__all__ = ["Update"]
