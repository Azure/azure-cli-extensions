# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "informatica data-management organization get-serverless-metadatum",
)
class GetServerlessMetadatum(AAZCommand):
    """Gets Metadata of the serverless runtime environment.
    """

    _aaz_info = {
        "version": "2024-05-08",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/informatica.datamanagement/organizations/{}/getserverlessmetadata", "2024-05-08"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Name of the Organizations resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9_-]*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationsGetServerlessMetadata(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationsGetServerlessMetadata(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Informatica.DataManagement/organizations/{organizationName}/getServerlessMetadata",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-08",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.serverless_config_properties = AAZObjectType(
                serialized_name="serverlessConfigProperties",
            )
            _schema_on_200.serverless_runtime_config_properties = AAZObjectType(
                serialized_name="serverlessRuntimeConfigProperties",
            )
            _schema_on_200.type = AAZStrType()

            serverless_config_properties = cls._schema_on_200.serverless_config_properties
            serverless_config_properties.application_types = AAZListType(
                serialized_name="applicationTypes",
            )
            serverless_config_properties.compute_units = AAZListType(
                serialized_name="computeUnits",
            )
            serverless_config_properties.execution_timeout = AAZStrType(
                serialized_name="executionTimeout",
            )
            serverless_config_properties.platform = AAZStrType()
            serverless_config_properties.regions = AAZListType()

            application_types = cls._schema_on_200.serverless_config_properties.application_types
            application_types.Element = AAZObjectType()

            _element = cls._schema_on_200.serverless_config_properties.application_types.Element
            _element.name = AAZStrType()
            _element.value = AAZStrType()

            compute_units = cls._schema_on_200.serverless_config_properties.compute_units
            compute_units.Element = AAZObjectType()

            _element = cls._schema_on_200.serverless_config_properties.compute_units.Element
            _element.name = AAZStrType()
            _element.value = AAZListType()

            value = cls._schema_on_200.serverless_config_properties.compute_units.Element.value
            value.Element = AAZStrType()

            regions = cls._schema_on_200.serverless_config_properties.regions
            regions.Element = AAZObjectType()

            _element = cls._schema_on_200.serverless_config_properties.regions.Element
            _element.id = AAZStrType()
            _element.name = AAZStrType()

            serverless_runtime_config_properties = cls._schema_on_200.serverless_runtime_config_properties
            serverless_runtime_config_properties.cdi_config_props = AAZListType(
                serialized_name="cdiConfigProps",
            )
            serverless_runtime_config_properties.cdie_config_props = AAZListType(
                serialized_name="cdieConfigProps",
            )

            cdi_config_props = cls._schema_on_200.serverless_runtime_config_properties.cdi_config_props
            cdi_config_props.Element = AAZObjectType()
            _GetServerlessMetadatumHelper._build_schema_cdi_config_props_read(cdi_config_props.Element)

            cdie_config_props = cls._schema_on_200.serverless_runtime_config_properties.cdie_config_props
            cdie_config_props.Element = AAZObjectType()
            _GetServerlessMetadatumHelper._build_schema_cdi_config_props_read(cdie_config_props.Element)

            return cls._schema_on_200


class _GetServerlessMetadatumHelper:
    """Helper class for GetServerlessMetadatum"""

    _schema_cdi_config_props_read = None

    @classmethod
    def _build_schema_cdi_config_props_read(cls, _schema):
        if cls._schema_cdi_config_props_read is not None:
            _schema.application_configs = cls._schema_cdi_config_props_read.application_configs
            _schema.engine_name = cls._schema_cdi_config_props_read.engine_name
            _schema.engine_version = cls._schema_cdi_config_props_read.engine_version
            return

        cls._schema_cdi_config_props_read = _schema_cdi_config_props_read = AAZObjectType()

        cdi_config_props_read = _schema_cdi_config_props_read
        cdi_config_props_read.application_configs = AAZListType(
            serialized_name="applicationConfigs",
            flags={"required": True},
        )
        cdi_config_props_read.engine_name = AAZStrType(
            serialized_name="engineName",
            flags={"required": True},
        )
        cdi_config_props_read.engine_version = AAZStrType(
            serialized_name="engineVersion",
            flags={"required": True},
        )

        application_configs = _schema_cdi_config_props_read.application_configs
        application_configs.Element = AAZObjectType()

        _element = _schema_cdi_config_props_read.application_configs.Element
        _element.customized = AAZStrType(
            flags={"required": True},
        )
        _element.default_value = AAZStrType(
            serialized_name="defaultValue",
            flags={"required": True},
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )
        _element.platform = AAZStrType(
            flags={"required": True},
        )
        _element.type = AAZStrType(
            flags={"required": True},
        )
        _element.value = AAZStrType(
            flags={"required": True},
        )

        _schema.application_configs = cls._schema_cdi_config_props_read.application_configs
        _schema.engine_name = cls._schema_cdi_config_props_read.engine_name
        _schema.engine_version = cls._schema_cdi_config_props_read.engine_version


__all__ = ["GetServerlessMetadatum"]
