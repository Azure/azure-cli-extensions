# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "change-analysis list",
    is_preview=True,
)
class List(AAZCommand):
    """List the changes of resources in the subscription within the specified time range. Customer data will always be masked.

    :example: List the changes of a subscription within the specific time range
        az change-analysis list --start-time '05/24/2022 8:43:36' --end-time '05/25/2022 9:46:36'

    :example: List the changes of a resource group within the specific time range
        az change-analysis list -g [ResourceGroup] --start-time '05/24/2022 8:43:36' --end-time '05/25/2022 9:46:36'
    """

    _aaz_info = {
        "version": "2021-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.changeanalysis/changes", "2021-04-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.changeanalysis/changes", "2021-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg()
        _args_schema.end_time = AAZStrArg(
            options=["--end-time"],
            help="Specifies the end time of the changes request.",
            required=True,
        )
        _args_schema.skip_token = AAZStrArg(
            options=["--skip-token"],
            help="A skip token is used to continue retrieving items after an operation returns a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skipToken parameter that specifies a starting point to use for subsequent calls.",
        )
        _args_schema.start_time = AAZStrArg(
            options=["--start-time"],
            help="Specifies the start time of the changes request.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        condition_0 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id) and has_value(self.ctx.args.end_time) and has_value(self.ctx.args.start_time)
        condition_1 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.end_time) and has_value(self.ctx.args.start_time) and has_value(self.ctx.args.resource_group) is not True
        if condition_0:
            self.ChangesListChangesByResourceGroup(ctx=self.ctx)()
        if condition_1:
            self.ChangesListChangesBySubscription(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ChangesListChangesByResourceGroup(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeAnalysis/changes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$endTime", self.ctx.args.end_time,
                    required=True,
                ),
                **self.serialize_query_param(
                    "$skipToken", self.ctx.args.skip_token,
                ),
                **self.serialize_query_param(
                    "$startTime", self.ctx.args.start_time,
                    required=True,
                ),
                **self.serialize_query_param(
                    "api-version", "2021-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.change_type = AAZStrType(
                serialized_name="changeType",
            )
            properties.initiated_by_list = AAZListType(
                serialized_name="initiatedByList",
            )
            properties.property_changes = AAZListType(
                serialized_name="propertyChanges",
            )
            properties.resource_id = AAZStrType(
                serialized_name="resourceId",
            )
            properties.time_stamp = AAZStrType(
                serialized_name="timeStamp",
            )

            initiated_by_list = cls._schema_on_200.value.Element.properties.initiated_by_list
            initiated_by_list.Element = AAZStrType()

            property_changes = cls._schema_on_200.value.Element.properties.property_changes
            property_changes.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.property_changes.Element
            _element.change_category = AAZStrType(
                serialized_name="changeCategory",
            )
            _element.change_type = AAZStrType(
                serialized_name="changeType",
            )
            _element.description = AAZStrType()
            _element.display_name = AAZStrType(
                serialized_name="displayName",
            )
            _element.is_data_masked = AAZBoolType(
                serialized_name="isDataMasked",
            )
            _element.json_path = AAZStrType(
                serialized_name="jsonPath",
            )
            _element.level = AAZStrType()
            _element.new_value = AAZStrType(
                serialized_name="newValue",
            )
            _element.old_value = AAZStrType(
                serialized_name="oldValue",
            )

            return cls._schema_on_200

    class ChangesListChangesBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ChangeAnalysis/changes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$endTime", self.ctx.args.end_time,
                    required=True,
                ),
                **self.serialize_query_param(
                    "$skipToken", self.ctx.args.skip_token,
                ),
                **self.serialize_query_param(
                    "$startTime", self.ctx.args.start_time,
                    required=True,
                ),
                **self.serialize_query_param(
                    "api-version", "2021-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.change_type = AAZStrType(
                serialized_name="changeType",
            )
            properties.initiated_by_list = AAZListType(
                serialized_name="initiatedByList",
            )
            properties.property_changes = AAZListType(
                serialized_name="propertyChanges",
            )
            properties.resource_id = AAZStrType(
                serialized_name="resourceId",
            )
            properties.time_stamp = AAZStrType(
                serialized_name="timeStamp",
            )

            initiated_by_list = cls._schema_on_200.value.Element.properties.initiated_by_list
            initiated_by_list.Element = AAZStrType()

            property_changes = cls._schema_on_200.value.Element.properties.property_changes
            property_changes.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.property_changes.Element
            _element.change_category = AAZStrType(
                serialized_name="changeCategory",
            )
            _element.change_type = AAZStrType(
                serialized_name="changeType",
            )
            _element.description = AAZStrType()
            _element.display_name = AAZStrType(
                serialized_name="displayName",
            )
            _element.is_data_masked = AAZBoolType(
                serialized_name="isDataMasked",
            )
            _element.json_path = AAZStrType(
                serialized_name="jsonPath",
            )
            _element.level = AAZStrType()
            _element.new_value = AAZStrType(
                serialized_name="newValue",
            )
            _element.old_value = AAZStrType(
                serialized_name="oldValue",
            )

            return cls._schema_on_200


__all__ = ["List"]
