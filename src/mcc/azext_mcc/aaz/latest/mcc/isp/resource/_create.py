# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create api creates an ispCustomer with the specified create parameters
    """

    _aaz_info = {
        "version": "2023-05-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.connectedcache/ispcustomers/{}", "2023-05-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.mcc_resource_name = AAZStrArg(
            options=["--mcc-resource-name"],
            help="Name of Microsoft Connected Cache for Enterprise resource.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Properties",
            help="Geo-location of the cache node. This should be the same as Microsoft Connected Cache for Enterprise  resource. When not specified, location of Microsoft Connected Cache for Enterprise resource will be used.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.additional_customer_properties = AAZObjectArg(
            options=["--additional-customer-properties"],
            arg_group="Properties",
            help="Mcc customer resource additional properties.",
        )
        _args_schema.customer = AAZObjectArg(
            options=["--customer"],
            arg_group="Properties",
            help="Mcc customer resource (customer entity).",
        )

        additional_customer_properties = cls._args_schema.additional_customer_properties
        additional_customer_properties.customer_asn = AAZStrArg(
            options=["customer-asn"],
            help="Customer resource Asn (autonomous system number).",
        )
        additional_customer_properties.customer_email = AAZStrArg(
            options=["customer-email"],
            help="Customer resource contact email.",
        )
        additional_customer_properties.customer_entitlement_expiration = AAZDateTimeArg(
            options=["customer-entitlement-expiration"],
            help="Customer resource entitlement expiration date string.",
        )
        additional_customer_properties.customer_entitlement_sku_guid = AAZStrArg(
            options=["customer-entitlement-sku-guid"],
            help="Customer resource entitlement Sku Guid.",
        )
        additional_customer_properties.customer_entitlement_sku_id = AAZStrArg(
            options=["customer-entitlement-sku-id"],
            help="Customer resource entitlement Sku Id.",
        )
        additional_customer_properties.customer_entitlement_sku_name = AAZStrArg(
            options=["customer-entitlement-sku-name"],
            help="Customer resource entitlement Sku name.",
        )
        additional_customer_properties.customer_transit_asn = AAZStrArg(
            options=["customer-transit-asn"],
            help="Customer resource transit Asn (autonomous system number).",
        )
        additional_customer_properties.customer_transit_state = AAZStrArg(
            options=["customer-transit-state"],
            help="Customer resource transit state.",
            enum={"CombinedTransit": "CombinedTransit", "NoTransit": "NoTransit", "TransitOnly": "TransitOnly"},
        )
        additional_customer_properties.optional_property1 = AAZStrArg(
            options=["optional-property1"],
            help="Optional property #1 of Mcc response object.",
        )
        additional_customer_properties.optional_property2 = AAZStrArg(
            options=["optional-property2"],
            help="Optional property #2 of Mcc response object.",
        )
        additional_customer_properties.optional_property3 = AAZStrArg(
            options=["optional-property3"],
            help="Optional property #3 of Mcc response object.",
        )
        additional_customer_properties.optional_property4 = AAZStrArg(
            options=["optional-property4"],
            help="Optional property #4 of Mcc response object.",
        )
        additional_customer_properties.optional_property5 = AAZStrArg(
            options=["optional-property5"],
            help="Optional property #5 of Mcc response object.",
        )

        customer = cls._args_schema.customer
        customer.client_tenant_id = AAZStrArg(
            options=["client-tenant-id"],
            help="Customer resource client tenant Id of subscription.",
        )
        customer.contact_email = AAZStrArg(
            options=["contact-email"],
            help="Customer resource contact email.",
        )
        customer.contact_name = AAZStrArg(
            options=["contact-name"],
            help="Customer resource contact full name.",
        )
        customer.contact_phone = AAZStrArg(
            options=["contact-phone"],
            help="Customer resource contact phone.",
        )
        customer.customer_name = AAZStrArg(
            options=["customer-name"],
            help="Customer resource name.",
        )
        customer.fully_qualified_resource_id = AAZStrArg(
            options=["fully-qualified-resource-id"],
            help="Customer resource Azure fully qualified resource Id.",
        )
        customer.is_enterprise_managed = AAZBoolArg(
            options=["is-enterprise-managed"],
            help="Customer resource flag for enterprise management as boolean.",
        )
        customer.is_entitled = AAZBoolArg(
            options=["is-entitled"],
            help="Customer resource entitlement flag as boolean.",
        )
        customer.release_version = AAZIntArg(
            options=["release-version"],
            help="Customer resource Mcc release version.",
        )
        customer.resend_signup_code = AAZBoolArg(
            options=["resend-signup-code"],
            help="Customer resource flag for resending signup code as boolean.",
        )
        customer.should_migrate = AAZBoolArg(
            options=["should-migrate"],
            help="Customer resource flag for migration.",
        )
        customer.verify_signup_code = AAZBoolArg(
            options=["verify-signup-code"],
            help="Customer resource flag for requiring verification of signup code as boolean.",
        )
        customer.verify_signup_phrase = AAZPasswordArg(
            options=["verify-signup-phrase"],
            help="Customer resource phrase for verifying signup.",
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.IspCustomersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class IspCustomersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/ispCustomers/{customerResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customerResourceName", self.ctx.args.mcc_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalCustomerProperties", AAZObjectType, ".additional_customer_properties")
                properties.set_prop("customer", AAZObjectType, ".customer")

            additional_customer_properties = _builder.get(".properties.additionalCustomerProperties")
            if additional_customer_properties is not None:
                additional_customer_properties.set_prop("customerAsn", AAZStrType, ".customer_asn")
                additional_customer_properties.set_prop("customerEmail", AAZStrType, ".customer_email")
                additional_customer_properties.set_prop("customerEntitlementExpiration", AAZStrType, ".customer_entitlement_expiration")
                additional_customer_properties.set_prop("customerEntitlementSkuGuid", AAZStrType, ".customer_entitlement_sku_guid")
                additional_customer_properties.set_prop("customerEntitlementSkuId", AAZStrType, ".customer_entitlement_sku_id")
                additional_customer_properties.set_prop("customerEntitlementSkuName", AAZStrType, ".customer_entitlement_sku_name")
                additional_customer_properties.set_prop("customerTransitAsn", AAZStrType, ".customer_transit_asn")
                additional_customer_properties.set_prop("customerTransitState", AAZStrType, ".customer_transit_state")
                additional_customer_properties.set_prop("optionalProperty1", AAZStrType, ".optional_property1")
                additional_customer_properties.set_prop("optionalProperty2", AAZStrType, ".optional_property2")
                additional_customer_properties.set_prop("optionalProperty3", AAZStrType, ".optional_property3")
                additional_customer_properties.set_prop("optionalProperty4", AAZStrType, ".optional_property4")
                additional_customer_properties.set_prop("optionalProperty5", AAZStrType, ".optional_property5")

            customer = _builder.get(".properties.customer")
            if customer is not None:
                customer.set_prop("clientTenantId", AAZStrType, ".client_tenant_id")
                customer.set_prop("contactEmail", AAZStrType, ".contact_email")
                customer.set_prop("contactName", AAZStrType, ".contact_name")
                customer.set_prop("contactPhone", AAZStrType, ".contact_phone")
                customer.set_prop("customerName", AAZStrType, ".customer_name")
                customer.set_prop("fullyQualifiedResourceId", AAZStrType, ".fully_qualified_resource_id")
                customer.set_prop("isEnterpriseManaged", AAZBoolType, ".is_enterprise_managed")
                customer.set_prop("isEntitled", AAZBoolType, ".is_entitled")
                customer.set_prop("releaseVersion", AAZIntType, ".release_version")
                customer.set_prop("resendSignupCode", AAZBoolType, ".resend_signup_code")
                customer.set_prop("shouldMigrate", AAZBoolType, ".should_migrate")
                customer.set_prop("verifySignupCode", AAZBoolType, ".verify_signup_code")
                customer.set_prop("verifySignupPhrase", AAZStrType, ".verify_signup_phrase", typ_kwargs={"flags": {"secret": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.additional_customer_properties = AAZObjectType(
                serialized_name="additionalCustomerProperties",
            )
            properties.customer = AAZObjectType()
            properties.error = AAZObjectType(
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_error_detail_read(properties.error)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_code = AAZStrType(
                serialized_name="statusCode",
                flags={"read_only": True},
            )
            properties.status_details = AAZStrType(
                serialized_name="statusDetails",
                flags={"read_only": True},
            )
            properties.status_text = AAZStrType(
                serialized_name="statusText",
                flags={"read_only": True},
            )

            additional_customer_properties = cls._schema_on_200_201.properties.additional_customer_properties
            additional_customer_properties.customer_asn = AAZStrType(
                serialized_name="customerAsn",
            )
            additional_customer_properties.customer_asn_estimated_egress_peek_gbps = AAZFloatType(
                serialized_name="customerAsnEstimatedEgressPeekGbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_email = AAZStrType(
                serialized_name="customerEmail",
            )
            additional_customer_properties.customer_entitlement_expiration = AAZStrType(
                serialized_name="customerEntitlementExpiration",
            )
            additional_customer_properties.customer_entitlement_sku_guid = AAZStrType(
                serialized_name="customerEntitlementSkuGuid",
            )
            additional_customer_properties.customer_entitlement_sku_id = AAZStrType(
                serialized_name="customerEntitlementSkuId",
            )
            additional_customer_properties.customer_entitlement_sku_name = AAZStrType(
                serialized_name="customerEntitlementSkuName",
            )
            additional_customer_properties.customer_org_name = AAZStrType(
                serialized_name="customerOrgName",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_average_egress_mbps = AAZFloatType(
                serialized_name="customerPropertiesOverviewAverageEgressMbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_average_miss_mbps = AAZFloatType(
                serialized_name="customerPropertiesOverviewAverageMissMbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_efficiency = AAZFloatType(
                serialized_name="customerPropertiesOverviewCacheEfficiency",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_nodes_healthy_count = AAZIntType(
                serialized_name="customerPropertiesOverviewCacheNodesHealthyCount",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_nodes_unhealthy_count = AAZIntType(
                serialized_name="customerPropertiesOverviewCacheNodesUnhealthyCount",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_egress_mbps_max = AAZFloatType(
                serialized_name="customerPropertiesOverviewEgressMbpsMax",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_egress_mbps_max_date_time = AAZStrType(
                serialized_name="customerPropertiesOverviewEgressMbpsMaxDateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_miss_mbps_max = AAZFloatType(
                serialized_name="customerPropertiesOverviewMissMbpsMax",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_miss_mbps_max_date_time = AAZStrType(
                serialized_name="customerPropertiesOverviewMissMbpsMaxDateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_transit_asn = AAZStrType(
                serialized_name="customerTransitAsn",
            )
            additional_customer_properties.customer_transit_state = AAZStrType(
                serialized_name="customerTransitState",
            )
            additional_customer_properties.optional_property1 = AAZStrType(
                serialized_name="optionalProperty1",
            )
            additional_customer_properties.optional_property2 = AAZStrType(
                serialized_name="optionalProperty2",
            )
            additional_customer_properties.optional_property3 = AAZStrType(
                serialized_name="optionalProperty3",
            )
            additional_customer_properties.optional_property4 = AAZStrType(
                serialized_name="optionalProperty4",
            )
            additional_customer_properties.optional_property5 = AAZStrType(
                serialized_name="optionalProperty5",
            )
            additional_customer_properties.peering_db_last_update_date = AAZStrType(
                serialized_name="peeringDbLastUpdateDate",
                flags={"read_only": True},
            )
            additional_customer_properties.peering_db_last_update_time = AAZStrType(
                serialized_name="peeringDbLastUpdateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_phase_status_code = AAZIntType(
                serialized_name="signupPhaseStatusCode",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_phase_status_text = AAZStrType(
                serialized_name="signupPhaseStatusText",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status = AAZBoolType(
                serialized_name="signupStatus",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status_code = AAZIntType(
                serialized_name="signupStatusCode",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status_text = AAZStrType(
                serialized_name="signupStatusText",
                flags={"read_only": True},
            )

            customer = cls._schema_on_200_201.properties.customer
            customer.client_tenant_id = AAZStrType(
                serialized_name="clientTenantId",
            )
            customer.contact_email = AAZStrType(
                serialized_name="contactEmail",
            )
            customer.contact_name = AAZStrType(
                serialized_name="contactName",
            )
            customer.contact_phone = AAZStrType(
                serialized_name="contactPhone",
            )
            customer.create_async_operation_id = AAZStrType(
                serialized_name="createAsyncOperationId",
                flags={"read_only": True},
            )
            customer.customer_id = AAZStrType(
                serialized_name="customerId",
                flags={"read_only": True},
            )
            customer.customer_name = AAZStrType(
                serialized_name="customerName",
            )
            customer.delete_async_operation_id = AAZStrType(
                serialized_name="deleteAsyncOperationId",
                flags={"read_only": True},
            )
            customer.fully_qualified_resource_id = AAZStrType(
                serialized_name="fullyQualifiedResourceId",
            )
            customer.is_enterprise_managed = AAZBoolType(
                serialized_name="isEnterpriseManaged",
            )
            customer.is_entitled = AAZBoolType(
                serialized_name="isEntitled",
            )
            customer.last_sync_with_azure_timestamp = AAZStrType(
                serialized_name="lastSyncWithAzureTimestamp",
                flags={"read_only": True},
            )
            customer.release_version = AAZIntType(
                serialized_name="releaseVersion",
            )
            customer.resend_signup_code = AAZBoolType(
                serialized_name="resendSignupCode",
            )
            customer.should_migrate = AAZBoolType(
                serialized_name="shouldMigrate",
            )
            customer.synch_with_azure_attempts_count = AAZIntType(
                serialized_name="synchWithAzureAttemptsCount",
                flags={"read_only": True},
            )
            customer.verify_signup_code = AAZBoolType(
                serialized_name="verifySignupCode",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType(
            flags={"read_only": True}
        )

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["Create"]
