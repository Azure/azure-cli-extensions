# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mcc ent node create",
    is_preview=True,
)
class Create(AAZCommand):
    """Creates a Microsoft Connected Cache for Enterprise cache node with specified parameters.
    """

    _aaz_info = {
        "version": "2023-05-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.connectedcache/enterprisemcccustomers/{}/enterprisemcccachenodes/{}", "2023-05-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cache_node_name = AAZStrArg(
            options=["--cache-node-name"],
            help="Name of Microsoft Connected Cache for Enterprise cache node.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.mcc_resource_name = AAZStrArg(
            options=["--mcc-resource-name"],
            help="Name of Microsoft Connected Cache for Enterprise resource.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Configuration"

        _args_schema = cls._args_schema
        _args_schema.auto_update_version = AAZStrArg(
            options=["--auto-update-version"],
            arg_group="Configuration",
            help="Auto update or fast update version",
        )
        _args_schema.bgp_configuration = AAZObjectArg(
            options=["--bgp-configuration"],
            arg_group="Configuration",
            help="Cache node resource Bgp configuration.",
        )
        _args_schema.cache_node_properties_details_issues_list = AAZListArg(
            options=["--cache-node-properties-details-issues-list"],
            arg_group="Configuration",
            help="issues list to return the issues as part of the additional cache node properties",
        )
        _args_schema.cache_drive = AAZListArg(
            options=["--cache-drive"],
            arg_group="Configuration",
            help="The physical path and size of cache drive. For Windows cache node physical path should be \"/var/mcc\". Minimum cache drive size should be 50gb.",
        )
        _args_schema.enable_proxy = AAZStrArg(
            options=["--enable-proxy"],
            arg_group="Configuration",
            help="Cache node resource requires a proxy",
            enum={"Disabled": "Disabled", "Enabled": "Enabled", "None": "None", "Required": "Required"},
        )
        _args_schema.optional_property1 = AAZStrArg(
            options=["--optional-property1"],
            arg_group="Configuration",
            help="Optional property #1 of Mcc response object",
        )
        _args_schema.optional_property2 = AAZStrArg(
            options=["--optional-property2"],
            arg_group="Configuration",
            help="Optional property #2 of Mcc response object",
        )
        _args_schema.optional_property3 = AAZStrArg(
            options=["--optional-property3"],
            arg_group="Configuration",
            help="Optional property #3 of Mcc response object",
        )
        _args_schema.optional_property4 = AAZStrArg(
            options=["--optional-property4"],
            arg_group="Configuration",
            help="Optional property #4 of Mcc response object",
        )
        _args_schema.optional_property5 = AAZStrArg(
            options=["--optional-property5"],
            arg_group="Configuration",
            help="Optional property #5 of Mcc response object",
        )
        _args_schema.host_os = AAZStrArg(
            options=["--host-os"],
            arg_group="Configuration",
            help="Host operating system of the cache node.",
            enum={"Eflow": "Eflow", "Linux": "Linux", "Windows": "Windows"},
        )
        _args_schema.proxy_url = AAZStrArg(
            options=["--proxy-url"],
            arg_group="Configuration",
            help="Host proxy address configuration. Ex: xxx.xxx.x.x or http://exampleproxy.com.",
        )
        _args_schema.proxy_host = AAZStrArg(
            options=["--proxy-host"],
            arg_group="Configuration",
            help="Host proxy address configuration. Ex: xxx.xxx.x.x or http://exampleproxy.com.",
        )
        _args_schema.update_cycle_type = AAZStrArg(
            options=["--update-cycle-type"],
            arg_group="Configuration",
            help="Update Cycle Type",
            enum={"Fast": "Fast", "Preview": "Preview", "Slow": "Slow"},
        )
        _args_schema.update_info_details = AAZStrArg(
            options=["--update-info-details"],
            arg_group="Configuration",
            help="Update related information details",
        )
        _args_schema.update_requested_date_time = AAZDateTimeArg(
            options=["--update-requested-date-time"],
            arg_group="Configuration",
            help="customer requested date time for mcc install of update cycle",
        )

        bgp_configuration = cls._args_schema.bgp_configuration
        bgp_configuration.asn_to_ip_address_mapping = AAZStrArg(
            options=["asn-to-ip-address-mapping"],
            help="Asn to ip address mapping",
        )

        cache_node_properties_details_issues_list = cls._args_schema.cache_node_properties_details_issues_list
        cache_node_properties_details_issues_list.Element = AAZStrArg()

        cache_drive = cls._args_schema.cache_drive
        cache_drive.Element = AAZObjectArg()

        _element = cls._args_schema.cache_drive.Element
        _element.cache_number = AAZIntArg(
            options=["cache-number"],
            help="corresponding nginx cache number. Valid cache numbers are 1 - 20",
            fmt=AAZIntArgFormat(
                maximum=20,
                minimum=1,
            ),
        )
        _element.nginx_mapping = AAZStrArg(
            options=["nginx-mapping"],
            help="full binding for corresponding nginx cache drive",
        )
        _element.physical_path = AAZStrArg(
            options=["physical-path"],
            help="physical path location of the folder used for caching content",
        )
        _element.size_in_gb = AAZIntArg(
            options=["size-in-gb"],
            help="physical size of the drive used for caching content",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Properties",
            help="Geo-location of the cache node. This should be the same as Microsoft Connected Cache for Enterprise  resource. When not specified, location of Microsoft Connected Cache for Enterprise resource will be used.",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.cache_node = AAZObjectArg(
            options=["--cache-node"],
            arg_group="Properties",
            help="Mcc cache node resource (cache node entity).",
        )
        _args_schema.status_code = AAZStrArg(
            options=["--status-code"],
            arg_group="Properties",
            help="Mcc response status code.",
        )
        _args_schema.status_details = AAZStrArg(
            options=["--status-details"],
            arg_group="Properties",
            help="Mcc response status details for retrieving response inner details.",
        )
        _args_schema.status_text = AAZStrArg(
            options=["--status-text"],
            arg_group="Properties",
            help="Mcc response status text as string for retrieving status details.",
        )

        cache_node = cls._args_schema.cache_node
        cache_node.auto_update_day = AAZIntArg(
            options=["auto-update-day"],
            help="Day of week (1-7) that cache node will automatically install software update",
            fmt=AAZIntArgFormat(
                maximum=7,
                minimum=1,
            ),
        )
        cache_node.auto_update_time = AAZStrArg(
            options=["auto-update-time"],
            help="Time of day in 24-hour time (hh:mm) that cache node will automatically install software update",
            fmt=AAZStrArgFormat(
                pattern="^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$",
            ),
        )
        cache_node.auto_update_week = AAZIntArg(
            options=["auto-update-week"],
            help="Week of month (1-4) that cache node will automatically install software update",
            fmt=AAZIntArgFormat(
                maximum=5,
                minimum=1,
            ),
        )
        cache_node.auto_update_ring = AAZStrArg(
            options=["auto-update-ring"],
            help="Cache node automatic software update periodicity ring",
            enum={"Fast": "Fast", "Preview": "Preview", "Slow": "Slow"},
        )
        cache_node.cache_node_id = AAZStrArg(
            options=["cache-node-id"],
            help="Cache node resource identifier of the cache node",
        )
        cache_node.cache_node_name = AAZStrArg(
            options=["cache-node-name"],
            help="Cache node resource name.",
        )
        cache_node.cidr_csv = AAZListArg(
            options=["cidr-csv"],
            help="Cache node resource comma separated values of Cidrs.",
        )
        cache_node.cidr_selection_type = AAZIntArg(
            options=["cidr-selection-type"],
            help="Cache node resource current Cidr range precedence selection type.",
        )
        cache_node.customer_asn = AAZIntArg(
            options=["customer-asn"],
            help="Cache node resource customer resource Asn (autonomous system number)",
        )
        cache_node.customer_index = AAZStrArg(
            options=["customer-index"],
            help="Cache node resource customer index as string.",
        )
        cache_node.customer_name = AAZStrArg(
            options=["customer-name"],
            help="Cache node resource customer resource name.",
        )
        cache_node.fully_qualified_domain_name = AAZStrArg(
            options=["fqdn", "fully-qualified-domain-name"],
            help="FQDN (fully qualified domain name) value of the cache node",
        )
        cache_node.fully_qualified_resource_id = AAZStrArg(
            options=["fully-qualified-resource-id"],
            help="Cache node resource Azure fully qualified resource Id.",
        )
        cache_node.ip_address = AAZStrArg(
            options=["ip-address"],
            help="IP address of host machine.",
        )
        cache_node.is_enabled = AAZBoolArg(
            options=["is-enabled"],
            help="Cache node resource flag for indicating if cache node is enabled.",
        )
        cache_node.is_enterprise_managed = AAZBoolArg(
            options=["is-enterprise-managed"],
            help="Cache node resource flag for determining if managed by enterprise as boolean.",
        )
        cache_node.max_allowable_egress_in_mbps = AAZIntArg(
            options=["max-allowable-egress-in-mbps"],
            help="Cache node resource maximum allowed egress in Mbps.",
        )
        cache_node.should_migrate = AAZBoolArg(
            options=["should-migrate"],
            help="Cache node resource flag for determining if customer will be migrated.",
        )

        cidr_csv = cls._args_schema.cache_node.cidr_csv
        cidr_csv.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.EnterpriseMccCacheNodesOperationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EnterpriseMccCacheNodesOperationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers/{customerResourceName}/enterpriseMccCacheNodes/{cacheNodeResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "cacheNodeResourceName", self.ctx.args.cache_node_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "customerResourceName", self.ctx.args.mcc_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalCacheNodeProperties", AAZObjectType)
                properties.set_prop("cacheNode", AAZObjectType, ".cache_node")
                properties.set_prop("statusCode", AAZStrType, ".status_code")
                properties.set_prop("statusDetails", AAZStrType, ".status_details")
                properties.set_prop("statusText", AAZStrType, ".status_text")

            additional_cache_node_properties = _builder.get(".properties.additionalCacheNodeProperties")
            if additional_cache_node_properties is not None:
                additional_cache_node_properties.set_prop("autoUpdateVersion", AAZStrType, ".auto_update_version")
                additional_cache_node_properties.set_prop("bgpConfiguration", AAZObjectType, ".bgp_configuration")
                additional_cache_node_properties.set_prop("cacheNodePropertiesDetailsIssuesList", AAZListType, ".cache_node_properties_details_issues_list")
                additional_cache_node_properties.set_prop("driveConfiguration", AAZListType, ".cache_drive")
                additional_cache_node_properties.set_prop("isProxyRequired", AAZStrType, ".enable_proxy")
                additional_cache_node_properties.set_prop("optionalProperty1", AAZStrType, ".optional_property1")
                additional_cache_node_properties.set_prop("optionalProperty2", AAZStrType, ".optional_property2")
                additional_cache_node_properties.set_prop("optionalProperty3", AAZStrType, ".optional_property3")
                additional_cache_node_properties.set_prop("optionalProperty4", AAZStrType, ".optional_property4")
                additional_cache_node_properties.set_prop("optionalProperty5", AAZStrType, ".optional_property5")
                additional_cache_node_properties.set_prop("osType", AAZStrType, ".host_os")
                additional_cache_node_properties.set_prop("proxyUrl", AAZStrType, ".proxy_url")
                additional_cache_node_properties.set_prop("proxyUrlConfiguration", AAZObjectType)
                additional_cache_node_properties.set_prop("updateCycleType", AAZStrType, ".update_cycle_type")
                additional_cache_node_properties.set_prop("updateInfoDetails", AAZStrType, ".update_info_details")
                additional_cache_node_properties.set_prop("updateRequestedDateTime", AAZStrType, ".update_requested_date_time")

            bgp_configuration = _builder.get(".properties.additionalCacheNodeProperties.bgpConfiguration")
            if bgp_configuration is not None:
                bgp_configuration.set_prop("asnToIpAddressMapping", AAZStrType, ".asn_to_ip_address_mapping")

            cache_node_properties_details_issues_list = _builder.get(".properties.additionalCacheNodeProperties.cacheNodePropertiesDetailsIssuesList")
            if cache_node_properties_details_issues_list is not None:
                cache_node_properties_details_issues_list.set_elements(AAZStrType, ".")

            drive_configuration = _builder.get(".properties.additionalCacheNodeProperties.driveConfiguration")
            if drive_configuration is not None:
                drive_configuration.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.additionalCacheNodeProperties.driveConfiguration[]")
            if _elements is not None:
                _elements.set_prop("cacheNumber", AAZIntType, ".cache_number")
                _elements.set_prop("nginxMapping", AAZStrType, ".nginx_mapping")
                _elements.set_prop("physicalPath", AAZStrType, ".physical_path")
                _elements.set_prop("sizeInGb", AAZIntType, ".size_in_gb")

            proxy_url_configuration = _builder.get(".properties.additionalCacheNodeProperties.proxyUrlConfiguration")
            if proxy_url_configuration is not None:
                proxy_url_configuration.set_prop("proxyUrl", AAZStrType, ".proxy_host")

            cache_node = _builder.get(".properties.cacheNode")
            if cache_node is not None:
                cache_node.set_prop("autoUpdateRequestedDay", AAZIntType, ".auto_update_day")
                cache_node.set_prop("autoUpdateRequestedTime", AAZStrType, ".auto_update_time")
                cache_node.set_prop("autoUpdateRequestedWeek", AAZIntType, ".auto_update_week")
                cache_node.set_prop("autoUpdateRingType", AAZStrType, ".auto_update_ring")
                cache_node.set_prop("cacheNodeId", AAZStrType, ".cache_node_id")
                cache_node.set_prop("cacheNodeName", AAZStrType, ".cache_node_name")
                cache_node.set_prop("cidrCsv", AAZListType, ".cidr_csv")
                cache_node.set_prop("cidrSelectionType", AAZIntType, ".cidr_selection_type")
                cache_node.set_prop("customerAsn", AAZIntType, ".customer_asn")
                cache_node.set_prop("customerIndex", AAZStrType, ".customer_index")
                cache_node.set_prop("customerName", AAZStrType, ".customer_name")
                cache_node.set_prop("fullyQualifiedDomainName", AAZStrType, ".fully_qualified_domain_name")
                cache_node.set_prop("fullyQualifiedResourceId", AAZStrType, ".fully_qualified_resource_id")
                cache_node.set_prop("ipAddress", AAZStrType, ".ip_address")
                cache_node.set_prop("isEnabled", AAZBoolType, ".is_enabled")
                cache_node.set_prop("isEnterpriseManaged", AAZBoolType, ".is_enterprise_managed")
                cache_node.set_prop("maxAllowableEgressInMbps", AAZIntType, ".max_allowable_egress_in_mbps")
                cache_node.set_prop("shouldMigrate", AAZBoolType, ".should_migrate")

            cidr_csv = _builder.get(".properties.cacheNode.cidrCsv")
            if cidr_csv is not None:
                cidr_csv.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.additional_cache_node_properties = AAZObjectType(
                serialized_name="additionalCacheNodeProperties",
            )
            properties.cache_node = AAZObjectType(
                serialized_name="cacheNode",
            )
            properties.error = AAZObjectType()
            _CreateHelper._build_schema_error_detail_read(properties.error)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_code = AAZStrType(
                serialized_name="statusCode",
            )
            properties.status_details = AAZStrType(
                serialized_name="statusDetails",
            )
            properties.status_text = AAZStrType(
                serialized_name="statusText",
            )

            additional_cache_node_properties = cls._schema_on_200_201.properties.additional_cache_node_properties
            additional_cache_node_properties.aggregated_status_code = AAZIntType(
                serialized_name="aggregatedStatusCode",
                flags={"read_only": True},
            )
            additional_cache_node_properties.aggregated_status_details = AAZStrType(
                serialized_name="aggregatedStatusDetails",
                flags={"read_only": True},
            )
            additional_cache_node_properties.aggregated_status_text = AAZStrType(
                serialized_name="aggregatedStatusText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_applied_version = AAZStrType(
                serialized_name="autoUpdateAppliedVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_date_time = AAZStrType(
                serialized_name="autoUpdateLastAppliedDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_details = AAZStrType(
                serialized_name="autoUpdateLastAppliedDetails",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_state = AAZStrType(
                serialized_name="autoUpdateLastAppliedState",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_triggered_date_time = AAZStrType(
                serialized_name="autoUpdateLastTriggeredDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_next_available_date_time = AAZStrType(
                serialized_name="autoUpdateNextAvailableDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_next_available_version = AAZStrType(
                serialized_name="autoUpdateNextAvailableVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_version = AAZStrType(
                serialized_name="autoUpdateVersion",
            )
            additional_cache_node_properties.bgp_configuration = AAZObjectType(
                serialized_name="bgpConfiguration",
            )
            additional_cache_node_properties.cache_node_properties_details_issues_list = AAZListType(
                serialized_name="cacheNodePropertiesDetailsIssuesList",
            )
            additional_cache_node_properties.cache_node_state = AAZIntType(
                serialized_name="cacheNodeState",
                flags={"read_only": True},
            )
            additional_cache_node_properties.cache_node_state_detailed_text = AAZStrType(
                serialized_name="cacheNodeStateDetailedText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.cache_node_state_short_text = AAZStrType(
                serialized_name="cacheNodeStateShortText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.drive_configuration = AAZListType(
                serialized_name="driveConfiguration",
            )
            additional_cache_node_properties.is_provisioned = AAZBoolType(
                serialized_name="isProvisioned",
                flags={"read_only": True},
            )
            additional_cache_node_properties.is_proxy_required = AAZStrType(
                serialized_name="isProxyRequired",
            )
            additional_cache_node_properties.optional_property1 = AAZStrType(
                serialized_name="optionalProperty1",
            )
            additional_cache_node_properties.optional_property2 = AAZStrType(
                serialized_name="optionalProperty2",
            )
            additional_cache_node_properties.optional_property3 = AAZStrType(
                serialized_name="optionalProperty3",
            )
            additional_cache_node_properties.optional_property4 = AAZStrType(
                serialized_name="optionalProperty4",
            )
            additional_cache_node_properties.optional_property5 = AAZStrType(
                serialized_name="optionalProperty5",
            )
            additional_cache_node_properties.os_type = AAZStrType(
                serialized_name="osType",
            )
            additional_cache_node_properties.product_version = AAZStrType(
                serialized_name="productVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.proxy_url = AAZStrType(
                serialized_name="proxyUrl",
            )
            additional_cache_node_properties.proxy_url_configuration = AAZObjectType(
                serialized_name="proxyUrlConfiguration",
            )
            additional_cache_node_properties.update_cycle_type = AAZStrType(
                serialized_name="updateCycleType",
            )
            additional_cache_node_properties.update_info_details = AAZStrType(
                serialized_name="updateInfoDetails",
            )
            additional_cache_node_properties.update_requested_date_time = AAZStrType(
                serialized_name="updateRequestedDateTime",
            )

            bgp_configuration = cls._schema_on_200_201.properties.additional_cache_node_properties.bgp_configuration
            bgp_configuration.asn_to_ip_address_mapping = AAZStrType(
                serialized_name="asnToIpAddressMapping",
            )

            cache_node_properties_details_issues_list = cls._schema_on_200_201.properties.additional_cache_node_properties.cache_node_properties_details_issues_list
            cache_node_properties_details_issues_list.Element = AAZStrType()

            drive_configuration = cls._schema_on_200_201.properties.additional_cache_node_properties.drive_configuration
            drive_configuration.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.additional_cache_node_properties.drive_configuration.Element
            _element.cache_number = AAZIntType(
                serialized_name="cacheNumber",
            )
            _element.nginx_mapping = AAZStrType(
                serialized_name="nginxMapping",
            )
            _element.physical_path = AAZStrType(
                serialized_name="physicalPath",
            )
            _element.size_in_gb = AAZIntType(
                serialized_name="sizeInGb",
            )

            proxy_url_configuration = cls._schema_on_200_201.properties.additional_cache_node_properties.proxy_url_configuration
            proxy_url_configuration.proxy_url = AAZStrType(
                serialized_name="proxyUrl",
            )

            cache_node = cls._schema_on_200_201.properties.cache_node
            cache_node.address_space = AAZIntType(
                serialized_name="addressSpace",
                flags={"read_only": True},
            )
            cache_node.auto_update_requested_day = AAZIntType(
                serialized_name="autoUpdateRequestedDay",
            )
            cache_node.auto_update_requested_time = AAZStrType(
                serialized_name="autoUpdateRequestedTime",
            )
            cache_node.auto_update_requested_week = AAZIntType(
                serialized_name="autoUpdateRequestedWeek",
            )
            cache_node.auto_update_ring_type = AAZStrType(
                serialized_name="autoUpdateRingType",
            )
            cache_node.bgp_address_space = AAZIntType(
                serialized_name="bgpAddressSpace",
                flags={"read_only": True},
            )
            cache_node.bgp_cidr_blocks_count = AAZIntType(
                serialized_name="bgpCidrBlocksCount",
                flags={"read_only": True},
            )
            cache_node.bgp_cidr_csv_last_update_time = AAZStrType(
                serialized_name="bgpCidrCsvLastUpdateTime",
                flags={"read_only": True},
            )
            cache_node.bgp_file_bytes_truncated = AAZIntType(
                serialized_name="bgpFileBytesTruncated",
                flags={"read_only": True},
            )
            cache_node.bgp_last_reported_time = AAZStrType(
                serialized_name="bgpLastReportedTime",
                flags={"read_only": True},
            )
            cache_node.bgp_number_of_records = AAZIntType(
                serialized_name="bgpNumberOfRecords",
                flags={"read_only": True},
            )
            cache_node.bgp_number_of_times_updated = AAZIntType(
                serialized_name="bgpNumberOfTimesUpdated",
                flags={"read_only": True},
            )
            cache_node.bgp_review_feedback = AAZStrType(
                serialized_name="bgpReviewFeedback",
                flags={"read_only": True},
            )
            cache_node.bgp_review_state = AAZStrType(
                serialized_name="bgpReviewState",
                flags={"read_only": True},
            )
            cache_node.bgp_review_state_text = AAZStrType(
                serialized_name="bgpReviewStateText",
                flags={"read_only": True},
            )
            cache_node.cache_node_id = AAZStrType(
                serialized_name="cacheNodeId",
            )
            cache_node.cache_node_name = AAZStrType(
                serialized_name="cacheNodeName",
            )
            cache_node.category = AAZStrType(
                flags={"read_only": True},
            )
            cache_node.cidr_csv = AAZListType(
                serialized_name="cidrCsv",
            )
            cache_node.cidr_csv_last_update_time = AAZStrType(
                serialized_name="cidrCsvLastUpdateTime",
                flags={"read_only": True},
            )
            cache_node.cidr_selection_type = AAZIntType(
                serialized_name="cidrSelectionType",
            )
            cache_node.client_tenant_id = AAZStrType(
                serialized_name="clientTenantId",
                flags={"read_only": True},
            )
            cache_node.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            cache_node.configuration_state_text = AAZStrType(
                serialized_name="configurationStateText",
                flags={"read_only": True},
            )
            cache_node.container_configurations = AAZStrType(
                serialized_name="containerConfigurations",
                flags={"read_only": True},
            )
            cache_node.container_resync_trigger = AAZIntType(
                serialized_name="containerResyncTrigger",
                flags={"read_only": True},
            )
            cache_node.create_async_operation_id = AAZStrType(
                serialized_name="createAsyncOperationId",
                flags={"read_only": True},
            )
            cache_node.customer_asn = AAZIntType(
                serialized_name="customerAsn",
            )
            cache_node.customer_id = AAZStrType(
                serialized_name="customerId",
                flags={"read_only": True},
            )
            cache_node.customer_index = AAZStrType(
                serialized_name="customerIndex",
            )
            cache_node.customer_name = AAZStrType(
                serialized_name="customerName",
            )
            cache_node.delete_async_operation_id = AAZStrType(
                serialized_name="deleteAsyncOperationId",
                flags={"read_only": True},
            )
            cache_node.fully_qualified_domain_name = AAZStrType(
                serialized_name="fullyQualifiedDomainName",
            )
            cache_node.fully_qualified_resource_id = AAZStrType(
                serialized_name="fullyQualifiedResourceId",
            )
            cache_node.image_uri = AAZStrType(
                serialized_name="imageUri",
                flags={"read_only": True},
            )
            cache_node.ip_address = AAZStrType(
                serialized_name="ipAddress",
            )
            cache_node.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
            )
            cache_node.is_enterprise_managed = AAZBoolType(
                serialized_name="isEnterpriseManaged",
            )
            cache_node.is_frozen = AAZBoolType(
                serialized_name="isFrozen",
                flags={"read_only": True},
            )
            cache_node.last_sync_with_azure_timestamp = AAZStrType(
                serialized_name="lastSyncWithAzureTimestamp",
                flags={"read_only": True},
            )
            cache_node.last_updated_timestamp = AAZStrType(
                serialized_name="lastUpdatedTimestamp",
                flags={"read_only": True},
            )
            cache_node.max_allowable_egress_in_mbps = AAZIntType(
                serialized_name="maxAllowableEgressInMbps",
            )
            cache_node.max_allowable_probability = AAZFloatType(
                serialized_name="maxAllowableProbability",
                flags={"read_only": True},
            )
            cache_node.release_version = AAZIntType(
                serialized_name="releaseVersion",
                flags={"read_only": True},
            )
            cache_node.review_feedback = AAZStrType(
                serialized_name="reviewFeedback",
                flags={"read_only": True},
            )
            cache_node.review_state = AAZIntType(
                serialized_name="reviewState",
                flags={"read_only": True},
            )
            cache_node.review_state_text = AAZStrType(
                serialized_name="reviewStateText",
                flags={"read_only": True},
            )
            cache_node.should_migrate = AAZBoolType(
                serialized_name="shouldMigrate",
            )
            cache_node.synch_with_azure_attempts_count = AAZIntType(
                serialized_name="synchWithAzureAttemptsCount",
                flags={"read_only": True},
            )
            cache_node.worker_connections = AAZIntType(
                serialized_name="workerConnections",
                flags={"read_only": True},
            )
            cache_node.worker_connections_last_updated_date_time = AAZStrType(
                serialized_name="workerConnectionsLastUpdatedDateTime",
                flags={"read_only": True},
            )
            cache_node.x_cid = AAZStrType(
                serialized_name="xCid",
                flags={"read_only": True},
            )

            cidr_csv = cls._schema_on_200_201.properties.cache_node.cidr_csv
            cidr_csv.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType()

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["Create"]
