# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mcc ent node show",
    is_preview=True,
)
class Show(AAZCommand):
    """Retrieves relevant information for a Microsoft Connected Cache for Enterprise cache node.
    """

    _aaz_info = {
        "version": "2023-05-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.connectedcache/enterprisemcccustomers/{}/enterprisemcccachenodes/{}", "2023-05-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cache_node_name = AAZStrArg(
            options=["--cache-node-name"],
            help="Name of Microsoft Connected Cache for Enterprise cache node.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.mcc_resource_name = AAZStrArg(
            options=["--mcc-resource-name"],
            help="Name of Microsoft Connected Cache for Enterprise resource.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.EnterpriseMccCacheNodesOperationsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EnterpriseMccCacheNodesOperationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers/{customerResourceName}/enterpriseMccCacheNodes/{cacheNodeResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "cacheNodeResourceName", self.ctx.args.cache_node_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "customerResourceName", self.ctx.args.mcc_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.additional_cache_node_properties = AAZObjectType(
                serialized_name="additionalCacheNodeProperties",
            )
            properties.cache_node = AAZObjectType(
                serialized_name="cacheNode",
            )
            properties.error = AAZObjectType()
            _ShowHelper._build_schema_error_detail_read(properties.error)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_code = AAZStrType(
                serialized_name="statusCode",
            )
            properties.status_details = AAZStrType(
                serialized_name="statusDetails",
            )
            properties.status_text = AAZStrType(
                serialized_name="statusText",
            )

            additional_cache_node_properties = cls._schema_on_200.properties.additional_cache_node_properties
            additional_cache_node_properties.aggregated_status_code = AAZIntType(
                serialized_name="aggregatedStatusCode",
                flags={"read_only": True},
            )
            additional_cache_node_properties.aggregated_status_details = AAZStrType(
                serialized_name="aggregatedStatusDetails",
                flags={"read_only": True},
            )
            additional_cache_node_properties.aggregated_status_text = AAZStrType(
                serialized_name="aggregatedStatusText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_applied_version = AAZStrType(
                serialized_name="autoUpdateAppliedVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_date_time = AAZStrType(
                serialized_name="autoUpdateLastAppliedDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_details = AAZStrType(
                serialized_name="autoUpdateLastAppliedDetails",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_applied_state = AAZStrType(
                serialized_name="autoUpdateLastAppliedState",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_last_triggered_date_time = AAZStrType(
                serialized_name="autoUpdateLastTriggeredDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_next_available_date_time = AAZStrType(
                serialized_name="autoUpdateNextAvailableDateTime",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_next_available_version = AAZStrType(
                serialized_name="autoUpdateNextAvailableVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.auto_update_version = AAZStrType(
                serialized_name="autoUpdateVersion",
            )
            additional_cache_node_properties.bgp_configuration = AAZObjectType(
                serialized_name="bgpConfiguration",
            )
            additional_cache_node_properties.cache_node_properties_details_issues_list = AAZListType(
                serialized_name="cacheNodePropertiesDetailsIssuesList",
            )
            additional_cache_node_properties.cache_node_state = AAZIntType(
                serialized_name="cacheNodeState",
                flags={"read_only": True},
            )
            additional_cache_node_properties.cache_node_state_detailed_text = AAZStrType(
                serialized_name="cacheNodeStateDetailedText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.cache_node_state_short_text = AAZStrType(
                serialized_name="cacheNodeStateShortText",
                flags={"read_only": True},
            )
            additional_cache_node_properties.drive_configuration = AAZListType(
                serialized_name="driveConfiguration",
            )
            additional_cache_node_properties.is_provisioned = AAZBoolType(
                serialized_name="isProvisioned",
                flags={"read_only": True},
            )
            additional_cache_node_properties.is_proxy_required = AAZStrType(
                serialized_name="isProxyRequired",
            )
            additional_cache_node_properties.optional_property1 = AAZStrType(
                serialized_name="optionalProperty1",
            )
            additional_cache_node_properties.optional_property2 = AAZStrType(
                serialized_name="optionalProperty2",
            )
            additional_cache_node_properties.optional_property3 = AAZStrType(
                serialized_name="optionalProperty3",
            )
            additional_cache_node_properties.optional_property4 = AAZStrType(
                serialized_name="optionalProperty4",
            )
            additional_cache_node_properties.optional_property5 = AAZStrType(
                serialized_name="optionalProperty5",
            )
            additional_cache_node_properties.os_type = AAZStrType(
                serialized_name="osType",
            )
            additional_cache_node_properties.product_version = AAZStrType(
                serialized_name="productVersion",
                flags={"read_only": True},
            )
            additional_cache_node_properties.proxy_url = AAZStrType(
                serialized_name="proxyUrl",
            )
            additional_cache_node_properties.proxy_url_configuration = AAZObjectType(
                serialized_name="proxyUrlConfiguration",
            )
            additional_cache_node_properties.update_cycle_type = AAZStrType(
                serialized_name="updateCycleType",
            )
            additional_cache_node_properties.update_info_details = AAZStrType(
                serialized_name="updateInfoDetails",
            )
            additional_cache_node_properties.update_requested_date_time = AAZStrType(
                serialized_name="updateRequestedDateTime",
            )

            bgp_configuration = cls._schema_on_200.properties.additional_cache_node_properties.bgp_configuration
            bgp_configuration.asn_to_ip_address_mapping = AAZStrType(
                serialized_name="asnToIpAddressMapping",
            )

            cache_node_properties_details_issues_list = cls._schema_on_200.properties.additional_cache_node_properties.cache_node_properties_details_issues_list
            cache_node_properties_details_issues_list.Element = AAZStrType()

            drive_configuration = cls._schema_on_200.properties.additional_cache_node_properties.drive_configuration
            drive_configuration.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.additional_cache_node_properties.drive_configuration.Element
            _element.cache_number = AAZIntType(
                serialized_name="cacheNumber",
            )
            _element.nginx_mapping = AAZStrType(
                serialized_name="nginxMapping",
            )
            _element.physical_path = AAZStrType(
                serialized_name="physicalPath",
            )
            _element.size_in_gb = AAZIntType(
                serialized_name="sizeInGb",
            )

            proxy_url_configuration = cls._schema_on_200.properties.additional_cache_node_properties.proxy_url_configuration
            proxy_url_configuration.proxy_url = AAZStrType(
                serialized_name="proxyUrl",
            )

            cache_node = cls._schema_on_200.properties.cache_node
            cache_node.address_space = AAZIntType(
                serialized_name="addressSpace",
                flags={"read_only": True},
            )
            cache_node.auto_update_requested_day = AAZIntType(
                serialized_name="autoUpdateRequestedDay",
            )
            cache_node.auto_update_requested_time = AAZStrType(
                serialized_name="autoUpdateRequestedTime",
            )
            cache_node.auto_update_requested_week = AAZIntType(
                serialized_name="autoUpdateRequestedWeek",
            )
            cache_node.auto_update_ring_type = AAZStrType(
                serialized_name="autoUpdateRingType",
            )
            cache_node.bgp_address_space = AAZIntType(
                serialized_name="bgpAddressSpace",
                flags={"read_only": True},
            )
            cache_node.bgp_cidr_blocks_count = AAZIntType(
                serialized_name="bgpCidrBlocksCount",
                flags={"read_only": True},
            )
            cache_node.bgp_cidr_csv_last_update_time = AAZStrType(
                serialized_name="bgpCidrCsvLastUpdateTime",
                flags={"read_only": True},
            )
            cache_node.bgp_file_bytes_truncated = AAZIntType(
                serialized_name="bgpFileBytesTruncated",
                flags={"read_only": True},
            )
            cache_node.bgp_last_reported_time = AAZStrType(
                serialized_name="bgpLastReportedTime",
                flags={"read_only": True},
            )
            cache_node.bgp_number_of_records = AAZIntType(
                serialized_name="bgpNumberOfRecords",
                flags={"read_only": True},
            )
            cache_node.bgp_number_of_times_updated = AAZIntType(
                serialized_name="bgpNumberOfTimesUpdated",
                flags={"read_only": True},
            )
            cache_node.bgp_review_feedback = AAZStrType(
                serialized_name="bgpReviewFeedback",
                flags={"read_only": True},
            )
            cache_node.bgp_review_state = AAZStrType(
                serialized_name="bgpReviewState",
                flags={"read_only": True},
            )
            cache_node.bgp_review_state_text = AAZStrType(
                serialized_name="bgpReviewStateText",
                flags={"read_only": True},
            )
            cache_node.cache_node_id = AAZStrType(
                serialized_name="cacheNodeId",
            )
            cache_node.cache_node_name = AAZStrType(
                serialized_name="cacheNodeName",
            )
            cache_node.category = AAZStrType(
                flags={"read_only": True},
            )
            cache_node.cidr_csv = AAZListType(
                serialized_name="cidrCsv",
            )
            cache_node.cidr_csv_last_update_time = AAZStrType(
                serialized_name="cidrCsvLastUpdateTime",
                flags={"read_only": True},
            )
            cache_node.cidr_selection_type = AAZIntType(
                serialized_name="cidrSelectionType",
            )
            cache_node.client_tenant_id = AAZStrType(
                serialized_name="clientTenantId",
                flags={"read_only": True},
            )
            cache_node.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            cache_node.configuration_state_text = AAZStrType(
                serialized_name="configurationStateText",
                flags={"read_only": True},
            )
            cache_node.container_configurations = AAZStrType(
                serialized_name="containerConfigurations",
                flags={"read_only": True},
            )
            cache_node.container_resync_trigger = AAZIntType(
                serialized_name="containerResyncTrigger",
                flags={"read_only": True},
            )
            cache_node.create_async_operation_id = AAZStrType(
                serialized_name="createAsyncOperationId",
                flags={"read_only": True},
            )
            cache_node.customer_asn = AAZIntType(
                serialized_name="customerAsn",
            )
            cache_node.customer_id = AAZStrType(
                serialized_name="customerId",
                flags={"read_only": True},
            )
            cache_node.customer_index = AAZStrType(
                serialized_name="customerIndex",
            )
            cache_node.customer_name = AAZStrType(
                serialized_name="customerName",
            )
            cache_node.delete_async_operation_id = AAZStrType(
                serialized_name="deleteAsyncOperationId",
                flags={"read_only": True},
            )
            cache_node.fully_qualified_domain_name = AAZStrType(
                serialized_name="fullyQualifiedDomainName",
            )
            cache_node.fully_qualified_resource_id = AAZStrType(
                serialized_name="fullyQualifiedResourceId",
            )
            cache_node.image_uri = AAZStrType(
                serialized_name="imageUri",
                flags={"read_only": True},
            )
            cache_node.ip_address = AAZStrType(
                serialized_name="ipAddress",
            )
            cache_node.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
            )
            cache_node.is_enterprise_managed = AAZBoolType(
                serialized_name="isEnterpriseManaged",
            )
            cache_node.is_frozen = AAZBoolType(
                serialized_name="isFrozen",
                flags={"read_only": True},
            )
            cache_node.last_sync_with_azure_timestamp = AAZStrType(
                serialized_name="lastSyncWithAzureTimestamp",
                flags={"read_only": True},
            )
            cache_node.last_updated_timestamp = AAZStrType(
                serialized_name="lastUpdatedTimestamp",
                flags={"read_only": True},
            )
            cache_node.max_allowable_egress_in_mbps = AAZIntType(
                serialized_name="maxAllowableEgressInMbps",
            )
            cache_node.max_allowable_probability = AAZFloatType(
                serialized_name="maxAllowableProbability",
                flags={"read_only": True},
            )
            cache_node.release_version = AAZIntType(
                serialized_name="releaseVersion",
                flags={"read_only": True},
            )
            cache_node.review_feedback = AAZStrType(
                serialized_name="reviewFeedback",
                flags={"read_only": True},
            )
            cache_node.review_state = AAZIntType(
                serialized_name="reviewState",
                flags={"read_only": True},
            )
            cache_node.review_state_text = AAZStrType(
                serialized_name="reviewStateText",
                flags={"read_only": True},
            )
            cache_node.should_migrate = AAZBoolType(
                serialized_name="shouldMigrate",
            )
            cache_node.synch_with_azure_attempts_count = AAZIntType(
                serialized_name="synchWithAzureAttemptsCount",
                flags={"read_only": True},
            )
            cache_node.worker_connections = AAZIntType(
                serialized_name="workerConnections",
                flags={"read_only": True},
            )
            cache_node.worker_connections_last_updated_date_time = AAZStrType(
                serialized_name="workerConnectionsLastUpdatedDateTime",
                flags={"read_only": True},
            )
            cache_node.x_cid = AAZStrType(
                serialized_name="xCid",
                flags={"read_only": True},
            )

            cidr_csv = cls._schema_on_200.properties.cache_node.cidr_csv
            cidr_csv.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType()

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["Show"]
