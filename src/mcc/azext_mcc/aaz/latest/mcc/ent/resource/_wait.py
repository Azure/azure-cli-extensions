# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mcc ent resource wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.connectedcache/enterprisemcccustomers/{}", "2023-05-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.mcc_resource_name = AAZStrArg(
            options=["--mcc-resource-name"],
            help="Name of Microsoft Connected Cache for Enterprise resource.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9\\_\\-]*",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.EnterpriseMccCustomersGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class EnterpriseMccCustomersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedCache/enterpriseMccCustomers/{customerResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "customerResourceName", self.ctx.args.mcc_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.additional_customer_properties = AAZObjectType(
                serialized_name="additionalCustomerProperties",
            )
            properties.customer = AAZObjectType()
            properties.error = AAZObjectType(
                flags={"read_only": True},
            )
            _WaitHelper._build_schema_error_detail_read(properties.error)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_code = AAZStrType(
                serialized_name="statusCode",
                flags={"read_only": True},
            )
            properties.status_details = AAZStrType(
                serialized_name="statusDetails",
                flags={"read_only": True},
            )
            properties.status_text = AAZStrType(
                serialized_name="statusText",
                flags={"read_only": True},
            )

            additional_customer_properties = cls._schema_on_200.properties.additional_customer_properties
            additional_customer_properties.customer_asn = AAZStrType(
                serialized_name="customerAsn",
            )
            additional_customer_properties.customer_asn_estimated_egress_peek_gbps = AAZFloatType(
                serialized_name="customerAsnEstimatedEgressPeekGbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_email = AAZStrType(
                serialized_name="customerEmail",
            )
            additional_customer_properties.customer_entitlement_expiration = AAZStrType(
                serialized_name="customerEntitlementExpiration",
            )
            additional_customer_properties.customer_entitlement_sku_guid = AAZStrType(
                serialized_name="customerEntitlementSkuGuid",
            )
            additional_customer_properties.customer_entitlement_sku_id = AAZStrType(
                serialized_name="customerEntitlementSkuId",
            )
            additional_customer_properties.customer_entitlement_sku_name = AAZStrType(
                serialized_name="customerEntitlementSkuName",
            )
            additional_customer_properties.customer_org_name = AAZStrType(
                serialized_name="customerOrgName",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_average_egress_mbps = AAZFloatType(
                serialized_name="customerPropertiesOverviewAverageEgressMbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_average_miss_mbps = AAZFloatType(
                serialized_name="customerPropertiesOverviewAverageMissMbps",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_efficiency = AAZFloatType(
                serialized_name="customerPropertiesOverviewCacheEfficiency",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_nodes_healthy_count = AAZIntType(
                serialized_name="customerPropertiesOverviewCacheNodesHealthyCount",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_cache_nodes_unhealthy_count = AAZIntType(
                serialized_name="customerPropertiesOverviewCacheNodesUnhealthyCount",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_egress_mbps_max = AAZFloatType(
                serialized_name="customerPropertiesOverviewEgressMbpsMax",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_egress_mbps_max_date_time = AAZStrType(
                serialized_name="customerPropertiesOverviewEgressMbpsMaxDateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_miss_mbps_max = AAZFloatType(
                serialized_name="customerPropertiesOverviewMissMbpsMax",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_properties_overview_miss_mbps_max_date_time = AAZStrType(
                serialized_name="customerPropertiesOverviewMissMbpsMaxDateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.customer_transit_asn = AAZStrType(
                serialized_name="customerTransitAsn",
            )
            additional_customer_properties.customer_transit_state = AAZStrType(
                serialized_name="customerTransitState",
            )
            additional_customer_properties.optional_property1 = AAZStrType(
                serialized_name="optionalProperty1",
            )
            additional_customer_properties.optional_property2 = AAZStrType(
                serialized_name="optionalProperty2",
            )
            additional_customer_properties.optional_property3 = AAZStrType(
                serialized_name="optionalProperty3",
            )
            additional_customer_properties.optional_property4 = AAZStrType(
                serialized_name="optionalProperty4",
            )
            additional_customer_properties.optional_property5 = AAZStrType(
                serialized_name="optionalProperty5",
            )
            additional_customer_properties.peering_db_last_update_date = AAZStrType(
                serialized_name="peeringDbLastUpdateDate",
                flags={"read_only": True},
            )
            additional_customer_properties.peering_db_last_update_time = AAZStrType(
                serialized_name="peeringDbLastUpdateTime",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_phase_status_code = AAZIntType(
                serialized_name="signupPhaseStatusCode",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_phase_status_text = AAZStrType(
                serialized_name="signupPhaseStatusText",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status = AAZBoolType(
                serialized_name="signupStatus",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status_code = AAZIntType(
                serialized_name="signupStatusCode",
                flags={"read_only": True},
            )
            additional_customer_properties.signup_status_text = AAZStrType(
                serialized_name="signupStatusText",
                flags={"read_only": True},
            )

            customer = cls._schema_on_200.properties.customer
            customer.client_tenant_id = AAZStrType(
                serialized_name="clientTenantId",
            )
            customer.contact_email = AAZStrType(
                serialized_name="contactEmail",
            )
            customer.contact_name = AAZStrType(
                serialized_name="contactName",
            )
            customer.contact_phone = AAZStrType(
                serialized_name="contactPhone",
            )
            customer.create_async_operation_id = AAZStrType(
                serialized_name="createAsyncOperationId",
                flags={"read_only": True},
            )
            customer.customer_id = AAZStrType(
                serialized_name="customerId",
                flags={"read_only": True},
            )
            customer.customer_name = AAZStrType(
                serialized_name="customerName",
            )
            customer.delete_async_operation_id = AAZStrType(
                serialized_name="deleteAsyncOperationId",
                flags={"read_only": True},
            )
            customer.fully_qualified_resource_id = AAZStrType(
                serialized_name="fullyQualifiedResourceId",
            )
            customer.is_enterprise_managed = AAZBoolType(
                serialized_name="isEnterpriseManaged",
            )
            customer.is_entitled = AAZBoolType(
                serialized_name="isEntitled",
            )
            customer.last_sync_with_azure_timestamp = AAZStrType(
                serialized_name="lastSyncWithAzureTimestamp",
                flags={"read_only": True},
            )
            customer.release_version = AAZIntType(
                serialized_name="releaseVersion",
            )
            customer.resend_signup_code = AAZBoolType(
                serialized_name="resendSignupCode",
            )
            customer.should_migrate = AAZBoolType(
                serialized_name="shouldMigrate",
            )
            customer.synch_with_azure_attempts_count = AAZIntType(
                serialized_name="synchWithAzureAttemptsCount",
                flags={"read_only": True},
            )
            customer.verify_signup_code = AAZBoolType(
                serialized_name="verifySignupCode",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType(
            flags={"read_only": True}
        )

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["Wait"]
