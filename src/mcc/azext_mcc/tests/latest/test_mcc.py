# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
# pylint: disable=unused-import, line-too-long, unused-argument

import os

from azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer)
from azure.cli.testsdk import *

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))

class MccScenario(ScenarioTest):
    @ResourceGroupPreparer(parameter_name='group_name', parameter_name_for_location='group_location')
    def test_mcc(self, group_name, group_location):
        self.kwargs.update({
          'loc': group_location,
          'name': self.create_random_name(prefix='cli', length=24),
          'mcc_resource_name': self.create_random_name(prefix='mcc_cli_ci_tst_cst', length=30),
          'cache_node_name': self.create_random_name(prefix='mcc_cli_ci_tst_node', length=30),
          'host_os': 'Windows',
          'cache_drive': '\"[{physical-path:/var/mcc,size-in-gb:50}]\"',
          'proxy': 'enabled',
          'proxy_host': '\"abc.xyz\"',
          'proxy_port': '80',
          'auto_update_day': '7',
          'auto_update_time': '05:35',
          'auto_update_week': '2',
          'auto_update_ring': 'Slow'
        })

        # Create an MCC resource
        self.cmd('az mcc ent resource create '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 '-l {loc}',
                 checks=[
                     self.check('operationStatus', 'Succeeded'),
                     self.check('mccResourceName', '{mcc_resource_name}'),
                     self.check('location', '{loc}')
                 ])

        # List MCC resources
        customer_list = self.cmd('az mcc ent resource list '
                 '-g {rg}').get_output_in_json()
        assert len(customer_list) > 0

        # Create MCC node
        self.cmd('az mcc ent node create '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 '--cache-node-name {cache_node_name} '
                 '--host-os {host_os}',
                 checks=[
                     self.check('cacheNodeName', '{cache_node_name}'),
                     self.check('operationStatus', 'Succeeded'),
                     self.check('hostOs', '{host_os}')
                 ])

        # List MCC nodes
        node_list = self.cmd('az mcc ent node list '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name}').get_output_in_json()
        assert len(node_list) > 0

        # Update MCC node
        self.cmd('az mcc ent node update '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 '--cache-node-name {cache_node_name} '
                 '--cache-drive {cache_drive} '
                 '--proxy {proxy} '
                 '--proxy-host {proxy_host} '
                 '--proxy-port {proxy_port} '
                 '--auto-update-day {auto_update_day} '
                 '--auto-update-time {auto_update_time} '
                 '--auto-update-week {auto_update_week} '
                 '--auto-update-ring {auto_update_ring}',
                 checks=[
                     self.check('operationStatus', 'Succeeded'),
                     self.check('autoUpdateDay', '{auto_update_day}'),
                     self.check('autoUpdateRing', '{auto_update_ring}'),
                     self.check('autoUpdateTime', '{auto_update_time}'),
                     self.check('autoUpdateWeek', '{auto_update_week}'),
                     self.check('driveConfiguration[0].physicalPath', '/var/mcc'),
                     self.check('driveConfiguration[0].sizeInGb', '50'),
                     self.check('proxyConfiguration.proxyHostName', 'abc.xyz'),
                     self.check('proxyConfiguration.proxyPort', '{proxy_port}'),
                 ])

        # Show MCC resource
        self.cmd('az mcc ent node show -g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 ' --cache-node-name {cache_node_name}')

        # Delete MCC node
        self.cmd('az mcc ent node delete '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 '--cache-node-name {cache_node_name} '
                 '-y')

        # Delete MCC resource
        self.cmd('az mcc ent resource delete '
                 '-g {rg} '
                 '--mcc-resource-name {mcc_resource_name} '
                 '-y')
