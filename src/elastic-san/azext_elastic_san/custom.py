# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.log import get_logger
from .aaz.latest.elastic_san.volume_group import Create as _VolumeGroupCreate
from .aaz.latest.elastic_san.volume_group import Update as _VolumeGroupUpdate

logger = get_logger(__name__)


class VolumeGroupCreate(_VolumeGroupCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg, AAZResourceIdArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.identity.user_assigned_identity_id = AAZStrArg(
            options=["user-assigned-identity"],
            help="The ARM resource identifier of the User Assigned identity that will be used with this volume group. ",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        )
        args_schema.identity.user_assigned_identities._registered = False
        args_schema.encryption_properties.identity.user_assigned_identity._fmt = \
            AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                            "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        return args_schema

    def pre_operations(self):
        from azure.cli.core.aaz import has_value
        args = self.ctx.args
        if has_value(args.identity.user_assigned_identity_id):
            uai_id = str(args.identity.user_assigned_identity_id)
            args.identity["user_assigned_identities"] = {
                uai_id: {}}
            del args.identity.user_assigned_identity_id


class VolumeGroupUpdate(_VolumeGroupUpdate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg, AAZResourceIdArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.identity.user_assigned_identity_id = AAZStrArg(
            options=["user-assigned-identity"],
            help="The ARM resource identifier of the User Assigned identity that will be used with this volume group. ",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        )
        args_schema.identity.user_assigned_identities._registered = False
        args_schema.encryption_properties.identity.user_assigned_identity._fmt = \
            AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                            "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        return args_schema

    def pre_operations(self):
        from azure.cli.core.aaz import has_value
        args = self.ctx.args
        if has_value(args.identity.user_assigned_identity_id):
            uai_id = str(args.identity.user_assigned_identity_id)
            args.identity["user_assigned_identities"] = {
                uai_id: {}}
            del args.identity.user_assigned_identity_id

    def pre_instance_update(self, instance):
        from azure.cli.core.aaz import has_value
        args = self.ctx.args
        if has_value(instance.identity) and has_value(instance.identity.user_assigned_identities) and \
                has_value(args.identity) and has_value(args.identity.user_assigned_identities):
            uai_id_new = list(args.identity.user_assigned_identities.keys())[0]
            uai_id_old = list(instance.identity.user_assigned_identities.keys())[0]
            if uai_id_old != uai_id_new:
                if has_value(instance.properties) and has_value(instance.properties.encryption_properties) and \
                        has_value(instance.properties.encryption_properties.key_vault_properties) and \
                        has_value(args.encryption_properties) and not has_value(
                        args.encryption_properties.key_vault_properties):
                    args.encryption_properties.key_vault_properties = \
                        instance.properties.encryption_properties.key_vault_properties
