# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "elastic-san list-sku",
    is_experimental=True,
)
class ListSku(AAZCommand):
    """Get a list of Elastic SAN skus.
    """

    _aaz_info = {
        "version": "2021-11-20-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.elasticsan/skus", "2021-11-20-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="Specify $filter='location eq <location>' to filter on location.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.SkusList(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        return result

    class SkusList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.ElasticSan/skus",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "api-version", "2021-11-20-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.value.Element
            _element.elastic_san = AAZObjectType(
                serialized_name="elasticSan",
                flags={"read_only": True},
            )
            _element.location_info = AAZListType(
                serialized_name="locationInfo",
                flags={"read_only": True},
            )
            _element.sku = AAZListType(
                flags={"read_only": True},
            )
            _element.volume = AAZObjectType(
                flags={"read_only": True},
            )
            _element.volume_group = AAZObjectType(
                serialized_name="volumeGroup",
                flags={"read_only": True},
            )

            elastic_san = cls._schema_on_200.value.Element.elastic_san
            elastic_san.iops_per_base_ti_b = AAZIntType(
                serialized_name="iopsPerBaseTiB",
                flags={"read_only": True},
            )
            elastic_san.max_m_bps = AAZIntType(
                serialized_name="maxMBps",
                flags={"read_only": True},
            )
            elastic_san.max_size_ti_b = AAZIntType(
                serialized_name="maxSizeTiB",
                flags={"read_only": True},
            )
            elastic_san.max_volume_group_count = AAZIntType(
                serialized_name="maxVolumeGroupCount",
                flags={"read_only": True},
            )
            elastic_san.mbps_per_base_ti_b = AAZIntType(
                serialized_name="mbpsPerBaseTiB",
                flags={"read_only": True},
            )
            elastic_san.min_increment_size_ti_b = AAZIntType(
                serialized_name="minIncrementSizeTiB",
                flags={"read_only": True},
            )
            elastic_san.min_size_ti_b = AAZIntType(
                serialized_name="minSizeTiB",
                flags={"read_only": True},
            )

            location_info = cls._schema_on_200.value.Element.location_info
            location_info.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.value.Element.location_info.Element
            _element.location = AAZStrType(
                flags={"read_only": True},
            )
            _element.zones = AAZListType(
                flags={"read_only": True},
            )

            zones = cls._schema_on_200.value.Element.location_info.Element.zones
            zones.Element = AAZStrType(
                flags={"read_only": True},
            )

            sku = cls._schema_on_200.value.Element.sku
            sku.Element = AAZObjectType(
                flags={"read_only": True},
            )

            _element = cls._schema_on_200.value.Element.sku.Element
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.tier = AAZStrType(
                flags={"read_only": True},
            )

            volume = cls._schema_on_200.value.Element.volume
            volume.iops_per_base_gi_b = AAZIntType(
                serialized_name="iopsPerBaseGiB",
                flags={"read_only": True},
            )
            volume.max_iops = AAZIntType(
                serialized_name="maxIops",
                flags={"read_only": True},
            )
            volume.max_m_bps = AAZIntType(
                serialized_name="maxMBps",
                flags={"read_only": True},
            )
            volume.max_size_gi_b = AAZIntType(
                serialized_name="maxSizeGiB",
                flags={"read_only": True},
            )
            volume.min_increment_size_gi_b = AAZIntType(
                serialized_name="minIncrementSizeGiB",
                flags={"read_only": True},
            )
            volume.min_size_gi_b = AAZIntType(
                serialized_name="minSizeGiB",
                flags={"read_only": True},
            )

            volume_group = cls._schema_on_200.value.Element.volume_group
            volume_group.max_volume_count = AAZIntType(
                serialized_name="maxVolumeCount",
                flags={"read_only": True},
            )

            return cls._schema_on_200


__all__ = ["ListSku"]
