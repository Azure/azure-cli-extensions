# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from azure.cli.core.aaz import *


@register_command(
    "elastic-san list-operation",
    is_experimental=True,
)
class ListOperation(AAZCommand):
    """Gets a list of ElasticSan operations.
    """

    _aaz_info = {
        "version": "2021-11-20-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.elasticsan/operations", "2021-11-20-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    def _execute_operations(self):
        self.OperationsList(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        return result

    class OperationsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.ElasticSan/operations",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-11-20-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.display = AAZObjectType(
                flags={"read_only": True},
            )
            _element.is_data_action = AAZBoolType(
                serialized_name="isDataAction",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )

            display = cls._schema_on_200.value.Element.display
            display.description = AAZStrType(
                flags={"required": True, "read_only": True},
            )
            display.operation = AAZStrType(
                flags={"required": True, "read_only": True},
            )
            display.provider = AAZStrType(
                flags={"required": True, "read_only": True},
            )
            display.resource = AAZStrType(
                flags={"required": True, "read_only": True},
            )

            return cls._schema_on_200


__all__ = ["ListOperation"]
