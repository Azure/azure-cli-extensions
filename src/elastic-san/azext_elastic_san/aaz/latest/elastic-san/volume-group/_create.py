# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from azure.cli.core.aaz import *


@register_command(
    "elastic-san volume-group create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Create a Volume Group.
    """

    _aaz_info = {
        "version": "2021-11-20-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.elasticsan/elasticsans/{}/volumegroups/{}", "2021-11-20-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.elastic_san_name = AAZStrArg(
            options=["--elastic-san-name"],
            help="The name of the ElasticSan.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.volume_group_name = AAZStrArg(
            options=["--volume-group-name", "--name", "-n"],
            help="The name of the VolumeGroup.",
            required=True,
            id_part="child_name_1",
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The geo-location where the resource lives.",
        )
        _args_schema.encryption = AAZStrArg(
            options=["--encryption"],
            arg_group="Parameters",
            help="Type of encryption",
            required=True,
            enum={"EncryptionAtRestWithCustomerKey": "EncryptionAtRestWithCustomerKey", "EncryptionAtRestWithPlatformAndCustomerKeys": "EncryptionAtRestWithPlatformAndCustomerKeys", "EncryptionAtRestWithPlatformKey": "EncryptionAtRestWithPlatformKey"},
        )
        _args_schema.network_acls = AAZObjectArg(
            options=["--network-acls"],
            arg_group="Parameters",
            help="A collection of rules governing the accessibility from specific network locations.",
        )
        _args_schema.protocol_type = AAZStrArg(
            options=["--protocol-type"],
            arg_group="Parameters",
            help="Type of storage target",
            required=True,
            enum={"Iscsi": "Iscsi", "None": "None"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Azure resource tags.",
        )

        network_acls = cls._args_schema.network_acls
        network_acls.virtual_network_rules = AAZListArg(
            options=["virtual-network-rules"],
            singular_options=["virtual-network-rule"],
            help="The list of virtual network rules.",
        )

        virtual_network_rules = cls._args_schema.network_acls.virtual_network_rules
        virtual_network_rules.Element = AAZObjectArg()

        _element = cls._args_schema.network_acls.virtual_network_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="The action of virtual network rule.",
            default="Allow",
            enum={"Allow": "Allow"},
        )
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID of a subnet, for example: /subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.",
            required=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return _args_schema

    def _execute_operations(self):
        yield self.VolumeGroupsCreate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class VolumeGroupsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "elasticSanName", self.ctx.args.elastic_san_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "volumeGroupName", self.ctx.args.volume_group_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-11-20-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("encryption", AAZStrType, ".encryption", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkAcls", AAZObjectType, ".network_acls")
                properties.set_prop("protocolType", AAZStrType, ".protocol_type", typ_kwargs={"flags": {"required": True}})

            network_acls = _builder.get(".properties.networkAcls")
            if network_acls is not None:
                network_acls.set_prop("virtualNetworkRules", AAZListType, ".virtual_network_rules")

            virtual_network_rules = _builder.get(".properties.networkAcls.virtualNetworkRules")
            if virtual_network_rules is not None:
                virtual_network_rules.set_elements(AAZObjectType)

            _elements = _builder.get(".properties.networkAcls.virtualNetworkRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action")
                _elements.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_volume_group_read(cls._schema_on_200)

            return cls._schema_on_200


_schema_volume_group_read = None


def _build_schema_volume_group_read(_schema):
    global _schema_volume_group_read
    if _schema_volume_group_read is not None:
        _schema.id = _schema_volume_group_read.id
        _schema.location = _schema_volume_group_read.location
        _schema.name = _schema_volume_group_read.name
        _schema.properties = _schema_volume_group_read.properties
        _schema.system_data = _schema_volume_group_read.system_data
        _schema.tags = _schema_volume_group_read.tags
        _schema.type = _schema_volume_group_read.type
        return

    _schema_volume_group_read = AAZObjectType()

    volume_group_read = _schema_volume_group_read
    volume_group_read.id = AAZStrType(
        flags={"read_only": True},
    )
    volume_group_read.location = AAZStrType()
    volume_group_read.name = AAZStrType(
        flags={"read_only": True},
    )
    volume_group_read.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    volume_group_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"read_only": True},
    )
    volume_group_read.tags = AAZDictType()
    volume_group_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_volume_group_read.properties
    properties.encryption = AAZStrType(
        flags={"required": True},
    )
    properties.network_acls = AAZObjectType(
        serialized_name="networkAcls",
    )
    properties.protocol_type = AAZStrType(
        serialized_name="protocolType",
        flags={"required": True},
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )

    network_acls = _schema_volume_group_read.properties.network_acls
    network_acls.virtual_network_rules = AAZListType(
        serialized_name="virtualNetworkRules",
    )

    virtual_network_rules = _schema_volume_group_read.properties.network_acls.virtual_network_rules
    virtual_network_rules.Element = AAZObjectType()

    _element = _schema_volume_group_read.properties.network_acls.virtual_network_rules.Element
    _element.action = AAZStrType()
    _element.id = AAZStrType(
        flags={"required": True},
    )
    _element.state = AAZStrType(
        flags={"read_only": True},
    )

    system_data = _schema_volume_group_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
        flags={"read_only": True},
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
        flags={"read_only": True},
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
        flags={"read_only": True},
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
        flags={"read_only": True},
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
        flags={"read_only": True},
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
        flags={"read_only": True},
    )

    tags = _schema_volume_group_read.tags
    tags.Element = AAZStrType()

    _schema.id = _schema_volume_group_read.id
    _schema.location = _schema_volume_group_read.location
    _schema.name = _schema_volume_group_read.name
    _schema.properties = _schema_volume_group_read.properties
    _schema.system_data = _schema_volume_group_read.system_data
    _schema.tags = _schema_volume_group_read.tags
    _schema.type = _schema_volume_group_read.type


__all__ = ["Create"]
