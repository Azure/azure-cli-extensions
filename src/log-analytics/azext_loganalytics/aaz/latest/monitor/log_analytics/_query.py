# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor log-analytics query",
)
class Query(AAZCommand):
    """Query a Log Analytics workspace

    :example: Execute a simple query over past 3.5 days.
        az monitor log-analytics query -w workspace-customId --analytics-query "AzureActivity | summarize count() by bin(TimeGenerated, 1h)" -t P3DT12H

    :example: Execute a saved query in workspace
        az monitor log-analytics query -w workspace-customId --analytics-query $(az monitor log-analytics workspace saved-search show -g resource-group --workspace-name workspace-name -n query-name --query query --output tsv)
    """

    _aaz_info = {
        "version": "v1",
        "resources": [
            ["data-plane:microsoft.operationalinsights", "/workspaces/{}/query", "v1"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.workspace = AAZStrArg(
            options=["-w", "--workspace"],
            help="GUID of the Log Analytics Workspace",
            required=True,
        )
        _args_schema.analytics_query = AAZStrArg(
            options=["--analytics-query"],
            help="Query to execute over Log Analytics data.",
            required=True,
        )
        _args_schema.timespan = AAZStrArg(
            options=["-t", "--timespan"],
            help="Timespan over which to query. Defaults to querying all available data.",
        )
        _args_schema.workspaces = AAZListArg(
            options=["--workspaces"],
            help="Additional workspaces to union data for querying. Specify additional workspace IDs separated by space.",
        )

        workspaces = cls._args_schema.workspaces
        workspaces.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.QueryExecute(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class QueryExecute(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftOperationalinsightsDataPlaneClient_log_analytics"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/v1/workspaces/{workspaceId}/query",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "workspaceId", self.ctx.args.workspace,
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("query", AAZStrType, ".analytics_query", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("timespan", AAZStrType, ".timespan")
            _builder.set_prop("workspaces", AAZListType, ".workspaces")

            workspaces = _builder.get(".workspaces")
            if workspaces is not None:
                workspaces.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.tables = AAZListType(
                flags={"required": True},
            )

            tables = cls._schema_on_200.tables
            tables.Element = AAZFreeFormDictType()

            return cls._schema_on_200


class _QueryHelper:
    """Helper class for Query"""


__all__ = ["Query"]
