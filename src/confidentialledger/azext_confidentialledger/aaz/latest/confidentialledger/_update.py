# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confidentialledger update",
)
class Update(AAZCommand):
    """Update a  Confidential Ledger with the specified ledger parameters.

    :example: ConfidentialLedgerUpdate
        az confidentialledger update --resource-group DummyResourceGroupName --ledger-name DummyLedgerName --location EastUS --aad-based-security-principals "[{principal-id:34621747-6fc8-4771-a2eb-72f31c461f2e,tenant-id:bce123b9-2b7b-4975-8360-5ca0b9b1cd08,ledger-role-name:Contributor}]" --tags "{additionalProps1:'additional update properties'}"
    """

    _aaz_info = {
        "version": "2024-09-19-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confidentialledger/ledgers/{}", "2024-09-19-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.ledger_name = AAZStrArg(
            options=["-n", "--name", "--ledger-name"],
            help="Name of the Confidential Ledger",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[^-0-9][A-Za-z0-9-]{1,33}[A-Za-z0-9]$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "ConfidentialLedger"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="ConfidentialLedger",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.aad_based_security_principals = AAZListArg(
            options=["--aad-based-users", "--aad-based-security-principals"],
            arg_group="Properties",
            help="Array of all AAD based Security Principals.",
            nullable=True,
        )
        _args_schema.application_type = AAZStrArg(
            options=["--application-type"],
            arg_group="Properties",
            help="Application type of the Confidential Ledger.",
            nullable=True,
            enum={"CodeTransparency": "CodeTransparency", "ConfidentialLedger": "ConfidentialLedger"},
        )
        _args_schema.cert_based_security_principals = AAZListArg(
            options=["--cert-based-users", "--cert-based-security-principals"],
            arg_group="Properties",
            help="Array of all cert based Security Principals.",
            nullable=True,
        )
        _args_schema.enclave_platform = AAZStrArg(
            options=["--enclave-platform"],
            arg_group="Properties",
            help="Enclave platform of the Confidential Ledger.",
            nullable=True,
            enum={"AmdSevSnp": "AmdSevSnp", "IntelSgx": "IntelSgx"},
        )
        _args_schema.host_level = AAZStrArg(
            options=["--host-level"],
            arg_group="Properties",
            help="CCF Property for the logging level for the untrusted host: Trace, Debug, Info, Fail, Fatal.",
            nullable=True,
        )
        _args_schema.ledger_sku = AAZStrArg(
            options=["--ledger-sku"],
            arg_group="Properties",
            help="SKU associated with the ledger",
            nullable=True,
            enum={"Basic": "Basic", "Standard": "Standard", "Unknown": "Unknown"},
        )
        _args_schema.ledger_type = AAZStrArg(
            options=["--ledger-type"],
            arg_group="Properties",
            help="Type of Confidential Ledger",
            nullable=True,
            enum={"Private": "Private", "Public": "Public", "Unknown": "Unknown"},
        )
        _args_schema.max_body_size_in_mb = AAZIntArg(
            options=["--max-body-size-in-mb"],
            arg_group="Properties",
            help="CCF Property for the maximum size of the http request body: 1MB, 5MB, 10MB.",
            nullable=True,
        )
        _args_schema.node_count = AAZIntArg(
            options=["--node-count"],
            arg_group="Properties",
            help="Number of CCF nodes in the ACC Ledger.",
            nullable=True,
        )
        _args_schema.running_state = AAZStrArg(
            options=["--running-state"],
            arg_group="Properties",
            help="Object representing RunningState for Ledger.",
            nullable=True,
            enum={"Active": "Active", "Paused": "Paused", "Pausing": "Pausing", "Resuming": "Resuming", "Unknown": "Unknown"},
        )
        _args_schema.subject_name = AAZStrArg(
            options=["--subject-name"],
            arg_group="Properties",
            help="CCF Property for the subject name to include in the node certificate. Default: CN=CCF Node.",
            nullable=True,
        )
        _args_schema.worker_threads = AAZIntArg(
            options=["--worker-threads"],
            arg_group="Properties",
            help="Number of additional threads processing incoming client requests in the enclave (modify with care!)",
            nullable=True,
        )
        _args_schema.write_lb_address_prefix = AAZStrArg(
            options=["--write-lb-prefix", "--write-lb-address-prefix"],
            arg_group="Properties",
            help="Prefix for the write load balancer. Example: write",
            nullable=True,
        )

        aad_based_security_principals = cls._args_schema.aad_based_security_principals
        aad_based_security_principals.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.aad_based_security_principals.Element
        _element.ledger_role_name = AAZStrArg(
            options=["ledger-role-name"],
            help="LedgerRole associated with the Security Principal of Ledger",
            nullable=True,
            enum={"Administrator": "Administrator", "Contributor": "Contributor", "Reader": "Reader"},
        )
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            help="UUID/GUID based Principal Id of the Security Principal",
            nullable=True,
        )
        _element.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="UUID/GUID based Tenant Id of the Security Principal",
            nullable=True,
        )

        cert_based_security_principals = cls._args_schema.cert_based_security_principals
        cert_based_security_principals.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.cert_based_security_principals.Element
        _element.cert = AAZStrArg(
            options=["cert"],
            help="Public key of the user cert (.pem or .cer)",
            nullable=True,
        )
        _element.ledger_role_name = AAZStrArg(
            options=["ledger-role-name"],
            help="LedgerRole associated with the Security Principal of Ledger",
            nullable=True,
            enum={"Administrator": "Administrator", "Contributor": "Contributor", "Reader": "Reader"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.LedgerGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.LedgerCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class LedgerGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "ledgerName", self.ctx.args.ledger_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-09-19-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_confidential_ledger_read(cls._schema_on_200)

            return cls._schema_on_200

    class LedgerCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/ledgers/{ledgerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "ledgerName", self.ctx.args.ledger_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-09-19-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_confidential_ledger_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("aadBasedSecurityPrincipals", AAZListType, ".aad_based_security_principals")
                properties.set_prop("applicationType", AAZStrType, ".application_type")
                properties.set_prop("certBasedSecurityPrincipals", AAZListType, ".cert_based_security_principals")
                properties.set_prop("enclavePlatform", AAZStrType, ".enclave_platform")
                properties.set_prop("hostLevel", AAZStrType, ".host_level")
                properties.set_prop("ledgerSku", AAZStrType, ".ledger_sku")
                properties.set_prop("ledgerType", AAZStrType, ".ledger_type")
                properties.set_prop("maxBodySizeInMb", AAZIntType, ".max_body_size_in_mb")
                properties.set_prop("nodeCount", AAZIntType, ".node_count")
                properties.set_prop("runningState", AAZStrType, ".running_state")
                properties.set_prop("subjectName", AAZStrType, ".subject_name")
                properties.set_prop("workerThreads", AAZIntType, ".worker_threads")
                properties.set_prop("writeLBAddressPrefix", AAZStrType, ".write_lb_address_prefix")

            aad_based_security_principals = _builder.get(".properties.aadBasedSecurityPrincipals")
            if aad_based_security_principals is not None:
                aad_based_security_principals.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.aadBasedSecurityPrincipals[]")
            if _elements is not None:
                _elements.set_prop("ledgerRoleName", AAZStrType, ".ledger_role_name")
                _elements.set_prop("principalId", AAZStrType, ".principal_id")
                _elements.set_prop("tenantId", AAZStrType, ".tenant_id")

            cert_based_security_principals = _builder.get(".properties.certBasedSecurityPrincipals")
            if cert_based_security_principals is not None:
                cert_based_security_principals.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.certBasedSecurityPrincipals[]")
            if _elements is not None:
                _elements.set_prop("cert", AAZStrType, ".cert")
                _elements.set_prop("ledgerRoleName", AAZStrType, ".ledger_role_name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_confidential_ledger_read = None

    @classmethod
    def _build_schema_confidential_ledger_read(cls, _schema):
        if cls._schema_confidential_ledger_read is not None:
            _schema.id = cls._schema_confidential_ledger_read.id
            _schema.location = cls._schema_confidential_ledger_read.location
            _schema.name = cls._schema_confidential_ledger_read.name
            _schema.properties = cls._schema_confidential_ledger_read.properties
            _schema.system_data = cls._schema_confidential_ledger_read.system_data
            _schema.tags = cls._schema_confidential_ledger_read.tags
            _schema.type = cls._schema_confidential_ledger_read.type
            return

        cls._schema_confidential_ledger_read = _schema_confidential_ledger_read = AAZObjectType()

        confidential_ledger_read = _schema_confidential_ledger_read
        confidential_ledger_read.id = AAZStrType(
            flags={"read_only": True},
        )
        confidential_ledger_read.location = AAZStrType(
            flags={"required": True},
        )
        confidential_ledger_read.name = AAZStrType(
            flags={"read_only": True},
        )
        confidential_ledger_read.properties = AAZObjectType()
        confidential_ledger_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        confidential_ledger_read.tags = AAZDictType()
        confidential_ledger_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_confidential_ledger_read.properties
        properties.aad_based_security_principals = AAZListType(
            serialized_name="aadBasedSecurityPrincipals",
        )
        properties.application_type = AAZStrType(
            serialized_name="applicationType",
        )
        properties.cert_based_security_principals = AAZListType(
            serialized_name="certBasedSecurityPrincipals",
        )
        properties.enclave_platform = AAZStrType(
            serialized_name="enclavePlatform",
        )
        properties.host_level = AAZStrType(
            serialized_name="hostLevel",
        )
        properties.identity_service_uri = AAZStrType(
            serialized_name="identityServiceUri",
            flags={"read_only": True},
        )
        properties.ledger_internal_namespace = AAZStrType(
            serialized_name="ledgerInternalNamespace",
            flags={"read_only": True},
        )
        properties.ledger_name = AAZStrType(
            serialized_name="ledgerName",
            flags={"read_only": True},
        )
        properties.ledger_sku = AAZStrType(
            serialized_name="ledgerSku",
        )
        properties.ledger_type = AAZStrType(
            serialized_name="ledgerType",
        )
        properties.ledger_uri = AAZStrType(
            serialized_name="ledgerUri",
            flags={"read_only": True},
        )
        properties.max_body_size_in_mb = AAZIntType(
            serialized_name="maxBodySizeInMb",
        )
        properties.node_count = AAZIntType(
            serialized_name="nodeCount",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.running_state = AAZStrType(
            serialized_name="runningState",
        )
        properties.subject_name = AAZStrType(
            serialized_name="subjectName",
        )
        properties.worker_threads = AAZIntType(
            serialized_name="workerThreads",
        )
        properties.write_lb_address_prefix = AAZStrType(
            serialized_name="writeLBAddressPrefix",
        )

        aad_based_security_principals = _schema_confidential_ledger_read.properties.aad_based_security_principals
        aad_based_security_principals.Element = AAZObjectType()

        _element = _schema_confidential_ledger_read.properties.aad_based_security_principals.Element
        _element.ledger_role_name = AAZStrType(
            serialized_name="ledgerRoleName",
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
        )
        _element.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )

        cert_based_security_principals = _schema_confidential_ledger_read.properties.cert_based_security_principals
        cert_based_security_principals.Element = AAZObjectType()

        _element = _schema_confidential_ledger_read.properties.cert_based_security_principals.Element
        _element.cert = AAZStrType()
        _element.ledger_role_name = AAZStrType(
            serialized_name="ledgerRoleName",
        )

        system_data = _schema_confidential_ledger_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_confidential_ledger_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_confidential_ledger_read.id
        _schema.location = cls._schema_confidential_ledger_read.location
        _schema.name = cls._schema_confidential_ledger_read.name
        _schema.properties = cls._schema_confidential_ledger_read.properties
        _schema.system_data = cls._schema_confidential_ledger_read.system_data
        _schema.tags = cls._schema_confidential_ledger_read.tags
        _schema.type = cls._schema_confidential_ledger_read.type


__all__ = ["Update"]
