# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type,
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_confidentialledger.action import (
    AddAadBasedSecurityPrincipals,
    AddCertBasedSecurityPrincipals,
)


def load_arguments(self, _):

    with self.argument_context("confidentialledger list") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "filter_",
            options_list=["--filter"],
            type=str,
            help="The filter to apply on the list operation. "
            "eg. $filter=ledgerType eq 'Public'",
        )

    with self.argument_context("confidentialledger show") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "ledger_name",
            options_list=["--name", "-n", "--ledger-name"],
            type=str,
            help="Name of the " "Confidential Ledger",
            id_part="name",
        )

    with self.argument_context("confidentialledger create") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "ledger_name",
            options_list=["--name", "-n", "--ledger-name"],
            type=str,
            help="Name of the " "Confidential Ledger",
        )
        c.argument(
            "location",
            arg_type=get_location_type(self.cli_ctx),
            required=False,
            validator=get_default_location_from_resource_group,
        )
        c.argument("tags", tags_type)
        c.argument(
            "ledger_type",
            arg_type=get_enum_type(["Unknown", "Public", "Private"]),
            help="Type of Confidential " "Ledger",
        )
        c.argument(
            "aad_based_security_principals",
            options_list=["--aad-based-security-principals", "--aad-based-users"],
            action=AddAadBasedSecurityPrincipals,
            nargs="+",
            help="Array of " "all AAD based Security Principals.",
        )
        c.argument(
            "cert_based_security_principals",
            options_list=["--cert-based-security-principals", "--cert-based-users"],
            action=AddCertBasedSecurityPrincipals,
            nargs="+",
            help="Array of " "all cert based Security Principals.",
        )

    with self.argument_context("confidentialledger update") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "ledger_name",
            options_list=["--name", "-n", "--ledger-name"],
            type=str,
            help="Name of the " "Confidential Ledger",
            id_part="name",
        )
        c.argument(
            "location",
            arg_type=get_location_type(self.cli_ctx),
            required=False,
            validator=get_default_location_from_resource_group,
        )
        c.argument("tags", tags_type)
        c.argument(
            "ledger_type",
            arg_type=get_enum_type(["Unknown", "Public", "Private"]),
            help="Type of Confidential " "Ledger",
        )
        c.argument(
            "aad_based_security_principals",
            options_list=["--aad-based-security-principals", "--aad-based-users"],
            action=AddAadBasedSecurityPrincipals,
            nargs="+",
            help="Array of " "all AAD based Security Principals.",
        )
        c.argument(
            "cert_based_security_principals",
            options_list=["--cert-based-security-principals", "--cert-based-users"],
            action=AddCertBasedSecurityPrincipals,
            nargs="+",
            help="Array of " "all cert based Security Principals.",
        )

    with self.argument_context("confidentialledger delete") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "ledger_name",
            options_list=["--name", "-n", "--ledger-name"],
            type=str,
            help="Name of the " "Confidential Ledger",
            id_part="name",
        )

    with self.argument_context("confidentialledger wait") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "ledger_name",
            options_list=["--name", "-n", "--ledger-name"],
            type=str,
            help="Name of the " "Confidential Ledger",
            id_part="name",
        )
