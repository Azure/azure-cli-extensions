# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def confidentialledger_list(client, resource_group_name=None, filter_=None):
    if resource_group_name:
        return client.list_by_resource_group(
            resource_group_name=resource_group_name, filter=filter_
        )
    return client.list_by_subscription(filter=filter_)


def confidentialledger_show(client, resource_group_name, ledger_name):
    return client.get(resource_group_name=resource_group_name, ledger_name=ledger_name)


def confidentialledger_create(
    client,
    resource_group_name,
    ledger_name,
    location=None,
    tags=None,
    ledger_type=None,
    aad_based_security_principals=None,
    cert_based_security_principals=None,
    no_wait=False,
):
    confidential_ledger = {}
    if location is not None:
        confidential_ledger["location"] = location
    if tags is not None:
        confidential_ledger["tags"] = tags
    confidential_ledger["properties"] = {}
    if ledger_type is not None:
        confidential_ledger["properties"]["ledger_type"] = ledger_type
    if aad_based_security_principals is not None:
        confidential_ledger["properties"][
            "aad_based_security_principals"
        ] = aad_based_security_principals
    if cert_based_security_principals is not None:
        confidential_ledger["properties"][
            "cert_based_security_principals"
        ] = cert_based_security_principals
    if len(confidential_ledger["properties"]) == 0:
        del confidential_ledger["properties"]
    return sdk_no_wait(
        no_wait,
        client.begin_create,
        resource_group_name=resource_group_name,
        ledger_name=ledger_name,
        confidential_ledger=confidential_ledger,
    )


def confidentialledger_update(
    client,
    resource_group_name,
    ledger_name,
    location=None,
    tags=None,
    ledger_type=None,
    aad_based_security_principals=None,
    cert_based_security_principals=None,
    no_wait=False,
):
    confidential_ledger = {}
    if location is not None:
        confidential_ledger["location"] = location
    if tags is not None:
        confidential_ledger["tags"] = tags
    confidential_ledger["properties"] = {}
    if ledger_type is not None:
        confidential_ledger["properties"]["ledger_type"] = ledger_type
    if aad_based_security_principals is not None:
        confidential_ledger["properties"][
            "aad_based_security_principals"
        ] = aad_based_security_principals
    if cert_based_security_principals is not None:
        confidential_ledger["properties"][
            "cert_based_security_principals"
        ] = cert_based_security_principals
    if len(confidential_ledger["properties"]) == 0:
        del confidential_ledger["properties"]
    return sdk_no_wait(
        no_wait,
        client.begin_update,
        resource_group_name=resource_group_name,
        ledger_name=ledger_name,
        confidential_ledger=confidential_ledger,
    )


def confidentialledger_delete(client, resource_group_name, ledger_name, no_wait=False):
    return sdk_no_wait(
        no_wait,
        client.begin_delete,
        resource_group_name=resource_group_name,
        ledger_name=ledger_name,
    )
