# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .proxy_resource_py3 import ProxyResource


class SqlPoolColumn(ProxyResource):
    """A Sql pool column resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param column_type: The column data type. Possible values include:
     'image', 'text', 'uniqueidentifier', 'date', 'time', 'datetime2',
     'datetimeoffset', 'tinyint', 'smallint', 'int', 'smalldatetime', 'real',
     'money', 'datetime', 'float', 'sql_variant', 'ntext', 'bit', 'decimal',
     'numeric', 'smallmoney', 'bigint', 'hierarchyid', 'geometry', 'geography',
     'varbinary', 'varchar', 'binary', 'char', 'timestamp', 'nvarchar',
     'nchar', 'xml', 'sysname'
    :type column_type: str or ~azure.mgmt.synapse.models.ColumnDataType
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'column_type': {'key': 'properties.columnType', 'type': 'str'},
    }

    def __init__(self, *, column_type=None, **kwargs) -> None:
        super(SqlPoolColumn, self).__init__(**kwargs)
        self.column_type = column_type
