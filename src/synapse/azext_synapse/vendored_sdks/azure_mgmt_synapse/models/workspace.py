# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .tracked_resource import TrackedResource


class Workspace(TrackedResource):
    """A workspace.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
    :vartype id: str
    :ivar name: The name of the resource
    :vartype name: str
    :ivar type: The type of the resource. Ex-
     Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives
    :type location: str
    :param default_data_lake_storage: Workspace default data lake storage
     account details
    :type default_data_lake_storage:
     ~azure.mgmt.synapse.models.DataLakeStorageAccountDetails
    :param sql_administrator_login_password: SQL administrator login password
    :type sql_administrator_login_password: str
    :ivar managed_resource_group_name: Workspace managed resource group
    :vartype managed_resource_group_name: str
    :ivar provisioning_state: Resource provisioning state
    :vartype provisioning_state: str
    :param sql_administrator_login: Login for workspace SQL active directory
     administrator
    :type sql_administrator_login: str
    :param virtual_network_profile: Virtual Network profile
    :type virtual_network_profile:
     ~azure.mgmt.synapse.models.VirtualNetworkProfile
    :param connectivity_endpoints: Connectivity endpoints
    :type connectivity_endpoints: dict[str, str]
    :param identity: Identity of the workspace
    :type identity: ~azure.mgmt.synapse.models.ManagedIdentity
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'managed_resource_group_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'default_data_lake_storage': {'key': 'properties.defaultDataLakeStorage', 'type': 'DataLakeStorageAccountDetails'},
        'sql_administrator_login_password': {'key': 'properties.sqlAdministratorLoginPassword', 'type': 'str'},
        'managed_resource_group_name': {'key': 'properties.managedResourceGroupName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'sql_administrator_login': {'key': 'properties.sqlAdministratorLogin', 'type': 'str'},
        'virtual_network_profile': {'key': 'properties.virtualNetworkProfile', 'type': 'VirtualNetworkProfile'},
        'connectivity_endpoints': {'key': 'properties.connectivityEndpoints', 'type': '{str}'},
        'identity': {'key': 'identity', 'type': 'ManagedIdentity'},
    }

    def __init__(self, **kwargs):
        super(Workspace, self).__init__(**kwargs)
        self.default_data_lake_storage = kwargs.get('default_data_lake_storage', None)
        self.sql_administrator_login_password = kwargs.get('sql_administrator_login_password', None)
        self.managed_resource_group_name = None
        self.provisioning_state = None
        self.sql_administrator_login = kwargs.get('sql_administrator_login', None)
        self.virtual_network_profile = kwargs.get('virtual_network_profile', None)
        self.connectivity_endpoints = kwargs.get('connectivity_endpoints', None)
        self.identity = kwargs.get('identity', None)
