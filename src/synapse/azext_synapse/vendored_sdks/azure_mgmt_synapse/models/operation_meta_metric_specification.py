# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class OperationMetaMetricSpecification(Model):
    """What is this?.

    :param source_mdm_namespace: The source MDM namespace
    :type source_mdm_namespace: str
    :param display_name: Metric display name
    :type display_name: str
    :param name: Metric unique name
    :type name: str
    :param aggregation_type: Metric aggregation type
    :type aggregation_type: str
    :param display_description: Metric description
    :type display_description: str
    :param source_mdm_account: The source MDM account
    :type source_mdm_account: str
    :param enable_regional_mdm_account: Whether the regional MDM account is
     enabled
    :type enable_regional_mdm_account: bool
    :param unit: Metric units
    :type unit: str
    :param dimensions: Metric dimensions
    :type dimensions:
     list[~azure.mgmt.synapse.models.OperationMetaMetricDimensionSpecification]
    :param supports_instance_level_aggregation: Whether the metric supports
     instance-level aggregation
    :type supports_instance_level_aggregation: bool
    :param metric_filter_pattern: Metric filter
    :type metric_filter_pattern: str
    """

    _attribute_map = {
        'source_mdm_namespace': {'key': 'sourceMdmNamespace', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'aggregation_type': {'key': 'aggregationType', 'type': 'str'},
        'display_description': {'key': 'displayDescription', 'type': 'str'},
        'source_mdm_account': {'key': 'sourceMdmAccount', 'type': 'str'},
        'enable_regional_mdm_account': {'key': 'enableRegionalMdmAccount', 'type': 'bool'},
        'unit': {'key': 'unit', 'type': 'str'},
        'dimensions': {'key': 'dimensions', 'type': '[OperationMetaMetricDimensionSpecification]'},
        'supports_instance_level_aggregation': {'key': 'supportsInstanceLevelAggregation', 'type': 'bool'},
        'metric_filter_pattern': {'key': 'metricFilterPattern', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(OperationMetaMetricSpecification, self).__init__(**kwargs)
        self.source_mdm_namespace = kwargs.get('source_mdm_namespace', None)
        self.display_name = kwargs.get('display_name', None)
        self.name = kwargs.get('name', None)
        self.aggregation_type = kwargs.get('aggregation_type', None)
        self.display_description = kwargs.get('display_description', None)
        self.source_mdm_account = kwargs.get('source_mdm_account', None)
        self.enable_regional_mdm_account = kwargs.get('enable_regional_mdm_account', None)
        self.unit = kwargs.get('unit', None)
        self.dimensions = kwargs.get('dimensions', None)
        self.supports_instance_level_aggregation = kwargs.get('supports_instance_level_aggregation', None)
        self.metric_filter_pattern = kwargs.get('metric_filter_pattern', None)
