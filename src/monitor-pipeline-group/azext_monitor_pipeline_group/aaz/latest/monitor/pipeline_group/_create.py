# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor pipeline-group create",
)
class Create(AAZCommand):
    """Create a pipeline group instance.

    :example: Create a PipelineGroup instance using UDP receiver
        az monitor pipeline-group create --resource-group myResourceGroup --pipeline-group-name plGroup1 --location eastus2 --extended-location "{name:/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/myResourceGroup/providers/microsoft.extendedlocation/customlocations/myTestCustomLocation,type:CustomLocation}" --tags "{tag1:A,tag2:B}" --receivers "[{type:UDP,name:udp-receiver1,udp:{endpoint:'0.0.0.0:518',encoding:utf-8}}]" --processors "[]" --exporters "[{type:AzureMonitorWorkspaceLogs,name:my-workspace-logs-exporter1,azure-monitor-workspace-logs:{api:{data-collection-endpoint-url:'https://logs-myingestion-eb0s.eastus-1.ingest.monitor.azure.com',stream:Custom-MyTableRawData_CL,data-collection-rule:dcr-00000000000000000000000000000000,schema:{record-map:[{from:body,to:Body},{from:severity_text,to:SeverityText},{from:time_unix_nano,to:TimeGenerated}]}},concurrency:{worker-count:4,batch-queue-size:100}}}]" --service "{pipelines:[{name:MyPipelineForLogs1,type:logs,receivers:[udp-receiver1],processors:[],exporters:[my-workspace-logs-exporter1]}]}"
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.monitor/pipelinegroups/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pipeline_group_name = AAZStrArg(
            options=["-n", "--name", "--pipeline-group-name"],
            help="The name of pipeline group. The name is case insensitive.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,10}[^-]$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.exporters = AAZListArg(
            options=["--exporters"],
            arg_group="Properties",
            help="The exporters specified for a pipeline group instance.",
        )
        _args_schema.network_config = AAZListArg(
            options=["--network-config"],
            arg_group="Properties",
            help="Networking configurations for the pipeline group instance.",
        )
        _args_schema.processors = AAZListArg(
            options=["--processors"],
            arg_group="Properties",
            help="The processors specified for a pipeline group instance.",
        )
        _args_schema.receivers = AAZListArg(
            options=["--receivers"],
            arg_group="Properties",
            help="The receivers specified for a pipeline group instance.",
        )
        _args_schema.replicas = AAZIntArg(
            options=["--replicas"],
            arg_group="Properties",
            help="Defines the amount of replicas of the pipeline group instance.",
        )
        _args_schema.service = AAZObjectArg(
            options=["--service"],
            arg_group="Properties",
            help="The service section for a given pipeline group instance.",
        )

        exporters = cls._args_schema.exporters
        exporters.Element = AAZObjectArg()

        _element = cls._args_schema.exporters.Element
        _element.azure_monitor_workspace_logs = AAZObjectArg(
            options=["azure-monitor-workspace-logs"],
            help="Azure Monitor Workspace Logs specific configurations.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of exporter.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,32}[^-]$",
            ),
        )
        _element.tcp = AAZObjectArg(
            options=["tcp"],
            help="TCP based exporter. Used for pipelineGroup exporter.",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of exporter.",
            required=True,
            enum={"AzureMonitorWorkspaceLogs": "AzureMonitorWorkspaceLogs", "PipelineGroup": "PipelineGroup"},
        )

        azure_monitor_workspace_logs = cls._args_schema.exporters.Element.azure_monitor_workspace_logs
        azure_monitor_workspace_logs.api = AAZObjectArg(
            options=["api"],
            help="API configurations for Azure Monitor workspace exporter.",
            required=True,
        )
        azure_monitor_workspace_logs.cache = AAZObjectArg(
            options=["cache"],
            help="Cache configurations.",
        )
        azure_monitor_workspace_logs.concurrency = AAZObjectArg(
            options=["concurrency"],
            help="Concurrency configuration for the exporter.",
        )

        api = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api
        api.data_collection_endpoint_url = AAZStrArg(
            options=["data-collection-endpoint-url"],
            help="Data collection endpoint ingestion url.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(https?)://[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*$",
            ),
        )
        api.data_collection_rule = AAZStrArg(
            options=["data-collection-rule"],
            help="Data Collection Rule (DCR) immutable id.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9.-]{1,1000}[^-]$",
            ),
        )
        api.schema = AAZObjectArg(
            options=["schema"],
            help="The schema mapping for incoming data.",
            required=True,
        )
        api.stream = AAZStrArg(
            options=["stream"],
            help="Stream name in destination. Azure Monitor stream is related to the destination table.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9._-]{1,1000}[^-]$",
            ),
        )

        schema = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema
        schema.record_map = AAZListArg(
            options=["record-map"],
            help="Record Map.",
            required=True,
        )
        schema.resource_map = AAZListArg(
            options=["resource-map"],
            help="Resource Map captures information about the entity for which telemetry is recorded. For example, metrics exposed by a Kubernetes container can be linked to a resource that specifies the cluster, namespace, pod, and container name.Resource may capture an entire hierarchy of entity identification. It may describe the host in the cloud and specific container or an application running in the process.",
        )
        schema.scope_map = AAZListArg(
            options=["scope-map"],
            help="A scope map is a logical unit of the application code with which the emitted telemetry can be associated.",
        )

        record_map = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.record_map
        record_map.Element = AAZObjectArg()

        _element = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.record_map.Element
        _element.from_ = AAZStrArg(
            options=["from"],
            help="Record Map Key.",
            required=True,
        )
        _element.to = AAZStrArg(
            options=["to"],
            help="Record Map Value.",
            required=True,
        )

        resource_map = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.resource_map
        resource_map.Element = AAZObjectArg()

        _element = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.resource_map.Element
        _element.from_ = AAZStrArg(
            options=["from"],
            help="Resource Map Key.",
            required=True,
        )
        _element.to = AAZStrArg(
            options=["to"],
            help="Resource Map Value.",
            required=True,
        )

        scope_map = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.scope_map
        scope_map.Element = AAZObjectArg()

        _element = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.api.schema.scope_map.Element
        _element.from_ = AAZStrArg(
            options=["from"],
            help="Scope Map Key.",
            required=True,
        )
        _element.to = AAZStrArg(
            options=["to"],
            help="Scope Map Value.",
            required=True,
        )

        cache = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.cache
        cache.max_storage_usage = AAZIntArg(
            options=["max-storage-usage"],
            help="Max storage usage in megabytes.",
        )
        cache.retention_period = AAZIntArg(
            options=["retention-period"],
            help="Retention period in minutes.",
        )

        concurrency = cls._args_schema.exporters.Element.azure_monitor_workspace_logs.concurrency
        concurrency.batch_queue_size = AAZIntArg(
            options=["batch-queue-size"],
            help="Size of the queue for log batches.",
            default=100,
        )
        concurrency.worker_count = AAZIntArg(
            options=["worker-count"],
            help="Number of parallel workers processing the log queues.",
            default=4,
        )

        tcp = cls._args_schema.exporters.Element.tcp
        tcp.url = AAZStrArg(
            options=["url"],
            help="TCP url to export.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(https?)://[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*$",
            ),
        )

        network_config = cls._args_schema.network_config
        network_config.Element = AAZObjectArg()

        _element = cls._args_schema.network_config.Element
        _element.external_networking_mode = AAZStrArg(
            options=["external-networking-mode"],
            help="External networking mode.",
            required=True,
            enum={"LoadBalancerOnly": "LoadBalancerOnly"},
        )
        _element.host = AAZStrArg(
            options=["host"],
            help="The address exposed on the cluster. Example: azuremonitorpipeline.contoso.com.",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-\\.]+$",
            ),
        )
        _element.routes = AAZListArg(
            options=["routes"],
            help="Networking routes configuration.",
            required=True,
        )

        routes = cls._args_schema.network_config.Element.routes
        routes.Element = AAZObjectArg()

        _element = cls._args_schema.network_config.Element.routes.Element
        _element.path = AAZStrArg(
            options=["path"],
            help="Route path.",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-/\\.]+$",
            ),
        )
        _element.port = AAZIntArg(
            options=["port"],
            help="The port that will be configured externally. If not specified, it will use the port from the receiver definition.",
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=1,
            ),
        )
        _element.receiver = AAZStrArg(
            options=["receiver"],
            help="The name of the previously defined receiver.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,32}[^-]$",
            ),
        )
        _element.subdomain = AAZStrArg(
            options=["subdomain"],
            help="Route subdomain.",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-\\.]+$",
            ),
        )

        processors = cls._args_schema.processors
        processors.Element = AAZObjectArg()

        _element = cls._args_schema.processors.Element
        _element.batch = AAZObjectArg(
            options=["batch"],
            help="Batch processor configurations.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of processor.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,32}[^-]$",
            ),
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of processor.",
            required=True,
            enum={"Batch": "Batch"},
        )

        batch = cls._args_schema.processors.Element.batch
        batch.batch_size = AAZIntArg(
            options=["batch-size"],
            help="Size of the batch.",
            default=8192,
            fmt=AAZIntArgFormat(
                maximum=100000,
                minimum=10,
            ),
        )
        batch.timeout = AAZIntArg(
            options=["timeout"],
            help="Timeout in milliseconds.",
            default=200,
            fmt=AAZIntArgFormat(
                maximum=60000,
                minimum=10,
            ),
        )

        receivers = cls._args_schema.receivers
        receivers.Element = AAZObjectArg()

        _element = cls._args_schema.receivers.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of receiver.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,32}[^-]$",
            ),
        )
        _element.otlp = AAZObjectArg(
            options=["otlp"],
            help="OTLP receiver configurations. This field is mandatory for OTLP and pipelineGroup receivers.",
        )
        _element.syslog = AAZObjectArg(
            options=["syslog"],
            help="Syslog configurations. This field is mandatory for syslog type receivers.",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of receiver.",
            required=True,
            enum={"Ama": "Ama", "OTLP": "OTLP", "PipelineGroup": "PipelineGroup", "Syslog": "Syslog", "UDP": "UDP"},
        )
        _element.udp = AAZObjectArg(
            options=["udp"],
            help="UDP receiver configurations. This field is mandatory for UDP receivers.",
        )

        otlp = cls._args_schema.receivers.Element.otlp
        otlp.endpoint = AAZStrArg(
            options=["endpoint"],
            help="OTLP GRPC endpoint definition. Example: 0.0.0.0:<port>.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-\\.]+:[0-9]+$",
            ),
        )

        syslog = cls._args_schema.receivers.Element.syslog
        syslog.endpoint = AAZStrArg(
            options=["endpoint"],
            help="Syslog receiver endpoint definition. Example: 0.0.0.0:<port>.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-\\.]+:[0-9]+$",
            ),
        )
        syslog.protocol = AAZStrArg(
            options=["protocol"],
            help="Protocol to parse syslog messages. Default rfc3164",
            default="rfc3164",
            enum={"rfc3164": "rfc3164", "rfc5424": "rfc5424"},
        )

        udp = cls._args_schema.receivers.Element.udp
        udp.encoding = AAZStrArg(
            options=["encoding"],
            help="The encoding of the stream being received.",
            default="nop",
            enum={"ascii": "ascii", "big5": "big5", "nop": "nop", "utf-16be": "utf-16be", "utf-16le": "utf-16le", "utf-8": "utf-8"},
        )
        udp.endpoint = AAZStrArg(
            options=["endpoint"],
            help="TCP endpoint definition. Example: 0.0.0.0:<port>.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-\\.]+:[0-9]+$",
            ),
        )
        udp.read_queue_length = AAZIntArg(
            options=["read-queue-length"],
            help="Max read queue length.",
            default=1000,
            fmt=AAZIntArgFormat(
                maximum=100000,
                minimum=100,
            ),
        )

        service = cls._args_schema.service
        service.persistence = AAZObjectArg(
            options=["persistence"],
            help="Persistence options to all pipelines in the instance.",
        )
        service.pipelines = AAZListArg(
            options=["pipelines"],
            help="Pipelines belonging to a given pipeline group.",
            required=True,
        )

        persistence = cls._args_schema.service.persistence
        persistence.persistent_volume_name = AAZStrArg(
            options=["persistent-volume-name"],
            help="The name of the mounted persistent volume.",
            required=True,
        )

        pipelines = cls._args_schema.service.pipelines
        pipelines.Element = AAZObjectArg()

        _element = cls._args_schema.service.pipelines.Element
        _element.exporters = AAZListArg(
            options=["exporters"],
            help="Reference to exporters configured for the pipeline.",
            required=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the pipeline.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?!-)[a-zA-Z0-9-]{3,32}[^-]$",
            ),
        )
        _element.processors = AAZListArg(
            options=["processors"],
            help="Reference to processors configured for the pipeline.",
        )
        _element.receivers = AAZListArg(
            options=["receivers"],
            help="Reference to receivers configured for the pipeline.",
            required=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of pipeline",
            required=True,
            enum={"logs": "logs"},
        )

        exporters = cls._args_schema.service.pipelines.Element.exporters
        exporters.Element = AAZStrArg()

        processors = cls._args_schema.service.pipelines.Element.processors
        processors.Element = AAZStrArg()

        receivers = cls._args_schema.service.pipelines.Element.receivers
        receivers.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.extended_location = AAZObjectArg(
            options=["--extended-location"],
            arg_group="Resource",
            help="The extended location for given pipeline group.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        extended_location = cls._args_schema.extended_location
        extended_location.name = AAZStrArg(
            options=["name"],
            help="The name of the extended location.",
            required=True,
        )
        extended_location.type = AAZStrArg(
            options=["type"],
            help="The type of the extended location.",
            required=True,
            enum={"CustomLocation": "CustomLocation", "EdgeZone": "EdgeZone"},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.PipelineGroupsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PipelineGroupsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Monitor/pipelineGroups/{pipelineGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "pipelineGroupName", self.ctx.args.pipeline_group_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("extendedLocation", AAZObjectType, ".extended_location")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            extended_location = _builder.get(".extendedLocation")
            if extended_location is not None:
                extended_location.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                extended_location.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("exporters", AAZListType, ".exporters", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkingConfigurations", AAZListType, ".network_config")
                properties.set_prop("processors", AAZListType, ".processors", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("receivers", AAZListType, ".receivers", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("replicas", AAZIntType, ".replicas")
                properties.set_prop("service", AAZObjectType, ".service", typ_kwargs={"flags": {"required": True}})

            exporters = _builder.get(".properties.exporters")
            if exporters is not None:
                exporters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.exporters[]")
            if _elements is not None:
                _elements.set_prop("azureMonitorWorkspaceLogs", AAZObjectType, ".azure_monitor_workspace_logs")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("tcp", AAZObjectType, ".tcp")
                _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            azure_monitor_workspace_logs = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs")
            if azure_monitor_workspace_logs is not None:
                azure_monitor_workspace_logs.set_prop("api", AAZObjectType, ".api", typ_kwargs={"flags": {"required": True}})
                azure_monitor_workspace_logs.set_prop("cache", AAZObjectType, ".cache")
                azure_monitor_workspace_logs.set_prop("concurrency", AAZObjectType, ".concurrency")

            api = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api")
            if api is not None:
                api.set_prop("dataCollectionEndpointUrl", AAZStrType, ".data_collection_endpoint_url", typ_kwargs={"flags": {"required": True}})
                api.set_prop("dataCollectionRule", AAZStrType, ".data_collection_rule", typ_kwargs={"flags": {"required": True}})
                api.set_prop("schema", AAZObjectType, ".schema", typ_kwargs={"flags": {"required": True}})
                api.set_prop("stream", AAZStrType, ".stream", typ_kwargs={"flags": {"required": True}})

            schema = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema")
            if schema is not None:
                schema.set_prop("recordMap", AAZListType, ".record_map", typ_kwargs={"flags": {"required": True}})
                schema.set_prop("resourceMap", AAZListType, ".resource_map")
                schema.set_prop("scopeMap", AAZListType, ".scope_map")

            record_map = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.recordMap")
            if record_map is not None:
                record_map.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.recordMap[]")
            if _elements is not None:
                _elements.set_prop("from", AAZStrType, ".from_", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("to", AAZStrType, ".to", typ_kwargs={"flags": {"required": True}})

            resource_map = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.resourceMap")
            if resource_map is not None:
                resource_map.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.resourceMap[]")
            if _elements is not None:
                _elements.set_prop("from", AAZStrType, ".from_", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("to", AAZStrType, ".to", typ_kwargs={"flags": {"required": True}})

            scope_map = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.scopeMap")
            if scope_map is not None:
                scope_map.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.api.schema.scopeMap[]")
            if _elements is not None:
                _elements.set_prop("from", AAZStrType, ".from_", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("to", AAZStrType, ".to", typ_kwargs={"flags": {"required": True}})

            cache = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.cache")
            if cache is not None:
                cache.set_prop("maxStorageUsage", AAZIntType, ".max_storage_usage")
                cache.set_prop("retentionPeriod", AAZIntType, ".retention_period")

            concurrency = _builder.get(".properties.exporters[].azureMonitorWorkspaceLogs.concurrency")
            if concurrency is not None:
                concurrency.set_prop("batchQueueSize", AAZIntType, ".batch_queue_size")
                concurrency.set_prop("workerCount", AAZIntType, ".worker_count")

            tcp = _builder.get(".properties.exporters[].tcp")
            if tcp is not None:
                tcp.set_prop("url", AAZStrType, ".url", typ_kwargs={"flags": {"required": True}})

            networking_configurations = _builder.get(".properties.networkingConfigurations")
            if networking_configurations is not None:
                networking_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkingConfigurations[]")
            if _elements is not None:
                _elements.set_prop("externalNetworkingMode", AAZStrType, ".external_networking_mode", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("host", AAZStrType, ".host")
                _elements.set_prop("routes", AAZListType, ".routes", typ_kwargs={"flags": {"required": True}})

            routes = _builder.get(".properties.networkingConfigurations[].routes")
            if routes is not None:
                routes.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkingConfigurations[].routes[]")
            if _elements is not None:
                _elements.set_prop("path", AAZStrType, ".path")
                _elements.set_prop("port", AAZIntType, ".port")
                _elements.set_prop("receiver", AAZStrType, ".receiver", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("subdomain", AAZStrType, ".subdomain")

            processors = _builder.get(".properties.processors")
            if processors is not None:
                processors.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.processors[]")
            if _elements is not None:
                _elements.set_prop("batch", AAZObjectType, ".batch")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            batch = _builder.get(".properties.processors[].batch")
            if batch is not None:
                batch.set_prop("batchSize", AAZIntType, ".batch_size")
                batch.set_prop("timeout", AAZIntType, ".timeout")

            receivers = _builder.get(".properties.receivers")
            if receivers is not None:
                receivers.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.receivers[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("otlp", AAZObjectType, ".otlp")
                _elements.set_prop("syslog", AAZObjectType, ".syslog")
                _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("udp", AAZObjectType, ".udp")

            otlp = _builder.get(".properties.receivers[].otlp")
            if otlp is not None:
                otlp.set_prop("endpoint", AAZStrType, ".endpoint", typ_kwargs={"flags": {"required": True}})

            syslog = _builder.get(".properties.receivers[].syslog")
            if syslog is not None:
                syslog.set_prop("endpoint", AAZStrType, ".endpoint", typ_kwargs={"flags": {"required": True}})
                syslog.set_prop("protocol", AAZStrType, ".protocol")

            udp = _builder.get(".properties.receivers[].udp")
            if udp is not None:
                udp.set_prop("encoding", AAZStrType, ".encoding")
                udp.set_prop("endpoint", AAZStrType, ".endpoint", typ_kwargs={"flags": {"required": True}})
                udp.set_prop("readQueueLength", AAZIntType, ".read_queue_length")

            service = _builder.get(".properties.service")
            if service is not None:
                service.set_prop("persistence", AAZObjectType, ".persistence")
                service.set_prop("pipelines", AAZListType, ".pipelines", typ_kwargs={"flags": {"required": True}})

            persistence = _builder.get(".properties.service.persistence")
            if persistence is not None:
                persistence.set_prop("persistentVolumeName", AAZStrType, ".persistent_volume_name", typ_kwargs={"flags": {"required": True}})

            pipelines = _builder.get(".properties.service.pipelines")
            if pipelines is not None:
                pipelines.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.service.pipelines[]")
            if _elements is not None:
                _elements.set_prop("exporters", AAZListType, ".exporters", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("processors", AAZListType, ".processors")
                _elements.set_prop("receivers", AAZListType, ".receivers", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            exporters = _builder.get(".properties.service.pipelines[].exporters")
            if exporters is not None:
                exporters.set_elements(AAZStrType, ".")

            processors = _builder.get(".properties.service.pipelines[].processors")
            if processors is not None:
                processors.set_elements(AAZStrType, ".")

            receivers = _builder.get(".properties.service.pipelines[].receivers")
            if receivers is not None:
                receivers.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200_201.extended_location
            extended_location.name = AAZStrType(
                flags={"required": True},
            )
            extended_location.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.exporters = AAZListType(
                flags={"required": True},
            )
            properties.networking_configurations = AAZListType(
                serialized_name="networkingConfigurations",
            )
            properties.processors = AAZListType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.receivers = AAZListType(
                flags={"required": True},
            )
            properties.replicas = AAZIntType()
            properties.service = AAZObjectType(
                flags={"required": True},
            )

            exporters = cls._schema_on_200_201.properties.exporters
            exporters.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.exporters.Element
            _element.azure_monitor_workspace_logs = AAZObjectType(
                serialized_name="azureMonitorWorkspaceLogs",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.tcp = AAZObjectType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            azure_monitor_workspace_logs = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs
            azure_monitor_workspace_logs.api = AAZObjectType(
                flags={"required": True},
            )
            azure_monitor_workspace_logs.cache = AAZObjectType()
            azure_monitor_workspace_logs.concurrency = AAZObjectType()

            api = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api
            api.data_collection_endpoint_url = AAZStrType(
                serialized_name="dataCollectionEndpointUrl",
                flags={"required": True},
            )
            api.data_collection_rule = AAZStrType(
                serialized_name="dataCollectionRule",
                flags={"required": True},
            )
            api.schema = AAZObjectType(
                flags={"required": True},
            )
            api.stream = AAZStrType(
                flags={"required": True},
            )

            schema = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema
            schema.record_map = AAZListType(
                serialized_name="recordMap",
                flags={"required": True},
            )
            schema.resource_map = AAZListType(
                serialized_name="resourceMap",
            )
            schema.scope_map = AAZListType(
                serialized_name="scopeMap",
            )

            record_map = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.record_map
            record_map.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.record_map.Element
            _element["from"] = AAZStrType(
                flags={"required": True},
            )
            _element.to = AAZStrType(
                flags={"required": True},
            )

            resource_map = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.resource_map
            resource_map.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.resource_map.Element
            _element["from"] = AAZStrType(
                flags={"required": True},
            )
            _element.to = AAZStrType(
                flags={"required": True},
            )

            scope_map = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.scope_map
            scope_map.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.api.schema.scope_map.Element
            _element["from"] = AAZStrType(
                flags={"required": True},
            )
            _element.to = AAZStrType(
                flags={"required": True},
            )

            cache = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.cache
            cache.max_storage_usage = AAZIntType(
                serialized_name="maxStorageUsage",
            )
            cache.retention_period = AAZIntType(
                serialized_name="retentionPeriod",
            )

            concurrency = cls._schema_on_200_201.properties.exporters.Element.azure_monitor_workspace_logs.concurrency
            concurrency.batch_queue_size = AAZIntType(
                serialized_name="batchQueueSize",
            )
            concurrency.worker_count = AAZIntType(
                serialized_name="workerCount",
            )

            tcp = cls._schema_on_200_201.properties.exporters.Element.tcp
            tcp.url = AAZStrType(
                flags={"required": True},
            )

            networking_configurations = cls._schema_on_200_201.properties.networking_configurations
            networking_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.networking_configurations.Element
            _element.external_networking_mode = AAZStrType(
                serialized_name="externalNetworkingMode",
                flags={"required": True},
            )
            _element.host = AAZStrType()
            _element.routes = AAZListType(
                flags={"required": True},
            )

            routes = cls._schema_on_200_201.properties.networking_configurations.Element.routes
            routes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.networking_configurations.Element.routes.Element
            _element.path = AAZStrType()
            _element.port = AAZIntType()
            _element.receiver = AAZStrType(
                flags={"required": True},
            )
            _element.subdomain = AAZStrType()

            processors = cls._schema_on_200_201.properties.processors
            processors.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.processors.Element
            _element.batch = AAZObjectType()
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.type = AAZStrType(
                flags={"required": True},
            )

            batch = cls._schema_on_200_201.properties.processors.Element.batch
            batch.batch_size = AAZIntType(
                serialized_name="batchSize",
            )
            batch.timeout = AAZIntType()

            receivers = cls._schema_on_200_201.properties.receivers
            receivers.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.receivers.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.otlp = AAZObjectType()
            _element.syslog = AAZObjectType()
            _element.type = AAZStrType(
                flags={"required": True},
            )
            _element.udp = AAZObjectType()

            otlp = cls._schema_on_200_201.properties.receivers.Element.otlp
            otlp.endpoint = AAZStrType(
                flags={"required": True},
            )

            syslog = cls._schema_on_200_201.properties.receivers.Element.syslog
            syslog.endpoint = AAZStrType(
                flags={"required": True},
            )
            syslog.protocol = AAZStrType()

            udp = cls._schema_on_200_201.properties.receivers.Element.udp
            udp.encoding = AAZStrType()
            udp.endpoint = AAZStrType(
                flags={"required": True},
            )
            udp.read_queue_length = AAZIntType(
                serialized_name="readQueueLength",
            )

            service = cls._schema_on_200_201.properties.service
            service.persistence = AAZObjectType()
            service.pipelines = AAZListType(
                flags={"required": True},
            )

            persistence = cls._schema_on_200_201.properties.service.persistence
            persistence.persistent_volume_name = AAZStrType(
                serialized_name="persistentVolumeName",
                flags={"required": True},
            )

            pipelines = cls._schema_on_200_201.properties.service.pipelines
            pipelines.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.service.pipelines.Element
            _element.exporters = AAZListType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.processors = AAZListType()
            _element.receivers = AAZListType(
                flags={"required": True},
            )
            _element.type = AAZStrType(
                flags={"required": True},
            )

            exporters = cls._schema_on_200_201.properties.service.pipelines.Element.exporters
            exporters.Element = AAZStrType()

            processors = cls._schema_on_200_201.properties.service.pipelines.Element.processors
            processors.Element = AAZStrType()

            receivers = cls._schema_on_200_201.properties.service.pipelines.Element.receivers
            receivers.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
