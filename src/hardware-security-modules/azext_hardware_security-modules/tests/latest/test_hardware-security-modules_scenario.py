# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
import unittest

from azure_devtools.scenario_tests import AllowLargeResponse
from azure.cli.testsdk import ScenarioTest
from .. import try_manual
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg):
    pass


# EXAMPLE: /DedicatedHsm/put/Create a new or update an existing dedicated HSM
@try_manual
def step__dedicatedhsm_put_create_a_new_or_update_an_existing_dedicated_hsm(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm create '
             '--name "hsm1" '
             '--location "westus" '
             '--network-profile-network-interfaces private-ip-address="1.0.0.1" '
             '--network-profile-subnet id="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Net'
             'work/virtualNetworks/{vn}/subnets/default" '
             '--stamp-id "stamp01" '
             '--sku name="SafeNet Luna Network HSM A790" '
             '--tags Dept="hsm" Environment="dogfood" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az hardware-security-modules dedicated-hsm wait --created '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DedicatedHsm/get/Get a dedicated HSM
@try_manual
def step__dedicatedhsm_get_get_a_dedicated_hsm(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm show '
             '--name "hsm1" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DedicatedHsm/get/List dedicated HSM devices in a resource group
@try_manual
def step__dedicatedhsm_get_list_dedicated_hsm_devices_in_a_resource_group(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm list '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DedicatedHsm/get/List dedicated HSM devices in a subscription
@try_manual
def step__dedicatedhsm_get_list_dedicated_hsm_devices_in_a_subscription(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm list',
             checks=[])


# EXAMPLE: /DedicatedHsm/patch/Update an existing dedicated HSM
@try_manual
def step__dedicatedhsm_patch_update_an_existing_dedicated_hsm(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm update '
             '--name "hsm1" '
             '--tags Dept="hsm" Environment="dogfood" Slice="A" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DedicatedHsm/delete/Delete a dedicated HSM
@try_manual
def step__dedicatedhsm_delete_delete_a_dedicated_hsm(test, rg):
    test.cmd('az hardware-security-modules dedicated-hsm delete '
             '--name "hsm1" '
             '--resource-group "{rg}"',
             checks=[])


@try_manual
def cleanup(test, rg):
    pass


@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step__dedicatedhsm_put_create_a_new_or_update_an_existing_dedicated_hsm(test, rg)
    step__dedicatedhsm_get_get_a_dedicated_hsm(test, rg)
    step__dedicatedhsm_get_list_dedicated_hsm_devices_in_a_resource_group(test, rg)
    step__dedicatedhsm_get_list_dedicated_hsm_devices_in_a_subscription(test, rg)
    step__dedicatedhsm_patch_update_an_existing_dedicated_hsm(test, rg)
    step__dedicatedhsm_delete_delete_a_dedicated_hsm(test, rg)
    cleanup(test, rg)


@try_manual
class AzureDedicatedHSMResourceProviderScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitesthardware_security_modules_hsm-group'[:7], key='rg',
                           parameter_name='rg')
    @VirtualNetworkPreparer(name_prefix='clitesthardware_security_modules_stamp01'[:7], key='vn', resource_group_key='r'
                            'g')
    def test_hardware_security_modules(self, rg):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        call_scenario(self, rg)
