# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.cli.core.commands import CliCommandType


# pylint: disable=too-many-locals, too-many-statements
def load_command_table(self, _):

    from azext_peering.generated._client_factory import cf_legacy_peering
    peering_legacy_peering = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._legacy_peering_operations#LegacyPeeringOperati'
        'ons.{}',
        client_factory=cf_legacy_peering)
    with self.command_group('peering legacy', peering_legacy_peering, client_factory=cf_legacy_peering) as g:
        g.custom_command('list', 'peering_legacy_list')

    from azext_peering.generated._client_factory import cf_peer_asn
    peering_peer_asn = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peer_asn_operations#PeerAsnOperations.{}',
        client_factory=cf_peer_asn)
    with self.command_group('peering asn', peering_peer_asn, client_factory=cf_peer_asn) as g:
        g.custom_command('list', 'peering_asn_list')
        g.custom_show_command('show', 'peering_asn_show')
        g.custom_command('create', 'peering_asn_create')
        g.custom_command('delete', 'peering_asn_delete')

    from azext_peering.generated._client_factory import cf_peering_location
    peering_peering_location = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_location_operations#PeeringLocationOpe'
        'rations.{}',
        client_factory=cf_peering_location)
    with self.command_group('peering location', peering_peering_location, client_factory=cf_peering_location) as g:
        g.custom_command('list', 'peering_location_list')

    from azext_peering.generated._client_factory import cf_registered_asn
    peering_registered_asn = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._registered_asn_operations#RegisteredAsnOperati'
        'ons.{}',
        client_factory=cf_registered_asn)
    with self.command_group('peering registered-asn', peering_registered_asn, client_factory=cf_registered_asn) as g:
        g.custom_command('list', 'peering_registered_asn_list')
        g.custom_show_command('show', 'peering_registered_asn_show')
        g.custom_command('create', 'peering_registered_asn_create')
        g.custom_command('update', 'peering_registered_asn_update')
        g.custom_command('delete', 'peering_registered_asn_delete')

    from azext_peering.generated._client_factory import cf_registered_prefix
    peering_registered_prefix = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._registered_prefix_operations#RegisteredPrefixO'
        'perations.{}',
        client_factory=cf_registered_prefix)
    with self.command_group('peering registered-prefix', peering_registered_prefix,
                            client_factory=cf_registered_prefix) as g:
        g.custom_command('list', 'peering_registered_prefix_list')
        g.custom_show_command('show', 'peering_registered_prefix_show')
        g.custom_command('create', 'peering_registered_prefix_create')
        g.custom_command('update', 'peering_registered_prefix_update')
        g.custom_command('delete', 'peering_registered_prefix_delete')

    from azext_peering.generated._client_factory import cf_peering
    peering_peering = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_operations#PeeringOperations.{}',
        client_factory=cf_peering)
    with self.command_group('peering peering', peering_peering, client_factory=cf_peering) as g:
        g.custom_command('list', 'peering_peering_list')
        g.custom_show_command('show', 'peering_peering_show')
        g.custom_command('create', 'peering_peering_create')
        g.custom_command('update', 'peering_peering_update')
        g.custom_command('delete', 'peering_peering_delete')

    from azext_peering.generated._client_factory import cf_received_route
    peering_received_route = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._received_route_operations#ReceivedRouteOperati'
        'ons.{}',
        client_factory=cf_received_route)
    with self.command_group('peering received-route', peering_received_route, client_factory=cf_received_route) as g:
        g.custom_command('list', 'peering_received_route_list')

    from azext_peering.generated._client_factory import cf_peering_service_country
    peering_peering_service_country = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_service_country_operations#PeeringServ'
        'iceCountryOperations.{}',
        client_factory=cf_peering_service_country)
    with self.command_group('peering service country', peering_peering_service_country,
                            client_factory=cf_peering_service_country) as g:
        g.custom_command('list', 'peering_service_country_list')

    from azext_peering.generated._client_factory import cf_peering_service_location
    peering_peering_service_location = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_service_location_operations#PeeringSer'
        'viceLocationOperations.{}',
        client_factory=cf_peering_service_location)
    with self.command_group('peering service location', peering_peering_service_location,
                            client_factory=cf_peering_service_location) as g:
        g.custom_command('list', 'peering_service_location_list')

    from azext_peering.generated._client_factory import cf_prefix
    peering_prefix = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._prefix_operations#PrefixOperations.{}',
        client_factory=cf_prefix)
    with self.command_group('peering service prefix', peering_prefix, client_factory=cf_prefix) as g:
        g.custom_command('list', 'peering_service_prefix_list')
        g.custom_show_command('show', 'peering_service_prefix_show')
        g.custom_command('create', 'peering_service_prefix_create')
        g.custom_command('update', 'peering_service_prefix_update')
        g.custom_command('delete', 'peering_service_prefix_delete')

    from azext_peering.generated._client_factory import cf_peering_service_provider
    peering_peering_service_provider = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_service_provider_operations#PeeringSer'
        'viceProviderOperations.{}',
        client_factory=cf_peering_service_provider)
    with self.command_group('peering service provider', peering_peering_service_provider,
                            client_factory=cf_peering_service_provider) as g:
        g.custom_command('list', 'peering_service_provider_list')

    from azext_peering.generated._client_factory import cf_peering_service
    peering_peering_service = CliCommandType(
        operations_tmpl='azext_peering.vendored_sdks.peering.operations._peering_service_operations#PeeringServiceOpera'
        'tions.{}',
        client_factory=cf_peering_service)
    with self.command_group('peering service', peering_peering_service, client_factory=cf_peering_service) as g:
        g.custom_command('list', 'peering_service_list')
        g.custom_show_command('show', 'peering_service_show')
        g.custom_command('create', 'peering_service_create')
        g.custom_command('update', 'peering_service_update')
        g.custom_command('delete', 'peering_service_delete')
