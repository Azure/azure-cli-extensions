# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_peering.action import (
    AddPeerContactDetail,
    AddPeeringsSku,
    AddPeeringservicesSku
)


def load_arguments(self, _):

    with self.argument_context('peering legacy list') as c:
        c.argument('peering_location', help='The location of the peering.')
        c.argument('kind', arg_type=get_enum_type(['Direct', 'Exchange']), help='The kind of the peering.')
        c.argument('asn', help='The ASN number associated with a legacy peering.')

    with self.argument_context('peering asn list') as c:
        pass

    with self.argument_context('peering asn show') as c:
        c.argument('peer_asn_name', help='The peer ASN name.')

    with self.argument_context('peering asn create') as c:
        c.argument('peer_asn_name', help='The peer ASN name.')
        c.argument('peer_asn', help='The Autonomous System Number (ASN) of the peer.')
        c.argument('peer_contact_detail', action=AddPeerContactDetail, nargs='+', help='The contact details of the peer'
                   '. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: role, email, phone.')
        c.argument('peer_name', help='The name of the peer.')
        c.argument('validation_state', arg_type=get_enum_type(['None', 'Pending', 'Approved', 'Failed']), help='The val'
                   'idation state of the ASN associated with the peer.')

    with self.argument_context('peering asn update') as c:
        c.argument('peer_asn_name', help='The peer ASN name.')
        c.argument('peer_asn', help='The Autonomous System Number (ASN) of the peer.')
        c.argument('peer_contact_detail', action=AddPeerContactDetail, nargs='+', help='The contact details of the peer'
                   '. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: role, email, phone.')
        c.argument('peer_name', help='The name of the peer.')
        c.argument('validation_state', arg_type=get_enum_type(['None', 'Pending', 'Approved', 'Failed']), help='The val'
                   'idation state of the ASN associated with the peer.')

    with self.argument_context('peering asn delete') as c:
        c.argument('peer_asn_name', help='The peer ASN name.')

    with self.argument_context('peering location list') as c:
        c.argument('kind', arg_type=get_enum_type(['Direct', 'Exchange']), help='The kind of the peering.')
        c.argument('direct_peering_type', arg_type=get_enum_type(['Edge', 'Transit', 'Cdn', 'Internal', 'Ix', 'IxRs']),
                   help='The type of direct peering.')

    with self.argument_context('peering registered-asn list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')

    with self.argument_context('peering registered-asn show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_asn_name', help='The name of the registered ASN.')

    with self.argument_context('peering registered-asn create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_asn_name', help='The name of the ASN.')
        c.argument('asn', help='The customer\'s ASN from which traffic originates.')

    with self.argument_context('peering registered-asn update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_asn_name', help='The name of the ASN.')
        c.argument('asn', help='The customer\'s ASN from which traffic originates.')

    with self.argument_context('peering registered-asn delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_asn_name', help='The name of the registered ASN.')

    with self.argument_context('peering registered-prefix list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')

    with self.argument_context('peering registered-prefix show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_prefix_name', help='The name of the registered prefix.')

    with self.argument_context('peering registered-prefix create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_prefix_name', help='The name of the registered prefix.')
        c.argument('prefix', help='The customer\'s prefix from which traffic originates.')

    with self.argument_context('peering registered-prefix update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_prefix_name', help='The name of the registered prefix.')
        c.argument('prefix', help='The customer\'s prefix from which traffic originates.')

    with self.argument_context('peering registered-prefix delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('registered_prefix_name', help='The name of the registered prefix.')

    with self.argument_context('peering peering list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('peering peering show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')

    with self.argument_context('peering peering create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('sku', action=AddPeeringsSku, nargs='+', help='The SKU that defines the tier and kind of the peering'
                   '. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: name, tier, family, size.')
        c.argument('kind', arg_type=get_enum_type(['Direct', 'Exchange']), help='The kind of the peering.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('direct', arg_type=CLIArgumentType(options_list=['--direct'], help='The properties that define a '
                                                                                      'direct peering. Expected '
                                                                                      'value: '
                                                                                      'json-string/@json-file.'))
        c.argument('exchange', arg_type=CLIArgumentType(options_list=['--exchange'], help='The properties that define '
                                                                                          'an exchange peering. '
                                                                                          'Expected value: '
                                                                                          'json-string/@json-file.'))
        c.argument('peering_location', help='The location of the peering.')

    with self.argument_context('peering peering update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('tags', tags_type)

    with self.argument_context('peering peering delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')

    with self.argument_context('peering received-route list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_name', help='The name of the peering.')
        c.argument('prefix', help='The optional prefix that can be used to filter the routes.')
        c.argument('as_path', help='The optional AS path that can be used to filter the routes.')
        c.argument('origin_as_validation_state', help='The optional origin AS validation state that can be used to filt'
                   'er the routes.')
        c.argument('rpki_validation_state', help='The optional RPKI validation state that can be used to filter the rou'
                   'tes.')
        c.argument('skip_token', help='The optional page continuation token that is used in the event of paginated resu'
                   'lt.')

    with self.argument_context('peering service country list') as c:
        pass

    with self.argument_context('peering service location list') as c:
        c.argument('country', help='The country of interest, in which the locations are to be present.')

    with self.argument_context('peering service prefix list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('expand', help='The properties to be expanded.')

    with self.argument_context('peering service prefix show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('prefix_name', help='The name of the prefix.')
        c.argument('expand', help='The properties to be expanded.')

    with self.argument_context('peering service prefix create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('prefix_name', help='The name of the prefix.')
        c.argument('prefix', help='The prefix from which your traffic originates.')
        c.argument('peering_service_prefix_key', help='The peering service prefix key')

    with self.argument_context('peering service prefix update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('prefix_name', help='The name of the prefix.')
        c.argument('prefix', help='The prefix from which your traffic originates.')
        c.argument('peering_service_prefix_key', help='The peering service prefix key')

    with self.argument_context('peering service prefix delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('prefix_name', help='The name of the prefix.')

    with self.argument_context('peering service provider list') as c:
        pass

    with self.argument_context('peering service list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('peering service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering.')

    with self.argument_context('peering service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('sku', action=AddPeeringservicesSku, nargs='+', help='The SKU that defines the type of the peering s'
                   'ervice. Expect value: name=xx.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('peering_service_location', help='The PeeringServiceLocation of the Customer.')
        c.argument('peering_service_provider', help='The MAPS Provider Name.')

    with self.argument_context('peering service update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
        c.argument('tags', tags_type)

    with self.argument_context('peering service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('peering_service_name', help='The name of the peering service.')
