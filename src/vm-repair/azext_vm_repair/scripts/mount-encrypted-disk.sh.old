#!/bin/bash
duplication_validation ()
{
#/boot/efi duplication validation
efi_cnt=`lsblk | grep -i "/boot/efi" | wc -l`
if [ "${efi_cnt}" -eq 2 ]
then
        umount /boot/efi
fi
}

create_mountpoints ()
{
mkdir /{investigateboot,investigateroot}
}

get_boot_root_info ()
{
#Getting boot and root partition info
export mounted_disks=`df -Ph |grep ^/ | awk '{print $1}'`
}

rename_local_lvm ()
{
echo "Renaming Local VG"
vgrename -y ${local_vg_list} rescuevg
}

check_local_lvm ()
{
export local_vg_list=`vgs --noheadings -o vg_name| tr -d '   '`
local_vg_number=`vgs --noheadings -o vg_name | wc -l`
if [ ${local_vg_number} -eq 1 ]
	then
		echo "1 VG found, renaming it"
		rename_local_lvm
	else 
		echo "VGs found different than 1, we found ${local_vg_number}"
fi
}

data_os_lvm_check ()
{
export lvm_part=`fdisk -l | egrep -iv "${mounted_disks}" | grep -i lvm | awk '{print $1}'`
echo ${lvm_part}
if [ -z ${lvm_part} ]
then
export root_part=`fdisk -l | egrep -iv "${mounted_disks}" | grep ^/ |awk '$4 > 60000000{print $1}'`
else
export root_part=${lvm_part}
fi
}

locate_mount_data_boot ()
{
#for i in `fdisk -l \`ls -l /dev/disk/azure/scsi1/lun0 | awk -F/ '{print "/dev/"$9}'\`| grep ^/  | awk '{print $1}'` ; do echo "mkdir -p /tmp$i ; mount $i /tmp$i" ; done | bash
#get partitions on the data disk
export data_parts=`fdisk -l \`ls -l /dev/disk/azure/scsi1/lun0 | awk -F/ '{print "/dev/"$9}'\`| grep ^/  | awk '{print $1}'`

#create mountpoints for all the data parts
for i in ${data_parts} ; do mkdir /tmp${i}; done

#mount all partitions
for i in ${data_parts} ; do mount ${i} /tmp${i}; done

export luksheaderpath=`find /tmp -name osluksheader` 
export boot_part=`df -h $luksheaderpath | grep ^/ |awk '{print $1}'`
}



mount_lvm ()
{
${mount_cmd} /dev/rootvg/rootlv /investigateroot
${mount_cmd} /dev/rootvg/varlv /investigateroot/var/
${mount_cmd} /dev/rootvg/homelv /investigateroot/home
${mount_cmd} /dev/rootvg/optlv /investigateroot/opt
${mount_cmd} /dev/rootvg/usrlv /investigateroot/usr
${mount_cmd} /dev/rootvg/tmplv /investigateroot/tmp
}

mount_cmd ()
{
export mount_cmd=`mount -o nouuid 2> /dev/null`
if [ $? -gt 0 ]
then
        export mount_cmd="mount"
else
        export mount_cmd="mount -o nouuid"
fi
}

unlock_root ()
{
cryptsetup luksOpen --key-file /mnt/azure_bek_disk/LinuxPassPhraseFileName_1_0 --header /investigateboot/luks/osluksheader ${root_part} osencrypt
}

mount_encrypted ()
{
if [ -z ${lvm_part} ]
then

${mount_cmd} /dev/mapper/osencrypt /investigateroot
else
        sleep 5
        mount_lvm
fi
}

remount_boot ()
{
umount -l ${boot_part}
${mount_cmd} ${boot_part} /investigateroot/boot
}

duplication_validation
create_mountpoints
get_boot_root_info
check_local_lvm
data_os_lvm_check
mount_cmd
locate_mount_data_boot
unlock_root
mount_encrypted
remount_boot
