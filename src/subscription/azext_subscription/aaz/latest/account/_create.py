# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "account create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a subscription.
    """

    _aaz_info = {
        "version": "2018-03-01-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.billing/enrollmentaccounts/{}/providers/microsoft.subscription/createsubscription", "2018-03-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.enrollment_account_object_id = AAZStrArg(
            options=["--enrollment-account-name", "--enrollment-account-object-id"],
            help="The name of the enrollment account to which the subscription will be billed.",
            required=True,
        )
        _args_schema.additional_parameters = AAZDictArg(
            options=["--additional-parameters"],
            help="Additional, untyped parameters to support custom subscription creation scenarios.",
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            help="The display name of the subscription.",
        )
        _args_schema.offer_type = AAZStrArg(
            options=["--offer-type"],
            help="The offer type of the subscription. For example, MS-AZR-0017P(EnterpriseAgreement) and MS-AZR-0148P(EnterpriseAgreement devTest) are available. Allowed values: MS-AZR-0017P, MS-AZR-0148P, MS-AZR-USGOV-0015P, MS-AZR-USGOV-0017P, MS-AZR-USGOV-0148P.",
            enum={"MS-AZR-0017P": "MS-AZR-0017P", "MS-AZR-0148P": "MS-AZR-0148P", "MS-AZR-USGOV-0015P": "MS-AZR-USGOV-0015P", "MS-AZR-USGOV-0017P": "MS-AZR-USGOV-0017P", "MS-AZR-USGOV-0148P": "MS-AZR-USGOV-0148P"},
        )
        _args_schema.owners = AAZListArg(
            options=["--owners"],
            help="The list of principals that should be granted Owner access on the subscription. Principals should be of type User, Service Principal or Security Group.",
        )

        additional_parameters = cls._args_schema.additional_parameters
        additional_parameters.Element = AAZFreeFormDictArg()

        owners = cls._args_schema.owners
        owners.Element = AAZObjectArg()

        _element = cls._args_schema.owners.Element
        _element.object_id = AAZStrArg(
            options=["object-id"],
            help="Object id of the Principal",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SubscriptionFactoryCreateSubscriptionInEnrollmentAccount(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SubscriptionFactoryCreateSubscriptionInEnrollmentAccount(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Billing/enrollmentAccounts/{enrollmentAccountName}/providers/Microsoft.Subscription/createSubscription",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "enrollmentAccountName", self.ctx.args.enrollment_account_object_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("additionalParameters", AAZDictType, ".additional_parameters")
            _builder.set_prop("displayName", AAZStrType, ".display_name")
            _builder.set_prop("offerType", AAZStrType, ".offer_type")
            _builder.set_prop("owners", AAZListType, ".owners")

            additional_parameters = _builder.get(".additionalParameters")
            if additional_parameters is not None:
                additional_parameters.set_elements(AAZFreeFormDictType, ".")

            _elements = _builder.get(".additionalParameters{}")
            if _elements is not None:
                _elements.set_anytype_elements(".")

            owners = _builder.get(".owners")
            if owners is not None:
                owners.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".owners[]")
            if _elements is not None:
                _elements.set_prop("objectId", AAZStrType, ".object_id", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.subscription_link = AAZStrType(
                serialized_name="subscriptionLink",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
