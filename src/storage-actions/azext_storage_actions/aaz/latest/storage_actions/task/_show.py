# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "storage-actions task show",
    is_preview=True,
)
class Show(AAZCommand):
    """Get the storage task properties

    :example: storage-actions task show
        az storage-actions task show -g rgteststorageactions -n testtask1
    """

    _aaz_info = {
        "version": "2023-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}", "2023-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_task_name = AAZStrArg(
            options=["-n", "--name", "--storage-task-name"],
            help="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]{3,18}$",
                max_length=18,
                min_length=3,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.StorageTasksGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StorageTasksGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageTaskName", self.ctx.args.storage_task_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.identity = AAZObjectType(
                flags={"required": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.action = AAZObjectType(
                flags={"required": True},
            )
            properties.creation_time_in_utc = AAZStrType(
                serialized_name="creationTimeInUtc",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.enabled = AAZBoolType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.task_version = AAZIntType(
                serialized_name="taskVersion",
                flags={"read_only": True},
            )

            action = cls._schema_on_200.properties.action
            action["else"] = AAZObjectType()
            action["if"] = AAZObjectType(
                flags={"required": True},
            )

            else_ = cls._schema_on_200.properties.action["else"]
            else_.operations = AAZListType(
                flags={"required": True},
            )

            operations = cls._schema_on_200.properties.action["else"].operations
            operations.Element = AAZObjectType()
            _ShowHelper._build_schema_storage_task_operation_read(operations.Element)

            if_ = cls._schema_on_200.properties.action["if"]
            if_.condition = AAZStrType(
                flags={"required": True},
            )
            if_.operations = AAZListType(
                flags={"required": True},
            )

            operations = cls._schema_on_200.properties.action["if"].operations
            operations.Element = AAZObjectType()
            _ShowHelper._build_schema_storage_task_operation_read(operations.Element)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_storage_task_operation_read = None

    @classmethod
    def _build_schema_storage_task_operation_read(cls, _schema):
        if cls._schema_storage_task_operation_read is not None:
            _schema.name = cls._schema_storage_task_operation_read.name
            _schema.on_failure = cls._schema_storage_task_operation_read.on_failure
            _schema.on_success = cls._schema_storage_task_operation_read.on_success
            _schema.parameters = cls._schema_storage_task_operation_read.parameters
            return

        cls._schema_storage_task_operation_read = _schema_storage_task_operation_read = AAZObjectType()

        storage_task_operation_read = _schema_storage_task_operation_read
        storage_task_operation_read.name = AAZStrType(
            flags={"required": True},
        )
        storage_task_operation_read.on_failure = AAZStrType(
            serialized_name="onFailure",
        )
        storage_task_operation_read.on_success = AAZStrType(
            serialized_name="onSuccess",
        )
        storage_task_operation_read.parameters = AAZDictType()

        parameters = _schema_storage_task_operation_read.parameters
        parameters.Element = AAZStrType()

        _schema.name = cls._schema_storage_task_operation_read.name
        _schema.on_failure = cls._schema_storage_task_operation_read.on_failure
        _schema.on_success = cls._schema_storage_task_operation_read.on_success
        _schema.parameters = cls._schema_storage_task_operation_read.parameters


__all__ = ["Show"]
