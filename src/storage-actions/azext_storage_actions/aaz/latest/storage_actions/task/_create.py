# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "storage-actions task create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a new storage task resource with the specified parameters. If a storage task is already created and a subsequent create request is issued with different properties, the storage task properties will be updated. If a storage task is already created and a subsequent create request is issued with the exact same set of properties, the request will succeed.

    :example: storage-actions task create
        az storage-actions task create -g rgteststorageactions -n testtask1 --identity "{type:SystemAssigned}" --tags "{key1:value1}" --action "{if:{condition:'[[equals(AccessTier,'/Cool'/)]]',operations:[{name:'SetBlobTier',parameters:{tier:'Hot'},onSuccess:'continue',onFailure:'break'}]},else:{operations:[{name:'DeleteBlob',onSuccess:'continue',onFailure:'break'}]}}" --description StorageTask1 --enabled true
    """

    _aaz_info = {
        "version": "2023-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storageactions/storagetasks/{}", "2023-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_task_name = AAZStrArg(
            options=["-n", "--name", "--storage-task-name"],
            help="The name of the storage task within the specified resource group. Storage task names must be between 3 and 18 characters in length and use numbers and lower-case letters only.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]{3,18}$",
                max_length=18,
                min_length=3,
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Parameters",
            help="The managed service identity of the resource.",
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            required=True,
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned,UserAssigned": "SystemAssigned,UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.action = AAZObjectArg(
            options=["--action"],
            arg_group="Properties",
            help="The storage task action that is executed",
            required=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Text that describes the purpose of the storage task",
            required=True,
        )
        _args_schema.enabled = AAZBoolArg(
            options=["--enabled"],
            arg_group="Properties",
            help="Storage Task is enabled when set to true and disabled when set to false",
            required=True,
        )

        action = cls._args_schema.action
        action.else_ = AAZObjectArg(
            options=["else"],
            help="The else block of storage task operation",
        )
        action.if_ = AAZObjectArg(
            options=["if"],
            help="The if block of storage task operation",
            required=True,
        )

        else_ = cls._args_schema.action.else_
        else_.operations = AAZListArg(
            options=["operations"],
            help="List of operations to execute in the else block",
            required=True,
        )

        operations = cls._args_schema.action.else_.operations
        operations.Element = AAZObjectArg()
        cls._build_args_storage_task_operation_create(operations.Element)

        if_ = cls._args_schema.action.if_
        if_.condition = AAZStrArg(
            options=["condition"],
            help="Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.",
            required=True,
        )
        if_.operations = AAZListArg(
            options=["operations"],
            help="List of operations to execute when the condition predicate satisfies.",
            required=True,
        )

        operations = cls._args_schema.action.if_.operations
        operations.Element = AAZObjectArg()
        cls._build_args_storage_task_operation_create(operations.Element)
        return cls._args_schema

    _args_storage_task_operation_create = None

    @classmethod
    def _build_args_storage_task_operation_create(cls, _schema):
        if cls._args_storage_task_operation_create is not None:
            _schema.name = cls._args_storage_task_operation_create.name
            _schema.on_failure = cls._args_storage_task_operation_create.on_failure
            _schema.on_success = cls._args_storage_task_operation_create.on_success
            _schema.parameters = cls._args_storage_task_operation_create.parameters
            return

        cls._args_storage_task_operation_create = AAZObjectArg()

        storage_task_operation_create = cls._args_storage_task_operation_create
        storage_task_operation_create.name = AAZStrArg(
            options=["name"],
            help="The operation to be performed on the object.",
            required=True,
            enum={"DeleteBlob": "DeleteBlob", "SetBlobExpiry": "SetBlobExpiry", "SetBlobImmutabilityPolicy": "SetBlobImmutabilityPolicy", "SetBlobLegalHold": "SetBlobLegalHold", "SetBlobTags": "SetBlobTags", "SetBlobTier": "SetBlobTier", "UndeleteBlob": "UndeleteBlob"},
        )
        storage_task_operation_create.on_failure = AAZStrArg(
            options=["on-failure"],
            help="Action to be taken when the operation fails for a object.",
            enum={"break": "break"},
        )
        storage_task_operation_create.on_success = AAZStrArg(
            options=["on-success"],
            help="Action to be taken when the operation is successful for a object.",
            enum={"continue": "continue"},
        )
        storage_task_operation_create.parameters = AAZDictArg(
            options=["parameters"],
            help="Key-value parameters for the operation.",
        )

        parameters = cls._args_storage_task_operation_create.parameters
        parameters.Element = AAZStrArg()

        _schema.name = cls._args_storage_task_operation_create.name
        _schema.on_failure = cls._args_storage_task_operation_create.on_failure
        _schema.on_success = cls._args_storage_task_operation_create.on_success
        _schema.parameters = cls._args_storage_task_operation_create.parameters

    def _execute_operations(self):
        self.pre_operations()
        yield self.StorageTasksCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StorageTasksCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageActions/storageTasks/{storageTaskName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageTaskName", self.ctx.args.storage_task_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".", typ_kwargs={"nullable": True})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("action", AAZObjectType, ".action", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("enabled", AAZBoolType, ".enabled", typ_kwargs={"flags": {"required": True}})

            action = _builder.get(".properties.action")
            if action is not None:
                action.set_prop("else", AAZObjectType, ".else_")
                action.set_prop("if", AAZObjectType, ".if_", typ_kwargs={"flags": {"required": True}})

            else_ = _builder.get(".properties.action.else")
            if else_ is not None:
                else_.set_prop("operations", AAZListType, ".operations", typ_kwargs={"flags": {"required": True}})

            operations = _builder.get(".properties.action.else.operations")
            if operations is not None:
                _CreateHelper._build_schema_storage_task_operation_create(operations.set_elements(AAZObjectType, "."))

            if_ = _builder.get(".properties.action.if")
            if if_ is not None:
                if_.set_prop("condition", AAZStrType, ".condition", typ_kwargs={"flags": {"required": True}})
                if_.set_prop("operations", AAZListType, ".operations", typ_kwargs={"flags": {"required": True}})

            operations = _builder.get(".properties.action.if.operations")
            if operations is not None:
                _CreateHelper._build_schema_storage_task_operation_create(operations.set_elements(AAZObjectType, "."))

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType(
                flags={"required": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.action = AAZObjectType(
                flags={"required": True},
            )
            properties.creation_time_in_utc = AAZStrType(
                serialized_name="creationTimeInUtc",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"required": True},
            )
            properties.enabled = AAZBoolType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.task_version = AAZIntType(
                serialized_name="taskVersion",
                flags={"read_only": True},
            )

            action = cls._schema_on_200_201.properties.action
            action["else"] = AAZObjectType()
            action["if"] = AAZObjectType(
                flags={"required": True},
            )

            else_ = cls._schema_on_200_201.properties.action["else"]
            else_.operations = AAZListType(
                flags={"required": True},
            )

            operations = cls._schema_on_200_201.properties.action["else"].operations
            operations.Element = AAZObjectType()
            _CreateHelper._build_schema_storage_task_operation_read(operations.Element)

            if_ = cls._schema_on_200_201.properties.action["if"]
            if_.condition = AAZStrType(
                flags={"required": True},
            )
            if_.operations = AAZListType(
                flags={"required": True},
            )

            operations = cls._schema_on_200_201.properties.action["if"].operations
            operations.Element = AAZObjectType()
            _CreateHelper._build_schema_storage_task_operation_read(operations.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_storage_task_operation_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("onFailure", AAZStrType, ".on_failure")
        _builder.set_prop("onSuccess", AAZStrType, ".on_success")
        _builder.set_prop("parameters", AAZDictType, ".parameters")

        parameters = _builder.get(".parameters")
        if parameters is not None:
            parameters.set_elements(AAZStrType, ".")

    _schema_storage_task_operation_read = None

    @classmethod
    def _build_schema_storage_task_operation_read(cls, _schema):
        if cls._schema_storage_task_operation_read is not None:
            _schema.name = cls._schema_storage_task_operation_read.name
            _schema.on_failure = cls._schema_storage_task_operation_read.on_failure
            _schema.on_success = cls._schema_storage_task_operation_read.on_success
            _schema.parameters = cls._schema_storage_task_operation_read.parameters
            return

        cls._schema_storage_task_operation_read = _schema_storage_task_operation_read = AAZObjectType()

        storage_task_operation_read = _schema_storage_task_operation_read
        storage_task_operation_read.name = AAZStrType(
            flags={"required": True},
        )
        storage_task_operation_read.on_failure = AAZStrType(
            serialized_name="onFailure",
        )
        storage_task_operation_read.on_success = AAZStrType(
            serialized_name="onSuccess",
        )
        storage_task_operation_read.parameters = AAZDictType()

        parameters = _schema_storage_task_operation_read.parameters
        parameters.Element = AAZStrType()

        _schema.name = cls._schema_storage_task_operation_read.name
        _schema.on_failure = cls._schema_storage_task_operation_read.on_failure
        _schema.on_success = cls._schema_storage_task_operation_read.on_success
        _schema.parameters = cls._schema_storage_task_operation_read.parameters


__all__ = ["Create"]
