# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "storage-actions task preview-action",
    is_preview=True,
)
class PreviewAction(AAZCommand):
    """Runs the input conditions against input object metadata properties and designates matched objects in response.

    :example: storage-actions task preview-action
        az storage-actions task preview-action -l eastus2euap --action "{if:{condition:'[[equals(AccessTier,'/Cool'/)]]'},else-block-exists:True}" --blobs "[{name:'folder2/file1.txt',properties:[{key:'Creation-Time',value:'Wed, 06 Jun 2023 05:23:29 GMT'},{key:'Last-Modified',value:'Wed, 06 Jun 2023 05:23:29 GMT'},{key:'Etag',value:'0x6FB67175454D36D'}],metadata:[{key:'mKey2',value:'mValue2'}],tags:[{key:'tKey2',value:'tValue2'}]}]" --container "{name:'firstContainer',metadata:[{key:'mContainerKey1',value:'mContainerValue1'}]}"
    """

    _aaz_info = {
        "version": "2023-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.storageactions/locations/{}/previewactions", "2023-01-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.action = AAZObjectArg(
            options=["--action"],
            arg_group="Properties",
            help="Preview action container properties to be tested for a match with the provided condition.",
            required=True,
        )
        _args_schema.blobs = AAZListArg(
            options=["--blobs"],
            arg_group="Properties",
            help="Preview action container properties to be tested for a match with the provided condition.",
            required=True,
        )
        _args_schema.container = AAZObjectArg(
            options=["--container"],
            arg_group="Properties",
            help="Preview action container properties to be tested for a match with the provided condition.",
            required=True,
        )

        action = cls._args_schema.action
        action.else_block_exists = AAZBoolArg(
            options=["else-block-exists"],
            help="Specify whether the else block is present in the condition.",
            required=True,
        )
        action.if_ = AAZObjectArg(
            options=["if"],
            help="The condition to be tested for a match with container and blob properties.",
            required=True,
        )

        if_ = cls._args_schema.action.if_
        if_.condition = AAZStrArg(
            options=["condition"],
            help="Storage task condition to be tested for a match.",
        )

        blobs = cls._args_schema.blobs
        blobs.Element = AAZObjectArg()

        _element = cls._args_schema.blobs.Element
        _element.metadata = AAZListArg(
            options=["metadata"],
            help="metadata key value pairs to be tested for a match against the provided condition.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="property for the container name.",
        )
        _element.properties = AAZListArg(
            options=["properties"],
            help="properties key value pairs to be tested for a match against the provided condition.",
        )
        _element.tags = AAZListArg(
            options=["tags"],
            help="tags key value pairs to be tested for a match against the provided condition.",
        )

        metadata = cls._args_schema.blobs.Element.metadata
        metadata.Element = AAZObjectArg()
        cls._build_args_storage_task_preview_key_value_properties_create(metadata.Element)

        properties = cls._args_schema.blobs.Element.properties
        properties.Element = AAZObjectArg()
        cls._build_args_storage_task_preview_key_value_properties_create(properties.Element)

        tags = cls._args_schema.blobs.Element.tags
        tags.Element = AAZObjectArg()
        cls._build_args_storage_task_preview_key_value_properties_create(tags.Element)

        container = cls._args_schema.container
        container.metadata = AAZListArg(
            options=["metadata"],
            help="metadata key value pairs to be tested for a match against the provided condition.",
        )
        container.name = AAZStrArg(
            options=["name"],
            help="property for the container name.",
        )

        metadata = cls._args_schema.container.metadata
        metadata.Element = AAZObjectArg()
        cls._build_args_storage_task_preview_key_value_properties_create(metadata.Element)
        return cls._args_schema

    _args_storage_task_preview_key_value_properties_create = None

    @classmethod
    def _build_args_storage_task_preview_key_value_properties_create(cls, _schema):
        if cls._args_storage_task_preview_key_value_properties_create is not None:
            _schema.key = cls._args_storage_task_preview_key_value_properties_create.key
            _schema.value = cls._args_storage_task_preview_key_value_properties_create.value
            return

        cls._args_storage_task_preview_key_value_properties_create = AAZObjectArg()

        storage_task_preview_key_value_properties_create = cls._args_storage_task_preview_key_value_properties_create
        storage_task_preview_key_value_properties_create.key = AAZStrArg(
            options=["key"],
            help="Represents the key property of the pair.",
        )
        storage_task_preview_key_value_properties_create.value = AAZStrArg(
            options=["value"],
            help="Represents the value property of the pair.",
        )

        _schema.key = cls._args_storage_task_preview_key_value_properties_create.key
        _schema.value = cls._args_storage_task_preview_key_value_properties_create.value

    def _execute_operations(self):
        self.pre_operations()
        self.StorageTasksPreviewActions(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StorageTasksPreviewActions(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.StorageActions/locations/{location}/previewActions",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "location", self.ctx.args.location,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("action", AAZObjectType, ".action", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("blobs", AAZListType, ".blobs", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("container", AAZObjectType, ".container", typ_kwargs={"flags": {"required": True}})

            action = _builder.get(".properties.action")
            if action is not None:
                action.set_prop("elseBlockExists", AAZBoolType, ".else_block_exists", typ_kwargs={"flags": {"required": True}})
                action.set_prop("if", AAZObjectType, ".if_", typ_kwargs={"flags": {"required": True}})

            if_ = _builder.get(".properties.action.if")
            if if_ is not None:
                if_.set_prop("condition", AAZStrType, ".condition")

            blobs = _builder.get(".properties.blobs")
            if blobs is not None:
                blobs.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.blobs[]")
            if _elements is not None:
                _elements.set_prop("metadata", AAZListType, ".metadata")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZListType, ".properties")
                _elements.set_prop("tags", AAZListType, ".tags")

            metadata = _builder.get(".properties.blobs[].metadata")
            if metadata is not None:
                _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_create(metadata.set_elements(AAZObjectType, "."))

            properties = _builder.get(".properties.blobs[].properties")
            if properties is not None:
                _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_create(properties.set_elements(AAZObjectType, "."))

            tags = _builder.get(".properties.blobs[].tags")
            if tags is not None:
                _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_create(tags.set_elements(AAZObjectType, "."))

            container = _builder.get(".properties.container")
            if container is not None:
                container.set_prop("metadata", AAZListType, ".metadata")
                container.set_prop("name", AAZStrType, ".name")

            metadata = _builder.get(".properties.container.metadata")
            if metadata is not None:
                _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_create(metadata.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )

            properties = cls._schema_on_200.properties
            properties.action = AAZObjectType(
                flags={"required": True},
            )
            properties.blobs = AAZListType(
                flags={"required": True},
            )
            properties.container = AAZObjectType(
                flags={"required": True},
            )

            action = cls._schema_on_200.properties.action
            action.else_block_exists = AAZBoolType(
                serialized_name="elseBlockExists",
                flags={"required": True},
            )
            action["if"] = AAZObjectType(
                flags={"required": True},
            )

            if_ = cls._schema_on_200.properties.action["if"]
            if_.condition = AAZStrType()

            blobs = cls._schema_on_200.properties.blobs
            blobs.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.blobs.Element
            _element.matched_block = AAZStrType(
                serialized_name="matchedBlock",
                flags={"read_only": True},
            )
            _element.metadata = AAZListType()
            _element.name = AAZStrType()
            _element.properties = AAZListType()
            _element.tags = AAZListType()

            metadata = cls._schema_on_200.properties.blobs.Element.metadata
            metadata.Element = AAZObjectType()
            _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_read(metadata.Element)

            properties = cls._schema_on_200.properties.blobs.Element.properties
            properties.Element = AAZObjectType()
            _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_read(properties.Element)

            tags = cls._schema_on_200.properties.blobs.Element.tags
            tags.Element = AAZObjectType()
            _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_read(tags.Element)

            container = cls._schema_on_200.properties.container
            container.metadata = AAZListType()
            container.name = AAZStrType()

            metadata = cls._schema_on_200.properties.container.metadata
            metadata.Element = AAZObjectType()
            _PreviewActionHelper._build_schema_storage_task_preview_key_value_properties_read(metadata.Element)

            return cls._schema_on_200


class _PreviewActionHelper:
    """Helper class for PreviewAction"""

    @classmethod
    def _build_schema_storage_task_preview_key_value_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("key", AAZStrType, ".key")
        _builder.set_prop("value", AAZStrType, ".value")

    _schema_storage_task_preview_key_value_properties_read = None

    @classmethod
    def _build_schema_storage_task_preview_key_value_properties_read(cls, _schema):
        if cls._schema_storage_task_preview_key_value_properties_read is not None:
            _schema.key = cls._schema_storage_task_preview_key_value_properties_read.key
            _schema.value = cls._schema_storage_task_preview_key_value_properties_read.value
            return

        cls._schema_storage_task_preview_key_value_properties_read = _schema_storage_task_preview_key_value_properties_read = AAZObjectType()

        storage_task_preview_key_value_properties_read = _schema_storage_task_preview_key_value_properties_read
        storage_task_preview_key_value_properties_read.key = AAZStrType()
        storage_task_preview_key_value_properties_read.value = AAZStrType()

        _schema.key = cls._schema_storage_task_preview_key_value_properties_read.key
        _schema.value = cls._schema_storage_task_preview_key_value_properties_read.value


__all__ = ["PreviewAction"]
