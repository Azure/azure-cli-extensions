# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *


class StorageActionsScenario(ScenarioTest):
    @ResourceGroupPreparer(location='eastus2euap')
    def test_storage_actions_task_scenarios(self):
        self.kwargs.update({
            "task_name": self.create_random_name('satasks', 18)

        })
        self.cmd("az storage-actions task create -g {rg} -n {task_name} --identity {{type:SystemAssigned}} "
                 "--tags {{key1:value1}} --action {{if:{{condition:'[[equals(AccessTier,'/Cool'/)]]',"
                 "operations:[{{name:'SetBlobTier',parameters:{{tier:'Hot'}},"
                 "onSuccess:'continue',onFailure:'break'}}]}},"
                 "else:{{operations:[{{name:'DeleteBlob',onSuccess:'continue',onFailure:'break'}}]}}}} "
                 "--description StorageTask1 --enabled true")
        # self.cmd('az storage-mover show -g {rg} -n {mover_name}',
        #          checks=[JMESPathCheck('name', self.kwargs.get('mover_name', '')),
        #                  JMESPathCheck('location', "eastus2euap"),
        #                  JMESPathCheck('tags', {"key1": "value1"}),
        #                  JMESPathCheck('description', "ExampleDesc")])
        # self.cmd('az storage-mover list -g {rg}', checks=[JMESPathCheck('length(@)', 1)])
        # self.cmd('az storage-mover update -g {rg} -n {mover_name} '
        #          '--tags {{key2:value2}} --description ExampleDesc2',
        #          checks=[JMESPathCheck('tags', {"key2": "value2"}),
        #                  JMESPathCheck('description', "ExampleDesc2")])
        # self.cmd('az storage-mover delete -g {rg} -n {mover_name} -y')
        self.cmd('az storage-actions task list -g {rg}', checks=[JMESPathCheck('length(@)', 1)])
