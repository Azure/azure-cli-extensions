# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /TestBaseAccounts/put/TestBaseAccountCreate
@try_manual
def step_account_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account create '
             '--location "westus" '
             '--sku-name "S0" '
             '--resource-group "{rg}" '
             '--name "{myTestBaseAccount}"',
             checks=[])
    test.cmd('az testbase account wait --created '
             '--resource-group "{rg}" '
             '--name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/get/TestBaseAccountGet
@try_manual
def step_account_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account show '
             '--resource-group "{rg}" '
             '--name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/get/TestBaseAccountsList
@try_manual
def step_account_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/get/TestBaseAccountsListBySubscription
@try_manual
def step_account_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account list '
             '-g ""',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/patch/TestBaseAccountUpdate
@try_manual
def step_account_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account update '
             '--name "S0" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/post/CheckPackageNameAvailability
@try_manual
def step_account_check_package_name(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account check-package-name '
             '--name "testApp" '
             '--type "Microsoft.TestBase/testBaseAccounts/packages" '
             '--application-name "testApp" '
             '--version "1.0.0" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/post/TestBaseAccountGetFileUploadUrl
@try_manual
def step_account_get_package_blob_path(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account get-package-blob-path '
             '--file-name "package.zip" '
             '--resource-group "{rg}" '
             '--name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /TestBaseAccounts/post/TestBaseAccountOffboard
@try_manual
def step_account_soft_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase account soft-delete '
             '--resource-group "{rg}" '
             '--name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /CustomerEvents/put/CustomerEventCreate
@try_manual
def step_customer_event_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase customer-event create '
             '--name "{myCustomerEvent}" '
             '--event-name "{myCustomerEvent}" '
             '--receivers "[{{\\"receiverType\\":\\"UserObjects\\",\\"receiverValue\\":{{\\"userObjectReceiverValue\\":'
             '{{\\"userObjectIds\\":[\\"245245245245325\\",\\"365365365363565\\"]}}}}}},{{\\"receiverType\\":\\"Distrib'
             'utionGroup\\",\\"receiverValue\\":{{\\"distributionGroupListReceiverValue\\":{{\\"distributionGroups\\":['
             '\\"test@microsoft.com\\"]}}}}}}]" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /CustomerEvents/get/CustomerEventGet
@try_manual
def step_customer_event_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase customer-event show '
             '--name "{myCustomerEvent}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /CustomerEvents/get/CustomerEventsList
@try_manual
def step_customer_event_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase customer-event list '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /CustomerEvents/delete/CustomerEventDelete
@try_manual
def step_customer_event_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase customer-event delete -y '
             '--name "{myCustomerEvent}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /EmailEvents/get/EmailEventGet
@try_manual
def step_email_event_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase email-event show '
             '--email-event-resource-name "weekly-summary" '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /EmailEvents/get/EmailEventsList
@try_manual
def step_email_event_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase email-event list '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /Packages/put/PackageCreate
@try_manual
def step_package_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package create '
             '--name "{myPackage}" '
             '--location "westus" '
             '--application-name "{myPackage}" '
             '--blob-path "storageAccountPath/package.zip" '
             '--flighting-ring "Insider Beta Channel" '
             '--target-os-list os-update-type="Security updates" target-o-ss="Windows 10 2004" target-o-ss="Windows 10 '
             '1903" '
             '--tests "[{{\\"isActive\\":true,\\"testType\\":\\"OutOfBoxTest\\",\\"commands\\":[{{\\"name\\":\\"Install'
             '\\",\\"action\\":\\"Install\\",\\"alwaysRun\\":true,\\"applyUpdateBefore\\":false,\\"content\\":\\"app/sc'
             'ripts/install/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":true,\\"ru'
             'nAsInteractive\\":true,\\"runElevated\\":true}},{{\\"name\\":\\"Launch\\",\\"action\\":\\"Launch\\",\\"al'
             'waysRun\\":false,\\"applyUpdateBefore\\":true,\\"content\\":\\"app/scripts/launch/job.ps1\\",\\"contentTy'
             'pe\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":false,\\"runAsInteractive\\":true,\\"runElevate'
             'd\\":true}},{{\\"name\\":\\"Close\\",\\"action\\":\\"Close\\",\\"alwaysRun\\":false,\\"applyUpdateBefore'
             '\\":false,\\"content\\":\\"app/scripts/close/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":180'
             '0,\\"restartAfter\\":false,\\"runAsInteractive\\":true,\\"runElevated\\":true}},{{\\"name\\":\\"Uninstall'
             '\\",\\"action\\":\\"Uninstall\\",\\"alwaysRun\\":true,\\"applyUpdateBefore\\":false,\\"content\\":\\"app/'
             'scripts/uninstall/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":false,'
             '\\"runAsInteractive\\":true,\\"runElevated\\":true}}]}}]" '
             '--version "1.0.0" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=[])
    test.cmd('az testbase package wait --created '
             '--name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/get/PackageGet
@try_manual
def step_package_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package show '
             '--name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/get/PackagesList
@try_manual
def step_package_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package list '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/patch/PackageUpdate
@try_manual
def step_package_update(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package update '
             '--name "{myPackage}" '
             '--blob-path "storageAccountPath/package.zip" '
             '--flighting-ring "Insider Beta Channel" '
             '--is-enabled false '
             '--target-os-list os-update-type="Security updates" target-o-ss="Windows 10 2004" target-o-ss="Windows 10 '
             '1903" '
             '--tests "[{{\\"isActive\\":true,\\"testType\\":\\"OutOfBoxTest\\",\\"commands\\":[{{\\"name\\":\\"Install'
             '\\",\\"action\\":\\"Install\\",\\"alwaysRun\\":true,\\"applyUpdateBefore\\":false,\\"content\\":\\"app/sc'
             'ripts/install/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":true,\\"ru'
             'nAsInteractive\\":true,\\"runElevated\\":true}},{{\\"name\\":\\"Launch\\",\\"action\\":\\"Launch\\",\\"al'
             'waysRun\\":false,\\"applyUpdateBefore\\":true,\\"content\\":\\"app/scripts/launch/job.ps1\\",\\"contentTy'
             'pe\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":false,\\"runAsInteractive\\":true,\\"runElevate'
             'd\\":true}},{{\\"name\\":\\"Close\\",\\"action\\":\\"Close\\",\\"alwaysRun\\":false,\\"applyUpdateBefore'
             '\\":false,\\"content\\":\\"app/scripts/close/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":180'
             '0,\\"restartAfter\\":false,\\"runAsInteractive\\":true,\\"runElevated\\":true}},{{\\"name\\":\\"Uninstall'
             '\\",\\"action\\":\\"Uninstall\\",\\"alwaysRun\\":true,\\"applyUpdateBefore\\":false,\\"content\\":\\"app/'
             'scripts/uninstall/job.ps1\\",\\"contentType\\":\\"Path\\",\\"maxRunTime\\":1800,\\"restartAfter\\":false,'
             '\\"runAsInteractive\\":true,\\"runElevated\\":true}}]}}]" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/post/PackageGetDownloadURL
@try_manual
def step_package_get_download_url(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package get-download-url '
             '--name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/post/PackageHardDelete
@try_manual
def step_package_hard_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package hard-delete '
             '--name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/CPURegressionAnalysisResultGet
@try_manual
def step_analysis_result_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result show '
             '--name "{myAnalysisResult}" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/CPURegressionAnalysisResultsList
@try_manual
def step_analysis_result_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result list '
             '--analysis-result-type "CPURegression" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/CPUUtilizationAnalysisResultGet
@try_manual
def step_analysis_result_show2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result show '
             '--name "{myAnalysisResult2}" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/CPUUtilizationAnalysisResultsList
@try_manual
def step_analysis_result_list2(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result list '
             '--analysis-result-type "CPUUtilization" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/MemoryRegressionAnalysisResultGet
@try_manual
def step_analysis_result_show3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result show '
             '--name "{myAnalysisResult3}" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/MemoryRegressionAnalysisResultsList
@try_manual
def step_analysis_result_list3(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result list '
             '--analysis-result-type "MemoryRegression" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/MemoryUtilizationAnalysisResultGet
@try_manual
def step_analysis_result_show4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result show '
             '--name "{myAnalysisResult4}" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AnalysisResults/get/MemoryUtilizationAnalysisResultsList
@try_manual
def step_analysis_result_list4(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase analysis-result list '
             '--analysis-result-type "MemoryUtilization" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--test-result-name "{myTestResult2}"',
             checks=checks)


# EXAMPLE: /AvailableOS/get/AvailableOSGet
@try_manual
def step_available_os_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase available-os show '
             '--available-os-resource-name "Windows-10-2004" '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /AvailableOS/get/AvailableOSsList
@try_manual
def step_available_os_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase available-os list '
             '--os-update-type "SecurityUpdate" '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /FavoriteProcesses/put/FavoriteProcessCreate
@try_manual
def step_favorite_process_create(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase favorite-process create '
             '--name "testAppProcess" '
             '--package-name "{myPackage}" '
             '--actual-process-name "testApp&.exe" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /FavoriteProcesses/get/FavoriteProcessesList
@try_manual
def step_favorite_process_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase favorite-process list '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /FavoriteProcesses/get/FavoriteProcessGet
@try_manual
def step_favorite_process_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase favorite-process show '
             '--name "testAppProcess" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /FavoriteProcesses/delete/FavoriteProcessDelete
@try_manual
def step_favorite_process_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase favorite-process delete -y '
             '--name "testAppProcess" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /FlightingRings/get/FlightingRingGet
@try_manual
def step_flighting_ring_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase flighting-ring show '
             '--flighting-ring-resource-name "Insider-Beta-Channel" '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /FlightingRings/get/FlightingRingsList
@try_manual
def step_flighting_ring_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase flighting-ring list '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /OSUpdates/get/OSUpdateGet
@try_manual
def step_os_update_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase os-update show '
             '--os-update-resource-name "Windows-10-2004-2020-12-B-505" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /OSUpdates/get/OSUpdatesList
@try_manual
def step_os_update_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase os-update list '
             '--os-update-type "SecurityUpdate" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Packages/delete/PackageDelete
@try_manual
def step_package_delete(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase package delete -y '
             '--name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /Skus/get/TestBaseAccountSKUsList
@try_manual
def step_sku_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase sku list',
             checks=checks)


# EXAMPLE: /TestResults/get/TestResultGet
@try_manual
def step_test_result_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-result show '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--name "{myTestResult}"',
             checks=checks)


# EXAMPLE: /TestResults/get/TestResultsList
@try_manual
def step_test_result_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-result list '
             '--filter "osName eq \'Windows 10 2004\' and releaseName eq \'2020.11B\'" '
             '--os-update-type "SecurityUpdate" '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /TestResults/post/TestResultGetDownloadURL
@try_manual
def step_test_result_get_download_url(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-result get-download-url '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--name "{myTestResult}"',
             checks=checks)


# EXAMPLE: /TestResults/post/TestResultGetVideoDownloadURL
@try_manual
def step_test_result_get_video_download_url(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-result get-video-download-url '
             '--package-name "{myPackage}" '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--name "{myTestResult}"',
             checks=checks)


# EXAMPLE: /TestSummaries/get/TestSummariesList
@try_manual
def step_test_summary_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-summary list '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)


# EXAMPLE: /TestSummaries/get/TestSummaryGet
@try_manual
def step_test_summary_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-summary show '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}" '
             '--name "{myTestSummary}"',
             checks=checks)


# EXAMPLE: /TestTypes/get/TestTypeGet
@try_manual
def step_test_type_show(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-type show '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}" '
             '--test-type-resource-name "Functional-Test"',
             checks=checks)


# EXAMPLE: /TestTypes/get/TestTypesList
@try_manual
def step_test_type_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase test-type list '
             '--resource-group "{rg_2}" '
             '--account-name "{myTestBaseAccount2}"',
             checks=checks)


# EXAMPLE: /Usage/get/TestBaseAccountUsagesList
@try_manual
def step_usage_list(test, checks=None):
    if checks is None:
        checks = []
    test.cmd('az testbase usage list '
             '--resource-group "{rg}" '
             '--account-name "{myTestBaseAccount}"',
             checks=checks)
