# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_account_create
from .example_steps import step_account_show
from .example_steps import step_account_list
from .example_steps import step_account_list2
from .example_steps import step_account_update
from .example_steps import step_account_check_package_name
from .example_steps import step_account_get_package_blob_path
from .example_steps import step_account_delete
from .example_steps import step_customer_event_create
from .example_steps import step_customer_event_show
from .example_steps import step_customer_event_list
from .example_steps import step_customer_event_delete
from .example_steps import step_email_event_show
from .example_steps import step_email_event_list
from .example_steps import step_package_create
from .example_steps import step_package_show
from .example_steps import step_package_list
from .example_steps import step_package_update
from .example_steps import step_package_get_download_url
from .example_steps import step_package_hard_delete
from .example_steps import step_analysis_result_show
from .example_steps import step_analysis_result_list
from .example_steps import step_analysis_result_show2
from .example_steps import step_analysis_result_list2
from .example_steps import step_analysis_result_show3
from .example_steps import step_analysis_result_list3
from .example_steps import step_analysis_result_show4
from .example_steps import step_analysis_result_list4
from .example_steps import step_available_os_show
from .example_steps import step_available_os_list
from .example_steps import step_favorite_process_create
from .example_steps import step_favorite_process_list
from .example_steps import step_favorite_process_show
from .example_steps import step_favorite_process_delete
from .example_steps import step_flighting_ring_show
from .example_steps import step_flighting_ring_list
from .example_steps import step_os_update_show
from .example_steps import step_os_update_list
from .example_steps import step_package_delete
from .example_steps import step_sku_list
from .example_steps import step_test_result_show
from .example_steps import step_test_result_list
from .example_steps import step_test_result_get_download_url
from .example_steps import step_test_result_get_video_download_url
from .example_steps import step_test_summary_list
from .example_steps import step_test_summary_show
from .example_steps import step_test_type_show
from .example_steps import step_test_type_list
from .example_steps import step_usage_list
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_account_create(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "S0", case_sensitive=False),
        test.check("name", "{myTestBaseAccount}", case_sensitive=False),
    ])
    step_account_show(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "S0", case_sensitive=False),
        test.check("name", "{myTestBaseAccount}", case_sensitive=False),
    ])
    step_account_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_update(test, checks=[
        test.check("location", "westus", case_sensitive=False),
        test.check("sku.name", "S0", case_sensitive=False),
        test.check("name", "{myTestBaseAccount}", case_sensitive=False),
    ])
    step_account_check_package_name(test, checks=[])
    step_account_get_package_blob_path(test, checks=[])
    step_account_delete(test, checks=[])
    step_customer_event_create(test, checks=[
        test.check("name", "{myCustomerEvent}", case_sensitive=False),
        test.check("eventName", "{myCustomerEvent}", case_sensitive=False),
    ])
    step_customer_event_show(test, checks=[
        test.check("name", "{myCustomerEvent}", case_sensitive=False),
        test.check("eventName", "{myCustomerEvent}", case_sensitive=False),
    ])
    step_customer_event_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_customer_event_delete(test, checks=[])
    step_email_event_show(test, checks=[])
    step_email_event_list(test, checks=[])
    step_package_create(test, checks=[
        test.check("name", "{myPackage}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("applicationName", "{myPackage}", case_sensitive=False),
        test.check("blobPath", "storageAccountPath/package.zip", case_sensitive=False),
        test.check("flightingRing", "Insider Beta Channel", case_sensitive=False),
        test.check("version", "1.0.0", case_sensitive=False),
    ])
    step_package_show(test, checks=[
        test.check("name", "{myPackage}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("applicationName", "{myPackage}", case_sensitive=False),
        test.check("blobPath", "storageAccountPath/package.zip", case_sensitive=False),
        test.check("flightingRing", "Insider Beta Channel", case_sensitive=False),
        test.check("version", "1.0.0", case_sensitive=False),
    ])
    step_package_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_package_update(test, checks=[
        test.check("name", "{myPackage}", case_sensitive=False),
        test.check("location", "westus", case_sensitive=False),
        test.check("applicationName", "{myPackage}", case_sensitive=False),
        test.check("blobPath", "storageAccountPath/package.zip", case_sensitive=False),
        test.check("flightingRing", "Insider Beta Channel", case_sensitive=False),
        test.check("version", "1.0.0", case_sensitive=False),
        test.check("isEnabled", False),
    ])
    step_package_get_download_url(test, checks=[])
    step_package_hard_delete(test, checks=[])
    step_analysis_result_show(test, checks=[])
    step_analysis_result_list(test, checks=[])
    step_analysis_result_show2(test, checks=[])
    step_analysis_result_list2(test, checks=[])
    step_analysis_result_show3(test, checks=[])
    step_analysis_result_list3(test, checks=[])
    step_analysis_result_show4(test, checks=[])
    step_analysis_result_list4(test, checks=[])
    step_available_os_show(test, checks=[])
    step_available_os_list(test, checks=[])
    step_favorite_process_create(test, checks=[])
    step_favorite_process_list(test, checks=[])
    step_favorite_process_show(test, checks=[])
    step_favorite_process_delete(test, checks=[])
    step_flighting_ring_show(test, checks=[])
    step_flighting_ring_list(test, checks=[])
    step_os_update_show(test, checks=[])
    step_os_update_list(test, checks=[])
    step_package_delete(test, checks=[])
    step_sku_list(test, checks=[])
    step_test_result_show(test, checks=[])
    step_test_result_list(test, checks=[])
    step_test_result_get_download_url(test, checks=[])
    step_test_result_get_video_download_url(test, checks=[])
    step_test_summary_list(test, checks=[])
    step_test_summary_show(test, checks=[])
    step_test_type_show(test, checks=[])
    step_test_type_list(test, checks=[])
    step_usage_list(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class TestbaseScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(TestbaseScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myTestBaseAccount': 'contoso-testBaseAccount1',
            'myTestBaseAccount2': 'contoso-testBaseAccount',
            'myPackage': 'contoso-package2',
            'myTestSummary': 'contoso-package2-096bffb5-5d3d-4305-a66a-953372ed6e88',
            'myTestResult': 'Windows-10-1909-99b1f80d-03a9-4148-997f-806ba5bac8e0',
            'myTestResult2': 'Windows-10-1909-Test-Id',
            'myAnalysisResult': 'cpuRegression',
            'myAnalysisResult2': 'cpuUtilization',
            'myAnalysisResult3': 'memoryRegression',
            'myAnalysisResult4': 'memoryUtilization',
            'myCustomerEvent': 'WeeklySummary',
        })

    @ResourceGroupPreparer(name_prefix='clitesttestbase_contoso-rg1'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitesttestbase_contoso-rg'[:7], key='rg_2', parameter_name='rg_2')
    def test_testbase_Scenario(self, rg, rg_2):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
