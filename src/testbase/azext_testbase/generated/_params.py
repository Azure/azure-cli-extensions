# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_testbase.action import (
    AddTestbasePackageCreateTargetOsList,
    AddTestbasePackageUpdateTargetOsList
)


def load_arguments(self, _):

    with self.argument_context('testbase account list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('get_deleted', arg_type=get_three_state_flag(), help='The flag indicating if we need to include the '
                   'Test Base Accounts which were soft deleted before.')

    with self.argument_context('testbase account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')

    with self.argument_context('testbase account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.')
        c.argument('restore', arg_type=get_three_state_flag(), help='The flag indicating if we would like to restore '
                   'the Test Base Accounts which were soft deleted before.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('resource_type', type=str, help='The type of resource the SKU applies to.', arg_group='Sku')
        c.argument('sku_name', type=str, help='The name of the SKU. This is typically a letter + number code, such as '
                   'B0 or S0.', arg_group='Sku')
        c.argument('locations', nargs='+', help='The locations that the SKU is available.', arg_group='Sku')

    with self.argument_context('testbase account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('resource_type', type=str, help='The type of resource the SKU applies to.', arg_group='Sku')
        c.argument('locations', nargs='+', help='The locations that the SKU is available.', arg_group='Sku')

    with self.argument_context('testbase account check-package-name') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('application_name', type=str, help='Application name to verify.')
        c.argument('version', type=str, help='Version name to verify.')
        c.argument('type_', options_list=['--type'], type=str, help='fully qualified resource type which includes '
                   'provider namespace.')

    with self.argument_context('testbase account get-package-blob-path') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('file_name', type=str, help='The custom file name of the uploaded blob.')

    with self.argument_context('testbase account soft-delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')

    with self.argument_context('testbase account wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('name', type=str, help='The resource name of the Test Base Account.', id_part='name')

    with self.argument_context('testbase usage list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Odata filter')

    with self.argument_context('testbase available-os list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('os_update_type', arg_type=get_enum_type(['SecurityUpdate', 'FeatureUpdate']), help='The type of '
                   'the OS Update.')

    with self.argument_context('testbase available-os show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('available_os_resource_name', type=str, help='The resource name of an Available OS.',
                   id_part='child_name_1')

    with self.argument_context('testbase flighting-ring list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase flighting-ring show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('flighting_ring_resource_name', type=str, help='The resource name of a flighting ring.',
                   id_part='child_name_1')

    with self.argument_context('testbase test-type list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase test-type show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('test_type_resource_name', type=str, help='The resource name of a test type.',
                   id_part='child_name_1')

    with self.argument_context('testbase package list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase package show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')

    with self.argument_context('testbase package create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('application_name', type=str, help='Application name')
        c.argument('version', type=str, help='Application version')
        c.argument('target_os_list', action=AddTestbasePackageCreateTargetOsList, nargs='+', help='Specifies the '
                   'target OSs of specific OS Update types.')
        c.argument('flighting_ring', type=str, help='The flighting ring for feature update.')
        c.argument('blob_path', type=str, help='The file path of the package.')
        c.argument('tests', type=validate_file_or_dict, help='The detailed test information. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('testbase package update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')
        c.argument('tags', tags_type)
        c.argument('target_os_list', action=AddTestbasePackageUpdateTargetOsList, nargs='+', help='Specifies the '
                   'target OSs of specific OS Update types.')
        c.argument('flighting_ring', type=str, help='The flighting ring for feature update.')
        c.argument('is_enabled', arg_type=get_three_state_flag(), help='Specifies whether the package is enabled. It '
                   'doesn\'t schedule test for package which is not enabled.')
        c.argument('blob_path', type=str, help='The file name of the package.')
        c.argument('tests', type=validate_file_or_dict, help='The detailed test information. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('testbase package delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')

    with self.argument_context('testbase package get-download-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')

    with self.argument_context('testbase package hard-delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')

    with self.argument_context('testbase package wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', options_list=['--name', '-n', '--package-name'], type=str, help='The resource name '
                   'of the Test Base Package.', id_part='child_name_1')

    with self.argument_context('testbase test-summary list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase test-summary show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('test_summary_name', options_list=['--name', '-n', '--test-summary-name'], type=str, help='The name '
                   'of the Test Summary.', id_part='child_name_1')

    with self.argument_context('testbase test-result list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.')
        c.argument('os_update_type', arg_type=get_enum_type(['SecurityUpdate', 'FeatureUpdate']), help='The type of '
                   'the OS Update.')
        c.argument('filter_', options_list=['--filter'], type=str, help='Odata filter')

    with self.argument_context('testbase test-result show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('test_result_name', options_list=['--name', '-n', '--test-result-name'], type=str, help='The Test '
                   'Result Name. It equals to {osName}-{TestResultId} string.', id_part='child_name_2')

    with self.argument_context('testbase test-result get-download-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('test_result_name', options_list=['--name', '-n', '--test-result-name'], type=str, help='The Test '
                   'Result Name. It equals to {osName}-{TestResultId} string.', id_part='child_name_2')

    with self.argument_context('testbase test-result get-video-download-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('test_result_name', options_list=['--name', '-n', '--test-result-name'], type=str, help='The Test '
                   'Result Name. It equals to {osName}-{TestResultId} string.', id_part='child_name_2')

    with self.argument_context('testbase os-update list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.')
        c.argument('os_update_type', arg_type=get_enum_type(['SecurityUpdate', 'FeatureUpdate']), help='The type of '
                   'the OS Update.')

    with self.argument_context('testbase os-update show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('os_update_resource_name', type=str, help='The resource name of an OS Update.',
                   id_part='child_name_2')

    with self.argument_context('testbase favorite-process list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.')

    with self.argument_context('testbase favorite-process show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('name', type=str, help='The resource name of a favorite process in a package. If the process name '
                   'contains characters that are not allowed in Azure Resource Name, we use \'actualProcessName\' in '
                   'request body to submit the name.', id_part='child_name_2')

    with self.argument_context('testbase favorite-process create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.')
        c.argument('name', type=str, help='The resource name of a favorite process in a package. If the process name '
                   'contains characters that are not allowed in Azure Resource Name, we use \'actualProcessName\' in '
                   'request body to submit the name.')
        c.argument('actual_process_name', type=str, help='The actual name of the favorite process. It will be equal to '
                   'resource name except for the scenario that the process name contains characters that are not '
                   'allowed in the resource name.')

    with self.argument_context('testbase favorite-process delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('name', type=str, help='The resource name of a favorite process in a package. If the process name '
                   'contains characters that are not allowed in Azure Resource Name, we use \'actualProcessName\' in '
                   'request body to submit the name.', id_part='child_name_2')

    with self.argument_context('testbase analysis-result list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.')
        c.argument('test_result_name', type=str, help='The Test Result Name. It equals to {osName}-{TestResultId} '
                   'string.')
        c.argument('analysis_result_type', arg_type=get_enum_type(['ScriptExecution', 'Reliability', 'CPUUtilization',
                                                                   'MemoryUtilization', 'CPURegression',
                                                                   'MemoryRegression', 'TestAnalysis']), help='The '
                   'type of the Analysis Result of a Test Result.')

    with self.argument_context('testbase analysis-result show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('package_name', type=str, help='The resource name of the Test Base Package.',
                   id_part='child_name_1')
        c.argument('test_result_name', type=str, help='The Test Result Name. It equals to {osName}-{TestResultId} '
                   'string.', id_part='child_name_2')
        c.argument('analysis_result_name', options_list=['--name', '-n', '--analysis-result-name'],
                   arg_type=get_enum_type(['scriptExecution', 'reliability', 'memoryUtilization', 'cpuUtilization',
                                           'memoryRegression', 'cpuRegression', 'testAnalysis']), help='The name of '
                   'the Analysis Result of a Test Result.', id_part='child_name_3')

    with self.argument_context('testbase email-event list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase email-event show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('email_event_resource_name', type=str, help='The resource name of an email event.',
                   id_part='child_name_1')

    with self.argument_context('testbase customer-event list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')

    with self.argument_context('testbase customer-event show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('customer_event_name', options_list=['--name', '-n', '--customer-event-name'], type=str, help='The '
                   'resource name of the Test Base Customer event.', id_part='child_name_1')

    with self.argument_context('testbase customer-event create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.')
        c.argument('customer_event_name', options_list=['--name', '-n', '--customer-event-name'], type=str, help='The '
                   'resource name of the Test Base Customer event.')
        c.argument('event_name', type=str, help='The name of the event subscribed to.')
        c.argument('receivers', type=validate_file_or_dict, help='The notification event receivers. Expected value: '
                   'json-string/json-file/@json-file.')

    with self.argument_context('testbase customer-event delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('customer_event_name', options_list=['--name', '-n', '--customer-event-name'], type=str, help='The '
                   'resource name of the Test Base Customer event.', id_part='child_name_1')

    with self.argument_context('testbase customer-event wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The resource name of the Test Base Account.', id_part='name')
        c.argument('customer_event_name', options_list=['--name', '-n', '--customer-event-name'], type=str, help='The '
                   'resource name of the Test Base Customer event.', id_part='child_name_1')
