# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_testbase.generated._client_factory import (
    cf_sku,
    cf_test_base_account,
    cf_usage,
    cf_available_os,
    cf_flighting_ring,
    cf_test_type,
    cf_package,
    cf_test_summary,
    cf_test_result,
    cf_os_update,
    cf_favorite_process,
    cf_analysis_result,
    cf_email_event,
    cf_customer_event,
)


testbase_analysis_result = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._analysis_results_operations#AnalysisResultsOperations.{}'
    ),
    client_factory=cf_analysis_result,
)


testbase_available_os = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._available_os_operations#AvailableOsOperations.{}'
    ),
    client_factory=cf_available_os,
)


testbase_customer_event = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._customer_events_operations#CustomerEventsOperations.{}'
    ),
    client_factory=cf_customer_event,
)


testbase_email_event = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._email_events_operations#EmailEventsOperations.{}'
    ),
    client_factory=cf_email_event,
)


testbase_favorite_process = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._favorite_processes_operations#FavoriteProcessesOperations.{}'
    ),
    client_factory=cf_favorite_process,
)


testbase_flighting_ring = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._flighting_rings_operations#FlightingRingsOperations.{}'
    ),
    client_factory=cf_flighting_ring,
)


testbase_os_update = CliCommandType(
    operations_tmpl='azext_testbase.vendored_sdks.testbase.operations._os_updates_operations#OsUpdatesOperations.{}',
    client_factory=cf_os_update,
)


testbase_package = CliCommandType(
    operations_tmpl='azext_testbase.vendored_sdks.testbase.operations._packages_operations#PackagesOperations.{}',
    client_factory=cf_package,
)


testbase_sku = CliCommandType(
    operations_tmpl='azext_testbase.vendored_sdks.testbase.operations._skus_operations#SkusOperations.{}',
    client_factory=cf_sku,
)


testbase_test_base_account = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._test_base_accounts_operations#TestBaseAccountsOperations.{}'
    ),
    client_factory=cf_test_base_account,
)


testbase_test_result = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._test_results_operations#TestResultsOperations.{}'
    ),
    client_factory=cf_test_result,
)


testbase_test_summary = CliCommandType(
    operations_tmpl=(
        'azext_testbase.vendored_sdks.testbase.operations._test_summaries_operations#TestSummariesOperations.{}'
    ),
    client_factory=cf_test_summary,
)


testbase_test_type = CliCommandType(
    operations_tmpl='azext_testbase.vendored_sdks.testbase.operations._test_types_operations#TestTypesOperations.{}',
    client_factory=cf_test_type,
)


testbase_usage = CliCommandType(
    operations_tmpl='azext_testbase.vendored_sdks.testbase.operations._usage_operations#UsageOperations.{}',
    client_factory=cf_usage,
)


def load_command_table(self, _):

    with self.command_group(
        'testbase analysis-result', testbase_analysis_result, client_factory=cf_analysis_result
    ) as g:
        g.custom_command('list', 'testbase_analysis_result_list')
        g.custom_show_command('show', 'testbase_analysis_result_show')

    with self.command_group('testbase available-os', testbase_available_os, client_factory=cf_available_os) as g:
        g.custom_command('list', 'testbase_available_os_list')
        g.custom_show_command('show', 'testbase_available_os_show')

    with self.command_group('testbase customer-event', testbase_customer_event, client_factory=cf_customer_event) as g:
        g.custom_command('list', 'testbase_customer_event_list')
        g.custom_show_command('show', 'testbase_customer_event_show')
        g.custom_command('create', 'testbase_customer_event_create', supports_no_wait=True)
        g.custom_command('delete', 'testbase_customer_event_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'testbase_customer_event_show')

    with self.command_group('testbase email-event', testbase_email_event, client_factory=cf_email_event) as g:
        g.custom_command('list', 'testbase_email_event_list')
        g.custom_show_command('show', 'testbase_email_event_show')

    with self.command_group(
        'testbase favorite-process', testbase_favorite_process, client_factory=cf_favorite_process
    ) as g:
        g.custom_command('list', 'testbase_favorite_process_list')
        g.custom_show_command('show', 'testbase_favorite_process_show')
        g.custom_command('create', 'testbase_favorite_process_create')
        g.custom_command('delete', 'testbase_favorite_process_delete', confirmation=True)

    with self.command_group('testbase flighting-ring', testbase_flighting_ring, client_factory=cf_flighting_ring) as g:
        g.custom_command('list', 'testbase_flighting_ring_list')
        g.custom_show_command('show', 'testbase_flighting_ring_show')

    with self.command_group('testbase os-update', testbase_os_update, client_factory=cf_os_update) as g:
        g.custom_command('list', 'testbase_os_update_list')
        g.custom_show_command('show', 'testbase_os_update_show')

    with self.command_group('testbase package', testbase_package, client_factory=cf_package) as g:
        g.custom_command('list', 'testbase_package_list')
        g.custom_show_command('show', 'testbase_package_show')
        g.custom_command('create', 'testbase_package_create', supports_no_wait=True)
        g.custom_command('update', 'testbase_package_update', supports_no_wait=True)
        g.custom_command('delete', 'testbase_package_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('get-download-url', 'testbase_package_get_download_url')
        g.custom_command('hard-delete', 'testbase_package_hard_delete', supports_no_wait=True)
        g.custom_wait_command('wait', 'testbase_package_show')

    with self.command_group('testbase sku', testbase_sku, client_factory=cf_sku) as g:
        g.custom_command('list', 'testbase_sku_list')

    with self.command_group(
        'testbase test-base-account', testbase_test_base_account, client_factory=cf_test_base_account
    ) as g:
        g.custom_command('list', 'testbase_test_base_account_list')
        g.custom_show_command('show', 'testbase_test_base_account_show')
        g.custom_command('create', 'testbase_test_base_account_create', supports_no_wait=True)
        g.custom_command('update', 'testbase_test_base_account_update', supports_no_wait=True)
        g.custom_command('delete', 'testbase_test_base_account_delete', supports_no_wait=True, confirmation=True)
        g.custom_command(
            'check-package-name-availability', 'testbase_test_base_account_check_package_name_availability'
        )
        g.custom_command('get-file-upload-url', 'testbase_test_base_account_get_file_upload_url')
        g.custom_command('offboard', 'testbase_test_base_account_offboard', supports_no_wait=True)
        g.custom_wait_command('wait', 'testbase_test_base_account_show')

    with self.command_group('testbase test-result', testbase_test_result, client_factory=cf_test_result) as g:
        g.custom_command('list', 'testbase_test_result_list')
        g.custom_show_command('show', 'testbase_test_result_show')
        g.custom_command('get-download-url', 'testbase_test_result_get_download_url')
        g.custom_command('get-video-download-url', 'testbase_test_result_get_video_download_url')

    with self.command_group('testbase test-summary', testbase_test_summary, client_factory=cf_test_summary) as g:
        g.custom_command('list', 'testbase_test_summary_list')
        g.custom_show_command('show', 'testbase_test_summary_show')

    with self.command_group('testbase test-type', testbase_test_type, client_factory=cf_test_type) as g:
        g.custom_command('list', 'testbase_test_type_list')
        g.custom_show_command('show', 'testbase_test_type_show')

    with self.command_group('testbase usage', testbase_usage, client_factory=cf_usage) as g:
        g.custom_command('list', 'testbase_usage_list')

    with self.command_group('testbase', is_experimental=True):
        pass
