# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer
from .example_steps import step_create, step_create_required
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg, rg_2):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg, rg_2):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg, rg_2):
    setup_scenario(test, rg, rg_2)
    # STEP NOT FOUND: /DiskPools/put/Createxxx
    cleanup_scenario(test, rg, rg_2)


# Test class for Scenario
@try_manual
class DiskpoolScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(DiskpoolScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myDisk': self.create_random_name(prefix='disk', length=10),
            'zone': "3",
            'myDiskPool': self.create_random_name(prefix='diskpool', length=16),
            'myIscsiTarget': self.create_random_name(prefix='iscsi', length=10),
            'myDiskPool2': 'SampleAse',
        })

    @ResourceGroupPreparer(name_prefix='clitestdiskpool_myResourceGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestdiskpool_Sample-WestUSResourceGroup'[:7], key='rg_2',
                           parameter_name='rg_2')
    @VirtualNetworkPreparer(name_prefix='clitestdiskpool_myvnet'[:7], key='vn', resource_group_key='rg')
    def test_diskpool_Scenario(self, rg, rg_2):
        call_scenario(self, rg, rg_2)
        calc_coverage(__file__)
        raise_if()

