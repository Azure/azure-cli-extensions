# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddDiskPoolCreateDisks(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        for item in action:
            super(AddDiskPoolCreateDisks, self).__call__(parser, namespace, item, option_string)

    def get_action(self, values, option_string=None):
        try:
            value_chunk_list = [values[x:x+1] for x in range(0, len(values), 1)]
            value_list = []
            for chunk in value_chunk_list:
                id, = chunk
                value_list.append(
                    {
                        'id': id
                    }
                )
            return value_list
        except ValueError:
            raise CLIError('usage error: {} NAME METRIC OPERATION VALUE'.format(option_string))


class AddDiskPoolUpdateDisks(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        for item in action:
            super(AddDiskPoolUpdateDisks, self).__call__(parser, namespace, item, option_string)

    def get_action(self, values, option_string=None):
        try:
            value_chunk_list = [values[x:x+1] for x in range(0, len(values), 1)]
            value_list = []
            for chunk in value_chunk_list:
                id, = chunk
                value_list.append(
                    {
                        'id': id
                    }
                )
            return value_list
        except ValueError:
            raise CLIError('usage error: {} NAME METRIC OPERATION VALUE'.format(option_string))
