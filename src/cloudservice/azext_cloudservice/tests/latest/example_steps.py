# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Multiple Roles
@try_manual
def step_create(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\"}'
             '}}}}}]}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}},{{\\"name\\":\\"ContosoBackend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2'
             '\\",\\"capacity\\":1,\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role
@try_manual
def step_create2(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"myLoadBalancer\\",\\"properties\\":{{\\"frontendIPConfig'
             'urations\\":[{{\\"name\\":\\"myfe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/publicIPAddresses/myPublicIP\\"}}}}}}'
             ']}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role and Certificate from Key Vault
@try_manual
def step_create3(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\"}'
             '}}}}}]}}}}]" '
             '--secrets "[{{\\"sourceVault\\":{{\\"id\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg}/provid'
             'ers/Microsoft.KeyVault/vaults/{{{{keyvault-name}}}}\\"}},\\"vaultCertificates\\":[{{\\"certificateUrl\\":'
             '\\"https://{{{{keyvault-name}}}}.vault.azure.net:443/secrets/ContosoCertificate/{{{{secret-id}}}}\\"}}]}}'
             ']" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /CloudServices/put/Create New Cloud Service with Single Role and RDP Extension
@try_manual
def step_create4(test, rg, checks=None):
    if checks is None:
        checks = []
    test.cmd('az cloud-service create '
             '--name "{myCloudService}" '
             '--location "westus" '
             '--configuration "{{ServiceConfiguration}}" '
             '--extensions "[{{\\"name\\":\\"RDPExtension\\",\\"properties\\":{{\\"type\\":\\"RDP\\",\\"autoUpgradeMino'
             'rVersion\\":false,\\"protectedSettings\\":\\"<PrivateConfig><Password>{{{{password}}}}</Password></Privat'
             'eConfig>\\",\\"publisher\\":\\"Microsoft.Windows.Azure.Extensions\\",\\"settings\\":\\"<PublicConfig><Use'
             'rName>UserAzure</UserName><Expiration>10/22/2021 15:05:45</Expiration></PublicConfig>\\",\\"typeHandlerVe'
             'rsion\\":\\"1.2.1\\"}}}}]" '
             '--load-balancer-configurations "[{{\\"name\\":\\"contosolb\\",\\"properties\\":{{\\"frontendIPConfigurati'
             'ons\\":[{{\\"name\\":\\"contosofe\\",\\"properties\\":{{\\"publicIPAddress\\":{{\\"id\\":\\"/subscription'
             's/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Network/publicIPAddresses/contosopublicip\\"}'
             '}}}}}]}}}}]" '
             '--package-url "{{PackageUrl}}" '
             '--roles "[{{\\"name\\":\\"ContosoFrontend\\",\\"sku\\":{{\\"name\\":\\"Standard_D1_v2\\",\\"capacity\\":1'
             ',\\"tier\\":\\"Standard\\"}}}}]" '
             '--upgrade-mode "Auto" '
             '--resource-group "{rg}"',
             checks=[])
    test.cmd('az cloud-service wait --created '
             '--name "{myCloudService}" '
             '--resource-group "{rg}"',
             checks=checks)

