# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._storage_pool_management_enums import *


class Acl(msrest.serialization.Model):
    """Access Control List (ACL) for an iSCSI target lun.

    All required parameters must be populated in order to send to Azure.

    :param initiator_iqn: Required. iSCSI initiator iqn (iSCSI Qualified Name); example:
     iqn.2005-03.org.iscsi:client.
    :type initiator_iqn: str
    :param mapped_luns: Required. Array of lun names mapped to the ACL.
    :type mapped_luns: list[str]
    :param username: Username for Challenge Handshake Authentication Protocol (CHAP)
     authentication.
    :type username: str
    :param password: Password for Challenge Handshake Authentication Protocol (CHAP)
     authentication.
    :type password: str
    """

    _validation = {
        'initiator_iqn': {'required': True},
        'mapped_luns': {'required': True},
        'username': {'max_length': 128, 'min_length': 7},
        'password': {'max_length': 512, 'min_length': 12},
    }

    _attribute_map = {
        'initiator_iqn': {'key': 'initiatorIqn', 'type': 'str'},
        'mapped_luns': {'key': 'mappedLuns', 'type': '[str]'},
        'username': {'key': 'credentials.username', 'type': 'str'},
        'password': {'key': 'credentials.password', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        initiator_iqn: str,
        mapped_luns: List[str],
        username: Optional[str] = None,
        password: Optional[str] = None,
        **kwargs
    ):
        super(Acl, self).__init__(**kwargs)
        self.initiator_iqn = initiator_iqn
        self.mapped_luns = mapped_luns
        self.username = username
        self.password = password


class Attributes(msrest.serialization.Model):
    """Attributes of an iSCSI target.

    All required parameters must be populated in order to send to Azure.

    :param authentication: Required. Indicates whether or not authentication is enabled on the ACL.
    :type authentication: bool
    :param prod_mode_write_protect: Required. Indicates whether or not write protect is enabled on
     the luns.
    :type prod_mode_write_protect: bool
    """

    _validation = {
        'authentication': {'required': True},
        'prod_mode_write_protect': {'required': True},
    }

    _attribute_map = {
        'authentication': {'key': 'authentication', 'type': 'bool'},
        'prod_mode_write_protect': {'key': 'prodModeWriteProtect', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        authentication: bool,
        prod_mode_write_protect: bool,
        **kwargs
    ):
        super(Attributes, self).__init__(**kwargs)
        self.authentication = authentication
        self.prod_mode_write_protect = prod_mode_write_protect


class Disk(msrest.serialization.Model):
    """Managed disk to attach to the DiskPool. Required.

    All required parameters must be populated in order to send to Azure.

    :param id: Required. Unique Azure resource id of the managed disk. Required.
    :type id: str
    """

    _validation = {
        'id': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: str,
        **kwargs
    ):
        super(Disk, self).__init__(**kwargs)
        self.id = id


class Resource(msrest.serialization.Model):
    """ARM resource model definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class DiskPool(TrackedResource):
    """Request payload for Create or Update Disk Pool requests.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :param sku: Sku description.
    :type sku: ~storage_pool_management.models.Sku
    :ivar system_data: Resource metadata required by ARM RPC.
    :vartype system_data: ~storage_pool_management.models.SystemMetadata
    :ivar provisioning_state: State of provisioning of the iSCSI target. Possible values include:
     "Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting".
    :vartype provisioning_state: str or ~storage_pool_management.models.ProvisioningStates
    :param availability_zones: Logical zone for DiskPool resource.
    :type availability_zones: list[str]
    :ivar status: Operational status of the Disk pool. Possible values include: "Invalid",
     "Unknown", "Healthy", "Unhealthy".
    :vartype status: str or ~storage_pool_management.models.OperationalStatus
    :param disks: List of Azure managed disks to attach to a DiskPool.
    :type disks: list[~storage_pool_management.models.Disk]
    :param subnet_id: Azure resource id of the subnet for the DiskPool.
    :type subnet_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'sku': {'key': 'sku', 'type': 'Sku'},
        'system_data': {'key': 'systemData', 'type': 'SystemMetadata'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'availability_zones': {'key': 'properties.availabilityZones', 'type': '[str]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'disks': {'key': 'properties.disks', 'type': '[Disk]'},
        'subnet_id': {'key': 'properties.subnetId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["Sku"] = None,
        availability_zones: Optional[List[str]] = None,
        disks: Optional[List["Disk"]] = None,
        subnet_id: Optional[str] = None,
        **kwargs
    ):
        super(DiskPool, self).__init__(tags=tags, location=location, **kwargs)
        self.sku = sku
        self.system_data = None
        self.provisioning_state = None
        self.availability_zones = availability_zones
        self.status = None
        self.disks = disks
        self.subnet_id = subnet_id


class DiskPoolListResult(msrest.serialization.Model):
    """List of Disk Pools.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. An array of Disk Pool objects.
    :type value: list[~storage_pool_management.models.DiskPool]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DiskPool]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["DiskPool"],
        **kwargs
    ):
        super(DiskPoolListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class Error(msrest.serialization.Model):
    """The resource management error response.

    :param error: RP error response.
    :type error: ~storage_pool_management.models.ErrorResponse
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(
        self,
        *,
        error: Optional["ErrorResponse"] = None,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.error = error


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorResponse(msrest.serialization.Model):
    """The resource management error response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~storage_pool_management.models.ErrorResponse]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~storage_pool_management.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorResponse]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class IscsiLun(msrest.serialization.Model):
    """Lun to expose the ManagedDisk.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Lun name.
    :type name: str
    :param managed_disk_azure_resource_id: Required. Unique Azure resource id of the managed disk.
     Required.
    :type managed_disk_azure_resource_id: str
    """

    _validation = {
        'name': {'required': True},
        'managed_disk_azure_resource_id': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'managed_disk_azure_resource_id': {'key': 'managedDiskAzureResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        managed_disk_azure_resource_id: str,
        **kwargs
    ):
        super(IscsiLun, self).__init__(**kwargs)
        self.name = name
        self.managed_disk_azure_resource_id = managed_disk_azure_resource_id


class IscsiTarget(Resource):
    """Payload for iSCSI Target Create or Update requests.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    :ivar provisioning_state: State of provisioning of the iSCSI target. Possible values include:
     "Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting".
    :vartype provisioning_state: str or ~storage_pool_management.models.ProvisioningStates
    :ivar status: Operational status of the Disk pool. Possible values include: "Invalid",
     "Unknown", "Healthy", "Unhealthy".
    :vartype status: str or ~storage_pool_management.models.OperationalStatus
    :param tpgs: list of iSCSI target portal groups.
    :type tpgs: list[~storage_pool_management.models.TargetPortalGroup]
    :param target_iqn: iSCSI target iqn (iSCSI Qualified Name); example:
     iqn.2005-03.org.iscsi:server.
    :type target_iqn: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'tpgs': {'key': 'properties.tpgs', 'type': '[TargetPortalGroup]'},
        'target_iqn': {'key': 'properties.targetIqn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tpgs: Optional[List["TargetPortalGroup"]] = None,
        target_iqn: Optional[str] = None,
        **kwargs
    ):
        super(IscsiTarget, self).__init__(**kwargs)
        self.provisioning_state = None
        self.status = None
        self.tpgs = tpgs
        self.target_iqn = target_iqn


class IscsiTargetList(msrest.serialization.Model):
    """List of iSCSI Targets.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. An array of iSCSI targets within a Disk Pool.
    :type value: list[~storage_pool_management.models.IscsiTarget]
    :ivar next_link: URI to fetch the next section of the paginated response.
    :vartype next_link: str
    """

    _validation = {
        'value': {'required': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[IscsiTarget]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["IscsiTarget"],
        **kwargs
    ):
        super(IscsiTargetList, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. Ex- Microsoft.Compute/virtualMachines or
     Microsoft.Storage/storageAccounts.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class Sku(msrest.serialization.Model):
    """The resource model definition representing SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the SKU. Ex - P3. It is typically a letter+number code.
    :type name: str
    :param tier: This field is required to be implemented by the Resource Provider if the service
     has more than one tier, but is not required on a PUT. Possible values include: "Free", "Basic",
     "Standard", "Premium".
    :type tier: str or ~storage_pool_management.models.SkuTier
    :param size: The SKU size. When the name field is the combination of tier and some other value,
     this would be the standalone code.
    :type size: str
    :param family: If the service has different generations of hardware, for the same SKU, then
     that can be captured here.
    :type family: str
    :param capacity: If the SKU supports scale out/in then the capacity integer should be included.
     If scale out/in is not possible for the resource this may be omitted.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[Union[str, "SkuTier"]] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.capacity = capacity


class StoragePoolOperationDisplay(msrest.serialization.Model):
    """Metadata about an operation.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required. Localized friendly form of the resource provider name.
    :type provider: str
    :param resource: Required. Localized friendly form of the resource type related to this
     action/operation.
    :type resource: str
    :param operation: Required. Localized friendly name for the operation, as it should be shown to
     the user.
    :type operation: str
    :param description: Required. Localized friendly description for the operation, as it should be
     shown to the user.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: str,
        resource: str,
        operation: str,
        description: str,
        **kwargs
    ):
        super(StoragePoolOperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class StoragePoolOperationListResult(msrest.serialization.Model):
    """List of operations supported by the RP.

    All required parameters must be populated in order to send to Azure.

    :param value: Required. An array of operations supported by the StoragePool RP.
    :type value: list[~storage_pool_management.models.StoragePoolRPOperation]
    :param next_link: URI to fetch the next section of the paginated response.
    :type next_link: str
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[StoragePoolRPOperation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: List["StoragePoolRPOperation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(StoragePoolOperationListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class StoragePoolRPOperation(msrest.serialization.Model):
    """Description of a StoragePool RP Operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. The name of the operation being performed on this particular object.
    :type name: str
    :param is_data_action: Required. Indicates whether the operation applies to data-plane.
    :type is_data_action: bool
    :param action_type: Indicates the action type.
    :type action_type: str
    :param display: Required. Additional metadata about RP operation.
    :type display: ~storage_pool_management.models.StoragePoolOperationDisplay
    :param origin: The intended executor of the operation; governs the display of the operation in
     the RBAC UX and the audit logs UX.
    :type origin: str
    """

    _validation = {
        'name': {'required': True},
        'is_data_action': {'required': True},
        'display': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'display': {'key': 'display', 'type': 'StoragePoolOperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        is_data_action: bool,
        display: "StoragePoolOperationDisplay",
        action_type: Optional[str] = None,
        origin: Optional[str] = None,
        **kwargs
    ):
        super(StoragePoolRPOperation, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.action_type = action_type
        self.display = display
        self.origin = origin


class SystemMetadata(msrest.serialization.Model):
    """Resource metadata required by ARM RPC.

    :param created_by: A string identifier for the identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource: user, application,
     managedIdentity.
    :type created_by_type: str
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: str
    :param last_modified_by: A string identifier for the identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource: user,
     application, managedIdentity.
    :type last_modified_by_type: str
    :param last_modified_at: The timestamp of resource last modification (UTC).
    :type last_modified_at: str
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'str'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[str] = None,
        created_at: Optional[str] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[str] = None,
        last_modified_at: Optional[str] = None,
        **kwargs
    ):
        super(SystemMetadata, self).__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class TargetPortalGroup(msrest.serialization.Model):
    """iSCSI target portal group.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param luns: Required. Lun list to be exposed through the iSCSI target. Required.
    :type luns: list[~storage_pool_management.models.IscsiLun]
    :param acls: Required. Access Control List (ACL) for an iSCSI target lun.
    :type acls: list[~storage_pool_management.models.Acl]
    :param attributes: Required. Attributes of an iSCSI target.
    :type attributes: ~storage_pool_management.models.Attributes
    :ivar endpoints: list of public ip addresses to connect to the iSCSI target.
    :vartype endpoints: list[str]
    :ivar tag: The tag associated with the iSCSI target portal group.
    :vartype tag: int
    :ivar port: The port at which the iSCSI target is available.
    :vartype port: int
    """

    _validation = {
        'luns': {'required': True},
        'acls': {'required': True},
        'attributes': {'required': True},
        'endpoints': {'readonly': True},
        'tag': {'readonly': True},
        'port': {'readonly': True},
    }

    _attribute_map = {
        'luns': {'key': 'luns', 'type': '[IscsiLun]'},
        'acls': {'key': 'acls', 'type': '[Acl]'},
        'attributes': {'key': 'attributes', 'type': 'Attributes'},
        'endpoints': {'key': 'endpoints', 'type': '[str]'},
        'tag': {'key': 'tag', 'type': 'int'},
        'port': {'key': 'port', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        luns: List["IscsiLun"],
        acls: List["Acl"],
        attributes: "Attributes",
        **kwargs
    ):
        super(TargetPortalGroup, self).__init__(**kwargs)
        self.luns = luns
        self.acls = acls
        self.attributes = attributes
        self.endpoints = None
        self.tag = None
        self.port = None
