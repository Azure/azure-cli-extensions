# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall policy rule-collection-group create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create an Azure firewall policy rule collection group.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}/rulecollectiongroups/{}", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.policy_name = AAZStrArg(
            options=["--policy-name"],
            help="The name of the Firewall Policy.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the Firewall Policy Rule Collection Group.",
            required=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.priority = AAZIntArg(
            options=["--priority"],
            arg_group="Properties",
            help="Priority of the Firewall Policy Rule Collection Group",
            fmt=AAZIntArgFormat(
                maximum=65000,
                minimum=100,
            ),
        )
        _args_schema.rule_collections = AAZListArg(
            options=["--rule-collections"],
            arg_group="Properties",
            help="Group of Firewall Policy rule collections.",
        )

        rule_collections = cls._args_schema.rule_collections
        rule_collections.Element = AAZObjectArg()

        _element = cls._args_schema.rule_collections.Element
        _element.firewall_policy_filter_rule_collection = AAZObjectArg(
            options=["firewall-policy-filter-rule-collection"],
        )
        _element.firewall_policy_nat_rule_collection = AAZObjectArg(
            options=["firewall-policy-nat-rule-collection"],
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the rule collection.",
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Priority of the Firewall Policy Rule Collection resource.",
            fmt=AAZIntArgFormat(
                maximum=65000,
                minimum=100,
            ),
        )

        firewall_policy_filter_rule_collection = cls._args_schema.rule_collections.Element.firewall_policy_filter_rule_collection
        firewall_policy_filter_rule_collection.action = AAZObjectArg(
            options=["action"],
            help="The action type of a Filter rule collection.",
        )
        firewall_policy_filter_rule_collection.rules = AAZListArg(
            options=["rules"],
            help="List of rules included in a rule collection.",
        )

        action = cls._args_schema.rule_collections.Element.firewall_policy_filter_rule_collection.action
        action.type = AAZStrArg(
            options=["type"],
            help="The type of action.",
            enum={"Allow": "Allow", "Deny": "Deny"},
        )

        rules = cls._args_schema.rule_collections.Element.firewall_policy_filter_rule_collection.rules
        rules.Element = AAZObjectArg()
        cls._build_args_firewall_policy_rule_create(rules.Element)

        firewall_policy_nat_rule_collection = cls._args_schema.rule_collections.Element.firewall_policy_nat_rule_collection
        firewall_policy_nat_rule_collection.action = AAZObjectArg(
            options=["action"],
            help="The action type of a Nat rule collection.",
        )
        firewall_policy_nat_rule_collection.rules = AAZListArg(
            options=["rules"],
            help="List of rules included in a rule collection.",
        )

        action = cls._args_schema.rule_collections.Element.firewall_policy_nat_rule_collection.action
        action.type = AAZStrArg(
            options=["type"],
            help="The type of action.",
            enum={"DNAT": "DNAT"},
        )

        rules = cls._args_schema.rule_collections.Element.firewall_policy_nat_rule_collection.rules
        rules.Element = AAZObjectArg()
        cls._build_args_firewall_policy_rule_create(rules.Element)
        return cls._args_schema

    _args_firewall_policy_rule_create = None

    @classmethod
    def _build_args_firewall_policy_rule_create(cls, _schema):
        if cls._args_firewall_policy_rule_create is not None:
            _schema.application_rule = cls._args_firewall_policy_rule_create.application_rule
            _schema.description = cls._args_firewall_policy_rule_create.description
            _schema.name = cls._args_firewall_policy_rule_create.name
            _schema.nat_rule = cls._args_firewall_policy_rule_create.nat_rule
            _schema.network_rule = cls._args_firewall_policy_rule_create.network_rule
            return

        cls._args_firewall_policy_rule_create = AAZObjectArg()

        firewall_policy_rule_create = cls._args_firewall_policy_rule_create
        firewall_policy_rule_create.application_rule = AAZObjectArg(
            options=["application-rule"],
        )
        firewall_policy_rule_create.nat_rule = AAZObjectArg(
            options=["nat-rule"],
        )
        firewall_policy_rule_create.network_rule = AAZObjectArg(
            options=["network-rule"],
        )
        firewall_policy_rule_create.description = AAZStrArg(
            options=["description"],
            help="Description of the rule.",
        )
        firewall_policy_rule_create.name = AAZStrArg(
            options=["name"],
            help="Name of the rule.",
        )

        application_rule = cls._args_firewall_policy_rule_create.application_rule
        application_rule.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses or Service Tags.",
        )
        application_rule.fqdn_tags = AAZListArg(
            options=["fqdn-tags"],
            help="List of FQDN Tags for this rule.",
        )
        application_rule.protocols = AAZListArg(
            options=["protocols"],
            help="Array of Application Protocols.",
        )
        application_rule.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
        )
        application_rule.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
        )
        application_rule.target_fqdns = AAZListArg(
            options=["target-fqdns"],
            help="List of FQDNs for this rule.",
        )
        application_rule.target_urls = AAZListArg(
            options=["target-urls"],
            help="List of Urls for this rule condition.",
        )
        application_rule.terminate_tls = AAZBoolArg(
            options=["terminate-tls"],
            help="Terminate TLS connections for this rule.",
        )
        application_rule.web_categories = AAZListArg(
            options=["web-categories"],
            help="List of destination azure web categories.",
        )

        destination_addresses = cls._args_firewall_policy_rule_create.application_rule.destination_addresses
        destination_addresses.Element = AAZStrArg()

        fqdn_tags = cls._args_firewall_policy_rule_create.application_rule.fqdn_tags
        fqdn_tags.Element = AAZStrArg()

        protocols = cls._args_firewall_policy_rule_create.application_rule.protocols
        protocols.Element = AAZObjectArg()

        _element = cls._args_firewall_policy_rule_create.application_rule.protocols.Element
        _element.port = AAZIntArg(
            options=["port"],
            help="Port number for the protocol, cannot be greater than 64000.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        _element.protocol_type = AAZStrArg(
            options=["protocol-type"],
            help="Protocol type.",
            enum={"Http": "Http", "Https": "Https"},
        )

        source_addresses = cls._args_firewall_policy_rule_create.application_rule.source_addresses
        source_addresses.Element = AAZStrArg()

        source_ip_groups = cls._args_firewall_policy_rule_create.application_rule.source_ip_groups
        source_ip_groups.Element = AAZStrArg()

        target_fqdns = cls._args_firewall_policy_rule_create.application_rule.target_fqdns
        target_fqdns.Element = AAZStrArg()

        target_urls = cls._args_firewall_policy_rule_create.application_rule.target_urls
        target_urls.Element = AAZStrArg()

        web_categories = cls._args_firewall_policy_rule_create.application_rule.web_categories
        web_categories.Element = AAZStrArg()

        nat_rule = cls._args_firewall_policy_rule_create.nat_rule
        nat_rule.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses or Service Tags.",
        )
        nat_rule.destination_ports = AAZListArg(
            options=["destination-ports"],
            help="List of destination ports.",
        )
        nat_rule.ip_protocols = AAZListArg(
            options=["ip-protocols"],
            help="Array of FirewallPolicyRuleNetworkProtocols.",
        )
        nat_rule.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
        )
        nat_rule.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
        )
        nat_rule.translated_address = AAZStrArg(
            options=["translated-address"],
            help="The translated address for this NAT rule.",
        )
        nat_rule.translated_fqdn = AAZStrArg(
            options=["translated-fqdn"],
            help="The translated FQDN for this NAT rule.",
        )
        nat_rule.translated_port = AAZStrArg(
            options=["translated-port"],
            help="The translated port for this NAT rule.",
        )

        destination_addresses = cls._args_firewall_policy_rule_create.nat_rule.destination_addresses
        destination_addresses.Element = AAZStrArg()

        destination_ports = cls._args_firewall_policy_rule_create.nat_rule.destination_ports
        destination_ports.Element = AAZStrArg()

        ip_protocols = cls._args_firewall_policy_rule_create.nat_rule.ip_protocols
        ip_protocols.Element = AAZStrArg(
            enum={"Any": "Any", "ICMP": "ICMP", "TCP": "TCP", "UDP": "UDP"},
        )

        source_addresses = cls._args_firewall_policy_rule_create.nat_rule.source_addresses
        source_addresses.Element = AAZStrArg()

        source_ip_groups = cls._args_firewall_policy_rule_create.nat_rule.source_ip_groups
        source_ip_groups.Element = AAZStrArg()

        network_rule = cls._args_firewall_policy_rule_create.network_rule
        network_rule.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses or Service Tags.",
        )
        network_rule.destination_fqdns = AAZListArg(
            options=["destination-fqdns"],
            help="List of destination FQDNs.",
        )
        network_rule.destination_ip_groups = AAZListArg(
            options=["destination-ip-groups"],
            help="List of destination IpGroups for this rule.",
        )
        network_rule.destination_ports = AAZListArg(
            options=["destination-ports"],
            help="List of destination ports.",
        )
        network_rule.ip_protocols = AAZListArg(
            options=["ip-protocols"],
            help="Array of FirewallPolicyRuleNetworkProtocols.",
        )
        network_rule.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
        )
        network_rule.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
        )

        destination_addresses = cls._args_firewall_policy_rule_create.network_rule.destination_addresses
        destination_addresses.Element = AAZStrArg()

        destination_fqdns = cls._args_firewall_policy_rule_create.network_rule.destination_fqdns
        destination_fqdns.Element = AAZStrArg()

        destination_ip_groups = cls._args_firewall_policy_rule_create.network_rule.destination_ip_groups
        destination_ip_groups.Element = AAZStrArg()

        destination_ports = cls._args_firewall_policy_rule_create.network_rule.destination_ports
        destination_ports.Element = AAZStrArg()

        ip_protocols = cls._args_firewall_policy_rule_create.network_rule.ip_protocols
        ip_protocols.Element = AAZStrArg(
            enum={"Any": "Any", "ICMP": "ICMP", "TCP": "TCP", "UDP": "UDP"},
        )

        source_addresses = cls._args_firewall_policy_rule_create.network_rule.source_addresses
        source_addresses.Element = AAZStrArg()

        source_ip_groups = cls._args_firewall_policy_rule_create.network_rule.source_ip_groups
        source_ip_groups.Element = AAZStrArg()

        _schema.application_rule = cls._args_firewall_policy_rule_create.application_rule
        _schema.description = cls._args_firewall_policy_rule_create.description
        _schema.name = cls._args_firewall_policy_rule_create.name
        _schema.nat_rule = cls._args_firewall_policy_rule_create.nat_rule
        _schema.network_rule = cls._args_firewall_policy_rule_create.network_rule

    def _execute_operations(self):
        self.pre_operations()
        yield self.FirewallPolicyRuleCollectionGroupsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallPolicyRuleCollectionGroupsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/ruleCollectionGroups/{ruleCollectionGroupName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "ruleCollectionGroupName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("priority", AAZIntType, ".priority")
                properties.set_prop("ruleCollections", AAZListType, ".rule_collections")

            rule_collections = _builder.get(".properties.ruleCollections")
            if rule_collections is not None:
                rule_collections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.ruleCollections[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("priority", AAZIntType, ".priority")
                _elements.set_const("ruleCollectionType", "FirewallPolicyFilterRuleCollection", AAZStrType, ".firewall_policy_filter_rule_collection", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("ruleCollectionType", "FirewallPolicyNatRuleCollection", AAZStrType, ".firewall_policy_nat_rule_collection", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("ruleCollectionType", "FirewallPolicyFilterRuleCollection")
                _elements.discriminate_by("ruleCollectionType", "FirewallPolicyNatRuleCollection")

            disc_firewall_policy_filter_rule_collection = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyFilterRuleCollection}")
            if disc_firewall_policy_filter_rule_collection is not None:
                disc_firewall_policy_filter_rule_collection.set_prop("action", AAZObjectType, ".firewall_policy_filter_rule_collection.action")
                disc_firewall_policy_filter_rule_collection.set_prop("rules", AAZListType, ".firewall_policy_filter_rule_collection.rules")

            action = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyFilterRuleCollection}.action")
            if action is not None:
                action.set_prop("type", AAZStrType, ".type")

            rules = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyFilterRuleCollection}.rules")
            if rules is not None:
                _CreateHelper._build_schema_firewall_policy_rule_create(rules.set_elements(AAZObjectType, "."))

            disc_firewall_policy_nat_rule_collection = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyNatRuleCollection}")
            if disc_firewall_policy_nat_rule_collection is not None:
                disc_firewall_policy_nat_rule_collection.set_prop("action", AAZObjectType, ".firewall_policy_nat_rule_collection.action")
                disc_firewall_policy_nat_rule_collection.set_prop("rules", AAZListType, ".firewall_policy_nat_rule_collection.rules")

            action = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyNatRuleCollection}.action")
            if action is not None:
                action.set_prop("type", AAZStrType, ".type")

            rules = _builder.get(".properties.ruleCollections[]{ruleCollectionType:FirewallPolicyNatRuleCollection}.rules")
            if rules is not None:
                _CreateHelper._build_schema_firewall_policy_rule_create(rules.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.name = AAZStrType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.priority = AAZIntType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.rule_collections = AAZListType(
                serialized_name="ruleCollections",
            )

            rule_collections = cls._schema_on_200_201.properties.rule_collections
            rule_collections.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.rule_collections.Element
            _element.name = AAZStrType()
            _element.priority = AAZIntType()
            _element.rule_collection_type = AAZStrType(
                serialized_name="ruleCollectionType",
                flags={"required": True},
            )

            disc_firewall_policy_filter_rule_collection = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyFilterRuleCollection")
            disc_firewall_policy_filter_rule_collection.action = AAZObjectType()
            disc_firewall_policy_filter_rule_collection.rules = AAZListType()

            action = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyFilterRuleCollection").action
            action.type = AAZStrType()

            rules = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyFilterRuleCollection").rules
            rules.Element = AAZObjectType()
            _CreateHelper._build_schema_firewall_policy_rule_read(rules.Element)

            disc_firewall_policy_nat_rule_collection = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyNatRuleCollection")
            disc_firewall_policy_nat_rule_collection.action = AAZObjectType()
            disc_firewall_policy_nat_rule_collection.rules = AAZListType()

            action = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyNatRuleCollection").action
            action.type = AAZStrType()

            rules = cls._schema_on_200_201.properties.rule_collections.Element.discriminate_by("rule_collection_type", "FirewallPolicyNatRuleCollection").rules
            rules.Element = AAZObjectType()
            _CreateHelper._build_schema_firewall_policy_rule_read(rules.Element)

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_firewall_policy_rule_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("description", AAZStrType, ".description")
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_const("ruleType", "ApplicationRule", AAZStrType, ".application_rule", typ_kwargs={"flags": {"required": True}})
        _builder.set_const("ruleType", "NatRule", AAZStrType, ".nat_rule", typ_kwargs={"flags": {"required": True}})
        _builder.set_const("ruleType", "NetworkRule", AAZStrType, ".network_rule", typ_kwargs={"flags": {"required": True}})
        _builder.discriminate_by("ruleType", "ApplicationRule")
        _builder.discriminate_by("ruleType", "NatRule")
        _builder.discriminate_by("ruleType", "NetworkRule")

        disc_application_rule = _builder.get("{ruleType:ApplicationRule}")
        if disc_application_rule is not None:
            disc_application_rule.set_prop("destinationAddresses", AAZListType, ".application_rule.destination_addresses")
            disc_application_rule.set_prop("fqdnTags", AAZListType, ".application_rule.fqdn_tags")
            disc_application_rule.set_prop("protocols", AAZListType, ".application_rule.protocols")
            disc_application_rule.set_prop("sourceAddresses", AAZListType, ".application_rule.source_addresses")
            disc_application_rule.set_prop("sourceIpGroups", AAZListType, ".application_rule.source_ip_groups")
            disc_application_rule.set_prop("targetFqdns", AAZListType, ".application_rule.target_fqdns")
            disc_application_rule.set_prop("targetUrls", AAZListType, ".application_rule.target_urls")
            disc_application_rule.set_prop("terminateTLS", AAZBoolType, ".application_rule.terminate_tls")
            disc_application_rule.set_prop("webCategories", AAZListType, ".application_rule.web_categories")

        destination_addresses = _builder.get("{ruleType:ApplicationRule}.destinationAddresses")
        if destination_addresses is not None:
            destination_addresses.set_elements(AAZStrType, ".")

        fqdn_tags = _builder.get("{ruleType:ApplicationRule}.fqdnTags")
        if fqdn_tags is not None:
            fqdn_tags.set_elements(AAZStrType, ".")

        protocols = _builder.get("{ruleType:ApplicationRule}.protocols")
        if protocols is not None:
            protocols.set_elements(AAZObjectType, ".")

        _elements = _builder.get("{ruleType:ApplicationRule}.protocols[]")
        if _elements is not None:
            _elements.set_prop("port", AAZIntType, ".port")
            _elements.set_prop("protocolType", AAZStrType, ".protocol_type")

        source_addresses = _builder.get("{ruleType:ApplicationRule}.sourceAddresses")
        if source_addresses is not None:
            source_addresses.set_elements(AAZStrType, ".")

        source_ip_groups = _builder.get("{ruleType:ApplicationRule}.sourceIpGroups")
        if source_ip_groups is not None:
            source_ip_groups.set_elements(AAZStrType, ".")

        target_fqdns = _builder.get("{ruleType:ApplicationRule}.targetFqdns")
        if target_fqdns is not None:
            target_fqdns.set_elements(AAZStrType, ".")

        target_urls = _builder.get("{ruleType:ApplicationRule}.targetUrls")
        if target_urls is not None:
            target_urls.set_elements(AAZStrType, ".")

        web_categories = _builder.get("{ruleType:ApplicationRule}.webCategories")
        if web_categories is not None:
            web_categories.set_elements(AAZStrType, ".")

        disc_nat_rule = _builder.get("{ruleType:NatRule}")
        if disc_nat_rule is not None:
            disc_nat_rule.set_prop("destinationAddresses", AAZListType, ".nat_rule.destination_addresses")
            disc_nat_rule.set_prop("destinationPorts", AAZListType, ".nat_rule.destination_ports")
            disc_nat_rule.set_prop("ipProtocols", AAZListType, ".nat_rule.ip_protocols")
            disc_nat_rule.set_prop("sourceAddresses", AAZListType, ".nat_rule.source_addresses")
            disc_nat_rule.set_prop("sourceIpGroups", AAZListType, ".nat_rule.source_ip_groups")
            disc_nat_rule.set_prop("translatedAddress", AAZStrType, ".nat_rule.translated_address")
            disc_nat_rule.set_prop("translatedFqdn", AAZStrType, ".nat_rule.translated_fqdn")
            disc_nat_rule.set_prop("translatedPort", AAZStrType, ".nat_rule.translated_port")

        destination_addresses = _builder.get("{ruleType:NatRule}.destinationAddresses")
        if destination_addresses is not None:
            destination_addresses.set_elements(AAZStrType, ".")

        destination_ports = _builder.get("{ruleType:NatRule}.destinationPorts")
        if destination_ports is not None:
            destination_ports.set_elements(AAZStrType, ".")

        ip_protocols = _builder.get("{ruleType:NatRule}.ipProtocols")
        if ip_protocols is not None:
            ip_protocols.set_elements(AAZStrType, ".")

        source_addresses = _builder.get("{ruleType:NatRule}.sourceAddresses")
        if source_addresses is not None:
            source_addresses.set_elements(AAZStrType, ".")

        source_ip_groups = _builder.get("{ruleType:NatRule}.sourceIpGroups")
        if source_ip_groups is not None:
            source_ip_groups.set_elements(AAZStrType, ".")

        disc_network_rule = _builder.get("{ruleType:NetworkRule}")
        if disc_network_rule is not None:
            disc_network_rule.set_prop("destinationAddresses", AAZListType, ".network_rule.destination_addresses")
            disc_network_rule.set_prop("destinationFqdns", AAZListType, ".network_rule.destination_fqdns")
            disc_network_rule.set_prop("destinationIpGroups", AAZListType, ".network_rule.destination_ip_groups")
            disc_network_rule.set_prop("destinationPorts", AAZListType, ".network_rule.destination_ports")
            disc_network_rule.set_prop("ipProtocols", AAZListType, ".network_rule.ip_protocols")
            disc_network_rule.set_prop("sourceAddresses", AAZListType, ".network_rule.source_addresses")
            disc_network_rule.set_prop("sourceIpGroups", AAZListType, ".network_rule.source_ip_groups")

        destination_addresses = _builder.get("{ruleType:NetworkRule}.destinationAddresses")
        if destination_addresses is not None:
            destination_addresses.set_elements(AAZStrType, ".")

        destination_fqdns = _builder.get("{ruleType:NetworkRule}.destinationFqdns")
        if destination_fqdns is not None:
            destination_fqdns.set_elements(AAZStrType, ".")

        destination_ip_groups = _builder.get("{ruleType:NetworkRule}.destinationIpGroups")
        if destination_ip_groups is not None:
            destination_ip_groups.set_elements(AAZStrType, ".")

        destination_ports = _builder.get("{ruleType:NetworkRule}.destinationPorts")
        if destination_ports is not None:
            destination_ports.set_elements(AAZStrType, ".")

        ip_protocols = _builder.get("{ruleType:NetworkRule}.ipProtocols")
        if ip_protocols is not None:
            ip_protocols.set_elements(AAZStrType, ".")

        source_addresses = _builder.get("{ruleType:NetworkRule}.sourceAddresses")
        if source_addresses is not None:
            source_addresses.set_elements(AAZStrType, ".")

        source_ip_groups = _builder.get("{ruleType:NetworkRule}.sourceIpGroups")
        if source_ip_groups is not None:
            source_ip_groups.set_elements(AAZStrType, ".")

    _schema_firewall_policy_rule_read = None

    @classmethod
    def _build_schema_firewall_policy_rule_read(cls, _schema):
        if cls._schema_firewall_policy_rule_read is not None:
            _schema.description = cls._schema_firewall_policy_rule_read.description
            _schema.name = cls._schema_firewall_policy_rule_read.name
            _schema.rule_type = cls._schema_firewall_policy_rule_read.rule_type
            _schema.discriminate_by(
                "rule_type",
                "ApplicationRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "ApplicationRule",
                )
            )
            _schema.discriminate_by(
                "rule_type",
                "NatRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "NatRule",
                )
            )
            _schema.discriminate_by(
                "rule_type",
                "NetworkRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "NetworkRule",
                )
            )
            return

        cls._schema_firewall_policy_rule_read = _schema_firewall_policy_rule_read = AAZObjectType()

        firewall_policy_rule_read = _schema_firewall_policy_rule_read
        firewall_policy_rule_read.description = AAZStrType()
        firewall_policy_rule_read.name = AAZStrType()
        firewall_policy_rule_read.rule_type = AAZStrType(
            serialized_name="ruleType",
            flags={"required": True},
        )

        disc_application_rule = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule")
        disc_application_rule.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        disc_application_rule.fqdn_tags = AAZListType(
            serialized_name="fqdnTags",
        )
        disc_application_rule.protocols = AAZListType()
        disc_application_rule.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        disc_application_rule.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )
        disc_application_rule.target_fqdns = AAZListType(
            serialized_name="targetFqdns",
        )
        disc_application_rule.target_urls = AAZListType(
            serialized_name="targetUrls",
        )
        disc_application_rule.terminate_tls = AAZBoolType(
            serialized_name="terminateTLS",
        )
        disc_application_rule.web_categories = AAZListType(
            serialized_name="webCategories",
        )

        destination_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").destination_addresses
        destination_addresses.Element = AAZStrType()

        fqdn_tags = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").fqdn_tags
        fqdn_tags.Element = AAZStrType()

        protocols = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").protocols
        protocols.Element = AAZObjectType()

        _element = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").protocols.Element
        _element.port = AAZIntType()
        _element.protocol_type = AAZStrType(
            serialized_name="protocolType",
        )

        source_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").source_ip_groups
        source_ip_groups.Element = AAZStrType()

        target_fqdns = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").target_fqdns
        target_fqdns.Element = AAZStrType()

        target_urls = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").target_urls
        target_urls.Element = AAZStrType()

        web_categories = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "ApplicationRule").web_categories
        web_categories.Element = AAZStrType()

        disc_nat_rule = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule")
        disc_nat_rule.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        disc_nat_rule.destination_ports = AAZListType(
            serialized_name="destinationPorts",
        )
        disc_nat_rule.ip_protocols = AAZListType(
            serialized_name="ipProtocols",
        )
        disc_nat_rule.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        disc_nat_rule.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )
        disc_nat_rule.translated_address = AAZStrType(
            serialized_name="translatedAddress",
        )
        disc_nat_rule.translated_fqdn = AAZStrType(
            serialized_name="translatedFqdn",
        )
        disc_nat_rule.translated_port = AAZStrType(
            serialized_name="translatedPort",
        )

        destination_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule").destination_addresses
        destination_addresses.Element = AAZStrType()

        destination_ports = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule").destination_ports
        destination_ports.Element = AAZStrType()

        ip_protocols = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule").ip_protocols
        ip_protocols.Element = AAZStrType()

        source_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule").source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NatRule").source_ip_groups
        source_ip_groups.Element = AAZStrType()

        disc_network_rule = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule")
        disc_network_rule.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        disc_network_rule.destination_fqdns = AAZListType(
            serialized_name="destinationFqdns",
        )
        disc_network_rule.destination_ip_groups = AAZListType(
            serialized_name="destinationIpGroups",
        )
        disc_network_rule.destination_ports = AAZListType(
            serialized_name="destinationPorts",
        )
        disc_network_rule.ip_protocols = AAZListType(
            serialized_name="ipProtocols",
        )
        disc_network_rule.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        disc_network_rule.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )

        destination_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").destination_addresses
        destination_addresses.Element = AAZStrType()

        destination_fqdns = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").destination_fqdns
        destination_fqdns.Element = AAZStrType()

        destination_ip_groups = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").destination_ip_groups
        destination_ip_groups.Element = AAZStrType()

        destination_ports = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").destination_ports
        destination_ports.Element = AAZStrType()

        ip_protocols = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").ip_protocols
        ip_protocols.Element = AAZStrType()

        source_addresses = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_firewall_policy_rule_read.discriminate_by("rule_type", "NetworkRule").source_ip_groups
        source_ip_groups.Element = AAZStrType()

        _schema.description = cls._schema_firewall_policy_rule_read.description
        _schema.name = cls._schema_firewall_policy_rule_read.name
        _schema.rule_type = cls._schema_firewall_policy_rule_read.rule_type
        _schema.discriminate_by(
                "rule_type",
                "ApplicationRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "ApplicationRule",
                )
            )
        _schema.discriminate_by(
                "rule_type",
                "NatRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "NatRule",
                )
            )
        _schema.discriminate_by(
                "rule_type",
                "NetworkRule",
                cls._schema_firewall_policy_rule_read.discriminate_by(
                    "rule_type",
                    "NetworkRule",
                )
            )


__all__ = ["Create"]
