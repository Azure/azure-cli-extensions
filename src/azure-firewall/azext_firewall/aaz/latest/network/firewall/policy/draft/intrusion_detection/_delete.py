# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall policy draft intrusion-detection delete",
    confirmation="Are you sure you want to perform this operation?",
)
class Delete(AAZCommand):
    """None
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}/firewallpolicydrafts/default", "2023-11-01", "properties.intrusionDetection"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_policy_name = AAZStrArg(
            options=["--firewall-policy-name"],
            help="The name of the Firewall Policy.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FirewallPolicyDraftsGet(ctx=self.ctx)()
        self.pre_instance_delete()
        self.InstanceDeleteByJson(ctx=self.ctx)()
        self.post_instance_delete()
        self.FirewallPolicyDraftsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_delete(self):
        pass

    @register_callback
    def post_instance_delete(self):
        pass

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.intrusionDetection

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.intrusionDetection = value
            return

    class FirewallPolicyDraftsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/firewallPolicyDrafts/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.firewall_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _DeleteHelper._build_schema_firewall_policy_draft_read(cls._schema_on_200)

            return cls._schema_on_200

    class FirewallPolicyDraftsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/firewallPolicyDrafts/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.firewall_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _DeleteHelper._build_schema_firewall_policy_draft_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceDeleteByJson(AAZJsonInstanceDeleteOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._delete_instance())


class _DeleteHelper:
    """Helper class for Delete"""

    _schema_firewall_policy_draft_read = None

    @classmethod
    def _build_schema_firewall_policy_draft_read(cls, _schema):
        if cls._schema_firewall_policy_draft_read is not None:
            _schema.id = cls._schema_firewall_policy_draft_read.id
            _schema.location = cls._schema_firewall_policy_draft_read.location
            _schema.name = cls._schema_firewall_policy_draft_read.name
            _schema.properties = cls._schema_firewall_policy_draft_read.properties
            _schema.tags = cls._schema_firewall_policy_draft_read.tags
            _schema.type = cls._schema_firewall_policy_draft_read.type
            return

        cls._schema_firewall_policy_draft_read = _schema_firewall_policy_draft_read = AAZObjectType()

        firewall_policy_draft_read = _schema_firewall_policy_draft_read
        firewall_policy_draft_read.id = AAZStrType()
        firewall_policy_draft_read.location = AAZStrType()
        firewall_policy_draft_read.name = AAZStrType(
            flags={"read_only": True},
        )
        firewall_policy_draft_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        firewall_policy_draft_read.tags = AAZDictType()
        firewall_policy_draft_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_firewall_policy_draft_read.properties
        properties.base_policy = AAZObjectType(
            serialized_name="basePolicy",
        )
        cls._build_schema_sub_resource_read(properties.base_policy)
        properties.dns_settings = AAZObjectType(
            serialized_name="dnsSettings",
        )
        properties.explicit_proxy = AAZObjectType(
            serialized_name="explicitProxy",
        )
        properties.insights = AAZObjectType()
        properties.intrusion_detection = AAZObjectType(
            serialized_name="intrusionDetection",
        )
        properties.snat = AAZObjectType()
        properties.sql = AAZObjectType()
        properties.threat_intel_mode = AAZStrType(
            serialized_name="threatIntelMode",
        )
        properties.threat_intel_whitelist = AAZObjectType(
            serialized_name="threatIntelWhitelist",
        )

        dns_settings = _schema_firewall_policy_draft_read.properties.dns_settings
        dns_settings.enable_proxy = AAZBoolType(
            serialized_name="enableProxy",
        )
        dns_settings.require_proxy_for_network_rules = AAZBoolType(
            serialized_name="requireProxyForNetworkRules",
            nullable=True,
        )
        dns_settings.servers = AAZListType()

        servers = _schema_firewall_policy_draft_read.properties.dns_settings.servers
        servers.Element = AAZStrType()

        explicit_proxy = _schema_firewall_policy_draft_read.properties.explicit_proxy
        explicit_proxy.enable_explicit_proxy = AAZBoolType(
            serialized_name="enableExplicitProxy",
            nullable=True,
        )
        explicit_proxy.enable_pac_file = AAZBoolType(
            serialized_name="enablePacFile",
            nullable=True,
        )
        explicit_proxy.http_port = AAZIntType(
            serialized_name="httpPort",
        )
        explicit_proxy.https_port = AAZIntType(
            serialized_name="httpsPort",
        )
        explicit_proxy.pac_file = AAZStrType(
            serialized_name="pacFile",
        )
        explicit_proxy.pac_file_port = AAZIntType(
            serialized_name="pacFilePort",
        )

        insights = _schema_firewall_policy_draft_read.properties.insights
        insights.is_enabled = AAZBoolType(
            serialized_name="isEnabled",
        )
        insights.log_analytics_resources = AAZObjectType(
            serialized_name="logAnalyticsResources",
        )
        insights.retention_days = AAZIntType(
            serialized_name="retentionDays",
        )

        log_analytics_resources = _schema_firewall_policy_draft_read.properties.insights.log_analytics_resources
        log_analytics_resources.default_workspace_id = AAZObjectType(
            serialized_name="defaultWorkspaceId",
        )
        cls._build_schema_sub_resource_read(log_analytics_resources.default_workspace_id)
        log_analytics_resources.workspaces = AAZListType()

        workspaces = _schema_firewall_policy_draft_read.properties.insights.log_analytics_resources.workspaces
        workspaces.Element = AAZObjectType()

        _element = _schema_firewall_policy_draft_read.properties.insights.log_analytics_resources.workspaces.Element
        _element.region = AAZStrType()
        _element.workspace_id = AAZObjectType(
            serialized_name="workspaceId",
        )
        cls._build_schema_sub_resource_read(_element.workspace_id)

        intrusion_detection = _schema_firewall_policy_draft_read.properties.intrusion_detection
        intrusion_detection.configuration = AAZObjectType()
        intrusion_detection.mode = AAZStrType()
        intrusion_detection.profile = AAZStrType()

        configuration = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration
        configuration.bypass_traffic_settings = AAZListType(
            serialized_name="bypassTrafficSettings",
        )
        configuration.private_ranges = AAZListType(
            serialized_name="privateRanges",
        )
        configuration.signature_overrides = AAZListType(
            serialized_name="signatureOverrides",
        )

        bypass_traffic_settings = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings
        bypass_traffic_settings.Element = AAZObjectType()

        _element = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element
        _element.description = AAZStrType()
        _element.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        _element.destination_ip_groups = AAZListType(
            serialized_name="destinationIpGroups",
        )
        _element.destination_ports = AAZListType(
            serialized_name="destinationPorts",
        )
        _element.name = AAZStrType()
        _element.protocol = AAZStrType()
        _element.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        _element.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )

        destination_addresses = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_addresses
        destination_addresses.Element = AAZStrType()

        destination_ip_groups = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ip_groups
        destination_ip_groups.Element = AAZStrType()

        destination_ports = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ports
        destination_ports.Element = AAZStrType()

        source_addresses = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_ip_groups
        source_ip_groups.Element = AAZStrType()

        private_ranges = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.private_ranges
        private_ranges.Element = AAZStrType()

        signature_overrides = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.signature_overrides
        signature_overrides.Element = AAZObjectType()

        _element = _schema_firewall_policy_draft_read.properties.intrusion_detection.configuration.signature_overrides.Element
        _element.id = AAZStrType()
        _element.mode = AAZStrType()

        snat = _schema_firewall_policy_draft_read.properties.snat
        snat.auto_learn_private_ranges = AAZStrType(
            serialized_name="autoLearnPrivateRanges",
        )
        snat.private_ranges = AAZListType(
            serialized_name="privateRanges",
        )

        private_ranges = _schema_firewall_policy_draft_read.properties.snat.private_ranges
        private_ranges.Element = AAZStrType()

        sql = _schema_firewall_policy_draft_read.properties.sql
        sql.allow_sql_redirect = AAZBoolType(
            serialized_name="allowSqlRedirect",
        )

        threat_intel_whitelist = _schema_firewall_policy_draft_read.properties.threat_intel_whitelist
        threat_intel_whitelist.fqdns = AAZListType()
        threat_intel_whitelist.ip_addresses = AAZListType(
            serialized_name="ipAddresses",
        )

        fqdns = _schema_firewall_policy_draft_read.properties.threat_intel_whitelist.fqdns
        fqdns.Element = AAZStrType()

        ip_addresses = _schema_firewall_policy_draft_read.properties.threat_intel_whitelist.ip_addresses
        ip_addresses.Element = AAZStrType()

        tags = _schema_firewall_policy_draft_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_firewall_policy_draft_read.id
        _schema.location = cls._schema_firewall_policy_draft_read.location
        _schema.name = cls._schema_firewall_policy_draft_read.name
        _schema.properties = cls._schema_firewall_policy_draft_read.properties
        _schema.tags = cls._schema_firewall_policy_draft_read.tags
        _schema.type = cls._schema_firewall_policy_draft_read.type

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Delete"]
