# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall policy list-idps-signature",
)
class ListIdpsSignature(AAZCommand):
    """Retrieves the current status of IDPS signatures for the relevant policy. Maximal amount of returned signatures is 1000.
    """

    _aaz_info = {
        "version": "2024-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}/listidpssignatures", "2024-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_policy_name = AAZStrArg(
            options=["--firewall-policy-name"],
            help="The name of the Firewall Policy.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.filters = AAZListArg(
            options=["--filters"],
            arg_group="Parameters",
            help="Contain all filters names and values",
        )
        _args_schema.order_by = AAZObjectArg(
            options=["--order-by"],
            arg_group="Parameters",
            help="Column to sort response by",
        )
        _args_schema.results_per_page = AAZIntArg(
            options=["--results-per-page"],
            arg_group="Parameters",
            help="The number of the results to return in each page",
            fmt=AAZIntArgFormat(
                maximum=1000,
                minimum=1,
            ),
        )
        _args_schema.search = AAZStrArg(
            options=["--search"],
            arg_group="Parameters",
            help="Search term in all columns",
        )
        _args_schema.skip = AAZIntArg(
            options=["--skip"],
            arg_group="Parameters",
            help="The number of records matching the filter to skip",
        )

        filters = cls._args_schema.filters
        filters.Element = AAZObjectArg()

        _element = cls._args_schema.filters.Element
        _element.field = AAZStrArg(
            options=["field"],
            help="The name of the field we would like to filter",
        )
        _element.values = AAZListArg(
            options=["values"],
            help="List of values to filter the current field by",
        )

        values = cls._args_schema.filters.Element.values
        values.Element = AAZStrArg()

        order_by = cls._args_schema.order_by
        order_by.field = AAZStrArg(
            options=["field"],
            help="Describes the actual column name to sort by",
        )
        order_by.order = AAZStrArg(
            options=["order"],
            help="Describes if results should be in ascending/descending order",
            enum={"Ascending": "Ascending", "Descending": "Descending"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.FirewallPolicyIdpsSignaturesList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallPolicyIdpsSignaturesList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/listIdpsSignatures",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.firewall_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("filters", AAZListType, ".filters")
            _builder.set_prop("orderBy", AAZObjectType, ".order_by")
            _builder.set_prop("resultsPerPage", AAZIntType, ".results_per_page")
            _builder.set_prop("search", AAZStrType, ".search")
            _builder.set_prop("skip", AAZIntType, ".skip")

            filters = _builder.get(".filters")
            if filters is not None:
                filters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".filters[]")
            if _elements is not None:
                _elements.set_prop("field", AAZStrType, ".field")
                _elements.set_prop("values", AAZListType, ".values")

            values = _builder.get(".filters[].values")
            if values is not None:
                values.set_elements(AAZStrType, ".")

            order_by = _builder.get(".orderBy")
            if order_by is not None:
                order_by.set_prop("field", AAZStrType, ".field")
                order_by.set_prop("order", AAZStrType, ".order")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.matching_records_count = AAZIntType(
                serialized_name="matchingRecordsCount",
            )
            _schema_on_200.signatures = AAZListType()

            signatures = cls._schema_on_200.signatures
            signatures.Element = AAZObjectType()

            _element = cls._schema_on_200.signatures.Element
            _element.description = AAZStrType()
            _element.destination_ports = AAZListType(
                serialized_name="destinationPorts",
            )
            _element.direction = AAZIntType()
            _element.group = AAZStrType()
            _element.inherited_from_parent_policy = AAZBoolType(
                serialized_name="inheritedFromParentPolicy",
            )
            _element.last_updated = AAZStrType(
                serialized_name="lastUpdated",
            )
            _element.mode = AAZIntType()
            _element.protocol = AAZStrType()
            _element.severity = AAZIntType()
            _element.signature_id = AAZIntType(
                serialized_name="signatureId",
            )
            _element.source_ports = AAZListType(
                serialized_name="sourcePorts",
            )

            destination_ports = cls._schema_on_200.signatures.Element.destination_ports
            destination_ports.Element = AAZStrType()

            source_ports = cls._schema_on_200.signatures.Element.source_ports
            source_ports.Element = AAZStrType()

            return cls._schema_on_200


class _ListIdpsSignatureHelper:
    """Helper class for ListIdpsSignature"""


__all__ = ["ListIdpsSignature"]
