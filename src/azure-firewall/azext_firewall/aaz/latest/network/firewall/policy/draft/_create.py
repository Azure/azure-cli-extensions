# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall policy draft create",
)
class Create(AAZCommand):
    """Create a draft Firewall Policy.
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}/firewallpolicydrafts/default", "2023-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_policy_name = AAZStrArg(
            options=["--firewall-policy-name"],
            help="The name of the Firewall Policy.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Parameters",
            help="Resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.base_policy = AAZObjectArg(
            options=["--base-policy"],
            arg_group="Properties",
            help="The parent firewall policy from which rules are inherited.",
        )
        cls._build_args_sub_resource_create(_args_schema.base_policy)
        _args_schema.dns_settings = AAZObjectArg(
            options=["--dns-settings"],
            arg_group="Properties",
            help="DNS Proxy Settings definition.",
        )
        _args_schema.explicit_proxy = AAZObjectArg(
            options=["--explicit-proxy"],
            arg_group="Properties",
            help="Explicit Proxy Settings definition.",
        )
        _args_schema.insights = AAZObjectArg(
            options=["--insights"],
            arg_group="Properties",
            help="Insights on Firewall Policy.",
        )
        _args_schema.intrusion_detection = AAZObjectArg(
            options=["--intrusion-detection"],
            arg_group="Properties",
            help="The configuration for Intrusion detection.",
        )
        _args_schema.snat = AAZObjectArg(
            options=["--snat"],
            arg_group="Properties",
            help="The private IP addresses/IP ranges to which traffic will not be SNAT.",
        )
        _args_schema.sql = AAZObjectArg(
            options=["--sql"],
            arg_group="Properties",
            help="SQL Settings definition.",
        )
        _args_schema.threat_intel_mode = AAZStrArg(
            options=["--threat-intel-mode"],
            arg_group="Properties",
            help="The operation mode for Threat Intelligence.",
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )
        _args_schema.threat_intel_whitelist = AAZObjectArg(
            options=["--threat-intel-whitelist"],
            arg_group="Properties",
            help="ThreatIntel Whitelist for Firewall Policy.",
        )

        dns_settings = cls._args_schema.dns_settings
        dns_settings.enable_proxy = AAZBoolArg(
            options=["enable-proxy"],
            help="Enable DNS Proxy on Firewalls attached to the Firewall Policy.",
        )
        dns_settings.require_proxy_for_network_rules = AAZBoolArg(
            options=["require-proxy-for-network-rules"],
            help="FQDNs in Network Rules are supported when set to true.",
            nullable=True,
        )
        dns_settings.servers = AAZListArg(
            options=["servers"],
            help="List of Custom DNS Servers.",
        )

        servers = cls._args_schema.dns_settings.servers
        servers.Element = AAZStrArg()

        explicit_proxy = cls._args_schema.explicit_proxy
        explicit_proxy.enable_explicit_proxy = AAZBoolArg(
            options=["enable-explicit-proxy"],
            help="When set to true, explicit proxy mode is enabled.",
            nullable=True,
        )
        explicit_proxy.enable_pac_file = AAZBoolArg(
            options=["enable-pac-file"],
            help="When set to true, pac file port and url needs to be provided.",
            nullable=True,
        )
        explicit_proxy.http_port = AAZIntArg(
            options=["http-port"],
            help="Port number for explicit proxy http protocol, cannot be greater than 64000.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        explicit_proxy.https_port = AAZIntArg(
            options=["https-port"],
            help="Port number for explicit proxy https protocol, cannot be greater than 64000.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        explicit_proxy.pac_file = AAZStrArg(
            options=["pac-file"],
            help="SAS URL for PAC file.",
        )
        explicit_proxy.pac_file_port = AAZIntArg(
            options=["pac-file-port"],
            help="Port number for firewall to serve PAC file.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )

        insights = cls._args_schema.insights
        insights.is_enabled = AAZBoolArg(
            options=["is-enabled"],
            help="A flag to indicate if the insights are enabled on the policy.",
        )
        insights.log_analytics_resources = AAZObjectArg(
            options=["log-analytics-resources"],
            help="Workspaces needed to configure the Firewall Policy Insights.",
        )
        insights.retention_days = AAZIntArg(
            options=["retention-days"],
            help="Number of days the insights should be enabled on the policy.",
        )

        log_analytics_resources = cls._args_schema.insights.log_analytics_resources
        log_analytics_resources.default_workspace_id = AAZObjectArg(
            options=["default-workspace-id"],
            help="The default workspace Id for Firewall Policy Insights.",
        )
        cls._build_args_sub_resource_create(log_analytics_resources.default_workspace_id)
        log_analytics_resources.workspaces = AAZListArg(
            options=["workspaces"],
            help="List of workspaces for Firewall Policy Insights.",
        )

        workspaces = cls._args_schema.insights.log_analytics_resources.workspaces
        workspaces.Element = AAZObjectArg()

        _element = cls._args_schema.insights.log_analytics_resources.workspaces.Element
        _element.region = AAZStrArg(
            options=["region"],
            help="Region to configure the Workspace.",
        )
        _element.workspace_id = AAZObjectArg(
            options=["workspace-id"],
            help="The workspace Id for Firewall Policy Insights.",
        )
        cls._build_args_sub_resource_create(_element.workspace_id)

        intrusion_detection = cls._args_schema.intrusion_detection
        intrusion_detection.configuration = AAZObjectArg(
            options=["configuration"],
            help="Intrusion detection configuration properties.",
        )
        intrusion_detection.mode = AAZStrArg(
            options=["mode"],
            help="Intrusion detection general state. When attached to a parent policy, the firewall's effective IDPS mode is the stricter mode of the two.",
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )
        intrusion_detection.profile = AAZStrArg(
            options=["profile"],
            help="IDPS profile name. When attached to a parent policy, the firewall's effective profile is the profile name of the parent policy.",
            enum={"Advanced": "Advanced", "Basic": "Basic", "Extended": "Extended", "Standard": "Standard"},
        )

        configuration = cls._args_schema.intrusion_detection.configuration
        configuration.bypass_traffic_settings = AAZListArg(
            options=["bypass-traffic-settings"],
            help="List of rules for traffic to bypass.",
        )
        configuration.private_ranges = AAZListArg(
            options=["private-ranges"],
            help="IDPS Private IP address ranges are used to identify traffic direction (i.e. inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918 are considered private IP addresses. To modify default ranges, specify your Private IP address ranges with this property",
        )
        configuration.signature_overrides = AAZListArg(
            options=["signature-overrides"],
            help="List of specific signatures states.",
        )

        bypass_traffic_settings = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings
        bypass_traffic_settings.Element = AAZObjectArg()

        _element = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element
        _element.description = AAZStrArg(
            options=["description"],
            help="Description of the bypass traffic rule.",
        )
        _element.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses or ranges for this rule.",
        )
        _element.destination_ip_groups = AAZListArg(
            options=["destination-ip-groups"],
            help="List of destination IpGroups for this rule.",
        )
        _element.destination_ports = AAZListArg(
            options=["destination-ports"],
            help="List of destination ports or ranges.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the bypass traffic rule.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="The rule bypass protocol.",
            enum={"ANY": "ANY", "ICMP": "ICMP", "TCP": "TCP", "UDP": "UDP"},
        )
        _element.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses or ranges for this rule.",
        )
        _element.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
        )

        destination_addresses = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_addresses
        destination_addresses.Element = AAZStrArg()

        destination_ip_groups = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ip_groups
        destination_ip_groups.Element = AAZStrArg()

        destination_ports = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ports
        destination_ports.Element = AAZStrArg()

        source_addresses = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element.source_addresses
        source_addresses.Element = AAZStrArg()

        source_ip_groups = cls._args_schema.intrusion_detection.configuration.bypass_traffic_settings.Element.source_ip_groups
        source_ip_groups.Element = AAZStrArg()

        private_ranges = cls._args_schema.intrusion_detection.configuration.private_ranges
        private_ranges.Element = AAZStrArg()

        signature_overrides = cls._args_schema.intrusion_detection.configuration.signature_overrides
        signature_overrides.Element = AAZObjectArg()

        _element = cls._args_schema.intrusion_detection.configuration.signature_overrides.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Signature id.",
        )
        _element.mode = AAZStrArg(
            options=["mode"],
            help="The signature state.",
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )

        snat = cls._args_schema.snat
        snat.auto_learn_private_ranges = AAZStrArg(
            options=["auto-learn-private-ranges"],
            help="The operation mode for automatically learning private ranges to not be SNAT",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        snat.private_ranges = AAZListArg(
            options=["private-ranges"],
            help="List of private IP addresses/IP address ranges to not be SNAT.",
        )

        private_ranges = cls._args_schema.snat.private_ranges
        private_ranges.Element = AAZStrArg()

        sql = cls._args_schema.sql
        sql.allow_sql_redirect = AAZBoolArg(
            options=["allow-sql-redirect"],
            help="A flag to indicate if SQL Redirect traffic filtering is enabled. Turning on the flag requires no rule using port 11000-11999.",
        )

        threat_intel_whitelist = cls._args_schema.threat_intel_whitelist
        threat_intel_whitelist.fqdns = AAZListArg(
            options=["fqdns"],
            help="List of FQDNs for the ThreatIntel Whitelist.",
        )
        threat_intel_whitelist.ip_addresses = AAZListArg(
            options=["ip-addresses"],
            help="List of IP addresses for the ThreatIntel Whitelist.",
        )

        fqdns = cls._args_schema.threat_intel_whitelist.fqdns
        fqdns.Element = AAZStrArg()

        ip_addresses = cls._args_schema.threat_intel_whitelist.ip_addresses
        ip_addresses.Element = AAZStrArg()
        return cls._args_schema

    _args_sub_resource_create = None

    @classmethod
    def _build_args_sub_resource_create(cls, _schema):
        if cls._args_sub_resource_create is not None:
            _schema.id = cls._args_sub_resource_create.id
            return

        cls._args_sub_resource_create = AAZObjectArg()

        sub_resource_create = cls._args_sub_resource_create
        sub_resource_create.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )

        _schema.id = cls._args_sub_resource_create.id

    def _execute_operations(self):
        self.pre_operations()
        self.FirewallPolicyDraftsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallPolicyDraftsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/firewallPolicyDrafts/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.firewall_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                _CreateHelper._build_schema_sub_resource_create(properties.set_prop("basePolicy", AAZObjectType, ".base_policy"))
                properties.set_prop("dnsSettings", AAZObjectType, ".dns_settings")
                properties.set_prop("explicitProxy", AAZObjectType, ".explicit_proxy")
                properties.set_prop("insights", AAZObjectType, ".insights")
                properties.set_prop("intrusionDetection", AAZObjectType, ".intrusion_detection")
                properties.set_prop("snat", AAZObjectType, ".snat")
                properties.set_prop("sql", AAZObjectType, ".sql")
                properties.set_prop("threatIntelMode", AAZStrType, ".threat_intel_mode")
                properties.set_prop("threatIntelWhitelist", AAZObjectType, ".threat_intel_whitelist")

            dns_settings = _builder.get(".properties.dnsSettings")
            if dns_settings is not None:
                dns_settings.set_prop("enableProxy", AAZBoolType, ".enable_proxy")
                dns_settings.set_prop("requireProxyForNetworkRules", AAZBoolType, ".require_proxy_for_network_rules", typ_kwargs={"nullable": True})
                dns_settings.set_prop("servers", AAZListType, ".servers")

            servers = _builder.get(".properties.dnsSettings.servers")
            if servers is not None:
                servers.set_elements(AAZStrType, ".")

            explicit_proxy = _builder.get(".properties.explicitProxy")
            if explicit_proxy is not None:
                explicit_proxy.set_prop("enableExplicitProxy", AAZBoolType, ".enable_explicit_proxy", typ_kwargs={"nullable": True})
                explicit_proxy.set_prop("enablePacFile", AAZBoolType, ".enable_pac_file", typ_kwargs={"nullable": True})
                explicit_proxy.set_prop("httpPort", AAZIntType, ".http_port")
                explicit_proxy.set_prop("httpsPort", AAZIntType, ".https_port")
                explicit_proxy.set_prop("pacFile", AAZStrType, ".pac_file")
                explicit_proxy.set_prop("pacFilePort", AAZIntType, ".pac_file_port")

            insights = _builder.get(".properties.insights")
            if insights is not None:
                insights.set_prop("isEnabled", AAZBoolType, ".is_enabled")
                insights.set_prop("logAnalyticsResources", AAZObjectType, ".log_analytics_resources")
                insights.set_prop("retentionDays", AAZIntType, ".retention_days")

            log_analytics_resources = _builder.get(".properties.insights.logAnalyticsResources")
            if log_analytics_resources is not None:
                _CreateHelper._build_schema_sub_resource_create(log_analytics_resources.set_prop("defaultWorkspaceId", AAZObjectType, ".default_workspace_id"))
                log_analytics_resources.set_prop("workspaces", AAZListType, ".workspaces")

            workspaces = _builder.get(".properties.insights.logAnalyticsResources.workspaces")
            if workspaces is not None:
                workspaces.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.insights.logAnalyticsResources.workspaces[]")
            if _elements is not None:
                _elements.set_prop("region", AAZStrType, ".region")
                _CreateHelper._build_schema_sub_resource_create(_elements.set_prop("workspaceId", AAZObjectType, ".workspace_id"))

            intrusion_detection = _builder.get(".properties.intrusionDetection")
            if intrusion_detection is not None:
                intrusion_detection.set_prop("configuration", AAZObjectType, ".configuration")
                intrusion_detection.set_prop("mode", AAZStrType, ".mode")
                intrusion_detection.set_prop("profile", AAZStrType, ".profile")

            configuration = _builder.get(".properties.intrusionDetection.configuration")
            if configuration is not None:
                configuration.set_prop("bypassTrafficSettings", AAZListType, ".bypass_traffic_settings")
                configuration.set_prop("privateRanges", AAZListType, ".private_ranges")
                configuration.set_prop("signatureOverrides", AAZListType, ".signature_overrides")

            bypass_traffic_settings = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings")
            if bypass_traffic_settings is not None:
                bypass_traffic_settings.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("destinationAddresses", AAZListType, ".destination_addresses")
                _elements.set_prop("destinationIpGroups", AAZListType, ".destination_ip_groups")
                _elements.set_prop("destinationPorts", AAZListType, ".destination_ports")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("sourceAddresses", AAZListType, ".source_addresses")
                _elements.set_prop("sourceIpGroups", AAZListType, ".source_ip_groups")

            destination_addresses = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationAddresses")
            if destination_addresses is not None:
                destination_addresses.set_elements(AAZStrType, ".")

            destination_ip_groups = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationIpGroups")
            if destination_ip_groups is not None:
                destination_ip_groups.set_elements(AAZStrType, ".")

            destination_ports = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[].destinationPorts")
            if destination_ports is not None:
                destination_ports.set_elements(AAZStrType, ".")

            source_addresses = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceAddresses")
            if source_addresses is not None:
                source_addresses.set_elements(AAZStrType, ".")

            source_ip_groups = _builder.get(".properties.intrusionDetection.configuration.bypassTrafficSettings[].sourceIpGroups")
            if source_ip_groups is not None:
                source_ip_groups.set_elements(AAZStrType, ".")

            private_ranges = _builder.get(".properties.intrusionDetection.configuration.privateRanges")
            if private_ranges is not None:
                private_ranges.set_elements(AAZStrType, ".")

            signature_overrides = _builder.get(".properties.intrusionDetection.configuration.signatureOverrides")
            if signature_overrides is not None:
                signature_overrides.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.intrusionDetection.configuration.signatureOverrides[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("mode", AAZStrType, ".mode")

            snat = _builder.get(".properties.snat")
            if snat is not None:
                snat.set_prop("autoLearnPrivateRanges", AAZStrType, ".auto_learn_private_ranges")
                snat.set_prop("privateRanges", AAZListType, ".private_ranges")

            private_ranges = _builder.get(".properties.snat.privateRanges")
            if private_ranges is not None:
                private_ranges.set_elements(AAZStrType, ".")

            sql = _builder.get(".properties.sql")
            if sql is not None:
                sql.set_prop("allowSqlRedirect", AAZBoolType, ".allow_sql_redirect")

            threat_intel_whitelist = _builder.get(".properties.threatIntelWhitelist")
            if threat_intel_whitelist is not None:
                threat_intel_whitelist.set_prop("fqdns", AAZListType, ".fqdns")
                threat_intel_whitelist.set_prop("ipAddresses", AAZListType, ".ip_addresses")

            fqdns = _builder.get(".properties.threatIntelWhitelist.fqdns")
            if fqdns is not None:
                fqdns.set_elements(AAZStrType, ".")

            ip_addresses = _builder.get(".properties.threatIntelWhitelist.ipAddresses")
            if ip_addresses is not None:
                ip_addresses.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.base_policy = AAZObjectType(
                serialized_name="basePolicy",
            )
            _CreateHelper._build_schema_sub_resource_read(properties.base_policy)
            properties.dns_settings = AAZObjectType(
                serialized_name="dnsSettings",
            )
            properties.explicit_proxy = AAZObjectType(
                serialized_name="explicitProxy",
            )
            properties.insights = AAZObjectType()
            properties.intrusion_detection = AAZObjectType(
                serialized_name="intrusionDetection",
            )
            properties.snat = AAZObjectType()
            properties.sql = AAZObjectType()
            properties.threat_intel_mode = AAZStrType(
                serialized_name="threatIntelMode",
            )
            properties.threat_intel_whitelist = AAZObjectType(
                serialized_name="threatIntelWhitelist",
            )

            dns_settings = cls._schema_on_200_201.properties.dns_settings
            dns_settings.enable_proxy = AAZBoolType(
                serialized_name="enableProxy",
            )
            dns_settings.require_proxy_for_network_rules = AAZBoolType(
                serialized_name="requireProxyForNetworkRules",
                nullable=True,
            )
            dns_settings.servers = AAZListType()

            servers = cls._schema_on_200_201.properties.dns_settings.servers
            servers.Element = AAZStrType()

            explicit_proxy = cls._schema_on_200_201.properties.explicit_proxy
            explicit_proxy.enable_explicit_proxy = AAZBoolType(
                serialized_name="enableExplicitProxy",
                nullable=True,
            )
            explicit_proxy.enable_pac_file = AAZBoolType(
                serialized_name="enablePacFile",
                nullable=True,
            )
            explicit_proxy.http_port = AAZIntType(
                serialized_name="httpPort",
            )
            explicit_proxy.https_port = AAZIntType(
                serialized_name="httpsPort",
            )
            explicit_proxy.pac_file = AAZStrType(
                serialized_name="pacFile",
            )
            explicit_proxy.pac_file_port = AAZIntType(
                serialized_name="pacFilePort",
            )

            insights = cls._schema_on_200_201.properties.insights
            insights.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
            )
            insights.log_analytics_resources = AAZObjectType(
                serialized_name="logAnalyticsResources",
            )
            insights.retention_days = AAZIntType(
                serialized_name="retentionDays",
            )

            log_analytics_resources = cls._schema_on_200_201.properties.insights.log_analytics_resources
            log_analytics_resources.default_workspace_id = AAZObjectType(
                serialized_name="defaultWorkspaceId",
            )
            _CreateHelper._build_schema_sub_resource_read(log_analytics_resources.default_workspace_id)
            log_analytics_resources.workspaces = AAZListType()

            workspaces = cls._schema_on_200_201.properties.insights.log_analytics_resources.workspaces
            workspaces.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.insights.log_analytics_resources.workspaces.Element
            _element.region = AAZStrType()
            _element.workspace_id = AAZObjectType(
                serialized_name="workspaceId",
            )
            _CreateHelper._build_schema_sub_resource_read(_element.workspace_id)

            intrusion_detection = cls._schema_on_200_201.properties.intrusion_detection
            intrusion_detection.configuration = AAZObjectType()
            intrusion_detection.mode = AAZStrType()
            intrusion_detection.profile = AAZStrType()

            configuration = cls._schema_on_200_201.properties.intrusion_detection.configuration
            configuration.bypass_traffic_settings = AAZListType(
                serialized_name="bypassTrafficSettings",
            )
            configuration.private_ranges = AAZListType(
                serialized_name="privateRanges",
            )
            configuration.signature_overrides = AAZListType(
                serialized_name="signatureOverrides",
            )

            bypass_traffic_settings = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings
            bypass_traffic_settings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element
            _element.description = AAZStrType()
            _element.destination_addresses = AAZListType(
                serialized_name="destinationAddresses",
            )
            _element.destination_ip_groups = AAZListType(
                serialized_name="destinationIpGroups",
            )
            _element.destination_ports = AAZListType(
                serialized_name="destinationPorts",
            )
            _element.name = AAZStrType()
            _element.protocol = AAZStrType()
            _element.source_addresses = AAZListType(
                serialized_name="sourceAddresses",
            )
            _element.source_ip_groups = AAZListType(
                serialized_name="sourceIpGroups",
            )

            destination_addresses = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_addresses
            destination_addresses.Element = AAZStrType()

            destination_ip_groups = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ip_groups
            destination_ip_groups.Element = AAZStrType()

            destination_ports = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ports
            destination_ports.Element = AAZStrType()

            source_addresses = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_addresses
            source_addresses.Element = AAZStrType()

            source_ip_groups = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_ip_groups
            source_ip_groups.Element = AAZStrType()

            private_ranges = cls._schema_on_200_201.properties.intrusion_detection.configuration.private_ranges
            private_ranges.Element = AAZStrType()

            signature_overrides = cls._schema_on_200_201.properties.intrusion_detection.configuration.signature_overrides
            signature_overrides.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.intrusion_detection.configuration.signature_overrides.Element
            _element.id = AAZStrType()
            _element.mode = AAZStrType()

            snat = cls._schema_on_200_201.properties.snat
            snat.auto_learn_private_ranges = AAZStrType(
                serialized_name="autoLearnPrivateRanges",
            )
            snat.private_ranges = AAZListType(
                serialized_name="privateRanges",
            )

            private_ranges = cls._schema_on_200_201.properties.snat.private_ranges
            private_ranges.Element = AAZStrType()

            sql = cls._schema_on_200_201.properties.sql
            sql.allow_sql_redirect = AAZBoolType(
                serialized_name="allowSqlRedirect",
            )

            threat_intel_whitelist = cls._schema_on_200_201.properties.threat_intel_whitelist
            threat_intel_whitelist.fqdns = AAZListType()
            threat_intel_whitelist.ip_addresses = AAZListType(
                serialized_name="ipAddresses",
            )

            fqdns = cls._schema_on_200_201.properties.threat_intel_whitelist.fqdns
            fqdns.Element = AAZStrType()

            ip_addresses = cls._schema_on_200_201.properties.threat_intel_whitelist.ip_addresses
            ip_addresses.Element = AAZStrType()

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_sub_resource_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Create"]
