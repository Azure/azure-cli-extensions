# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall policy draft create",
     is_preview=True,
)

class Create(AAZCommand):
    """Create a draft Firewall Policy.
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/firewallpolicies/{}/firewallpolicydrafts/default", "2023-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.firewall_policy_name = AAZStrArg(
            options=["--policy-name"],
            help="The name of the Firewall Policy.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.base_policy = AAZStrArg(
            options=["--base-policy"],
            help="The name or ID of parent firewall policy from which rules are inherited.",
        )
        _args_schema.sql = AAZBoolArg(
            options=["--sql"],
            help="A flag to indicate if SQL Redirect traffic filtering is enabled.",
            is_preview=True,
        )
        _args_schema.threat_intel_mode = AAZStrArg(
            options=["--threat-intel-mode"],
            help="The operation mode for Threat Intelligence.",
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Space-separated tags: key[=value] [key[=value] ...]. Use \"\" to clear existing tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "DNS"
        _args_schema = cls._args_schema
        _args_schema.enable_dns_proxy = AAZBoolArg(
            options=["--enable-dns-proxy"],
            arg_group="DNS",
            help="Enable DNS Proxy.",
        )
        _args_schema.dns_servers = AAZListArg(
            options=["--dns-servers"],
            arg_group="DNS",
            help="Space-separated list of DNS server IP addresses.",
        )
        dns_servers = cls._args_schema.dns_servers
        dns_servers.Element = AAZStrArg()

        # define Arg Group "Explicit Proxy"

        _args_schema = cls._args_schema
        _args_schema.explicit_proxy = AAZObjectArg(
            options=["--explicit-proxy"],
            arg_group="Explicit Proxy",
            help="Explicit Proxy Settings definition.",
        )

        explicit_proxy = cls._args_schema.explicit_proxy
        explicit_proxy.enable_explicit_proxy = AAZBoolArg(
            options=["enable-explicit-proxy"],
            help="When set to true, explicit proxy mode is enabled.",
            nullable=True,
        )
        explicit_proxy.enable_pac_file = AAZBoolArg(
            options=["enable-pac-file"],
            help="When set to true, pac file port and url needs to be provided.",
            nullable=True,
        )
        explicit_proxy.http_port = AAZIntArg(
            options=["http-port"],
            help="Port number for explicit proxy http protocol, cannot be greater than 64000.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        explicit_proxy.https_port = AAZIntArg(
            options=["https-port"],
            help="Port number for explicit proxy https protocol, cannot be greater than 64000.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        explicit_proxy.pac_file = AAZStrArg(
            options=["pac-file"],
            help="SAS URL for PAC file.",
        )
        explicit_proxy.pac_file_port = AAZIntArg(
            options=["pac-file-port"],
            help="Port number for firewall to serve PAC file.",
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )

        # define Arg Group "Intrustion Detection"

        _args_schema = cls._args_schema
        _args_schema.idps_mode = AAZStrArg(
            options=["--idps-mode"],
            arg_group="Intrustion Detection",
            help="IDPS mode.",
            is_preview=True,
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )

        # define Arg Group "Snat"

        _args_schema = cls._args_schema
        _args_schema.auto_learn_private_ranges = AAZStrArg(
            options=["--learn-ranges", "--auto-learn-private-ranges"],
            arg_group="Snat",
            help="The operation mode for automatically learning private ranges to not be SNAT",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.private_ranges = AAZListArg(
            options=["--private-ranges"],
            arg_group="Snat",
            help="List of private IP addresses/IP address ranges to not be SNAT.",
        )

        private_ranges = cls._args_schema.private_ranges
        private_ranges.Element = AAZStrArg()


        # define Arg Group "Threat Intel Allowlist"

        _args_schema = cls._args_schema
        _args_schema.fqdns = AAZListArg(
            options=["--fqdns"],
            arg_group="Threat Intel Allowlist",
            help="Space-separated list of FQDNs.",
        )
        _args_schema.ip_addresses = AAZListArg(
            options=["--ip-addresses"],
            arg_group="Threat Intel Allowlist",
            help="Space-separated list of IPv4 addresses.",
        )

        fqdns = cls._args_schema.fqdns
        fqdns.Element = AAZStrArg()

        ip_addresses = cls._args_schema.ip_addresses
        ip_addresses.Element = AAZStrArg()
        return cls._args_schema

    _args_sub_resource_create = None

    @classmethod
    def _build_args_sub_resource_create(cls, _schema):
        if cls._args_sub_resource_create is not None:
            _schema.id = cls._args_sub_resource_create.id
            return

        cls._args_sub_resource_create = AAZObjectArg()

        sub_resource_create = cls._args_sub_resource_create
        sub_resource_create.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
        )

        _schema.id = cls._args_sub_resource_create.id

    def _execute_operations(self):
        self.pre_operations()
        yield self.FirewallPolicyDraftsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class FirewallPolicyDraftsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/firewallPolicies/{firewallPolicyName}/firewallPolicyDrafts/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "firewallPolicyName", self.ctx.args.firewall_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("basePolicy", AAZObjectType)
                properties.set_prop("dnsSettings", AAZObjectType)
                properties.set_prop("explicitProxy", AAZObjectType, ".explicit_proxy")
                properties.set_prop("intrusionDetection", AAZObjectType)
                properties.set_prop("snat", AAZObjectType)
                properties.set_prop("sql", AAZObjectType)
                properties.set_prop("threatIntelMode", AAZStrType, ".threat_intel_mode")
                properties.set_prop("threatIntelWhitelist", AAZObjectType)

            base_policy = _builder.get(".properties.basePolicy")
            if base_policy is not None:
                base_policy.set_prop("id", AAZStrType, ".base_policy")

            dns_settings = _builder.get(".properties.dnsSettings")
            if dns_settings is not None:
                dns_settings.set_prop("enableProxy", AAZBoolType, ".enable_dns_proxy")
                dns_settings.set_prop("servers", AAZListType, ".dns_servers")

            servers = _builder.get(".properties.dnsSettings.servers")
            if servers is not None:
                servers.set_elements(AAZStrType, ".")

            explicit_proxy = _builder.get(".properties.explicitProxy")
            if explicit_proxy is not None:
                explicit_proxy.set_prop("enableExplicitProxy", AAZBoolType, ".enable_explicit_proxy", typ_kwargs={"nullable": True})
                explicit_proxy.set_prop("enablePacFile", AAZBoolType, ".enable_pac_file", typ_kwargs={"nullable": True})
                explicit_proxy.set_prop("httpPort", AAZIntType, ".http_port")
                explicit_proxy.set_prop("httpsPort", AAZIntType, ".https_port")
                explicit_proxy.set_prop("pacFile", AAZStrType, ".pac_file")
                explicit_proxy.set_prop("pacFilePort", AAZIntType, ".pac_file_port")

            intrusion_detection = _builder.get(".properties.intrusionDetection")
            if intrusion_detection is not None:
                intrusion_detection.set_prop("mode", AAZStrType, ".idps_mode")

            snat = _builder.get(".properties.snat")
            if snat is not None:
                snat.set_prop("autoLearnPrivateRanges", AAZStrType, ".auto_learn_private_ranges")
                snat.set_prop("privateRanges", AAZListType, ".private_ranges")

            private_ranges = _builder.get(".properties.snat.privateRanges")
            if private_ranges is not None:
                private_ranges.set_elements(AAZStrType, ".")

            sql = _builder.get(".properties.sql")
            if sql is not None:
                sql.set_prop("allowSqlRedirect", AAZBoolType, ".sql")

            threat_intel_whitelist = _builder.get(".properties.threatIntelWhitelist")
            if threat_intel_whitelist is not None:
                threat_intel_whitelist.set_prop("fqdns", AAZListType, ".fqdns")
                threat_intel_whitelist.set_prop("ipAddresses", AAZListType, ".ip_addresses")

            fqdns = _builder.get(".properties.threatIntelWhitelist.fqdns")
            if fqdns is not None:
                fqdns.set_elements(AAZStrType, ".")

            ip_addresses = _builder.get(".properties.threatIntelWhitelist.ipAddresses")
            if ip_addresses is not None:
                ip_addresses.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.base_policy = AAZObjectType(
                serialized_name="basePolicy",
            )
            _CreateHelper._build_schema_sub_resource_read(properties.base_policy)
            properties.dns_settings = AAZObjectType(
                serialized_name="dnsSettings",
            )
            properties.explicit_proxy = AAZObjectType(
                serialized_name="explicitProxy",
            )
            properties.insights = AAZObjectType()
            properties.intrusion_detection = AAZObjectType(
                serialized_name="intrusionDetection",
            )
            properties.snat = AAZObjectType()
            properties.sql = AAZObjectType()
            properties.threat_intel_mode = AAZStrType(
                serialized_name="threatIntelMode",
            )
            properties.threat_intel_whitelist = AAZObjectType(
                serialized_name="threatIntelWhitelist",
            )

            dns_settings = cls._schema_on_200_201.properties.dns_settings
            dns_settings.enable_proxy = AAZBoolType(
                serialized_name="enableProxy",
            )
            dns_settings.require_proxy_for_network_rules = AAZBoolType(
                serialized_name="requireProxyForNetworkRules",
                nullable=True,
            )
            dns_settings.servers = AAZListType()

            servers = cls._schema_on_200_201.properties.dns_settings.servers
            servers.Element = AAZStrType()

            explicit_proxy = cls._schema_on_200_201.properties.explicit_proxy
            explicit_proxy.enable_explicit_proxy = AAZBoolType(
                serialized_name="enableExplicitProxy",
                nullable=True,
            )
            explicit_proxy.enable_pac_file = AAZBoolType(
                serialized_name="enablePacFile",
                nullable=True,
            )
            explicit_proxy.http_port = AAZIntType(
                serialized_name="httpPort",
            )
            explicit_proxy.https_port = AAZIntType(
                serialized_name="httpsPort",
            )
            explicit_proxy.pac_file = AAZStrType(
                serialized_name="pacFile",
            )
            explicit_proxy.pac_file_port = AAZIntType(
                serialized_name="pacFilePort",
            )

            insights = cls._schema_on_200_201.properties.insights
            insights.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
            )
            insights.log_analytics_resources = AAZObjectType(
                serialized_name="logAnalyticsResources",
            )
            insights.retention_days = AAZIntType(
                serialized_name="retentionDays",
            )

            log_analytics_resources = cls._schema_on_200_201.properties.insights.log_analytics_resources
            log_analytics_resources.default_workspace_id = AAZObjectType(
                serialized_name="defaultWorkspaceId",
            )
            _CreateHelper._build_schema_sub_resource_read(log_analytics_resources.default_workspace_id)
            log_analytics_resources.workspaces = AAZListType()

            workspaces = cls._schema_on_200_201.properties.insights.log_analytics_resources.workspaces
            workspaces.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.insights.log_analytics_resources.workspaces.Element
            _element.region = AAZStrType()
            _element.workspace_id = AAZObjectType(
                serialized_name="workspaceId",
            )
            _CreateHelper._build_schema_sub_resource_read(_element.workspace_id)

            intrusion_detection = cls._schema_on_200_201.properties.intrusion_detection
            intrusion_detection.configuration = AAZObjectType()
            intrusion_detection.mode = AAZStrType()

            configuration = cls._schema_on_200_201.properties.intrusion_detection.configuration
            configuration.bypass_traffic_settings = AAZListType(
                serialized_name="bypassTrafficSettings",
            )
            configuration.private_ranges = AAZListType(
                serialized_name="privateRanges",
            )
            configuration.signature_overrides = AAZListType(
                serialized_name="signatureOverrides",
            )

            bypass_traffic_settings = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings
            bypass_traffic_settings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element
            _element.description = AAZStrType()
            _element.destination_addresses = AAZListType(
                serialized_name="destinationAddresses",
            )
            _element.destination_ip_groups = AAZListType(
                serialized_name="destinationIpGroups",
            )
            _element.destination_ports = AAZListType(
                serialized_name="destinationPorts",
            )
            _element.name = AAZStrType()
            _element.protocol = AAZStrType()
            _element.source_addresses = AAZListType(
                serialized_name="sourceAddresses",
            )
            _element.source_ip_groups = AAZListType(
                serialized_name="sourceIpGroups",
            )

            destination_addresses = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_addresses
            destination_addresses.Element = AAZStrType()

            destination_ip_groups = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ip_groups
            destination_ip_groups.Element = AAZStrType()

            destination_ports = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.destination_ports
            destination_ports.Element = AAZStrType()

            source_addresses = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_addresses
            source_addresses.Element = AAZStrType()

            source_ip_groups = cls._schema_on_200_201.properties.intrusion_detection.configuration.bypass_traffic_settings.Element.source_ip_groups
            source_ip_groups.Element = AAZStrType()

            private_ranges = cls._schema_on_200_201.properties.intrusion_detection.configuration.private_ranges
            private_ranges.Element = AAZStrType()

            signature_overrides = cls._schema_on_200_201.properties.intrusion_detection.configuration.signature_overrides
            signature_overrides.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.intrusion_detection.configuration.signature_overrides.Element
            _element.id = AAZStrType()
            _element.mode = AAZStrType()

            snat = cls._schema_on_200_201.properties.snat
            snat.auto_learn_private_ranges = AAZStrType(
                serialized_name="autoLearnPrivateRanges",
            )
            snat.private_ranges = AAZListType(
                serialized_name="privateRanges",
            )

            private_ranges = cls._schema_on_200_201.properties.snat.private_ranges
            private_ranges.Element = AAZStrType()

            sql = cls._schema_on_200_201.properties.sql
            sql.allow_sql_redirect = AAZBoolType(
                serialized_name="allowSqlRedirect",
            )

            threat_intel_whitelist = cls._schema_on_200_201.properties.threat_intel_whitelist
            threat_intel_whitelist.fqdns = AAZListType()
            threat_intel_whitelist.ip_addresses = AAZListType(
                serialized_name="ipAddresses",
            )

            fqdns = cls._schema_on_200_201.properties.threat_intel_whitelist.fqdns
            fqdns.Element = AAZStrType()

            ip_addresses = cls._schema_on_200_201.properties.threat_intel_whitelist.ip_addresses
            ip_addresses.Element = AAZStrType()

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_sub_resource_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Create"]
