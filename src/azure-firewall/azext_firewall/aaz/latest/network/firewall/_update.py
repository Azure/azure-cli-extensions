# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "network firewall update",
)
class Update(AAZCommand):
    """Update an Azure Firewall.
    """

    _aaz_info = {
        "version": "2022-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.network/azurefirewalls/{}", "2022-01-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Azure Firewall name.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="Resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.sku = AAZStrArg(
            options=["--sku"],
            help="SKU of Azure firewall. This field cannot be updated after the creation. The default sku in server end is AZFW_VNet. If you want to attach azure firewall to  vhub, you should set sku to AZFW_Hub.",
            nullable=True,
            enum={"AZFW_Hub": "AZFW_Hub", "AZFW_VNet": "AZFW_VNet"},
        )
        _args_schema.tier = AAZStrArg(
            options=["--tier"],
            help="Tier of an azure firewall. --tier will take effect only when --sku is set.",
            nullable=True,
            enum={"Basic": "Basic", "Premium": "Premium", "Standard": "Standard"},
        )
        _args_schema.threat_intel_mode = AAZStrArg(
            options=["--threat-intel-mode"],
            help="The operation mode for Threat Intelligence.",
            nullable=True,
            enum={"Alert": "Alert", "Deny": "Deny", "Off": "Off"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags.",
            nullable=True,
        )
        _args_schema.zones = AAZListArg(
            options=["-z", "--zones"],
            help="Space-separated list of availability zones into which to provision the resource. Allowed values: 1, 2, 3.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        zones = cls._args_schema.zones
        zones.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Parameters"

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.additional_properties = AAZDictArg(
            options=["--additional-properties"],
            arg_group="Properties",
            help="The additional properties used to further config this azure firewall.",
            nullable=True,
        )
        _args_schema.application_rule_collections = AAZListArg(
            options=["--application-rule-collections"],
            arg_group="Properties",
            help="Collection of application rule collections used by Azure Firewall.",
            nullable=True,
        )
        _args_schema.firewall_policy = AAZObjectArg(
            options=["--firewall-policy"],
            arg_group="Properties",
            help="The firewallPolicy associated with this azure firewall.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_args_schema.firewall_policy)
        _args_schema.hub_ip_addresses = AAZObjectArg(
            options=["--hub-ip-addresses"],
            arg_group="Properties",
            help="IP addresses associated with AzureFirewall.",
            nullable=True,
        )
        _args_schema.ip_configurations = AAZListArg(
            options=["--ip-configurations"],
            arg_group="Properties",
            help="IP configuration of the Azure Firewall resource.",
            nullable=True,
        )
        _args_schema.management_ip_configuration = AAZObjectArg(
            options=["--management-ip-configuration"],
            arg_group="Properties",
            help="IP configuration of the Azure Firewall used for management traffic.",
            nullable=True,
        )
        cls._build_args_azure_firewall_ip_configuration_update(_args_schema.management_ip_configuration)
        _args_schema.nat_rule_collections = AAZListArg(
            options=["--nat-rule-collections"],
            arg_group="Properties",
            help="Collection of NAT rule collections used by Azure Firewall.",
            nullable=True,
        )
        _args_schema.network_rule_collections = AAZListArg(
            options=["--network-rule-collections"],
            arg_group="Properties",
            help="Collection of network rule collections used by Azure Firewall.",
            nullable=True,
        )
        _args_schema.virtual_hub = AAZObjectArg(
            options=["--virtual-hub"],
            arg_group="Properties",
            help="The virtualHub to which the firewall belongs.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(_args_schema.virtual_hub)

        additional_properties = cls._args_schema.additional_properties
        additional_properties.Element = AAZStrArg(
            nullable=True,
        )

        application_rule_collections = cls._args_schema.application_rule_collections
        application_rule_collections.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.application_rule_collections.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.",
            nullable=True,
        )
        _element.action = AAZObjectArg(
            options=["action"],
            help="The action type of a rule collection.",
            nullable=True,
        )
        cls._build_args_azure_firewall_rc_action_update(_element.action)
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Priority of the application rule collection resource.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=65000,
                minimum=100,
            ),
        )
        _element.rules = AAZListArg(
            options=["rules"],
            help="Collection of rules used by a application rule collection.",
            nullable=True,
        )

        rules = cls._args_schema.application_rule_collections.Element.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.application_rule_collections.Element.rules.Element
        _element.description = AAZStrArg(
            options=["description"],
            help="Description of the rule.",
            nullable=True,
        )
        _element.fqdn_tags = AAZListArg(
            options=["fqdn-tags"],
            help="List of FQDN Tags for this rule.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the application rule.",
            nullable=True,
        )
        _element.protocols = AAZListArg(
            options=["protocols"],
            help="Array of ApplicationRuleProtocols.",
            nullable=True,
        )
        _element.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
            nullable=True,
        )
        _element.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
            nullable=True,
        )
        _element.target_fqdns = AAZListArg(
            options=["target-fqdns"],
            help="List of FQDNs for this rule.",
            nullable=True,
        )

        fqdn_tags = cls._args_schema.application_rule_collections.Element.rules.Element.fqdn_tags
        fqdn_tags.Element = AAZStrArg(
            nullable=True,
        )

        protocols = cls._args_schema.application_rule_collections.Element.rules.Element.protocols
        protocols.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.application_rule_collections.Element.rules.Element.protocols.Element
        _element.port = AAZIntArg(
            options=["port"],
            help="Port number for the protocol, cannot be greater than 64000. This field is optional.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=64000,
                minimum=0,
            ),
        )
        _element.protocol_type = AAZStrArg(
            options=["protocol-type"],
            help="Protocol type.",
            nullable=True,
            enum={"Http": "Http", "Https": "Https", "Mssql": "Mssql"},
        )

        source_addresses = cls._args_schema.application_rule_collections.Element.rules.Element.source_addresses
        source_addresses.Element = AAZStrArg(
            nullable=True,
        )

        source_ip_groups = cls._args_schema.application_rule_collections.Element.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrArg(
            nullable=True,
        )

        target_fqdns = cls._args_schema.application_rule_collections.Element.rules.Element.target_fqdns
        target_fqdns.Element = AAZStrArg(
            nullable=True,
        )

        hub_ip_addresses = cls._args_schema.hub_ip_addresses
        hub_ip_addresses.public_ip_count = AAZIntArg(
            options=["count", "public-ip-count"],
            help="Number of Public IP Address associated with azure firewall. It's used to add public ip addresses into this firewall.",
            nullable=True,
        )

        ip_configurations = cls._args_schema.ip_configurations
        ip_configurations.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_azure_firewall_ip_configuration_update(ip_configurations.Element)

        nat_rule_collections = cls._args_schema.nat_rule_collections
        nat_rule_collections.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.nat_rule_collections.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.",
            nullable=True,
        )
        _element.action = AAZObjectArg(
            options=["action"],
            help="The action type of a NAT rule collection.",
            nullable=True,
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Priority of the NAT rule collection resource.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=65000,
                minimum=100,
            ),
        )
        _element.rules = AAZListArg(
            options=["rules"],
            help="Collection of rules used by a NAT rule collection.",
            nullable=True,
        )

        action = cls._args_schema.nat_rule_collections.Element.action
        action.type = AAZStrArg(
            options=["type"],
            help="The type of action.",
            nullable=True,
            enum={"Dnat": "Dnat", "Snat": "Snat"},
        )

        rules = cls._args_schema.nat_rule_collections.Element.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.nat_rule_collections.Element.rules.Element
        _element.description = AAZStrArg(
            options=["description"],
            help="Description of the rule.",
            nullable=True,
        )
        _element.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses for this rule. Supports IP ranges, prefixes, and service tags.",
            nullable=True,
        )
        _element.destination_ports = AAZListArg(
            options=["destination-ports"],
            help="List of destination ports.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the NAT rule.",
            nullable=True,
        )
        _element.protocols = AAZListArg(
            options=["protocols"],
            help="Array of AzureFirewallNetworkRuleProtocols applicable to this NAT rule.",
            nullable=True,
        )
        _element.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
            nullable=True,
        )
        _element.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
            nullable=True,
        )
        _element.translated_address = AAZStrArg(
            options=["translated-address"],
            help="The translated address for this NAT rule.",
            nullable=True,
        )
        _element.translated_fqdn = AAZStrArg(
            options=["translated-fqdn"],
            help="The translated FQDN for this NAT rule.",
            nullable=True,
        )
        _element.translated_port = AAZStrArg(
            options=["translated-port"],
            help="The translated port for this NAT rule.",
            nullable=True,
        )

        destination_addresses = cls._args_schema.nat_rule_collections.Element.rules.Element.destination_addresses
        destination_addresses.Element = AAZStrArg(
            nullable=True,
        )

        destination_ports = cls._args_schema.nat_rule_collections.Element.rules.Element.destination_ports
        destination_ports.Element = AAZStrArg(
            nullable=True,
        )

        protocols = cls._args_schema.nat_rule_collections.Element.rules.Element.protocols
        protocols.Element = AAZStrArg(
            nullable=True,
            enum={"Any": "Any", "ICMP": "ICMP", "TCP": "TCP", "UDP": "UDP"},
        )

        source_addresses = cls._args_schema.nat_rule_collections.Element.rules.Element.source_addresses
        source_addresses.Element = AAZStrArg(
            nullable=True,
        )

        source_ip_groups = cls._args_schema.nat_rule_collections.Element.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrArg(
            nullable=True,
        )

        network_rule_collections = cls._args_schema.network_rule_collections
        network_rule_collections.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.network_rule_collections.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the resource that is unique within the Azure firewall. This name can be used to access the resource.",
            nullable=True,
        )
        _element.action = AAZObjectArg(
            options=["action"],
            help="The action type of a rule collection.",
            nullable=True,
        )
        cls._build_args_azure_firewall_rc_action_update(_element.action)
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Priority of the network rule collection resource.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=65000,
                minimum=100,
            ),
        )
        _element.rules = AAZListArg(
            options=["rules"],
            help="Collection of rules used by a network rule collection.",
            nullable=True,
        )

        rules = cls._args_schema.network_rule_collections.Element.rules
        rules.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.network_rule_collections.Element.rules.Element
        _element.description = AAZStrArg(
            options=["description"],
            help="Description of the rule.",
            nullable=True,
        )
        _element.destination_addresses = AAZListArg(
            options=["destination-addresses"],
            help="List of destination IP addresses.",
            nullable=True,
        )
        _element.destination_fqdns = AAZListArg(
            options=["destination-fqdns"],
            help="List of destination FQDNs.",
            nullable=True,
        )
        _element.destination_ip_groups = AAZListArg(
            options=["destination-ip-groups"],
            help="List of destination IpGroups for this rule.",
            nullable=True,
        )
        _element.destination_ports = AAZListArg(
            options=["destination-ports"],
            help="List of destination ports.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the network rule.",
            nullable=True,
        )
        _element.protocols = AAZListArg(
            options=["protocols"],
            help="Array of AzureFirewallNetworkRuleProtocols.",
            nullable=True,
        )
        _element.source_addresses = AAZListArg(
            options=["source-addresses"],
            help="List of source IP addresses for this rule.",
            nullable=True,
        )
        _element.source_ip_groups = AAZListArg(
            options=["source-ip-groups"],
            help="List of source IpGroups for this rule.",
            nullable=True,
        )

        destination_addresses = cls._args_schema.network_rule_collections.Element.rules.Element.destination_addresses
        destination_addresses.Element = AAZStrArg(
            nullable=True,
        )

        destination_fqdns = cls._args_schema.network_rule_collections.Element.rules.Element.destination_fqdns
        destination_fqdns.Element = AAZStrArg(
            nullable=True,
        )

        destination_ip_groups = cls._args_schema.network_rule_collections.Element.rules.Element.destination_ip_groups
        destination_ip_groups.Element = AAZStrArg(
            nullable=True,
        )

        destination_ports = cls._args_schema.network_rule_collections.Element.rules.Element.destination_ports
        destination_ports.Element = AAZStrArg(
            nullable=True,
        )

        protocols = cls._args_schema.network_rule_collections.Element.rules.Element.protocols
        protocols.Element = AAZStrArg(
            nullable=True,
            enum={"Any": "Any", "ICMP": "ICMP", "TCP": "TCP", "UDP": "UDP"},
        )

        source_addresses = cls._args_schema.network_rule_collections.Element.rules.Element.source_addresses
        source_addresses.Element = AAZStrArg(
            nullable=True,
        )

        source_ip_groups = cls._args_schema.network_rule_collections.Element.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    _args_azure_firewall_ip_configuration_update = None

    @classmethod
    def _build_args_azure_firewall_ip_configuration_update(cls, _schema):
        if cls._args_azure_firewall_ip_configuration_update is not None:
            _schema.m_conf_name = cls._args_azure_firewall_ip_configuration_update.m_conf_name
            _schema.public_ip_address = cls._args_azure_firewall_ip_configuration_update.public_ip_address
            return

        cls._args_azure_firewall_ip_configuration_update = AAZObjectArg(
            nullable=True,
        )

        azure_firewall_ip_configuration_update = cls._args_azure_firewall_ip_configuration_update
        azure_firewall_ip_configuration_update.m_conf_name = AAZStrArg(
            options=["m-conf-name"],
            help="Name of the resource that is unique within a resource group. This name can be used to access the resource.",
            nullable=True,
        )
        azure_firewall_ip_configuration_update.public_ip_address = AAZObjectArg(
            options=["public-ip-address"],
            help="Reference to the PublicIP resource. This field is a mandatory input if subnet is not null.",
            nullable=True,
        )
        cls._build_args_sub_resource_update(azure_firewall_ip_configuration_update.public_ip_address)

        _schema.m_conf_name = cls._args_azure_firewall_ip_configuration_update.m_conf_name
        _schema.public_ip_address = cls._args_azure_firewall_ip_configuration_update.public_ip_address

    _args_azure_firewall_rc_action_update = None

    @classmethod
    def _build_args_azure_firewall_rc_action_update(cls, _schema):
        if cls._args_azure_firewall_rc_action_update is not None:
            _schema.type = cls._args_azure_firewall_rc_action_update.type
            return

        cls._args_azure_firewall_rc_action_update = AAZObjectArg(
            nullable=True,
        )

        azure_firewall_rc_action_update = cls._args_azure_firewall_rc_action_update
        azure_firewall_rc_action_update.type = AAZStrArg(
            options=["type"],
            help="The type of action.",
            nullable=True,
            enum={"Allow": "Allow", "Deny": "Deny"},
        )

        _schema.type = cls._args_azure_firewall_rc_action_update.type

    _args_sub_resource_update = None

    @classmethod
    def _build_args_sub_resource_update(cls, _schema):
        if cls._args_sub_resource_update is not None:
            _schema.id = cls._args_sub_resource_update.id
            return

        cls._args_sub_resource_update = AAZObjectArg(
            nullable=True,
        )

        sub_resource_update = cls._args_sub_resource_update
        sub_resource_update.id = AAZStrArg(
            options=["id"],
            help="Resource ID.",
            nullable=True,
        )

        _schema.id = cls._args_sub_resource_update.id

    def _execute_operations(self):
        self.pre_operations()
        self.AzureFirewallsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.AzureFirewallsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AzureFirewallsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "azureFirewallName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_azure_firewall_read(cls._schema_on_200)

            return cls._schema_on_200

    class AzureFirewallsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/azureFirewalls/{azureFirewallName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "azureFirewallName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_azure_firewall_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")
            _builder.set_prop("zones", AAZListType, ".zones")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalProperties", AAZDictType, ".additional_properties")
                properties.set_prop("applicationRuleCollections", AAZListType, ".application_rule_collections")
                _UpdateHelper._build_schema_sub_resource_update(properties.set_prop("firewallPolicy", AAZObjectType, ".firewall_policy"))
                properties.set_prop("hubIPAddresses", AAZObjectType, ".hub_ip_addresses")
                properties.set_prop("ipConfigurations", AAZListType, ".ip_configurations")
                _UpdateHelper._build_schema_azure_firewall_ip_configuration_update(properties.set_prop("managementIpConfiguration", AAZObjectType, ".management_ip_configuration"))
                properties.set_prop("natRuleCollections", AAZListType, ".nat_rule_collections")
                properties.set_prop("networkRuleCollections", AAZListType, ".network_rule_collections")
                properties.set_prop("sku", AAZObjectType)
                properties.set_prop("threatIntelMode", AAZStrType, ".threat_intel_mode")
                _UpdateHelper._build_schema_sub_resource_update(properties.set_prop("virtualHub", AAZObjectType, ".virtual_hub"))

            additional_properties = _builder.get(".properties.additionalProperties")
            if additional_properties is not None:
                additional_properties.set_elements(AAZStrType, ".")

            application_rule_collections = _builder.get(".properties.applicationRuleCollections")
            if application_rule_collections is not None:
                application_rule_collections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationRuleCollections[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.applicationRuleCollections[].properties")
            if properties is not None:
                _UpdateHelper._build_schema_azure_firewall_rc_action_update(properties.set_prop("action", AAZObjectType, ".action"))
                properties.set_prop("priority", AAZIntType, ".priority")
                properties.set_prop("rules", AAZListType, ".rules")

            rules = _builder.get(".properties.applicationRuleCollections[].properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationRuleCollections[].properties.rules[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("fqdnTags", AAZListType, ".fqdn_tags")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocols", AAZListType, ".protocols")
                _elements.set_prop("sourceAddresses", AAZListType, ".source_addresses")
                _elements.set_prop("sourceIpGroups", AAZListType, ".source_ip_groups")
                _elements.set_prop("targetFqdns", AAZListType, ".target_fqdns")

            fqdn_tags = _builder.get(".properties.applicationRuleCollections[].properties.rules[].fqdnTags")
            if fqdn_tags is not None:
                fqdn_tags.set_elements(AAZStrType, ".")

            protocols = _builder.get(".properties.applicationRuleCollections[].properties.rules[].protocols")
            if protocols is not None:
                protocols.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.applicationRuleCollections[].properties.rules[].protocols[]")
            if _elements is not None:
                _elements.set_prop("port", AAZIntType, ".port")
                _elements.set_prop("protocolType", AAZStrType, ".protocol_type")

            source_addresses = _builder.get(".properties.applicationRuleCollections[].properties.rules[].sourceAddresses")
            if source_addresses is not None:
                source_addresses.set_elements(AAZStrType, ".")

            source_ip_groups = _builder.get(".properties.applicationRuleCollections[].properties.rules[].sourceIpGroups")
            if source_ip_groups is not None:
                source_ip_groups.set_elements(AAZStrType, ".")

            target_fqdns = _builder.get(".properties.applicationRuleCollections[].properties.rules[].targetFqdns")
            if target_fqdns is not None:
                target_fqdns.set_elements(AAZStrType, ".")

            hub_ip_addresses = _builder.get(".properties.hubIPAddresses")
            if hub_ip_addresses is not None:
                hub_ip_addresses.set_prop("publicIPs", AAZObjectType)

            public_i_ps = _builder.get(".properties.hubIPAddresses.publicIPs")
            if public_i_ps is not None:
                public_i_ps.set_prop("count", AAZIntType, ".public_ip_count")

            ip_configurations = _builder.get(".properties.ipConfigurations")
            if ip_configurations is not None:
                _UpdateHelper._build_schema_azure_firewall_ip_configuration_update(ip_configurations.set_elements(AAZObjectType, "."))

            nat_rule_collections = _builder.get(".properties.natRuleCollections")
            if nat_rule_collections is not None:
                nat_rule_collections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.natRuleCollections[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.natRuleCollections[].properties")
            if properties is not None:
                properties.set_prop("action", AAZObjectType, ".action")
                properties.set_prop("priority", AAZIntType, ".priority")
                properties.set_prop("rules", AAZListType, ".rules")

            action = _builder.get(".properties.natRuleCollections[].properties.action")
            if action is not None:
                action.set_prop("type", AAZStrType, ".type")

            rules = _builder.get(".properties.natRuleCollections[].properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.natRuleCollections[].properties.rules[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("destinationAddresses", AAZListType, ".destination_addresses")
                _elements.set_prop("destinationPorts", AAZListType, ".destination_ports")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocols", AAZListType, ".protocols")
                _elements.set_prop("sourceAddresses", AAZListType, ".source_addresses")
                _elements.set_prop("sourceIpGroups", AAZListType, ".source_ip_groups")
                _elements.set_prop("translatedAddress", AAZStrType, ".translated_address")
                _elements.set_prop("translatedFqdn", AAZStrType, ".translated_fqdn")
                _elements.set_prop("translatedPort", AAZStrType, ".translated_port")

            destination_addresses = _builder.get(".properties.natRuleCollections[].properties.rules[].destinationAddresses")
            if destination_addresses is not None:
                destination_addresses.set_elements(AAZStrType, ".")

            destination_ports = _builder.get(".properties.natRuleCollections[].properties.rules[].destinationPorts")
            if destination_ports is not None:
                destination_ports.set_elements(AAZStrType, ".")

            protocols = _builder.get(".properties.natRuleCollections[].properties.rules[].protocols")
            if protocols is not None:
                protocols.set_elements(AAZStrType, ".")

            source_addresses = _builder.get(".properties.natRuleCollections[].properties.rules[].sourceAddresses")
            if source_addresses is not None:
                source_addresses.set_elements(AAZStrType, ".")

            source_ip_groups = _builder.get(".properties.natRuleCollections[].properties.rules[].sourceIpGroups")
            if source_ip_groups is not None:
                source_ip_groups.set_elements(AAZStrType, ".")

            network_rule_collections = _builder.get(".properties.networkRuleCollections")
            if network_rule_collections is not None:
                network_rule_collections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkRuleCollections[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties.networkRuleCollections[].properties")
            if properties is not None:
                _UpdateHelper._build_schema_azure_firewall_rc_action_update(properties.set_prop("action", AAZObjectType, ".action"))
                properties.set_prop("priority", AAZIntType, ".priority")
                properties.set_prop("rules", AAZListType, ".rules")

            rules = _builder.get(".properties.networkRuleCollections[].properties.rules")
            if rules is not None:
                rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.networkRuleCollections[].properties.rules[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("destinationAddresses", AAZListType, ".destination_addresses")
                _elements.set_prop("destinationFqdns", AAZListType, ".destination_fqdns")
                _elements.set_prop("destinationIpGroups", AAZListType, ".destination_ip_groups")
                _elements.set_prop("destinationPorts", AAZListType, ".destination_ports")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("protocols", AAZListType, ".protocols")
                _elements.set_prop("sourceAddresses", AAZListType, ".source_addresses")
                _elements.set_prop("sourceIpGroups", AAZListType, ".source_ip_groups")

            destination_addresses = _builder.get(".properties.networkRuleCollections[].properties.rules[].destinationAddresses")
            if destination_addresses is not None:
                destination_addresses.set_elements(AAZStrType, ".")

            destination_fqdns = _builder.get(".properties.networkRuleCollections[].properties.rules[].destinationFqdns")
            if destination_fqdns is not None:
                destination_fqdns.set_elements(AAZStrType, ".")

            destination_ip_groups = _builder.get(".properties.networkRuleCollections[].properties.rules[].destinationIpGroups")
            if destination_ip_groups is not None:
                destination_ip_groups.set_elements(AAZStrType, ".")

            destination_ports = _builder.get(".properties.networkRuleCollections[].properties.rules[].destinationPorts")
            if destination_ports is not None:
                destination_ports.set_elements(AAZStrType, ".")

            protocols = _builder.get(".properties.networkRuleCollections[].properties.rules[].protocols")
            if protocols is not None:
                protocols.set_elements(AAZStrType, ".")

            source_addresses = _builder.get(".properties.networkRuleCollections[].properties.rules[].sourceAddresses")
            if source_addresses is not None:
                source_addresses.set_elements(AAZStrType, ".")

            source_ip_groups = _builder.get(".properties.networkRuleCollections[].properties.rules[].sourceIpGroups")
            if source_ip_groups is not None:
                source_ip_groups.set_elements(AAZStrType, ".")

            sku = _builder.get(".properties.sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku")
                sku.set_prop("tier", AAZStrType, ".tier")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            zones = _builder.get(".zones")
            if zones is not None:
                zones.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_azure_firewall_ip_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".m_conf_name")
        _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

        properties = _builder.get(".properties")
        if properties is not None:
            cls._build_schema_sub_resource_update(properties.set_prop("publicIPAddress", AAZObjectType, ".public_ip_address"))

    @classmethod
    def _build_schema_azure_firewall_rc_action_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("type", AAZStrType, ".type")

    @classmethod
    def _build_schema_sub_resource_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("id", AAZStrType, ".id")

    _schema_azure_firewall_ip_configuration_read = None

    @classmethod
    def _build_schema_azure_firewall_ip_configuration_read(cls, _schema):
        if cls._schema_azure_firewall_ip_configuration_read is not None:
            _schema.etag = cls._schema_azure_firewall_ip_configuration_read.etag
            _schema.id = cls._schema_azure_firewall_ip_configuration_read.id
            _schema.name = cls._schema_azure_firewall_ip_configuration_read.name
            _schema.properties = cls._schema_azure_firewall_ip_configuration_read.properties
            _schema.type = cls._schema_azure_firewall_ip_configuration_read.type
            return

        cls._schema_azure_firewall_ip_configuration_read = _schema_azure_firewall_ip_configuration_read = AAZObjectType()

        azure_firewall_ip_configuration_read = _schema_azure_firewall_ip_configuration_read
        azure_firewall_ip_configuration_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        azure_firewall_ip_configuration_read.id = AAZStrType()
        azure_firewall_ip_configuration_read.name = AAZStrType()
        azure_firewall_ip_configuration_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        azure_firewall_ip_configuration_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_azure_firewall_ip_configuration_read.properties
        properties.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
            flags={"read_only": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.public_ip_address = AAZObjectType(
            serialized_name="publicIPAddress",
        )
        cls._build_schema_sub_resource_read(properties.public_ip_address)
        properties.subnet = AAZObjectType()
        cls._build_schema_sub_resource_read(properties.subnet)

        _schema.etag = cls._schema_azure_firewall_ip_configuration_read.etag
        _schema.id = cls._schema_azure_firewall_ip_configuration_read.id
        _schema.name = cls._schema_azure_firewall_ip_configuration_read.name
        _schema.properties = cls._schema_azure_firewall_ip_configuration_read.properties
        _schema.type = cls._schema_azure_firewall_ip_configuration_read.type

    _schema_azure_firewall_rc_action_read = None

    @classmethod
    def _build_schema_azure_firewall_rc_action_read(cls, _schema):
        if cls._schema_azure_firewall_rc_action_read is not None:
            _schema.type = cls._schema_azure_firewall_rc_action_read.type
            return

        cls._schema_azure_firewall_rc_action_read = _schema_azure_firewall_rc_action_read = AAZObjectType()

        azure_firewall_rc_action_read = _schema_azure_firewall_rc_action_read
        azure_firewall_rc_action_read.type = AAZStrType()

        _schema.type = cls._schema_azure_firewall_rc_action_read.type

    _schema_azure_firewall_read = None

    @classmethod
    def _build_schema_azure_firewall_read(cls, _schema):
        if cls._schema_azure_firewall_read is not None:
            _schema.etag = cls._schema_azure_firewall_read.etag
            _schema.id = cls._schema_azure_firewall_read.id
            _schema.location = cls._schema_azure_firewall_read.location
            _schema.name = cls._schema_azure_firewall_read.name
            _schema.properties = cls._schema_azure_firewall_read.properties
            _schema.tags = cls._schema_azure_firewall_read.tags
            _schema.type = cls._schema_azure_firewall_read.type
            _schema.zones = cls._schema_azure_firewall_read.zones
            return

        cls._schema_azure_firewall_read = _schema_azure_firewall_read = AAZObjectType()

        azure_firewall_read = _schema_azure_firewall_read
        azure_firewall_read.etag = AAZStrType(
            flags={"read_only": True},
        )
        azure_firewall_read.id = AAZStrType()
        azure_firewall_read.location = AAZStrType()
        azure_firewall_read.name = AAZStrType(
            flags={"read_only": True},
        )
        azure_firewall_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        azure_firewall_read.tags = AAZDictType()
        azure_firewall_read.type = AAZStrType(
            flags={"read_only": True},
        )
        azure_firewall_read.zones = AAZListType()

        properties = _schema_azure_firewall_read.properties
        properties.additional_properties = AAZDictType(
            serialized_name="additionalProperties",
        )
        properties.application_rule_collections = AAZListType(
            serialized_name="applicationRuleCollections",
        )
        properties.firewall_policy = AAZObjectType(
            serialized_name="firewallPolicy",
        )
        cls._build_schema_sub_resource_read(properties.firewall_policy)
        properties.hub_ip_addresses = AAZObjectType(
            serialized_name="hubIPAddresses",
        )
        properties.ip_configurations = AAZListType(
            serialized_name="ipConfigurations",
        )
        properties.ip_groups = AAZListType(
            serialized_name="ipGroups",
        )
        properties.management_ip_configuration = AAZObjectType(
            serialized_name="managementIpConfiguration",
        )
        cls._build_schema_azure_firewall_ip_configuration_read(properties.management_ip_configuration)
        properties.nat_rule_collections = AAZListType(
            serialized_name="natRuleCollections",
        )
        properties.network_rule_collections = AAZListType(
            serialized_name="networkRuleCollections",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.sku = AAZObjectType()
        properties.threat_intel_mode = AAZStrType(
            serialized_name="threatIntelMode",
        )
        properties.virtual_hub = AAZObjectType(
            serialized_name="virtualHub",
        )
        cls._build_schema_sub_resource_read(properties.virtual_hub)

        additional_properties = _schema_azure_firewall_read.properties.additional_properties
        additional_properties.Element = AAZStrType()

        application_rule_collections = _schema_azure_firewall_read.properties.application_rule_collections
        application_rule_collections.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.application_rule_collections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties
        properties.action = AAZObjectType()
        cls._build_schema_azure_firewall_rc_action_read(properties.action)
        properties.priority = AAZIntType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rules = AAZListType()

        rules = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element
        _element.description = AAZStrType()
        _element.fqdn_tags = AAZListType(
            serialized_name="fqdnTags",
        )
        _element.name = AAZStrType()
        _element.protocols = AAZListType()
        _element.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        _element.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )
        _element.target_fqdns = AAZListType(
            serialized_name="targetFqdns",
        )

        fqdn_tags = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.fqdn_tags
        fqdn_tags.Element = AAZStrType()

        protocols = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.protocols
        protocols.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.protocols.Element
        _element.port = AAZIntType()
        _element.protocol_type = AAZStrType(
            serialized_name="protocolType",
        )

        source_addresses = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrType()

        target_fqdns = _schema_azure_firewall_read.properties.application_rule_collections.Element.properties.rules.Element.target_fqdns
        target_fqdns.Element = AAZStrType()

        hub_ip_addresses = _schema_azure_firewall_read.properties.hub_ip_addresses
        hub_ip_addresses.private_ip_address = AAZStrType(
            serialized_name="privateIPAddress",
        )
        hub_ip_addresses.public_i_ps = AAZObjectType(
            serialized_name="publicIPs",
        )

        public_i_ps = _schema_azure_firewall_read.properties.hub_ip_addresses.public_i_ps
        public_i_ps.addresses = AAZListType()
        public_i_ps.count = AAZIntType()

        addresses = _schema_azure_firewall_read.properties.hub_ip_addresses.public_i_ps.addresses
        addresses.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.hub_ip_addresses.public_i_ps.addresses.Element
        _element.address = AAZStrType()

        ip_configurations = _schema_azure_firewall_read.properties.ip_configurations
        ip_configurations.Element = AAZObjectType()
        cls._build_schema_azure_firewall_ip_configuration_read(ip_configurations.Element)

        ip_groups = _schema_azure_firewall_read.properties.ip_groups
        ip_groups.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.ip_groups.Element
        _element.change_number = AAZStrType(
            serialized_name="changeNumber",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )

        nat_rule_collections = _schema_azure_firewall_read.properties.nat_rule_collections
        nat_rule_collections.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.nat_rule_collections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties
        properties.action = AAZObjectType()
        properties.priority = AAZIntType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rules = AAZListType()

        action = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.action
        action.type = AAZStrType()

        rules = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element
        _element.description = AAZStrType()
        _element.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        _element.destination_ports = AAZListType(
            serialized_name="destinationPorts",
        )
        _element.name = AAZStrType()
        _element.protocols = AAZListType()
        _element.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        _element.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )
        _element.translated_address = AAZStrType(
            serialized_name="translatedAddress",
        )
        _element.translated_fqdn = AAZStrType(
            serialized_name="translatedFqdn",
        )
        _element.translated_port = AAZStrType(
            serialized_name="translatedPort",
        )

        destination_addresses = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element.destination_addresses
        destination_addresses.Element = AAZStrType()

        destination_ports = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element.destination_ports
        destination_ports.Element = AAZStrType()

        protocols = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element.protocols
        protocols.Element = AAZStrType()

        source_addresses = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element.source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_azure_firewall_read.properties.nat_rule_collections.Element.properties.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrType()

        network_rule_collections = _schema_azure_firewall_read.properties.network_rule_collections
        network_rule_collections.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.network_rule_collections.Element
        _element.etag = AAZStrType(
            flags={"read_only": True},
        )
        _element.id = AAZStrType()
        _element.name = AAZStrType()
        _element.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties
        properties.action = AAZObjectType()
        cls._build_schema_azure_firewall_rc_action_read(properties.action)
        properties.priority = AAZIntType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rules = AAZListType()

        rules = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules
        rules.Element = AAZObjectType()

        _element = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element
        _element.description = AAZStrType()
        _element.destination_addresses = AAZListType(
            serialized_name="destinationAddresses",
        )
        _element.destination_fqdns = AAZListType(
            serialized_name="destinationFqdns",
        )
        _element.destination_ip_groups = AAZListType(
            serialized_name="destinationIpGroups",
        )
        _element.destination_ports = AAZListType(
            serialized_name="destinationPorts",
        )
        _element.name = AAZStrType()
        _element.protocols = AAZListType()
        _element.source_addresses = AAZListType(
            serialized_name="sourceAddresses",
        )
        _element.source_ip_groups = AAZListType(
            serialized_name="sourceIpGroups",
        )

        destination_addresses = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.destination_addresses
        destination_addresses.Element = AAZStrType()

        destination_fqdns = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.destination_fqdns
        destination_fqdns.Element = AAZStrType()

        destination_ip_groups = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.destination_ip_groups
        destination_ip_groups.Element = AAZStrType()

        destination_ports = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.destination_ports
        destination_ports.Element = AAZStrType()

        protocols = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.protocols
        protocols.Element = AAZStrType()

        source_addresses = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.source_addresses
        source_addresses.Element = AAZStrType()

        source_ip_groups = _schema_azure_firewall_read.properties.network_rule_collections.Element.properties.rules.Element.source_ip_groups
        source_ip_groups.Element = AAZStrType()

        sku = _schema_azure_firewall_read.properties.sku
        sku.name = AAZStrType()
        sku.tier = AAZStrType()

        tags = _schema_azure_firewall_read.tags
        tags.Element = AAZStrType()

        zones = _schema_azure_firewall_read.zones
        zones.Element = AAZStrType()

        _schema.etag = cls._schema_azure_firewall_read.etag
        _schema.id = cls._schema_azure_firewall_read.id
        _schema.location = cls._schema_azure_firewall_read.location
        _schema.name = cls._schema_azure_firewall_read.name
        _schema.properties = cls._schema_azure_firewall_read.properties
        _schema.tags = cls._schema_azure_firewall_read.tags
        _schema.type = cls._schema_azure_firewall_read.type
        _schema.zones = cls._schema_azure_firewall_read.zones

    _schema_sub_resource_read = None

    @classmethod
    def _build_schema_sub_resource_read(cls, _schema):
        if cls._schema_sub_resource_read is not None:
            _schema.id = cls._schema_sub_resource_read.id
            return

        cls._schema_sub_resource_read = _schema_sub_resource_read = AAZObjectType()

        sub_resource_read = _schema_sub_resource_read
        sub_resource_read.id = AAZStrType()

        _schema.id = cls._schema_sub_resource_read.id


__all__ = ["Update"]
