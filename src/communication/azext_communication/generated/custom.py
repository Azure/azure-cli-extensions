# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait
from knack.util import CLIError
from azext_communication.vendored_sdks.identity._generated.models import CommunicationTokenScope


def communication_list(client,
                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def communication_show(client,
                       resource_group_name,
                       name):
    return client.get(resource_group_name=resource_group_name,
                      communication_service_name=name)


def communication_create(client,
                         resource_group_name,
                         name,
                         location=None,
                         tags=None,
                         data_location=None,
                         no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['data_location'] = data_location
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       communication_service_name=name,
                       parameters=parameters)


def communication_update(client,
                         resource_group_name,
                         name,
                         location=None,
                         tags=None,
                         data_location=None):
    parameters = {}
    parameters['location'] = location
    parameters['tags'] = tags
    parameters['data_location'] = data_location
    return client.update(resource_group_name=resource_group_name,
                         communication_service_name=name,
                         parameters=parameters)


def communication_delete(client,
                         resource_group_name,
                         name,
                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       communication_service_name=name)


def communication_link_notification_hub(client,
                                        resource_group_name,
                                        name,
                                        resource_id=None,
                                        connection_string=None):
    link_notification_hub_parameters = {}
    link_notification_hub_parameters['resource_id'] = resource_id
    link_notification_hub_parameters['connection_string'] = connection_string
    return client.link_notification_hub(resource_group_name=resource_group_name,
                                        communication_service_name=name,
                                        link_notification_hub_parameters=link_notification_hub_parameters)


def communication_list_key(client,
                           resource_group_name,
                           name):
    return client.list_keys(resource_group_name=resource_group_name,
                            communication_service_name=name)


def communication_regenerate_key(client,
                                 resource_group_name,
                                 name,
                                 key_type=None):
    parameters = {}
    parameters['key_type'] = key_type
    return client.regenerate_key(resource_group_name=resource_group_name,
                                 communication_service_name=name,
                                 parameters=parameters)


def communication_send_sms(client, connection_string, sender, recipient, message):
    sms_client=client.from_connection_string(connection_string)
    return sms_client.send(from_=sender, to=recipient, message=message)


def communication_create_useraccesstoken(client, connection_string, scope):
    communication_client = client.from_connection_string(conn_str=connection_string)
    if scope == CommunicationTokenScope.CHAT:
        scopes = [CommunicationTokenScope.CHAT]
    elif scope == CommunicationTokenScope.VOIP:
        scopes = [CommunicationTokenScope.VOIP]
    else:
        raise CLIError('select scope as chat/voip')

    user = communication_client.create_user()
    return communication_client.get_token(user, scopes)


def communication_list_phonenumbers(client, connection_string):
    phone_client = client.from_connection_string(connection_string)
    return phone_client.list_purchased_phone_numbers()


def communication_show_phonenumber_info(client, connection_string, phone_number):
    phone_client = client.from_connection_string(connection_string)
    return phone_client.get_purchased_phone_number(phone_number)
