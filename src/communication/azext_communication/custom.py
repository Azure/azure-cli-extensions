# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements, protected-access, unused-wildcard-import, wildcard-import
# pylint: disable=

try:
    from .manual.custom import *  # noqa: F403
except ImportError:
    pass

from azext_communication.aaz.latest.communication.identity import Assign as _IdentityAssign
from azext_communication.aaz.latest.communication.identity import Remove as _IdentityRemove
from azext_communication.aaz.latest.communication._create import Create as _CommunicationCreate
from azure.cli.core.azclierror import ResourceNotFoundError
from knack.log import get_logger

logger = get_logger(__name__)


def args_type_assignment(user_assigned_flag, system_assigned_flag):
    if system_assigned_flag and user_assigned_flag:
        return "SystemAssigned,UserAssigned"
    if system_assigned_flag:
        return "SystemAssigned"
    if user_assigned_flag:
        return "UserAssigned"
    return "None"


class IdentityAssign(_IdentityAssign):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZResourceIdArg, AAZBoolArg, AAZResourceIdArgFormat
        args_schema.system_assigned = AAZBoolArg(
            options=["--system-assigned"],
            help="Enable system assigned identity.",
        )
        args_schema.user_assigned = AAZListArg(
            options=["--user-assigned"],
            help="Space separated resource IDs to add user-assigned identities. Use [] to remove all identities."
        )
        args_schema.user_assigned.Element = AAZResourceIdArg(
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        )
        args_schema.type._registered = False
        args_schema.type._required = False
        args_schema.user_assigned_identities._registered = False
        args_schema.user_assigned_identities._required = False
        return args_schema

    def pre_instance_create(self):
        instance = self.ctx.vars.instance
        current_identity_type = instance.identity.type
        current_user_assigned_identities = instance.identity.user_assigned_identities
        current_user_assigned_identities = dict.fromkeys(current_user_assigned_identities.keys(), {})
        args = self.ctx.args
        system_assigned_flag = False
        user_assigned_flag = False
        user_dict = {}

        if "SystemAssigned" in str(current_identity_type):
            system_assigned_flag = True
        if "UserAssigned" in str(current_identity_type):
            user_assigned_flag = True

        if args.system_assigned:
            system_assigned_flag = True

        if args.user_assigned:
            user_assigned_flag = True
            for identity in args.user_assigned:
                user_dict[str(identity)] = {}

        if user_assigned_flag:
            user_dict.update(current_user_assigned_identities)
            args.user_assigned_identities = user_dict

        args.type = args_type_assignment(user_assigned_flag, system_assigned_flag)


class IdentityRemove(_IdentityRemove):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZResourceIdArg, AAZBoolArg, AAZResourceIdArgFormat
        args_schema.system_assigned = AAZBoolArg(
            options=["--system-assigned"],
            help="""Enable system assigned identity.""",
        )
        args_schema.user_assigned = AAZListArg(
            options=["--user-assigned"],
            help="Space separated resource IDs to add user-assigned identities. Use [] to remove all identities.",
        )

        args_schema.user_assigned.Element = AAZResourceIdArg(
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}"),
        )
        args_schema.type._registered = False
        args_schema.type._required = False
        args_schema.user_assigned_identities._registered = False
        args_schema.user_assigned_identities._required = False
        return args_schema

    def pre_instance_update(self, instance):
        from azure.cli.core.aaz import has_value
        current_identity_type = ""
        current_assigned_identities = {}
        system_assigned_flag = False
        user_assigned_flag = False
        args = self.ctx.args
        current_identity_type = instance.type
        current_assigned_identities = instance.user_assigned_identities
        current_assigned_identities = dict.fromkeys(current_assigned_identities.keys(), {})

        del instance.user_assigned_identities

        if "SystemAssigned" in str(current_identity_type):
            system_assigned_flag = True
        if "UserAssigned" in str(current_identity_type):
            user_assigned_flag = True

        user_dict = {}

        if args.system_assigned:
            system_assigned_flag = False

        if has_value(args.user_assigned):
            if len(args.user_assigned) == 0:
                current_assigned_identities = []
            else:
                for identity in args.user_assigned:
                    if str(identity) in current_assigned_identities:
                        current_assigned_identities.pop(str(identity))
                    else:
                        raise ResourceNotFoundError(
                            'The following was not found as a managed identity for the current resource: ' + str(identity)
                        )

        if len(current_assigned_identities) == 0:
            user_assigned_flag = False
        else:
            for identity in current_assigned_identities:
                user_dict[str(identity)] = {}

            args.user_assigned_identities = user_dict

        args.type = args_type_assignment(user_assigned_flag, system_assigned_flag)


class CommunicationCreate(_CommunicationCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZBoolArg, AAZResourceIdArg, AAZResourceIdArgFormat
        args_schema.system_assigned = AAZBoolArg(
            options=["--mi-system-assigned"],
            help="""Enable system assigned identity.""",
        )
        args_schema.user_assigned = AAZListArg(
            options=["--mi-user-assigned"],
            help="Space separated resource IDs to add user-assigned identities."
        )
        args_schema.user_assigned.Element = AAZResourceIdArg(
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{}")
        )
        args_schema.type._registered = False
        args_schema.type._required = False
        args_schema.user_assigned_identities._registered = False
        args_schema.user_assigned_identities._required = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        system_assigned_flag = False
        user_assigned_flag = False
        user_dict = {}

        if args.system_assigned:
            system_assigned_flag = True

        if args.user_assigned:
            user_assigned_flag = True
            for identity in args.user_assigned:
                user_dict[str(identity)] = {}

        if user_assigned_flag:
            args.user_assigned_identities = user_dict

        args.type = args_type_assignment(user_assigned_flag, system_assigned_flag)
