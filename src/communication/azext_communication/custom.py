# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

try:
    from .manual.custom import *  # noqa: F403
except ImportError:
    pass

from azext_communication.aaz.latest.communication.identity import Assign as _IdentityAssign
from azext_communication.aaz.latest.communication.identity import Remove as _IdentityRemove
from azext_communication.aaz.latest.communication._create import Create as _CommunicationCreate
from knack.log import get_logger

logger = get_logger(__name__)

def args_type_assignment(user_assigned_flag, system_assigned_flag):
    if system_assigned_flag and user_assigned_flag:
        return "SystemAssigned,UserAssigned"
    if system_assigned_flag:
        return "SystemAssigned"
    if user_assigned_flag:
        return "UserAssigned"
    return "None"


class IdentityAssign(_IdentityAssign):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZStrArg
        args_schema.identities = AAZListArg(
            options=["--identities"],
            help="""Space-separated identities to assign. Use
                '[system]' to refer to the system assigned identity. Default: '[system]'""",
            required=False,
            default=["[system]"]
        )
        args_schema.identities.Element = AAZStrArg()
        args_schema.type._registered = False
        args_schema.type._required = False
        args_schema.user_assigned_identities._registered = False
        args_schema.user_assigned_identities._required = False
        return args_schema

    def pre_instance_create(self):
        instance = self.ctx.vars.instance
        current_identity_type = instance.identity.type
        current_user_assigned_identities = instance.identity.user_assigned_identities
        current_user_assigned_identities = dict.fromkeys(current_user_assigned_identities.keys(), {})
        args = self.ctx.args
        system_assigned_flag = False
        user_assigned_flag = False
        user_dict = {}

        if "SystemAssigned" in str(current_identity_type):
            system_assigned_flag = True
        if "UserAssigned" in str(current_identity_type):
            user_assigned_flag = True

        for identity in args.identities:
            if str(identity) == "[system]" or str(identity) == "system":
                system_assigned_flag = True
            else:
                user_assigned_flag = True
                user_dict[str(identity)] = {}

        if user_assigned_flag:
            user_dict.update(current_user_assigned_identities)
            args.user_assigned_identities = user_dict

        args.type = args_type_assignment(user_assigned_flag, system_assigned_flag)


class IdentityRemove(_IdentityRemove):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZStrArg
        args_schema.identities = AAZListArg(
            options=["--identities"],
            help="Space-separated identities to remove. Use '[system]' to refer to the system assigned identity.",
            required=False,
            default=["*"]
        )
        args_schema.identities.Element = AAZStrArg()
        args_schema.type._registered = False
        args_schema.type._required = False
        args_schema.user_assigned_identities._registered = False
        args_schema.user_assigned_identities._required = False
        return args_schema

    def pre_instance_update(self, instance):
        current_identity_type = ""
        current_assigned_identities = {}
        system_assigned_flag = False
        user_assigned_flag = False
        args = self.ctx.args
        current_identity_type = instance.type
        current_assigned_identities = instance.user_assigned_identities
        current_assigned_identities = dict.fromkeys(current_assigned_identities.keys(), {})
        print(current_assigned_identities)

        del instance.user_assigned_identities

        if "SystemAssigned" in str(current_identity_type):
            system_assigned_flag = True
        if "UserAssigned" in str(current_identity_type):
            user_assigned_flag = True

        user_dict = {}

        for identity in args.identities:
            if str(identity) == "*":
                system_assigned_flag = False
                user_assigned_flag = False
            elif str(identity) == "[system]" or str(identity) == "system":
                if system_assigned_flag is True:
                    system_assigned_flag = False
                else:
                    logger.warning("The resource does not currently have a system assigned managed identity.")
                    raise Exception
            else:  # case for user identity
                if str(identity) in current_assigned_identities:
                    print("hey")
                    current_assigned_identities.pop(str(identity))
                else:
                    logger.warning(
                        'The following was not found as a managed identity for the current resource: %s', str(identity)
                    )
                    raise Exception

        if len(current_assigned_identities) == 0:
            user_assigned_flag = False
        else:
            for identity in current_assigned_identities:
                user_dict[str(identity)] = {}
            args.user_assigned_identities = user_dict

        args.type = args_type_assignment(user_assigned_flag, system_assigned_flag)

class CommunicationCreate(_CommunicationCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        from azure.cli.core.aaz import AAZListArg, AAZStrArg
        args_schema.assign_identity = AAZListArg(
            options=["--assign-identity"],
            help="""Space-separated identities to assign. Use '[system]' to refer to the system assigned identity or a resource id to refer to a user assigned identity""",
            required=False
        )
        args_schema.assign_identity.Element = AAZStrArg()
        args_schema.identity._registered = False
        args_schema.identity._required = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        system_assigned_flag = False
        user_assigned_flag = False
        user_dict = {}

        for identity in args.assign_identity:
            if str(identity) == "[system]" or str(identity) == "system":
                system_assigned_flag = True
            else:
                user_assigned_flag = True
                user_dict[str(identity)] = {}

        if user_assigned_flag:
            args.identity.user_assigned_identities = user_dict

        args.identity.type = args_type_assignment(user_assigned_flag, system_assigned_flag)