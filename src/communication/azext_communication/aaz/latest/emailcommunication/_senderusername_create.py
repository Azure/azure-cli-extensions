# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *

@register_command(
    "communication email senderusername create",
)
class SenderUsernameCreate(AAZCommand):
    """Create a new SenderUsername or update an existing SenderUsername.

    :example: Create a sender username
        az communication email senderusername create -n ResourceName -g ResourceGroup --domain-name DomainName --sender-username SenderUsername --user-name Username --display-name DisplayName
    """

    _aaz_info = {
        "version": "2023-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourceGroups/{}/providers/Microsoft.Communication/emailServices/{}/domains/{}/senderUsernames/{}", "2023-04-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""
        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the EmailCommunicationService resource.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w]+$",
                max_length=63,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of resource group. You can configure the default group using `az configure --defaults group=<name>`.",
            required=True,
        )

        _args_schema.domain_name = AAZStrArg(
            options=["--domain-name"],
            help="Name of the Domain",
            required=True,
        )
        _args_schema.sender_username = AAZStrArg(
            options=["--sender-username"],
            help="Name of the sender username.",
            required=True,
        )

        # define Arg Group "Properties"
        _args_schema = cls._args_schema
        _args_schema.user_name = AAZStrArg(
            options=["--user-name"],
            required=True,
            arg_group="Properties",
            help="Name of the User name.",
        ) 
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            required=False,
            arg_group="Properties",
            help="Name of the Dispaly name.",
        ) 

        _args_schema = cls._args_schema
        _args_schema.data_location = AAZStrArg(
            options=["--data-location"],
            required=False,
            arg_group="Properties",
            help="The location where the sender username stores its data at rest.",
        )

        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.EmailCommunicationServicesCreateOrUpdateSenderUsername(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EmailCommunicationServicesCreateOrUpdateSenderUsername(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Communication/emailServices/{emailcommunicationServiceName}/domains/{domainName}/senderUsernames/{senderUsername}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "senderUsername", self.ctx.args.sender_username,
                    required=True,
                ),
                **self.serialize_url_param(
                    "domainName", self.ctx.args.domain_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "emailcommunicationServiceName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}}) 

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("username", AAZStrType, ".user_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("displayName", AAZStrType, ".display_name", typ_kwargs={"flags": {"required": False}})
                properties.set_prop("dataLocation", AAZStrType, ".data_location", typ_kwargs={"flags": {"required": False}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )            
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )
            properties = cls._schema_on_200_201.properties

            properties.username = AAZStrType(
                serialized_name="username",
                flags={"required": True},
            )

            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            properties.data_location = AAZStrType(
                serialized_name="dataLocation",
                flags={"required": True},
            )
            properties.host_name = AAZStrType(
                serialized_name="hostName",
                flags={"read_only": True},
            )
            properties.immutable_resource_id = AAZStrType(
                serialized_name="immutableResourceId",
                flags={"read_only": True},
            )
            properties.notification_hub_id = AAZStrType(
                serialized_name="notificationHubId",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.version = AAZStrType(
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )
            return cls._schema_on_200_201

class _SenderUsernameCreateHelper:
    """Helper class for SenderUsername Create"""

__all__ = ["SenderUsernameCreate"]