# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, live_only
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from .preparers import CommunicationResourcePreparer
from .example_steps_communication_smtpusername import step_create
from .example_steps_communication_smtpusername import step_show
from .example_steps_communication_smtpusername import step_list
from .example_steps_communication_smtpusername import step_list2
from .example_steps_communication_smtpusername import step_update
from .example_steps_communication_smtpusername import step_delete
from .recording_processors import BodyReplacerProcessor, URIIdentityReplacer
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg, cr):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg, cr):
    pass

def get_domain_resource_count_by_communication_service(self, rg, cr):
    count = self.cmd('az communication smtp-username list --comm-service-name "{cr}" --resource-group "{rg}" --query "[].id | length(@)"').output.strip()
    return int(count)

# Testcase: Scenario
@try_manual
def call_scenario(test, rg, cr):
    setup_scenario(test, rg, cr)

    step_create(test, rg,cr, checks=[
        test.check("name", "{mySmtpUsername}", case_sensitive=False),
        test.check("entraApplicationId", "735ffca9-2020-4c43-a16d-128dd4221e90", case_sensitive=False),
        test.check("tenantId", "72f988bf-86f1-41af-91ab-2d7cd011db47", case_sensitive=False),
        test.check("username", "TestUsername", case_sensitive=False),
    ])

    step_show(test, rg, cr, checks=[
        test.check("name", "{mySmtpUsername}", case_sensitive=False),
        test.check("entraApplicationId", "735ffca9-2020-4c43-a16d-128dd4221e90", case_sensitive=False),
        test.check("tenantId", "72f988bf-86f1-41af-91ab-2d7cd011db47", case_sensitive=False),
        test.check("username", "TestUsername", case_sensitive=False),
    ])

    expected_count = 1
    if test.kwargs['existingResourceCountByCommunicationService'] is not None:
        expected_count = test.kwargs['existingResourceCountByCommunicationService'] + 1

    step_list(test, rg, cr, checks=[
        test.check('length(@)', expected_count),
    ])

    step_list2(test, rg, cr, checks=[
        test.check('length(@)', expected_count),
    ])

    step_update(test, rg, cr, checks=[
        test.check("name", "{mySmtpUsername}", case_sensitive=False),
        test.check("entraApplicationId", "735ffca9-2020-4c43-a16d-128dd4221e99", case_sensitive=False),
        test.check("tenantId", "72f988bf-86f1-41af-91ab-2d7cd011db47", case_sensitive=False),
        test.check("username", "TestUsername", case_sensitive=False),
    ])

    step_delete(test, rg, cr, checks=[])

    cleanup_scenario(test, rg, cr)

# Test class for Scenario
@try_manual
class CommunicationSmtpUsernameScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(CommunicationSmtpUsernameScenarioTest, self).__init__(recording_processors=[
            URIIdentityReplacer(),
            BodyReplacerProcessor(keys=["createdBy", "lastModifiedBy", "identity", "dataLocation", "immutableResourceId", "hostname"])
        ], *args, **kwargs)

        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
        })

        self.kwargs.update({
            'existingResourceCountByCommunicationService': 0,
        })

        self.kwargs.update({
            'mySmtpUsername': "TestSMTPUsername",
        })

        self.kwargs.update({
            'cr': self.create_random_name(prefix='clismtpusernametest'[:18], length=24),
        })
        
    @live_only()
    @AllowLargeResponse()
    @ResourceGroupPreparer(name_prefix='clitestcommunication_MyResourceGroup'[:7], key='rg', parameter_name='rg')
    @CommunicationResourcePreparer(name_prefix='clismtpusernametest', key='cr', parameter_name='cr', resource_group_parameter_name='rg')
    def test_communication_smtpusername_scenarios(self, rg, cr):
        self.kwargs['existingResourceCountByCommunicationService'] = get_domain_resource_count_by_communication_service(self, rg, cr)
        call_scenario(self, rg, cr)
        calc_coverage(__file__)
        raise_if()
