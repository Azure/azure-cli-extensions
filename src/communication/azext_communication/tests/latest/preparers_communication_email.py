# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.cli.testsdk.scenario_tests import SingleValueReplacer
from azure.cli.testsdk.preparers import NoTrafficRecordingPreparer, ResourceGroupPreparer
from azure.cli.testsdk.exceptions import CliTestError
from azure.cli.testsdk.reverse_dependency import get_dummy_cli
import os


# Email Service resource preparer and its shorthand decorator
# pylint: disable=too-many-instance-attributes
class EmailCommunicationResourcePreparer(NoTrafficRecordingPreparer, SingleValueReplacer):
    def __init__(self, name_prefix='clitestemail', location='Global', data_location='United States', length=24,
                 parameter_name='ecs', resource_group_parameter_name='resource_group', skip_delete=True,
                 dev_setting_name='AZURE_CLI_TEST_DEV_EMAIL_COMMUNICATION_RESOURCE_NAME', key='ecs'):
        super(EmailCommunicationResourcePreparer, self).__init__(name_prefix, length)
        self.cli_ctx = get_dummy_cli()
        self.location = location
        self.data_location = data_location
        self.resource_group_parameter_name = resource_group_parameter_name
        self.skip_delete = skip_delete
        self.parameter_name = parameter_name
        self.key = key
        self.dev_setting_name = os.environ.get(dev_setting_name, None)

    def create_resource(self, name, **kwargs):
        group = self._get_resource_group(**kwargs)

        if not self.dev_setting_name:
            template = 'az communication email create --name {} --location {} --data-location "{}" --resource-group {} '
            self.live_only_execute(self.cli_ctx, template.format(name, self.location, self.data_location, group))
        else:
            name = self.dev_setting_name

        self.test_class_instance.kwargs[self.key] = name

        return {self.parameter_name: name}

    def remove_resource(self, name, **kwargs):
        if not self.skip_delete and not self.dev_setting_name:
            group = self._get_resource_group(**kwargs)
            self.live_only_execute(self.cli_ctx, 'az communication email delete --name {} --resource-group {} --yes'.format(name, group))

    def _get_resource_group(self, **kwargs):
        try:
            return kwargs.get(self.resource_group_parameter_name)
        except KeyError:
            template = 'To create an email communication resource a resource group is required. Please add ' \
                       'decorator @{} in front of this email communication resource preparer.'
            raise CliTestError(template.format(ResourceGroupPreparer.__name__))


# Domain resource preparer and its shorthand decorator
# pylint: disable=too-many-instance-attributes
class EmailDomainPreparer(NoTrafficRecordingPreparer, SingleValueReplacer):
    def __init__(self, name_prefix='acs.contoso.net', location='Global', length=28,
                 parameter_name='domain', email_service_parameter_name='email_service', domain_management='CustomerManaged', resource_group_parameter_name='resource_group', skip_delete=True,
                 dev_setting_name='AZURE_CLI_TEST_DEV_EMAIL_COMMUNICATION_RESOURCE_NAME', key='domain'):
        super(EmailDomainPreparer, self).__init__(name_prefix,length)
        self.cli_ctx = get_dummy_cli()
        self.domain_management = domain_management
        self.resource_group_parameter_name = resource_group_parameter_name
        self.email_service_parameter_name = email_service_parameter_name
        self.skip_delete = skip_delete
        self.parameter_name = parameter_name
        self.location = location
        self.key = key
        self.dev_setting_name = os.environ.get(dev_setting_name, None)

    def create_resource(self, name, **kwargs):
        group = self._get_resource_group(**kwargs)
        emailservice = self._get_email_service(**kwargs)

        if not self.dev_setting_name:
            template = 'az communication email domain create --domain-name {} --email-service-name {} --location {} --domain-management {} --resource-group {} '
            self.live_only_execute(self.cli_ctx, template.format(name, emailservice, self.location, self.domain_management, group))
        else:
            name = self.dev_setting_name

        self.test_class_instance.kwargs[self.key] = name

        return {self.parameter_name: name}

    def remove_resource(self, name, **kwargs):
        if not self.skip_delete and not self.dev_setting_name:
            group = self._get_resource_group(**kwargs)
            self.live_only_execute(self.cli_ctx, 'az communication email domain delete --domain-name {} --email-service-name {} --resource-group {} --yes'.format(name, group))

    def _get_resource_group(self, **kwargs):
        try:
            return kwargs.get(self.resource_group_parameter_name)
        except KeyError:
            template = 'To create an email communication resource a resource group is required. Please add ' \
                       'decorator @{} in front of this email communication resource preparer.'
            raise CliTestError(template.format(ResourceGroupPreparer.__name__))

    def _get_email_service(self, **kwargs):
        try:
            return kwargs.get(self.email_service_parameter_name)
        except KeyError:
            template = 'To create an domain resource an email resource is required. Please add ' \
                       'decorator @{} in front of this domain resource preparer.'
            raise CliTestError(template.format(EmailCommunicationResourcePreparer.__name__))
