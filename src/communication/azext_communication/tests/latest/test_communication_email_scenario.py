# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, live_only
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from .example_steps_communication_email import step_create
from .example_steps_communication_email import step_show
from .example_steps_communication_email import step_list
from .example_steps_communication_email import step_list2
from .example_steps_communication_email import step_update
from .example_steps_communication_email import step_delete
from .recording_processors import BodyReplacerProcessor, URIIdentityReplacer
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))

# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg):
    pass


def get_resource_count_by_resource_group(self, rg):
    count = self.cmd('az communication email list --resource-group "{rg}" --query "[].id | length(@)"').output.strip()
    return int(count)


# Testcase: Scenario
@try_manual
def call_scenario(test, rg_2, rg):
    # Set up the environment
    setup_scenario(test, rg_2, rg)

    # Step to create a new Email Service resource with the expected checks
    step_create(test, rg_2, rg, checks=[
        test.check("name", "{myEmailCommunicationService}", case_sensitive=False),
        test.check("location", "Global", case_sensitive=False),
        test.check("dataLocation", "United States", case_sensitive=False),
    ])

    # Step to show the created Email Service resource with the expected checks
    step_show(test, rg_2, rg, checks=[
        test.check("name", "{myEmailCommunicationService}", case_sensitive=False),
        test.check("location", "Global", case_sensitive=False),
        test.check("dataLocation", "United States", case_sensitive=False),
    ])

    # Expected number of resources after creation
    expected_count = 1
    # Adjust expected count if the test input specifies an existing resource count
    if test.kwargs['existingResourceCountByResourceGroup'] is not None:
        expected_count = test.kwargs['existingResourceCountByResourceGroup'] + 1
    
    # Step to list the resources and check the length of the list
    step_list(test, rg_2, rg, checks=[
        test.check('length(@)', expected_count),
    ])

    # Another step to list the resources and check the length of the list with -g
    step_list2(test, rg_2, rg, checks=[
        test.check('length(@)', expected_count),
    ])

    # Step to update the Email Service with new tag values and verify the update
    step_update(test, rg_2, rg, checks=[
        test.check("name", "{myEmailCommunicationService}", case_sensitive=False),
        test.check("location", "Global", case_sensitive=False),
        test.check("dataLocation", "United States", case_sensitive=False),
        test.check("tags.newTag", "newVal", case_sensitive=False)
    ])

    # Step to delete the Email Service resource
    step_delete(test, rg_2, rg, checks=[])

    # Clean up the environment after the test
    cleanup_scenario(test, rg_2, rg)


# Test class for Scenario
@try_manual
class CommunicationEmailScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(CommunicationEmailScenarioTest, self).__init__(recording_processors=[
            URIIdentityReplacer(),
            BodyReplacerProcessor(keys=["createdBy", "lastModifiedBy", "identity", "dataLocation", "immutableResourceId", "hostname"])
        ], *args, **kwargs)

        self.kwargs.update({
            'subscription_id': self.get_subscription_id(), # Subscription ID for the current test
        })

        self.kwargs.update({
            'existingResourceCountByResourceGroup': 0,  # Initial resource count
        })

        # Generating a random name for the Email Service resource
        self.kwargs.update({
            'myEmailCommunicationService': self.create_random_name(prefix='MyEmailCommunicationResource'[:11], length=23),
        })
      

    @live_only() # Test will only run in live environment
    @AllowLargeResponse()
    @ResourceGroupPreparer(name_prefix='clitestcommunication_MyOtherResourceGroup'[:7], key='rg_2',
                           parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestcommunication_MyResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_communication_email_scenarios(self, rg_2, rg):
        # Get the initial count of Email Service resources
        self.kwargs['existingResourceCountByResourceGroup'] = get_resource_count_by_resource_group(self, rg)

        # Run the test scenarios
        call_scenario(self, rg_2, rg)

        # Calculate the test coverage for the current file
        calc_coverage(__file__)

        # Raise an exception if any assertion or validation fails
        raise_if()
