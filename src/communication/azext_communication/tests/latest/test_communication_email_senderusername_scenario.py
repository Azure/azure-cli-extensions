# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, live_only
from azure.cli.testsdk.scenario_tests import AllowLargeResponse
from .preparers_communication_email import EmailCommunicationResourcePreparer, EmailDomainPreparer
from .example_steps_communication_email_senderusername import step_create
from .example_steps_communication_email_senderusername import step_show
from .example_steps_communication_email_senderusername import step_list
from .example_steps_communication_email_senderusername import step_list2
from .example_steps_communication_email_senderusername import step_update
from .example_steps_communication_email_senderusername import step_delete
from .recording_processors import BodyReplacerProcessor, URIIdentityReplacer
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg, ecs, domain):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg, ecs, domain):
    pass


def get_domain_resource_count_by_domain(self, rg, ecs, domain):
    count = self.cmd('az communication email domain sender-username list --domain-name "{domain}" --email-service-name "{ecs}" --resource-group "{rg}" --query "[].id | length(@)"').output.strip()
    return int(count)


# Testcase: Scenario
@try_manual
def call_scenario(test, rg, ecs, domain):
    # Set up the environment
    setup_scenario(test, rg, ecs, domain)

    # Step to create a new sender username resource with the expected checks
    step_create(test, rg, ecs, domain, checks=[
        test.check("name", "{mySenderUsername}", case_sensitive=False),
        test.check("username", "{mySenderUsername}", case_sensitive=False),
    ])

    # Step to show the created sender username resource with the expected checks
    step_show(test, rg, ecs, domain, checks=[
        test.check("name", "{mySenderUsername}", case_sensitive=False),
        test.check("username", "{mySenderUsername}", case_sensitive=False),
    ])

    # Expected number of resources after creation
    expected_count = 1
    # Adjust expected count if the test input specifies an existing resource count
    if test.kwargs['existingResourceCountByDomain'] is not None:
        expected_count = test.kwargs['existingResourceCountByDomain'] + 1

    # Step to list the resources and check the length of the list
    step_list(test, rg, ecs, domain, checks=[
        test.check('length(@)', expected_count),
    ])

    # Another step to list the resources and check the length of the list with -g
    step_list2(test, rg, ecs, domain, checks=[
        test.check('length(@)', expected_count),
    ])

    # Step to update the sender username with display name and verify the update
    step_update(test, rg, ecs, domain, checks=[
        test.check("name", "{mySenderUsername}", case_sensitive=False),
        test.check("username", "{mySenderUsername}", case_sensitive=False),
        test.check("displayName", "newDisplayname", case_sensitive=False),
    ])

    # Step to delete the sender username resource
    step_delete(test, rg, ecs, domain, checks=[])

    # Clean up the environment after the test
    cleanup_scenario(test, rg, ecs, domain)


# Test class for Scenario
@try_manual
class CommunicationEmailSenderUsernameScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(CommunicationEmailSenderUsernameScenarioTest, self).__init__(recording_processors=[
            URIIdentityReplacer(),
            BodyReplacerProcessor(keys=["createdBy", "lastModifiedBy", "identity", "dataLocation", "immutableResourceId", "hostname"])
        ], *args, **kwargs)

        self.kwargs.update({
            'subscription_id': self.get_subscription_id(), # Subscription ID for the current test
        })

        self.kwargs.update({
            'existingResourceCountByDomain': 0, # Initial resource count
        })

        # Generating a random name for the email service resource
        self.kwargs.update({
            'ecs': self.create_random_name(prefix='clitestemail'[:11], length=24),
        })

        # Generating a random name for the domain
        self.kwargs.update({
            'domain': self.create_random_name(prefix='acs.contoso.net'[:21], length=28),
        })

        # Generating a random name for the sender username resource
        self.kwargs.update({
            'mySenderUsername': self.create_random_name(prefix='clitestsenderusername'[:21], length=28),
        })


    @live_only()
    @AllowLargeResponse()
    @ResourceGroupPreparer(name_prefix='clitestcommunication_MyResourceGroup'[:7], key='rg', parameter_name='rg')
    @EmailCommunicationResourcePreparer(name_prefix='clitestemail', key='ecs', parameter_name='ecs', resource_group_parameter_name='rg')
    @EmailDomainPreparer(name_prefix ='acs.contoso.net',key='domain', parameter_name='domain', resource_group_parameter_name='rg', email_service_parameter_name='ecs')
    def test_communication_email_senderusername_scenarios(self, rg, ecs, domain):
        # Get the initial count of sender username resources
        self.kwargs['existingResourceCountByDomain'] = get_domain_resource_count_by_domain(self, rg, ecs, domain)

        # Run the test scenarios
        call_scenario(self, rg, ecs, domain)

        # Calculate the test coverage for the current file
        calc_coverage(__file__)

        # Raise an exception if any assertion or validation fails
        raise_if()
