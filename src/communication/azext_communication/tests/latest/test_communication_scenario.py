# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest, record_only
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_create
from .example_steps import step_show
from .example_steps import step_list
from .example_steps import step_list
from .example_steps import step_update
from .example_steps import step_link_notification_hub
from .example_steps import step_list_key
from .example_steps import step_regenerate_key
from .example_steps import step_delete
from .example_steps import step_show_status
from .. import (
    try_manual,
    # raise_if,
    # calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg_2, rg):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg_2, rg):
    pass


# Testcase: Scenario
# @try_manual
# def call_scenario(test, rg_2, rg):
#     setup_scenario(test, rg_2, rg)
#     step_create(test, rg_2, rg, checks=[
#         test.check("name", "{myCommunicationService}", case_sensitive=False),
#         test.check("location", "Global", case_sensitive=False),
#         test.check("dataLocation", "United States", case_sensitive=False),
#     ])
#     step_show(test, rg_2, rg, checks=[
#         test.check("name", "{myCommunicationService}", case_sensitive=False),
#         test.check("location", "Global", case_sensitive=False),
#         test.check("dataLocation", "United States", case_sensitive=False),
#     ])
#     step_list(test, rg_2, rg, checks=[
#         test.check('length(@)', 1),
#     ])
#     step_list(test, rg_2, rg, checks=[
#         test.check('length(@)', 1),
#     ])
#     step_update(test, rg_2, rg, checks=[
#         test.check("name", "{myCommunicationService}", case_sensitive=False),
#         test.check("location", "Global", case_sensitive=False),
#         test.check("dataLocation", "United States", case_sensitive=False),
#         test.check("tags.newTag", "newVal", case_sensitive=False),
#     ])
#     step_link_notification_hub(test, rg_2, rg, checks=[])
#     step_list_key(test, rg_2, rg, checks=[])
#     step_regenerate_key(test, rg_2, rg, checks=[])
#     step_delete(test, rg_2, rg, checks=[])
#     step_show_status(test, rg_2, rg, checks=[])
#     cleanup_scenario(test, rg_2, rg)


# # Test class for Scenario
# @try_manual
# class CommunicationScenarioTest(ScenarioTest):

#     @ResourceGroupPreparer(name_prefix='clitestcommunication_MyOtherResourceGroup'[:7], key='rg_2',
#                            parameter_name='rg_2')
#     @ResourceGroupPreparer(name_prefix='clitestcommunication_MyResourceGroup'[:7], key='rg', parameter_name='rg')
#     def test_communication_Scenario(self, rg_2, rg):

#         self.kwargs.update({
#             'subscription_id': self.get_subscription_id()
#         })

#         self.kwargs.update({
#             'myCommunicationService': 'MyCommunicationResource',
#         })

#         call_scenario(self, rg_2, rg)
#         calc_coverage(__file__)
#         raise_if()


class CommunicationServiceScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix="test_service_create_and_update_")
    def test_service_create_and_update(self, resource_group):

        self.kwargs.update({
            "myCommunicationService": "comm-100001",
        })

        # create a communication service
        step_create(self, rg_2=None, rg=resource_group)

        # show that communication service
        step_show(self, rg_2=None, rg=resource_group)

        # list all communication services by resource group
        step_list(self, rg_2=None, rg=resource_group)

        # update tag of that service
        step_update(self, rg_2=None, rg=resource_group)
        # show that communication service
        step_show(self, rg_2=None, rg=resource_group)

        # delete that service
        step_delete(self, rg_2=None, rg=resource_group)

        # list current all communication services by resource group
        step_show(self, rg_2=None, rg=resource_group)

    @ResourceGroupPreparer(name_prefix="test_service_generate_and_link_key_")
    def test_service_regenerate_and_link_key(self, resource_group):

        self.kwargs.update({
            "myCommunicationService": "comm-100002",
        })

        # create a communication service
        step_create(self, rg_2=None, rg=resource_group)

        step_list_key(self, rg_2=None, rg=resource_group)

        # regenerate a new one
        step_regenerate_key(self, rg_2=None, rg=resource_group)

        # the listed keys would be different with the previous one
        step_list_key(self, rg_2=None, rg=resource_group)

        # delete that service
        step_delete(self, rg_2=None, rg=resource_group)

    @record_only()  # notification hub is an extension
    @ResourceGroupPreparer(name_prefix="test_service_link_to_notification_hub_")
    def test_service_link_to_notification_hub(self, resource_group):

        # notification-hub is an extension
        self.kwargs.update({
            "myCommunicationService": "comm-100003",
            "notificationHubID": "/subscriptions/0b1f6471-1bf0-4dda-aec3-cb9272f09590/resourceGroups/harold/providers/Microsoft.NotificationHubs/namespaces/testcommunication1/notificationHubs/puhs-hub-1"
        })

        # create a communication service
        step_create(self, rg_2=None, rg=resource_group)

        # link a notification hub
        self.cmd('az communication link-notification-hub '
                 '--name "{myCommunicationService}" '
                 '--connection-string "Endpoint=sb://testcommunication1.servicebus.windows.net/;SharedAccessKeyName=DefaultListenSharedAccessSignature;SharedAccessKey=4szS1x2H6uI/smTk3C8nEaGrCLLZr1g/kY1fGJgPE7I=" '
                 '--resource-id "{notificationHubID}" '
                 '--resource-group "{rg}"',
                 checks=[])

        # delete that service
        step_delete(self, rg_2=None, rg=resource_group)
