# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer
from .preparers import VirtualNetworkPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup
@try_manual
def setup(test, rg_2, rg, rg_3):
    pass


# EXAMPLE: /IntegrationAccounts/put/Create or update an integration account
@try_manual
def step__integrationaccounts_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account create '
             '--location "westus" '
             '--integration-service-environment-sku name="Standard" '
             '--name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "westus", case_sensitive=False),
                 test.check("sku.name", "Standard", case_sensitive=False),
                 test.check("name", "{myIntegrationAccount}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationAccounts/get/Get integration account by name
@try_manual
def step__integrationaccounts_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account show '
             '--name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "westus", case_sensitive=False),
                 test.check("sku.name", "Standard", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationAccounts/get/List integration accounts by resource group name
@try_manual
def step__integrationaccounts_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account list '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /IntegrationAccounts/get/List integration accounts by subscription
@try_manual
def step__integrationaccounts_get3(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account list '
             '-g ""',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /IntegrationAccounts/patch/Patch an integration account
@try_manual
def step__integrationaccounts_patch(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account update '
             '--location "westus" '
             '--integration-service-environment-sku name="Standard" '
             '--name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("location", "westus", case_sensitive=False),
                 test.check("sku.name", "Standard", case_sensitive=False),
                 test.check("name", "{myIntegrationAccount}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationAccounts/post/Get Integration Account callback URL
@try_manual
def step__integrationaccounts_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account list-key-vault-key '
             '--name "{myIntegrationAccount}" '
             '--key-vault-id "subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/testResourceGroup/provi'
             'ders/Microsoft.KeyVault/vaults/testKeyVault" '
             '--skip-token "testSkipToken" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccounts/post/List IntegrationAccount callback URL
@try_manual
def step__integrationaccounts_post2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account list-callback-url '
             '--name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--not-after "2017-03-05T08:00:00Z" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccounts/post/Log a tracked event
@try_manual
def step__integrationaccounts_post_log_a_tracked_event(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account log-tracking-event '
             '--name "{myIntegrationAccount}" '
             '--events "[{{\\"error\\":{{\\"code\\":\\"NotFound\\",\\"message\\":\\"Some error '
             'occurred\\"}},\\"eventLevel\\":\\"Informational\\",\\"eventTime\\":\\"2016-08-05T01:54:49.505567Z\\",\\"r'
             'ecord\\":{{\\"agreementProperties\\":{{\\"agreementName\\":\\"testAgreement\\",\\"as2From\\":\\"testas2fr'
             'om\\",\\"as2To\\":\\"testas2to\\",\\"receiverPartnerName\\":\\"testPartner2\\",\\"senderPartnerName\\":\\'
             '"testPartner1\\"}},\\"messageProperties\\":{{\\"IsMessageEncrypted\\":false,\\"IsMessageSigned\\":false,'
             '\\"correlationMessageId\\":\\"Unique message identifier\\",\\"direction\\":\\"Receive\\",\\"dispositionTy'
             'pe\\":\\"received-success\\",\\"fileName\\":\\"test\\",\\"isMdnExpected\\":true,\\"isMessageCompressed\\"'
             ':false,\\"isMessageFailed\\":false,\\"isNrrEnabled\\":true,\\"mdnType\\":\\"Async\\",\\"messageId\\":\\"1'
             '2345\\"}}}},\\"recordType\\":\\"AS2Message\\"}}]" '
             '--source-type "Microsoft.Logic/workflows" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccounts/post/Regenerate access key
@try_manual
def step__integrationaccounts_post3(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account regenerate-access-key '
             '--name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAgreements/put/Create or update an agreement
@try_manual
def step__integrationaccountagreements_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-agreement create '
             '--agreement "{{\\"location\\":\\"westus\\",\\"tags\\":{{\\"IntegrationAccountAgreement\\":\\"<Integration'
             'AccountAgreementName>\\"}},\\"metadata\\":{{}},\\"agreementType\\":\\"AS2\\",\\"hostPartner\\":\\"HostPar'
             'tner\\",\\"guestPartner\\":\\"GuestPartner\\",\\"hostIdentity\\":{{\\"qualifier\\":\\"ZZ\\",\\"value\\":'
             '\\"ZZ\\"}},\\"guestIdentity\\":{{\\"qualifier\\":\\"AA\\",\\"value\\":\\"AA\\"}},\\"content\\":{{\\"aS2\\'
             '":{{\\"receiveAgreement\\":{{\\"protocolSettings\\":{{\\"acknowledgementConnectionSettings\\":{{\\"ignore'
             'CertificateNameMismatch\\":true,\\"keepHttpConnectionAlive\\":true,\\"supportHttpStatusCodeContinue\\":tr'
             'ue,\\"unfoldHttpHeaders\\":true}},\\"envelopeSettings\\":{{\\"autogenerateFileName\\":true,\\"fileNameTem'
             'plate\\":\\"Test\\",\\"messageContentType\\":\\"text/plain\\",\\"suspendMessageOnFileNameGenerationError'
             '\\":true,\\"transmitFileNameInMimeHeader\\":true}},\\"errorSettings\\":{{\\"resendIfMDNNotReceived\\":tru'
             'e,\\"suspendDuplicateMessage\\":true}},\\"mdnSettings\\":{{\\"dispositionNotificationTo\\":\\"http://temp'
             'uri.org\\",\\"mdnText\\":\\"Sample\\",\\"micHashingAlgorithm\\":\\"SHA1\\",\\"needMDN\\":true,\\"receiptD'
             'eliveryUrl\\":\\"http://tempuri.org\\",\\"sendInboundMDNToMessageBox\\":true,\\"sendMDNAsynchronously\\":'
             'true,\\"signMDN\\":true,\\"signOutboundMDNIfOptional\\":true}},\\"messageConnectionSettings\\":{{\\"ignor'
             'eCertificateNameMismatch\\":true,\\"keepHttpConnectionAlive\\":true,\\"supportHttpStatusCodeContinue\\":t'
             'rue,\\"unfoldHttpHeaders\\":true}},\\"securitySettings\\":{{\\"enableNRRForInboundDecodedMessages\\":true'
             ',\\"enableNRRForInboundEncodedMessages\\":true,\\"enableNRRForInboundMDN\\":true,\\"enableNRRForOutboundD'
             'ecodedMessages\\":true,\\"enableNRRForOutboundEncodedMessages\\":true,\\"enableNRRForOutboundMDN\\":true,'
             '\\"overrideGroupSigningCertificate\\":false}},\\"validationSettings\\":{{\\"checkCertificateRevocationLis'
             'tOnReceive\\":true,\\"checkCertificateRevocationListOnSend\\":true,\\"checkDuplicateMessage\\":true,\\"co'
             'mpressMessage\\":true,\\"encryptMessage\\":false,\\"encryptionAlgorithm\\":\\"AES128\\",\\"interchangeDup'
             'licatesValidityDays\\":100,\\"overrideMessageProperties\\":true,\\"signMessage\\":false}}}},\\"receiverBu'
             'sinessIdentity\\":{{\\"qualifier\\":\\"ZZ\\",\\"value\\":\\"ZZ\\"}},\\"senderBusinessIdentity\\":{{\\"qua'
             'lifier\\":\\"AA\\",\\"value\\":\\"AA\\"}}}},\\"sendAgreement\\":{{\\"protocolSettings\\":{{\\"acknowledge'
             'mentConnectionSettings\\":{{\\"ignoreCertificateNameMismatch\\":true,\\"keepHttpConnectionAlive\\":true,'
             '\\"supportHttpStatusCodeContinue\\":true,\\"unfoldHttpHeaders\\":true}},\\"envelopeSettings\\":{{\\"autog'
             'enerateFileName\\":true,\\"fileNameTemplate\\":\\"Test\\",\\"messageContentType\\":\\"text/plain\\",\\"su'
             'spendMessageOnFileNameGenerationError\\":true,\\"transmitFileNameInMimeHeader\\":true}},\\"errorSettings'
             '\\":{{\\"resendIfMDNNotReceived\\":true,\\"suspendDuplicateMessage\\":true}},\\"mdnSettings\\":{{\\"dispo'
             'sitionNotificationTo\\":\\"http://tempuri.org\\",\\"mdnText\\":\\"Sample\\",\\"micHashingAlgorithm\\":\\"'
             'SHA1\\",\\"needMDN\\":true,\\"receiptDeliveryUrl\\":\\"http://tempuri.org\\",\\"sendInboundMDNToMessageBo'
             'x\\":true,\\"sendMDNAsynchronously\\":true,\\"signMDN\\":true,\\"signOutboundMDNIfOptional\\":true}},\\"m'
             'essageConnectionSettings\\":{{\\"ignoreCertificateNameMismatch\\":true,\\"keepHttpConnectionAlive\\":true'
             ',\\"supportHttpStatusCodeContinue\\":true,\\"unfoldHttpHeaders\\":true}},\\"securitySettings\\":{{\\"enab'
             'leNRRForInboundDecodedMessages\\":true,\\"enableNRRForInboundEncodedMessages\\":true,\\"enableNRRForInbou'
             'ndMDN\\":true,\\"enableNRRForOutboundDecodedMessages\\":true,\\"enableNRRForOutboundEncodedMessages\\":tr'
             'ue,\\"enableNRRForOutboundMDN\\":true,\\"overrideGroupSigningCertificate\\":false}},\\"validationSettings'
             '\\":{{\\"checkCertificateRevocationListOnReceive\\":true,\\"checkCertificateRevocationListOnSend\\":true,'
             '\\"checkDuplicateMessage\\":true,\\"compressMessage\\":true,\\"encryptMessage\\":false,\\"encryptionAlgor'
             'ithm\\":\\"AES128\\",\\"interchangeDuplicatesValidityDays\\":100,\\"overrideMessageProperties\\":true,\\"'
             'signMessage\\":false}}}},\\"receiverBusinessIdentity\\":{{\\"qualifier\\":\\"AA\\",\\"value\\":\\"AA\\"}}'
             ',\\"senderBusinessIdentity\\":{{\\"qualifier\\":\\"ZZ\\",\\"value\\":\\"ZZ\\"}}}}}}}}}}" '
             '--agreement-name "testAgreement" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAgreements/get/Get agreement by name
@try_manual
def step__integrationaccountagreements_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-agreement show '
             '--agreement-name "testAgreement" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAgreements/get/Get agreements by integration account name
@try_manual
def step__integrationaccountagreements_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-agreement list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAgreements/post/Get the content callback url
@try_manual
def step__integrationaccountagreements_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-agreement list-content-callback-url '
             '--agreement-name "testAgreement" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--not-after "2018-04-19T16:00:00Z" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAgreements/delete/Delete an agreement
@try_manual
def step__integrationaccountagreements_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-agreement delete -y '
             '--agreement-name "testAgreement" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAssemblies/put/Create or update an account assembly
@try_manual
def step__integrationaccountassemblies_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-assembly create '
             '--location "westus" '
             '--properties assembly-name="System.IdentityModel.Tokens.Jwt" content="Base64 encoded Assembly Content" '
             'metadata={{}} '
             '--assembly-artifact-name "testAssembly" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAssemblies/get/Get an integration account assembly
@try_manual
def step__integrationaccountassemblies_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-assembly show '
             '--assembly-artifact-name "testAssembly" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAssemblies/get/List integration account assemblies
@try_manual
def step__integrationaccountassemblies_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-assembly list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAssemblies/post/Get the callback url for an integration account assembly
@try_manual
def step__integrationaccountassemblies_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-assembly list-content-callback-url '
             '--assembly-artifact-name "testAssembly" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountAssemblies/delete/Delete an integration account assembly
@try_manual
def step__integrationaccountassemblies_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-assembly delete -y '
             '--assembly-artifact-name "testAssembly" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountBatchConfigurations/put/Create or update a batch configuration
@try_manual
def step__integrationaccountbatchconfigurations_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-batch-configuration create '
             '--location "westus" '
             '--batch-group-name "DEFAULT" '
             '--release-criteria-batch-size 234567 '
             '--release-criteria-message-count 10 '
             '--release-criteria-recurrence-frequency "Minute" '
             '--release-criteria-recurrence-interval 1 '
             '--release-criteria-recurrence-start-time "2017-03-24T11:43:00" '
             '--release-criteria-recurrence-time-zone "India Standard Time" '
             '--batch-configuration-name "testBatchConfiguration" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountBatchConfigurations/get/Get a batch configuration
@try_manual
def step__integrationaccountbatchconfigurations_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-batch-configuration show '
             '--batch-configuration-name "testBatchConfiguration" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountBatchConfigurations/get/List batch configurations
@try_manual
def step__integrationaccountbatchconfigurations_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-batch-configuration list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountBatchConfigurations/delete/Delete a batch configuration
@try_manual
def step__integrationaccountbatchconfigurations_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-batch-configuration delete -y '
             '--batch-configuration-name "testBatchConfiguration" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountCertificates/put/Create or update a certificate
@try_manual
def step__integrationaccountcertificates_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-certificate create '
             '--location "brazilsouth" '
             '--public-certificate "<publicCertificateValue>" '
             '--certificate-name "testCertificate" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountCertificates/get/Get certificate by name
@try_manual
def step__integrationaccountcertificates_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-certificate show '
             '--certificate-name "testCertificate" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountCertificates/get/Get certificates by integration account name
@try_manual
def step__integrationaccountcertificates_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-certificate list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountCertificates/delete/Delete a certificate
@try_manual
def step__integrationaccountcertificates_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-certificate delete -y '
             '--certificate-name "testCertificate" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountMaps/put/Create or update a map
@try_manual
def step__integrationaccountmaps_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-map create '
             '--integration-account-name "{myIntegrationAccount}" '
             '--location "westus" '
             '--content "<?xml version=\\"1.0\\" encoding=\\"UTF-16\\"?>\\r\\n<xsl:stylesheet '
             'xmlns:xsl=\\"http://www.w3.org/1999/XSL/Transform\\" xmlns:msxsl=\\"urn:schemas-microsoft-com:xslt\\" '
             'xmlns:var=\\"http://schemas.microsoft.com/BizTalk/2003/var\\" exclude-result-prefixes=\\"msxsl var s0 '
             'userCSharp\\" version=\\"1.0\\" xmlns:ns0=\\"http://BizTalk_Server_Project4.StringFunctoidsDestinationSch'
             'ema\\" xmlns:s0=\\"http://BizTalk_Server_Project4.StringFunctoidsSourceSchema\\" '
             'xmlns:userCSharp=\\"http://schemas.microsoft.com/BizTalk/2003/userCSharp\\">\\r\\n  <xsl:import '
             'href=\\"http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt\\" />\\r\\n  <xsl:output '
             'omit-xml-declaration=\\"yes\\" method=\\"xml\\" version=\\"1.0\\" />\\r\\n  <xsl:template '
             'match=\\"/\\">\\r\\n    <xsl:apply-templates select=\\"/s0:Root\\" />\\r\\n  </xsl:template>\\r\\n  '
             '<xsl:template match=\\"/s0:Root\\">\\r\\n    <xsl:variable name=\\"var:v1\\" '
             'select=\\"userCSharp:StringFind(string(StringFindSource/text()) , &quot;SearchString&quot;)\\" />\\r\\n  '
             '  <xsl:variable name=\\"var:v2\\" select=\\"userCSharp:StringLeft(string(StringLeftSource/text()) , '
             '&quot;2&quot;)\\" />\\r\\n    <xsl:variable name=\\"var:v3\\" select=\\"userCSharp:StringRight(string(Str'
             'ingRightSource/text()) , &quot;2&quot;)\\" />\\r\\n    <xsl:variable name=\\"var:v4\\" '
             'select=\\"userCSharp:StringUpperCase(string(UppercaseSource/text()))\\" />\\r\\n    <xsl:variable '
             'name=\\"var:v5\\" select=\\"userCSharp:StringLowerCase(string(LowercaseSource/text()))\\" />\\r\\n    '
             '<xsl:variable name=\\"var:v6\\" select=\\"userCSharp:StringSize(string(SizeSource/text()))\\" />\\r\\n   '
             ' <xsl:variable name=\\"var:v7\\" select=\\"userCSharp:StringSubstring(string(StringExtractSource/text()) '
             ', &quot;0&quot; , &quot;2&quot;)\\" />\\r\\n    <xsl:variable name=\\"var:v8\\" '
             'select=\\"userCSharp:StringConcat(string(StringConcatSource/text()))\\" />\\r\\n    <xsl:variable '
             'name=\\"var:v9\\" select=\\"userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))\\" />\\r\\n   '
             ' <xsl:variable name=\\"var:v10\\" select=\\"userCSharp:StringTrimRight(string(StringRightTrimSource/text('
             ')))\\" />\\r\\n    <ns0:Root>\\r\\n      <StringFindDestination>\\r\\n        <xsl:value-of '
             'select=\\"$var:v1\\" />\\r\\n      </StringFindDestination>\\r\\n      <StringLeftDestination>\\r\\n     '
             '   <xsl:value-of select=\\"$var:v2\\" />\\r\\n      </StringLeftDestination>\\r\\n      '
             '<StringRightDestination>\\r\\n        <xsl:value-of select=\\"$var:v3\\" />\\r\\n      '
             '</StringRightDestination>\\r\\n      <UppercaseDestination>\\r\\n        <xsl:value-of '
             'select=\\"$var:v4\\" />\\r\\n      </UppercaseDestination>\\r\\n      <LowercaseDestination>\\r\\n       '
             ' <xsl:value-of select=\\"$var:v5\\" />\\r\\n      </LowercaseDestination>\\r\\n      '
             '<SizeDestination>\\r\\n        <xsl:value-of select=\\"$var:v6\\" />\\r\\n      </SizeDestination>\\r\\n '
             '     <StringExtractDestination>\\r\\n        <xsl:value-of select=\\"$var:v7\\" />\\r\\n      '
             '</StringExtractDestination>\\r\\n      <StringConcatDestination>\\r\\n        <xsl:value-of '
             'select=\\"$var:v8\\" />\\r\\n      </StringConcatDestination>\\r\\n      <StringLeftTrimDestination>\\r\\'
             'n        <xsl:value-of select=\\"$var:v9\\" />\\r\\n      </StringLeftTrimDestination>\\r\\n      '
             '<StringRightTrimDestination>\\r\\n        <xsl:value-of select=\\"$var:v10\\" />\\r\\n      '
             '</StringRightTrimDestination>\\r\\n    </ns0:Root>\\r\\n  </xsl:template>\\r\\n</xsl:stylesheet>" '
             '--properties-content-type "application/xml" '
             '--map-type "Xslt" '
             '--metadata "{{}}" '
             '--map-name "testMap" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountMaps/get/Get map by name
@try_manual
def step__integrationaccountmaps_get_get_map_by_name(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-map show '
             '--integration-account-name "{myIntegrationAccount}" '
             '--map-name "testMap" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountMaps/get/Get maps by integration account name
@try_manual
def step__integrationaccountmaps_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-map list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountMaps/post/Get the content callback url
@try_manual
def step__integrationaccountmaps_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-map list-content-callback-url '
             '--integration-account-name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--not-after "2018-04-19T16:00:00Z" '
             '--map-name "testMap" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountMaps/delete/Delete a map
@try_manual
def step__integrationaccountmaps_delete_delete_a_map(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-map delete -y '
             '--integration-account-name "{myIntegrationAccount}" '
             '--map-name "testMap" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountPartners/put/Create or update a partner
@try_manual
def step__integrationaccountpartners_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-partner create '
             '--integration-account-name "{myIntegrationAccount}" '
             '--location "westus" '
             '--metadata "{{}}" '
             '--partner-type "B2B" '
             '--partner-name "testPartner" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountPartners/get/Get partner by name
@try_manual
def step__integrationaccountpartners_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-partner show '
             '--integration-account-name "{myIntegrationAccount}" '
             '--partner-name "testPartner" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountPartners/get/Get partners by integration account name
@try_manual
def step__integrationaccountpartners_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-partner list '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountPartners/post/Get the content callback url
@try_manual
def step__integrationaccountpartners_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-partner list-content-callback-url '
             '--integration-account-name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--not-after "2018-04-19T16:00:00Z" '
             '--partner-name "testPartner" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountPartners/delete/Delete a partner
@try_manual
def step__integrationaccountpartners_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-partner delete -y '
             '--integration-account-name "{myIntegrationAccount}" '
             '--partner-name "testPartner" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountSchemas/put/Create or update schema
@try_manual
def step__integrationaccountschemas_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-schema create '
             '--location "westus" '
             '--content "<?xml version=\\"1.0\\" encoding=\\"utf-16\\"?>\\r\\n<xs:schema '
             'xmlns:b=\\"http://schemas.microsoft.com/BizTalk/2003\\" xmlns=\\"http://Inbound_EDI.OrderFile\\" '
             'targetNamespace=\\"http://Inbound_EDI.OrderFile\\" xmlns:xs=\\"http://www.w3.org/2001/XMLSchema\\">\\r\\n'
             '  <xs:annotation>\\r\\n    <xs:appinfo>\\r\\n      <b:schemaInfo default_pad_char=\\" \\" '
             'count_positions_by_byte=\\"false\\" parser_optimization=\\"speed\\" lookahead_depth=\\"3\\" '
             'suppress_empty_nodes=\\"false\\" generate_empty_nodes=\\"true\\" allow_early_termination=\\"false\\" '
             'early_terminate_optional_fields=\\"false\\" allow_message_breakup_of_infix_root=\\"false\\" '
             'compile_parse_tables=\\"false\\" standard=\\"Flat File\\" root_reference=\\"OrderFile\\" />\\r\\n      '
             '<schemaEditorExtension:schemaInfo namespaceAlias=\\"b\\" extensionClass=\\"Microsoft.BizTalk.FlatFileExte'
             'nsion.FlatFileExtension\\" standardName=\\"Flat File\\" xmlns:schemaEditorExtension=\\"http://schemas.mic'
             'rosoft.com/BizTalk/2003/SchemaEditorExtensions\\" />\\r\\n    </xs:appinfo>\\r\\n  '
             '</xs:annotation>\\r\\n  <xs:element name=\\"OrderFile\\">\\r\\n    <xs:annotation>\\r\\n      '
             '<xs:appinfo>\\r\\n        <b:recordInfo structure=\\"delimited\\" preserve_delimiter_for_empty_data=\\"tr'
             'ue\\" suppress_trailing_delimiters=\\"false\\" sequence_number=\\"1\\" />\\r\\n      </xs:appinfo>\\r\\n '
             '   </xs:annotation>\\r\\n    <xs:complexType>\\r\\n      <xs:sequence>\\r\\n        '
             '<xs:annotation>\\r\\n          <xs:appinfo>\\r\\n            <b:groupInfo sequence_number=\\"0\\" '
             '/>\\r\\n          </xs:appinfo>\\r\\n        </xs:annotation>\\r\\n        <xs:element '
             'name=\\"Order\\">\\r\\n          <xs:annotation>\\r\\n            <xs:appinfo>\\r\\n              '
             '<b:recordInfo sequence_number=\\"1\\" structure=\\"delimited\\" preserve_delimiter_for_empty_data=\\"true'
             '\\" suppress_trailing_delimiters=\\"false\\" child_delimiter_type=\\"hex\\" child_delimiter=\\"0x0D '
             '0x0A\\" child_order=\\"infix\\" />\\r\\n            </xs:appinfo>\\r\\n          </xs:annotation>\\r\\n  '
             '        <xs:complexType>\\r\\n            <xs:sequence>\\r\\n              <xs:annotation>\\r\\n         '
             '       <xs:appinfo>\\r\\n                  <b:groupInfo sequence_number=\\"0\\" />\\r\\n                '
             '</xs:appinfo>\\r\\n              </xs:annotation>\\r\\n              <xs:element '
             'name=\\"Header\\">\\r\\n                <xs:annotation>\\r\\n                  <xs:appinfo>\\r\\n        '
             '            <b:recordInfo sequence_number=\\"1\\" structure=\\"delimited\\" '
             'preserve_delimiter_for_empty_data=\\"true\\" suppress_trailing_delimiters=\\"false\\" '
             'child_delimiter_type=\\"char\\" child_delimiter=\\"|\\" child_order=\\"infix\\" tag_name=\\"HDR|\\" '
             '/>\\r\\n                  </xs:appinfo>\\r\\n                </xs:annotation>\\r\\n                '
             '<xs:complexType>\\r\\n                  <xs:sequence>\\r\\n                    <xs:annotation>\\r\\n     '
             '                 <xs:appinfo>\\r\\n                        <b:groupInfo sequence_number=\\"0\\" />\\r\\n '
             '                     </xs:appinfo>\\r\\n                    </xs:annotation>\\r\\n                    '
             '<xs:element name=\\"PODate\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n     '
             '                   <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"1\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"PONumber\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n               '
             '         <xs:appinfo>\\r\\n                          <b:fieldInfo justification=\\"left\\" '
             'sequence_number=\\"2\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"CustomerID\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n             '
             '           <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"3\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"CustomerContactName\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n    '
             '                    <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"4\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"CustomerContactPhone\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n   '
             '                     <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"5\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                  </xs:sequence>\\r\\n      '
             '          </xs:complexType>\\r\\n              </xs:element>\\r\\n              <xs:element '
             'minOccurs=\\"1\\" maxOccurs=\\"unbounded\\" name=\\"LineItems\\">\\r\\n                '
             '<xs:annotation>\\r\\n                  <xs:appinfo>\\r\\n                    <b:recordInfo '
             'sequence_number=\\"2\\" structure=\\"delimited\\" preserve_delimiter_for_empty_data=\\"true\\" '
             'suppress_trailing_delimiters=\\"false\\" child_delimiter_type=\\"char\\" child_delimiter=\\"|\\" '
             'child_order=\\"infix\\" tag_name=\\"DTL|\\" />\\r\\n                  </xs:appinfo>\\r\\n                '
             '</xs:annotation>\\r\\n                <xs:complexType>\\r\\n                  <xs:sequence>\\r\\n        '
             '            <xs:annotation>\\r\\n                      <xs:appinfo>\\r\\n                        '
             '<b:groupInfo sequence_number=\\"0\\" />\\r\\n                      </xs:appinfo>\\r\\n                   '
             ' </xs:annotation>\\r\\n                    <xs:element name=\\"PONumber\\" type=\\"xs:string\\">\\r\\n   '
             '                   <xs:annotation>\\r\\n                        <xs:appinfo>\\r\\n                       '
             '   <b:fieldInfo sequence_number=\\"1\\" justification=\\"left\\" />\\r\\n                        '
             '</xs:appinfo>\\r\\n                      </xs:annotation>\\r\\n                    </xs:element>\\r\\n   '
             '                 <xs:element name=\\"ItemOrdered\\" type=\\"xs:string\\">\\r\\n                      '
             '<xs:annotation>\\r\\n                        <xs:appinfo>\\r\\n                          <b:fieldInfo '
             'sequence_number=\\"2\\" justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n     '
             '                 </xs:annotation>\\r\\n                    </xs:element>\\r\\n                    '
             '<xs:element name=\\"Quantity\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n   '
             '                     <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"3\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"UOM\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n                    '
             '    <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"4\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"Price\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n                  '
             '      <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"5\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"ExtendedPrice\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n          '
             '              <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"6\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                    <xs:element '
             'name=\\"Description\\" type=\\"xs:string\\">\\r\\n                      <xs:annotation>\\r\\n            '
             '            <xs:appinfo>\\r\\n                          <b:fieldInfo sequence_number=\\"7\\" '
             'justification=\\"left\\" />\\r\\n                        </xs:appinfo>\\r\\n                      '
             '</xs:annotation>\\r\\n                    </xs:element>\\r\\n                  </xs:sequence>\\r\\n      '
             '          </xs:complexType>\\r\\n              </xs:element>\\r\\n            </xs:sequence>\\r\\n       '
             '   </xs:complexType>\\r\\n        </xs:element>\\r\\n      </xs:sequence>\\r\\n    '
             '</xs:complexType>\\r\\n  </xs:element>\\r\\n</xs:schema>" '
             '--properties-content-type "application/xml" '
             '--metadata "{{}}" '
             '--schema-type "Xml" '
             '--tags integrationAccountSchemaName="IntegrationAccountSchema8120" '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}" '
             '--schema-name "testSchema"',
             checks=[])


# EXAMPLE: /IntegrationAccountSchemas/get/Get schema by name
@try_manual
def step__integrationaccountschemas_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-schema show '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}" '
             '--schema-name "testSchema"',
             checks=[])


# EXAMPLE: /IntegrationAccountSchemas/get/Get schemas by integration account name
@try_manual
def step__integrationaccountschemas_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-schema list '
             '--integration-account-name "{myIntegrationAccount2}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationAccountSchemas/post/Get the content callback url
@try_manual
def step__integrationaccountschemas_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-schema list-content-callback-url '
             '--integration-account-name "{myIntegrationAccount}" '
             '--key-type "Primary" '
             '--not-after "2018-04-19T16:00:00Z" '
             '--resource-group "{rg_2}" '
             '--schema-name "testSchema"',
             checks=[])


# EXAMPLE: /IntegrationAccountSchemas/delete/Delete a schema by name
@try_manual
def step__integrationaccountschemas_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-schema delete -y '
             '--integration-account-name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}" '
             '--schema-name "testSchema"',
             checks=[])


# EXAMPLE: /IntegrationAccountSessions/put/Create or update an integration account session
@try_manual
def step__integrationaccountsessions_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-session create '
             '--integration-account-name "{myIntegrationAccount3}" '
             '--resource-group "{rg_3}" '
             '--content "{{\\"controlNumber\\":\\"1234\\",\\"controlNumberChangedTime\\":\\"2017-02-21T22:30:11.9923759'
             'Z\\"}}" '
             '--session-name "testsession123-ICN"',
             checks=[])


# EXAMPLE: /IntegrationAccountSessions/get/Get a list of integration account sessions
@try_manual
def step__integrationaccountsessions_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-session list '
             '--integration-account-name "{myIntegrationAccount3}" '
             '--resource-group "{rg_3}"',
             checks=[])


# EXAMPLE: /IntegrationAccountSessions/get/Get an integration account session
@try_manual
def step__integrationaccountsessions_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-session show '
             '--integration-account-name "{myIntegrationAccount3}" '
             '--resource-group "{rg_3}" '
             '--session-name "testsession123-ICN"',
             checks=[])


# EXAMPLE: /IntegrationAccountSessions/delete/Delete an integration account session
@try_manual
def step__integrationaccountsessions_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account-session delete -y '
             '--integration-account-name "{myIntegrationAccount3}" '
             '--resource-group "{rg_3}" '
             '--session-name "testsession123-ICN"',
             checks=[])


# EXAMPLE: /IntegrationAccounts/delete/Delete an integration account
@try_manual
def step__integrationaccounts_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-account delete -y '
             '--name "{myIntegrationAccount}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironments/put/Create or update an integration service environment
@try_manual
def step__integrationserviceenvironments_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment create '
             '--location "brazilsouth" '
             '--encryption-configuration "{{\\"encryptionKeyReference\\":{{\\"keyName\\":\\"testKeyName\\",\\"keyVault'
             '\\":{{\\"id\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.KeyVault/vau'
             'lts/testKeyVault\\"}},\\"keyVersion\\":\\"13b261d30b984753869902d7f47f4d55\\"}}}}" '
             '--network-configuration "{{\\"accessEndpoint\\":{{\\"type\\":\\"Internal\\"}},\\"subnets\\":[{{\\"id\\":'
             '\\"/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Network/virtualNetworks/{vn'
             '}/subnets/default\\"}},{{\\"id\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Mic'
             'rosoft.Network/virtualNetworks/{vn}/subnets/default\\"}},{{\\"id\\":\\"/subscriptions/{subscription_id}/r'
             'esourceGroups/{rg_2}/providers/Microsoft.Network/virtualNetworks/{vn}/subnets/default\\"}},{{\\"id\\":\\"'
             '/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Network/virtualNetworks/{vn}/s'
             'ubnets/default\\"}}]}}" '
             '--sku name="Premium" capacity=2 '
             '--name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("name", "{myIntegrationServiceEnvironment}", case_sensitive=False),
             ])
    test.cmd('az logic integration-service-environment wait --created '
             '--name "{myIntegrationServiceEnvironment}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironments/get/Get integration service environment by name
@try_manual
def step__integrationserviceenvironments_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment show '
             '--name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("encryptionConfiguration.encryptionKeyReference.keyName", "testKeyName",
                            case_sensitive=False),
                 test.check("encryptionConfiguration.encryptionKeyReference.keyVault.id", ""
                            "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.KeyVault/vaults"
                            "/testKeyVault", case_sensitive=False),
                 test.check("encryptionConfiguration.encryptionKeyReference.keyVersion", ""
                            "13b261d30b984753869902d7f47f4d55", case_sensitive=False),
                 test.check("name", "{myIntegrationServiceEnvironment}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationServiceEnvironments/get/List integration service environments by resource group name
@try_manual
def step__integrationserviceenvironments_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment list '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /IntegrationServiceEnvironments/get/List integration service environments by subscription
@try_manual
def step__integrationserviceenvironments_get3(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment list',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /IntegrationServiceEnvironments/patch/Patch an integration service environment
@try_manual
def step__integrationserviceenvironments_patch(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment update '
             '--sku name="Developer" capacity=0 '
             '--tags tag1="value1" '
             '--name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[
                 test.check("encryptionConfiguration.encryptionKeyReference.keyName", "testKeyName",
                            case_sensitive=False),
                 test.check("encryptionConfiguration.encryptionKeyReference.keyVault.id", ""
                            "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.KeyVault/vaults"
                            "/testKeyVault", case_sensitive=False),
                 test.check("encryptionConfiguration.encryptionKeyReference.keyVersion", ""
                            "13b261d30b984753869902d7f47f4d55", case_sensitive=False),
                 test.check("sku.name", "Developer", case_sensitive=False),
                 test.check("sku.capacity", 0),
                 test.check("name", "{myIntegrationServiceEnvironment}", case_sensitive=False),
             ])


# EXAMPLE: /IntegrationServiceEnvironments/post/Restarts an integration service environment
@try_manual
def step__integrationserviceenvironments_post(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment restart '
             '--name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentManagedApiOperations/get/Gets the integration service environment managed Apis
@try_manual
def step__integrationserviceenvironmentmanagedapiopera(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-managed-api-operation list '
             '--api-name "servicebus" '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentManagedApis/put/Gets the integration service environment managed Apis
@try_manual
def step__integrationserviceenvironmentmanagedapis_put(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-managed-api put '
             '--api-name "servicebus" '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentManagedApis/get/Gets the integration service environment managed Apis
@try_manual
def step__integrationserviceenvironmentmanagedapis_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-managed-api list '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentManagedApis/get/Gets the integration service environment managed Apis
@try_manual
def step__integrationserviceenvironmentmanagedapis_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-managed-api list '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentManagedApis/delete/Deletes the integration service environment managed Apis
@try_manual
def step__integrationserviceenvironmentmanagedapis_del(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-managed-api delete -y '
             '--api-name "servicebus" '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentNetworkHealth/get/Gets the integration service environment network health
@try_manual
def step__integrationserviceenvironmentnetworkhealth_g(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-network-health show '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironmentSkus/get/List integration service environment skus
@try_manual
def step__integrationserviceenvironmentskus_get(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment-sku list '
             '--integration-service-environment-name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /IntegrationServiceEnvironments/delete/Delete an integration account
@try_manual
def step__integrationserviceenvironments_delete(test, rg_2, rg, rg_3):
    test.cmd('az logic integration-service-environment delete -y '
             '--name "{myIntegrationServiceEnvironment}" '
             '--resource-group "{rg_2}"',
             checks=[])


# EXAMPLE: /Workflows/put/Create or update a workflow
@try_manual
def step__workflows_put_create_or_update_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow create '
             '--resource-group "{rg}" '
             '--endpoints-configuration-workflow location="brazilsouth" properties={{"definition":{{"$schema":"https://'
             'schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#","actio'
             'ns":{{"Find_pet_by_ID":{{"type":"ApiConnection","inputs":{{"path":"/pet/@{{encodeURIComponent(\'1\')}}","'
             'method":"get","host":{{"connection":{{"name":"@parameters(\'$connections\')[\'test-custom-connector\'][\''
             'connectionId\']"}}}}}},"runAfter":{{}}}}}},"contentVersion":"1.0.0.0","outputs":{{}},"parameters":{{"$con'
             'nections":{{"type":"Object","defaultValue":{{}}}}}},"triggers":{{"manual":{{"type":"Request","inputs":{{"'
             'schema":{{}}}},"kind":"Http"}}}}}},"integrationAccount":{{"id":"/subscriptions/34adfa4f-cedf-4dc0-ba29-b6'
             'd1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Logic/integrationAccounts/test-integrat'
             'ion-account"}},"parameters":{{"$connections":{{"value":{{"test-custom-connector":{{"connectionId":"/subsc'
             'riptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/test-resource-group/providers/Microsoft.Web/'
             'connections/test-custom-connector","connectionName":"test-custom-connector","id":"/subscriptions/34adfa4f'
             '-cedf-4dc0-ba29-b6d1a69ab345/providers/Microsoft.Web/locations/brazilsouth/managedApis/test-custom-connec'
             'tor"}}}}}}}}}} tags={{}} '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/get/Get a workflow
@try_manual
def step__workflows_get_get_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow show '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[
                 test.check("name", "{myWorkflow}", case_sensitive=False),
             ])


# EXAMPLE: /Workflows/get/List all workflows in a resource group
@try_manual
def step__workflows_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow list '
             '--resource-group "{rg}"',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Workflows/get/List all workflows in a subscription
@try_manual
def step__workflows_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow list '
             '-g ""',
             checks=[
                 test.check('length(@)', 1),
             ])


# EXAMPLE: /Workflows/patch/Patch a workflow
@try_manual
def step__workflows_patch_patch_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow update '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/post/Disable a workflow
@try_manual
def step__workflows_post_disable_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow disable '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/post/Enable a workflow
@try_manual
def step__workflows_post_enable_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow enable '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/post/Generate an upgraded definition
@try_manual
def step__workflows_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow generate-upgraded-definition '
             '--target-schema-version "2016-06-01" '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/post/Get callback url
@try_manual
def step__workflows_post_get_callback_url(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow list-callback-url '
             '--key-type "Primary" '
             '--not-after "2018-04-19T16:00:00Z" '
             '--resource-group "{rg_2}" '
             '--name "{myWorkflow2}"',
             checks=[])


# EXAMPLE: /Workflows/post/Get the swagger for a workflow
@try_manual
def step__workflows_post2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow list-swagger '
             '--resource-group "{rg_2}" '
             '--name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /Workflows/post/Move a workflow
@try_manual
def step__workflows_post_move_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow move '
             '--id "subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/newResourceGroup/providers/Micros'
             'oft.Logic/workflows/newWorkflowName" '
             '--resource-group "{rg_2}" '
             '--name "{myWorkflow2}"',
             checks=[])


# EXAMPLE: /Workflows/post/Regenerate the callback URL access key for request triggers
@try_manual
def step__workflows_post3(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow regenerate-access-key '
             '--key-type "Primary" '
             '--resource-group "{rg_2}" '
             '--name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /Workflows/post/Validate a workflow
@try_manual
def step__workflows_post_validate_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow validate-by-location '
             '--location "brazilsouth" '
             '--resource-group "{rg}" '
             '--resource-location "brazilsouth" '
             '--definition "{{\\"$schema\\":\\"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/20'
             '16-06-01/workflowdefinition.json#\\",\\"actions\\":{{}},\\"contentVersion\\":\\"1.0.0.0\\",\\"outputs\\":'
             '{{}},\\"parameters\\":{{}},\\"triggers\\":{{}}}}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /Workflows/post/Validate a workflow
@try_manual
def step__workflows_post_validate_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow validate-by-location '
             '--location "brazilsouth" '
             '--resource-group "{rg}" '
             '--resource-location "brazilsouth" '
             '--definition "{{\\"$schema\\":\\"https://schema.management.azure.com/providers/Microsoft.Logic/schemas/20'
             '16-06-01/workflowdefinition.json#\\",\\"actions\\":{{}},\\"contentVersion\\":\\"1.0.0.0\\",\\"outputs\\":'
             '{{}},\\"parameters\\":{{}},\\"triggers\\":{{}}}}" '
             '--name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRepetitions/get/Get a repetition
@try_manual
def step__workflowrunactionrepetitions_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-repetition show '
             '--action-name "testAction" '
             '--repetition-name "000001" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRepetitions/get/List repetitions
@try_manual
def step__workflowrunactionrepetitions_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-repetition list '
             '--action-name "testAction" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRepetitions/post/List expression traces for a repetition
@try_manual
def step__workflowrunactionrepetitions_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-repetition list-expression-trace '
             '--action-name "testAction" '
             '--repetition-name "000001" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRepetitionsRequestHistories/get/Get a repetition request history
@try_manual
def step__workflowrunactionrepetitionsrequesthistories(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-repetition-request-history show '
             '--action-name "HTTP_Webhook" '
             '--repetition-name "000001" '
             '--request-history-name "08586611142732800686" '
             '--resource-group "{rg}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRepetitionsRequestHistories/get/List repetition request history
@try_manual
def step__workflowrunactionrepetitionsrequesthistories2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-repetition-request-history list '
             '--action-name "HTTP_Webhook" '
             '--repetition-name "000001" '
             '--resource-group "{rg}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRequestHistories/get/Get a request history
@try_manual
def step__workflowrunactionrequesthistories_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-request-history show '
             '--action-name "HTTP_Webhook" '
             '--request-history-name "08586611142732800686" '
             '--resource-group "{rg}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionRequestHistories/get/List a request history
@try_manual
def step__workflowrunactionrequesthistories_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-request-history list '
             '--action-name "HTTP_Webhook" '
             '--resource-group "{rg}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActions/get/Get a workflow run action
@try_manual
def step__workflowrunactions_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action show '
             '--action-name "HTTP" '
             '--resource-group "{rg}" '
             '--run-name "08586676746934337772206998657CU22" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActions/get/List a workflow run actions
@try_manual
def step__workflowrunactions_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action list '
             '--resource-group "{rg}" '
             '--run-name "08586676746934337772206998657CU22" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRunActions/post/List expression traces
@try_manual
def step__workflowrunactions_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action list-expression-trace '
             '--action-name "testAction" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionScopeRepetitions/get/Get a scoped repetition
@try_manual
def step__workflowrunactionscoperepetitions_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-scope-repetition show '
             '--action-name "for_each" '
             '--repetition-name "000000" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunActionScopeRepetitions/get/List the scoped repetitions
@try_manual
def step__workflowrunactionscoperepetitions_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-action-scope-repetition list '
             '--action-name "for_each" '
             '--resource-group "{rg_2}" '
             '--run-name "08586776228332053161046300351" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRunOperations/get/Get a run operation
@try_manual
def step__workflowrunoperations_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run-operation show '
             '--operation-id "ebdcbbde-c4db-43ec-987c-fd0f7726f43b" '
             '--resource-group "{rg_2}" '
             '--run-name "08586774142730039209110422528" '
             '--workflow-name "{myWorkflow4}"',
             checks=[])


# EXAMPLE: /WorkflowRuns/get/Get a run for a workflow
@try_manual
def step__workflowruns_get_get_a_run_for_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run show '
             '--resource-group "{rg}" '
             '--run-name "08586676746934337772206998657CU22" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRuns/get/List workflow runs
@try_manual
def step__workflowruns_get_list_workflow_runs(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run list '
             '--resource-group "{rg}" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowRuns/post/Cancel a workflow run
@try_manual
def step__workflowruns_post_cancel_a_workflow_run(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-run cancel '
             '--resource-group "{rg}" '
             '--run-name "08586676746934337772206998657CU22" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowTriggerHistories/get/Get a workflow trigger history
@try_manual
def step__workflowtriggerhistories_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger-history show '
             '--history-name "08586676746934337772206998657CU22" '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTriggerName" '
             '--workflow-name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /WorkflowTriggerHistories/get/List a workflow trigger history
@try_manual
def step__workflowtriggerhistories_get2(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger-history list '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTriggerName" '
             '--workflow-name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /WorkflowTriggerHistories/post/Resubmit a workflow run based on the trigger history
@try_manual
def step__workflowtriggerhistories_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger-history resubmit '
             '--history-name "testHistoryName" '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTriggerName" '
             '--workflow-name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/get/Get a workflow trigger
@try_manual
def step__workflowtriggers_get_get_a_workflow_trigger(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger show '
             '--resource-group "{rg}" '
             '--trigger-name "manual" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/get/Get trigger schema
@try_manual
def step__workflowtriggers_get_get_trigger_schema(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger get-schema-json '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTrigger" '
             '--workflow-name "{myWorkflow2}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/get/List workflow triggers
@try_manual
def step__workflowtriggers_get_list_workflow_triggers(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger list '
             '--resource-group "{rg}" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/post/Get the callback URL for a trigger
@try_manual
def step__workflowtriggers_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger list-callback-url '
             '--resource-group "{rg}" '
             '--trigger-name "manual" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/post/Reset trigger
@try_manual
def step__workflowtriggers_post_reset_trigger(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger reset '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTrigger" '
             '--workflow-name "{myWorkflow2}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/post/Run a workflow trigger
@try_manual
def step__workflowtriggers_post_run_a_workflow_trigger(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger run '
             '--resource-group "{rg}" '
             '--trigger-name "manual" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowTriggers/post/Set trigger state
@try_manual
def step__workflowtriggers_post_set_trigger_state(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-trigger set-state '
             '--resource-group "{rg_2}" '
             '--source id="subscriptions/34adfa4f-cedf-4dc0-ba29-b6d1a69ab345/resourceGroups/sourceResGroup/providers/M'
             'icrosoft.Logic/workflows/sourceWorkflow/triggers/sourceTrigger" '
             '--trigger-name "testTrigger" '
             '--workflow-name "{myWorkflow2}"',
             checks=[])


# EXAMPLE: /WorkflowVersions/get/Get a workflow version
@try_manual
def step__workflowversions_get_get_a_workflow_version(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-version show '
             '--resource-group "{rg}" '
             '--version-id "08586676824806722526" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowVersions/get/List a workflows versions
@try_manual
def step__workflowversions_get(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-version list '
             '--resource-group "{rg}" '
             '--workflow-name "{myWorkflow}"',
             checks=[])


# EXAMPLE: /WorkflowVersionTriggers/post/Get the callback url for a trigger of a workflow version
@try_manual
def step__workflowversiontriggers_post(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow-version-trigger list-callback-url '
             '--key-type "Primary" '
             '--not-after "2017-03-05T08:00:00Z" '
             '--resource-group "{rg_2}" '
             '--trigger-name "testTriggerName" '
             '--version-id "testWorkflowVersionId" '
             '--workflow-name "{myWorkflow3}"',
             checks=[])


# EXAMPLE: /Workflows/delete/Delete a workflow
@try_manual
def step__workflows_delete_delete_a_workflow(test, rg_2, rg, rg_3):
    test.cmd('az logic workflow delete -y '
             '--resource-group "{rg}" '
             '--name "{myWorkflow}"',
             checks=[])


# Env cleanup
@try_manual
def cleanup(test, rg_2, rg, rg_3):
    pass


# Testcase
@try_manual
def call_scenario(test, rg_2, rg, rg_3):
    setup(test, rg_2, rg, rg_3)
    step__integrationaccounts_put(test, rg_2, rg, rg_3)
    step__integrationaccounts_get(test, rg_2, rg, rg_3)
    step__integrationaccounts_get2(test, rg_2, rg, rg_3)
    step__integrationaccounts_get3(test, rg_2, rg, rg_3)
    step__integrationaccounts_patch(test, rg_2, rg, rg_3)
    step__integrationaccounts_post(test, rg_2, rg, rg_3)
    step__integrationaccounts_post2(test, rg_2, rg, rg_3)
    step__integrationaccounts_post_log_a_tracked_event(test, rg_2, rg, rg_3)
    step__integrationaccounts_post3(test, rg_2, rg, rg_3)
    step__integrationaccountagreements_put(test, rg_2, rg, rg_3)
    step__integrationaccountagreements_get(test, rg_2, rg, rg_3)
    step__integrationaccountagreements_get2(test, rg_2, rg, rg_3)
    step__integrationaccountagreements_post(test, rg_2, rg, rg_3)
    step__integrationaccountagreements_delete(test, rg_2, rg, rg_3)
    step__integrationaccountassemblies_put(test, rg_2, rg, rg_3)
    step__integrationaccountassemblies_get(test, rg_2, rg, rg_3)
    step__integrationaccountassemblies_get2(test, rg_2, rg, rg_3)
    step__integrationaccountassemblies_post(test, rg_2, rg, rg_3)
    step__integrationaccountassemblies_delete(test, rg_2, rg, rg_3)
    step__integrationaccountbatchconfigurations_put(test, rg_2, rg, rg_3)
    step__integrationaccountbatchconfigurations_get(test, rg_2, rg, rg_3)
    step__integrationaccountbatchconfigurations_get2(test, rg_2, rg, rg_3)
    step__integrationaccountbatchconfigurations_delete(test, rg_2, rg, rg_3)
    step__integrationaccountcertificates_put(test, rg_2, rg, rg_3)
    step__integrationaccountcertificates_get(test, rg_2, rg, rg_3)
    step__integrationaccountcertificates_get2(test, rg_2, rg, rg_3)
    step__integrationaccountcertificates_delete(test, rg_2, rg, rg_3)
    step__integrationaccountmaps_put(test, rg_2, rg, rg_3)
    step__integrationaccountmaps_get_get_map_by_name(test, rg_2, rg, rg_3)
    step__integrationaccountmaps_get(test, rg_2, rg, rg_3)
    step__integrationaccountmaps_post(test, rg_2, rg, rg_3)
    step__integrationaccountmaps_delete_delete_a_map(test, rg_2, rg, rg_3)
    step__integrationaccountpartners_put(test, rg_2, rg, rg_3)
    step__integrationaccountpartners_get(test, rg_2, rg, rg_3)
    step__integrationaccountpartners_get2(test, rg_2, rg, rg_3)
    step__integrationaccountpartners_post(test, rg_2, rg, rg_3)
    step__integrationaccountpartners_delete(test, rg_2, rg, rg_3)
    step__integrationaccountschemas_put(test, rg_2, rg, rg_3)
    step__integrationaccountschemas_get(test, rg_2, rg, rg_3)
    step__integrationaccountschemas_get2(test, rg_2, rg, rg_3)
    step__integrationaccountschemas_post(test, rg_2, rg, rg_3)
    step__integrationaccountschemas_delete(test, rg_2, rg, rg_3)
    step__integrationaccountsessions_put(test, rg_2, rg, rg_3)
    step__integrationaccountsessions_get(test, rg_2, rg, rg_3)
    step__integrationaccountsessions_get2(test, rg_2, rg, rg_3)
    step__integrationaccountsessions_delete(test, rg_2, rg, rg_3)
    step__integrationaccounts_delete(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_put(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_get(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_get2(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_get3(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_patch(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_post(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentmanagedapiopera(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentmanagedapis_put(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentmanagedapis_get(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentmanagedapis_get(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentmanagedapis_del(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentnetworkhealth_g(test, rg_2, rg, rg_3)
    step__integrationserviceenvironmentskus_get(test, rg_2, rg, rg_3)
    step__integrationserviceenvironments_delete(test, rg_2, rg, rg_3)
    step__workflows_put_create_or_update_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_get_get_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_get(test, rg_2, rg, rg_3)
    step__workflows_get2(test, rg_2, rg, rg_3)
    step__workflows_patch_patch_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_post_disable_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_post_enable_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_post(test, rg_2, rg, rg_3)
    step__workflows_post_get_callback_url(test, rg_2, rg, rg_3)
    step__workflows_post2(test, rg_2, rg, rg_3)
    step__workflows_post_move_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_post3(test, rg_2, rg, rg_3)
    step__workflows_post_validate_a_workflow(test, rg_2, rg, rg_3)
    step__workflows_post_validate_a_workflow(test, rg_2, rg, rg_3)
    step__workflowrunactionrepetitions_get(test, rg_2, rg, rg_3)
    step__workflowrunactionrepetitions_get2(test, rg_2, rg, rg_3)
    step__workflowrunactionrepetitions_post(test, rg_2, rg, rg_3)
    step__workflowrunactionrepetitionsrequesthistories(test, rg_2, rg, rg_3)
    step__workflowrunactionrepetitionsrequesthistories2(test, rg_2, rg, rg_3)
    step__workflowrunactionrequesthistories_get(test, rg_2, rg, rg_3)
    step__workflowrunactionrequesthistories_get2(test, rg_2, rg, rg_3)
    step__workflowrunactions_get(test, rg_2, rg, rg_3)
    step__workflowrunactions_get2(test, rg_2, rg, rg_3)
    step__workflowrunactions_post(test, rg_2, rg, rg_3)
    step__workflowrunactionscoperepetitions_get(test, rg_2, rg, rg_3)
    step__workflowrunactionscoperepetitions_get2(test, rg_2, rg, rg_3)
    step__workflowrunoperations_get(test, rg_2, rg, rg_3)
    step__workflowruns_get_get_a_run_for_a_workflow(test, rg_2, rg, rg_3)
    step__workflowruns_get_list_workflow_runs(test, rg_2, rg, rg_3)
    step__workflowruns_post_cancel_a_workflow_run(test, rg_2, rg, rg_3)
    step__workflowtriggerhistories_get(test, rg_2, rg, rg_3)
    step__workflowtriggerhistories_get2(test, rg_2, rg, rg_3)
    step__workflowtriggerhistories_post(test, rg_2, rg, rg_3)
    step__workflowtriggers_get_get_a_workflow_trigger(test, rg_2, rg, rg_3)
    step__workflowtriggers_get_get_trigger_schema(test, rg_2, rg, rg_3)
    step__workflowtriggers_get_list_workflow_triggers(test, rg_2, rg, rg_3)
    step__workflowtriggers_post(test, rg_2, rg, rg_3)
    step__workflowtriggers_post_reset_trigger(test, rg_2, rg, rg_3)
    step__workflowtriggers_post_run_a_workflow_trigger(test, rg_2, rg, rg_3)
    step__workflowtriggers_post_set_trigger_state(test, rg_2, rg, rg_3)
    step__workflowversions_get_get_a_workflow_version(test, rg_2, rg, rg_3)
    step__workflowversions_get(test, rg_2, rg, rg_3)
    step__workflowversiontriggers_post(test, rg_2, rg, rg_3)
    step__workflows_delete_delete_a_workflow(test, rg_2, rg, rg_3)
    cleanup(test, rg_2, rg, rg_3)


@try_manual
class LogicManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestlogic_testResourceGroup'[:7], key='rg_2', parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestlogic_test-resource-group'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestlogic_testrg123'[:7], key='rg_3', parameter_name='rg_3')
    @VirtualNetworkPreparer(name_prefix='clitestlogic_testVNET'[:7], key='vn', resource_group_key='rg_2')
    def test_logic(self, rg_2, rg, rg_3):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myWorkflow': 'test-workflow',
            'myWorkflow2': 'testWorkflow',
            'myWorkflow3': 'testWorkflowName',
            'myWorkflow4': 'testFlow',
            'myIntegrationAccount': 'testIntegrationAccount',
            'myIntegrationAccount2': '<integrationAccountName>',
            'myIntegrationAccount3': 'testia123',
            'myIntegrationServiceEnvironment': 'testIntegrationServiceEnvironment',
        })

        call_scenario(self, rg_2, rg, rg_3)
        calc_coverage(__file__)
        raise_if()
