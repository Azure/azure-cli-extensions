# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "logic workflow update",
)
class Update(AAZCommand):
    """Update a workflow.

    :example: Update workflow
        az logic workflow update --resource-group rg --name workflow --definition workflow.json
    """

    _aaz_info = {
        "version": "2019-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.logic/workflows/{}", "2019-05-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The workflow name.",
            required=True,
            id_part="name",
        )
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            help="Managed service identity properties.",
            nullable=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="The resource location.",
            nullable=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.access_control = AAZObjectArg(
            options=["--access-control"],
            help="The access control configuration.",
            nullable=True,
        )
        _args_schema.definition = AAZFreeFormDictArg(
            options=["--definition"],
            help="The definition.",
            nullable=True,
        )
        _args_schema.endpoints_configuration = AAZObjectArg(
            options=["--endpoints-configuration"],
            help="The endpoints configuration.",
            nullable=True,
        )
        _args_schema.integration_account = AAZObjectArg(
            options=["--integration-account"],
            help="The integration account.",
            nullable=True,
        )
        _args_schema.integration_service_environment = AAZObjectArg(
            options=["--integration-service-environment"],
            help="The integration service environment.",
            nullable=True,
        )
        _args_schema.parameters = AAZFreeFormDictArg(
            options=["--parameters"],
            help="The parameters.",
            nullable=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            help="The state.",
            nullable=True,
            enum={"Completed": "Completed", "Deleted": "Deleted", "Disabled": "Disabled", "Enabled": "Enabled", "NotSpecified": "NotSpecified", "Suspended": "Suspended"},
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="The resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity. The type 'SystemAssigned' includes an implicitly created identity. The type 'None' will remove any identities from the resource.",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The list of user assigned identities associated with the resource. The user identity dictionary key references will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        access_control = cls._args_schema.access_control
        access_control.actions = AAZObjectArg(
            options=["actions"],
            help="The access control configuration for workflow actions.",
            nullable=True,
        )
        access_control.contents = AAZObjectArg(
            options=["contents"],
            help="The access control configuration for accessing workflow run contents.",
            nullable=True,
        )
        access_control.triggers = AAZObjectArg(
            options=["triggers"],
            help="The access control configuration for invoking workflow triggers.",
            nullable=True,
        )
        access_control.workflow_management = AAZObjectArg(
            options=["workflow-management"],
            help="The access control configuration for workflow management.",
            nullable=True,
        )

        actions = cls._args_schema.access_control.actions
        actions.allowed_caller_ip_addresses = AAZListArg(
            options=["allowed-caller-ip-addresses"],
            nullable=True,
        )
        actions.open_authentication_policies = AAZObjectArg(
            options=["open-authentication-policies"],
            nullable=True,
        )

        allowed_caller_ip_addresses = cls._args_schema.access_control.actions.allowed_caller_ip_addresses
        allowed_caller_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.actions.allowed_caller_ip_addresses.Element
        _element.address_range = AAZStrArg(
            options=["address-range"],
            nullable=True,
        )

        open_authentication_policies = cls._args_schema.access_control.actions.open_authentication_policies
        open_authentication_policies.policies = AAZDictArg(
            options=["policies"],
            nullable=True,
        )

        policies = cls._args_schema.access_control.actions.open_authentication_policies.policies
        policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.actions.open_authentication_policies.policies.Element
        _element.claims = AAZListArg(
            options=["claims"],
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            nullable=True,
            enum={"AAD": "AAD"},
        )

        claims = cls._args_schema.access_control.actions.open_authentication_policies.policies.Element.claims
        claims.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.actions.open_authentication_policies.policies.Element.claims.Element
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            nullable=True,
        )

        contents = cls._args_schema.access_control.contents
        contents.allowed_caller_ip_addresses = AAZListArg(
            options=["allowed-caller-ip-addresses"],
            nullable=True,
        )
        contents.open_authentication_policies = AAZObjectArg(
            options=["open-authentication-policies"],
            nullable=True,
        )

        allowed_caller_ip_addresses = cls._args_schema.access_control.contents.allowed_caller_ip_addresses
        allowed_caller_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.contents.allowed_caller_ip_addresses.Element
        _element.address_range = AAZStrArg(
            options=["address-range"],
            nullable=True,
        )

        open_authentication_policies = cls._args_schema.access_control.contents.open_authentication_policies
        open_authentication_policies.policies = AAZDictArg(
            options=["policies"],
            nullable=True,
        )

        policies = cls._args_schema.access_control.contents.open_authentication_policies.policies
        policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.contents.open_authentication_policies.policies.Element
        _element.claims = AAZListArg(
            options=["claims"],
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            nullable=True,
            enum={"AAD": "AAD"},
        )

        claims = cls._args_schema.access_control.contents.open_authentication_policies.policies.Element.claims
        claims.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.contents.open_authentication_policies.policies.Element.claims.Element
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            nullable=True,
        )

        triggers = cls._args_schema.access_control.triggers
        triggers.allowed_caller_ip_addresses = AAZListArg(
            options=["allowed-caller-ip-addresses"],
            nullable=True,
        )
        triggers.open_authentication_policies = AAZObjectArg(
            options=["open-authentication-policies"],
            nullable=True,
        )

        allowed_caller_ip_addresses = cls._args_schema.access_control.triggers.allowed_caller_ip_addresses
        allowed_caller_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.triggers.allowed_caller_ip_addresses.Element
        _element.address_range = AAZStrArg(
            options=["address-range"],
            nullable=True,
        )

        open_authentication_policies = cls._args_schema.access_control.triggers.open_authentication_policies
        open_authentication_policies.policies = AAZDictArg(
            options=["policies"],
            nullable=True,
        )

        policies = cls._args_schema.access_control.triggers.open_authentication_policies.policies
        policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.triggers.open_authentication_policies.policies.Element
        _element.claims = AAZListArg(
            options=["claims"],
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            nullable=True,
            enum={"AAD": "AAD"},
        )

        claims = cls._args_schema.access_control.triggers.open_authentication_policies.policies.Element.claims
        claims.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.triggers.open_authentication_policies.policies.Element.claims.Element
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            nullable=True,
        )

        workflow_management = cls._args_schema.access_control.workflow_management
        workflow_management.allowed_caller_ip_addresses = AAZListArg(
            options=["allowed-caller-ip-addresses"],
            nullable=True,
        )
        workflow_management.open_authentication_policies = AAZObjectArg(
            options=["open-authentication-policies"],
            nullable=True,
        )

        allowed_caller_ip_addresses = cls._args_schema.access_control.workflow_management.allowed_caller_ip_addresses
        allowed_caller_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.workflow_management.allowed_caller_ip_addresses.Element
        _element.address_range = AAZStrArg(
            options=["address-range"],
            nullable=True,
        )

        open_authentication_policies = cls._args_schema.access_control.workflow_management.open_authentication_policies
        open_authentication_policies.policies = AAZDictArg(
            options=["policies"],
            nullable=True,
        )

        policies = cls._args_schema.access_control.workflow_management.open_authentication_policies.policies
        policies.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.workflow_management.open_authentication_policies.policies.Element
        _element.claims = AAZListArg(
            options=["claims"],
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            nullable=True,
            enum={"AAD": "AAD"},
        )

        claims = cls._args_schema.access_control.workflow_management.open_authentication_policies.policies.Element.claims
        claims.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.access_control.workflow_management.open_authentication_policies.policies.Element.claims.Element
        _element.name = AAZStrArg(
            options=["name"],
            nullable=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            nullable=True,
        )

        endpoints_configuration = cls._args_schema.endpoints_configuration
        endpoints_configuration.connector = AAZObjectArg(
            options=["connector"],
            help="The connector endpoints.",
            nullable=True,
        )
        endpoints_configuration.workflow = AAZObjectArg(
            options=["workflow"],
            help="The workflow endpoints.",
            nullable=True,
        )

        connector = cls._args_schema.endpoints_configuration.connector
        connector.access_endpoint_ip_addresses = AAZListArg(
            options=["access-endpoint-ip-addresses"],
            nullable=True,
        )
        connector.outgoing_ip_addresses = AAZListArg(
            options=["outgoing-ip-addresses"],
            nullable=True,
        )

        access_endpoint_ip_addresses = cls._args_schema.endpoints_configuration.connector.access_endpoint_ip_addresses
        access_endpoint_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.endpoints_configuration.connector.access_endpoint_ip_addresses.Element
        _element.address = AAZStrArg(
            options=["address"],
            nullable=True,
        )

        outgoing_ip_addresses = cls._args_schema.endpoints_configuration.connector.outgoing_ip_addresses
        outgoing_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.endpoints_configuration.connector.outgoing_ip_addresses.Element
        _element.address = AAZStrArg(
            options=["address"],
            nullable=True,
        )

        workflow = cls._args_schema.endpoints_configuration.workflow
        workflow.access_endpoint_ip_addresses = AAZListArg(
            options=["access-endpoint-ip-addresses"],
            nullable=True,
        )
        workflow.outgoing_ip_addresses = AAZListArg(
            options=["outgoing-ip-addresses"],
            nullable=True,
        )

        access_endpoint_ip_addresses = cls._args_schema.endpoints_configuration.workflow.access_endpoint_ip_addresses
        access_endpoint_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.endpoints_configuration.workflow.access_endpoint_ip_addresses.Element
        _element.address = AAZStrArg(
            options=["address"],
            nullable=True,
        )

        outgoing_ip_addresses = cls._args_schema.endpoints_configuration.workflow.outgoing_ip_addresses
        outgoing_ip_addresses.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.endpoints_configuration.workflow.outgoing_ip_addresses.Element
        _element.address = AAZStrArg(
            options=["address"],
            nullable=True,
        )

        integration_account = cls._args_schema.integration_account
        integration_account.id = AAZStrArg(
            options=["id"],
            nullable=True,
        )

        integration_service_environment = cls._args_schema.integration_service_environment
        integration_service_environment.id = AAZStrArg(
            options=["id"],
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.WorkflowsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.WorkflowsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class WorkflowsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workflowName", self.ctx.args.name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2019-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_workflow_read(cls._schema_on_200)

            return cls._schema_on_200

    class WorkflowsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workflowName", self.ctx.args.name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2019-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_workflow_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("accessControl", AAZObjectType, ".access_control")
                properties.set_prop("definition", AAZFreeFormDictType, ".definition")
                properties.set_prop("endpointsConfiguration", AAZObjectType, ".endpoints_configuration")
                properties.set_prop("integrationAccount", AAZObjectType, ".integration_account")
                properties.set_prop("integrationServiceEnvironment", AAZObjectType, ".integration_service_environment")
                properties.set_prop("parameters", AAZFreeFormDictType, ".parameters")
                properties.set_prop("state", AAZStrType, ".state")

            access_control = _builder.get(".properties.accessControl")
            if access_control is not None:
                access_control.set_prop("actions", AAZObjectType, ".actions")
                access_control.set_prop("contents", AAZObjectType, ".contents")
                access_control.set_prop("triggers", AAZObjectType, ".triggers")
                access_control.set_prop("workflowManagement", AAZObjectType, ".workflow_management")

            actions = _builder.get(".properties.accessControl.actions")
            if actions is not None:
                actions.set_prop("allowedCallerIpAddresses", AAZListType, ".allowed_caller_ip_addresses")
                actions.set_prop("openAuthenticationPolicies", AAZObjectType, ".open_authentication_policies")

            allowed_caller_ip_addresses = _builder.get(".properties.accessControl.actions.allowedCallerIpAddresses")
            if allowed_caller_ip_addresses is not None:
                allowed_caller_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.actions.allowedCallerIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("addressRange", AAZStrType, ".address_range")

            open_authentication_policies = _builder.get(".properties.accessControl.actions.openAuthenticationPolicies")
            if open_authentication_policies is not None:
                open_authentication_policies.set_prop("policies", AAZDictType, ".policies")

            policies = _builder.get(".properties.accessControl.actions.openAuthenticationPolicies.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.actions.openAuthenticationPolicies.policies{}")
            if _elements is not None:
                _elements.set_prop("claims", AAZListType, ".claims")
                _elements.set_prop("type", AAZStrType, ".type")

            claims = _builder.get(".properties.accessControl.actions.openAuthenticationPolicies.policies{}.claims")
            if claims is not None:
                claims.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.actions.openAuthenticationPolicies.policies{}.claims[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            contents = _builder.get(".properties.accessControl.contents")
            if contents is not None:
                contents.set_prop("allowedCallerIpAddresses", AAZListType, ".allowed_caller_ip_addresses")
                contents.set_prop("openAuthenticationPolicies", AAZObjectType, ".open_authentication_policies")

            allowed_caller_ip_addresses = _builder.get(".properties.accessControl.contents.allowedCallerIpAddresses")
            if allowed_caller_ip_addresses is not None:
                allowed_caller_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.contents.allowedCallerIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("addressRange", AAZStrType, ".address_range")

            open_authentication_policies = _builder.get(".properties.accessControl.contents.openAuthenticationPolicies")
            if open_authentication_policies is not None:
                open_authentication_policies.set_prop("policies", AAZDictType, ".policies")

            policies = _builder.get(".properties.accessControl.contents.openAuthenticationPolicies.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.contents.openAuthenticationPolicies.policies{}")
            if _elements is not None:
                _elements.set_prop("claims", AAZListType, ".claims")
                _elements.set_prop("type", AAZStrType, ".type")

            claims = _builder.get(".properties.accessControl.contents.openAuthenticationPolicies.policies{}.claims")
            if claims is not None:
                claims.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.contents.openAuthenticationPolicies.policies{}.claims[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            triggers = _builder.get(".properties.accessControl.triggers")
            if triggers is not None:
                triggers.set_prop("allowedCallerIpAddresses", AAZListType, ".allowed_caller_ip_addresses")
                triggers.set_prop("openAuthenticationPolicies", AAZObjectType, ".open_authentication_policies")

            allowed_caller_ip_addresses = _builder.get(".properties.accessControl.triggers.allowedCallerIpAddresses")
            if allowed_caller_ip_addresses is not None:
                allowed_caller_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.triggers.allowedCallerIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("addressRange", AAZStrType, ".address_range")

            open_authentication_policies = _builder.get(".properties.accessControl.triggers.openAuthenticationPolicies")
            if open_authentication_policies is not None:
                open_authentication_policies.set_prop("policies", AAZDictType, ".policies")

            policies = _builder.get(".properties.accessControl.triggers.openAuthenticationPolicies.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.triggers.openAuthenticationPolicies.policies{}")
            if _elements is not None:
                _elements.set_prop("claims", AAZListType, ".claims")
                _elements.set_prop("type", AAZStrType, ".type")

            claims = _builder.get(".properties.accessControl.triggers.openAuthenticationPolicies.policies{}.claims")
            if claims is not None:
                claims.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.triggers.openAuthenticationPolicies.policies{}.claims[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            workflow_management = _builder.get(".properties.accessControl.workflowManagement")
            if workflow_management is not None:
                workflow_management.set_prop("allowedCallerIpAddresses", AAZListType, ".allowed_caller_ip_addresses")
                workflow_management.set_prop("openAuthenticationPolicies", AAZObjectType, ".open_authentication_policies")

            allowed_caller_ip_addresses = _builder.get(".properties.accessControl.workflowManagement.allowedCallerIpAddresses")
            if allowed_caller_ip_addresses is not None:
                allowed_caller_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.workflowManagement.allowedCallerIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("addressRange", AAZStrType, ".address_range")

            open_authentication_policies = _builder.get(".properties.accessControl.workflowManagement.openAuthenticationPolicies")
            if open_authentication_policies is not None:
                open_authentication_policies.set_prop("policies", AAZDictType, ".policies")

            policies = _builder.get(".properties.accessControl.workflowManagement.openAuthenticationPolicies.policies")
            if policies is not None:
                policies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.workflowManagement.openAuthenticationPolicies.policies{}")
            if _elements is not None:
                _elements.set_prop("claims", AAZListType, ".claims")
                _elements.set_prop("type", AAZStrType, ".type")

            claims = _builder.get(".properties.accessControl.workflowManagement.openAuthenticationPolicies.policies{}.claims")
            if claims is not None:
                claims.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.accessControl.workflowManagement.openAuthenticationPolicies.policies{}.claims[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            definition = _builder.get(".properties.definition")
            if definition is not None:
                definition.set_anytype_elements(".")

            endpoints_configuration = _builder.get(".properties.endpointsConfiguration")
            if endpoints_configuration is not None:
                endpoints_configuration.set_prop("connector", AAZObjectType, ".connector")
                endpoints_configuration.set_prop("workflow", AAZObjectType, ".workflow")

            connector = _builder.get(".properties.endpointsConfiguration.connector")
            if connector is not None:
                connector.set_prop("accessEndpointIpAddresses", AAZListType, ".access_endpoint_ip_addresses")
                connector.set_prop("outgoingIpAddresses", AAZListType, ".outgoing_ip_addresses")

            access_endpoint_ip_addresses = _builder.get(".properties.endpointsConfiguration.connector.accessEndpointIpAddresses")
            if access_endpoint_ip_addresses is not None:
                access_endpoint_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.endpointsConfiguration.connector.accessEndpointIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("address", AAZStrType, ".address")

            outgoing_ip_addresses = _builder.get(".properties.endpointsConfiguration.connector.outgoingIpAddresses")
            if outgoing_ip_addresses is not None:
                outgoing_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.endpointsConfiguration.connector.outgoingIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("address", AAZStrType, ".address")

            workflow = _builder.get(".properties.endpointsConfiguration.workflow")
            if workflow is not None:
                workflow.set_prop("accessEndpointIpAddresses", AAZListType, ".access_endpoint_ip_addresses")
                workflow.set_prop("outgoingIpAddresses", AAZListType, ".outgoing_ip_addresses")

            access_endpoint_ip_addresses = _builder.get(".properties.endpointsConfiguration.workflow.accessEndpointIpAddresses")
            if access_endpoint_ip_addresses is not None:
                access_endpoint_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.endpointsConfiguration.workflow.accessEndpointIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("address", AAZStrType, ".address")

            outgoing_ip_addresses = _builder.get(".properties.endpointsConfiguration.workflow.outgoingIpAddresses")
            if outgoing_ip_addresses is not None:
                outgoing_ip_addresses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.endpointsConfiguration.workflow.outgoingIpAddresses[]")
            if _elements is not None:
                _elements.set_prop("address", AAZStrType, ".address")

            integration_account = _builder.get(".properties.integrationAccount")
            if integration_account is not None:
                integration_account.set_prop("id", AAZStrType, ".id")

            integration_service_environment = _builder.get(".properties.integrationServiceEnvironment")
            if integration_service_environment is not None:
                integration_service_environment.set_prop("id", AAZStrType, ".id")

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_anytype_elements(".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_flow_access_control_configuration_policy_read = None

    @classmethod
    def _build_schema_flow_access_control_configuration_policy_read(cls, _schema):
        if cls._schema_flow_access_control_configuration_policy_read is not None:
            _schema.allowed_caller_ip_addresses = cls._schema_flow_access_control_configuration_policy_read.allowed_caller_ip_addresses
            _schema.open_authentication_policies = cls._schema_flow_access_control_configuration_policy_read.open_authentication_policies
            return

        cls._schema_flow_access_control_configuration_policy_read = _schema_flow_access_control_configuration_policy_read = AAZObjectType()

        flow_access_control_configuration_policy_read = _schema_flow_access_control_configuration_policy_read
        flow_access_control_configuration_policy_read.allowed_caller_ip_addresses = AAZListType(
            serialized_name="allowedCallerIpAddresses",
        )
        flow_access_control_configuration_policy_read.open_authentication_policies = AAZObjectType(
            serialized_name="openAuthenticationPolicies",
        )

        allowed_caller_ip_addresses = _schema_flow_access_control_configuration_policy_read.allowed_caller_ip_addresses
        allowed_caller_ip_addresses.Element = AAZObjectType()

        _element = _schema_flow_access_control_configuration_policy_read.allowed_caller_ip_addresses.Element
        _element.address_range = AAZStrType(
            serialized_name="addressRange",
        )

        open_authentication_policies = _schema_flow_access_control_configuration_policy_read.open_authentication_policies
        open_authentication_policies.policies = AAZDictType()

        policies = _schema_flow_access_control_configuration_policy_read.open_authentication_policies.policies
        policies.Element = AAZObjectType()

        _element = _schema_flow_access_control_configuration_policy_read.open_authentication_policies.policies.Element
        _element.claims = AAZListType()
        _element.type = AAZStrType()

        claims = _schema_flow_access_control_configuration_policy_read.open_authentication_policies.policies.Element.claims
        claims.Element = AAZObjectType()

        _element = _schema_flow_access_control_configuration_policy_read.open_authentication_policies.policies.Element.claims.Element
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        _schema.allowed_caller_ip_addresses = cls._schema_flow_access_control_configuration_policy_read.allowed_caller_ip_addresses
        _schema.open_authentication_policies = cls._schema_flow_access_control_configuration_policy_read.open_authentication_policies

    _schema_flow_endpoints_read = None

    @classmethod
    def _build_schema_flow_endpoints_read(cls, _schema):
        if cls._schema_flow_endpoints_read is not None:
            _schema.access_endpoint_ip_addresses = cls._schema_flow_endpoints_read.access_endpoint_ip_addresses
            _schema.outgoing_ip_addresses = cls._schema_flow_endpoints_read.outgoing_ip_addresses
            return

        cls._schema_flow_endpoints_read = _schema_flow_endpoints_read = AAZObjectType()

        flow_endpoints_read = _schema_flow_endpoints_read
        flow_endpoints_read.access_endpoint_ip_addresses = AAZListType(
            serialized_name="accessEndpointIpAddresses",
        )
        flow_endpoints_read.outgoing_ip_addresses = AAZListType(
            serialized_name="outgoingIpAddresses",
        )

        access_endpoint_ip_addresses = _schema_flow_endpoints_read.access_endpoint_ip_addresses
        access_endpoint_ip_addresses.Element = AAZObjectType()
        cls._build_schema_ip_address_read(access_endpoint_ip_addresses.Element)

        outgoing_ip_addresses = _schema_flow_endpoints_read.outgoing_ip_addresses
        outgoing_ip_addresses.Element = AAZObjectType()
        cls._build_schema_ip_address_read(outgoing_ip_addresses.Element)

        _schema.access_endpoint_ip_addresses = cls._schema_flow_endpoints_read.access_endpoint_ip_addresses
        _schema.outgoing_ip_addresses = cls._schema_flow_endpoints_read.outgoing_ip_addresses

    _schema_ip_address_read = None

    @classmethod
    def _build_schema_ip_address_read(cls, _schema):
        if cls._schema_ip_address_read is not None:
            _schema.address = cls._schema_ip_address_read.address
            return

        cls._schema_ip_address_read = _schema_ip_address_read = AAZObjectType()

        ip_address_read = _schema_ip_address_read
        ip_address_read.address = AAZStrType()

        _schema.address = cls._schema_ip_address_read.address

    _schema_resource_reference_read = None

    @classmethod
    def _build_schema_resource_reference_read(cls, _schema):
        if cls._schema_resource_reference_read is not None:
            _schema.id = cls._schema_resource_reference_read.id
            _schema.name = cls._schema_resource_reference_read.name
            _schema.type = cls._schema_resource_reference_read.type
            return

        cls._schema_resource_reference_read = _schema_resource_reference_read = AAZObjectType()

        resource_reference_read = _schema_resource_reference_read
        resource_reference_read.id = AAZStrType()
        resource_reference_read.name = AAZStrType(
            flags={"read_only": True},
        )
        resource_reference_read.type = AAZStrType(
            flags={"read_only": True},
        )

        _schema.id = cls._schema_resource_reference_read.id
        _schema.name = cls._schema_resource_reference_read.name
        _schema.type = cls._schema_resource_reference_read.type

    _schema_workflow_read = None

    @classmethod
    def _build_schema_workflow_read(cls, _schema):
        if cls._schema_workflow_read is not None:
            _schema.id = cls._schema_workflow_read.id
            _schema.identity = cls._schema_workflow_read.identity
            _schema.location = cls._schema_workflow_read.location
            _schema.name = cls._schema_workflow_read.name
            _schema.properties = cls._schema_workflow_read.properties
            _schema.tags = cls._schema_workflow_read.tags
            _schema.type = cls._schema_workflow_read.type
            return

        cls._schema_workflow_read = _schema_workflow_read = AAZObjectType()

        workflow_read = _schema_workflow_read
        workflow_read.id = AAZStrType(
            flags={"read_only": True},
        )
        workflow_read.identity = AAZObjectType()
        workflow_read.location = AAZStrType()
        workflow_read.name = AAZStrType(
            flags={"read_only": True},
        )
        workflow_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        workflow_read.tags = AAZDictType()
        workflow_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_workflow_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_workflow_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_workflow_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_workflow_read.properties
        properties.access_control = AAZObjectType(
            serialized_name="accessControl",
        )
        properties.access_endpoint = AAZStrType(
            serialized_name="accessEndpoint",
            flags={"read_only": True},
        )
        properties.changed_time = AAZStrType(
            serialized_name="changedTime",
            flags={"read_only": True},
        )
        properties.created_time = AAZStrType(
            serialized_name="createdTime",
            flags={"read_only": True},
        )
        properties.definition = AAZFreeFormDictType()
        properties.endpoints_configuration = AAZObjectType(
            serialized_name="endpointsConfiguration",
        )
        properties.integration_account = AAZObjectType(
            serialized_name="integrationAccount",
        )
        cls._build_schema_resource_reference_read(properties.integration_account)
        properties.integration_service_environment = AAZObjectType(
            serialized_name="integrationServiceEnvironment",
        )
        cls._build_schema_resource_reference_read(properties.integration_service_environment)
        properties.parameters = AAZFreeFormDictType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )
        properties.sku = AAZObjectType()
        properties.state = AAZStrType()
        properties.version = AAZStrType(
            flags={"read_only": True},
        )

        access_control = _schema_workflow_read.properties.access_control
        access_control.actions = AAZObjectType()
        cls._build_schema_flow_access_control_configuration_policy_read(access_control.actions)
        access_control.contents = AAZObjectType()
        cls._build_schema_flow_access_control_configuration_policy_read(access_control.contents)
        access_control.triggers = AAZObjectType()
        cls._build_schema_flow_access_control_configuration_policy_read(access_control.triggers)
        access_control.workflow_management = AAZObjectType(
            serialized_name="workflowManagement",
        )
        cls._build_schema_flow_access_control_configuration_policy_read(access_control.workflow_management)

        endpoints_configuration = _schema_workflow_read.properties.endpoints_configuration
        endpoints_configuration.connector = AAZObjectType()
        cls._build_schema_flow_endpoints_read(endpoints_configuration.connector)
        endpoints_configuration.workflow = AAZObjectType()
        cls._build_schema_flow_endpoints_read(endpoints_configuration.workflow)

        sku = _schema_workflow_read.properties.sku
        sku.name = AAZStrType(
            flags={"required": True},
        )
        sku.plan = AAZObjectType()
        cls._build_schema_resource_reference_read(sku.plan)

        tags = _schema_workflow_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_workflow_read.id
        _schema.identity = cls._schema_workflow_read.identity
        _schema.location = cls._schema_workflow_read.location
        _schema.name = cls._schema_workflow_read.name
        _schema.properties = cls._schema_workflow_read.properties
        _schema.tags = cls._schema_workflow_read.tags
        _schema.type = cls._schema_workflow_read.type


__all__ = ["Update"]
