# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "logic integration-account partner create",
)
class Create(AAZCommand):
    """Create an integration account partner.

    :example: Create partner
        az logic integration-account partner create -g rg -n partner --integration-account-name name --content '{b2b:{businessIdentities:[{qualifier:AA,value:BB}]}}' --partner-type B2B
    """

    _aaz_info = {
        "version": "2019-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.logic/integrationaccounts/{}/partners/{}", "2019-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.integration_account_name = AAZStrArg(
            options=["--integration-account-name"],
            help="The integration account name.",
            required=True,
        )
        _args_schema.partner_name = AAZStrArg(
            options=["-n", "--name", "--partner-name"],
            help="The integration account partner name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Partner"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Partner",
            help="The resource location.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Partner",
            help="The resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.content = AAZObjectArg(
            options=["--content"],
            arg_group="Properties",
            help="The partner content.",
            required=True,
        )
        _args_schema.metadata = AAZFreeFormDictArg(
            options=["--metadata"],
            arg_group="Properties",
            help="The metadata.",
            blank={},
        )
        _args_schema.partner_type = AAZStrArg(
            options=["--partner-type"],
            arg_group="Properties",
            help="The partner type.",
            required=True,
            enum={"B2B": "B2B", "NotSpecified": "NotSpecified"},
        )

        content = cls._args_schema.content
        content.b2b = AAZObjectArg(
            options=["b2b"],
            help="The B2B partner content.",
        )

        b2b = cls._args_schema.content.b2b
        b2b.business_identities = AAZListArg(
            options=["business-identities"],
            help="The list of partner business identities.",
        )

        business_identities = cls._args_schema.content.b2b.business_identities
        business_identities.Element = AAZObjectArg()

        _element = cls._args_schema.content.b2b.business_identities.Element
        _element.qualifier = AAZStrArg(
            options=["qualifier"],
            help="The business identity qualifier e.g. as2identity, ZZ, ZZZ, 31, 32",
            required=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The user defined business identity value.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.IntegrationAccountPartnersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class IntegrationAccountPartnersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/partners/{partnerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "integrationAccountName", self.ctx.args.integration_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "partnerName", self.ctx.args.partner_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2019-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("content", AAZObjectType, ".content", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                properties.set_prop("partnerType", AAZStrType, ".partner_type", typ_kwargs={"flags": {"required": True}})

            content = _builder.get(".properties.content")
            if content is not None:
                content.set_prop("b2b", AAZObjectType, ".b2b")

            b2b = _builder.get(".properties.content.b2b")
            if b2b is not None:
                b2b.set_prop("businessIdentities", AAZListType, ".business_identities")

            business_identities = _builder.get(".properties.content.b2b.businessIdentities")
            if business_identities is not None:
                business_identities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.content.b2b.businessIdentities[]")
            if _elements is not None:
                _elements.set_prop("qualifier", AAZStrType, ".qualifier", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.changed_time = AAZStrType(
                serialized_name="changedTime",
                flags={"read_only": True},
            )
            properties.content = AAZObjectType(
                flags={"required": True},
            )
            properties.created_time = AAZStrType(
                serialized_name="createdTime",
                flags={"read_only": True},
            )
            properties.metadata = AAZFreeFormDictType()
            properties.partner_type = AAZStrType(
                serialized_name="partnerType",
                flags={"required": True},
            )

            content = cls._schema_on_200_201.properties.content
            content.b2b = AAZObjectType()

            b2b = cls._schema_on_200_201.properties.content.b2b
            b2b.business_identities = AAZListType(
                serialized_name="businessIdentities",
            )

            business_identities = cls._schema_on_200_201.properties.content.b2b.business_identities
            business_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.content.b2b.business_identities.Element
            _element.qualifier = AAZStrType(
                flags={"required": True},
            )
            _element.value = AAZStrType(
                flags={"required": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
