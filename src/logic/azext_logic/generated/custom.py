# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from azure.cli.core.util import sdk_no_wait


def logic_workflow_list(client,
                        resource_group_name=None,
                        top=None,
                        filter_=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top,
                                             filter=filter_)
    return client.list_by_subscription(top=top,
                                       filter=filter_)


def logic_workflow_show(client,
                        resource_group_name,
                        workflow_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name)


def logic_workflow_create(client,
                          resource_group_name,
                          workflow_name,
                          properties_endpoints_configuration_workflow,
                          location=None,
                          tags=None,
                          state=None,
                          definition=None,
                          parameters=None,
                          id_=None,
                          resource_reference_id=None,
                          triggers=None,
                          contents=None,
                          actions=None,
                          workflow_management=None,
                          connector=None):
    workflow = {}
    workflow['location'] = location
    workflow['tags'] = tags
    workflow['state'] = state
    workflow['definition'] = definition
    workflow['parameters'] = parameters
    workflow['integration_service_environment'] = {}
    workflow['integration_service_environment']['id'] = id_
    workflow['integration_account'] = {}
    workflow['integration_account']['id'] = resource_reference_id
    workflow['access_control'] = {}
    workflow['access_control']['triggers'] = triggers
    workflow['access_control']['contents'] = contents
    workflow['access_control']['actions'] = actions
    workflow['access_control']['workflow_management'] = workflow_management
    workflow['endpoints_configuration'] = {}
    workflow['endpoints_configuration']['workflow'] = properties_endpoints_configuration_workflow
    workflow['endpoints_configuration']['connector'] = connector
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workflow_name=workflow_name,
                                   workflow=workflow)


def logic_workflow_update(client,
                          resource_group_name,
                          workflow_name):
    return client.update(resource_group_name=resource_group_name,
                         workflow_name=workflow_name)


def logic_workflow_delete(client,
                          resource_group_name,
                          workflow_name):
    return client.delete(resource_group_name=resource_group_name,
                         workflow_name=workflow_name)


def logic_workflow_disable(client,
                           resource_group_name,
                           workflow_name):
    return client.disable(resource_group_name=resource_group_name,
                          workflow_name=workflow_name)


def logic_workflow_enable(client,
                          resource_group_name,
                          workflow_name):
    return client.enable(resource_group_name=resource_group_name,
                         workflow_name=workflow_name)


def logic_workflow_generate_upgraded_definition(client,
                                                resource_group_name,
                                                workflow_name,
                                                target_schema_version=None):
    parameters = {}
    parameters['target_schema_version'] = target_schema_version
    return client.generate_upgraded_definition(resource_group_name=resource_group_name,
                                               workflow_name=workflow_name,
                                               parameters=parameters)


def logic_workflow_list_callback_url(client,
                                     resource_group_name,
                                     workflow_name,
                                     not_after=None,
                                     key_type=None):
    list_callback_url = {}
    list_callback_url['not_after'] = not_after
    list_callback_url['key_type'] = key_type
    return client.list_callback_url(resource_group_name=resource_group_name,
                                    workflow_name=workflow_name,
                                    list_callback_url=list_callback_url)


def logic_workflow_list_swagger(client,
                                resource_group_name,
                                workflow_name):
    return client.list_swagger(resource_group_name=resource_group_name,
                               workflow_name=workflow_name)


def logic_workflow_move(client,
                        resource_group_name,
                        workflow_name,
                        id_=None,
                        no_wait=False):
    move = {}
    move['id'] = id_
    return sdk_no_wait(no_wait,
                       client.begin_move,
                       resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       move=move)


def logic_workflow_regenerate_access_key(client,
                                         resource_group_name,
                                         workflow_name,
                                         key_type):
    key_type = {}
    key_type['key_type'] = key_type
    return client.regenerate_access_key(resource_group_name=resource_group_name,
                                        workflow_name=workflow_name,
                                        key_type=key_type)


def logic_workflow_validate_by_location(client,
                                        resource_group_name,
                                        location,
                                        workflow_name,
                                        resource_location=None,
                                        tags=None,
                                        state=None,
                                        definition=None,
                                        parameters=None,
                                        id_=None,
                                        resource_reference_id=None,
                                        triggers=None,
                                        contents=None,
                                        actions=None,
                                        workflow_management=None,
                                        workflow=None,
                                        connector=None):
    validate = {}
    validate['location'] = resource_location
    validate['tags'] = tags
    validate['state'] = state
    validate['definition'] = definition
    validate['parameters'] = parameters
    validate['integration_service_environment'] = {}
    validate['integration_service_environment']['id'] = id_
    validate['integration_account'] = {}
    validate['integration_account']['id'] = resource_reference_id
    validate['access_control'] = {}
    validate['access_control']['triggers'] = triggers
    validate['access_control']['contents'] = contents
    validate['access_control']['actions'] = actions
    validate['access_control']['workflow_management'] = workflow_management
    validate['endpoints_configuration'] = {}
    validate['endpoints_configuration']['workflow'] = workflow
    validate['endpoints_configuration']['connector'] = connector
    return client.validate_by_location(resource_group_name=resource_group_name,
                                       location=location,
                                       workflow_name=workflow_name,
                                       validate=validate)


def logic_workflow_validate_by_resource_group(client,
                                              resource_group_name,
                                              workflow_name,
                                              location=None,
                                              tags=None,
                                              state=None,
                                              definition=None,
                                              parameters=None,
                                              id_=None,
                                              resource_reference_id=None,
                                              triggers=None,
                                              contents=None,
                                              actions=None,
                                              workflow_management=None,
                                              workflow=None,
                                              connector=None):
    validate = {}
    validate['location'] = location
    validate['tags'] = tags
    validate['state'] = state
    validate['definition'] = definition
    validate['parameters'] = parameters
    validate['integration_service_environment'] = {}
    validate['integration_service_environment']['id'] = id_
    validate['integration_account'] = {}
    validate['integration_account']['id'] = resource_reference_id
    validate['access_control'] = {}
    validate['access_control']['triggers'] = triggers
    validate['access_control']['contents'] = contents
    validate['access_control']['actions'] = actions
    validate['access_control']['workflow_management'] = workflow_management
    validate['endpoints_configuration'] = {}
    validate['endpoints_configuration']['workflow'] = workflow
    validate['endpoints_configuration']['connector'] = connector
    return client.validate_by_resource_group(resource_group_name=resource_group_name,
                                             workflow_name=workflow_name,
                                             validate=validate)


def logic_workflow_version_list(client,
                                resource_group_name,
                                workflow_name,
                                top=None):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       top=top)


def logic_workflow_version_show(client,
                                resource_group_name,
                                workflow_name,
                                version_id):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      version_id=version_id)


def logic_workflow_trigger_list(client,
                                resource_group_name,
                                workflow_name,
                                top=None,
                                filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       top=top,
                       filter=filter_)


def logic_workflow_trigger_show(client,
                                resource_group_name,
                                workflow_name,
                                trigger_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      trigger_name=trigger_name)


def logic_workflow_trigger_list_callback_url(client,
                                             resource_group_name,
                                             workflow_name,
                                             trigger_name):
    return client.list_callback_url(resource_group_name=resource_group_name,
                                    workflow_name=workflow_name,
                                    trigger_name=trigger_name)


def logic_workflow_trigger_reset(client,
                                 resource_group_name,
                                 workflow_name,
                                 trigger_name):
    return client.reset(resource_group_name=resource_group_name,
                        workflow_name=workflow_name,
                        trigger_name=trigger_name)


def logic_workflow_trigger_run(client,
                               resource_group_name,
                               workflow_name,
                               trigger_name):
    return client.run(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      trigger_name=trigger_name)


def logic_workflow_trigger_set_state(client,
                                     resource_group_name,
                                     workflow_name,
                                     trigger_name,
                                     source):
    set_state = {}
    set_state['source'] = source
    return client.set_state(resource_group_name=resource_group_name,
                            workflow_name=workflow_name,
                            trigger_name=trigger_name,
                            set_state=set_state)


def logic_workflow_trigger_show_schema_json(client,
                                            resource_group_name,
                                            workflow_name,
                                            trigger_name):
    return client.get_schema_json(resource_group_name=resource_group_name,
                                  workflow_name=workflow_name,
                                  trigger_name=trigger_name)


def logic_workflow_version_trigger_list_callback_url(client,
                                                     resource_group_name,
                                                     workflow_name,
                                                     version_id,
                                                     trigger_name,
                                                     not_after=None,
                                                     key_type=None):
    parameters = {}
    parameters['not_after'] = not_after
    parameters['key_type'] = key_type
    return client.list_callback_url(resource_group_name=resource_group_name,
                                    workflow_name=workflow_name,
                                    version_id=version_id,
                                    trigger_name=trigger_name,
                                    parameters=parameters)


def logic_workflow_trigger_history_list(client,
                                        resource_group_name,
                                        workflow_name,
                                        trigger_name,
                                        top=None,
                                        filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       trigger_name=trigger_name,
                       top=top,
                       filter=filter_)


def logic_workflow_trigger_history_show(client,
                                        resource_group_name,
                                        workflow_name,
                                        trigger_name,
                                        history_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      trigger_name=trigger_name,
                      history_name=history_name)


def logic_workflow_trigger_history_resubmit(client,
                                            resource_group_name,
                                            workflow_name,
                                            trigger_name,
                                            history_name):
    return client.resubmit(resource_group_name=resource_group_name,
                           workflow_name=workflow_name,
                           trigger_name=trigger_name,
                           history_name=history_name)


def logic_workflow_run_list(client,
                            resource_group_name,
                            workflow_name,
                            top=None,
                            filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       top=top,
                       filter=filter_)


def logic_workflow_run_show(client,
                            resource_group_name,
                            workflow_name,
                            run_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name)


def logic_workflow_run_cancel(client,
                              resource_group_name,
                              workflow_name,
                              run_name):
    return client.cancel(resource_group_name=resource_group_name,
                         workflow_name=workflow_name,
                         run_name=run_name)


def logic_workflow_run_action_list(client,
                                   resource_group_name,
                                   workflow_name,
                                   run_name,
                                   top=None,
                                   filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       run_name=run_name,
                       top=top,
                       filter=filter_)


def logic_workflow_run_action_show(client,
                                   resource_group_name,
                                   workflow_name,
                                   run_name,
                                   action_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      action_name=action_name)


def logic_workflow_run_action_list_expression_trace(client,
                                                    resource_group_name,
                                                    workflow_name,
                                                    run_name,
                                                    action_name):
    return client.list_expression_traces(resource_group_name=resource_group_name,
                                         workflow_name=workflow_name,
                                         run_name=run_name,
                                         action_name=action_name)


def logic_workflow_run_action_repetition_list(client,
                                              resource_group_name,
                                              workflow_name,
                                              run_name,
                                              action_name):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       run_name=run_name,
                       action_name=action_name)


def logic_workflow_run_action_repetition_show(client,
                                              resource_group_name,
                                              workflow_name,
                                              run_name,
                                              action_name,
                                              repetition_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      action_name=action_name,
                      repetition_name=repetition_name)


def logic_workflow_run_action_repetition_list_expression_trace(client,
                                                               resource_group_name,
                                                               workflow_name,
                                                               run_name,
                                                               action_name,
                                                               repetition_name):
    return client.list_expression_traces(resource_group_name=resource_group_name,
                                         workflow_name=workflow_name,
                                         run_name=run_name,
                                         action_name=action_name,
                                         repetition_name=repetition_name)


def logic_workflow_run_action_repetition_request_history_list(client,
                                                              resource_group_name,
                                                              workflow_name,
                                                              run_name,
                                                              action_name,
                                                              repetition_name):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       run_name=run_name,
                       action_name=action_name,
                       repetition_name=repetition_name)


def logic_workflow_run_action_repetition_request_history_show(client,
                                                              resource_group_name,
                                                              workflow_name,
                                                              run_name,
                                                              action_name,
                                                              repetition_name,
                                                              request_history_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      action_name=action_name,
                      repetition_name=repetition_name,
                      request_history_name=request_history_name)


def logic_workflow_run_action_request_history_list(client,
                                                   resource_group_name,
                                                   workflow_name,
                                                   run_name,
                                                   action_name):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       run_name=run_name,
                       action_name=action_name)


def logic_workflow_run_action_request_history_show(client,
                                                   resource_group_name,
                                                   workflow_name,
                                                   run_name,
                                                   action_name,
                                                   request_history_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      action_name=action_name,
                      request_history_name=request_history_name)


def logic_workflow_run_action_scope_repetition_list(client,
                                                    resource_group_name,
                                                    workflow_name,
                                                    run_name,
                                                    action_name):
    return client.list(resource_group_name=resource_group_name,
                       workflow_name=workflow_name,
                       run_name=run_name,
                       action_name=action_name)


def logic_workflow_run_action_scope_repetition_show(client,
                                                    resource_group_name,
                                                    workflow_name,
                                                    run_name,
                                                    action_name,
                                                    repetition_name):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      action_name=action_name,
                      repetition_name=repetition_name)


def logic_workflow_run_operation_show(client,
                                      resource_group_name,
                                      workflow_name,
                                      run_name,
                                      operation_id):
    return client.get(resource_group_name=resource_group_name,
                      workflow_name=workflow_name,
                      run_name=run_name,
                      operation_id=operation_id)


def logic_integration_account_list(client,
                                   resource_group_name=None,
                                   top=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             top=top)
    return client.list_by_subscription(top=top)


def logic_integration_account_show(client,
                                   resource_group_name,
                                   integration_account_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name)


def logic_integration_account_create(client,
                                     resource_group_name,
                                     integration_account_name,
                                     location=None,
                                     tags=None,
                                     state=None,
                                     resource_location=None,
                                     resource_tags=None,
                                     sku=None,
                                     provisioning_state=None,
                                     workflow_state=None,
                                     integration_service_environment_id=None,
                                     endpoints_configuration=None,
                                     network_configuration=None,
                                     encryption_configuration=None,
                                     name=None):
    integration_account = {}
    integration_account['location'] = location
    integration_account['tags'] = tags
    integration_account['state'] = state
    integration_account = resource_location
    integration_account = resource_tags
    integration_account['integration_service_environment'] = {}
    integration_account['integration_service_environment']['sku'] = sku
    integration_account['integration_service_environment']['properties'] = {}
    integration_account['integration_service_environment']['properties']['provisioning_state'] = provisioning_state
    integration_account['integration_service_environment']['properties']['state'] = workflow_state
    integration_account['integration_service_environment']['properties']['integration_service_environment_id'] = integration_service_environment_id
    integration_account['integration_service_environment']['properties']['endpoints_configuration'] = endpoints_configuration
    integration_account['integration_service_environment']['properties']['network_configuration'] = network_configuration
    integration_account['integration_service_environment']['properties']['encryption_configuration'] = encryption_configuration
    integration_account['sku'] = {}
    integration_account['sku']['name'] = name
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   integration_account=integration_account)


def logic_integration_account_update(client,
                                     resource_group_name,
                                     integration_account_name,
                                     location=None,
                                     tags=None,
                                     state=None,
                                     resource_location=None,
                                     resource_tags=None,
                                     sku=None,
                                     provisioning_state=None,
                                     workflow_state=None,
                                     integration_service_environment_id=None,
                                     endpoints_configuration=None,
                                     network_configuration=None,
                                     encryption_configuration=None,
                                     name=None):
    integration_account = {}
    integration_account['location'] = location
    integration_account['tags'] = tags
    integration_account['state'] = state
    integration_account = resource_location
    integration_account = resource_tags
    integration_account['integration_service_environment'] = {}
    integration_account['integration_service_environment']['sku'] = sku
    integration_account['integration_service_environment']['properties'] = {}
    integration_account['integration_service_environment']['properties']['provisioning_state'] = provisioning_state
    integration_account['integration_service_environment']['properties']['state'] = workflow_state
    integration_account['integration_service_environment']['properties']['integration_service_environment_id'] = integration_service_environment_id
    integration_account['integration_service_environment']['properties']['endpoints_configuration'] = endpoints_configuration
    integration_account['integration_service_environment']['properties']['network_configuration'] = network_configuration
    integration_account['integration_service_environment']['properties']['encryption_configuration'] = encryption_configuration
    integration_account['sku'] = {}
    integration_account['sku']['name'] = name
    return client.update(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         integration_account=integration_account)


def logic_integration_account_delete(client,
                                     resource_group_name,
                                     integration_account_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name)


def logic_integration_account_list_callback_url(client,
                                                resource_group_name,
                                                integration_account_name,
                                                not_after=None,
                                                key_type=None):
    parameters = {}
    parameters['not_after'] = not_after
    parameters['key_type'] = key_type
    return client.list_callback_url(resource_group_name=resource_group_name,
                                    integration_account_name=integration_account_name,
                                    parameters=parameters)


def logic_integration_account_list_key_vault_key(client,
                                                 resource_group_name,
                                                 integration_account_name,
                                                 skip_token=None,
                                                 id_=None):
    list_key_vault_keys = {}
    list_key_vault_keys['skip_token'] = skip_token
    list_key_vault_keys = id_
    return client.list_key_vault_keys(resource_group_name=resource_group_name,
                                      integration_account_name=integration_account_name,
                                      list_key_vault_keys=list_key_vault_keys)


def logic_integration_account_log_tracking_event(client,
                                                 resource_group_name,
                                                 integration_account_name,
                                                 source_type,
                                                 events,
                                                 track_events_options=None):
    log_tracking_events = {}
    log_tracking_events['source_type'] = source_type
    log_tracking_events['track_events_options'] = track_events_options
    log_tracking_events['events'] = events
    return client.log_tracking_events(resource_group_name=resource_group_name,
                                      integration_account_name=integration_account_name,
                                      log_tracking_events=log_tracking_events)


def logic_integration_account_regenerate_access_key(client,
                                                    resource_group_name,
                                                    integration_account_name,
                                                    key_type=None):
    regenerate_access_key = {}
    regenerate_access_key['key_type'] = key_type
    return client.regenerate_access_key(resource_group_name=resource_group_name,
                                        integration_account_name=integration_account_name,
                                        regenerate_access_key=regenerate_access_key)


def logic_integration_account_assembly_list(client,
                                            resource_group_name,
                                            integration_account_name):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name)


def logic_integration_account_assembly_show(client,
                                            resource_group_name,
                                            integration_account_name,
                                            assembly_artifact_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      assembly_artifact_name=assembly_artifact_name)


def logic_integration_account_assembly_create(client,
                                              resource_group_name,
                                              integration_account_name,
                                              assembly_artifact_name,
                                              properties,
                                              location=None,
                                              tags=None):
    assembly_artifact = {}
    assembly_artifact['location'] = location
    assembly_artifact['tags'] = tags
    assembly_artifact['properties'] = properties
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   assembly_artifact_name=assembly_artifact_name,
                                   assembly_artifact=assembly_artifact)


def logic_integration_account_assembly_update(instance,
                                              resource_group_name,
                                              integration_account_name,
                                              assembly_artifact_name,
                                              properties,
                                              location=None,
                                              tags=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if properties is not None:
        instance.properties = properties
    return instance


def logic_integration_account_assembly_delete(client,
                                              resource_group_name,
                                              integration_account_name,
                                              assembly_artifact_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         assembly_artifact_name=assembly_artifact_name)


def logic_integration_account_assembly_list_content_callback_url(client,
                                                                 resource_group_name,
                                                                 integration_account_name,
                                                                 assembly_artifact_name):
    return client.list_content_callback_url(resource_group_name=resource_group_name,
                                            integration_account_name=integration_account_name,
                                            assembly_artifact_name=assembly_artifact_name)


def logic_integration_account_batch_configuration_list(client,
                                                       resource_group_name,
                                                       integration_account_name):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name)


def logic_integration_account_batch_configuration_show(client,
                                                       resource_group_name,
                                                       integration_account_name,
                                                       batch_configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      batch_configuration_name=batch_configuration_name)


def logic_integration_account_batch_configuration_create(client,
                                                         resource_group_name,
                                                         integration_account_name,
                                                         batch_configuration_name,
                                                         batch_group_name,
                                                         location=None,
                                                         tags=None,
                                                         created_time=None,
                                                         changed_time=None,
                                                         metadata=None,
                                                         message_count=None,
                                                         batch_size=None,
                                                         frequency=None,
                                                         interval=None,
                                                         start_time=None,
                                                         end_time=None,
                                                         time_zone=None,
                                                         minutes=None,
                                                         hours=None,
                                                         week_days=None,
                                                         month_days=None,
                                                         monthly_occurrences=None):
    batch_configuration = {}
    batch_configuration['location'] = location
    batch_configuration['tags'] = tags
    batch_configuration = created_time
    batch_configuration = changed_time
    batch_configuration = metadata
    batch_configuration['properties'] = {}
    batch_configuration['properties']['batch_group_name'] = batch_group_name
    batch_configuration['properties']['release_criteria'] = {}
    batch_configuration['properties']['release_criteria']['message_count'] = message_count
    batch_configuration['properties']['release_criteria']['batch_size'] = batch_size
    batch_configuration = start_time
    batch_configuration = end_time
    batch_configuration = time_zone
    batch_configuration = minutes
    batch_configuration = hours
    batch_configuration = week_days
    batch_configuration = month_days
    batch_configuration = monthly_occurrences
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   batch_configuration_name=batch_configuration_name,
                                   batch_configuration=batch_configuration)


def logic_integration_account_batch_configuration_update(instance,
                                                         resource_group_name,
                                                         integration_account_name,
                                                         batch_configuration_name,
                                                         batch_group_name,
                                                         location=None,
                                                         tags=None,
                                                         created_time=None,
                                                         changed_time=None,
                                                         metadata=None,
                                                         message_count=None,
                                                         batch_size=None,
                                                         frequency=None,
                                                         interval=None,
                                                         start_time=None,
                                                         end_time=None,
                                                         time_zone=None,
                                                         minutes=None,
                                                         hours=None,
                                                         week_days=None,
                                                         month_days=None,
                                                         monthly_occurrences=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if created_time is not None:
        instance.undefined = created_time
    if changed_time is not None:
        instance.undefined = changed_time
    if metadata is not None:
        instance.undefined = metadata
    if batch_group_name is not None:
        instance.properties.batch_group_name = batch_group_name
    if message_count is not None:
        instance.properties.release_criteria.message_count = message_count
    if batch_size is not None:
        instance.properties.release_criteria.batch_size = batch_size
    if start_time is not None:
        instance.undefined = start_time
    if end_time is not None:
        instance.undefined = end_time
    if time_zone is not None:
        instance.undefined = time_zone
    if minutes is not None:
        instance.undefined = minutes
    if hours is not None:
        instance.undefined = hours
    if week_days is not None:
        instance.undefined = week_days
    if month_days is not None:
        instance.undefined = month_days
    if monthly_occurrences is not None:
        instance.undefined = monthly_occurrences
    return instance


def logic_integration_account_batch_configuration_delete(client,
                                                         resource_group_name,
                                                         integration_account_name,
                                                         batch_configuration_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         batch_configuration_name=batch_configuration_name)


def logic_integration_account_schema_list(client,
                                          resource_group_name,
                                          integration_account_name,
                                          top=None,
                                          filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top,
                       filter=filter_)


def logic_integration_account_schema_show(client,
                                          resource_group_name,
                                          integration_account_name,
                                          schema_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      schema_name=schema_name)


def logic_integration_account_schema_create(client,
                                            resource_group_name,
                                            integration_account_name,
                                            schema_name,
                                            schema_type,
                                            properties_content_type,
                                            location=None,
                                            tags=None,
                                            target_namespace=None,
                                            document_name=None,
                                            file_name=None,
                                            metadata=None,
                                            content=None):
    schema = {}
    schema['location'] = location
    schema['tags'] = tags
    schema['schema_type'] = schema_type
    schema['target_namespace'] = target_namespace
    schema['document_name'] = document_name
    schema['file_name'] = file_name
    schema['metadata'] = metadata
    schema['content'] = content
    schema['content_type'] = properties_content_type
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   schema_name=schema_name,
                                   schema=schema)


def logic_integration_account_schema_update(instance,
                                            resource_group_name,
                                            integration_account_name,
                                            schema_name,
                                            schema_type,
                                            properties_content_type,
                                            location=None,
                                            tags=None,
                                            target_namespace=None,
                                            document_name=None,
                                            file_name=None,
                                            metadata=None,
                                            content=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if schema_type is not None:
        instance.schema_type = schema_type
    if target_namespace is not None:
        instance.target_namespace = target_namespace
    if document_name is not None:
        instance.document_name = document_name
    if file_name is not None:
        instance.file_name = file_name
    if metadata is not None:
        instance.metadata = metadata
    if content is not None:
        instance.content = content
    if properties_content_type is not None:
        instance.content_type = properties_content_type
    return instance


def logic_integration_account_schema_delete(client,
                                            resource_group_name,
                                            integration_account_name,
                                            schema_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         schema_name=schema_name)


def logic_integration_account_schema_list_content_callback_url(client,
                                                               resource_group_name,
                                                               integration_account_name,
                                                               schema_name,
                                                               not_after=None,
                                                               key_type=None):
    list_content_callback_url = {}
    list_content_callback_url['not_after'] = not_after
    list_content_callback_url['key_type'] = key_type
    return client.list_content_callback_url(resource_group_name=resource_group_name,
                                            integration_account_name=integration_account_name,
                                            schema_name=schema_name,
                                            list_content_callback_url=list_content_callback_url)


def logic_integration_account_map_list(client,
                                       resource_group_name,
                                       integration_account_name,
                                       top=None,
                                       filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top,
                       filter=filter_)


def logic_integration_account_map_show(client,
                                       resource_group_name,
                                       integration_account_name,
                                       map_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      map_name=map_name)


def logic_integration_account_map_create(client,
                                         resource_group_name,
                                         integration_account_name,
                                         map_name,
                                         map_type,
                                         properties_content_type,
                                         location=None,
                                         tags=None,
                                         content=None,
                                         metadata=None,
                                         ref=None):
    map = {}
    map['location'] = location
    map['tags'] = tags
    map['map_type'] = map_type
    map['content'] = content
    map['content_type'] = properties_content_type
    map['metadata'] = metadata
    map['parameters_schema'] = {}
    map['parameters_schema']['ref'] = ref
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   map_name=map_name,
                                   map=map)


def logic_integration_account_map_update(instance,
                                         resource_group_name,
                                         integration_account_name,
                                         map_name,
                                         map_type,
                                         properties_content_type,
                                         location=None,
                                         tags=None,
                                         content=None,
                                         metadata=None,
                                         ref=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if map_type is not None:
        instance.map_type = map_type
    if content is not None:
        instance.content = content
    if properties_content_type is not None:
        instance.content_type = properties_content_type
    if metadata is not None:
        instance.metadata = metadata
    if ref is not None:
        instance.parameters_schema.ref = ref
    return instance


def logic_integration_account_map_delete(client,
                                         resource_group_name,
                                         integration_account_name,
                                         map_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         map_name=map_name)


def logic_integration_account_map_list_content_callback_url(client,
                                                            resource_group_name,
                                                            integration_account_name,
                                                            map_name,
                                                            not_after=None,
                                                            key_type=None):
    list_content_callback_url = {}
    list_content_callback_url['not_after'] = not_after
    list_content_callback_url['key_type'] = key_type
    return client.list_content_callback_url(resource_group_name=resource_group_name,
                                            integration_account_name=integration_account_name,
                                            map_name=map_name,
                                            list_content_callback_url=list_content_callback_url)


def logic_integration_account_partner_list(client,
                                           resource_group_name,
                                           integration_account_name,
                                           top=None,
                                           filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top,
                       filter=filter_)


def logic_integration_account_partner_show(client,
                                           resource_group_name,
                                           integration_account_name,
                                           partner_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      partner_name=partner_name)


def logic_integration_account_partner_create(client,
                                             resource_group_name,
                                             integration_account_name,
                                             partner_name,
                                             partner_type,
                                             location=None,
                                             tags=None,
                                             metadata=None,
                                             business_identities=None):
    partner = {}
    partner['location'] = location
    partner['tags'] = tags
    partner['partner_type'] = partner_type
    partner['metadata'] = metadata
    partner['b2_b'] = {}
    partner['b2_b']['business_identities'] = business_identities
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   partner_name=partner_name,
                                   partner=partner)


def logic_integration_account_partner_update(instance,
                                             resource_group_name,
                                             integration_account_name,
                                             partner_name,
                                             partner_type,
                                             location=None,
                                             tags=None,
                                             metadata=None,
                                             business_identities=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if partner_type is not None:
        instance.partner_type = partner_type
    if metadata is not None:
        instance.metadata = metadata
    if business_identities is not None:
        instance.b2_b.business_identities = business_identities
    return instance


def logic_integration_account_partner_delete(client,
                                             resource_group_name,
                                             integration_account_name,
                                             partner_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         partner_name=partner_name)


def logic_integration_account_partner_list_content_callback_url(client,
                                                                resource_group_name,
                                                                integration_account_name,
                                                                partner_name,
                                                                not_after=None,
                                                                key_type=None):
    list_content_callback_url = {}
    list_content_callback_url['not_after'] = not_after
    list_content_callback_url['key_type'] = key_type
    return client.list_content_callback_url(resource_group_name=resource_group_name,
                                            integration_account_name=integration_account_name,
                                            partner_name=partner_name,
                                            list_content_callback_url=list_content_callback_url)


def logic_integration_account_agreement_list(client,
                                             resource_group_name,
                                             integration_account_name,
                                             top=None,
                                             filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top,
                       filter=filter_)


def logic_integration_account_agreement_show(client,
                                             resource_group_name,
                                             integration_account_name,
                                             agreement_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      agreement_name=agreement_name)


def logic_integration_account_agreement_create(client,
                                               resource_group_name,
                                               integration_account_name,
                                               agreement_name,
                                               agreement):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   agreement_name=agreement_name,
                                   agreement=agreement)


def logic_integration_account_agreement_update(client,
                                               resource_group_name,
                                               integration_account_name,
                                               agreement_name,
                                               agreement):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   agreement_name=agreement_name,
                                   agreement=agreement)


def logic_integration_account_agreement_delete(client,
                                               resource_group_name,
                                               integration_account_name,
                                               agreement_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         agreement_name=agreement_name)


def logic_integration_account_agreement_list_content_callback_url(client,
                                                                  resource_group_name,
                                                                  integration_account_name,
                                                                  agreement_name,
                                                                  not_after=None,
                                                                  key_type=None):
    list_content_callback_url = {}
    list_content_callback_url['not_after'] = not_after
    list_content_callback_url['key_type'] = key_type
    return client.list_content_callback_url(resource_group_name=resource_group_name,
                                            integration_account_name=integration_account_name,
                                            agreement_name=agreement_name,
                                            list_content_callback_url=list_content_callback_url)


def logic_integration_account_certificate_list(client,
                                               resource_group_name,
                                               integration_account_name,
                                               top=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top)


def logic_integration_account_certificate_show(client,
                                               resource_group_name,
                                               integration_account_name,
                                               certificate_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      certificate_name=certificate_name)


def logic_integration_account_certificate_create(client,
                                                 resource_group_name,
                                                 integration_account_name,
                                                 certificate_name,
                                                 location=None,
                                                 tags=None,
                                                 metadata=None,
                                                 public_certificate=None,
                                                 key_vault=None,
                                                 key_name=None,
                                                 key_version=None):
    certificate = {}
    certificate['location'] = location
    certificate['tags'] = tags
    certificate['metadata'] = metadata
    certificate['public_certificate'] = public_certificate
    certificate['key'] = {}
    certificate['key']['key_vault'] = key_vault
    certificate['key']['key_name'] = key_name
    certificate['key']['key_version'] = key_version
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   certificate_name=certificate_name,
                                   certificate=certificate)


def logic_integration_account_certificate_update(instance,
                                                 resource_group_name,
                                                 integration_account_name,
                                                 certificate_name,
                                                 location=None,
                                                 tags=None,
                                                 metadata=None,
                                                 public_certificate=None,
                                                 key_vault=None,
                                                 key_name=None,
                                                 key_version=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if metadata is not None:
        instance.metadata = metadata
    if public_certificate is not None:
        instance.public_certificate = public_certificate
    if key_vault is not None:
        instance.key.key_vault = key_vault
    if key_name is not None:
        instance.key.key_name = key_name
    if key_version is not None:
        instance.key.key_version = key_version
    return instance


def logic_integration_account_certificate_delete(client,
                                                 resource_group_name,
                                                 integration_account_name,
                                                 certificate_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         certificate_name=certificate_name)


def logic_integration_account_session_list(client,
                                           resource_group_name,
                                           integration_account_name,
                                           top=None,
                                           filter_=None):
    return client.list(resource_group_name=resource_group_name,
                       integration_account_name=integration_account_name,
                       top=top,
                       filter=filter_)


def logic_integration_account_session_show(client,
                                           resource_group_name,
                                           integration_account_name,
                                           session_name):
    return client.get(resource_group_name=resource_group_name,
                      integration_account_name=integration_account_name,
                      session_name=session_name)


def logic_integration_account_session_create(client,
                                             resource_group_name,
                                             integration_account_name,
                                             session_name,
                                             location=None,
                                             tags=None,
                                             content=None):
    session = {}
    session['location'] = location
    session['tags'] = tags
    session['content'] = content
    return client.create_or_update(resource_group_name=resource_group_name,
                                   integration_account_name=integration_account_name,
                                   session_name=session_name,
                                   session=session)


def logic_integration_account_session_update(instance,
                                             resource_group_name,
                                             integration_account_name,
                                             session_name,
                                             location=None,
                                             tags=None,
                                             content=None):
    if location is not None:
        instance.location = location
    if tags is not None:
        instance.tags = tags
    if content is not None:
        instance.content = content
    return instance


def logic_integration_account_session_delete(client,
                                             resource_group_name,
                                             integration_account_name,
                                             session_name):
    return client.delete(resource_group_name=resource_group_name,
                         integration_account_name=integration_account_name,
                         session_name=session_name)


def logic_integration_service_environment_list(client,
                                               resource_group=None,
                                               top=None):
    if resource_group is not None:
        return client.list_by_resource_group(resource_group=resource_group,
                                             top=top)
    return client.list_by_subscription(top=top)


def logic_integration_service_environment_show(client,
                                               resource_group,
                                               integration_service_environment_name):
    return client.get(resource_group=resource_group,
                      integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_create(client,
                                                 resource_group,
                                                 integration_service_environment_name,
                                                 location=None,
                                                 tags=None,
                                                 sku=None,
                                                 provisioning_state=None,
                                                 state=None,
                                                 integration_service_environment_id=None,
                                                 endpoints_configuration=None,
                                                 network_configuration=None,
                                                 encryption_configuration=None,
                                                 no_wait=False):
    integration_service_environment = {}
    integration_service_environment['location'] = location
    integration_service_environment['tags'] = tags
    integration_service_environment['sku'] = sku
    integration_service_environment['properties'] = {}
    integration_service_environment['properties']['provisioning_state'] = provisioning_state
    integration_service_environment['properties']['state'] = state
    integration_service_environment['properties']['integration_service_environment_id'] = integration_service_environment_id
    integration_service_environment['properties']['endpoints_configuration'] = endpoints_configuration
    integration_service_environment['properties']['network_configuration'] = network_configuration
    integration_service_environment['properties']['encryption_configuration'] = encryption_configuration
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name,
                       integration_service_environment=integration_service_environment)


def logic_integration_service_environment_update(client,
                                                 resource_group,
                                                 integration_service_environment_name,
                                                 location=None,
                                                 tags=None,
                                                 sku=None,
                                                 provisioning_state=None,
                                                 state=None,
                                                 integration_service_environment_id=None,
                                                 endpoints_configuration=None,
                                                 network_configuration=None,
                                                 encryption_configuration=None,
                                                 no_wait=False):
    integration_service_environment = {}
    integration_service_environment['location'] = location
    integration_service_environment['tags'] = tags
    integration_service_environment['sku'] = sku
    integration_service_environment['properties'] = {}
    integration_service_environment['properties']['provisioning_state'] = provisioning_state
    integration_service_environment['properties']['state'] = state
    integration_service_environment['properties']['integration_service_environment_id'] = integration_service_environment_id
    integration_service_environment['properties']['endpoints_configuration'] = endpoints_configuration
    integration_service_environment['properties']['network_configuration'] = network_configuration
    integration_service_environment['properties']['encryption_configuration'] = encryption_configuration
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name,
                       integration_service_environment=integration_service_environment)


def logic_integration_service_environment_delete(client,
                                                 resource_group,
                                                 integration_service_environment_name):
    return client.delete(resource_group=resource_group,
                         integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_restart(client,
                                                  resource_group,
                                                  integration_service_environment_name):
    return client.restart(resource_group=resource_group,
                          integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_sku_list(client,
                                                   resource_group,
                                                   integration_service_environment_name):
    return client.list(resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_network_health_show(client,
                                                              resource_group,
                                                              integration_service_environment_name):
    return client.get(resource_group=resource_group,
                      integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_managed_api_list(client,
                                                           resource_group,
                                                           integration_service_environment_name):
    return client.list(resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name)


def logic_integration_service_environment_managed_api_show(client,
                                                           resource_group,
                                                           integration_service_environment_name,
                                                           api_name):
    return client.get(resource_group=resource_group,
                      integration_service_environment_name=integration_service_environment_name,
                      api_name=api_name)


def logic_integration_service_environment_managed_api_delete(client,
                                                             resource_group,
                                                             integration_service_environment_name,
                                                             api_name,
                                                             no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name,
                       api_name=api_name)


def logic_integration_service_environment_managed_api_put(client,
                                                          resource_group,
                                                          integration_service_environment_name,
                                                          api_name,
                                                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_put,
                       resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name,
                       api_name=api_name)


def logic_integration_service_environment_managed_api_operation_list(client,
                                                                     resource_group,
                                                                     integration_service_environment_name,
                                                                     api_name):
    return client.list(resource_group=resource_group,
                       integration_service_environment_name=integration_service_environment_name,
                       api_name=api_name)
