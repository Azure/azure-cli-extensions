# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_logic.action import (
    AddEndpointsConfigurationWorkflow,
    AddSource,
    AddIntegrationServiceEnvironmentSku,
    AddProperties,
    AddReleaseCriteriaRecurrenceScheduleMonthlyOccurrences,
    AddContentB2bBusinessIdentities,
    AddKeyKeyVault
)


def load_arguments(self, _):

    with self.argument_context('logic workflow list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: State, Trigger, and ReferencedResourceId.')

    with self.argument_context('logic workflow show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The state.')
        c.argument('definition', type=validate_file_or_dict, help='The definition. Expected value: '
                   'json-string/@json-file.')
        c.argument('parameters', type=validate_file_or_dict, help='The parameters. Expected value: '
                   'json-string/@json-file.')
        c.argument('integration_service_environment_id', type=str, help='The resource id.')
        c.argument('access_control_triggers', type=validate_file_or_dict, help='The access control configuration for '
                   'invoking workflow triggers. Expected value: json-string/@json-file.')
        c.argument('access_control_contents', type=validate_file_or_dict, help='The access control configuration for '
                   'accessing workflow run contents. Expected value: json-string/@json-file.')
        c.argument('access_control_actions', type=validate_file_or_dict, help='The access control configuration for '
                   'workflow actions. Expected value: json-string/@json-file.')
        c.argument('access_control_workflow_management', type=validate_file_or_dict, help='The access control '
                   'configuration for workflow management. Expected value: json-string/@json-file.')
        c.argument('endpoints_configuration_workflow', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'workflow endpoints.')
        c.argument('endpoints_configuration_connector', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'connector endpoints.')

    with self.argument_context('logic workflow update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow disable') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow enable') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow generate-upgraded-definition') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')
        c.argument('target_schema_version', type=str, help='The target schema version.')

    with self.argument_context('logic workflow list-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic workflow list-swagger') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.')

    with self.argument_context('logic workflow move') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')
        c.argument('id_', options_list=['--id'], type=str, help='The resource id.')

    with self.argument_context('logic workflow regenerate-access-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic workflow validate-by-location') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group, id_part='name')
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='child_name_1')
        c.argument('resource_location', type=str, help='The resource location.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The state.')
        c.argument('definition', type=validate_file_or_dict, help='The definition. Expected value: '
                   'json-string/@json-file.')
        c.argument('parameters', type=validate_file_or_dict, help='The parameters. Expected value: '
                   'json-string/@json-file.')
        c.argument('integration_service_environment_id', type=str, help='The resource id.')
        c.argument('access_control_triggers', type=validate_file_or_dict, help='The access control configuration for '
                   'invoking workflow triggers. Expected value: json-string/@json-file.')
        c.argument('access_control_contents', type=validate_file_or_dict, help='The access control configuration for '
                   'accessing workflow run contents. Expected value: json-string/@json-file.')
        c.argument('access_control_actions', type=validate_file_or_dict, help='The access control configuration for '
                   'workflow actions. Expected value: json-string/@json-file.')
        c.argument('access_control_workflow_management', type=validate_file_or_dict, help='The access control '
                   'configuration for workflow management. Expected value: json-string/@json-file.')
        c.argument('endpoints_configuration_workflow', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'workflow endpoints.')
        c.argument('endpoints_configuration_connector', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'connector endpoints.')

    with self.argument_context('logic workflow validate-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The state.')
        c.argument('definition', type=validate_file_or_dict, help='The definition. Expected value: '
                   'json-string/@json-file.')
        c.argument('parameters', type=validate_file_or_dict, help='The parameters. Expected value: '
                   'json-string/@json-file.')
        c.argument('integration_service_environment_id', type=str, help='The resource id.')
        c.argument('access_control_triggers', type=validate_file_or_dict, help='The access control configuration for '
                   'invoking workflow triggers. Expected value: json-string/@json-file.')
        c.argument('access_control_contents', type=validate_file_or_dict, help='The access control configuration for '
                   'accessing workflow run contents. Expected value: json-string/@json-file.')
        c.argument('access_control_actions', type=validate_file_or_dict, help='The access control configuration for '
                   'workflow actions. Expected value: json-string/@json-file.')
        c.argument('access_control_workflow_management', type=validate_file_or_dict, help='The access control '
                   'configuration for workflow management. Expected value: json-string/@json-file.')
        c.argument('endpoints_configuration_workflow', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'workflow endpoints.')
        c.argument('endpoints_configuration_connector', action=AddEndpointsConfigurationWorkflow, nargs='*', help='The '
                   'connector endpoints.')

    with self.argument_context('logic workflow wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', options_list=['--name', '-n', '--workflow-name'], type=str, help='The workflow '
                   'name.', id_part='name')

    with self.argument_context('logic workflow-version list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')

    with self.argument_context('logic workflow-version show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('version_id', type=str, help='The workflow versionId.', id_part='child_name_1')

    with self.argument_context('logic workflow-trigger list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation.')

    with self.argument_context('logic workflow-trigger show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')

    with self.argument_context('logic workflow-trigger get-schema-json') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')

    with self.argument_context('logic workflow-trigger list-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('trigger_name', type=str, help='The workflow trigger name.')

    with self.argument_context('logic workflow-trigger reset') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')

    with self.argument_context('logic workflow-trigger run') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')

    with self.argument_context('logic workflow-trigger set-state') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')
        c.argument('source', action=AddSource, nargs='+', help='The source.')

    with self.argument_context('logic workflow-version-trigger list-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('version_id', type=str, help='The workflow versionId.')
        c.argument('trigger_name', type=str, help='The workflow trigger name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic workflow-trigger-history list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('trigger_name', type=str, help='The workflow trigger name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: Status, StartTime, and ClientTrackingId.')

    with self.argument_context('logic workflow-trigger-history show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')
        c.argument('history_name', type=str, help='The workflow trigger history name. Corresponds to the run name for '
                   'triggers that resulted in a run.', id_part='child_name_2')

    with self.argument_context('logic workflow-trigger-history resubmit') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('trigger_name', type=str, help='The workflow trigger name.', id_part='child_name_1')
        c.argument('history_name', type=str, help='The workflow trigger history name. Corresponds to the run name for '
                   'triggers that resulted in a run.', id_part='child_name_2')

    with self.argument_context('logic workflow-run list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: Status, StartTime, and ClientTrackingId.')

    with self.argument_context('logic workflow-run show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')

    with self.argument_context('logic workflow-run cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')

    with self.argument_context('logic workflow-run-action list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: Status.')

    with self.argument_context('logic workflow-run-action show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('action_name', type=str, help='The workflow action name.', id_part='child_name_2')

    with self.argument_context('logic workflow-run-action list-expression-trace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')

    with self.argument_context('logic workflow-run-action-repetition list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')

    with self.argument_context('logic workflow-run-action-repetition show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('action_name', type=str, help='The workflow action name.', id_part='child_name_2')
        c.argument('repetition_name', type=str, help='The workflow repetition.', id_part='child_name_3')

    with self.argument_context('logic workflow-run-action-repetition list-expression-trace') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')
        c.argument('repetition_name', type=str, help='The workflow repetition.')

    with self.argument_context('logic workflow-run-action-repetition-request-history list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')
        c.argument('repetition_name', type=str, help='The workflow repetition.')

    with self.argument_context('logic workflow-run-action-repetition-request-history show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('action_name', type=str, help='The workflow action name.', id_part='child_name_2')
        c.argument('repetition_name', type=str, help='The workflow repetition.', id_part='child_name_3')
        c.argument('request_history_name', type=str, help='The request history name.', id_part='child_name_4')

    with self.argument_context('logic workflow-run-action-request-history list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')

    with self.argument_context('logic workflow-run-action-request-history show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('action_name', type=str, help='The workflow action name.', id_part='child_name_2')
        c.argument('request_history_name', type=str, help='The request history name.', id_part='child_name_3')

    with self.argument_context('logic workflow-run-action-scope-repetition list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.')
        c.argument('run_name', type=str, help='The workflow run name.')
        c.argument('action_name', type=str, help='The workflow action name.')

    with self.argument_context('logic workflow-run-action-scope-repetition show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('action_name', type=str, help='The workflow action name.', id_part='child_name_2')
        c.argument('repetition_name', type=str, help='The workflow repetition.', id_part='child_name_3')

    with self.argument_context('logic workflow-run-operation show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workflow_name', type=str, help='The workflow name.', id_part='name')
        c.argument('run_name', type=str, help='The workflow run name.', id_part='child_name_1')
        c.argument('operation_id', type=str, help='The workflow operation id.', id_part='child_name_2')

    with self.argument_context('logic integration-account list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('top', type=int, help='The number of items to be included in the result.')

    with self.argument_context('logic integration-account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.', id_part='name')

    with self.argument_context('logic integration-account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The workflow state.')
        c.argument('integration_service_environment_sku', action=AddIntegrationServiceEnvironmentSku, nargs='*', help=''
                   'The sku.')
        c.argument('integration_service_environment_properties_provisioning_state', arg_type=get_enum_type([''
                                                                                                            'NotSpecified',
                                                                                                            'Accepted',
                                                                                                            'Running',
                                                                                                            'Ready', ''
                                                                                                            'Creating',
                                                                                                            'Created',
                                                                                                            'Deleting',
                                                                                                            'Deleted',
                                                                                                            'Canceled',
                                                                                                            'Failed', ''
                                                                                                            'Succeeded',
                                                                                                            'Moving', ''
                                                                                                            'Updating',
                                                                                                            'Registering',
                                                                                                            'Registered',
                                                                                                            'Unregistering',
                                                                                                            'Unregistered',
                                                                                                            'Completed',
                                                                                                            'Renewing',
                                                                                                            'Pending',
                                                                                                            'Waiting',
                                                                                                            'InProgress'
                                                                                                            ]), help=''
                   'The provisioning state.')
        c.argument('integration_service_environment_properties_integration_service_environment_id', type=str, help=''
                   'Gets the tracking id.')
        c.argument('integration_service_environment_properties_endpoints_configuration', type=validate_file_or_dict,
                   help='The endpoints configuration. Expected value: json-string/@json-file.')
        c.argument('integration_service_environment_properties_network_configuration', type=validate_file_or_dict,
                   help='The network configuration. Expected value: json-string/@json-file.')
        c.argument('integration_service_environment_properties_encryption_configuration', type=validate_file_or_dict,
                   help='The encryption configuration. Expected value: json-string/@json-file.')
        c.argument('sku_name', arg_type=get_enum_type(['NotSpecified', 'Free', 'Basic', 'Standard']), help='The sku '
                   'name.')

    with self.argument_context('logic integration-account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The workflow state.')
        c.argument('integration_service_environment_sku', action=AddIntegrationServiceEnvironmentSku, nargs='*', help=''
                   'The sku.')
        c.argument('integration_service_environment_properties_provisioning_state', arg_type=get_enum_type([''
                                                                                                            'NotSpecified',
                                                                                                            'Accepted',
                                                                                                            'Running',
                                                                                                            'Ready', ''
                                                                                                            'Creating',
                                                                                                            'Created',
                                                                                                            'Deleting',
                                                                                                            'Deleted',
                                                                                                            'Canceled',
                                                                                                            'Failed', ''
                                                                                                            'Succeeded',
                                                                                                            'Moving', ''
                                                                                                            'Updating',
                                                                                                            'Registering',
                                                                                                            'Registered',
                                                                                                            'Unregistering',
                                                                                                            'Unregistered',
                                                                                                            'Completed',
                                                                                                            'Renewing',
                                                                                                            'Pending',
                                                                                                            'Waiting',
                                                                                                            'InProgress'
                                                                                                            ]), help=''
                   'The provisioning state.')
        c.argument('integration_service_environment_properties_integration_service_environment_id', type=str, help=''
                   'Gets the tracking id.')
        c.argument('integration_service_environment_properties_endpoints_configuration', type=validate_file_or_dict,
                   help='The endpoints configuration. Expected value: json-string/@json-file.')
        c.argument('integration_service_environment_properties_network_configuration', type=validate_file_or_dict,
                   help='The network configuration. Expected value: json-string/@json-file.')
        c.argument('integration_service_environment_properties_encryption_configuration', type=validate_file_or_dict,
                   help='The encryption configuration. Expected value: json-string/@json-file.')
        c.argument('sku_name', arg_type=get_enum_type(['NotSpecified', 'Free', 'Basic', 'Standard']), help='The sku '
                   'name.')

    with self.argument_context('logic integration-account delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.', id_part='name')

    with self.argument_context('logic integration-account list-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account list-key-vault-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.')
        c.argument('skip_token', type=str, help='The skip token.')
        c.argument('key_vault_id', type=str, help='The resource id.')

    with self.argument_context('logic integration-account log-tracking-event') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.', id_part='name')
        c.argument('source_type', type=str, help='The source type.')
        c.argument('track_events_options', arg_type=get_enum_type(['None', 'DisableSourceInfoEnrich']), help='The '
                   'track events options.')
        c.argument('events', type=validate_file_or_dict, help='The events. Expected value: json-string/@json-file.')

    with self.argument_context('logic integration-account regenerate-access-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', options_list=['--name', '-n', '--integration-account-name'], type=str,
                   help='The integration account name.', id_part='name')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account-assembly list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')

    with self.argument_context('logic integration-account-assembly show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('assembly_artifact_name', type=str, help='The assembly artifact name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-assembly create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('assembly_artifact_name', type=str, help='The assembly artifact name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('properties', action=AddProperties, nargs='+', help='The assembly properties.')

    with self.argument_context('logic integration-account-assembly update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('assembly_artifact_name', type=str, help='The assembly artifact name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('properties', action=AddProperties, nargs='+', help='The assembly properties.')

    with self.argument_context('logic integration-account-assembly delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('assembly_artifact_name', type=str, help='The assembly artifact name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-assembly list-content-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('assembly_artifact_name', type=str, help='The assembly artifact name.')

    with self.argument_context('logic integration-account-batch-configuration list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')

    with self.argument_context('logic integration-account-batch-configuration show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('batch_configuration_name', type=str, help='The batch configuration name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-batch-configuration create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('batch_configuration_name', type=str, help='The batch configuration name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('created_time', help='The artifact creation time.')
        c.argument('changed_time', help='The artifact changed time.')
        c.argument('metadata', type=validate_file_or_dict, help='Any object Expected value: json-string/@json-file.')
        c.argument('batch_group_name', type=str, help='The name of the batch group.')
        c.argument('release_criteria_message_count', type=int, help='The message count.')
        c.argument('release_criteria_batch_size', type=int, help='The batch size in bytes.')
        c.argument('release_criteria_recurrence_frequency', arg_type=get_enum_type(['NotSpecified', 'Second', 'Minute',
                                                                                    'Hour', 'Day', 'Week', 'Month', ''
                                                                                    'Year']), help='The frequency.')
        c.argument('release_criteria_recurrence_interval', type=int, help='The interval.')
        c.argument('release_criteria_recurrence_start_time', type=str, help='The start time.')
        c.argument('release_criteria_recurrence_end_time', type=str, help='The end time.')
        c.argument('release_criteria_recurrence_time_zone', type=str, help='The time zone.')
        c.argument('release_criteria_recurrence_schedule_minutes', nargs='*', help='The minutes.')
        c.argument('release_criteria_recurrence_schedule_hours', nargs='*', help='The hours.')
        c.argument('release_criteria_recurrence_schedule_week_days', nargs='*', help='The days of the week.')
        c.argument('release_criteria_recurrence_schedule_month_days', nargs='*', help='The month days.')
        c.argument('release_criteria_recurrence_schedule_monthly_occurrences',
                   action=AddReleaseCriteriaRecurrenceScheduleMonthlyOccurrences, nargs='*', help='The monthly '
                   'occurrences.')

    with self.argument_context('logic integration-account-batch-configuration update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('batch_configuration_name', type=str, help='The batch configuration name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('created_time', help='The artifact creation time.')
        c.argument('changed_time', help='The artifact changed time.')
        c.argument('metadata', type=validate_file_or_dict, help='Any object Expected value: json-string/@json-file.')
        c.argument('batch_group_name', type=str, help='The name of the batch group.')
        c.argument('release_criteria_message_count', type=int, help='The message count.')
        c.argument('release_criteria_batch_size', type=int, help='The batch size in bytes.')
        c.argument('release_criteria_recurrence_frequency', arg_type=get_enum_type(['NotSpecified', 'Second', 'Minute',
                                                                                    'Hour', 'Day', 'Week', 'Month', ''
                                                                                    'Year']), help='The frequency.')
        c.argument('release_criteria_recurrence_interval', type=int, help='The interval.')
        c.argument('release_criteria_recurrence_start_time', type=str, help='The start time.')
        c.argument('release_criteria_recurrence_end_time', type=str, help='The end time.')
        c.argument('release_criteria_recurrence_time_zone', type=str, help='The time zone.')
        c.argument('release_criteria_recurrence_schedule_minutes', nargs='*', help='The minutes.')
        c.argument('release_criteria_recurrence_schedule_hours', nargs='*', help='The hours.')
        c.argument('release_criteria_recurrence_schedule_week_days', nargs='*', help='The days of the week.')
        c.argument('release_criteria_recurrence_schedule_month_days', nargs='*', help='The month days.')
        c.argument('release_criteria_recurrence_schedule_monthly_occurrences',
                   action=AddReleaseCriteriaRecurrenceScheduleMonthlyOccurrences, nargs='*', help='The monthly '
                   'occurrences.')

    with self.argument_context('logic integration-account-batch-configuration delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('batch_configuration_name', type=str, help='The batch configuration name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-schema list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: SchemaType.')

    with self.argument_context('logic integration-account-schema show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('schema_name', type=str, help='The integration account schema name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-schema create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('schema_name', type=str, help='The integration account schema name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('schema_type', arg_type=get_enum_type(['NotSpecified', 'Xml']), help='The schema type.')
        c.argument('target_namespace', type=str, help='The target namespace of the schema.')
        c.argument('document_name', type=str, help='The document name.')
        c.argument('file_name', type=str, help='The file name.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('content', type=str, help='The content.')
        c.argument('properties_content_type', type=str, help='The content type.')

    with self.argument_context('logic integration-account-schema update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('schema_name', type=str, help='The integration account schema name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('schema_type', arg_type=get_enum_type(['NotSpecified', 'Xml']), help='The schema type.')
        c.argument('target_namespace', type=str, help='The target namespace of the schema.')
        c.argument('document_name', type=str, help='The document name.')
        c.argument('file_name', type=str, help='The file name.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('content', type=str, help='The content.')
        c.argument('properties_content_type', type=str, help='The content type.')

    with self.argument_context('logic integration-account-schema delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('schema_name', type=str, help='The integration account schema name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-schema list-content-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('schema_name', type=str, help='The integration account schema name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account-map list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: MapType.')

    with self.argument_context('logic integration-account-map show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('map_name', type=str, help='The integration account map name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-map create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('map_name', type=str, help='The integration account map name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('map_type', arg_type=get_enum_type(['NotSpecified', 'Xslt', 'Xslt20', 'Xslt30', 'Liquid']), help=''
                   'The map type.')
        c.argument('content', type=str, help='The content.')
        c.argument('properties_content_type', type=str, help='The content type.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('parameters_schema_ref', type=str, help='The reference name.')

    with self.argument_context('logic integration-account-map update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('map_name', type=str, help='The integration account map name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('map_type', arg_type=get_enum_type(['NotSpecified', 'Xslt', 'Xslt20', 'Xslt30', 'Liquid']), help=''
                   'The map type.')
        c.argument('content', type=str, help='The content.')
        c.argument('properties_content_type', type=str, help='The content type.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('parameters_schema_ref', type=str, help='The reference name.')

    with self.argument_context('logic integration-account-map delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('map_name', type=str, help='The integration account map name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-map list-content-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('map_name', type=str, help='The integration account map name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account-partner list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: PartnerType.')

    with self.argument_context('logic integration-account-partner show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('partner_name', type=str, help='The integration account partner name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-partner create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('partner_name', type=str, help='The integration account partner name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('partner_type', arg_type=get_enum_type(['NotSpecified', 'B2B']), help='The partner type.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('content_b2b_business_identities', action=AddContentB2bBusinessIdentities, nargs='*', help='The '
                   'list of partner business identities.')

    with self.argument_context('logic integration-account-partner update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('partner_name', type=str, help='The integration account partner name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('partner_type', arg_type=get_enum_type(['NotSpecified', 'B2B']), help='The partner type.')
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('content_b2b_business_identities', action=AddContentB2bBusinessIdentities, nargs='*', help='The '
                   'list of partner business identities.')

    with self.argument_context('logic integration-account-partner delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('partner_name', type=str, help='The integration account partner name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-partner list-content-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('partner_name', type=str, help='The integration account partner name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account-agreement list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: AgreementType.')

    with self.argument_context('logic integration-account-agreement show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('agreement_name', type=str, help='The integration account agreement name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-agreement create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('agreement_name', type=str, help='The integration account agreement name.')
        c.argument('agreement', type=validate_file_or_dict, help='The integration account agreement. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('logic integration-account-agreement update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('agreement_name', type=str, help='The integration account agreement name.', id_part='child_name_1')
        c.argument('agreement', type=validate_file_or_dict, help='The integration account agreement. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('logic integration-account-agreement delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('agreement_name', type=str, help='The integration account agreement name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-agreement list-content-callback-url') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('agreement_name', type=str, help='The integration account agreement name.')
        c.argument('not_after', help='The expiry time.')
        c.argument('key_type', arg_type=get_enum_type(['NotSpecified', 'Primary', 'Secondary']), help='The key type.')

    with self.argument_context('logic integration-account-certificate list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')

    with self.argument_context('logic integration-account-certificate show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('certificate_name', type=str, help='The integration account certificate name.', id_part=''
                   'child_name_1')

    with self.argument_context('logic integration-account-certificate create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('certificate_name', type=str, help='The integration account certificate name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('public_certificate', type=str, help='The public certificate.')
        c.argument('key_key_vault', action=AddKeyKeyVault, nargs='*', help='The key vault reference.')
        c.argument('key_key_name', type=str, help='The private key name in key vault.')
        c.argument('key_key_version', type=str, help='The private key version in key vault.')

    with self.argument_context('logic integration-account-certificate update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('certificate_name', type=str, help='The integration account certificate name.', id_part=''
                   'child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('metadata', type=validate_file_or_dict,
                   help='The metadata. Expected value: json-string/@json-file.')
        c.argument('public_certificate', type=str, help='The public certificate.')
        c.argument('key_key_vault', action=AddKeyKeyVault, nargs='*', help='The key vault reference.')
        c.argument('key_key_name', type=str, help='The private key name in key vault.')
        c.argument('key_key_version', type=str, help='The private key version in key vault.')

    with self.argument_context('logic integration-account-certificate delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('certificate_name', type=str, help='The integration account certificate name.', id_part=''
                   'child_name_1')

    with self.argument_context('logic integration-account-session list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('top', type=int, help='The number of items to be included in the result.')
        c.argument('filter_', options_list=['--filter'], type=str, help='The filter to apply on the operation. Options '
                   'for filters include: ChangedTime.')

    with self.argument_context('logic integration-account-session show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('session_name', type=str, help='The integration account session name.', id_part='child_name_1')

    with self.argument_context('logic integration-account-session create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.')
        c.argument('session_name', type=str, help='The integration account session name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('content', type=validate_file_or_dict, help='The session content. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('logic integration-account-session update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('session_name', type=str, help='The integration account session name.', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('content', type=validate_file_or_dict, help='The session content. Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('logic integration-account-session delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('integration_account_name', type=str, help='The integration account name.', id_part='name')
        c.argument('session_name', type=str, help='The integration account session name.', id_part='child_name_1')

    with self.argument_context('logic integration-service-environment list') as c:
        c.argument('resource_group', type=str, help='The resource group.')
        c.argument('top', type=int, help='The number of items to be included in the result.')

    with self.argument_context('logic integration-service-environment show') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.', id_part='name')

    with self.argument_context('logic integration-service-environment create') as c:
        c.argument('resource_group', type=str, help='The resource group.')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('tags', tags_type)
        c.argument('sku', action=AddIntegrationServiceEnvironmentSku, nargs='*', help='The sku.')
        c.argument('provisioning_state', arg_type=get_enum_type(['NotSpecified', 'Accepted', 'Running', 'Ready', ''
                                                                 'Creating', 'Created', 'Deleting', 'Deleted', ''
                                                                 'Canceled', 'Failed', 'Succeeded', 'Moving', ''
                                                                 'Updating', 'Registering', 'Registered', ''
                                                                 'Unregistering', 'Unregistered', 'Completed', ''
                                                                 'Renewing', 'Pending', 'Waiting', 'InProgress']),
                   help='The provisioning state.')
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The integration service environment state.')
        c.argument('integration_service_environment_id', type=str, help='Gets the tracking id.')
        c.argument('endpoints_configuration', type=validate_file_or_dict, help='The endpoints configuration. Expected '
                   'value: json-string/@json-file.')
        c.argument('network_configuration', type=validate_file_or_dict, help='The network configuration. Expected '
                   'value: json-string/@json-file.')
        c.argument('encryption_configuration', type=validate_file_or_dict, help='The encryption configuration. '
                   'Expected value: json-string/@json-file.')

    with self.argument_context('logic integration-service-environment update') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('tags', tags_type)
        c.argument('sku', action=AddIntegrationServiceEnvironmentSku, nargs='*', help='The sku.')
        c.argument('provisioning_state', arg_type=get_enum_type(['NotSpecified', 'Accepted', 'Running', 'Ready', ''
                                                                 'Creating', 'Created', 'Deleting', 'Deleted', ''
                                                                 'Canceled', 'Failed', 'Succeeded', 'Moving', ''
                                                                 'Updating', 'Registering', 'Registered', ''
                                                                 'Unregistering', 'Unregistered', 'Completed', ''
                                                                 'Renewing', 'Pending', 'Waiting', 'InProgress']),
                   help='The provisioning state.')
        c.argument('state', arg_type=get_enum_type(['NotSpecified', 'Completed', 'Enabled', 'Disabled', 'Deleted', ''
                                                    'Suspended']), help='The integration service environment state.')
        c.argument('integration_service_environment_id', type=str, help='Gets the tracking id.')
        c.argument('endpoints_configuration', type=validate_file_or_dict, help='The endpoints configuration. Expected '
                   'value: json-string/@json-file.')
        c.argument('network_configuration', type=validate_file_or_dict, help='The network configuration. Expected '
                   'value: json-string/@json-file.')
        c.argument('encryption_configuration', type=validate_file_or_dict, help='The encryption configuration. '
                   'Expected value: json-string/@json-file.')

    with self.argument_context('logic integration-service-environment delete') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.', id_part='name')

    with self.argument_context('logic integration-service-environment restart') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.', id_part='name')

    with self.argument_context('logic integration-service-environment wait') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', options_list=['--name', '-n', ''
                                                                         '--integration-service-environment-name'],
                   type=str, help='The integration service environment name.', id_part='name')

    with self.argument_context('logic integration-service-environment-sku list') as c:
        c.argument('resource_group', type=str, help='The resource group.')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.')

    with self.argument_context('logic integration-service-environment-network-health show') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.',
                   id_part='name')

    with self.argument_context('logic integration-service-environment-managed-api list') as c:
        c.argument('resource_group', type=str, help='The resource group.')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.')

    with self.argument_context('logic integration-service-environment-managed-api show') as c:
        c.argument('resource_group', type=str, help='The resource group name.', id_part='resource_group')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.',
                   id_part='name')
        c.argument('api_name', type=str, help='The api name.', id_part='child_name_1')

    with self.argument_context('logic integration-service-environment-managed-api delete') as c:
        c.argument('resource_group', type=str, help='The resource group.', id_part='resource_group')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.',
                   id_part='name')
        c.argument('api_name', type=str, help='The api name.', id_part='child_name_1')

    with self.argument_context('logic integration-service-environment-managed-api put') as c:
        c.argument('resource_group', type=str, help='The resource group name.', id_part='resource_group')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.',
                   id_part='name')
        c.argument('api_name', type=str, help='The api name.', id_part='child_name_1')

    with self.argument_context('logic integration-service-environment-managed-api wait') as c:
        c.argument('resource_group', type=str, help='The resource group name.', id_part='resource_group')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.',
                   id_part='name')
        c.argument('api_name', type=str, help='The api name.', id_part='child_name_1')

    with self.argument_context('logic integration-service-environment-managed-api-operation list') as c:
        c.argument('resource_group', type=str, help='The resource group.')
        c.argument('integration_service_environment_name', type=str, help='The integration service environment name.')
        c.argument('api_name', type=str, help='The api name.')
