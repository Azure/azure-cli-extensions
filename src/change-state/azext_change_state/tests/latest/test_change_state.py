# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from types import SimpleNamespace

import pytest
from azure.cli.testsdk import *

from azext_change_state.custom import (
    ChangeStateCreate,
    ChangeStateUpdate,
    _inject_change_definition_into_content,
    _inject_targets_into_result,
)
from azure.cli.core.azclierror import InvalidArgumentValueError


class ChangeStateScenario(ScenarioTest):
    # TODO: add tests here
    pass


class _SerializableValue:
    """Test helper that mimics serialized AAZ values."""

    def __init__(self, data):
        self._data = data

    def to_serialized_data(self):
        return self._data


def test_parse_targets_single_entry():
    result = ChangeStateCreate._parse_targets(["env=prod"])
    assert result == [{"env": "prod"}]


def test_parse_targets_with_multiple_delimiters():
    tokens = ["env=prod,region=us; role=web "]
    result = ChangeStateCreate._parse_targets(tokens)
    assert result == [{"env": "prod", "region": "us", "role": "web"}]


def test_parse_targets_rejects_invalid_entries():
    with pytest.raises(InvalidArgumentValueError):
        ChangeStateCreate._parse_targets(["invalid"])


def test_parse_targets_maps_resource_group_alias():
    result = ChangeStateCreate._parse_targets(["rg=my-group"])
    assert result == [{"resourceGroupName": "my-group"}]


def test_parse_targets_uppercases_http_method_value():
    result = ChangeStateCreate._parse_targets(["httpMethod=delete"])
    assert result == [{"httpMethod": "DELETE"}]


def test_parse_targets_maps_operation_to_http_method():
    result = ChangeStateCreate._parse_targets(["operation=POST,resource=/abc"])
    assert result == [{"httpMethod": "POST", "resource": "/abc"}]


def test_build_change_definition_uses_targets_and_name():
    cmd = object.__new__(ChangeStateCreate)
    cmd._raw_targets = ["env=prod"]
    cmd.ctx = SimpleNamespace(args=SimpleNamespace(change_state_name=_SerializableValue("test-change")))
    definition = ChangeStateCreate._build_change_definition(cmd)
    assert definition == {
        "kind": "Targets",
        "name": "test-change",
        "details": {"targets": [{"env": "prod"}]}
    }


def test_build_change_definition_normalizes_operation():
    cmd = object.__new__(ChangeStateCreate)
    cmd._raw_targets = ["operation=post"]
    cmd.ctx = SimpleNamespace(args=SimpleNamespace(change_state_name=_SerializableValue("test-change")))
    definition = ChangeStateCreate._build_change_definition(cmd)
    assert definition["details"]["targets"] == [{"httpMethod": "POST"}]


def test_build_change_definition_handles_serializable_value():
    class DummyName:
        def to_serialized_data(self):
            return "serialized-name"

    cmd = object.__new__(ChangeStateCreate)
    cmd._raw_targets = ["env=prod"]
    cmd.ctx = SimpleNamespace(args=SimpleNamespace(change_state_name=DummyName()))
    definition = ChangeStateCreate._build_change_definition(cmd)
    assert definition["name"] == "serialized-name"


def test_command_name_overrides():
    assert ChangeStateCreate.AZ_NAME == "change-safety change-state create"
    assert ChangeStateUpdate.AZ_NAME == "change-safety change-state update"


def test_inject_change_definition_into_dict_payload():
    ctx = SimpleNamespace(vars=SimpleNamespace(change_definition=_SerializableValue(_valid_change_definition())))
    original = {"properties": {"existing": "value"}}
    updated = _inject_change_definition_into_content(original, ctx)
    assert updated["properties"]["changeDefinition"] == _valid_change_definition()
    assert updated["properties"]["existing"] == "value"


def test_inject_change_definition_into_content_when_none():
    ctx = SimpleNamespace(vars=SimpleNamespace(change_definition=_SerializableValue(_valid_change_definition())))
    payload = _inject_change_definition_into_content(None, ctx)
    assert payload["properties"]["changeDefinition"] == _valid_change_definition()


def test_inject_change_definition_skips_empty_definition():
    ctx = SimpleNamespace(vars=SimpleNamespace(change_definition=_SerializableValue({})))
    original = {"properties": {}}
    updated = _inject_change_definition_into_content(original, ctx)
    assert updated is original


def test_inject_targets_into_result_populates_properties_container():
    targets = [{"env": "prod"}]
    data = {"properties": {"changeDefinition": {"details": {}}}}
    _inject_targets_into_result(data, targets)
    assert data["properties"]["changeDefinition"]["details"]["targets"] == targets


def test_inject_targets_into_result_handles_list_payloads():
    targets = [{"httpMethod": "POST"}]
    data = [{"changeDefinition": {"details": {}}}]
    _inject_targets_into_result(data, targets)
    assert data[0]["changeDefinition"]["details"]["targets"] == targets


def test_create_operation_content_includes_change_definition():
    args_schema = ChangeStateCreate._build_arguments_schema()
    args = args_schema()
    args.change_state_name = "test-change"
    args.change_type = "AppDeployment"
    args.rollout_type = "Normal"
    args.anticipated_start_time = "2024-11-01T08:00:00Z"
    args.anticipated_end_time = "2024-11-01T10:00:00Z"
    ctx = SimpleNamespace(
        args=args,
        vars=SimpleNamespace(change_definition=_SerializableValue(_valid_change_definition()))
    )

    op = object.__new__(ChangeStateCreate.ChangeStatesCreateOrUpdate)
    op.ctx = ctx
    payload = op.content
    assert payload["properties"]["changeDefinition"] == _valid_change_definition()


def _valid_change_definition():
    return {
        "kind": "Targets",
        "name": "test-change",
        "details": {"targets": [{"resourceId": "/foo", "operation": "DELETE"}]},
    }
