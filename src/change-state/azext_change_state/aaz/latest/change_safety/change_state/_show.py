# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "change-safety change-state show",
)
class Show(AAZCommand):
    """Get a ChangeState
    """

    _aaz_info = {
        "version": "2025-09-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.changesafety/changestates/{}", "2025-09-01-preview"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.changesafety/changestates/{}", "2025-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.change_state_name = AAZStrArg(
            options=["-n", "--name", "--change-state-name"],
            help="The name of the ChangeState resource.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,100}$",
                max_length=100,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.change_state_name) and has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        condition_1 = has_value(self.ctx.args.change_state_name) and has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        if condition_0:
            self.ChangeStatesGetAtSubscriptionLevel(ctx=self.ctx)()
        if condition_1:
            self.ChangeStatesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ChangeStatesGetAtSubscriptionLevel(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.additional_data = AAZObjectType(
                serialized_name="additionalData",
            )
            properties.anticipated_end_time = AAZStrType(
                serialized_name="anticipatedEndTime",
                flags={"required": True},
            )
            properties.anticipated_start_time = AAZStrType(
                serialized_name="anticipatedStartTime",
                flags={"required": True},
            )
            properties.change_definition = AAZObjectType(
                serialized_name="changeDefinition",
                flags={"required": True},
            )
            properties.change_type = AAZStrType(
                serialized_name="changeType",
                flags={"required": True},
            )
            properties.comments = AAZStrType()
            properties.description = AAZStrType()
            properties.links = AAZListType()
            properties.orchestration_tool = AAZStrType(
                serialized_name="orchestrationTool",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.release_label = AAZStrType(
                serialized_name="releaseLabel",
            )
            properties.rollout_type = AAZStrType(
                serialized_name="rolloutType",
                flags={"required": True},
            )
            properties.stage_map = AAZObjectType(
                serialized_name="stageMap",
            )
            properties.stage_map_snapshot = AAZListType(
                serialized_name="stageMapSnapshot",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            change_definition = cls._schema_on_200.properties.change_definition
            change_definition.details = AAZObjectType(
                flags={"required": True},
            )
            change_definition.kind = AAZStrType(
                flags={"required": True},
            )
            change_definition.name = AAZStrType(
                flags={"required": True},
            )

            links = cls._schema_on_200.properties.links
            links.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.links.Element
            _element.description = AAZStrType()
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.uri = AAZStrType(
                flags={"required": True},
            )

            parameters = cls._schema_on_200.properties.parameters
            parameters.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.parameters.Element
            _element.metadata = AAZDictType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            metadata = cls._schema_on_200.properties.parameters.Element.metadata
            metadata.Element = AAZStrType()

            disc_array = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array")
            disc_array.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_array.default_value = AAZListType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array").allowed_values
            allowed_values.Element = AAZAnyType()

            default_value = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array").default_value
            default_value.Element = AAZAnyType()

            disc_number = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "number")
            disc_number.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_number.default_value = AAZIntType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "number").allowed_values
            allowed_values.Element = AAZIntType()

            disc_object = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object")
            disc_object.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_object.default_value = AAZObjectType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object").allowed_values
            allowed_values.Element = AAZDictType()

            _element = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object").allowed_values.Element
            _element.Element = AAZAnyType()

            disc_string = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "string")
            disc_string.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_string.default_value = AAZStrType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "string").allowed_values
            allowed_values.Element = AAZStrType()

            stage_map = cls._schema_on_200.properties.stage_map
            stage_map.parameters = AAZDictType()
            stage_map.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            parameters = cls._schema_on_200.properties.stage_map.parameters
            parameters.Element = AAZAnyType()

            stage_map_snapshot = cls._schema_on_200.properties.stage_map_snapshot
            stage_map_snapshot.Element = AAZAnyType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200

    class ChangeStatesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.additional_data = AAZObjectType(
                serialized_name="additionalData",
            )
            properties.anticipated_end_time = AAZStrType(
                serialized_name="anticipatedEndTime",
                flags={"required": True},
            )
            properties.anticipated_start_time = AAZStrType(
                serialized_name="anticipatedStartTime",
                flags={"required": True},
            )
            properties.change_definition = AAZObjectType(
                serialized_name="changeDefinition",
                flags={"required": True},
            )
            properties.change_type = AAZStrType(
                serialized_name="changeType",
                flags={"required": True},
            )
            properties.comments = AAZStrType()
            properties.description = AAZStrType()
            properties.links = AAZListType()
            properties.orchestration_tool = AAZStrType(
                serialized_name="orchestrationTool",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.release_label = AAZStrType(
                serialized_name="releaseLabel",
            )
            properties.rollout_type = AAZStrType(
                serialized_name="rolloutType",
                flags={"required": True},
            )
            properties.stage_map = AAZObjectType(
                serialized_name="stageMap",
            )
            properties.stage_map_snapshot = AAZListType(
                serialized_name="stageMapSnapshot",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            change_definition = cls._schema_on_200.properties.change_definition
            change_definition.details = AAZObjectType(
                flags={"required": True},
            )
            change_definition.kind = AAZStrType(
                flags={"required": True},
            )
            change_definition.name = AAZStrType(
                flags={"required": True},
            )

            links = cls._schema_on_200.properties.links
            links.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.links.Element
            _element.description = AAZStrType()
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.uri = AAZStrType(
                flags={"required": True},
            )

            parameters = cls._schema_on_200.properties.parameters
            parameters.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.parameters.Element
            _element.metadata = AAZDictType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            metadata = cls._schema_on_200.properties.parameters.Element.metadata
            metadata.Element = AAZStrType()

            disc_array = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array")
            disc_array.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_array.default_value = AAZListType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array").allowed_values
            allowed_values.Element = AAZAnyType()

            default_value = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "array").default_value
            default_value.Element = AAZAnyType()

            disc_number = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "number")
            disc_number.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_number.default_value = AAZIntType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "number").allowed_values
            allowed_values.Element = AAZIntType()

            disc_object = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object")
            disc_object.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_object.default_value = AAZObjectType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object").allowed_values
            allowed_values.Element = AAZDictType()

            _element = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "object").allowed_values.Element
            _element.Element = AAZAnyType()

            disc_string = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "string")
            disc_string.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_string.default_value = AAZStrType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.parameters.Element.discriminate_by("type", "string").allowed_values
            allowed_values.Element = AAZStrType()

            stage_map = cls._schema_on_200.properties.stage_map
            stage_map.parameters = AAZDictType()
            stage_map.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            parameters = cls._schema_on_200.properties.stage_map.parameters
            parameters.Element = AAZAnyType()

            stage_map_snapshot = cls._schema_on_200.properties.stage_map_snapshot
            stage_map_snapshot.Element = AAZAnyType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
