# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "change-safety change-state create",
)
class Create(AAZCommand):
    """Create a ChangeState
    """

    _aaz_info = {
        "version": "2025-09-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.changesafety/changestates/{}", "2025-09-01-preview"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.changesafety/changestates/{}", "2025-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.change_state_name = AAZStrArg(
            options=["-n", "--name", "--change-state-name"],
            help="The name of the ChangeState resource.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,100}$",
                max_length=100,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.additional_data = AAZObjectArg(
            options=["--additional-data"],
            arg_group="Properties",
            help="Additional metadata for the change required for various orchestration tools.",
            blank={},
        )
        _args_schema.anticipated_end_time = AAZDateTimeArg(
            options=["--anticipated-end-time"],
            arg_group="Properties",
            help="Expected completion time when the change should be finished, in ISO 8601 format.",
            fmt=AAZDateTimeFormat(
                protocol="iso",
            ),
        )
        _args_schema.anticipated_start_time = AAZDateTimeArg(
            options=["--anticipated-start-time"],
            arg_group="Properties",
            help="Expected start time when the change execution should begin, in ISO 8601 format.",
            fmt=AAZDateTimeFormat(
                protocol="iso",
            ),
        )
        _args_schema.change_type = AAZStrArg(
            options=["--change-type"],
            arg_group="Properties",
            help="Describes the nature of the change.",
            enum={"AppDeployment": "AppDeployment", "Config": "Config", "ManualTouch": "ManualTouch", "PolicyDeployment": "PolicyDeployment"},
        )
        _args_schema.comments = AAZStrArg(
            options=["--comments"],
            arg_group="Properties",
            help="Comments about the last update to the changeState resource.",
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Brief description about the change.",
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _args_schema.links = AAZListArg(
            options=["--links"],
            arg_group="Properties",
            help="Collection of related links for the change.",
        )
        _args_schema.orchestration_tool = AAZStrArg(
            options=["--orchestration-tool"],
            arg_group="Properties",
            help="Tool used for deployment orchestration of this change.",
        )
        _args_schema.parameters = AAZDictArg(
            options=["--parameters"],
            arg_group="Properties",
            help="Schema of parameters that will be provided for each stageProgression.",
        )
        _args_schema.release_label = AAZStrArg(
            options=["--release-label"],
            arg_group="Properties",
            help="Label for the release associated with this change.",
        )
        _args_schema.rollout_type = AAZStrArg(
            options=["--rollout-type"],
            arg_group="Properties",
            help="Describes the type of the rollout used for the change.",
            enum={"Emergency": "Emergency", "Hotfix": "Hotfix", "Normal": "Normal"},
        )
        _args_schema.stage_map = AAZObjectArg(
            options=["--stage-map"],
            arg_group="Properties",
            help="Reference to the StageMap, defining progression.",
        )

        links = cls._args_schema.links
        links.Element = AAZObjectArg()

        _element = cls._args_schema.links.Element
        _element.description = AAZStrArg(
            options=["description"],
            help="Description or note about the link.",
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="name of the link.",
            required=True,
        )
        _element.uri = AAZStrArg(
            options=["uri"],
            help="URL or comma separated URLs for the link.",
            required=True,
        )

        parameters = cls._args_schema.parameters
        parameters.Element = AAZObjectArg()

        _element = cls._args_schema.parameters.Element
        _element.array = AAZObjectArg(
            options=["array"],
        )
        _element.metadata = AAZDictArg(
            options=["metadata"],
            help="user-specified parameter metadata",
        )
        _element.number = AAZObjectArg(
            options=["number"],
        )
        _element.object = AAZObjectArg(
            options=["object"],
        )
        _element.string = AAZObjectArg(
            options=["string"],
        )

        array = cls._args_schema.parameters.Element.array
        array.allowed_values = AAZListArg(
            options=["allowed-values"],
            help="Allowed list of the values for the parameter.",
        )
        array.default_value = AAZListArg(
            options=["default-value"],
            help="Default value for the parameter.",
        )

        allowed_values = cls._args_schema.parameters.Element.array.allowed_values
        allowed_values.Element = AAZAnyTypeArg()

        default_value = cls._args_schema.parameters.Element.array.default_value
        default_value.Element = AAZAnyTypeArg()

        metadata = cls._args_schema.parameters.Element.metadata
        metadata.Element = AAZStrArg()

        number = cls._args_schema.parameters.Element.number
        number.allowed_values = AAZListArg(
            options=["allowed-values"],
            help="Allowed list of the values for the parameter.",
        )
        number.default_value = AAZIntArg(
            options=["default-value"],
            help="Default value for the parameter.",
        )

        allowed_values = cls._args_schema.parameters.Element.number.allowed_values
        allowed_values.Element = AAZIntArg()

        object = cls._args_schema.parameters.Element.object
        object.allowed_values = AAZListArg(
            options=["allowed-values"],
            help="Allowed list of the values for the parameter.",
        )
        object.default_value = AAZObjectArg(
            options=["default-value"],
            help="Default value for the parameter.",
            blank={},
        )

        allowed_values = cls._args_schema.parameters.Element.object.allowed_values
        allowed_values.Element = AAZDictArg()

        _element = cls._args_schema.parameters.Element.object.allowed_values.Element
        _element.Element = AAZAnyTypeArg()

        string = cls._args_schema.parameters.Element.string
        string.allowed_values = AAZListArg(
            options=["allowed-values"],
            help="Allowed list of the values for the parameter.",
        )
        string.default_value = AAZStrArg(
            options=["default-value"],
            help="Default value for the parameter.",
        )

        allowed_values = cls._args_schema.parameters.Element.string.allowed_values
        allowed_values.Element = AAZStrArg()

        stage_map = cls._args_schema.stage_map
        stage_map.parameters = AAZDictArg(
            options=["parameters"],
            help="Key value pairs of parameter names & their values for the stageMap referenced by the resourceId field.",
        )
        stage_map.resource_id = AAZStrArg(
            options=["resource-id"],
            help="ARM resource ID for the nested stagemap resource.",
        )

        parameters = cls._args_schema.stage_map.parameters
        parameters.Element = AAZAnyTypeArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.change_state_name) and has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        condition_1 = has_value(self.ctx.args.change_state_name) and has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        if condition_0:
            self.ChangeStatesCreateOrUpdateAtSubscriptionLevel(ctx=self.ctx)()
        if condition_1:
            self.ChangeStatesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ChangeStatesCreateOrUpdateAtSubscriptionLevel(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalData", AAZObjectType, ".additional_data")
                properties.set_prop("anticipatedEndTime", AAZStrType, ".anticipated_end_time", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("anticipatedStartTime", AAZStrType, ".anticipated_start_time", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("changeType", AAZStrType, ".change_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("comments", AAZStrType, ".comments")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("links", AAZListType, ".links")
                properties.set_prop("orchestrationTool", AAZStrType, ".orchestration_tool")
                properties.set_prop("parameters", AAZDictType, ".parameters")
                properties.set_prop("releaseLabel", AAZStrType, ".release_label")
                properties.set_prop("rolloutType", AAZStrType, ".rollout_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("stageMap", AAZObjectType, ".stage_map")

            links = _builder.get(".properties.links")
            if links is not None:
                links.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.links[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("uri", AAZStrType, ".uri", typ_kwargs={"flags": {"required": True}})

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.parameters{}")
            if _elements is not None:
                _elements.set_prop("metadata", AAZDictType, ".metadata")
                _elements.set_const("type", "array", AAZStrType, ".array", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "number", AAZStrType, ".number", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "object", AAZStrType, ".object", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "string", AAZStrType, ".string", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("type", "array")
                _elements.discriminate_by("type", "number")
                _elements.discriminate_by("type", "object")
                _elements.discriminate_by("type", "string")

            metadata = _builder.get(".properties.parameters{}.metadata")
            if metadata is not None:
                metadata.set_elements(AAZStrType, ".")

            disc_array = _builder.get(".properties.parameters{}{type:array}")
            if disc_array is not None:
                disc_array.set_prop("allowedValues", AAZListType, ".array.allowed_values")
                disc_array.set_prop("defaultValue", AAZListType, ".array.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:array}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZAnyType, ".")

            default_value = _builder.get(".properties.parameters{}{type:array}.defaultValue")
            if default_value is not None:
                default_value.set_elements(AAZAnyType, ".")

            disc_number = _builder.get(".properties.parameters{}{type:number}")
            if disc_number is not None:
                disc_number.set_prop("allowedValues", AAZListType, ".number.allowed_values")
                disc_number.set_prop("defaultValue", AAZIntType, ".number.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:number}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZIntType, ".")

            disc_object = _builder.get(".properties.parameters{}{type:object}")
            if disc_object is not None:
                disc_object.set_prop("allowedValues", AAZListType, ".object.allowed_values")
                disc_object.set_prop("defaultValue", AAZObjectType, ".object.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:object}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZDictType, ".")

            _elements = _builder.get(".properties.parameters{}{type:object}.allowedValues[]")
            if _elements is not None:
                _elements.set_elements(AAZAnyType, ".")

            disc_string = _builder.get(".properties.parameters{}{type:string}")
            if disc_string is not None:
                disc_string.set_prop("allowedValues", AAZListType, ".string.allowed_values")
                disc_string.set_prop("defaultValue", AAZStrType, ".string.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:string}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZStrType, ".")

            stage_map = _builder.get(".properties.stageMap")
            if stage_map is not None:
                stage_map.set_prop("parameters", AAZDictType, ".parameters")
                stage_map.set_prop("resourceId", AAZStrType, ".resource_id")

            parameters = _builder.get(".properties.stageMap.parameters")
            if parameters is not None:
                parameters.set_elements(AAZAnyType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.additional_data = AAZObjectType(
                serialized_name="additionalData",
            )
            properties.anticipated_end_time = AAZStrType(
                serialized_name="anticipatedEndTime",
                flags={"required": True},
            )
            properties.anticipated_start_time = AAZStrType(
                serialized_name="anticipatedStartTime",
                flags={"required": True},
            )
            properties.change_definition = AAZObjectType(
                serialized_name="changeDefinition",
                flags={"required": True},
            )
            properties.change_type = AAZStrType(
                serialized_name="changeType",
                flags={"required": True},
            )
            properties.comments = AAZStrType()
            properties.description = AAZStrType()
            properties.links = AAZListType()
            properties.orchestration_tool = AAZStrType(
                serialized_name="orchestrationTool",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.release_label = AAZStrType(
                serialized_name="releaseLabel",
            )
            properties.rollout_type = AAZStrType(
                serialized_name="rolloutType",
                flags={"required": True},
            )
            properties.stage_map = AAZObjectType(
                serialized_name="stageMap",
            )
            properties.stage_map_snapshot = AAZListType(
                serialized_name="stageMapSnapshot",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            change_definition = cls._schema_on_200_201.properties.change_definition
            change_definition.details = AAZObjectType(
                flags={"required": True},
            )
            change_definition.kind = AAZStrType(
                flags={"required": True},
            )
            change_definition.name = AAZStrType(
                flags={"required": True},
            )

            links = cls._schema_on_200_201.properties.links
            links.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.links.Element
            _element.description = AAZStrType()
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.uri = AAZStrType(
                flags={"required": True},
            )

            parameters = cls._schema_on_200_201.properties.parameters
            parameters.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.parameters.Element
            _element.metadata = AAZDictType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            metadata = cls._schema_on_200_201.properties.parameters.Element.metadata
            metadata.Element = AAZStrType()

            disc_array = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array")
            disc_array.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_array.default_value = AAZListType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array").allowed_values
            allowed_values.Element = AAZAnyType()

            default_value = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array").default_value
            default_value.Element = AAZAnyType()

            disc_number = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "number")
            disc_number.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_number.default_value = AAZIntType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "number").allowed_values
            allowed_values.Element = AAZIntType()

            disc_object = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object")
            disc_object.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_object.default_value = AAZObjectType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object").allowed_values
            allowed_values.Element = AAZDictType()

            _element = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object").allowed_values.Element
            _element.Element = AAZAnyType()

            disc_string = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "string")
            disc_string.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_string.default_value = AAZStrType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "string").allowed_values
            allowed_values.Element = AAZStrType()

            stage_map = cls._schema_on_200_201.properties.stage_map
            stage_map.parameters = AAZDictType()
            stage_map.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            parameters = cls._schema_on_200_201.properties.stage_map.parameters
            parameters.Element = AAZAnyType()

            stage_map_snapshot = cls._schema_on_200_201.properties.stage_map_snapshot
            stage_map_snapshot.Element = AAZAnyType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201

    class ChangeStatesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("additionalData", AAZObjectType, ".additional_data")
                properties.set_prop("anticipatedEndTime", AAZStrType, ".anticipated_end_time", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("anticipatedStartTime", AAZStrType, ".anticipated_start_time", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("changeType", AAZStrType, ".change_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("comments", AAZStrType, ".comments")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("links", AAZListType, ".links")
                properties.set_prop("orchestrationTool", AAZStrType, ".orchestration_tool")
                properties.set_prop("parameters", AAZDictType, ".parameters")
                properties.set_prop("releaseLabel", AAZStrType, ".release_label")
                properties.set_prop("rolloutType", AAZStrType, ".rollout_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("stageMap", AAZObjectType, ".stage_map")

            links = _builder.get(".properties.links")
            if links is not None:
                links.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.links[]")
            if _elements is not None:
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("uri", AAZStrType, ".uri", typ_kwargs={"flags": {"required": True}})

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.parameters{}")
            if _elements is not None:
                _elements.set_prop("metadata", AAZDictType, ".metadata")
                _elements.set_const("type", "array", AAZStrType, ".array", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "number", AAZStrType, ".number", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "object", AAZStrType, ".object", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("type", "string", AAZStrType, ".string", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("type", "array")
                _elements.discriminate_by("type", "number")
                _elements.discriminate_by("type", "object")
                _elements.discriminate_by("type", "string")

            metadata = _builder.get(".properties.parameters{}.metadata")
            if metadata is not None:
                metadata.set_elements(AAZStrType, ".")

            disc_array = _builder.get(".properties.parameters{}{type:array}")
            if disc_array is not None:
                disc_array.set_prop("allowedValues", AAZListType, ".array.allowed_values")
                disc_array.set_prop("defaultValue", AAZListType, ".array.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:array}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZAnyType, ".")

            default_value = _builder.get(".properties.parameters{}{type:array}.defaultValue")
            if default_value is not None:
                default_value.set_elements(AAZAnyType, ".")

            disc_number = _builder.get(".properties.parameters{}{type:number}")
            if disc_number is not None:
                disc_number.set_prop("allowedValues", AAZListType, ".number.allowed_values")
                disc_number.set_prop("defaultValue", AAZIntType, ".number.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:number}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZIntType, ".")

            disc_object = _builder.get(".properties.parameters{}{type:object}")
            if disc_object is not None:
                disc_object.set_prop("allowedValues", AAZListType, ".object.allowed_values")
                disc_object.set_prop("defaultValue", AAZObjectType, ".object.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:object}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZDictType, ".")

            _elements = _builder.get(".properties.parameters{}{type:object}.allowedValues[]")
            if _elements is not None:
                _elements.set_elements(AAZAnyType, ".")

            disc_string = _builder.get(".properties.parameters{}{type:string}")
            if disc_string is not None:
                disc_string.set_prop("allowedValues", AAZListType, ".string.allowed_values")
                disc_string.set_prop("defaultValue", AAZStrType, ".string.default_value")

            allowed_values = _builder.get(".properties.parameters{}{type:string}.allowedValues")
            if allowed_values is not None:
                allowed_values.set_elements(AAZStrType, ".")

            stage_map = _builder.get(".properties.stageMap")
            if stage_map is not None:
                stage_map.set_prop("parameters", AAZDictType, ".parameters")
                stage_map.set_prop("resourceId", AAZStrType, ".resource_id")

            parameters = _builder.get(".properties.stageMap.parameters")
            if parameters is not None:
                parameters.set_elements(AAZAnyType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.additional_data = AAZObjectType(
                serialized_name="additionalData",
            )
            properties.anticipated_end_time = AAZStrType(
                serialized_name="anticipatedEndTime",
                flags={"required": True},
            )
            properties.anticipated_start_time = AAZStrType(
                serialized_name="anticipatedStartTime",
                flags={"required": True},
            )
            properties.change_definition = AAZObjectType(
                serialized_name="changeDefinition",
                flags={"required": True},
            )
            properties.change_type = AAZStrType(
                serialized_name="changeType",
                flags={"required": True},
            )
            properties.comments = AAZStrType()
            properties.description = AAZStrType()
            properties.links = AAZListType()
            properties.orchestration_tool = AAZStrType(
                serialized_name="orchestrationTool",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.release_label = AAZStrType(
                serialized_name="releaseLabel",
            )
            properties.rollout_type = AAZStrType(
                serialized_name="rolloutType",
                flags={"required": True},
            )
            properties.stage_map = AAZObjectType(
                serialized_name="stageMap",
            )
            properties.stage_map_snapshot = AAZListType(
                serialized_name="stageMapSnapshot",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            change_definition = cls._schema_on_200_201.properties.change_definition
            change_definition.details = AAZObjectType(
                flags={"required": True},
            )
            change_definition.kind = AAZStrType(
                flags={"required": True},
            )
            change_definition.name = AAZStrType(
                flags={"required": True},
            )

            links = cls._schema_on_200_201.properties.links
            links.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.links.Element
            _element.description = AAZStrType()
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.uri = AAZStrType(
                flags={"required": True},
            )

            parameters = cls._schema_on_200_201.properties.parameters
            parameters.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.parameters.Element
            _element.metadata = AAZDictType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            metadata = cls._schema_on_200_201.properties.parameters.Element.metadata
            metadata.Element = AAZStrType()

            disc_array = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array")
            disc_array.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_array.default_value = AAZListType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array").allowed_values
            allowed_values.Element = AAZAnyType()

            default_value = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "array").default_value
            default_value.Element = AAZAnyType()

            disc_number = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "number")
            disc_number.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_number.default_value = AAZIntType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "number").allowed_values
            allowed_values.Element = AAZIntType()

            disc_object = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object")
            disc_object.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_object.default_value = AAZObjectType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object").allowed_values
            allowed_values.Element = AAZDictType()

            _element = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "object").allowed_values.Element
            _element.Element = AAZAnyType()

            disc_string = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "string")
            disc_string.allowed_values = AAZListType(
                serialized_name="allowedValues",
            )
            disc_string.default_value = AAZStrType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200_201.properties.parameters.Element.discriminate_by("type", "string").allowed_values
            allowed_values.Element = AAZStrType()

            stage_map = cls._schema_on_200_201.properties.stage_map
            stage_map.parameters = AAZDictType()
            stage_map.resource_id = AAZStrType(
                serialized_name="resourceId",
            )

            parameters = cls._schema_on_200_201.properties.stage_map.parameters
            parameters.Element = AAZAnyType()

            stage_map_snapshot = cls._schema_on_200_201.properties.stage_map_snapshot
            stage_map_snapshot.Element = AAZAnyType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
