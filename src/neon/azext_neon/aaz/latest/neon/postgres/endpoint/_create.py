# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres endpoint create",
)
class Create(AAZCommand):
    """Create a Endpoint
    """

    _aaz_info = {
        "version": "2025-06-23-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}/projects/{}/branches/{}/endpoints/{}", "2025-06-23-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.branch_name = AAZStrArg(
            options=["--branch-name"],
            help="The name of the Branch",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.endpoint_name = AAZStrArg(
            options=["-n", "--name", "--endpoint-name"],
            help="The name of the Endpoint",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Name of the Neon Organizations resource",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.project_name = AAZStrArg(
            options=["--project-name"],
            help="The name of the Project",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.attributes = AAZListArg(
            options=["--attributes"],
            arg_group="Properties",
            help="Additional attributes for the entity",
        )
        _args_schema.branch_id = AAZStrArg(
            options=["--branch-id"],
            arg_group="Properties",
            help="The ID of the branch this endpoint belongs to",
        )
        _args_schema.compute_name = AAZStrArg(
            options=["--compute-name"],
            arg_group="Properties",
            help="Name of the compute endpoint",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.endpoint_id = AAZStrArg(
            options=["--endpoint-id"],
            arg_group="Properties",
            help="Unique identifier for the compute endpoint",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9-]{1,60}$",
            ),
        )
        _args_schema.endpoint_type = AAZStrArg(
            options=["--endpoint-type"],
            arg_group="Properties",
            help="The type of the endpoint",
            enum={"read_only": "read_only", "read_write": "read_write"},
        )
        _args_schema.entity_name = AAZStrArg(
            options=["--entity-name"],
            arg_group="Properties",
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.project_id = AAZStrArg(
            options=["--project-id"],
            arg_group="Properties",
            help="The ID of the project this endpoint belongs to",
        )
        _args_schema.size = AAZObjectArg(
            options=["--size"],
            arg_group="Properties",
            help="The compute units size range for autoscaling (MinCU-MaxCU)",
        )

        attributes = cls._args_schema.attributes
        attributes.Element = AAZObjectArg()

        _element = cls._args_schema.attributes.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the attribute",
            required=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Value of the attribute",
            required=True,
        )

        size = cls._args_schema.size
        size.autoscaling_limit_max_cu = AAZFloatArg(
            options=["autoscaling-limit-max-cu"],
            help="The maximum compute units for autoscaling",
            required=True,
        )
        size.autoscaling_limit_min_cu = AAZFloatArg(
            options=["autoscaling-limit-min-cu"],
            help="The minimum compute units for autoscaling",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.EndpointsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EndpointsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}/projects/{projectName}/branches/{branchName}/endpoints/{endpointName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "branchName", self.ctx.args.branch_id if self.ctx.args.branch_id else self.ctx.args.branch_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "endpointName", self.ctx.args.endpoint_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_id if self.ctx.args.project_id else self.ctx.args.project_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-06-23-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("attributes", AAZListType, ".attributes")
                properties.set_prop("branchId", AAZStrType, ".branch_id")
                properties.set_prop("computeName", AAZStrType, ".compute_name")
                properties.set_prop("endpointId", AAZStrType, ".endpoint_id")
                properties.set_prop("endpointType", AAZStrType, ".endpoint_type")
                properties.set_prop("entityName", AAZStrType, ".entity_name")
                properties.set_prop("projectId", AAZStrType, ".project_id")
                properties.set_prop("size", AAZObjectType, ".size")

            attributes = _builder.get(".properties.attributes")
            if attributes is not None:
                attributes.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.attributes[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

            size = _builder.get(".properties.size")
            if size is not None:
                size.set_prop("autoscalingLimitMaxCu", AAZFloatType, ".autoscaling_limit_max_cu", typ_kwargs={"flags": {"required": True}})
                size.set_prop("autoscalingLimitMinCu", AAZFloatType, ".autoscaling_limit_min_cu", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.attributes = AAZListType()
            properties.branch_id = AAZStrType(
                serialized_name="branchId",
            )
            properties.compute_name = AAZStrType(
                serialized_name="computeName",
            )
            properties.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            properties.endpoint_id = AAZStrType(
                serialized_name="endpointId",
            )
            properties.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            properties.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            properties.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            properties.last_active = AAZStrType(
                serialized_name="lastActive",
                flags={"read_only": True},
            )
            properties.project_id = AAZStrType(
                serialized_name="projectId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.size = AAZObjectType()
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            attributes = cls._schema_on_200_201.properties.attributes
            attributes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.attributes.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.value = AAZStrType(
                flags={"required": True},
            )

            size = cls._schema_on_200_201.properties.size
            size.autoscaling_limit_max_cu = AAZFloatType(
                serialized_name="autoscalingLimitMaxCu",
                flags={"required": True},
            )
            size.autoscaling_limit_min_cu = AAZFloatType(
                serialized_name="autoscalingLimitMinCu",
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
