# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres organization create",
)
class Create(AAZCommand):
    """Create a Neon Postgres organization

    :example: Create Neon Postgres Organization
        az az neon postgres organization create --resource-group sralluri_rg --name Org-cli-test --location "Central US EUAP" --subscription 68a546de-5736-48e8-a69a-5cc636794112 --marketplace-details "{subscription-id:329b25d9-168d-48d5-de4b-28b2324db159,subscription-status:Pending-fullfilment,offer-details:{publisher-id:neon1722366567200,offer-id:neon_serverless_postgres_azure_prod,plan-id:neon_serverless_postgres_azure_prod_free,plan-name:'Free Plan',term-unit:P1M,term-id:gmz7xq9ge3py}}" --user-details "{first-name:User,last-name:Conotoso,email-address:contoso@outlook.com,upn:contoso@outlook.com,phone-number:''}" --company-details "{company-name:'',country:'',business-phone:''}" --partner-organization-properties "{organization-name:Org-cli-test}" --project-properties "{region:'Central US EUAP',pgVersion:17,branch:{branch-name:main,database-name:neondb,role-name:owner_role},project-name:Org-cli-test-project}"
        az neon postgres create --resource-group sralluri_rg --name Org-cli-test --location "Central US EUAP" --subscription 68a546de-5736-48e8-a69a-5cc636794112 --marketplace-details "{subscription-id:329b25d9-168d-48d5-de4b-28b2324db159,subscription-status:Pending-fullfilment,offer-details:{publisher-id:neon1722366567200,offer-id:neon_serverless_postgres_azure_prod,plan-id:neon_serverless_postgres_azure_prod_free,plan-name:'Free Plan',term-unit:P1M,term-id:gmz7xq9ge3py}}" --user-details "{first-name:User,last-name:Conotoso,email-address:contoso@outlook.com,upn:contoso@outlook.com,phone-number:''}" --company-details "{company-name:'',country:'',business-phone:''}" --partner-organization-properties "{organization-name:Org-cli-test}" --project-properties "{region:'Central US EUAP',pgVersion:17,branch:{branch-name:main,database-name:neondb,role-name:owner_role},project-name:Org-cli-test-project}"
    """

    _aaz_info = {
        "version": "2025-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}", "2025-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the Neon organization",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the Azure resource group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.company_details = AAZObjectArg(
            options=["--company-details"],
            arg_group="Properties",
            help="Details of the company.",
        )
        _args_schema.marketplace_details = AAZObjectArg(
            options=["--marketplace-details"],
            arg_group="Properties",
            help="Marketplace details of the resource.",
        )
        _args_schema.partner_organization_properties = AAZObjectArg(
            options=["--partner-org-props", "--partner-organization-properties"],
            arg_group="Properties",
            help="Organization properties",
        )
        _args_schema.project_properties = AAZObjectArg(
            options=["--project-props", "--project-properties"],
            arg_group="Properties",
            help="Neon Project Properties",
        )
        _args_schema.user_details = AAZObjectArg(
            options=["--user-details"],
            arg_group="Properties",
            help="Details of the user.",
        )

        company_details = cls._args_schema.company_details
        company_details.business_phone = AAZStrArg(
            options=["business-phone"],
            help="Business phone number of the company",
        )
        company_details.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name",
        )
        company_details.country = AAZStrArg(
            options=["country"],
            help="Country name of the company",
        )
        company_details.domain = AAZStrArg(
            options=["domain"],
            help="Domain of the user",
        )
        company_details.number_of_employees = AAZIntArg(
            options=["number-of-employees"],
            help="Number of employees in the company",
        )
        company_details.office_address = AAZStrArg(
            options=["office-address"],
            help="Office address of the company",
        )

        marketplace_details = cls._args_schema.marketplace_details
        marketplace_details.offer_details = AAZObjectArg(
            options=["offer-details"],
            help="Offer details for the marketplace that is selected by the user",
            required=True,
        )
        marketplace_details.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="SaaS subscription id for the the marketplace offer",
        )
        marketplace_details.subscription_status = AAZStrArg(
            options=["subscription-status"],
            help="Marketplace subscription status",
            default="PendingFulfillmentStart",
            enum={"PendingFulfillmentStart": "PendingFulfillmentStart", "Subscribed": "Subscribed", "Suspended": "Suspended", "Unsubscribed": "Unsubscribed"},
        )

        offer_details = cls._args_schema.marketplace_details.offer_details
        offer_details.offer_id = AAZStrArg(
            options=["offer-id"],
            help="Offer Id for the marketplace offer",
            required=True,
            default="neon_serverless_postgres_azure_prod",
        )
        offer_details.plan_id = AAZStrArg(
            options=["plan-id"],
            help="Plan Id for the marketplace offer",
            required=True,
            default="neon_serverless_postgres_azure_prod_free",
        )
        offer_details.plan_name = AAZStrArg(
            options=["plan-name"],
            help="Plan Name for the marketplace offer",
            default="Free Plan",
        )
        offer_details.publisher_id = AAZStrArg(
            options=["publisher-id"],
            help="Publisher Id for the marketplace offer",
            required=True,
            default="neon1722366567200",
        )
        offer_details.term_id = AAZStrArg(
            options=["term-id"],
            help="Term Id for the marketplace offer",
            default="gmz7xq9ge3py",
        )
        offer_details.term_unit = AAZStrArg(
            options=["term-unit"],
            help="Term Name for the marketplace offer",
            default="P1M",
        )

        partner_organization_properties = cls._args_schema.partner_organization_properties
        partner_organization_properties.organization_id = AAZStrArg(
            options=["organization-id"],
            help="Organization Id in partner's system",
        )
        partner_organization_properties.organization_name = AAZStrArg(
            options=["organization-name"],
            help="Organization name in Neon Partner Console",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
                max_length=50,
                min_length=1,
            ),
        )
        partner_organization_properties.single_sign_on_properties = AAZObjectArg(
            options=["single-sign-on-properties"],
            help="Single Sign On properties for the organization",
        )

        single_sign_on_properties = cls._args_schema.partner_organization_properties.single_sign_on_properties
        single_sign_on_properties.aad_domains = AAZListArg(
            options=["aad-domains"],
            help="List of AAD domains fetched from Microsoft Graph for user.",
        )
        single_sign_on_properties.enterprise_app_id = AAZStrArg(
            options=["enterprise-app-id"],
            help="AAD enterprise application Id used to setup SSO",
        )
        single_sign_on_properties.single_sign_on_state = AAZStrArg(
            options=["single-sign-on-state"],
            help="State of the Single Sign On for the organization",
            enum={"Disable": "Disable", "Enable": "Enable", "Initial": "Initial"},
        )
        single_sign_on_properties.single_sign_on_url = AAZStrArg(
            options=["single-sign-on-url"],
            help="URL for SSO to be used by the partner to redirect the user to their system",
        )

        aad_domains = cls._args_schema.partner_organization_properties.single_sign_on_properties.aad_domains
        aad_domains.Element = AAZStrArg()

        project_properties = cls._args_schema.project_properties
        project_properties.branch = AAZObjectArg(
            options=["branch"],
            help="The Branch properties of the project. This is optional",
        )
        project_properties.project_name = AAZStrArg(
            options=["project-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        project_properties.pg_version = AAZIntArg(
            options=["pg-version"],
            help="Postgres version for the project",
            default=17,
        )
        project_properties.region = AAZStrArg(
            options=["region"],
            help="Region where the project is created",
        )

        branch = cls._args_schema.project_properties.branch
        branch.database_name = AAZStrArg(
            options=["database-name"],
            help="Database name associated with the branch",
            default="neondb",
        )
        branch.branch_name = AAZStrArg(
            options=["branch-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        branch.role_name = AAZStrArg(
            options=["role-name"],
            help="Role name associated with the branch",
            default="Owner_role",
        )

        user_details = cls._args_schema.user_details
        user_details.email_address = AAZStrArg(
            options=["email-address"],
            help="Email address of the user",
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$",
            ),
        )
        user_details.first_name = AAZStrArg(
            options=["first-name"],
            help="First name of the user",
        )
        user_details.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name of the user",
        )
        user_details.phone_number = AAZStrArg(
            options=["phone-number"],
            help="User's phone number",
        )
        user_details.upn = AAZStrArg(
            options=["upn"],
            help="User's principal name",
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_models_attributes_create = None

    @classmethod
    def _build_args_models_attributes_create(cls, _schema):
        if cls._args_models_attributes_create is not None:
            _schema.name = cls._args_models_attributes_create.name
            _schema.value = cls._args_models_attributes_create.value
            return

        cls._args_models_attributes_create = AAZObjectArg()

        models_attributes_create = cls._args_models_attributes_create
        models_attributes_create.name = AAZStrArg(
            options=["name"],
            help="Name of the attribute",
            required=True,
        )
        models_attributes_create.value = AAZStrArg(
            options=["value"],
            help="Value of the attribute",
            required=True,
        )

        _schema.name = cls._args_models_attributes_create.name
        _schema.value = cls._args_models_attributes_create.value

    _args_models_endpoint_properties_create = None

    @classmethod
    def _build_args_models_endpoint_properties_create(cls, _schema):
        if cls._args_models_endpoint_properties_create is not None:
            _schema.attributes = cls._args_models_endpoint_properties_create.attributes
            _schema.branch_id = cls._args_models_endpoint_properties_create.branch_id
            _schema.endpoint_type = cls._args_models_endpoint_properties_create.endpoint_type
            _schema.entity_name = cls._args_models_endpoint_properties_create.entity_name
            _schema.project_id = cls._args_models_endpoint_properties_create.project_id
            return

        cls._args_models_endpoint_properties_create = AAZObjectArg()

        models_endpoint_properties_create = cls._args_models_endpoint_properties_create
        models_endpoint_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_endpoint_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this endpoint belongs to",
        )
        models_endpoint_properties_create.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            help="The type of the endpoint",
            enum={"read_only": "read_only", "read_write": "read_write"},
        )
        models_endpoint_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_endpoint_properties_create.project_id = AAZStrArg(
            options=["project-id"],
            help="The ID of the project this endpoint belongs to",
        )

        attributes = cls._args_models_endpoint_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        _schema.attributes = cls._args_models_endpoint_properties_create.attributes
        _schema.branch_id = cls._args_models_endpoint_properties_create.branch_id
        _schema.endpoint_type = cls._args_models_endpoint_properties_create.endpoint_type
        _schema.entity_name = cls._args_models_endpoint_properties_create.entity_name
        _schema.project_id = cls._args_models_endpoint_properties_create.project_id

    _args_models_neon_database_properties_create = None

    @classmethod
    def _build_args_models_neon_database_properties_create(cls, _schema):
        if cls._args_models_neon_database_properties_create is not None:
            _schema.attributes = cls._args_models_neon_database_properties_create.attributes
            _schema.branch_id = cls._args_models_neon_database_properties_create.branch_id
            _schema.entity_name = cls._args_models_neon_database_properties_create.entity_name
            _schema.owner_name = cls._args_models_neon_database_properties_create.owner_name
            return

        cls._args_models_neon_database_properties_create = AAZObjectArg()

        models_neon_database_properties_create = cls._args_models_neon_database_properties_create
        models_neon_database_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_neon_database_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this database belongs to",
        )
        models_neon_database_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_database_properties_create.owner_name = AAZStrArg(
            options=["owner-name"],
            help="The name of the role that owns the database",
        )

        attributes = cls._args_models_neon_database_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        _schema.attributes = cls._args_models_neon_database_properties_create.attributes
        _schema.branch_id = cls._args_models_neon_database_properties_create.branch_id
        _schema.entity_name = cls._args_models_neon_database_properties_create.entity_name
        _schema.owner_name = cls._args_models_neon_database_properties_create.owner_name

    _args_models_neon_role_properties_create = None

    @classmethod
    def _build_args_models_neon_role_properties_create(cls, _schema):
        if cls._args_models_neon_role_properties_create is not None:
            _schema.attributes = cls._args_models_neon_role_properties_create.attributes
            _schema.branch_id = cls._args_models_neon_role_properties_create.branch_id
            _schema.entity_name = cls._args_models_neon_role_properties_create.entity_name
            _schema.is_super_user = cls._args_models_neon_role_properties_create.is_super_user
            _schema.permissions = cls._args_models_neon_role_properties_create.permissions
            return

        cls._args_models_neon_role_properties_create = AAZObjectArg()

        models_neon_role_properties_create = cls._args_models_neon_role_properties_create
        models_neon_role_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_neon_role_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this role belongs to",
        )
        models_neon_role_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_role_properties_create.is_super_user = AAZBoolArg(
            options=["is-super-user"],
            help="Indicates whether the role has superuser privileges",
        )
        models_neon_role_properties_create.permissions = AAZListArg(
            options=["permissions"],
            help="Permissions assigned to the role",
        )

        attributes = cls._args_models_neon_role_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        permissions = cls._args_models_neon_role_properties_create.permissions
        permissions.Element = AAZStrArg()

        _schema.attributes = cls._args_models_neon_role_properties_create.attributes
        _schema.branch_id = cls._args_models_neon_role_properties_create.branch_id
        _schema.entity_name = cls._args_models_neon_role_properties_create.entity_name
        _schema.is_super_user = cls._args_models_neon_role_properties_create.is_super_user
        _schema.permissions = cls._args_models_neon_role_properties_create.permissions

    def _execute_operations(self):
        self.pre_operations()
        yield self.OrganizationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class OrganizationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("companyDetails", AAZObjectType, ".company_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("marketplaceDetails", AAZObjectType, ".marketplace_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("partnerOrganizationProperties", AAZObjectType, ".partner_organization_properties")
                properties.set_prop("projectProperties", AAZObjectType, ".project_properties")
                properties.set_prop("userDetails", AAZObjectType, ".user_details", typ_kwargs={"flags": {"required": True}})

            company_details = _builder.get(".properties.companyDetails")
            if company_details is not None:
                company_details.set_prop("businessPhone", AAZStrType, ".business_phone")
                company_details.set_prop("companyName", AAZStrType, ".company_name")
                company_details.set_prop("country", AAZStrType, ".country")
                company_details.set_prop("domain", AAZStrType, ".domain")
                company_details.set_prop("numberOfEmployees", AAZIntType, ".number_of_employees")
                company_details.set_prop("officeAddress", AAZStrType, ".office_address")

            marketplace_details = _builder.get(".properties.marketplaceDetails")
            if marketplace_details is not None:
                marketplace_details.set_prop("offerDetails", AAZObjectType, ".offer_details", typ_kwargs={"flags": {"required": True}})
                marketplace_details.set_prop("subscriptionId", AAZStrType, ".subscription_id")
                marketplace_details.set_prop("subscriptionStatus", AAZStrType, ".subscription_status")

            offer_details = _builder.get(".properties.marketplaceDetails.offerDetails")
            if offer_details is not None:
                offer_details.set_prop("offerId", AAZStrType, ".offer_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planId", AAZStrType, ".plan_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planName", AAZStrType, ".plan_name")
                offer_details.set_prop("publisherId", AAZStrType, ".publisher_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("termId", AAZStrType, ".term_id")
                offer_details.set_prop("termUnit", AAZStrType, ".term_unit")

            partner_organization_properties = _builder.get(".properties.partnerOrganizationProperties")
            if partner_organization_properties is not None:
                partner_organization_properties.set_prop("organizationId", AAZStrType, ".organization_id")
                partner_organization_properties.set_prop("organizationName", AAZStrType, ".organization_name", typ_kwargs={"flags": {"required": True}})
                partner_organization_properties.set_prop("singleSignOnProperties", AAZObjectType, ".single_sign_on_properties")

            single_sign_on_properties = _builder.get(".properties.partnerOrganizationProperties.singleSignOnProperties")
            if single_sign_on_properties is not None:
                single_sign_on_properties.set_prop("aadDomains", AAZListType, ".aad_domains")
                single_sign_on_properties.set_prop("enterpriseAppId", AAZStrType, ".enterprise_app_id")
                single_sign_on_properties.set_prop("singleSignOnState", AAZStrType, ".single_sign_on_state")
                single_sign_on_properties.set_prop("singleSignOnUrl", AAZStrType, ".single_sign_on_url")

            aad_domains = _builder.get(".properties.partnerOrganizationProperties.singleSignOnProperties.aadDomains")
            if aad_domains is not None:
                aad_domains.set_elements(AAZStrType, ".")

            project_properties = _builder.get(".properties.projectProperties")
            if project_properties is not None:
                project_properties.set_prop("branch", AAZObjectType, ".branch")
                project_properties.set_prop("entityName", AAZStrType, ".project_name")
                project_properties.set_prop("pgVersion", AAZIntType, ".pg_version")
                project_properties.set_prop("regionId", AAZStrType, ".region")

            branch = _builder.get(".properties.projectProperties.branch")
            if branch is not None:
                branch.set_prop("databaseName", AAZStrType, ".database_name")
                branch.set_prop("entityName", AAZStrType, ".branch_name")
                branch.set_prop("roleName", AAZStrType, ".role_name")

            user_details = _builder.get(".properties.userDetails")
            if user_details is not None:
                user_details.set_prop("emailAddress", AAZStrType, ".email_address")
                user_details.set_prop("firstName", AAZStrType, ".first_name")
                user_details.set_prop("lastName", AAZStrType, ".last_name")
                user_details.set_prop("phoneNumber", AAZStrType, ".phone_number")
                user_details.set_prop("upn", AAZStrType, ".upn")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.company_details = AAZObjectType(
                serialized_name="companyDetails",
                flags={"required": True},
            )
            properties.marketplace_details = AAZObjectType(
                serialized_name="marketplaceDetails",
                flags={"required": True},
            )
            properties.partner_organization_properties = AAZObjectType(
                serialized_name="partnerOrganizationProperties",
            )
            properties.project_properties = AAZObjectType(
                serialized_name="projectProperties",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.user_details = AAZObjectType(
                serialized_name="userDetails",
                flags={"required": True},
            )

            company_details = cls._schema_on_200_201.properties.company_details
            company_details.business_phone = AAZStrType(
                serialized_name="businessPhone",
            )
            company_details.company_name = AAZStrType(
                serialized_name="companyName",
            )
            company_details.country = AAZStrType()
            company_details.domain = AAZStrType()
            company_details.number_of_employees = AAZIntType(
                serialized_name="numberOfEmployees",
            )
            company_details.office_address = AAZStrType(
                serialized_name="officeAddress",
            )

            marketplace_details = cls._schema_on_200_201.properties.marketplace_details
            marketplace_details.offer_details = AAZObjectType(
                serialized_name="offerDetails",
                flags={"required": True},
            )
            marketplace_details.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )
            marketplace_details.subscription_status = AAZStrType(
                serialized_name="subscriptionStatus",
            )

            offer_details = cls._schema_on_200_201.properties.marketplace_details.offer_details
            offer_details.offer_id = AAZStrType(
                serialized_name="offerId",
                flags={"required": True},
            )
            offer_details.plan_id = AAZStrType(
                serialized_name="planId",
                flags={"required": True},
            )
            offer_details.plan_name = AAZStrType(
                serialized_name="planName",
            )
            offer_details.publisher_id = AAZStrType(
                serialized_name="publisherId",
                flags={"required": True},
            )
            offer_details.term_id = AAZStrType(
                serialized_name="termId",
            )
            offer_details.term_unit = AAZStrType(
                serialized_name="termUnit",
            )

            partner_organization_properties = cls._schema_on_200_201.properties.partner_organization_properties
            partner_organization_properties.organization_id = AAZStrType(
                serialized_name="organizationId",
            )
            partner_organization_properties.organization_name = AAZStrType(
                serialized_name="organizationName",
                flags={"required": True},
            )
            partner_organization_properties.single_sign_on_properties = AAZObjectType(
                serialized_name="singleSignOnProperties",
            )

            single_sign_on_properties = cls._schema_on_200_201.properties.partner_organization_properties.single_sign_on_properties
            single_sign_on_properties.aad_domains = AAZListType(
                serialized_name="aadDomains",
            )
            single_sign_on_properties.enterprise_app_id = AAZStrType(
                serialized_name="enterpriseAppId",
            )
            single_sign_on_properties.single_sign_on_state = AAZStrType(
                serialized_name="singleSignOnState",
            )
            single_sign_on_properties.single_sign_on_url = AAZStrType(
                serialized_name="singleSignOnUrl",
            )

            aad_domains = cls._schema_on_200_201.properties.partner_organization_properties.single_sign_on_properties.aad_domains
            aad_domains.Element = AAZStrType()

            project_properties = cls._schema_on_200_201.properties.project_properties
            project_properties.attributes = AAZListType()
            project_properties.branch = AAZObjectType()
            project_properties.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            project_properties.databases = AAZListType()
            project_properties.default_endpoint_settings = AAZObjectType(
                serialized_name="defaultEndpointSettings",
            )
            project_properties.endpoints = AAZListType()
            project_properties.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            project_properties.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            project_properties.history_retention = AAZIntType(
                serialized_name="historyRetention",
            )
            project_properties.pg_version = AAZIntType(
                serialized_name="pgVersion",
            )
            project_properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            project_properties.region_id = AAZStrType(
                serialized_name="regionId",
            )
            project_properties.roles = AAZListType()
            project_properties.storage = AAZIntType()

            attributes = cls._schema_on_200_201.properties.project_properties.attributes
            attributes.Element = AAZObjectType()
            _CreateHelper._build_schema_models_attributes_read(attributes.Element)

            branch = cls._schema_on_200_201.properties.project_properties.branch
            branch.attributes = AAZListType()
            branch.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            branch.database_name = AAZStrType(
                serialized_name="databaseName",
            )
            branch.databases = AAZListType()
            branch.endpoints = AAZListType()
            branch.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            branch.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            branch.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            branch.project_id = AAZStrType(
                serialized_name="projectId",
            )
            branch.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            branch.role_name = AAZStrType(
                serialized_name="roleName",
            )
            branch.roles = AAZListType()

            attributes = cls._schema_on_200_201.properties.project_properties.branch.attributes
            attributes.Element = AAZObjectType()
            _CreateHelper._build_schema_models_attributes_read(attributes.Element)

            databases = cls._schema_on_200_201.properties.project_properties.branch.databases
            databases.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_database_properties_read(databases.Element)

            endpoints = cls._schema_on_200_201.properties.project_properties.branch.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200_201.properties.project_properties.branch.roles
            roles.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_role_properties_read(roles.Element)

            databases = cls._schema_on_200_201.properties.project_properties.databases
            databases.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_database_properties_read(databases.Element)

            default_endpoint_settings = cls._schema_on_200_201.properties.project_properties.default_endpoint_settings
            default_endpoint_settings.autoscaling_limit_max_cu = AAZFloatType(
                serialized_name="autoscalingLimitMaxCu",
                flags={"required": True},
            )
            default_endpoint_settings.autoscaling_limit_min_cu = AAZFloatType(
                serialized_name="autoscalingLimitMinCu",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200_201.properties.project_properties.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200_201.properties.project_properties.roles
            roles.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_role_properties_read(roles.Element)

            user_details = cls._schema_on_200_201.properties.user_details
            user_details.email_address = AAZStrType(
                serialized_name="emailAddress",
            )
            user_details.first_name = AAZStrType(
                serialized_name="firstName",
            )
            user_details.last_name = AAZStrType(
                serialized_name="lastName",
            )
            user_details.phone_number = AAZStrType(
                serialized_name="phoneNumber",
            )
            user_details.upn = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_models_attributes_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_models_endpoint_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("endpointType", AAZStrType, ".endpoint_type")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("projectId", AAZStrType, ".project_id")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_database_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("ownerName", AAZStrType, ".owner_name")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_role_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("isSuperUser", AAZBoolType, ".is_super_user")
        _builder.set_prop("permissions", AAZListType, ".permissions")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

        permissions = _builder.get(".permissions")
        if permissions is not None:
            permissions.set_elements(AAZStrType, ".")

    _schema_models_attributes_read = None

    @classmethod
    def _build_schema_models_attributes_read(cls, _schema):
        if cls._schema_models_attributes_read is not None:
            _schema.name = cls._schema_models_attributes_read.name
            _schema.value = cls._schema_models_attributes_read.value
            return

        cls._schema_models_attributes_read = _schema_models_attributes_read = AAZObjectType()

        models_attributes_read = _schema_models_attributes_read
        models_attributes_read.name = AAZStrType(
            flags={"required": True},
        )
        models_attributes_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_models_attributes_read.name
        _schema.value = cls._schema_models_attributes_read.value

    _schema_models_endpoint_properties_read = None

    @classmethod
    def _build_schema_models_endpoint_properties_read(cls, _schema):
        if cls._schema_models_endpoint_properties_read is not None:
            _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
            _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
            _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
            _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
            _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
            _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
            _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
            _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state
            return

        cls._schema_models_endpoint_properties_read = _schema_models_endpoint_properties_read = AAZObjectType()

        models_endpoint_properties_read = _schema_models_endpoint_properties_read
        models_endpoint_properties_read.attributes = AAZListType()
        models_endpoint_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_endpoint_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        models_endpoint_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_endpoint_properties_read.project_id = AAZStrType(
            serialized_name="projectId",
        )
        models_endpoint_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_endpoint_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
        _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
        _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
        _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
        _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
        _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
        _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
        _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state

    _schema_models_neon_database_properties_read = None

    @classmethod
    def _build_schema_models_neon_database_properties_read(cls, _schema):
        if cls._schema_models_neon_database_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
            _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
            _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state
            return

        cls._schema_models_neon_database_properties_read = _schema_models_neon_database_properties_read = AAZObjectType()

        models_neon_database_properties_read = _schema_models_neon_database_properties_read
        models_neon_database_properties_read.attributes = AAZListType()
        models_neon_database_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_database_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_database_properties_read.owner_name = AAZStrType(
            serialized_name="ownerName",
        )
        models_neon_database_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_database_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
        _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
        _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state

    _schema_models_neon_role_properties_read = None

    @classmethod
    def _build_schema_models_neon_role_properties_read(cls, _schema):
        if cls._schema_models_neon_role_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
            _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
            _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
            _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state
            return

        cls._schema_models_neon_role_properties_read = _schema_models_neon_role_properties_read = AAZObjectType()

        models_neon_role_properties_read = _schema_models_neon_role_properties_read
        models_neon_role_properties_read.attributes = AAZListType()
        models_neon_role_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_role_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_role_properties_read.is_super_user = AAZBoolType(
            serialized_name="isSuperUser",
        )
        models_neon_role_properties_read.permissions = AAZListType()
        models_neon_role_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_role_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        permissions = _schema_models_neon_role_properties_read.permissions
        permissions.Element = AAZStrType()

        _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
        _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
        _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
        _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state


__all__ = ["Create"]
