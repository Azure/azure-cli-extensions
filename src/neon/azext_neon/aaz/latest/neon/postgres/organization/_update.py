# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres organization update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a Neon Resource

    :example: Organization_Update
        az az neon postgres organization update --resource-group demoResourceGroup --name demoNeonResource --user-details "{first-name:John,last-name:Doe,email-address:johndoe@example.com,upn:johndoe,phone-number:+1234567890}" --company-details "{company-name:DemoCompany,country:USA,office-address:'123 Azure Ave, Redmond, WA',business-phone:+9876543210,domain:democompany.com,number-of-employees:1000}" --partner-organization-properties "{organization-id:org-5678,org-name:PartnerOrg,single-sign-on-properties:{single-sign-on-state:Enable,enterprise-app-id:app-9876,single-sign-on-url:'https://sso.partnerorg.com',aad-domains:['partnerorg.com']}}" --tags "{environment:production}"
    """

    _aaz_info = {
        "version": "2024-08-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}", "2024-08-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the Neon resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the Resource Group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.company_details = AAZObjectArg(
            options=["--company-details"],
            arg_group="Properties",
            help="Details of the company.",
        )
        _args_schema.partner_organization_properties = AAZObjectArg(
            options=["--partner-org-props", "--partner-organization-properties"],
            arg_group="Properties",
            help="Organization properties",
            nullable=True,
        )
        _args_schema.user_details = AAZObjectArg(
            options=["--user-details"],
            arg_group="Properties",
            help="Details of the user.",
        )

        company_details = cls._args_schema.company_details
        company_details.business_phone = AAZStrArg(
            options=["business-phone"],
            help="Business phone number of the company",
            nullable=True,
        )
        company_details.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name",
            nullable=True,
        )
        company_details.country = AAZStrArg(
            options=["country"],
            help="Country name of the company",
            nullable=True,
        )
        company_details.domain = AAZStrArg(
            options=["domain"],
            help="Domain of the user",
            nullable=True,
        )
        company_details.number_of_employees = AAZIntArg(
            options=["number-of-employees"],
            help="Number of employees in the company",
            nullable=True,
        )
        company_details.office_address = AAZStrArg(
            options=["office-address"],
            help="Office address of the company",
            nullable=True,
        )

        partner_organization_properties = cls._args_schema.partner_organization_properties
        partner_organization_properties.organization_id = AAZStrArg(
            options=["organization-id"],
            help="Organization Id in partner's system",
            nullable=True,
        )
        partner_organization_properties.org_name = AAZStrArg(
            options=["org-name"],
            help="Organization name in partner's system",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        partner_organization_properties.single_sign_on_properties = AAZObjectArg(
            options=["single-sign-on-properties"],
            help="Single Sign On properties for the organization",
            nullable=True,
        )

        single_sign_on_properties = cls._args_schema.partner_organization_properties.single_sign_on_properties
        single_sign_on_properties.aad_domains = AAZListArg(
            options=["aad-domains"],
            help="List of AAD domains fetched from Microsoft Graph for user.",
            nullable=True,
        )
        single_sign_on_properties.enterprise_app_id = AAZStrArg(
            options=["enterprise-app-id"],
            help="AAD enterprise application Id used to setup SSO",
            nullable=True,
        )
        single_sign_on_properties.single_sign_on_state = AAZStrArg(
            options=["single-sign-on-state"],
            help="State of the Single Sign On for the organization",
            nullable=True,
            enum={"Disable": "Disable", "Enable": "Enable", "Initial": "Initial"},
        )
        single_sign_on_properties.single_sign_on_url = AAZStrArg(
            options=["single-sign-on-url"],
            help="URL for SSO to be used by the partner to redirect the user to their system",
            nullable=True,
        )

        aad_domains = cls._args_schema.partner_organization_properties.single_sign_on_properties.aad_domains
        aad_domains.Element = AAZStrArg(
            nullable=True,
        )

        user_details = cls._args_schema.user_details
        user_details.email_address = AAZStrArg(
            options=["email-address"],
            help="Email address of the user",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$",
            ),
        )
        user_details.first_name = AAZStrArg(
            options=["first-name"],
            help="First name of the user",
            nullable=True,
        )
        user_details.last_name = AAZStrArg(
            options=["last-name"],
            help="Last name of the user",
            nullable=True,
        )
        user_details.phone_number = AAZStrArg(
            options=["phone-number"],
            help="User's phone number",
            nullable=True,
        )
        user_details.upn = AAZStrArg(
            options=["upn"],
            help="User's principal name",
            nullable=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.OrganizationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_organization_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class OrganizationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_organization_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("companyDetails", AAZObjectType, ".company_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("partnerOrganizationProperties", AAZObjectType, ".partner_organization_properties")
                properties.set_prop("userDetails", AAZObjectType, ".user_details", typ_kwargs={"flags": {"required": True}})

            company_details = _builder.get(".properties.companyDetails")
            if company_details is not None:
                company_details.set_prop("businessPhone", AAZStrType, ".business_phone")
                company_details.set_prop("companyName", AAZStrType, ".company_name")
                company_details.set_prop("country", AAZStrType, ".country")
                company_details.set_prop("domain", AAZStrType, ".domain")
                company_details.set_prop("numberOfEmployees", AAZIntType, ".number_of_employees")
                company_details.set_prop("officeAddress", AAZStrType, ".office_address")

            partner_organization_properties = _builder.get(".properties.partnerOrganizationProperties")
            if partner_organization_properties is not None:
                partner_organization_properties.set_prop("organizationId", AAZStrType, ".organization_id")
                partner_organization_properties.set_prop("organizationName", AAZStrType, ".org_name", typ_kwargs={"flags": {"required": True}})
                partner_organization_properties.set_prop("singleSignOnProperties", AAZObjectType, ".single_sign_on_properties")

            single_sign_on_properties = _builder.get(".properties.partnerOrganizationProperties.singleSignOnProperties")
            if single_sign_on_properties is not None:
                single_sign_on_properties.set_prop("aadDomains", AAZListType, ".aad_domains")
                single_sign_on_properties.set_prop("enterpriseAppId", AAZStrType, ".enterprise_app_id")
                single_sign_on_properties.set_prop("singleSignOnState", AAZStrType, ".single_sign_on_state")
                single_sign_on_properties.set_prop("singleSignOnUrl", AAZStrType, ".single_sign_on_url")

            aad_domains = _builder.get(".properties.partnerOrganizationProperties.singleSignOnProperties.aadDomains")
            if aad_domains is not None:
                aad_domains.set_elements(AAZStrType, ".")

            user_details = _builder.get(".properties.userDetails")
            if user_details is not None:
                user_details.set_prop("emailAddress", AAZStrType, ".email_address")
                user_details.set_prop("firstName", AAZStrType, ".first_name")
                user_details.set_prop("lastName", AAZStrType, ".last_name")
                user_details.set_prop("phoneNumber", AAZStrType, ".phone_number")
                user_details.set_prop("upn", AAZStrType, ".upn")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_organization_resource_read = None

    @classmethod
    def _build_schema_organization_resource_read(cls, _schema):
        if cls._schema_organization_resource_read is not None:
            _schema.id = cls._schema_organization_resource_read.id
            _schema.location = cls._schema_organization_resource_read.location
            _schema.name = cls._schema_organization_resource_read.name
            _schema.properties = cls._schema_organization_resource_read.properties
            _schema.system_data = cls._schema_organization_resource_read.system_data
            _schema.tags = cls._schema_organization_resource_read.tags
            _schema.type = cls._schema_organization_resource_read.type
            return

        cls._schema_organization_resource_read = _schema_organization_resource_read = AAZObjectType()

        organization_resource_read = _schema_organization_resource_read
        organization_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        organization_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        organization_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        organization_resource_read.properties = AAZObjectType()
        organization_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        organization_resource_read.tags = AAZDictType()
        organization_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_organization_resource_read.properties
        properties.company_details = AAZObjectType(
            serialized_name="companyDetails",
            flags={"required": True},
        )
        properties.marketplace_details = AAZObjectType(
            serialized_name="marketplaceDetails",
            flags={"required": True},
        )
        properties.partner_organization_properties = AAZObjectType(
            serialized_name="partnerOrganizationProperties",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.user_details = AAZObjectType(
            serialized_name="userDetails",
            flags={"required": True},
        )

        company_details = _schema_organization_resource_read.properties.company_details
        company_details.business_phone = AAZStrType(
            serialized_name="businessPhone",
        )
        company_details.company_name = AAZStrType(
            serialized_name="companyName",
        )
        company_details.country = AAZStrType()
        company_details.domain = AAZStrType()
        company_details.number_of_employees = AAZIntType(
            serialized_name="numberOfEmployees",
        )
        company_details.office_address = AAZStrType(
            serialized_name="officeAddress",
        )

        marketplace_details = _schema_organization_resource_read.properties.marketplace_details
        marketplace_details.offer_details = AAZObjectType(
            serialized_name="offerDetails",
            flags={"required": True},
        )
        marketplace_details.subscription_id = AAZStrType(
            serialized_name="subscriptionId",
        )
        marketplace_details.subscription_status = AAZStrType(
            serialized_name="subscriptionStatus",
        )

        offer_details = _schema_organization_resource_read.properties.marketplace_details.offer_details
        offer_details.offer_id = AAZStrType(
            serialized_name="offerId",
            flags={"required": True},
        )
        offer_details.plan_id = AAZStrType(
            serialized_name="planId",
            flags={"required": True},
        )
        offer_details.plan_name = AAZStrType(
            serialized_name="planName",
        )
        offer_details.publisher_id = AAZStrType(
            serialized_name="publisherId",
            flags={"required": True},
        )
        offer_details.term_id = AAZStrType(
            serialized_name="termId",
        )
        offer_details.term_unit = AAZStrType(
            serialized_name="termUnit",
        )

        partner_organization_properties = _schema_organization_resource_read.properties.partner_organization_properties
        partner_organization_properties.organization_id = AAZStrType(
            serialized_name="organizationId",
        )
        partner_organization_properties.organization_name = AAZStrType(
            serialized_name="organizationName",
            flags={"required": True},
        )
        partner_organization_properties.single_sign_on_properties = AAZObjectType(
            serialized_name="singleSignOnProperties",
        )

        single_sign_on_properties = _schema_organization_resource_read.properties.partner_organization_properties.single_sign_on_properties
        single_sign_on_properties.aad_domains = AAZListType(
            serialized_name="aadDomains",
        )
        single_sign_on_properties.enterprise_app_id = AAZStrType(
            serialized_name="enterpriseAppId",
        )
        single_sign_on_properties.single_sign_on_state = AAZStrType(
            serialized_name="singleSignOnState",
        )
        single_sign_on_properties.single_sign_on_url = AAZStrType(
            serialized_name="singleSignOnUrl",
        )

        aad_domains = _schema_organization_resource_read.properties.partner_organization_properties.single_sign_on_properties.aad_domains
        aad_domains.Element = AAZStrType()

        user_details = _schema_organization_resource_read.properties.user_details
        user_details.email_address = AAZStrType(
            serialized_name="emailAddress",
        )
        user_details.first_name = AAZStrType(
            serialized_name="firstName",
        )
        user_details.last_name = AAZStrType(
            serialized_name="lastName",
        )
        user_details.phone_number = AAZStrType(
            serialized_name="phoneNumber",
        )
        user_details.upn = AAZStrType()

        system_data = _schema_organization_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_organization_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_organization_resource_read.id
        _schema.location = cls._schema_organization_resource_read.location
        _schema.name = cls._schema_organization_resource_read.name
        _schema.properties = cls._schema_organization_resource_read.properties
        _schema.system_data = cls._schema_organization_resource_read.system_data
        _schema.tags = cls._schema_organization_resource_read.tags
        _schema.type = cls._schema_organization_resource_read.type


__all__ = ["Update"]
