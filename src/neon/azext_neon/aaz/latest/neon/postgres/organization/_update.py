# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres organization update",
)
class Update(AAZCommand):
    """Updates a Neon Postgres organization

    :example: Update Neon Postgres Organization
        az neon postgres create --resource-group demoResourceGroup --name demoNeonResource --location eastus2 --subscription 12345678-1234-1234-1234-123456789abc --marketplace-details "{subscription-id:abcd1234-5678-90ab-cdef-12345678abcd,subscription-status:Subscribed,offer-details:{publisher-id:neon1722366567200,offer-id:neon_serverless_postgres_azure_prod,plan-id:neon_serverless_postgres_azure_prod_scale,plan-name:Scale Plan,term-unit:P1M,term-id:gmz7xq9ge3py}}"  --company-details "{}" --partner-organization-properties "{}"
    """

    _aaz_info = {
        "version": "2025-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}", "2025-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="Name of the Neon organization",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the Azure resource group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.company_details = AAZObjectArg(
            options=["--company-details"],
            arg_group="Properties",
            help="Details of the company.",
        )
        _args_schema.marketplace_details = AAZObjectArg(
            options=["--marketplace-details"],
            arg_group="Properties",
            help="Marketplace details of the resource.",
        )

        company_details = cls._args_schema.company_details
        company_details.business_phone = AAZStrArg(
            options=["business-phone"],
            help="Business phone number of the company",
            nullable=True,
        )
        company_details.company_name = AAZStrArg(
            options=["company-name"],
            help="Company name",
            nullable=True,
        )
        company_details.country = AAZStrArg(
            options=["country"],
            help="Country name of the company",
            nullable=True,
        )
        company_details.domain = AAZStrArg(
            options=["domain"],
            help="Domain of the user",
            nullable=True,
        )
        company_details.number_of_employees = AAZIntArg(
            options=["number-of-employees"],
            help="Number of employees in the company",
            nullable=True,
        )
        company_details.office_address = AAZStrArg(
            options=["office-address"],
            help="Office address of the company",
            nullable=True,
        )

        marketplace_details = cls._args_schema.marketplace_details
        marketplace_details.offer_details = AAZObjectArg(
            options=["offer-details"],
            help="Offer details for the marketplace that is selected by the user",
        )
        marketplace_details.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="SaaS subscription id for the the marketplace offer",
            nullable=True,
        )
        marketplace_details.subscription_status = AAZStrArg(
            options=["subscription-status"],
            help="Marketplace subscription status",
            nullable=True,
            enum={"PendingFulfillmentStart": "PendingFulfillmentStart", "Subscribed": "Subscribed", "Suspended": "Suspended", "Unsubscribed": "Unsubscribed"},
        )

        offer_details = cls._args_schema.marketplace_details.offer_details
        offer_details.offer_id = AAZStrArg(
            options=["offer-id"],
            help="Offer Id for the marketplace offer",
        )
        offer_details.plan_id = AAZStrArg(
            options=["plan-id"],
            help="Plan Id for the marketplace offer",
        )
        offer_details.plan_name = AAZStrArg(
            options=["plan-name"],
            help="Plan Name for the marketplace offer",
            nullable=True,
        )
        offer_details.publisher_id = AAZStrArg(
            options=["publisher-id"],
            help="Publisher Id for the marketplace offer",
        )
        offer_details.term_id = AAZStrArg(
            options=["term-id"],
            help="Term Id for the marketplace offer",
            nullable=True,
        )
        offer_details.term_unit = AAZStrArg(
            options=["term-unit"],
            help="Term Name for the marketplace offer",
            nullable=True,
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )
        return cls._args_schema

    _args_models_attributes_update = None

    @classmethod
    def _build_args_models_attributes_update(cls, _schema):
        if cls._args_models_attributes_update is not None:
            _schema.name = cls._args_models_attributes_update.name
            _schema.value = cls._args_models_attributes_update.value
            return

        cls._args_models_attributes_update = AAZObjectArg(
            nullable=True,
        )

        models_attributes_update = cls._args_models_attributes_update
        models_attributes_update.name = AAZStrArg(
            options=["name"],
            help="Name of the attribute",
        )
        models_attributes_update.value = AAZStrArg(
            options=["value"],
            help="Value of the attribute",
        )

        _schema.name = cls._args_models_attributes_update.name
        _schema.value = cls._args_models_attributes_update.value

    _args_models_endpoint_properties_update = None

    @classmethod
    def _build_args_models_endpoint_properties_update(cls, _schema):
        if cls._args_models_endpoint_properties_update is not None:
            _schema.attributes = cls._args_models_endpoint_properties_update.attributes
            _schema.branch_id = cls._args_models_endpoint_properties_update.branch_id
            _schema.endpoint_type = cls._args_models_endpoint_properties_update.endpoint_type
            _schema.entity_name = cls._args_models_endpoint_properties_update.entity_name
            _schema.project_id = cls._args_models_endpoint_properties_update.project_id
            return

        cls._args_models_endpoint_properties_update = AAZObjectArg(
            nullable=True,
        )

        models_endpoint_properties_update = cls._args_models_endpoint_properties_update
        models_endpoint_properties_update.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
            nullable=True,
        )
        models_endpoint_properties_update.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this endpoint belongs to",
            nullable=True,
        )
        models_endpoint_properties_update.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            help="The type of the endpoint",
            nullable=True,
            enum={"read_only": "read_only", "read_write": "read_write"},
        )
        models_endpoint_properties_update.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_endpoint_properties_update.project_id = AAZStrArg(
            options=["project-id"],
            help="The ID of the project this endpoint belongs to",
            nullable=True,
        )

        attributes = cls._args_models_endpoint_properties_update.attributes
        attributes.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_models_attributes_update(attributes.Element)

        _schema.attributes = cls._args_models_endpoint_properties_update.attributes
        _schema.branch_id = cls._args_models_endpoint_properties_update.branch_id
        _schema.endpoint_type = cls._args_models_endpoint_properties_update.endpoint_type
        _schema.entity_name = cls._args_models_endpoint_properties_update.entity_name
        _schema.project_id = cls._args_models_endpoint_properties_update.project_id

    _args_models_neon_database_properties_update = None

    @classmethod
    def _build_args_models_neon_database_properties_update(cls, _schema):
        if cls._args_models_neon_database_properties_update is not None:
            _schema.attributes = cls._args_models_neon_database_properties_update.attributes
            _schema.branch_id = cls._args_models_neon_database_properties_update.branch_id
            _schema.entity_name = cls._args_models_neon_database_properties_update.entity_name
            _schema.owner_name = cls._args_models_neon_database_properties_update.owner_name
            return

        cls._args_models_neon_database_properties_update = AAZObjectArg(
            nullable=True,
        )

        models_neon_database_properties_update = cls._args_models_neon_database_properties_update
        models_neon_database_properties_update.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
            nullable=True,
        )
        models_neon_database_properties_update.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this database belongs to",
            nullable=True,
        )
        models_neon_database_properties_update.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_database_properties_update.owner_name = AAZStrArg(
            options=["owner-name"],
            help="The name of the role that owns the database",
            nullable=True,
        )

        attributes = cls._args_models_neon_database_properties_update.attributes
        attributes.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_models_attributes_update(attributes.Element)

        _schema.attributes = cls._args_models_neon_database_properties_update.attributes
        _schema.branch_id = cls._args_models_neon_database_properties_update.branch_id
        _schema.entity_name = cls._args_models_neon_database_properties_update.entity_name
        _schema.owner_name = cls._args_models_neon_database_properties_update.owner_name

    _args_models_neon_role_properties_update = None

    @classmethod
    def _build_args_models_neon_role_properties_update(cls, _schema):
        if cls._args_models_neon_role_properties_update is not None:
            _schema.attributes = cls._args_models_neon_role_properties_update.attributes
            _schema.branch_id = cls._args_models_neon_role_properties_update.branch_id
            _schema.entity_name = cls._args_models_neon_role_properties_update.entity_name
            _schema.is_super_user = cls._args_models_neon_role_properties_update.is_super_user
            _schema.permissions = cls._args_models_neon_role_properties_update.permissions
            return

        cls._args_models_neon_role_properties_update = AAZObjectArg(
            nullable=True,
        )

        models_neon_role_properties_update = cls._args_models_neon_role_properties_update
        models_neon_role_properties_update.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
            nullable=True,
        )
        models_neon_role_properties_update.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this role belongs to",
            nullable=True,
        )
        models_neon_role_properties_update.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_role_properties_update.is_super_user = AAZBoolArg(
            options=["is-super-user"],
            help="Indicates whether the role has superuser privileges",
            nullable=True,
        )
        models_neon_role_properties_update.permissions = AAZListArg(
            options=["permissions"],
            help="Permissions assigned to the role",
            nullable=True,
        )

        attributes = cls._args_models_neon_role_properties_update.attributes
        attributes.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_models_attributes_update(attributes.Element)

        permissions = cls._args_models_neon_role_properties_update.permissions
        permissions.Element = AAZStrArg(
            nullable=True,
        )

        _schema.attributes = cls._args_models_neon_role_properties_update.attributes
        _schema.branch_id = cls._args_models_neon_role_properties_update.branch_id
        _schema.entity_name = cls._args_models_neon_role_properties_update.entity_name
        _schema.is_super_user = cls._args_models_neon_role_properties_update.is_super_user
        _schema.permissions = cls._args_models_neon_role_properties_update.permissions

    def _execute_operations(self):
        self.pre_operations()
        self.OrganizationsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.OrganizationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OrganizationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_organization_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class OrganizationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_organization_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("companyDetails", AAZObjectType, ".company_details", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("marketplaceDetails", AAZObjectType, ".marketplace_details", typ_kwargs={"flags": {"required": True}})

            company_details = _builder.get(".properties.companyDetails")
            if company_details is not None:
                company_details.set_prop("businessPhone", AAZStrType, ".business_phone")
                company_details.set_prop("companyName", AAZStrType, ".company_name")
                company_details.set_prop("country", AAZStrType, ".country")
                company_details.set_prop("domain", AAZStrType, ".domain")
                company_details.set_prop("numberOfEmployees", AAZIntType, ".number_of_employees")
                company_details.set_prop("officeAddress", AAZStrType, ".office_address")

            marketplace_details = _builder.get(".properties.marketplaceDetails")
            if marketplace_details is not None:
                marketplace_details.set_prop("offerDetails", AAZObjectType, ".offer_details", typ_kwargs={"flags": {"required": True}})
                marketplace_details.set_prop("subscriptionId", AAZStrType, ".subscription_id")
                marketplace_details.set_prop("subscriptionStatus", AAZStrType, ".subscription_status")

            offer_details = _builder.get(".properties.marketplaceDetails.offerDetails")
            if offer_details is not None:
                offer_details.set_prop("offerId", AAZStrType, ".offer_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planId", AAZStrType, ".plan_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("planName", AAZStrType, ".plan_name")
                offer_details.set_prop("publisherId", AAZStrType, ".publisher_id", typ_kwargs={"flags": {"required": True}})
                offer_details.set_prop("termId", AAZStrType, ".term_id")
                offer_details.set_prop("termUnit", AAZStrType, ".term_unit")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_models_attributes_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_models_endpoint_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("endpointType", AAZStrType, ".endpoint_type")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("projectId", AAZStrType, ".project_id")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_update(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_database_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("ownerName", AAZStrType, ".owner_name")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_update(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_role_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("isSuperUser", AAZBoolType, ".is_super_user")
        _builder.set_prop("permissions", AAZListType, ".permissions")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_update(attributes.set_elements(AAZObjectType, "."))

        permissions = _builder.get(".permissions")
        if permissions is not None:
            permissions.set_elements(AAZStrType, ".")

    _schema_models_attributes_read = None

    @classmethod
    def _build_schema_models_attributes_read(cls, _schema):
        if cls._schema_models_attributes_read is not None:
            _schema.name = cls._schema_models_attributes_read.name
            _schema.value = cls._schema_models_attributes_read.value
            return

        cls._schema_models_attributes_read = _schema_models_attributes_read = AAZObjectType()

        models_attributes_read = _schema_models_attributes_read
        models_attributes_read.name = AAZStrType(
            flags={"required": True},
        )
        models_attributes_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_models_attributes_read.name
        _schema.value = cls._schema_models_attributes_read.value

    _schema_models_endpoint_properties_read = None

    @classmethod
    def _build_schema_models_endpoint_properties_read(cls, _schema):
        if cls._schema_models_endpoint_properties_read is not None:
            _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
            _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
            _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
            _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
            _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
            _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
            _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
            _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state
            return

        cls._schema_models_endpoint_properties_read = _schema_models_endpoint_properties_read = AAZObjectType()

        models_endpoint_properties_read = _schema_models_endpoint_properties_read
        models_endpoint_properties_read.attributes = AAZListType()
        models_endpoint_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_endpoint_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        models_endpoint_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_endpoint_properties_read.project_id = AAZStrType(
            serialized_name="projectId",
        )
        models_endpoint_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_endpoint_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
        _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
        _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
        _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
        _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
        _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
        _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
        _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state

    _schema_models_neon_database_properties_read = None

    @classmethod
    def _build_schema_models_neon_database_properties_read(cls, _schema):
        if cls._schema_models_neon_database_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
            _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
            _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state
            return

        cls._schema_models_neon_database_properties_read = _schema_models_neon_database_properties_read = AAZObjectType()

        models_neon_database_properties_read = _schema_models_neon_database_properties_read
        models_neon_database_properties_read.attributes = AAZListType()
        models_neon_database_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_database_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_database_properties_read.owner_name = AAZStrType(
            serialized_name="ownerName",
        )
        models_neon_database_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_database_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
        _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
        _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state

    _schema_models_neon_role_properties_read = None

    @classmethod
    def _build_schema_models_neon_role_properties_read(cls, _schema):
        if cls._schema_models_neon_role_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
            _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
            _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
            _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state
            return

        cls._schema_models_neon_role_properties_read = _schema_models_neon_role_properties_read = AAZObjectType()

        models_neon_role_properties_read = _schema_models_neon_role_properties_read
        models_neon_role_properties_read.attributes = AAZListType()
        models_neon_role_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_role_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_role_properties_read.is_super_user = AAZBoolType(
            serialized_name="isSuperUser",
        )
        models_neon_role_properties_read.permissions = AAZListType()
        models_neon_role_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_role_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        permissions = _schema_models_neon_role_properties_read.permissions
        permissions.Element = AAZStrType()

        _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
        _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
        _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
        _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state

    _schema_organization_resource_read = None

    @classmethod
    def _build_schema_organization_resource_read(cls, _schema):
        if cls._schema_organization_resource_read is not None:
            _schema.id = cls._schema_organization_resource_read.id
            _schema.location = cls._schema_organization_resource_read.location
            _schema.name = cls._schema_organization_resource_read.name
            _schema.properties = cls._schema_organization_resource_read.properties
            _schema.system_data = cls._schema_organization_resource_read.system_data
            _schema.tags = cls._schema_organization_resource_read.tags
            _schema.type = cls._schema_organization_resource_read.type
            return

        cls._schema_organization_resource_read = _schema_organization_resource_read = AAZObjectType()

        organization_resource_read = _schema_organization_resource_read
        organization_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        organization_resource_read.location = AAZStrType(
            flags={"required": True},
        )
        organization_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        organization_resource_read.properties = AAZObjectType()
        organization_resource_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        organization_resource_read.tags = AAZDictType()
        organization_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_organization_resource_read.properties
        properties.company_details = AAZObjectType(
            serialized_name="companyDetails",
            flags={"required": True},
        )
        properties.marketplace_details = AAZObjectType(
            serialized_name="marketplaceDetails",
            flags={"required": True},
        )
        properties.partner_organization_properties = AAZObjectType(
            serialized_name="partnerOrganizationProperties",
        )
        properties.project_properties = AAZObjectType(
            serialized_name="projectProperties",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.user_details = AAZObjectType(
            serialized_name="userDetails",
            flags={"required": True},
        )

        company_details = _schema_organization_resource_read.properties.company_details
        company_details.business_phone = AAZStrType(
            serialized_name="businessPhone",
        )
        company_details.company_name = AAZStrType(
            serialized_name="companyName",
        )
        company_details.country = AAZStrType()
        company_details.domain = AAZStrType()
        company_details.number_of_employees = AAZIntType(
            serialized_name="numberOfEmployees",
        )
        company_details.office_address = AAZStrType(
            serialized_name="officeAddress",
        )

        marketplace_details = _schema_organization_resource_read.properties.marketplace_details
        marketplace_details.offer_details = AAZObjectType(
            serialized_name="offerDetails",
            flags={"required": True},
        )
        marketplace_details.subscription_id = AAZStrType(
            serialized_name="subscriptionId",
        )
        marketplace_details.subscription_status = AAZStrType(
            serialized_name="subscriptionStatus",
        )

        offer_details = _schema_organization_resource_read.properties.marketplace_details.offer_details
        offer_details.offer_id = AAZStrType(
            serialized_name="offerId",
            flags={"required": True},
        )
        offer_details.plan_id = AAZStrType(
            serialized_name="planId",
            flags={"required": True},
        )
        offer_details.plan_name = AAZStrType(
            serialized_name="planName",
        )
        offer_details.publisher_id = AAZStrType(
            serialized_name="publisherId",
            flags={"required": True},
        )
        offer_details.term_id = AAZStrType(
            serialized_name="termId",
        )
        offer_details.term_unit = AAZStrType(
            serialized_name="termUnit",
        )

        partner_organization_properties = _schema_organization_resource_read.properties.partner_organization_properties
        partner_organization_properties.organization_id = AAZStrType(
            serialized_name="organizationId",
        )
        partner_organization_properties.organization_name = AAZStrType(
            serialized_name="organizationName",
            flags={"required": True},
        )
        partner_organization_properties.single_sign_on_properties = AAZObjectType(
            serialized_name="singleSignOnProperties",
        )

        single_sign_on_properties = _schema_organization_resource_read.properties.partner_organization_properties.single_sign_on_properties
        single_sign_on_properties.aad_domains = AAZListType(
            serialized_name="aadDomains",
        )
        single_sign_on_properties.enterprise_app_id = AAZStrType(
            serialized_name="enterpriseAppId",
        )
        single_sign_on_properties.single_sign_on_state = AAZStrType(
            serialized_name="singleSignOnState",
        )
        single_sign_on_properties.single_sign_on_url = AAZStrType(
            serialized_name="singleSignOnUrl",
        )

        aad_domains = _schema_organization_resource_read.properties.partner_organization_properties.single_sign_on_properties.aad_domains
        aad_domains.Element = AAZStrType()

        project_properties = _schema_organization_resource_read.properties.project_properties
        project_properties.attributes = AAZListType()
        project_properties.branch = AAZObjectType()
        project_properties.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        project_properties.databases = AAZListType()
        project_properties.default_endpoint_settings = AAZObjectType(
            serialized_name="defaultEndpointSettings",
        )
        project_properties.endpoints = AAZListType()
        project_properties.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        project_properties.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        project_properties.history_retention = AAZIntType(
            serialized_name="historyRetention",
        )
        project_properties.pg_version = AAZIntType(
            serialized_name="pgVersion",
        )
        project_properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        project_properties.region_id = AAZStrType(
            serialized_name="regionId",
        )
        project_properties.roles = AAZListType()
        project_properties.storage = AAZIntType()

        attributes = _schema_organization_resource_read.properties.project_properties.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        branch = _schema_organization_resource_read.properties.project_properties.branch
        branch.attributes = AAZListType()
        branch.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        branch.database_name = AAZStrType(
            serialized_name="databaseName",
        )
        branch.databases = AAZListType()
        branch.endpoints = AAZListType()
        branch.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        branch.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        branch.parent_id = AAZStrType(
            serialized_name="parentId",
        )
        branch.project_id = AAZStrType(
            serialized_name="projectId",
        )
        branch.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        branch.role_name = AAZStrType(
            serialized_name="roleName",
        )
        branch.roles = AAZListType()

        attributes = _schema_organization_resource_read.properties.project_properties.branch.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        databases = _schema_organization_resource_read.properties.project_properties.branch.databases
        databases.Element = AAZObjectType()
        cls._build_schema_models_neon_database_properties_read(databases.Element)

        endpoints = _schema_organization_resource_read.properties.project_properties.branch.endpoints
        endpoints.Element = AAZObjectType()
        cls._build_schema_models_endpoint_properties_read(endpoints.Element)

        roles = _schema_organization_resource_read.properties.project_properties.branch.roles
        roles.Element = AAZObjectType()
        cls._build_schema_models_neon_role_properties_read(roles.Element)

        databases = _schema_organization_resource_read.properties.project_properties.databases
        databases.Element = AAZObjectType()
        cls._build_schema_models_neon_database_properties_read(databases.Element)

        default_endpoint_settings = _schema_organization_resource_read.properties.project_properties.default_endpoint_settings
        default_endpoint_settings.autoscaling_limit_max_cu = AAZFloatType(
            serialized_name="autoscalingLimitMaxCu",
            flags={"required": True},
        )
        default_endpoint_settings.autoscaling_limit_min_cu = AAZFloatType(
            serialized_name="autoscalingLimitMinCu",
            flags={"required": True},
        )

        endpoints = _schema_organization_resource_read.properties.project_properties.endpoints
        endpoints.Element = AAZObjectType()
        cls._build_schema_models_endpoint_properties_read(endpoints.Element)

        roles = _schema_organization_resource_read.properties.project_properties.roles
        roles.Element = AAZObjectType()
        cls._build_schema_models_neon_role_properties_read(roles.Element)

        user_details = _schema_organization_resource_read.properties.user_details
        user_details.email_address = AAZStrType(
            serialized_name="emailAddress",
        )
        user_details.first_name = AAZStrType(
            serialized_name="firstName",
        )
        user_details.last_name = AAZStrType(
            serialized_name="lastName",
        )
        user_details.phone_number = AAZStrType(
            serialized_name="phoneNumber",
        )
        user_details.upn = AAZStrType()

        system_data = _schema_organization_resource_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_organization_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_organization_resource_read.id
        _schema.location = cls._schema_organization_resource_read.location
        _schema.name = cls._schema_organization_resource_read.name
        _schema.properties = cls._schema_organization_resource_read.properties
        _schema.system_data = cls._schema_organization_resource_read.system_data
        _schema.tags = cls._schema_organization_resource_read.tags
        _schema.type = cls._schema_organization_resource_read.type


__all__ = ["Update"]
