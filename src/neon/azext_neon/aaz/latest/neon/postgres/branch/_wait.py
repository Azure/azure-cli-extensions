# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres branch wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}/projects/{}/branches/{}", "2025-03-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.branch_id = AAZStrArg(
            options=["--branch-id"],
            help="The id of the Neon Branch resource",
            required=True,
            id_part="child_name_2",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="Name of the Neon Organizations resource",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.project_id = AAZStrArg(
            options=["--project-id"],
            help="The id of the Neon Project resource.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the Azure resource group",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BranchesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class BranchesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}/projects/{projectName}/branches/{branchName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "branchName", self.ctx.args.branch_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.attributes = AAZListType()
            properties.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            properties.database_name = AAZStrType(
                serialized_name="databaseName",
            )
            properties.databases = AAZListType()
            properties.endpoints = AAZListType()
            properties.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            properties.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            properties.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            properties.project_id = AAZStrType(
                serialized_name="projectId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.role_name = AAZStrType(
                serialized_name="roleName",
            )
            properties.roles = AAZListType()

            attributes = cls._schema_on_200.properties.attributes
            attributes.Element = AAZObjectType()
            _WaitHelper._build_schema_models_attributes_read(attributes.Element)

            databases = cls._schema_on_200.properties.databases
            databases.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.databases.Element
            _element.attributes = AAZListType()
            _element.branch_id = AAZStrType(
                serialized_name="branchId",
            )
            _element.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            _element.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            _element.owner_name = AAZStrType(
                serialized_name="ownerName",
            )
            _element.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            attributes = cls._schema_on_200.properties.databases.Element.attributes
            attributes.Element = AAZObjectType()
            _WaitHelper._build_schema_models_attributes_read(attributes.Element)

            endpoints = cls._schema_on_200.properties.endpoints
            endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.endpoints.Element
            _element.attributes = AAZListType()
            _element.branch_id = AAZStrType(
                serialized_name="branchId",
            )
            _element.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _element.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            _element.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            _element.project_id = AAZStrType(
                serialized_name="projectId",
            )
            _element.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            attributes = cls._schema_on_200.properties.endpoints.Element.attributes
            attributes.Element = AAZObjectType()
            _WaitHelper._build_schema_models_attributes_read(attributes.Element)

            roles = cls._schema_on_200.properties.roles
            roles.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.roles.Element
            _element.attributes = AAZListType()
            _element.branch_id = AAZStrType(
                serialized_name="branchId",
            )
            _element.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            _element.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            _element.is_super_user = AAZBoolType(
                serialized_name="isSuperUser",
            )
            _element.permissions = AAZListType()
            _element.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            attributes = cls._schema_on_200.properties.roles.Element.attributes
            attributes.Element = AAZObjectType()
            _WaitHelper._build_schema_models_attributes_read(attributes.Element)

            permissions = cls._schema_on_200.properties.roles.Element.permissions
            permissions.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_models_attributes_read = None

    @classmethod
    def _build_schema_models_attributes_read(cls, _schema):
        if cls._schema_models_attributes_read is not None:
            _schema.name = cls._schema_models_attributes_read.name
            _schema.value = cls._schema_models_attributes_read.value
            return

        cls._schema_models_attributes_read = _schema_models_attributes_read = AAZObjectType()

        models_attributes_read = _schema_models_attributes_read
        models_attributes_read.name = AAZStrType(
            flags={"required": True},
        )
        models_attributes_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_models_attributes_read.name
        _schema.value = cls._schema_models_attributes_read.value


__all__ = ["Wait"]
