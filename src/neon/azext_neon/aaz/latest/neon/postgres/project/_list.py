# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres project list",
    is_preview=True,
)
class List(AAZCommand):
    """List Neon Projects associated with Neon Organization resource

    List Neon Project associated with your Neon Organization resource, including those shared with you.

    :example: List Neon Projects within an Organization
        az neon postgres project list --resource-group rgneon --organization-name org-cli-test
    """

    _aaz_info = {
        "version": "2025-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}/projects", "2025-03-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="The name of the Neon Organization resource",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the Azure resource group",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ProjectsList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ProjectsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}/projects",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.attributes = AAZListType()
            properties.branch = AAZObjectType()
            properties.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            properties.databases = AAZListType()
            properties.default_endpoint_settings = AAZObjectType(
                serialized_name="defaultEndpointSettings",
            )
            properties.endpoints = AAZListType()
            properties.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            properties.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            properties.history_retention = AAZIntType(
                serialized_name="historyRetention",
            )
            properties.pg_version = AAZIntType(
                serialized_name="pgVersion",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.region_id = AAZStrType(
                serialized_name="regionId",
            )
            properties.roles = AAZListType()
            properties.storage = AAZIntType()

            attributes = cls._schema_on_200.value.Element.properties.attributes
            attributes.Element = AAZObjectType()
            _ListHelper._build_schema_models_attributes_read(attributes.Element)

            branch = cls._schema_on_200.value.Element.properties.branch
            branch.attributes = AAZListType()
            branch.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            branch.database_name = AAZStrType(
                serialized_name="databaseName",
            )
            branch.databases = AAZListType()
            branch.endpoints = AAZListType()
            branch.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            branch.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            branch.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            branch.project_id = AAZStrType(
                serialized_name="projectId",
            )
            branch.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            branch.role_name = AAZStrType(
                serialized_name="roleName",
            )
            branch.roles = AAZListType()

            attributes = cls._schema_on_200.value.Element.properties.branch.attributes
            attributes.Element = AAZObjectType()
            _ListHelper._build_schema_models_attributes_read(attributes.Element)

            databases = cls._schema_on_200.value.Element.properties.branch.databases
            databases.Element = AAZObjectType()
            _ListHelper._build_schema_models_neon_database_properties_read(databases.Element)

            endpoints = cls._schema_on_200.value.Element.properties.branch.endpoints
            endpoints.Element = AAZObjectType()
            _ListHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200.value.Element.properties.branch.roles
            roles.Element = AAZObjectType()
            _ListHelper._build_schema_models_neon_role_properties_read(roles.Element)

            databases = cls._schema_on_200.value.Element.properties.databases
            databases.Element = AAZObjectType()
            _ListHelper._build_schema_models_neon_database_properties_read(databases.Element)

            default_endpoint_settings = cls._schema_on_200.value.Element.properties.default_endpoint_settings
            default_endpoint_settings.autoscaling_limit_max_cu = AAZFloatType(
                serialized_name="autoscalingLimitMaxCu",
                flags={"required": True},
            )
            default_endpoint_settings.autoscaling_limit_min_cu = AAZFloatType(
                serialized_name="autoscalingLimitMinCu",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200.value.Element.properties.endpoints
            endpoints.Element = AAZObjectType()
            _ListHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200.value.Element.properties.roles
            roles.Element = AAZObjectType()
            _ListHelper._build_schema_models_neon_role_properties_read(roles.Element)

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_models_attributes_read = None

    @classmethod
    def _build_schema_models_attributes_read(cls, _schema):
        if cls._schema_models_attributes_read is not None:
            _schema.name = cls._schema_models_attributes_read.name
            _schema.value = cls._schema_models_attributes_read.value
            return

        cls._schema_models_attributes_read = _schema_models_attributes_read = AAZObjectType()

        models_attributes_read = _schema_models_attributes_read
        models_attributes_read.name = AAZStrType(
            flags={"required": True},
        )
        models_attributes_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_models_attributes_read.name
        _schema.value = cls._schema_models_attributes_read.value

    _schema_models_endpoint_properties_read = None

    @classmethod
    def _build_schema_models_endpoint_properties_read(cls, _schema):
        if cls._schema_models_endpoint_properties_read is not None:
            _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
            _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
            _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
            _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
            _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
            _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
            _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
            _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state
            return

        cls._schema_models_endpoint_properties_read = _schema_models_endpoint_properties_read = AAZObjectType()

        models_endpoint_properties_read = _schema_models_endpoint_properties_read
        models_endpoint_properties_read.attributes = AAZListType()
        models_endpoint_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_endpoint_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        models_endpoint_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_endpoint_properties_read.project_id = AAZStrType(
            serialized_name="projectId",
        )
        models_endpoint_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_endpoint_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
        _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
        _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
        _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
        _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
        _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
        _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
        _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state

    _schema_models_neon_database_properties_read = None

    @classmethod
    def _build_schema_models_neon_database_properties_read(cls, _schema):
        if cls._schema_models_neon_database_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
            _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
            _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state
            return

        cls._schema_models_neon_database_properties_read = _schema_models_neon_database_properties_read = AAZObjectType()

        models_neon_database_properties_read = _schema_models_neon_database_properties_read
        models_neon_database_properties_read.attributes = AAZListType()
        models_neon_database_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_database_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_database_properties_read.owner_name = AAZStrType(
            serialized_name="ownerName",
        )
        models_neon_database_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_database_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
        _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
        _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state

    _schema_models_neon_role_properties_read = None

    @classmethod
    def _build_schema_models_neon_role_properties_read(cls, _schema):
        if cls._schema_models_neon_role_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
            _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
            _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
            _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state
            return

        cls._schema_models_neon_role_properties_read = _schema_models_neon_role_properties_read = AAZObjectType()

        models_neon_role_properties_read = _schema_models_neon_role_properties_read
        models_neon_role_properties_read.attributes = AAZListType()
        models_neon_role_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_role_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_role_properties_read.is_super_user = AAZBoolType(
            serialized_name="isSuperUser",
        )
        models_neon_role_properties_read.permissions = AAZListType()
        models_neon_role_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_role_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        permissions = _schema_models_neon_role_properties_read.permissions
        permissions.Element = AAZStrType()

        _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
        _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
        _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
        _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state


__all__ = ["List"]
