# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "neon postgres project create",
    is_preview=True,
)
class Create(AAZCommand):
    """Creates a Neon Project resource

    :example: Create Neon Project
        az neon postgres project create --resource-group rgneon --organization-name neon-org --project-name neon-project --region eastus2 --pg-version 17 --branch "{branch-name:main, role-name:owner_role,database-name:neondb}"
    """

    _aaz_info = {
        "version": "2025-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/neon.postgres/organizations/{}/projects/{}", "2025-03-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.organization_name = AAZStrArg(
            options=["--organization-name"],
            help="The name of the Neon Organization resource.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_\\-.: ]*$",
                max_length=50,
                min_length=1,
            ),
            blank=AAZPromptInput(
                msg="Please provide Neon Organization name:",
            ),
        )
        _args_schema.project_name = AAZStrArg(
            options=["-n", "--name", "--project-name"],
            help="The name of the Neon Project resource.",
            required=True,
            default="Default-Project",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the Azure resource group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.branch = AAZObjectArg(
            options=["--branch"],
            arg_group="Properties",
            help="The Branch properties of the project.",
        )
        _args_schema.pg_version = AAZIntArg(
            options=["--pg-version"],
            arg_group="Properties",
            help={"short-summary": "The PostgreSQL version for the Neon Database, with a default of 17.", "long-summary": "The PostgreSQL version for the Neon Database. Supported versions include 14, 15, 16, and 17."},
            default=17,
        )
        _args_schema.region = AAZStrArg(
            options=["--region"],
            arg_group="Properties",
            help={"short-summary": "The region where the project is created.", "long-summary": "The region where the project is created. Possible values include East US 2, West US 3 and Germany West Central"},
        )

        branch = cls._args_schema.branch
        branch.database_name = AAZStrArg(
            options=["database-name"],
            help="The name of the Database associated with the Branch",
            default="neondb",
        )
        branch.branch_name = AAZStrArg(
            options=["branch-name"],
            help="Name of the Neon Branch resource",
            default="main",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        branch.parent_id = AAZStrArg(
            options=["parent-id"],
            help="The ID of the parent branch",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9-]{1,60}$",
            ),
        )
        branch.project_id = AAZStrArg(
            options=["project-id"],
            help="The ID of the project this branch belongs to",
        )
        branch.role_name = AAZStrArg(
            options=["role-name"],
            help="The name of the Role associated with the branch",
            default="Owner_role",
        )
        return cls._args_schema

    _args_models_attributes_create = None

    @classmethod
    def _build_args_models_attributes_create(cls, _schema):
        if cls._args_models_attributes_create is not None:
            _schema.name = cls._args_models_attributes_create.name
            _schema.value = cls._args_models_attributes_create.value
            return

        cls._args_models_attributes_create = AAZObjectArg()

        models_attributes_create = cls._args_models_attributes_create
        models_attributes_create.name = AAZStrArg(
            options=["name"],
            help="Name of the attribute",
            required=True,
        )
        models_attributes_create.value = AAZStrArg(
            options=["value"],
            help="Value of the attribute",
            required=True,
        )

        _schema.name = cls._args_models_attributes_create.name
        _schema.value = cls._args_models_attributes_create.value

    _args_models_endpoint_properties_create = None

    @classmethod
    def _build_args_models_endpoint_properties_create(cls, _schema):
        if cls._args_models_endpoint_properties_create is not None:
            _schema.attributes = cls._args_models_endpoint_properties_create.attributes
            _schema.branch_id = cls._args_models_endpoint_properties_create.branch_id
            _schema.endpoint_type = cls._args_models_endpoint_properties_create.endpoint_type
            _schema.entity_name = cls._args_models_endpoint_properties_create.entity_name
            _schema.project_id = cls._args_models_endpoint_properties_create.project_id
            return

        cls._args_models_endpoint_properties_create = AAZObjectArg()

        models_endpoint_properties_create = cls._args_models_endpoint_properties_create
        models_endpoint_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_endpoint_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this endpoint belongs to",
        )
        models_endpoint_properties_create.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            help="The type of the endpoint",
            enum={"read_only": "read_only", "read_write": "read_write"},
        )
        models_endpoint_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_endpoint_properties_create.project_id = AAZStrArg(
            options=["project-id"],
            help="The ID of the project this endpoint belongs to",
        )

        attributes = cls._args_models_endpoint_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        _schema.attributes = cls._args_models_endpoint_properties_create.attributes
        _schema.branch_id = cls._args_models_endpoint_properties_create.branch_id
        _schema.endpoint_type = cls._args_models_endpoint_properties_create.endpoint_type
        _schema.entity_name = cls._args_models_endpoint_properties_create.entity_name
        _schema.project_id = cls._args_models_endpoint_properties_create.project_id

    _args_models_neon_database_properties_create = None

    @classmethod
    def _build_args_models_neon_database_properties_create(cls, _schema):
        if cls._args_models_neon_database_properties_create is not None:
            _schema.attributes = cls._args_models_neon_database_properties_create.attributes
            _schema.branch_id = cls._args_models_neon_database_properties_create.branch_id
            _schema.entity_name = cls._args_models_neon_database_properties_create.entity_name
            _schema.owner_name = cls._args_models_neon_database_properties_create.owner_name
            return

        cls._args_models_neon_database_properties_create = AAZObjectArg()

        models_neon_database_properties_create = cls._args_models_neon_database_properties_create
        models_neon_database_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_neon_database_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this database belongs to",
        )
        models_neon_database_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_database_properties_create.owner_name = AAZStrArg(
            options=["owner-name"],
            help="The name of the role that owns the database",
        )

        attributes = cls._args_models_neon_database_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        _schema.attributes = cls._args_models_neon_database_properties_create.attributes
        _schema.branch_id = cls._args_models_neon_database_properties_create.branch_id
        _schema.entity_name = cls._args_models_neon_database_properties_create.entity_name
        _schema.owner_name = cls._args_models_neon_database_properties_create.owner_name

    _args_models_neon_role_properties_create = None

    @classmethod
    def _build_args_models_neon_role_properties_create(cls, _schema):
        if cls._args_models_neon_role_properties_create is not None:
            _schema.attributes = cls._args_models_neon_role_properties_create.attributes
            _schema.branch_id = cls._args_models_neon_role_properties_create.branch_id
            _schema.entity_name = cls._args_models_neon_role_properties_create.entity_name
            _schema.is_super_user = cls._args_models_neon_role_properties_create.is_super_user
            _schema.permissions = cls._args_models_neon_role_properties_create.permissions
            return

        cls._args_models_neon_role_properties_create = AAZObjectArg()

        models_neon_role_properties_create = cls._args_models_neon_role_properties_create
        models_neon_role_properties_create.attributes = AAZListArg(
            options=["attributes"],
            help="Additional attributes for the entity",
        )
        models_neon_role_properties_create.branch_id = AAZStrArg(
            options=["branch-id"],
            help="The ID of the branch this role belongs to",
        )
        models_neon_role_properties_create.entity_name = AAZStrArg(
            options=["entity-name"],
            help="Name of the resource",
            fmt=AAZStrArgFormat(
                pattern="^\\S.{0,62}\\S$|^\\S$",
            ),
        )
        models_neon_role_properties_create.is_super_user = AAZBoolArg(
            options=["is-super-user"],
            help="Indicates whether the role has superuser privileges",
        )
        models_neon_role_properties_create.permissions = AAZListArg(
            options=["permissions"],
            help="Permissions assigned to the role",
        )

        attributes = cls._args_models_neon_role_properties_create.attributes
        attributes.Element = AAZObjectArg()
        cls._build_args_models_attributes_create(attributes.Element)

        permissions = cls._args_models_neon_role_properties_create.permissions
        permissions.Element = AAZStrArg()

        _schema.attributes = cls._args_models_neon_role_properties_create.attributes
        _schema.branch_id = cls._args_models_neon_role_properties_create.branch_id
        _schema.entity_name = cls._args_models_neon_role_properties_create.entity_name
        _schema.is_super_user = cls._args_models_neon_role_properties_create.is_super_user
        _schema.permissions = cls._args_models_neon_role_properties_create.permissions

    def _execute_operations(self):
        self.pre_operations()
        yield self.ProjectsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ProjectsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Neon.Postgres/organizations/{organizationName}/projects/{projectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "organizationName", self.ctx.args.organization_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("branch", AAZObjectType, ".branch")
                properties.set_prop("pgVersion", AAZIntType, ".pg_version")
                properties.set_prop("regionId", AAZStrType, ".region")

            branch = _builder.get(".properties.branch")
            if branch is not None:
                branch.set_prop("databaseName", AAZStrType, ".database_name")
                branch.set_prop("entityName", AAZStrType, ".branch_name")
                branch.set_prop("parentId", AAZStrType, ".parent_id")
                branch.set_prop("projectId", AAZStrType, ".project_id")
                branch.set_prop("roleName", AAZStrType, ".role_name")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.attributes = AAZListType()
            properties.branch = AAZObjectType()
            properties.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            properties.databases = AAZListType()
            properties.default_endpoint_settings = AAZObjectType(
                serialized_name="defaultEndpointSettings",
            )
            properties.endpoints = AAZListType()
            properties.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            properties.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            properties.history_retention = AAZIntType(
                serialized_name="historyRetention",
            )
            properties.pg_version = AAZIntType(
                serialized_name="pgVersion",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.region_id = AAZStrType(
                serialized_name="regionId",
            )
            properties.roles = AAZListType()
            properties.storage = AAZIntType()

            attributes = cls._schema_on_200_201.properties.attributes
            attributes.Element = AAZObjectType()
            _CreateHelper._build_schema_models_attributes_read(attributes.Element)

            branch = cls._schema_on_200_201.properties.branch
            branch.attributes = AAZListType()
            branch.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            branch.database_name = AAZStrType(
                serialized_name="databaseName",
            )
            branch.databases = AAZListType()
            branch.endpoints = AAZListType()
            branch.entity_id = AAZStrType(
                serialized_name="entityId",
                flags={"read_only": True},
            )
            branch.entity_name = AAZStrType(
                serialized_name="entityName",
            )
            branch.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            branch.project_id = AAZStrType(
                serialized_name="projectId",
            )
            branch.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            branch.role_name = AAZStrType(
                serialized_name="roleName",
            )
            branch.roles = AAZListType()

            attributes = cls._schema_on_200_201.properties.branch.attributes
            attributes.Element = AAZObjectType()
            _CreateHelper._build_schema_models_attributes_read(attributes.Element)

            databases = cls._schema_on_200_201.properties.branch.databases
            databases.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_database_properties_read(databases.Element)

            endpoints = cls._schema_on_200_201.properties.branch.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200_201.properties.branch.roles
            roles.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_role_properties_read(roles.Element)

            databases = cls._schema_on_200_201.properties.databases
            databases.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_database_properties_read(databases.Element)

            default_endpoint_settings = cls._schema_on_200_201.properties.default_endpoint_settings
            default_endpoint_settings.autoscaling_limit_max_cu = AAZFloatType(
                serialized_name="autoscalingLimitMaxCu",
                flags={"required": True},
            )
            default_endpoint_settings.autoscaling_limit_min_cu = AAZFloatType(
                serialized_name="autoscalingLimitMinCu",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200_201.properties.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_models_endpoint_properties_read(endpoints.Element)

            roles = cls._schema_on_200_201.properties.roles
            roles.Element = AAZObjectType()
            _CreateHelper._build_schema_models_neon_role_properties_read(roles.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_models_attributes_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_models_endpoint_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("endpointType", AAZStrType, ".endpoint_type")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("projectId", AAZStrType, ".project_id")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_database_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("ownerName", AAZStrType, ".owner_name")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_models_neon_role_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("attributes", AAZListType, ".attributes")
        _builder.set_prop("branchId", AAZStrType, ".branch_id")
        _builder.set_prop("entityName", AAZStrType, ".entity_name")
        _builder.set_prop("isSuperUser", AAZBoolType, ".is_super_user")
        _builder.set_prop("permissions", AAZListType, ".permissions")

        attributes = _builder.get(".attributes")
        if attributes is not None:
            cls._build_schema_models_attributes_create(attributes.set_elements(AAZObjectType, "."))

        permissions = _builder.get(".permissions")
        if permissions is not None:
            permissions.set_elements(AAZStrType, ".")

    _schema_models_attributes_read = None

    @classmethod
    def _build_schema_models_attributes_read(cls, _schema):
        if cls._schema_models_attributes_read is not None:
            _schema.name = cls._schema_models_attributes_read.name
            _schema.value = cls._schema_models_attributes_read.value
            return

        cls._schema_models_attributes_read = _schema_models_attributes_read = AAZObjectType()

        models_attributes_read = _schema_models_attributes_read
        models_attributes_read.name = AAZStrType(
            flags={"required": True},
        )
        models_attributes_read.value = AAZStrType(
            flags={"required": True},
        )

        _schema.name = cls._schema_models_attributes_read.name
        _schema.value = cls._schema_models_attributes_read.value

    _schema_models_endpoint_properties_read = None

    @classmethod
    def _build_schema_models_endpoint_properties_read(cls, _schema):
        if cls._schema_models_endpoint_properties_read is not None:
            _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
            _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
            _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
            _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
            _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
            _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
            _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
            _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state
            return

        cls._schema_models_endpoint_properties_read = _schema_models_endpoint_properties_read = AAZObjectType()

        models_endpoint_properties_read = _schema_models_endpoint_properties_read
        models_endpoint_properties_read.attributes = AAZListType()
        models_endpoint_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_endpoint_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        models_endpoint_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_endpoint_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_endpoint_properties_read.project_id = AAZStrType(
            serialized_name="projectId",
        )
        models_endpoint_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_endpoint_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_endpoint_properties_read.attributes
        _schema.branch_id = cls._schema_models_endpoint_properties_read.branch_id
        _schema.created_at = cls._schema_models_endpoint_properties_read.created_at
        _schema.endpoint_type = cls._schema_models_endpoint_properties_read.endpoint_type
        _schema.entity_id = cls._schema_models_endpoint_properties_read.entity_id
        _schema.entity_name = cls._schema_models_endpoint_properties_read.entity_name
        _schema.project_id = cls._schema_models_endpoint_properties_read.project_id
        _schema.provisioning_state = cls._schema_models_endpoint_properties_read.provisioning_state

    _schema_models_neon_database_properties_read = None

    @classmethod
    def _build_schema_models_neon_database_properties_read(cls, _schema):
        if cls._schema_models_neon_database_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
            _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
            _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state
            return

        cls._schema_models_neon_database_properties_read = _schema_models_neon_database_properties_read = AAZObjectType()

        models_neon_database_properties_read = _schema_models_neon_database_properties_read
        models_neon_database_properties_read.attributes = AAZListType()
        models_neon_database_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_database_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_database_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_database_properties_read.owner_name = AAZStrType(
            serialized_name="ownerName",
        )
        models_neon_database_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_database_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        _schema.attributes = cls._schema_models_neon_database_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_database_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_database_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_database_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_database_properties_read.entity_name
        _schema.owner_name = cls._schema_models_neon_database_properties_read.owner_name
        _schema.provisioning_state = cls._schema_models_neon_database_properties_read.provisioning_state

    _schema_models_neon_role_properties_read = None

    @classmethod
    def _build_schema_models_neon_role_properties_read(cls, _schema):
        if cls._schema_models_neon_role_properties_read is not None:
            _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
            _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
            _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
            _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
            _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
            _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
            _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
            _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state
            return

        cls._schema_models_neon_role_properties_read = _schema_models_neon_role_properties_read = AAZObjectType()

        models_neon_role_properties_read = _schema_models_neon_role_properties_read
        models_neon_role_properties_read.attributes = AAZListType()
        models_neon_role_properties_read.branch_id = AAZStrType(
            serialized_name="branchId",
        )
        models_neon_role_properties_read.created_at = AAZStrType(
            serialized_name="createdAt",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_id = AAZStrType(
            serialized_name="entityId",
            flags={"read_only": True},
        )
        models_neon_role_properties_read.entity_name = AAZStrType(
            serialized_name="entityName",
        )
        models_neon_role_properties_read.is_super_user = AAZBoolType(
            serialized_name="isSuperUser",
        )
        models_neon_role_properties_read.permissions = AAZListType()
        models_neon_role_properties_read.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )

        attributes = _schema_models_neon_role_properties_read.attributes
        attributes.Element = AAZObjectType()
        cls._build_schema_models_attributes_read(attributes.Element)

        permissions = _schema_models_neon_role_properties_read.permissions
        permissions.Element = AAZStrType()

        _schema.attributes = cls._schema_models_neon_role_properties_read.attributes
        _schema.branch_id = cls._schema_models_neon_role_properties_read.branch_id
        _schema.created_at = cls._schema_models_neon_role_properties_read.created_at
        _schema.entity_id = cls._schema_models_neon_role_properties_read.entity_id
        _schema.entity_name = cls._schema_models_neon_role_properties_read.entity_name
        _schema.is_super_user = cls._schema_models_neon_role_properties_read.is_super_user
        _schema.permissions = cls._schema_models_neon_role_properties_read.permissions
        _schema.provisioning_state = cls._schema_models_neon_role_properties_read.provisioning_state


__all__ = ["Create"]
