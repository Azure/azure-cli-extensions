# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "monitor app-insights component billing update",
)
class Update(AAZCommand):
    """Update the billing features of an Application Insights resource.
    """

    _aaz_info = {
        "version": "2015-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.insights/components/{}/currentbillingfeatures", "2015-05-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cap = AAZFloatArg(
            options=["--cap"],
            help="Daily data volume cap in GB.",
            nullable=True,
        )
        _args_schema.stop = AAZBoolArg(
            options=["-s", "--stop"],
            help="Do not send a notification email when the daily data volume cap is met.",
            nullable=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.app = AAZStrArg(
            options=["-a", "--app"],
            help="GUID, app name, or fully-qualified Azure resource name of Application                           Insights component. The application GUID may be acquired from the API                           Access menu item on any Application Insights resource in the Azure portal.                           If using an application name, please specify resource group.",
            required=True,
            id_part="name",
        )

        # define Arg Group "BillingFeaturesProperties"

        # define Arg Group "DataVolumeCap"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ComponentCurrentBillingFeaturesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.ComponentCurrentBillingFeaturesUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ComponentCurrentBillingFeaturesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.app,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_application_insights_component_billing_features_read(cls._schema_on_200)

            return cls._schema_on_200

    class ComponentCurrentBillingFeaturesUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/currentbillingfeatures",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.app,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2015-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_application_insights_component_billing_features_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("DataVolumeCap", AAZObjectType)

            data_volume_cap = _builder.get(".DataVolumeCap")
            if data_volume_cap is not None:
                data_volume_cap.set_prop("Cap", AAZFloatType, ".cap")
                data_volume_cap.set_prop("StopSendNotificationWhenHitCap", AAZBoolType, ".stop")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_application_insights_component_billing_features_read = None

    @classmethod
    def _build_schema_application_insights_component_billing_features_read(cls, _schema):
        if cls._schema_application_insights_component_billing_features_read is not None:
            _schema.current_billing_features = cls._schema_application_insights_component_billing_features_read.current_billing_features
            _schema.data_volume_cap = cls._schema_application_insights_component_billing_features_read.data_volume_cap
            return

        cls._schema_application_insights_component_billing_features_read = _schema_application_insights_component_billing_features_read = AAZObjectType()

        application_insights_component_billing_features_read = _schema_application_insights_component_billing_features_read
        application_insights_component_billing_features_read.current_billing_features = AAZListType(
            serialized_name="CurrentBillingFeatures",
        )
        application_insights_component_billing_features_read.data_volume_cap = AAZObjectType(
            serialized_name="DataVolumeCap",
        )

        current_billing_features = _schema_application_insights_component_billing_features_read.current_billing_features
        current_billing_features.Element = AAZStrType()

        data_volume_cap = _schema_application_insights_component_billing_features_read.data_volume_cap
        data_volume_cap.cap = AAZFloatType(
            serialized_name="Cap",
        )
        data_volume_cap.max_history_cap = AAZFloatType(
            serialized_name="MaxHistoryCap",
            flags={"read_only": True},
        )
        data_volume_cap.reset_time = AAZIntType(
            serialized_name="ResetTime",
            flags={"read_only": True},
        )
        data_volume_cap.stop_send_notification_when_hit_cap = AAZBoolType(
            serialized_name="StopSendNotificationWhenHitCap",
        )
        data_volume_cap.stop_send_notification_when_hit_threshold = AAZBoolType(
            serialized_name="StopSendNotificationWhenHitThreshold",
        )
        data_volume_cap.warning_threshold = AAZIntType(
            serialized_name="WarningThreshold",
        )

        _schema.current_billing_features = cls._schema_application_insights_component_billing_features_read.current_billing_features
        _schema.data_volume_cap = cls._schema_application_insights_component_billing_features_read.data_volume_cap


__all__ = ["Update"]
