# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class QueryShow(AAZCommand):
    """Get an Analytics query for data
    """

    _aaz_info = {
        "version": "v1",
        "resources": [
            ["data-plane:microsoft.insights", "/apps/{}/query", "v1"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.app_id = AAZStrArg(
            options=["--app-id"],
            help="ID of the application. This is Application ID from the API Access settings blade in the Azure portal.",
            required=True,
        )
        _args_schema.query = AAZStrArg(
            options=["--query"],
            help="The Analytics query. Learn more about the [Analytics query syntax](https://azure.microsoft.com/documentation/articles/app-insights-analytics-reference/)",
            required=True,
        )
        _args_schema.timespan = AAZStrArg(
            options=["--timespan"],
            help="Optional. The timespan over which to query data. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the query expression.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.QueryGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class QueryGet(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftInsightsDataPlaneClient_application_insights"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/v1/apps/{appId}/query",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "appId", self.ctx.args.app_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "query", self.ctx.args.query,
                    required=True,
                ),
                **self.serialize_query_param(
                    "timespan", self.ctx.args.timespan,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.tables = AAZListType(
                flags={"required": True},
            )

            tables = cls._schema_on_200.tables
            tables.Element = AAZObjectType()

            _element = cls._schema_on_200.tables.Element
            _element.columns = AAZListType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.rows = AAZListType(
                flags={"required": True},
            )

            columns = cls._schema_on_200.tables.Element.columns
            columns.Element = AAZObjectType()

            _element = cls._schema_on_200.tables.Element.columns.Element
            _element.name = AAZStrType()
            _element.type = AAZStrType()

            rows = cls._schema_on_200.tables.Element.rows
            rows.Element = AAZListType()

            _element = cls._schema_on_200.tables.Element.rows.Element
            _element.Element = AAZAnyType()

            return cls._schema_on_200


class _QueryShowHelper:
    """Helper class for QueryShow"""


__all__ = ["QueryShow"]
