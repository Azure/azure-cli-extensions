# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Show(AAZCommand):
    """Get the data for a single event
    """

    _aaz_info = {
        "version": "v1",
        "resources": [
            ["data-plane:microsoft.insights", "/apps/{}/events/{}", "v1"],
            ["data-plane:microsoft.insights", "/apps/{}/events/{}/{}", "v1"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.app_id = AAZStrArg(
            options=["--app-id"],
            help="ID of the application. This is Application ID from the API Access settings blade in the Azure portal.",
            required=True,
        )
        _args_schema.event_id = AAZStrArg(
            options=["--event-id"],
            help="ID of event.",
        )
        _args_schema.event_type = AAZStrArg(
            options=["--event-type"],
            help="The type of events to query; either a standard event type (`traces`, `customEvents`, `pageViews`, `requests`, `dependencies`, `exceptions`, `availabilityResults`) or `$all` to query across all event types.",
            required=True,
            enum={"$all": "$all", "availabilityResults": "availabilityResults", "browserTimings": "browserTimings", "customEvents": "customEvents", "customMetrics": "customMetrics", "dependencies": "dependencies", "exceptions": "exceptions", "pageViews": "pageViews", "performanceCounters": "performanceCounters", "requests": "requests", "traces": "traces"},
        )
        _args_schema.apply = AAZStrArg(
            options=["--apply"],
            help="An expression used for aggregation over returned events",
        )
        _args_schema.count = AAZBoolArg(
            options=["--count"],
            help="Request a count of matching items included with the returned events",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="An expression used to filter the returned events",
        )
        _args_schema.format = AAZStrArg(
            options=["--format"],
            help="Format for the returned events",
        )
        _args_schema.orderby = AAZStrArg(
            options=["--orderby"],
            help="A comma-separated list of properties with \\\"asc\\\" (the default) or \\\"desc\\\" to control the order of returned events",
        )
        _args_schema.search = AAZStrArg(
            options=["--search"],
            help="A free-text search expression to match for whether a particular event should be returned",
        )
        _args_schema.select = AAZStrArg(
            options=["--select"],
            help="Limits the properties to just those requested on each returned event",
        )
        _args_schema.skip = AAZIntArg(
            options=["--skip"],
            help="The number of items to skip over before returning events",
        )
        _args_schema.timespan = AAZStrArg(
            options=["--timespan"],
            help="Optional. The timespan over which to retrieve events. This is an ISO8601 time period value.  This timespan is applied in addition to any that are specified in the Odata expression.",
        )
        _args_schema.top = AAZIntArg(
            options=["--top"],
            help="The number of events to return",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.app_id) and has_value(self.ctx.args.event_type) and has_value(self.ctx.args.event_id) is not True
        condition_1 = has_value(self.ctx.args.app_id) and has_value(self.ctx.args.event_id) and has_value(self.ctx.args.event_type)
        if condition_0:
            self.EventsGetByType(ctx=self.ctx)()
        if condition_1:
            self.EventsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class EventsGetByType(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftInsightsDataPlaneClient_application_insights"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/v1/apps/{appId}/events/{eventType}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "appId", self.ctx.args.app_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventType", self.ctx.args.event_type,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$apply", self.ctx.args.apply,
                ),
                **self.serialize_query_param(
                    "$count", self.ctx.args.count,
                ),
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "$format", self.ctx.args.format,
                ),
                **self.serialize_query_param(
                    "$orderby", self.ctx.args.orderby,
                ),
                **self.serialize_query_param(
                    "$search", self.ctx.args.search,
                ),
                **self.serialize_query_param(
                    "$select", self.ctx.args.select,
                ),
                **self.serialize_query_param(
                    "$skip", self.ctx.args.skip,
                ),
                **self.serialize_query_param(
                    "$top", self.ctx.args.top,
                ),
                **self.serialize_query_param(
                    "timespan", self.ctx.args.timespan,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.aimessages = AAZListType(
                serialized_name="@ai.messages",
            )
            _schema_on_200.odatacontext = AAZStrType(
                serialized_name="@odata.context",
            )
            _schema_on_200.value = AAZListType()

            aimessages = cls._schema_on_200.aimessages
            aimessages.Element = AAZFreeFormDictType()
            _ShowHelper._build_schema_error_info_read(aimessages.Element)

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.ai = AAZObjectType()
            _element.application = AAZObjectType()
            _element.client = AAZObjectType()
            _element.cloud = AAZObjectType()
            _element.count = AAZIntType()
            _element.custom_dimensions = AAZObjectType(
                serialized_name="customDimensions",
            )
            _element.custom_measurements = AAZObjectType(
                serialized_name="customMeasurements",
            )
            _element.id = AAZStrType()
            _element.operation = AAZObjectType()
            _element.session = AAZObjectType()
            _element.timestamp = AAZStrType()
            _element.type = AAZStrType(
                flags={"required": True},
            )
            _element.user = AAZObjectType()

            ai = cls._schema_on_200.value.Element.ai
            ai.app_id = AAZStrType(
                serialized_name="appId",
            )
            ai.app_name = AAZStrType(
                serialized_name="appName",
            )
            ai.i_key = AAZStrType(
                serialized_name="iKey",
            )
            ai.sdk_version = AAZStrType(
                serialized_name="sdkVersion",
            )

            application = cls._schema_on_200.value.Element.application
            application.version = AAZStrType()

            client = cls._schema_on_200.value.Element.client
            client.browser = AAZStrType()
            client.city = AAZStrType()
            client.country_or_region = AAZStrType(
                serialized_name="countryOrRegion",
            )
            client.ip = AAZStrType()
            client.model = AAZStrType()
            client.os = AAZStrType()
            client.state_or_province = AAZStrType(
                serialized_name="stateOrProvince",
            )
            client.type = AAZStrType()

            cloud = cls._schema_on_200.value.Element.cloud
            cloud.role_instance = AAZStrType(
                serialized_name="roleInstance",
            )
            cloud.role_name = AAZStrType(
                serialized_name="roleName",
            )

            custom_dimensions = cls._schema_on_200.value.Element.custom_dimensions
            custom_dimensions.additional_properties = AAZDictType(
                serialized_name="additionalProperties",
            )

            additional_properties = cls._schema_on_200.value.Element.custom_dimensions.additional_properties
            additional_properties.Element = AAZAnyType()

            custom_measurements = cls._schema_on_200.value.Element.custom_measurements
            custom_measurements.additional_properties = AAZDictType(
                serialized_name="additionalProperties",
            )

            additional_properties = cls._schema_on_200.value.Element.custom_measurements.additional_properties
            additional_properties.Element = AAZAnyType()

            operation = cls._schema_on_200.value.Element.operation
            operation.id = AAZStrType()
            operation.name = AAZStrType()
            operation.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            operation.synthetic_source = AAZStrType(
                serialized_name="syntheticSource",
            )

            session = cls._schema_on_200.value.Element.session
            session.id = AAZStrType()

            user = cls._schema_on_200.value.Element.user
            user.account_id = AAZStrType(
                serialized_name="accountId",
            )
            user.authenticated_id = AAZStrType(
                serialized_name="authenticatedId",
            )
            user.id = AAZStrType()

            disc_availability_result = cls._schema_on_200.value.Element.discriminate_by("type", "availabilityResult")
            disc_availability_result.availability_result = AAZObjectType(
                serialized_name="availabilityResult",
            )

            availability_result = cls._schema_on_200.value.Element.discriminate_by("type", "availabilityResult").availability_result
            availability_result.duration = AAZIntType()
            availability_result.id = AAZStrType()
            availability_result.location = AAZStrType()
            availability_result.message = AAZStrType()
            availability_result.name = AAZStrType()
            availability_result.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            availability_result.size = AAZStrType()
            availability_result.success = AAZStrType()

            disc_browser_timing = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming")
            disc_browser_timing.browser_timing = AAZObjectType(
                serialized_name="browserTiming",
            )
            disc_browser_timing.client_performance = AAZObjectType(
                serialized_name="clientPerformance",
            )

            browser_timing = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming").browser_timing
            browser_timing.name = AAZStrType()
            browser_timing.network_duration = AAZIntType(
                serialized_name="networkDuration",
            )
            browser_timing.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            browser_timing.processing_duration = AAZIntType(
                serialized_name="processingDuration",
            )
            browser_timing.receive_duration = AAZIntType(
                serialized_name="receiveDuration",
            )
            browser_timing.send_duration = AAZIntType(
                serialized_name="sendDuration",
            )
            browser_timing.total_duration = AAZIntType(
                serialized_name="totalDuration",
            )
            browser_timing.url = AAZStrType()
            browser_timing.url_host = AAZStrType(
                serialized_name="urlHost",
            )
            browser_timing.url_path = AAZStrType(
                serialized_name="urlPath",
            )

            client_performance = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming").client_performance
            client_performance.name = AAZStrType()

            disc_custom_event = cls._schema_on_200.value.Element.discriminate_by("type", "customEvent")
            disc_custom_event.custom_event = AAZObjectType(
                serialized_name="customEvent",
            )

            custom_event = cls._schema_on_200.value.Element.discriminate_by("type", "customEvent").custom_event
            custom_event.name = AAZStrType()

            disc_custom_metric = cls._schema_on_200.value.Element.discriminate_by("type", "customMetric")
            disc_custom_metric.custom_metric = AAZObjectType(
                serialized_name="customMetric",
            )

            custom_metric = cls._schema_on_200.value.Element.discriminate_by("type", "customMetric").custom_metric
            custom_metric.name = AAZStrType()
            custom_metric.value = AAZFloatType()
            custom_metric.value_count = AAZIntType(
                serialized_name="valueCount",
            )
            custom_metric.value_max = AAZFloatType(
                serialized_name="valueMax",
            )
            custom_metric.value_min = AAZFloatType(
                serialized_name="valueMin",
            )
            custom_metric.value_std_dev = AAZFloatType(
                serialized_name="valueStdDev",
            )
            custom_metric.value_sum = AAZFloatType(
                serialized_name="valueSum",
            )

            disc_dependency = cls._schema_on_200.value.Element.discriminate_by("type", "dependency")
            disc_dependency.dependency = AAZObjectType()

            dependency = cls._schema_on_200.value.Element.discriminate_by("type", "dependency").dependency
            dependency.data = AAZStrType()
            dependency.duration = AAZIntType()
            dependency.id = AAZStrType()
            dependency.name = AAZStrType()
            dependency.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            dependency.result_code = AAZStrType(
                serialized_name="resultCode",
            )
            dependency.success = AAZStrType()
            dependency.target = AAZStrType()
            dependency.type = AAZStrType()

            disc_exception = cls._schema_on_200.value.Element.discriminate_by("type", "exception")
            disc_exception.exception = AAZObjectType()

            exception = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception
            exception.assembly = AAZStrType()
            exception.details = AAZListType()
            exception.handled_at = AAZStrType(
                serialized_name="handledAt",
            )
            exception.innermost_assembly = AAZStrType(
                serialized_name="innermostAssembly",
            )
            exception.innermost_message = AAZStrType(
                serialized_name="innermostMessage",
            )
            exception.innermost_method = AAZStrType(
                serialized_name="innermostMethod",
            )
            exception.innermost_type = AAZStrType(
                serialized_name="innermostType",
            )
            exception.message = AAZStrType()
            exception.method = AAZStrType()
            exception.outer_assembly = AAZStrType(
                serialized_name="outerAssembly",
            )
            exception.outer_message = AAZStrType(
                serialized_name="outerMessage",
            )
            exception.outer_method = AAZStrType(
                serialized_name="outerMethod",
            )
            exception.outer_type = AAZStrType(
                serialized_name="outerType",
            )
            exception.problem_id = AAZStrType(
                serialized_name="problemId",
            )
            exception.severity_level = AAZIntType(
                serialized_name="severityLevel",
            )
            exception.type = AAZStrType()

            details = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details
            details.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element
            _element.id = AAZStrType()
            _element.message = AAZStrType()
            _element.outer_id = AAZStrType(
                serialized_name="outerId",
            )
            _element.parsed_stack = AAZListType(
                serialized_name="parsedStack",
            )
            _element.severity_level = AAZStrType(
                serialized_name="severityLevel",
            )
            _element.type = AAZStrType()

            parsed_stack = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element.parsed_stack
            parsed_stack.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element.parsed_stack.Element
            _element.assembly = AAZStrType()
            _element.level = AAZIntType()
            _element.line = AAZIntType()
            _element.method = AAZStrType()

            disc_page_view = cls._schema_on_200.value.Element.discriminate_by("type", "pageView")
            disc_page_view.page_view = AAZObjectType(
                serialized_name="pageView",
            )

            page_view = cls._schema_on_200.value.Element.discriminate_by("type", "pageView").page_view
            page_view.duration = AAZStrType()
            page_view.name = AAZStrType()
            page_view.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            page_view.url = AAZStrType()

            disc_performance_counter = cls._schema_on_200.value.Element.discriminate_by("type", "performanceCounter")
            disc_performance_counter.performance_counter = AAZObjectType(
                serialized_name="performanceCounter",
            )

            performance_counter = cls._schema_on_200.value.Element.discriminate_by("type", "performanceCounter").performance_counter
            performance_counter.category = AAZStrType()
            performance_counter.counter = AAZStrType()
            performance_counter.instance = AAZStrType()
            performance_counter.instance_name = AAZStrType(
                serialized_name="instanceName",
            )
            performance_counter.name = AAZStrType()
            performance_counter.value = AAZFloatType()

            disc_request = cls._schema_on_200.value.Element.discriminate_by("type", "request")
            disc_request.request = AAZObjectType()

            request = cls._schema_on_200.value.Element.discriminate_by("type", "request").request
            request.duration = AAZFloatType()
            request.id = AAZStrType()
            request.name = AAZStrType()
            request.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            request.result_code = AAZStrType(
                serialized_name="resultCode",
            )
            request.source = AAZStrType()
            request.success = AAZStrType()
            request.url = AAZStrType()

            disc_trace = cls._schema_on_200.value.Element.discriminate_by("type", "trace")
            disc_trace.trace = AAZObjectType()

            trace = cls._schema_on_200.value.Element.discriminate_by("type", "trace").trace
            trace.message = AAZStrType()
            trace.severity_level = AAZIntType(
                serialized_name="severityLevel",
            )

            return cls._schema_on_200

    class EventsGet(AAZHttpOperation):
        CLIENT_TYPE = "AAZMicrosoftInsightsDataPlaneClient_application_insights"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/v1/apps/{appId}/events/{eventType}/{eventId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "appId", self.ctx.args.app_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventId", self.ctx.args.event_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "eventType", self.ctx.args.event_type,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "timespan", self.ctx.args.timespan,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.aimessages = AAZListType(
                serialized_name="@ai.messages",
            )
            _schema_on_200.odatacontext = AAZStrType(
                serialized_name="@odata.context",
            )
            _schema_on_200.value = AAZListType()

            aimessages = cls._schema_on_200.aimessages
            aimessages.Element = AAZFreeFormDictType()
            _ShowHelper._build_schema_error_info_read(aimessages.Element)

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.ai = AAZObjectType()
            _element.application = AAZObjectType()
            _element.client = AAZObjectType()
            _element.cloud = AAZObjectType()
            _element.count = AAZIntType()
            _element.custom_dimensions = AAZObjectType(
                serialized_name="customDimensions",
            )
            _element.custom_measurements = AAZObjectType(
                serialized_name="customMeasurements",
            )
            _element.id = AAZStrType()
            _element.operation = AAZObjectType()
            _element.session = AAZObjectType()
            _element.timestamp = AAZStrType()
            _element.type = AAZStrType(
                flags={"required": True},
            )
            _element.user = AAZObjectType()

            ai = cls._schema_on_200.value.Element.ai
            ai.app_id = AAZStrType(
                serialized_name="appId",
            )
            ai.app_name = AAZStrType(
                serialized_name="appName",
            )
            ai.i_key = AAZStrType(
                serialized_name="iKey",
            )
            ai.sdk_version = AAZStrType(
                serialized_name="sdkVersion",
            )

            application = cls._schema_on_200.value.Element.application
            application.version = AAZStrType()

            client = cls._schema_on_200.value.Element.client
            client.browser = AAZStrType()
            client.city = AAZStrType()
            client.country_or_region = AAZStrType(
                serialized_name="countryOrRegion",
            )
            client.ip = AAZStrType()
            client.model = AAZStrType()
            client.os = AAZStrType()
            client.state_or_province = AAZStrType(
                serialized_name="stateOrProvince",
            )
            client.type = AAZStrType()

            cloud = cls._schema_on_200.value.Element.cloud
            cloud.role_instance = AAZStrType(
                serialized_name="roleInstance",
            )
            cloud.role_name = AAZStrType(
                serialized_name="roleName",
            )

            custom_dimensions = cls._schema_on_200.value.Element.custom_dimensions
            custom_dimensions.additional_properties = AAZDictType(
                serialized_name="additionalProperties",
            )

            additional_properties = cls._schema_on_200.value.Element.custom_dimensions.additional_properties
            additional_properties.Element = AAZAnyType()

            custom_measurements = cls._schema_on_200.value.Element.custom_measurements
            custom_measurements.additional_properties = AAZDictType(
                serialized_name="additionalProperties",
            )

            additional_properties = cls._schema_on_200.value.Element.custom_measurements.additional_properties
            additional_properties.Element = AAZAnyType()

            operation = cls._schema_on_200.value.Element.operation
            operation.id = AAZStrType()
            operation.name = AAZStrType()
            operation.parent_id = AAZStrType(
                serialized_name="parentId",
            )
            operation.synthetic_source = AAZStrType(
                serialized_name="syntheticSource",
            )

            session = cls._schema_on_200.value.Element.session
            session.id = AAZStrType()

            user = cls._schema_on_200.value.Element.user
            user.account_id = AAZStrType(
                serialized_name="accountId",
            )
            user.authenticated_id = AAZStrType(
                serialized_name="authenticatedId",
            )
            user.id = AAZStrType()

            disc_availability_result = cls._schema_on_200.value.Element.discriminate_by("type", "availabilityResult")
            disc_availability_result.availability_result = AAZObjectType(
                serialized_name="availabilityResult",
            )

            availability_result = cls._schema_on_200.value.Element.discriminate_by("type", "availabilityResult").availability_result
            availability_result.duration = AAZIntType()
            availability_result.id = AAZStrType()
            availability_result.location = AAZStrType()
            availability_result.message = AAZStrType()
            availability_result.name = AAZStrType()
            availability_result.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            availability_result.size = AAZStrType()
            availability_result.success = AAZStrType()

            disc_browser_timing = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming")
            disc_browser_timing.browser_timing = AAZObjectType(
                serialized_name="browserTiming",
            )
            disc_browser_timing.client_performance = AAZObjectType(
                serialized_name="clientPerformance",
            )

            browser_timing = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming").browser_timing
            browser_timing.name = AAZStrType()
            browser_timing.network_duration = AAZIntType(
                serialized_name="networkDuration",
            )
            browser_timing.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            browser_timing.processing_duration = AAZIntType(
                serialized_name="processingDuration",
            )
            browser_timing.receive_duration = AAZIntType(
                serialized_name="receiveDuration",
            )
            browser_timing.send_duration = AAZIntType(
                serialized_name="sendDuration",
            )
            browser_timing.total_duration = AAZIntType(
                serialized_name="totalDuration",
            )
            browser_timing.url = AAZStrType()
            browser_timing.url_host = AAZStrType(
                serialized_name="urlHost",
            )
            browser_timing.url_path = AAZStrType(
                serialized_name="urlPath",
            )

            client_performance = cls._schema_on_200.value.Element.discriminate_by("type", "browserTiming").client_performance
            client_performance.name = AAZStrType()

            disc_custom_event = cls._schema_on_200.value.Element.discriminate_by("type", "customEvent")
            disc_custom_event.custom_event = AAZObjectType(
                serialized_name="customEvent",
            )

            custom_event = cls._schema_on_200.value.Element.discriminate_by("type", "customEvent").custom_event
            custom_event.name = AAZStrType()

            disc_custom_metric = cls._schema_on_200.value.Element.discriminate_by("type", "customMetric")
            disc_custom_metric.custom_metric = AAZObjectType(
                serialized_name="customMetric",
            )

            custom_metric = cls._schema_on_200.value.Element.discriminate_by("type", "customMetric").custom_metric
            custom_metric.name = AAZStrType()
            custom_metric.value = AAZFloatType()
            custom_metric.value_count = AAZIntType(
                serialized_name="valueCount",
            )
            custom_metric.value_max = AAZFloatType(
                serialized_name="valueMax",
            )
            custom_metric.value_min = AAZFloatType(
                serialized_name="valueMin",
            )
            custom_metric.value_std_dev = AAZFloatType(
                serialized_name="valueStdDev",
            )
            custom_metric.value_sum = AAZFloatType(
                serialized_name="valueSum",
            )

            disc_dependency = cls._schema_on_200.value.Element.discriminate_by("type", "dependency")
            disc_dependency.dependency = AAZObjectType()

            dependency = cls._schema_on_200.value.Element.discriminate_by("type", "dependency").dependency
            dependency.data = AAZStrType()
            dependency.duration = AAZIntType()
            dependency.id = AAZStrType()
            dependency.name = AAZStrType()
            dependency.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            dependency.result_code = AAZStrType(
                serialized_name="resultCode",
            )
            dependency.success = AAZStrType()
            dependency.target = AAZStrType()
            dependency.type = AAZStrType()

            disc_exception = cls._schema_on_200.value.Element.discriminate_by("type", "exception")
            disc_exception.exception = AAZObjectType()

            exception = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception
            exception.assembly = AAZStrType()
            exception.details = AAZListType()
            exception.handled_at = AAZStrType(
                serialized_name="handledAt",
            )
            exception.innermost_assembly = AAZStrType(
                serialized_name="innermostAssembly",
            )
            exception.innermost_message = AAZStrType(
                serialized_name="innermostMessage",
            )
            exception.innermost_method = AAZStrType(
                serialized_name="innermostMethod",
            )
            exception.innermost_type = AAZStrType(
                serialized_name="innermostType",
            )
            exception.message = AAZStrType()
            exception.method = AAZStrType()
            exception.outer_assembly = AAZStrType(
                serialized_name="outerAssembly",
            )
            exception.outer_message = AAZStrType(
                serialized_name="outerMessage",
            )
            exception.outer_method = AAZStrType(
                serialized_name="outerMethod",
            )
            exception.outer_type = AAZStrType(
                serialized_name="outerType",
            )
            exception.problem_id = AAZStrType(
                serialized_name="problemId",
            )
            exception.severity_level = AAZIntType(
                serialized_name="severityLevel",
            )
            exception.type = AAZStrType()

            details = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details
            details.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element
            _element.id = AAZStrType()
            _element.message = AAZStrType()
            _element.outer_id = AAZStrType(
                serialized_name="outerId",
            )
            _element.parsed_stack = AAZListType(
                serialized_name="parsedStack",
            )
            _element.severity_level = AAZStrType(
                serialized_name="severityLevel",
            )
            _element.type = AAZStrType()

            parsed_stack = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element.parsed_stack
            parsed_stack.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.discriminate_by("type", "exception").exception.details.Element.parsed_stack.Element
            _element.assembly = AAZStrType()
            _element.level = AAZIntType()
            _element.line = AAZIntType()
            _element.method = AAZStrType()

            disc_page_view = cls._schema_on_200.value.Element.discriminate_by("type", "pageView")
            disc_page_view.page_view = AAZObjectType(
                serialized_name="pageView",
            )

            page_view = cls._schema_on_200.value.Element.discriminate_by("type", "pageView").page_view
            page_view.duration = AAZStrType()
            page_view.name = AAZStrType()
            page_view.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            page_view.url = AAZStrType()

            disc_performance_counter = cls._schema_on_200.value.Element.discriminate_by("type", "performanceCounter")
            disc_performance_counter.performance_counter = AAZObjectType(
                serialized_name="performanceCounter",
            )

            performance_counter = cls._schema_on_200.value.Element.discriminate_by("type", "performanceCounter").performance_counter
            performance_counter.category = AAZStrType()
            performance_counter.counter = AAZStrType()
            performance_counter.instance = AAZStrType()
            performance_counter.instance_name = AAZStrType(
                serialized_name="instanceName",
            )
            performance_counter.name = AAZStrType()
            performance_counter.value = AAZFloatType()

            disc_request = cls._schema_on_200.value.Element.discriminate_by("type", "request")
            disc_request.request = AAZObjectType()

            request = cls._schema_on_200.value.Element.discriminate_by("type", "request").request
            request.duration = AAZFloatType()
            request.id = AAZStrType()
            request.name = AAZStrType()
            request.performance_bucket = AAZStrType(
                serialized_name="performanceBucket",
            )
            request.result_code = AAZStrType(
                serialized_name="resultCode",
            )
            request.source = AAZStrType()
            request.success = AAZStrType()
            request.url = AAZStrType()

            disc_trace = cls._schema_on_200.value.Element.discriminate_by("type", "trace")
            disc_trace.trace = AAZObjectType()

            trace = cls._schema_on_200.value.Element.discriminate_by("type", "trace").trace
            trace.message = AAZStrType()
            trace.severity_level = AAZIntType(
                serialized_name="severityLevel",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_error_info_read = None

    @classmethod
    def _build_schema_error_info_read(cls, _schema):
        if cls._schema_error_info_read is not None:
            return

        cls._schema_error_info_read = _schema_error_info_read = AAZFreeFormDictType()



__all__ = ["Show"]
