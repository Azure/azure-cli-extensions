# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "resource-mover move-collection create",
)
class Create(AAZCommand):
    """Create a move collection.

    Creates or updates a move collection. The following types of move collections based on the move scenario are supported currently: 1. RegionToRegion (Moving resources across regions) 2. RegionToZone (Moving virtual machines into a zone within the same region)

    :example: Create a move-collection with system assigned identity. (RegionToRegion)
        az resource-mover move-collection create --identity type=SystemAssigned --location eastus2 --source-region eastus --target-region westus --name MyMoveCollection --resource-group MyResourceGroup

    :example: Create a zonal type move-collection with system assigned identity. (RegionToZone)
        az resource-mover move-collection create --identity type=SystemAssigned --location eastus2 --move-region uksouth --name MyZonalMoveCollection --resource-group MyResourceGroup --move-type RegionToZone
    """

    _aaz_info = {
        "version": "2023-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.migrate/movecollections/{}", "2023-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.move_collection_name = AAZStrArg(
            options=["-n", "--name", "--move-collection-name"],
            help="The Move Collection Name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of resource group. You can configure the default group using az configure --defaults group=<name>.",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Body",
            help="Defines the MSI properties of the Move Collection.",
        )
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="The geo-location where the resource lives.",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        identity = cls._args_schema.identity
        identity.principal_id = AAZStrArg(
            options=["principal-id"],
            help="Gets or sets the principal id.",
        )
        identity.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="Gets or sets the tenant id.",
        )
        identity.type = AAZStrArg(
            options=["type"],
            help="The type of identity used for the resource mover service.",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.move_region = AAZStrArg(
            options=["--move-region"],
            arg_group="Properties",
            help="Gets or sets the move region which indicates the region where the VM Regional to Zonal move will be conducted.",
        )
        _args_schema.move_type = AAZStrArg(
            options=["--move-type"],
            arg_group="Properties",
            help="Defines the MoveType.",
            enum={"RegionToRegion": "RegionToRegion", "RegionToZone": "RegionToZone"},
        )
        _args_schema.source_region = AAZStrArg(
            options=["--source-region"],
            arg_group="Properties",
            help="Gets or sets the source region.",
        )
        _args_schema.target_region = AAZStrArg(
            options=["--target-region"],
            arg_group="Properties",
            help="Gets or sets the target region.",
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="Gets or sets the version of move collection.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MoveCollectionsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MoveCollectionsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "moveCollectionName", self.ctx.args.move_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("principalId", AAZStrType, ".principal_id")
                identity.set_prop("tenantId", AAZStrType, ".tenant_id")
                identity.set_prop("type", AAZStrType, ".type")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("moveRegion", AAZStrType, ".move_region")
                properties.set_prop("moveType", AAZStrType, ".move_type")
                properties.set_prop("sourceRegion", AAZStrType, ".source_region")
                properties.set_prop("targetRegion", AAZStrType, ".target_region")
                properties.set_prop("version", AAZStrType, ".version")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
            )
            identity.type = AAZStrType()

            properties = cls._schema_on_200_201.properties
            properties.errors = AAZObjectType(
                flags={"read_only": True},
            )
            properties.move_region = AAZStrType(
                serialized_name="moveRegion",
            )
            properties.move_type = AAZStrType(
                serialized_name="moveType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.source_region = AAZStrType(
                serialized_name="sourceRegion",
            )
            properties.target_region = AAZStrType(
                serialized_name="targetRegion",
            )
            properties.version = AAZStrType()

            errors = cls._schema_on_200_201.properties.errors
            errors.properties = AAZObjectType()
            _CreateHelper._build_schema_move_resource_error_body_read(errors.properties)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    _schema_move_resource_error_body_read = None

    @classmethod
    def _build_schema_move_resource_error_body_read(cls, _schema):
        if cls._schema_move_resource_error_body_read is not None:
            _schema.code = cls._schema_move_resource_error_body_read.code
            _schema.details = cls._schema_move_resource_error_body_read.details
            _schema.message = cls._schema_move_resource_error_body_read.message
            _schema.target = cls._schema_move_resource_error_body_read.target
            return

        cls._schema_move_resource_error_body_read = _schema_move_resource_error_body_read = AAZObjectType()

        move_resource_error_body_read = _schema_move_resource_error_body_read
        move_resource_error_body_read.code = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.details = AAZListType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.message = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.target = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_move_resource_error_body_read.details
        details.Element = AAZObjectType()
        cls._build_schema_move_resource_error_body_read(details.Element)

        _schema.code = cls._schema_move_resource_error_body_read.code
        _schema.details = cls._schema_move_resource_error_body_read.details
        _schema.message = cls._schema_move_resource_error_body_read.message
        _schema.target = cls._schema_move_resource_error_body_read.target


__all__ = ["Create"]
