# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "resource-mover move-resource show",
)
class Show(AAZCommand):
    """Get the Move Resource.

    The 'az resource-mover move-resource show' command remains same for both 'RegionToRegion' and 'RegionToZone' type move collections.

    :example: Get the details of a move-resource.
        az resource-mover move-resource show --move-collection-name MyMoveCollection --name MyMoveResource --resource-group MyResourceGroup
    """

    _aaz_info = {
        "version": "2023-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.migrate/movecollections/{}/moveresources/{}", "2023-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.move_collection_name = AAZStrArg(
            options=["--move-collection-name"],
            help="The Move Collection Name.",
            required=True,
            id_part="name",
        )
        _args_schema.move_resource_name = AAZStrArg(
            options=["-n", "--name", "--move-resource-name"],
            help="The Move Resource Name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of resource group. You can configure the default group using az configure --defaults group=<name>.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MoveResourcesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MoveResourcesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "moveCollectionName", self.ctx.args.move_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "moveResourceName", self.ctx.args.move_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.depends_on = AAZListType(
                serialized_name="dependsOn",
                flags={"read_only": True},
            )
            properties.depends_on_overrides = AAZListType(
                serialized_name="dependsOnOverrides",
            )
            properties.errors = AAZObjectType(
                flags={"read_only": True},
            )
            properties.existing_target_id = AAZStrType(
                serialized_name="existingTargetId",
            )
            properties.is_resolve_required = AAZBoolType(
                serialized_name="isResolveRequired",
                flags={"read_only": True},
            )
            properties.move_status = AAZObjectType(
                serialized_name="moveStatus",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.resource_settings = AAZObjectType(
                serialized_name="resourceSettings",
            )
            _ShowHelper._build_schema_resource_settings_read(properties.resource_settings)
            properties.source_id = AAZStrType(
                serialized_name="sourceId",
                flags={"required": True},
            )
            properties.source_resource_settings = AAZObjectType(
                serialized_name="sourceResourceSettings",
            )
            _ShowHelper._build_schema_resource_settings_read(properties.source_resource_settings)
            properties.target_id = AAZStrType(
                serialized_name="targetId",
                flags={"read_only": True},
            )

            depends_on = cls._schema_on_200.properties.depends_on
            depends_on.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.depends_on.Element
            _element.automatic_resolution = AAZObjectType(
                serialized_name="automaticResolution",
            )
            _element.dependency_type = AAZStrType(
                serialized_name="dependencyType",
            )
            _element.id = AAZStrType()
            _element.is_optional = AAZStrType(
                serialized_name="isOptional",
            )
            _element.manual_resolution = AAZObjectType(
                serialized_name="manualResolution",
            )
            _element.resolution_status = AAZStrType(
                serialized_name="resolutionStatus",
            )
            _element.resolution_type = AAZStrType(
                serialized_name="resolutionType",
            )

            automatic_resolution = cls._schema_on_200.properties.depends_on.Element.automatic_resolution
            automatic_resolution.move_resource_id = AAZStrType(
                serialized_name="moveResourceId",
            )

            manual_resolution = cls._schema_on_200.properties.depends_on.Element.manual_resolution
            manual_resolution.target_id = AAZStrType(
                serialized_name="targetId",
            )

            depends_on_overrides = cls._schema_on_200.properties.depends_on_overrides
            depends_on_overrides.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.depends_on_overrides.Element
            _element.id = AAZStrType()
            _element.target_id = AAZStrType(
                serialized_name="targetId",
            )

            errors = cls._schema_on_200.properties.errors
            errors.properties = AAZObjectType()
            _ShowHelper._build_schema_move_resource_error_body_read(errors.properties)

            move_status = cls._schema_on_200.properties.move_status
            move_status.errors = AAZObjectType()
            move_status.job_status = AAZObjectType(
                serialized_name="jobStatus",
            )
            move_status.move_state = AAZStrType(
                serialized_name="moveState",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.properties.move_status.errors
            errors.properties = AAZObjectType()
            _ShowHelper._build_schema_move_resource_error_body_read(errors.properties)

            job_status = cls._schema_on_200.properties.move_status.job_status
            job_status.job_name = AAZStrType(
                serialized_name="jobName",
                flags={"read_only": True},
            )
            job_status.job_progress = AAZStrType(
                serialized_name="jobProgress",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_move_resource_error_body_read = None

    @classmethod
    def _build_schema_move_resource_error_body_read(cls, _schema):
        if cls._schema_move_resource_error_body_read is not None:
            _schema.code = cls._schema_move_resource_error_body_read.code
            _schema.details = cls._schema_move_resource_error_body_read.details
            _schema.message = cls._schema_move_resource_error_body_read.message
            _schema.target = cls._schema_move_resource_error_body_read.target
            return

        cls._schema_move_resource_error_body_read = _schema_move_resource_error_body_read = AAZObjectType()

        move_resource_error_body_read = _schema_move_resource_error_body_read
        move_resource_error_body_read.code = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.details = AAZListType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.message = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.target = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_move_resource_error_body_read.details
        details.Element = AAZObjectType()
        cls._build_schema_move_resource_error_body_read(details.Element)

        _schema.code = cls._schema_move_resource_error_body_read.code
        _schema.details = cls._schema_move_resource_error_body_read.details
        _schema.message = cls._schema_move_resource_error_body_read.message
        _schema.target = cls._schema_move_resource_error_body_read.target

    _schema_resource_settings_read = None

    @classmethod
    def _build_schema_resource_settings_read(cls, _schema):
        if cls._schema_resource_settings_read is not None:
            _schema.resource_type = cls._schema_resource_settings_read.resource_type
            _schema.target_resource_group_name = cls._schema_resource_settings_read.target_resource_group_name
            _schema.target_resource_name = cls._schema_resource_settings_read.target_resource_name
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/availabilitySets",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/availabilitySets",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/virtualMachines",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/virtualMachines",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/loadBalancers",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/loadBalancers",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkInterfaces",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkInterfaces",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkSecurityGroups",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkSecurityGroups",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/publicIPAddresses",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/publicIPAddresses",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/virtualNetworks",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/virtualNetworks",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/databases",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/databases",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/elasticPools",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/elasticPools",
                )
            )
            return

        cls._schema_resource_settings_read = _schema_resource_settings_read = AAZObjectType()

        resource_settings_read = _schema_resource_settings_read
        resource_settings_read.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )
        resource_settings_read.target_resource_group_name = AAZStrType(
            serialized_name="targetResourceGroupName",
        )
        resource_settings_read.target_resource_name = AAZStrType(
            serialized_name="targetResourceName",
        )

        disc_microsoft__compute_availability_sets = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/availabilitySets")
        disc_microsoft__compute_availability_sets.fault_domain = AAZIntType(
            serialized_name="faultDomain",
            nullable=True,
        )
        disc_microsoft__compute_availability_sets.tags = AAZDictType()
        disc_microsoft__compute_availability_sets.update_domain = AAZIntType(
            serialized_name="updateDomain",
            nullable=True,
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/availabilitySets").tags
        tags.Element = AAZStrType()

        disc_microsoft__compute_virtual_machines = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines")
        disc_microsoft__compute_virtual_machines.tags = AAZDictType()
        disc_microsoft__compute_virtual_machines.target_availability_set_id = AAZStrType(
            serialized_name="targetAvailabilitySetId",
        )
        disc_microsoft__compute_virtual_machines.target_availability_zone = AAZStrType(
            serialized_name="targetAvailabilityZone",
        )
        disc_microsoft__compute_virtual_machines.target_vm_size = AAZStrType(
            serialized_name="targetVmSize",
        )
        disc_microsoft__compute_virtual_machines.user_managed_identities = AAZListType(
            serialized_name="userManagedIdentities",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines").tags
        tags.Element = AAZStrType()

        user_managed_identities = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines").user_managed_identities
        user_managed_identities.Element = AAZStrType()

        disc_microsoft__network_load_balancers = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers")
        disc_microsoft__network_load_balancers.backend_address_pools = AAZListType(
            serialized_name="backendAddressPools",
        )
        disc_microsoft__network_load_balancers.frontend_ip_configurations = AAZListType(
            serialized_name="frontendIPConfigurations",
        )
        disc_microsoft__network_load_balancers.sku = AAZStrType()
        disc_microsoft__network_load_balancers.tags = AAZDictType()
        disc_microsoft__network_load_balancers.zones = AAZStrType()

        backend_address_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").backend_address_pools
        backend_address_pools.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").backend_address_pools.Element
        _element.name = AAZStrType()

        frontend_ip_configurations = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").frontend_ip_configurations
        frontend_ip_configurations.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").frontend_ip_configurations.Element
        _element.name = AAZStrType()
        _element.private_ip_address = AAZStrType(
            serialized_name="privateIpAddress",
        )
        _element.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIpAllocationMethod",
        )
        _element.subnet = AAZObjectType()
        cls._build_schema_subnet_reference_read(_element.subnet)
        _element.zones = AAZStrType()

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_network_interfaces = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces")
        disc_microsoft__network_network_interfaces.enable_accelerated_networking = AAZBoolType(
            serialized_name="enableAcceleratedNetworking",
            nullable=True,
        )
        disc_microsoft__network_network_interfaces.ip_configurations = AAZListType(
            serialized_name="ipConfigurations",
        )
        disc_microsoft__network_network_interfaces.tags = AAZDictType()

        ip_configurations = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations
        ip_configurations.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element
        _element.load_balancer_backend_address_pools = AAZListType(
            serialized_name="loadBalancerBackendAddressPools",
        )
        _element.load_balancer_nat_rules = AAZListType(
            serialized_name="loadBalancerNatRules",
        )
        _element.name = AAZStrType()
        _element.primary = AAZBoolType()
        _element.private_ip_address = AAZStrType(
            serialized_name="privateIpAddress",
        )
        _element.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIpAllocationMethod",
        )
        _element.public_ip = AAZObjectType(
            serialized_name="publicIp",
        )
        _element.subnet = AAZObjectType()
        cls._build_schema_subnet_reference_read(_element.subnet)

        load_balancer_backend_address_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_backend_address_pools.Element
        _element.name = AAZStrType()
        _element.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        load_balancer_nat_rules = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_nat_rules
        load_balancer_nat_rules.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_nat_rules.Element
        _element.name = AAZStrType()
        _element.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        public_ip = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.public_ip
        public_ip.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_network_security_groups = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups")
        disc_microsoft__network_network_security_groups.security_rules = AAZListType(
            serialized_name="securityRules",
        )
        disc_microsoft__network_network_security_groups.tags = AAZDictType()

        security_rules = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").security_rules
        security_rules.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").security_rules.Element
        _element.access = AAZStrType()
        _element.description = AAZStrType()
        _element.destination_address_prefix = AAZStrType(
            serialized_name="destinationAddressPrefix",
        )
        _element.destination_port_range = AAZStrType(
            serialized_name="destinationPortRange",
        )
        _element.direction = AAZStrType()
        _element.name = AAZStrType()
        _element.priority = AAZIntType()
        _element.protocol = AAZStrType()
        _element.source_address_prefix = AAZStrType(
            serialized_name="sourceAddressPrefix",
        )
        _element.source_port_range = AAZStrType(
            serialized_name="sourcePortRange",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_public_ip_addresses = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/publicIPAddresses")
        disc_microsoft__network_public_ip_addresses.domain_name_label = AAZStrType(
            serialized_name="domainNameLabel",
        )
        disc_microsoft__network_public_ip_addresses.fqdn = AAZStrType()
        disc_microsoft__network_public_ip_addresses.public_ip_allocation_method = AAZStrType(
            serialized_name="publicIpAllocationMethod",
        )
        disc_microsoft__network_public_ip_addresses.sku = AAZStrType()
        disc_microsoft__network_public_ip_addresses.tags = AAZDictType()
        disc_microsoft__network_public_ip_addresses.zones = AAZStrType()

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/publicIPAddresses").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_virtual_networks = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks")
        disc_microsoft__network_virtual_networks.address_space = AAZListType(
            serialized_name="addressSpace",
        )
        disc_microsoft__network_virtual_networks.dns_servers = AAZListType(
            serialized_name="dnsServers",
        )
        disc_microsoft__network_virtual_networks.enable_ddos_protection = AAZBoolType(
            serialized_name="enableDdosProtection",
            nullable=True,
        )
        disc_microsoft__network_virtual_networks.subnets = AAZListType()
        disc_microsoft__network_virtual_networks.tags = AAZDictType()

        address_space = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").address_space
        address_space.Element = AAZStrType()

        dns_servers = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").dns_servers
        dns_servers.Element = AAZStrType()

        subnets = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets
        subnets.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets.Element
        _element.address_prefix = AAZStrType(
            serialized_name="addressPrefix",
        )
        _element.name = AAZStrType()
        _element.network_security_group = AAZObjectType(
            serialized_name="networkSecurityGroup",
        )

        network_security_group = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets.Element.network_security_group
        network_security_group.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").tags
        tags.Element = AAZStrType()

        disc_microsoft__sql_servers_databases = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/databases")
        disc_microsoft__sql_servers_databases.tags = AAZDictType()
        disc_microsoft__sql_servers_databases.zone_redundant = AAZStrType(
            serialized_name="zoneRedundant",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/databases").tags
        tags.Element = AAZStrType()

        disc_microsoft__sql_servers_elastic_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/elasticPools")
        disc_microsoft__sql_servers_elastic_pools.tags = AAZDictType()
        disc_microsoft__sql_servers_elastic_pools.zone_redundant = AAZStrType(
            serialized_name="zoneRedundant",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/elasticPools").tags
        tags.Element = AAZStrType()

        _schema.resource_type = cls._schema_resource_settings_read.resource_type
        _schema.target_resource_group_name = cls._schema_resource_settings_read.target_resource_group_name
        _schema.target_resource_name = cls._schema_resource_settings_read.target_resource_name
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/availabilitySets",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/availabilitySets",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/virtualMachines",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/virtualMachines",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/loadBalancers",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/loadBalancers",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkInterfaces",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkInterfaces",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkSecurityGroups",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkSecurityGroups",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/publicIPAddresses",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/publicIPAddresses",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/virtualNetworks",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/virtualNetworks",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/databases",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/databases",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/elasticPools",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/elasticPools",
                )
            )

    _schema_subnet_reference_read = None

    @classmethod
    def _build_schema_subnet_reference_read(cls, _schema):
        if cls._schema_subnet_reference_read is not None:
            _schema.name = cls._schema_subnet_reference_read.name
            _schema.source_arm_resource_id = cls._schema_subnet_reference_read.source_arm_resource_id
            return

        cls._schema_subnet_reference_read = _schema_subnet_reference_read = AAZObjectType()

        subnet_reference_read = _schema_subnet_reference_read
        subnet_reference_read.name = AAZStrType()
        subnet_reference_read.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        _schema.name = cls._schema_subnet_reference_read.name
        _schema.source_arm_resource_id = cls._schema_subnet_reference_read.source_arm_resource_id


__all__ = ["Show"]
