# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "resource-mover move-resource add",
)
class Add(AAZCommand):
    """Create a Move Resource in the move collection.

    The 'az resource-mover move-resource add' command remains same for both 'RegionToRegion' (default) and 'RegionToZone' type move collections.

    :example: Add a vNet as a move-resource to the move-collection. (RegionToRegion)
        az resource-mover move-resource add --resource-group MyResourceGroup --move-collection-name MyMoveCollection --name MoveResourceName --source-id "/subscriptions/subID/resourceGroups/myRG/providers/Microsoft.Network/virtualNetworks/MyVNet" --resource-settings '{ "resourceType": "Microsoft.Network/virtualNetworks", "targetResourceName": "MyVNet-target" }'

    :example: Add a VM as a move-resource to the move-collection. (RegionToZone)
        az resource-mover move-resource add --resource-group MyResourceGroup --move-collection-name MyZonalMoveCollection --name MyVMMoveResource --source-id "/subscriptions/subID/resourceGroups/MyResourceGroup/providers/Microsoft.Compute/virtualMachines/MyVM" --resource-settings '{ "resourceType": "Microsoft.Compute/virtualMachines", "targetResourceName": "MyVM", "targetAvailabilityZone": "2", "targetVmSize": "Standard_B2s" }'

    :example: Add a VM as a move-resource to the move-collection. (RegionToRegion)
        az resource-mover move-resource add --resource-group MyResourceGroup --move-collection-name MyMoveCollection --name MoveResourceName --source-id "/subscriptions/subID/resourceGroups/eastusRG/providers/Microsoft.Compute/virtualMachines/MyVM" --depends-on-overrides id="/subscriptions/subID/resourceGroups/eastusRG/providers/Microsoft.Network/networkInterfaces/MyNIC" target-id="/subscriptions/subID/resourceGroups/westusRG/providers/Microsoft.Network/networkInterfaces/MyNIC" --resource-settings '{ "resourceType": "Microsoft.Compute/virtualMachines", "targetAvailabilitySetId": "/subscriptions/subID/resourceGroups/eastusRG/providers/Microsoft.Compute/availabilitySets/MyAVSet", "targetAvailabilityZone": "2", "targetResourceName": "MyVM-target", "targetVmSize": null, "userManagedIdentities": [/subscriptions/subid/resourceGroups/eastusRG/providers/Microsoft.ManagedIdentity/userAssignedIdentities/umi1] }'
    """

    _aaz_info = {
        "version": "2023-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.migrate/movecollections/{}/moveresources/{}", "2023-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.move_collection_name = AAZStrArg(
            options=["--move-collection-name"],
            help="The Move Collection Name.",
            required=True,
            id_part="name",
        )
        _args_schema.move_resource_name = AAZStrArg(
            options=["-n", "--name", "--move-resource-name"],
            help="The Move Resource Name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of resource group. You can configure the default group using az configure --defaults group=<name>.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.depends_on_overrides = AAZListArg(
            options=["--depends-on-overrides"],
            arg_group="Properties",
            help="Gets or sets the move resource dependencies overrides.",
        )
        _args_schema.existing_target_id = AAZStrArg(
            options=["--existing-target-id"],
            arg_group="Properties",
            help="Gets or sets the existing target ARM Id of the resource.",
        )
        _args_schema.resource_settings_generated = AAZObjectArg(
            options=["--resource-settings-generated"],
            arg_group="Properties",
            help="Gets or sets the resource settings.",
        )
        _args_schema.source_id = AAZStrArg(
            options=["--source-id"],
            arg_group="Properties",
            help="Gets or sets the Source ARM Id of the resource.",
        )

        depends_on_overrides = cls._args_schema.depends_on_overrides
        depends_on_overrides.Element = AAZObjectArg()

        _element = cls._args_schema.depends_on_overrides.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Gets or sets the ARM ID of the dependent resource.",
        )
        _element.target_id = AAZStrArg(
            options=["target-id"],
            help="Gets or sets the resource ARM id of either the MoveResource or the resource ARM ID of the dependent resource.",
        )

        resource_settings_generated = cls._args_schema.resource_settings_generated
        resource_settings_generated.microsoft_compute_availability_sets = AAZObjectArg(
            options=["microsoft-compute-availability-sets"],
        )
        resource_settings_generated.microsoft_compute_virtual_machines = AAZObjectArg(
            options=["microsoft-compute-virtual-machines"],
        )
        resource_settings_generated.microsoft_network_load_balancers = AAZObjectArg(
            options=["microsoft-network-load-balancers"],
        )
        resource_settings_generated.microsoft_network_network_interfaces = AAZObjectArg(
            options=["microsoft-network-network-interfaces"],
        )
        resource_settings_generated.microsoft_network_network_security_groups = AAZObjectArg(
            options=["microsoft-network-network-security-groups"],
        )
        resource_settings_generated.microsoft_network_public_ip_addresses = AAZObjectArg(
            options=["microsoft-network-public-ip-addresses"],
        )
        resource_settings_generated.microsoft_network_virtual_networks = AAZObjectArg(
            options=["microsoft-network-virtual-networks"],
        )
        resource_settings_generated.microsoft_sql_servers_databases = AAZObjectArg(
            options=["microsoft-sql-servers-databases"],
        )
        resource_settings_generated.microsoft_sql_servers_elastic_pools = AAZObjectArg(
            options=["microsoft-sql-servers-elastic-pools"],
        )
        resource_settings_generated.target_resource_group_name = AAZStrArg(
            options=["target-resource-group-name"],
            help="Gets or sets the target resource group name.",
        )
        resource_settings_generated.target_resource_name = AAZStrArg(
            options=["target-resource-name"],
            help="Gets or sets the target Resource name.",
        )

        microsoft_compute_availability_sets = cls._args_schema.resource_settings_generated.microsoft_compute_availability_sets
        microsoft_compute_availability_sets.fault_domain = AAZIntArg(
            options=["fault-domain"],
            help="Gets or sets the target fault domain.",
            nullable=True,
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        microsoft_compute_availability_sets.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_compute_availability_sets.update_domain = AAZIntArg(
            options=["update-domain"],
            help="Gets or sets the target update domain.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=20,
                minimum=1,
            ),
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_compute_availability_sets.tags
        tags.Element = AAZStrArg()

        microsoft_compute_virtual_machines = cls._args_schema.resource_settings_generated.microsoft_compute_virtual_machines
        microsoft_compute_virtual_machines.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_compute_virtual_machines.target_availability_set_id = AAZStrArg(
            options=["target-availability-set-id"],
            help="Gets or sets the target availability set id for virtual machines not in an availability set at source.",
        )
        microsoft_compute_virtual_machines.target_availability_zone = AAZStrArg(
            options=["target-availability-zone"],
            help="Gets or sets the target availability zone.",
            enum={"1": "1", "2": "2", "3": "3", "NA": "NA"},
        )
        microsoft_compute_virtual_machines.target_vm_size = AAZStrArg(
            options=["target-vm-size"],
            help="Gets or sets the target virtual machine size.",
        )
        microsoft_compute_virtual_machines.user_managed_identities = AAZListArg(
            options=["user-managed-identities"],
            help="Gets or sets user-managed identities",
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_compute_virtual_machines.tags
        tags.Element = AAZStrArg()

        user_managed_identities = cls._args_schema.resource_settings_generated.microsoft_compute_virtual_machines.user_managed_identities
        user_managed_identities.Element = AAZStrArg()

        microsoft_network_load_balancers = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers
        microsoft_network_load_balancers.backend_address_pools = AAZListArg(
            options=["backend-address-pools"],
            help="Gets or sets the backend address pools of the load balancer.",
        )
        microsoft_network_load_balancers.frontend_ip_configurations = AAZListArg(
            options=["frontend-ip-configurations"],
            help="Gets or sets the frontend IP configurations of the load balancer.",
        )
        microsoft_network_load_balancers.sku = AAZStrArg(
            options=["sku"],
            help="Gets or sets load balancer sku (Basic/Standard).",
        )
        microsoft_network_load_balancers.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_network_load_balancers.zones = AAZStrArg(
            options=["zones"],
            help="Gets or sets the csv list of zones common for all frontend IP configurations. Note this is given precedence only if frontend IP configurations settings are not present.",
        )

        backend_address_pools = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers.backend_address_pools
        backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers.backend_address_pools.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the backend address pool name.",
        )

        frontend_ip_configurations = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers.frontend_ip_configurations
        frontend_ip_configurations.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers.frontend_ip_configurations.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the frontend IP configuration name.",
        )
        _element.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="Gets or sets the IP address of the Load Balancer. This is only specified if a specific private IP address shall be allocated from the subnet specified in subnetRef.",
        )
        _element.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Gets or sets PrivateIP allocation method (Static/Dynamic).",
        )
        _element.subnet = AAZObjectArg(
            options=["subnet"],
        )
        cls._build_args_subnet_reference_create(_element.subnet)
        _element.zones = AAZStrArg(
            options=["zones"],
            help="Gets or sets the csv list of zones.",
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_network_load_balancers.tags
        tags.Element = AAZStrArg()

        microsoft_network_network_interfaces = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces
        microsoft_network_network_interfaces.enable_accelerated_networking = AAZBoolArg(
            options=["enable-accelerated-networking"],
            help="Gets or sets a value indicating whether accelerated networking is enabled.",
            nullable=True,
        )
        microsoft_network_network_interfaces.ip_configurations = AAZListArg(
            options=["ip-configurations"],
            help="Gets or sets the IP configurations of the NIC.",
        )
        microsoft_network_network_interfaces.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )

        ip_configurations = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations
        ip_configurations.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element
        _element.load_balancer_backend_address_pools = AAZListArg(
            options=["load-balancer-backend-address-pools"],
            help="Gets or sets the references of the load balancer backend address pools.",
        )
        _element.load_balancer_nat_rules = AAZListArg(
            options=["load-balancer-nat-rules"],
            help="Gets or sets the references of the load balancer NAT rules.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the IP configuration name.",
        )
        _element.primary = AAZBoolArg(
            options=["primary"],
            help="Gets or sets a value indicating whether this IP configuration is the primary.",
        )
        _element.private_ip_address = AAZStrArg(
            options=["private-ip-address"],
            help="Gets or sets the private IP address of the network interface IP Configuration.",
        )
        _element.private_ip_allocation_method = AAZStrArg(
            options=["private-ip-allocation-method"],
            help="Gets or sets the private IP address allocation method.",
        )
        _element.public_ip = AAZObjectArg(
            options=["public-ip"],
            help="Defines reference to a public IP.",
        )
        _element.subnet = AAZObjectArg(
            options=["subnet"],
            help="Defines reference to subnet.",
        )
        cls._build_args_subnet_reference_create(_element.subnet)

        load_balancer_backend_address_pools = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element.load_balancer_backend_address_pools.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets the name of the proxy resource on the target side.",
        )
        _element.source_arm_resource_id = AAZStrArg(
            options=["source-arm-resource-id"],
            help="Gets the ARM resource ID of the tracked resource being referenced.",
            required=True,
        )

        load_balancer_nat_rules = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element.load_balancer_nat_rules
        load_balancer_nat_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element.load_balancer_nat_rules.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets the name of the proxy resource on the target side.",
        )
        _element.source_arm_resource_id = AAZStrArg(
            options=["source-arm-resource-id"],
            help="Gets the ARM resource ID of the tracked resource being referenced.",
            required=True,
        )

        public_ip = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.ip_configurations.Element.public_ip
        public_ip.source_arm_resource_id = AAZStrArg(
            options=["source-arm-resource-id"],
            help="Gets the ARM resource ID of the tracked resource being referenced.",
            required=True,
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_network_network_interfaces.tags
        tags.Element = AAZStrArg()

        microsoft_network_network_security_groups = cls._args_schema.resource_settings_generated.microsoft_network_network_security_groups
        microsoft_network_network_security_groups.security_rules = AAZListArg(
            options=["security-rules"],
            help="Gets or sets Security rules of network security group.",
        )
        microsoft_network_network_security_groups.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )

        security_rules = cls._args_schema.resource_settings_generated.microsoft_network_network_security_groups.security_rules
        security_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_network_security_groups.security_rules.Element
        _element.access = AAZStrArg(
            options=["access"],
            help="Gets or sets whether network traffic is allowed or denied. Possible values are 'Allow' and 'Deny'.",
        )
        _element.description = AAZStrArg(
            options=["description"],
            help="Gets or sets a description for this rule. Restricted to 140 chars.",
        )
        _element.destination_address_prefix = AAZStrArg(
            options=["destination-address-prefix"],
            help="Gets or sets destination address prefix. CIDR or source IP range. A '*' can also be used to match all source IPs. Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used.",
        )
        _element.destination_port_range = AAZStrArg(
            options=["destination-port-range"],
            help="Gets or sets Destination Port or Range. Integer or range between 0 and 65535. A '*' can also be used to match all ports.",
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            help="Gets or sets the direction of the rule.InBound or Outbound. The direction specifies if rule will be evaluated on incoming or outgoing traffic.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the Security rule name.",
        )
        _element.priority = AAZIntArg(
            options=["priority"],
            help="Gets or sets the priority of the rule. The value can be between 100 and 4096. The priority number must be unique for each rule in the collection. The lower the priority number, the higher the priority of the rule.",
        )
        _element.protocol = AAZStrArg(
            options=["protocol"],
            help="Gets or sets Network protocol this rule applies to. Can be Tcp, Udp or All(*).",
        )
        _element.source_address_prefix = AAZStrArg(
            options=["source-address-prefix"],
            help="Gets or sets source address prefix. CIDR or source IP range. A '*' can also be used to match all source IPs.  Default tags such as 'VirtualNetwork', 'AzureLoadBalancer' and 'Internet' can also be used. If this is an ingress rule, specifies where network traffic originates from.",
        )
        _element.source_port_range = AAZStrArg(
            options=["source-port-range"],
            help="Gets or sets Source Port or Range. Integer or range between 0 and 65535. A '*' can also be used to match all ports.",
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_network_network_security_groups.tags
        tags.Element = AAZStrArg()

        microsoft_network_public_ip_addresses = cls._args_schema.resource_settings_generated.microsoft_network_public_ip_addresses
        microsoft_network_public_ip_addresses.domain_name_label = AAZStrArg(
            options=["domain-name-label"],
            help="Gets or sets the domain name label.",
        )
        microsoft_network_public_ip_addresses.fqdn = AAZStrArg(
            options=["fqdn"],
            help="Gets or sets the fully qualified domain name.",
        )
        microsoft_network_public_ip_addresses.public_ip_allocation_method = AAZStrArg(
            options=["public-ip-allocation-method"],
            help="Gets or sets public IP allocation method.",
        )
        microsoft_network_public_ip_addresses.sku = AAZStrArg(
            options=["sku"],
            help="Gets or sets public IP sku.",
        )
        microsoft_network_public_ip_addresses.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_network_public_ip_addresses.zones = AAZStrArg(
            options=["zones"],
            help="Gets or sets public IP zones.",
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_network_public_ip_addresses.tags
        tags.Element = AAZStrArg()

        microsoft_network_virtual_networks = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks
        microsoft_network_virtual_networks.address_space = AAZListArg(
            options=["address-space"],
            help="Gets or sets the address prefixes for the virtual network.",
        )
        microsoft_network_virtual_networks.dns_servers = AAZListArg(
            options=["dns-servers"],
            help="Gets or sets DHCPOptions that contains an array of DNS servers available to VMs deployed in the virtual network.",
        )
        microsoft_network_virtual_networks.enable_ddos_protection = AAZBoolArg(
            options=["enable-ddos-protection"],
            help="Gets or sets a value indicating whether gets or sets whether the DDOS protection should be switched on.",
            nullable=True,
        )
        microsoft_network_virtual_networks.subnets = AAZListArg(
            options=["subnets"],
            help="Gets or sets List of subnets in a VirtualNetwork.",
        )
        microsoft_network_virtual_networks.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )

        address_space = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.address_space
        address_space.Element = AAZStrArg()

        dns_servers = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.dns_servers
        dns_servers.Element = AAZStrArg()

        subnets = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.subnets
        subnets.Element = AAZObjectArg()

        _element = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.subnets.Element
        _element.address_prefix = AAZStrArg(
            options=["address-prefix"],
            help="Gets or sets address prefix for the subnet.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the Subnet name.",
        )
        _element.network_security_group = AAZObjectArg(
            options=["network-security-group"],
            help="Defines reference to NSG.",
        )

        network_security_group = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.subnets.Element.network_security_group
        network_security_group.source_arm_resource_id = AAZStrArg(
            options=["source-arm-resource-id"],
            help="Gets the ARM resource ID of the tracked resource being referenced.",
            required=True,
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_network_virtual_networks.tags
        tags.Element = AAZStrArg()

        microsoft_sql_servers_databases = cls._args_schema.resource_settings_generated.microsoft_sql_servers_databases
        microsoft_sql_servers_databases.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_sql_servers_databases.zone_redundant = AAZStrArg(
            options=["zone-redundant"],
            help="Defines the zone redundant resource setting.",
            enum={"Disable": "Disable", "Enable": "Enable"},
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_sql_servers_databases.tags
        tags.Element = AAZStrArg()

        microsoft_sql_servers_elastic_pools = cls._args_schema.resource_settings_generated.microsoft_sql_servers_elastic_pools
        microsoft_sql_servers_elastic_pools.tags = AAZDictArg(
            options=["tags"],
            help="Gets or sets the Resource tags.",
        )
        microsoft_sql_servers_elastic_pools.zone_redundant = AAZStrArg(
            options=["zone-redundant"],
            help="Defines the zone redundant resource setting.",
            enum={"Disable": "Disable", "Enable": "Enable"},
        )

        tags = cls._args_schema.resource_settings_generated.microsoft_sql_servers_elastic_pools.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_subnet_reference_create = None

    @classmethod
    def _build_args_subnet_reference_create(cls, _schema):
        if cls._args_subnet_reference_create is not None:
            _schema.name = cls._args_subnet_reference_create.name
            _schema.source_arm_resource_id = cls._args_subnet_reference_create.source_arm_resource_id
            return

        cls._args_subnet_reference_create = AAZObjectArg()

        subnet_reference_create = cls._args_subnet_reference_create
        subnet_reference_create.name = AAZStrArg(
            options=["name"],
            help="Gets the name of the proxy resource on the target side.",
        )
        subnet_reference_create.source_arm_resource_id = AAZStrArg(
            options=["source-arm-resource-id"],
            help="Gets the ARM resource ID of the tracked resource being referenced.",
            required=True,
        )

        _schema.name = cls._args_subnet_reference_create.name
        _schema.source_arm_resource_id = cls._args_subnet_reference_create.source_arm_resource_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.MoveResourcesCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MoveResourcesCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Migrate/moveCollections/{moveCollectionName}/moveResources/{moveResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "moveCollectionName", self.ctx.args.move_collection_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "moveResourceName", self.ctx.args.move_resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("dependsOnOverrides", AAZListType, ".depends_on_overrides")
                properties.set_prop("existingTargetId", AAZStrType, ".existing_target_id")
                properties.set_prop("resourceSettings", AAZObjectType, ".resource_settings_generated")
                properties.set_prop("sourceId", AAZStrType, ".source_id", typ_kwargs={"flags": {"required": True}})

            depends_on_overrides = _builder.get(".properties.dependsOnOverrides")
            if depends_on_overrides is not None:
                depends_on_overrides.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dependsOnOverrides[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id")
                _elements.set_prop("targetId", AAZStrType, ".target_id")

            resource_settings = _builder.get(".properties.resourceSettings")
            if resource_settings is not None:
                resource_settings.set_const("resourceType", "Microsoft.Compute/availabilitySets", AAZStrType, ".microsoft_compute_availability_sets", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Compute/virtualMachines", AAZStrType, ".microsoft_compute_virtual_machines", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Network/loadBalancers", AAZStrType, ".microsoft_network_load_balancers", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Network/networkInterfaces", AAZStrType, ".microsoft_network_network_interfaces", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Network/networkSecurityGroups", AAZStrType, ".microsoft_network_network_security_groups", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Network/publicIPAddresses", AAZStrType, ".microsoft_network_public_ip_addresses", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Network/virtualNetworks", AAZStrType, ".microsoft_network_virtual_networks", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Sql/servers/databases", AAZStrType, ".microsoft_sql_servers_databases", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_const("resourceType", "Microsoft.Sql/servers/elasticPools", AAZStrType, ".microsoft_sql_servers_elastic_pools", typ_kwargs={"flags": {"required": True}})
                resource_settings.set_prop("targetResourceGroupName", AAZStrType, ".target_resource_group_name")
                resource_settings.set_prop("targetResourceName", AAZStrType, ".target_resource_name")
                resource_settings.discriminate_by("resourceType", "Microsoft.Compute/availabilitySets")
                resource_settings.discriminate_by("resourceType", "Microsoft.Compute/virtualMachines")
                resource_settings.discriminate_by("resourceType", "Microsoft.Network/loadBalancers")
                resource_settings.discriminate_by("resourceType", "Microsoft.Network/networkInterfaces")
                resource_settings.discriminate_by("resourceType", "Microsoft.Network/networkSecurityGroups")
                resource_settings.discriminate_by("resourceType", "Microsoft.Network/publicIPAddresses")
                resource_settings.discriminate_by("resourceType", "Microsoft.Network/virtualNetworks")
                resource_settings.discriminate_by("resourceType", "Microsoft.Sql/servers/databases")
                resource_settings.discriminate_by("resourceType", "Microsoft.Sql/servers/elasticPools")

            disc_microsoft__compute_availability_sets = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Compute/availabilitySets}")
            if disc_microsoft__compute_availability_sets is not None:
                disc_microsoft__compute_availability_sets.set_prop("faultDomain", AAZIntType, ".microsoft_compute_availability_sets.fault_domain", typ_kwargs={"nullable": True})
                disc_microsoft__compute_availability_sets.set_prop("tags", AAZDictType, ".microsoft_compute_availability_sets.tags")
                disc_microsoft__compute_availability_sets.set_prop("updateDomain", AAZIntType, ".microsoft_compute_availability_sets.update_domain", typ_kwargs={"nullable": True})

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Compute/availabilitySets}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__compute_virtual_machines = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Compute/virtualMachines}")
            if disc_microsoft__compute_virtual_machines is not None:
                disc_microsoft__compute_virtual_machines.set_prop("tags", AAZDictType, ".microsoft_compute_virtual_machines.tags")
                disc_microsoft__compute_virtual_machines.set_prop("targetAvailabilitySetId", AAZStrType, ".microsoft_compute_virtual_machines.target_availability_set_id")
                disc_microsoft__compute_virtual_machines.set_prop("targetAvailabilityZone", AAZStrType, ".microsoft_compute_virtual_machines.target_availability_zone")
                disc_microsoft__compute_virtual_machines.set_prop("targetVmSize", AAZStrType, ".microsoft_compute_virtual_machines.target_vm_size")
                disc_microsoft__compute_virtual_machines.set_prop("userManagedIdentities", AAZListType, ".microsoft_compute_virtual_machines.user_managed_identities")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Compute/virtualMachines}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            user_managed_identities = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Compute/virtualMachines}.userManagedIdentities")
            if user_managed_identities is not None:
                user_managed_identities.set_elements(AAZStrType, ".")

            disc_microsoft__network_load_balancers = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}")
            if disc_microsoft__network_load_balancers is not None:
                disc_microsoft__network_load_balancers.set_prop("backendAddressPools", AAZListType, ".microsoft_network_load_balancers.backend_address_pools")
                disc_microsoft__network_load_balancers.set_prop("frontendIPConfigurations", AAZListType, ".microsoft_network_load_balancers.frontend_ip_configurations")
                disc_microsoft__network_load_balancers.set_prop("sku", AAZStrType, ".microsoft_network_load_balancers.sku")
                disc_microsoft__network_load_balancers.set_prop("tags", AAZDictType, ".microsoft_network_load_balancers.tags")
                disc_microsoft__network_load_balancers.set_prop("zones", AAZStrType, ".microsoft_network_load_balancers.zones")

            backend_address_pools = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}.backendAddressPools")
            if backend_address_pools is not None:
                backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}.backendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")

            frontend_ip_configurations = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}.frontendIPConfigurations")
            if frontend_ip_configurations is not None:
                frontend_ip_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}.frontendIPConfigurations[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("privateIpAddress", AAZStrType, ".private_ip_address")
                _elements.set_prop("privateIpAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                _AddHelper._build_schema_subnet_reference_create(_elements.set_prop("subnet", AAZObjectType, ".subnet"))
                _elements.set_prop("zones", AAZStrType, ".zones")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/loadBalancers}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__network_network_interfaces = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}")
            if disc_microsoft__network_network_interfaces is not None:
                disc_microsoft__network_network_interfaces.set_prop("enableAcceleratedNetworking", AAZBoolType, ".microsoft_network_network_interfaces.enable_accelerated_networking", typ_kwargs={"nullable": True})
                disc_microsoft__network_network_interfaces.set_prop("ipConfigurations", AAZListType, ".microsoft_network_network_interfaces.ip_configurations")
                disc_microsoft__network_network_interfaces.set_prop("tags", AAZDictType, ".microsoft_network_network_interfaces.tags")

            ip_configurations = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations")
            if ip_configurations is not None:
                ip_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[]")
            if _elements is not None:
                _elements.set_prop("loadBalancerBackendAddressPools", AAZListType, ".load_balancer_backend_address_pools")
                _elements.set_prop("loadBalancerNatRules", AAZListType, ".load_balancer_nat_rules")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("primary", AAZBoolType, ".primary")
                _elements.set_prop("privateIpAddress", AAZStrType, ".private_ip_address")
                _elements.set_prop("privateIpAllocationMethod", AAZStrType, ".private_ip_allocation_method")
                _elements.set_prop("publicIp", AAZObjectType, ".public_ip")
                _AddHelper._build_schema_subnet_reference_create(_elements.set_prop("subnet", AAZObjectType, ".subnet"))

            load_balancer_backend_address_pools = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[].loadBalancerBackendAddressPools")
            if load_balancer_backend_address_pools is not None:
                load_balancer_backend_address_pools.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[].loadBalancerBackendAddressPools[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("sourceArmResourceId", AAZStrType, ".source_arm_resource_id", typ_kwargs={"flags": {"required": True}})

            load_balancer_nat_rules = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[].loadBalancerNatRules")
            if load_balancer_nat_rules is not None:
                load_balancer_nat_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[].loadBalancerNatRules[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("sourceArmResourceId", AAZStrType, ".source_arm_resource_id", typ_kwargs={"flags": {"required": True}})

            public_ip = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.ipConfigurations[].publicIp")
            if public_ip is not None:
                public_ip.set_prop("sourceArmResourceId", AAZStrType, ".source_arm_resource_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkInterfaces}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__network_network_security_groups = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkSecurityGroups}")
            if disc_microsoft__network_network_security_groups is not None:
                disc_microsoft__network_network_security_groups.set_prop("securityRules", AAZListType, ".microsoft_network_network_security_groups.security_rules")
                disc_microsoft__network_network_security_groups.set_prop("tags", AAZDictType, ".microsoft_network_network_security_groups.tags")

            security_rules = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkSecurityGroups}.securityRules")
            if security_rules is not None:
                security_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkSecurityGroups}.securityRules[]")
            if _elements is not None:
                _elements.set_prop("access", AAZStrType, ".access")
                _elements.set_prop("description", AAZStrType, ".description")
                _elements.set_prop("destinationAddressPrefix", AAZStrType, ".destination_address_prefix")
                _elements.set_prop("destinationPortRange", AAZStrType, ".destination_port_range")
                _elements.set_prop("direction", AAZStrType, ".direction")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("priority", AAZIntType, ".priority")
                _elements.set_prop("protocol", AAZStrType, ".protocol")
                _elements.set_prop("sourceAddressPrefix", AAZStrType, ".source_address_prefix")
                _elements.set_prop("sourcePortRange", AAZStrType, ".source_port_range")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/networkSecurityGroups}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__network_public_ip_addresses = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/publicIPAddresses}")
            if disc_microsoft__network_public_ip_addresses is not None:
                disc_microsoft__network_public_ip_addresses.set_prop("domainNameLabel", AAZStrType, ".microsoft_network_public_ip_addresses.domain_name_label")
                disc_microsoft__network_public_ip_addresses.set_prop("fqdn", AAZStrType, ".microsoft_network_public_ip_addresses.fqdn")
                disc_microsoft__network_public_ip_addresses.set_prop("publicIpAllocationMethod", AAZStrType, ".microsoft_network_public_ip_addresses.public_ip_allocation_method")
                disc_microsoft__network_public_ip_addresses.set_prop("sku", AAZStrType, ".microsoft_network_public_ip_addresses.sku")
                disc_microsoft__network_public_ip_addresses.set_prop("tags", AAZDictType, ".microsoft_network_public_ip_addresses.tags")
                disc_microsoft__network_public_ip_addresses.set_prop("zones", AAZStrType, ".microsoft_network_public_ip_addresses.zones")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/publicIPAddresses}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__network_virtual_networks = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}")
            if disc_microsoft__network_virtual_networks is not None:
                disc_microsoft__network_virtual_networks.set_prop("addressSpace", AAZListType, ".microsoft_network_virtual_networks.address_space")
                disc_microsoft__network_virtual_networks.set_prop("dnsServers", AAZListType, ".microsoft_network_virtual_networks.dns_servers")
                disc_microsoft__network_virtual_networks.set_prop("enableDdosProtection", AAZBoolType, ".microsoft_network_virtual_networks.enable_ddos_protection", typ_kwargs={"nullable": True})
                disc_microsoft__network_virtual_networks.set_prop("subnets", AAZListType, ".microsoft_network_virtual_networks.subnets")
                disc_microsoft__network_virtual_networks.set_prop("tags", AAZDictType, ".microsoft_network_virtual_networks.tags")

            address_space = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.addressSpace")
            if address_space is not None:
                address_space.set_elements(AAZStrType, ".")

            dns_servers = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.dnsServers")
            if dns_servers is not None:
                dns_servers.set_elements(AAZStrType, ".")

            subnets = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.subnets")
            if subnets is not None:
                subnets.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.subnets[]")
            if _elements is not None:
                _elements.set_prop("addressPrefix", AAZStrType, ".address_prefix")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("networkSecurityGroup", AAZObjectType, ".network_security_group")

            network_security_group = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.subnets[].networkSecurityGroup")
            if network_security_group is not None:
                network_security_group.set_prop("sourceArmResourceId", AAZStrType, ".source_arm_resource_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Network/virtualNetworks}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__sql_servers_databases = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Sql/servers/databases}")
            if disc_microsoft__sql_servers_databases is not None:
                disc_microsoft__sql_servers_databases.set_prop("tags", AAZDictType, ".microsoft_sql_servers_databases.tags")
                disc_microsoft__sql_servers_databases.set_prop("zoneRedundant", AAZStrType, ".microsoft_sql_servers_databases.zone_redundant")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Sql/servers/databases}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            disc_microsoft__sql_servers_elastic_pools = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Sql/servers/elasticPools}")
            if disc_microsoft__sql_servers_elastic_pools is not None:
                disc_microsoft__sql_servers_elastic_pools.set_prop("tags", AAZDictType, ".microsoft_sql_servers_elastic_pools.tags")
                disc_microsoft__sql_servers_elastic_pools.set_prop("zoneRedundant", AAZStrType, ".microsoft_sql_servers_elastic_pools.zone_redundant")

            tags = _builder.get(".properties.resourceSettings{resourceType:Microsoft.Sql/servers/elasticPools}.tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.depends_on = AAZListType(
                serialized_name="dependsOn",
                flags={"read_only": True},
            )
            properties.depends_on_overrides = AAZListType(
                serialized_name="dependsOnOverrides",
            )
            properties.errors = AAZObjectType(
                flags={"read_only": True},
            )
            properties.existing_target_id = AAZStrType(
                serialized_name="existingTargetId",
            )
            properties.is_resolve_required = AAZBoolType(
                serialized_name="isResolveRequired",
                flags={"read_only": True},
            )
            properties.move_status = AAZObjectType(
                serialized_name="moveStatus",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.resource_settings = AAZObjectType(
                serialized_name="resourceSettings",
            )
            _AddHelper._build_schema_resource_settings_read(properties.resource_settings)
            properties.source_id = AAZStrType(
                serialized_name="sourceId",
                flags={"required": True},
            )
            properties.source_resource_settings = AAZObjectType(
                serialized_name="sourceResourceSettings",
            )
            _AddHelper._build_schema_resource_settings_read(properties.source_resource_settings)
            properties.target_id = AAZStrType(
                serialized_name="targetId",
                flags={"read_only": True},
            )

            depends_on = cls._schema_on_200.properties.depends_on
            depends_on.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.depends_on.Element
            _element.automatic_resolution = AAZObjectType(
                serialized_name="automaticResolution",
            )
            _element.dependency_type = AAZStrType(
                serialized_name="dependencyType",
            )
            _element.id = AAZStrType()
            _element.is_optional = AAZStrType(
                serialized_name="isOptional",
            )
            _element.manual_resolution = AAZObjectType(
                serialized_name="manualResolution",
            )
            _element.resolution_status = AAZStrType(
                serialized_name="resolutionStatus",
            )
            _element.resolution_type = AAZStrType(
                serialized_name="resolutionType",
            )

            automatic_resolution = cls._schema_on_200.properties.depends_on.Element.automatic_resolution
            automatic_resolution.move_resource_id = AAZStrType(
                serialized_name="moveResourceId",
            )

            manual_resolution = cls._schema_on_200.properties.depends_on.Element.manual_resolution
            manual_resolution.target_id = AAZStrType(
                serialized_name="targetId",
            )

            depends_on_overrides = cls._schema_on_200.properties.depends_on_overrides
            depends_on_overrides.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.depends_on_overrides.Element
            _element.id = AAZStrType()
            _element.target_id = AAZStrType(
                serialized_name="targetId",
            )

            errors = cls._schema_on_200.properties.errors
            errors.properties = AAZObjectType()
            _AddHelper._build_schema_move_resource_error_body_read(errors.properties)

            move_status = cls._schema_on_200.properties.move_status
            move_status.errors = AAZObjectType()
            move_status.job_status = AAZObjectType(
                serialized_name="jobStatus",
            )
            move_status.move_state = AAZStrType(
                serialized_name="moveState",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.properties.move_status.errors
            errors.properties = AAZObjectType()
            _AddHelper._build_schema_move_resource_error_body_read(errors.properties)

            job_status = cls._schema_on_200.properties.move_status.job_status
            job_status.job_name = AAZStrType(
                serialized_name="jobName",
                flags={"read_only": True},
            )
            job_status.job_progress = AAZStrType(
                serialized_name="jobProgress",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _AddHelper:
    """Helper class for Add"""

    @classmethod
    def _build_schema_subnet_reference_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("sourceArmResourceId", AAZStrType, ".source_arm_resource_id", typ_kwargs={"flags": {"required": True}})

    _schema_move_resource_error_body_read = None

    @classmethod
    def _build_schema_move_resource_error_body_read(cls, _schema):
        if cls._schema_move_resource_error_body_read is not None:
            _schema.code = cls._schema_move_resource_error_body_read.code
            _schema.details = cls._schema_move_resource_error_body_read.details
            _schema.message = cls._schema_move_resource_error_body_read.message
            _schema.target = cls._schema_move_resource_error_body_read.target
            return

        cls._schema_move_resource_error_body_read = _schema_move_resource_error_body_read = AAZObjectType()

        move_resource_error_body_read = _schema_move_resource_error_body_read
        move_resource_error_body_read.code = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.details = AAZListType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.message = AAZStrType(
            flags={"read_only": True},
        )
        move_resource_error_body_read.target = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_move_resource_error_body_read.details
        details.Element = AAZObjectType()
        cls._build_schema_move_resource_error_body_read(details.Element)

        _schema.code = cls._schema_move_resource_error_body_read.code
        _schema.details = cls._schema_move_resource_error_body_read.details
        _schema.message = cls._schema_move_resource_error_body_read.message
        _schema.target = cls._schema_move_resource_error_body_read.target

    _schema_resource_settings_read = None

    @classmethod
    def _build_schema_resource_settings_read(cls, _schema):
        if cls._schema_resource_settings_read is not None:
            _schema.resource_type = cls._schema_resource_settings_read.resource_type
            _schema.target_resource_group_name = cls._schema_resource_settings_read.target_resource_group_name
            _schema.target_resource_name = cls._schema_resource_settings_read.target_resource_name
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/availabilitySets",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/availabilitySets",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/virtualMachines",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/virtualMachines",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/loadBalancers",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/loadBalancers",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkInterfaces",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkInterfaces",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkSecurityGroups",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkSecurityGroups",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/publicIPAddresses",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/publicIPAddresses",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/virtualNetworks",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/virtualNetworks",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/databases",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/databases",
                )
            )
            _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/elasticPools",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/elasticPools",
                )
            )
            return

        cls._schema_resource_settings_read = _schema_resource_settings_read = AAZObjectType()

        resource_settings_read = _schema_resource_settings_read
        resource_settings_read.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )
        resource_settings_read.target_resource_group_name = AAZStrType(
            serialized_name="targetResourceGroupName",
        )
        resource_settings_read.target_resource_name = AAZStrType(
            serialized_name="targetResourceName",
        )

        disc_microsoft__compute_availability_sets = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/availabilitySets")
        disc_microsoft__compute_availability_sets.fault_domain = AAZIntType(
            serialized_name="faultDomain",
            nullable=True,
        )
        disc_microsoft__compute_availability_sets.tags = AAZDictType()
        disc_microsoft__compute_availability_sets.update_domain = AAZIntType(
            serialized_name="updateDomain",
            nullable=True,
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/availabilitySets").tags
        tags.Element = AAZStrType()

        disc_microsoft__compute_virtual_machines = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines")
        disc_microsoft__compute_virtual_machines.tags = AAZDictType()
        disc_microsoft__compute_virtual_machines.target_availability_set_id = AAZStrType(
            serialized_name="targetAvailabilitySetId",
        )
        disc_microsoft__compute_virtual_machines.target_availability_zone = AAZStrType(
            serialized_name="targetAvailabilityZone",
        )
        disc_microsoft__compute_virtual_machines.target_vm_size = AAZStrType(
            serialized_name="targetVmSize",
        )
        disc_microsoft__compute_virtual_machines.user_managed_identities = AAZListType(
            serialized_name="userManagedIdentities",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines").tags
        tags.Element = AAZStrType()

        user_managed_identities = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Compute/virtualMachines").user_managed_identities
        user_managed_identities.Element = AAZStrType()

        disc_microsoft__network_load_balancers = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers")
        disc_microsoft__network_load_balancers.backend_address_pools = AAZListType(
            serialized_name="backendAddressPools",
        )
        disc_microsoft__network_load_balancers.frontend_ip_configurations = AAZListType(
            serialized_name="frontendIPConfigurations",
        )
        disc_microsoft__network_load_balancers.sku = AAZStrType()
        disc_microsoft__network_load_balancers.tags = AAZDictType()
        disc_microsoft__network_load_balancers.zones = AAZStrType()

        backend_address_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").backend_address_pools
        backend_address_pools.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").backend_address_pools.Element
        _element.name = AAZStrType()

        frontend_ip_configurations = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").frontend_ip_configurations
        frontend_ip_configurations.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").frontend_ip_configurations.Element
        _element.name = AAZStrType()
        _element.private_ip_address = AAZStrType(
            serialized_name="privateIpAddress",
        )
        _element.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIpAllocationMethod",
        )
        _element.subnet = AAZObjectType()
        cls._build_schema_subnet_reference_read(_element.subnet)
        _element.zones = AAZStrType()

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/loadBalancers").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_network_interfaces = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces")
        disc_microsoft__network_network_interfaces.enable_accelerated_networking = AAZBoolType(
            serialized_name="enableAcceleratedNetworking",
            nullable=True,
        )
        disc_microsoft__network_network_interfaces.ip_configurations = AAZListType(
            serialized_name="ipConfigurations",
        )
        disc_microsoft__network_network_interfaces.tags = AAZDictType()

        ip_configurations = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations
        ip_configurations.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element
        _element.load_balancer_backend_address_pools = AAZListType(
            serialized_name="loadBalancerBackendAddressPools",
        )
        _element.load_balancer_nat_rules = AAZListType(
            serialized_name="loadBalancerNatRules",
        )
        _element.name = AAZStrType()
        _element.primary = AAZBoolType()
        _element.private_ip_address = AAZStrType(
            serialized_name="privateIpAddress",
        )
        _element.private_ip_allocation_method = AAZStrType(
            serialized_name="privateIpAllocationMethod",
        )
        _element.public_ip = AAZObjectType(
            serialized_name="publicIp",
        )
        _element.subnet = AAZObjectType()
        cls._build_schema_subnet_reference_read(_element.subnet)

        load_balancer_backend_address_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_backend_address_pools
        load_balancer_backend_address_pools.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_backend_address_pools.Element
        _element.name = AAZStrType()
        _element.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        load_balancer_nat_rules = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_nat_rules
        load_balancer_nat_rules.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.load_balancer_nat_rules.Element
        _element.name = AAZStrType()
        _element.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        public_ip = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").ip_configurations.Element.public_ip
        public_ip.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkInterfaces").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_network_security_groups = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups")
        disc_microsoft__network_network_security_groups.security_rules = AAZListType(
            serialized_name="securityRules",
        )
        disc_microsoft__network_network_security_groups.tags = AAZDictType()

        security_rules = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").security_rules
        security_rules.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").security_rules.Element
        _element.access = AAZStrType()
        _element.description = AAZStrType()
        _element.destination_address_prefix = AAZStrType(
            serialized_name="destinationAddressPrefix",
        )
        _element.destination_port_range = AAZStrType(
            serialized_name="destinationPortRange",
        )
        _element.direction = AAZStrType()
        _element.name = AAZStrType()
        _element.priority = AAZIntType()
        _element.protocol = AAZStrType()
        _element.source_address_prefix = AAZStrType(
            serialized_name="sourceAddressPrefix",
        )
        _element.source_port_range = AAZStrType(
            serialized_name="sourcePortRange",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/networkSecurityGroups").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_public_ip_addresses = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/publicIPAddresses")
        disc_microsoft__network_public_ip_addresses.domain_name_label = AAZStrType(
            serialized_name="domainNameLabel",
        )
        disc_microsoft__network_public_ip_addresses.fqdn = AAZStrType()
        disc_microsoft__network_public_ip_addresses.public_ip_allocation_method = AAZStrType(
            serialized_name="publicIpAllocationMethod",
        )
        disc_microsoft__network_public_ip_addresses.sku = AAZStrType()
        disc_microsoft__network_public_ip_addresses.tags = AAZDictType()
        disc_microsoft__network_public_ip_addresses.zones = AAZStrType()

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/publicIPAddresses").tags
        tags.Element = AAZStrType()

        disc_microsoft__network_virtual_networks = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks")
        disc_microsoft__network_virtual_networks.address_space = AAZListType(
            serialized_name="addressSpace",
        )
        disc_microsoft__network_virtual_networks.dns_servers = AAZListType(
            serialized_name="dnsServers",
        )
        disc_microsoft__network_virtual_networks.enable_ddos_protection = AAZBoolType(
            serialized_name="enableDdosProtection",
            nullable=True,
        )
        disc_microsoft__network_virtual_networks.subnets = AAZListType()
        disc_microsoft__network_virtual_networks.tags = AAZDictType()

        address_space = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").address_space
        address_space.Element = AAZStrType()

        dns_servers = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").dns_servers
        dns_servers.Element = AAZStrType()

        subnets = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets
        subnets.Element = AAZObjectType()

        _element = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets.Element
        _element.address_prefix = AAZStrType(
            serialized_name="addressPrefix",
        )
        _element.name = AAZStrType()
        _element.network_security_group = AAZObjectType(
            serialized_name="networkSecurityGroup",
        )

        network_security_group = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").subnets.Element.network_security_group
        network_security_group.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Network/virtualNetworks").tags
        tags.Element = AAZStrType()

        disc_microsoft__sql_servers_databases = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/databases")
        disc_microsoft__sql_servers_databases.tags = AAZDictType()
        disc_microsoft__sql_servers_databases.zone_redundant = AAZStrType(
            serialized_name="zoneRedundant",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/databases").tags
        tags.Element = AAZStrType()

        disc_microsoft__sql_servers_elastic_pools = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/elasticPools")
        disc_microsoft__sql_servers_elastic_pools.tags = AAZDictType()
        disc_microsoft__sql_servers_elastic_pools.zone_redundant = AAZStrType(
            serialized_name="zoneRedundant",
        )

        tags = _schema_resource_settings_read.discriminate_by("resource_type", "Microsoft.Sql/servers/elasticPools").tags
        tags.Element = AAZStrType()

        _schema.resource_type = cls._schema_resource_settings_read.resource_type
        _schema.target_resource_group_name = cls._schema_resource_settings_read.target_resource_group_name
        _schema.target_resource_name = cls._schema_resource_settings_read.target_resource_name
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/availabilitySets",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/availabilitySets",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Compute/virtualMachines",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Compute/virtualMachines",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/loadBalancers",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/loadBalancers",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkInterfaces",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkInterfaces",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/networkSecurityGroups",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/networkSecurityGroups",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/publicIPAddresses",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/publicIPAddresses",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Network/virtualNetworks",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Network/virtualNetworks",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/databases",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/databases",
                )
            )
        _schema.discriminate_by(
                "resource_type",
                "Microsoft.Sql/servers/elasticPools",
                cls._schema_resource_settings_read.discriminate_by(
                    "resource_type",
                    "Microsoft.Sql/servers/elasticPools",
                )
            )

    _schema_subnet_reference_read = None

    @classmethod
    def _build_schema_subnet_reference_read(cls, _schema):
        if cls._schema_subnet_reference_read is not None:
            _schema.name = cls._schema_subnet_reference_read.name
            _schema.source_arm_resource_id = cls._schema_subnet_reference_read.source_arm_resource_id
            return

        cls._schema_subnet_reference_read = _schema_subnet_reference_read = AAZObjectType()

        subnet_reference_read = _schema_subnet_reference_read
        subnet_reference_read.name = AAZStrType()
        subnet_reference_read.source_arm_resource_id = AAZStrType(
            serialized_name="sourceArmResourceId",
            flags={"required": True},
        )

        _schema.name = cls._schema_subnet_reference_read.name
        _schema.source_arm_resource_id = cls._schema_subnet_reference_read.source_arm_resource_id


__all__ = ["Add"]
