# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create a volume.

    :example: Create a volume with a template file on a remote URL.
        az mesh volume create --location westus --name myvolume --resource-group mygroup --template-uri https://mystorage.blob.core.windows.net/templates/volumeDescription.json

    :example: Create a volume with a template file on local disk.
        az mesh volume create --location westus --name myvolume --resource-group mygroup --template-file ./volumeDescription.json
    """

    _aaz_info = {
        "version": "2018-09-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.servicefabricmesh/volumes/{}", "2018-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The identity of the volume.",
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.azure_file_parameters = AAZObjectArg(
            options=["--azure-file-parameters"],
            arg_group="Properties",
            help="This type describes a volume provided by an Azure Files file share.",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="User readable description of the volume.",
        )
        _args_schema.provider = AAZStrArg(
            options=["--provider"],
            arg_group="Properties",
            help="Provider of the volume.",
            required=True,
            enum={"SFAzureFile": "SFAzureFile"},
        )

        azure_file_parameters = cls._args_schema.azure_file_parameters
        azure_file_parameters.account_key = AAZStrArg(
            options=["account-key"],
            help="Access key of the Azure storage account for the File Share.",
        )
        azure_file_parameters.account_name = AAZStrArg(
            options=["account-name"],
            help="Name of the Azure storage account for the File Share.",
            required=True,
        )
        azure_file_parameters.share_name = AAZStrArg(
            options=["share-name"],
            help="Name of the Azure Files file share that provides storage for the volume.",
            required=True,
        )

        # define Arg Group "VolumeResourceDescription"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.VolumeCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class VolumeCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)
            if session.http_response.status_code in [202]:
                return self.on_202(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ServiceFabricMesh/volumes/{volumeResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "volumeResourceName", self.ctx.args.name,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2018-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("azureFileParameters", AAZObjectType, ".azure_file_parameters")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})

            azure_file_parameters = _builder.get(".properties.azureFileParameters")
            if azure_file_parameters is not None:
                azure_file_parameters.set_prop("accountKey", AAZStrType, ".account_key")
                azure_file_parameters.set_prop("accountName", AAZStrType, ".account_name", typ_kwargs={"flags": {"required": True}})
                azure_file_parameters.set_prop("shareName", AAZStrType, ".share_name", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.azure_file_parameters = AAZObjectType(
                serialized_name="azureFileParameters",
            )
            properties.description = AAZStrType()
            properties.provider = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )
            properties.status_details = AAZStrType(
                serialized_name="statusDetails",
                flags={"read_only": True},
            )

            azure_file_parameters = cls._schema_on_200_201.properties.azure_file_parameters
            azure_file_parameters.account_key = AAZStrType(
                serialized_name="accountKey",
            )
            azure_file_parameters.account_name = AAZStrType(
                serialized_name="accountName",
                flags={"required": True},
            )
            azure_file_parameters.share_name = AAZStrType(
                serialized_name="shareName",
                flags={"required": True},
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201

        def on_202(self, session):
            pass


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
