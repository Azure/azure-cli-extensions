# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from .service_replica_properties import ServiceReplicaProperties


class ServiceProperties(ServiceReplicaProperties):
    """Describes properties of a service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param os_type: The operation system required by the code in service.
     Possible values include: 'Linux', 'Windows'
    :type os_type: str or
     ~azure.mgmt.servicefabricmesh.models.OperatingSystemType
    :param code_packages: Describes the set of code packages that forms the
     service. A code package describes the container and the properties for
     running it. All the code packages are started together on the same host
     and share the same context (network, process etc.).
    :type code_packages:
     list[~azure.mgmt.servicefabricmesh.models.ContainerCodePackageProperties]
    :param network_refs: The names of the private networks that this service
     needs to be part of.
    :type network_refs: list[~azure.mgmt.servicefabricmesh.models.NetworkRef]
    :param diagnostics: Reference to sinks in DiagnosticsDescription.
    :type diagnostics: ~azure.mgmt.servicefabricmesh.models.DiagnosticsRef
    :param description: User readable description of the service.
    :type description: str
    :param replica_count: The number of replicas of the service to create.
     Defaults to 1 if not specified.
    :type replica_count: int
    :param auto_scaling_policies: Auto scaling policies
    :type auto_scaling_policies:
     list[~azure.mgmt.servicefabricmesh.models.AutoScalingPolicy]
    :param status: Status of the service. Possible values include: 'Unknown',
     'Ready', 'Upgrading', 'Creating', 'Deleting', 'Failed'
    :type status: str or ~azure.mgmt.servicefabricmesh.models.ResourceStatus
    :ivar status_details: Gives additional information about the current
     status of the service.
    :vartype status_details: str
    :ivar health_state: Describes the health state of an application resource.
     Possible values include: 'Invalid', 'Ok', 'Warning', 'Error', 'Unknown'
    :vartype health_state: str or
     ~azure.mgmt.servicefabricmesh.models.HealthState
    :ivar unhealthy_evaluation: When the service's health state is not 'Ok',
     this additional details from service fabric Health Manager for the user to
     know why the service is marked unhealthy.
    :vartype unhealthy_evaluation: str
    """

    _validation = {
        'os_type': {'required': True},
        'code_packages': {'required': True},
        'status_details': {'readonly': True},
        'health_state': {'readonly': True},
        'unhealthy_evaluation': {'readonly': True},
    }

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'code_packages': {'key': 'codePackages', 'type': '[ContainerCodePackageProperties]'},
        'network_refs': {'key': 'networkRefs', 'type': '[NetworkRef]'},
        'diagnostics': {'key': 'diagnostics', 'type': 'DiagnosticsRef'},
        'description': {'key': 'description', 'type': 'str'},
        'replica_count': {'key': 'replicaCount', 'type': 'int'},
        'auto_scaling_policies': {'key': 'autoScalingPolicies', 'type': '[AutoScalingPolicy]'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'health_state': {'key': 'healthState', 'type': 'str'},
        'unhealthy_evaluation': {'key': 'unhealthyEvaluation', 'type': 'str'},
    }

    def __init__(self, os_type, code_packages, network_refs=None, diagnostics=None, description=None, replica_count=None, auto_scaling_policies=None, status=None):
        super(ServiceProperties, self).__init__(os_type=os_type, code_packages=code_packages, network_refs=network_refs, diagnostics=diagnostics)
        self.description = description
        self.replica_count = replica_count
        self.auto_scaling_policies = auto_scaling_policies
        self.status = status
        self.status_details = None
        self.health_state = None
        self.unhealthy_evaluation = None
