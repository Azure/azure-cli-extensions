# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class Serialization(Model):
    """Describes how data from an input is serialized or how data is serialized
    when written to an output.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AvroSerialization, JsonSerialization, CsvSerialization

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Avro': 'AvroSerialization', 'Json': 'JsonSerialization', 'Csv': 'CsvSerialization'}
    }

    def __init__(self, **kwargs) -> None:
        super(Serialization, self).__init__(**kwargs)
        self.type = None


class AvroSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized
    when written to an output in Avro format.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param properties: The properties that are associated with the Avro
     serialization type. Required on PUT (CreateOrReplace) requests.
    :type properties: object
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(AvroSerialization, self).__init__(**kwargs)
        self.properties = properties
        self.type = 'Avro'


class OutputDataSource(Model):
    """Describes the data source that output will be written to.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: AzureDataLakeStoreOutputDataSource,
    PowerBIOutputDataSource, ServiceBusTopicOutputDataSource,
    ServiceBusQueueOutputDataSource, DocumentDbOutputDataSource,
    AzureSqlDatabaseOutputDataSource, EventHubOutputDataSource,
    AzureTableOutputDataSource, BlobOutputDataSource

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.DataLake/Accounts': 'AzureDataLakeStoreOutputDataSource', 'PowerBI': 'PowerBIOutputDataSource', 'Microsoft.ServiceBus/Topic': 'ServiceBusTopicOutputDataSource', 'Microsoft.ServiceBus/Queue': 'ServiceBusQueueOutputDataSource', 'Microsoft.Storage/DocumentDB': 'DocumentDbOutputDataSource', 'Microsoft.Sql/Server/Database': 'AzureSqlDatabaseOutputDataSource', 'Microsoft.ServiceBus/EventHub': 'EventHubOutputDataSource', 'Microsoft.Storage/Table': 'AzureTableOutputDataSource', 'Microsoft.Storage/Blob': 'BlobOutputDataSource'}
    }

    def __init__(self, **kwargs) -> None:
        super(OutputDataSource, self).__init__(**kwargs)
        self.type = None


class AzureDataLakeStoreOutputDataSource(OutputDataSource):
    """Describes an Azure Data Lake Store output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param refresh_token: A refresh token that can be used to obtain a valid
     access token that can then be used to authenticate with the data source. A
     valid refresh token is currently only obtainable via the Azure Portal. It
     is recommended to put a dummy string value here when creating the data
     source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on
     PUT (CreateOrReplace) requests.
    :type refresh_token: str
    :param token_user_principal_name: The user principal name (UPN) of the
     user that was used to obtain the refresh token. Use this property to help
     remember which user was used to obtain the refresh token.
    :type token_user_principal_name: str
    :param token_user_display_name: The user display name of the user that was
     used to obtain the refresh token. Use this property to help remember which
     user was used to obtain the refresh token.
    :type token_user_display_name: str
    :param account_name: The name of the Azure Data Lake Store account.
     Required on PUT (CreateOrReplace) requests.
    :type account_name: str
    :param tenant_id: The tenant id of the user used to obtain the refresh
     token. Required on PUT (CreateOrReplace) requests.
    :type tenant_id: str
    :param file_path_prefix: The location of the file to which the output
     should be written to. Required on PUT (CreateOrReplace) requests.
    :type file_path_prefix: str
    :param date_format: The date format. Wherever {date} appears in
     filePathPrefix, the value of this property is used as the date format
     instead.
    :type date_format: str
    :param time_format: The time format. Wherever {time} appears in
     filePathPrefix, the value of this property is used as the time format
     instead.
    :type time_format: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'refresh_token': {'key': 'properties.refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'properties.tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'properties.tokenUserDisplayName', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'file_path_prefix': {'key': 'properties.filePathPrefix', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
    }

    def __init__(self, *, refresh_token: str=None, token_user_principal_name: str=None, token_user_display_name: str=None, account_name: str=None, tenant_id: str=None, file_path_prefix: str=None, date_format: str=None, time_format: str=None, **kwargs) -> None:
        super(AzureDataLakeStoreOutputDataSource, self).__init__(**kwargs)
        self.refresh_token = refresh_token
        self.token_user_principal_name = token_user_principal_name
        self.token_user_display_name = token_user_display_name
        self.account_name = account_name
        self.tenant_id = tenant_id
        self.file_path_prefix = file_path_prefix
        self.date_format = date_format
        self.time_format = time_format
        self.type = 'Microsoft.DataLake/Accounts'


class FunctionBinding(Model):
    """The physical binding of the function. For example, in the Azure Machine
    Learning web serviceâ€™s case, this describes the endpoint.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: JavaScriptFunctionBinding,
    AzureMachineLearningWebServiceFunctionBinding

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.StreamAnalytics/JavascriptUdf': 'JavaScriptFunctionBinding', 'Microsoft.MachineLearning/WebService': 'AzureMachineLearningWebServiceFunctionBinding'}
    }

    def __init__(self, **kwargs) -> None:
        super(FunctionBinding, self).__init__(**kwargs)
        self.type = None


class AzureMachineLearningWebServiceFunctionBinding(FunctionBinding):
    """The binding to an Azure Machine Learning web service.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param endpoint: The Request-Response execute endpoint of the Azure
     Machine Learning web service. Find out more here:
     https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
    :type endpoint: str
    :param api_key: The API key used to authenticate with Request-Response
     endpoint.
    :type api_key: str
    :param inputs: The inputs for the Azure Machine Learning web service
     endpoint.
    :type inputs:
     ~azure.mgmt.streamanalytics.models.AzureMachineLearningWebServiceInputs
    :param outputs: A list of outputs from the Azure Machine Learning web
     service endpoint execution.
    :type outputs:
     list[~azure.mgmt.streamanalytics.models.AzureMachineLearningWebServiceOutputColumn]
    :param batch_size: Number between 1 and 10000 describing maximum number of
     rows for every Azure ML RRS execute request. Default is 1000.
    :type batch_size: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
        'api_key': {'key': 'properties.apiKey', 'type': 'str'},
        'inputs': {'key': 'properties.inputs', 'type': 'AzureMachineLearningWebServiceInputs'},
        'outputs': {'key': 'properties.outputs', 'type': '[AzureMachineLearningWebServiceOutputColumn]'},
        'batch_size': {'key': 'properties.batchSize', 'type': 'int'},
    }

    def __init__(self, *, endpoint: str=None, api_key: str=None, inputs=None, outputs=None, batch_size: int=None, **kwargs) -> None:
        super(AzureMachineLearningWebServiceFunctionBinding, self).__init__(**kwargs)
        self.endpoint = endpoint
        self.api_key = api_key
        self.inputs = inputs
        self.outputs = outputs
        self.batch_size = batch_size
        self.type = 'Microsoft.MachineLearning/WebService'


class FunctionRetrieveDefaultDefinitionParameters(Model):
    """Parameters used to specify the type of function to retrieve the default
    definition for.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are:
    AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters,
    JavaScriptFunctionRetrieveDefaultDefinitionParameters

    All required parameters must be populated in order to send to Azure.

    :param binding_type: Required. Constant filled by server.
    :type binding_type: str
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
    }

    _subtype_map = {
        'binding_type': {'Microsoft.MachineLearning/WebService': 'AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters', 'Microsoft.StreamAnalytics/JavascriptUdf': 'JavaScriptFunctionRetrieveDefaultDefinitionParameters'}
    }

    def __init__(self, **kwargs) -> None:
        super(FunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.binding_type = None


class AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters(FunctionRetrieveDefaultDefinitionParameters):
    """The parameters needed to retrieve the default function definition for an
    Azure Machine Learning web service function.

    All required parameters must be populated in order to send to Azure.

    :param binding_type: Required. Constant filled by server.
    :type binding_type: str
    :param execute_endpoint: The Request-Response execute endpoint of the
     Azure Machine Learning web service. Find out more here:
     https://docs.microsoft.com/en-us/azure/machine-learning/machine-learning-consume-web-services#request-response-service-rrs
    :type execute_endpoint: str
    :param udf_type: The function type. Possible values include: 'Scalar'
    :type udf_type: str or ~azure.mgmt.streamanalytics.models.UdfType
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
        'execute_endpoint': {'key': 'bindingRetrievalProperties.executeEndpoint', 'type': 'str'},
        'udf_type': {'key': 'bindingRetrievalProperties.udfType', 'type': 'UdfType'},
    }

    def __init__(self, *, execute_endpoint: str=None, udf_type=None, **kwargs) -> None:
        super(AzureMachineLearningWebServiceFunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.execute_endpoint = execute_endpoint
        self.udf_type = udf_type
        self.binding_type = 'Microsoft.MachineLearning/WebService'


class AzureMachineLearningWebServiceInputColumn(Model):
    """Describes an input column for the Azure Machine Learning web service
    endpoint.

    :param name: The name of the input column.
    :type name: str
    :param data_type: The (Azure Machine Learning supported) data type of the
     input column. A list of valid  Azure Machine Learning data types are
     described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx
     .
    :type data_type: str
    :param map_to: The zero based index of the function parameter this input
     maps to.
    :type map_to: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
        'map_to': {'key': 'mapTo', 'type': 'int'},
    }

    def __init__(self, *, name: str=None, data_type: str=None, map_to: int=None, **kwargs) -> None:
        super(AzureMachineLearningWebServiceInputColumn, self).__init__(**kwargs)
        self.name = name
        self.data_type = data_type
        self.map_to = map_to


class AzureMachineLearningWebServiceInputs(Model):
    """The inputs for the Azure Machine Learning web service endpoint.

    :param name: The name of the input. This is the name provided while
     authoring the endpoint.
    :type name: str
    :param column_names: A list of input columns for the Azure Machine
     Learning web service endpoint.
    :type column_names:
     list[~azure.mgmt.streamanalytics.models.AzureMachineLearningWebServiceInputColumn]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'column_names': {'key': 'columnNames', 'type': '[AzureMachineLearningWebServiceInputColumn]'},
    }

    def __init__(self, *, name: str=None, column_names=None, **kwargs) -> None:
        super(AzureMachineLearningWebServiceInputs, self).__init__(**kwargs)
        self.name = name
        self.column_names = column_names


class AzureMachineLearningWebServiceOutputColumn(Model):
    """Describes an output column for the Azure Machine Learning web service
    endpoint.

    :param name: The name of the output column.
    :type name: str
    :param data_type: The (Azure Machine Learning supported) data type of the
     output column. A list of valid  Azure Machine Learning data types are
     described at https://msdn.microsoft.com/en-us/library/azure/dn905923.aspx
     .
    :type data_type: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'data_type': {'key': 'dataType', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, data_type: str=None, **kwargs) -> None:
        super(AzureMachineLearningWebServiceOutputColumn, self).__init__(**kwargs)
        self.name = name
        self.data_type = data_type


class AzureSqlDatabaseDataSourceProperties(Model):
    """The properties that are associated with an Azure SQL database data source.

    :param server: The name of the SQL server containing the Azure SQL
     database. Required on PUT (CreateOrReplace) requests.
    :type server: str
    :param database: The name of the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :type database: str
    :param user: The user name that will be used to connect to the Azure SQL
     database. Required on PUT (CreateOrReplace) requests.
    :type user: str
    :param password: The password that will be used to connect to the Azure
     SQL database. Required on PUT (CreateOrReplace) requests.
    :type password: str
    :param table: The name of the table in the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :type table: str
    """

    _attribute_map = {
        'server': {'key': 'server', 'type': 'str'},
        'database': {'key': 'database', 'type': 'str'},
        'user': {'key': 'user', 'type': 'str'},
        'password': {'key': 'password', 'type': 'str'},
        'table': {'key': 'table', 'type': 'str'},
    }

    def __init__(self, *, server: str=None, database: str=None, user: str=None, password: str=None, table: str=None, **kwargs) -> None:
        super(AzureSqlDatabaseDataSourceProperties, self).__init__(**kwargs)
        self.server = server
        self.database = database
        self.user = user
        self.password = password
        self.table = table


class AzureSqlDatabaseOutputDataSource(OutputDataSource):
    """Describes an Azure SQL database output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param server: The name of the SQL server containing the Azure SQL
     database. Required on PUT (CreateOrReplace) requests.
    :type server: str
    :param database: The name of the Azure SQL database. Required on PUT
     (CreateOrReplace) requests.
    :type database: str
    :param user: The user name that will be used to connect to the Azure SQL
     database. Required on PUT (CreateOrReplace) requests.
    :type user: str
    :param password: The password that will be used to connect to the Azure
     SQL database. Required on PUT (CreateOrReplace) requests.
    :type password: str
    :param table: The name of the table in the Azure SQL database. Required on
     PUT (CreateOrReplace) requests.
    :type table: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'server': {'key': 'properties.server', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'user': {'key': 'properties.user', 'type': 'str'},
        'password': {'key': 'properties.password', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
    }

    def __init__(self, *, server: str=None, database: str=None, user: str=None, password: str=None, table: str=None, **kwargs) -> None:
        super(AzureSqlDatabaseOutputDataSource, self).__init__(**kwargs)
        self.server = server
        self.database = database
        self.user = user
        self.password = password
        self.table = table
        self.type = 'Microsoft.Sql/Server/Database'


class AzureTableOutputDataSource(OutputDataSource):
    """Describes an Azure Table output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param account_name: The name of the Azure Storage account. Required on
     PUT (CreateOrReplace) requests.
    :type account_name: str
    :param account_key: The account key for the Azure Storage account.
     Required on PUT (CreateOrReplace) requests.
    :type account_key: str
    :param table: The name of the Azure Table. Required on PUT
     (CreateOrReplace) requests.
    :type table: str
    :param partition_key: This element indicates the name of a column from the
     SELECT statement in the query that will be used as the partition key for
     the Azure Table. Required on PUT (CreateOrReplace) requests.
    :type partition_key: str
    :param row_key: This element indicates the name of a column from the
     SELECT statement in the query that will be used as the row key for the
     Azure Table. Required on PUT (CreateOrReplace) requests.
    :type row_key: str
    :param columns_to_remove: If specified, each item in the array is the name
     of a column to remove (if present) from output event entities.
    :type columns_to_remove: list[str]
    :param batch_size: The number of rows to write to the Azure Table at a
     time.
    :type batch_size: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'account_name': {'key': 'properties.accountName', 'type': 'str'},
        'account_key': {'key': 'properties.accountKey', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'row_key': {'key': 'properties.rowKey', 'type': 'str'},
        'columns_to_remove': {'key': 'properties.columnsToRemove', 'type': '[str]'},
        'batch_size': {'key': 'properties.batchSize', 'type': 'int'},
    }

    def __init__(self, *, account_name: str=None, account_key: str=None, table: str=None, partition_key: str=None, row_key: str=None, columns_to_remove=None, batch_size: int=None, **kwargs) -> None:
        super(AzureTableOutputDataSource, self).__init__(**kwargs)
        self.account_name = account_name
        self.account_key = account_key
        self.table = table
        self.partition_key = partition_key
        self.row_key = row_key
        self.columns_to_remove = columns_to_remove
        self.batch_size = batch_size
        self.type = 'Microsoft.Storage/Table'


class BlobDataSourceProperties(Model):
    """The properties that are associated with a blob data source.

    :param storage_accounts: A list of one or more Azure Storage accounts.
     Required on PUT (CreateOrReplace) requests.
    :type storage_accounts:
     list[~azure.mgmt.streamanalytics.models.StorageAccount]
    :param container: The name of a container within the associated Storage
     account. This container contains either the blob(s) to be read from or
     written to. Required on PUT (CreateOrReplace) requests.
    :type container: str
    :param path_pattern: The blob path pattern. Not a regular expression. It
     represents a pattern against which blob names will be matched to determine
     whether or not they should be included as input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input
     or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for a more detailed explanation and example.
    :type path_pattern: str
    :param date_format: The date format. Wherever {date} appears in
     pathPattern, the value of this property is used as the date format
     instead.
    :type date_format: str
    :param time_format: The time format. Wherever {time} appears in
     pathPattern, the value of this property is used as the time format
     instead.
    :type time_format: str
    """

    _attribute_map = {
        'storage_accounts': {'key': 'storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'container', 'type': 'str'},
        'path_pattern': {'key': 'pathPattern', 'type': 'str'},
        'date_format': {'key': 'dateFormat', 'type': 'str'},
        'time_format': {'key': 'timeFormat', 'type': 'str'},
    }

    def __init__(self, *, storage_accounts=None, container: str=None, path_pattern: str=None, date_format: str=None, time_format: str=None, **kwargs) -> None:
        super(BlobDataSourceProperties, self).__init__(**kwargs)
        self.storage_accounts = storage_accounts
        self.container = container
        self.path_pattern = path_pattern
        self.date_format = date_format
        self.time_format = time_format


class BlobOutputDataSource(OutputDataSource):
    """Describes a blob output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param storage_accounts: A list of one or more Azure Storage accounts.
     Required on PUT (CreateOrReplace) requests.
    :type storage_accounts:
     list[~azure.mgmt.streamanalytics.models.StorageAccount]
    :param container: The name of a container within the associated Storage
     account. This container contains either the blob(s) to be read from or
     written to. Required on PUT (CreateOrReplace) requests.
    :type container: str
    :param path_pattern: The blob path pattern. Not a regular expression. It
     represents a pattern against which blob names will be matched to determine
     whether or not they should be included as input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input
     or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for a more detailed explanation and example.
    :type path_pattern: str
    :param date_format: The date format. Wherever {date} appears in
     pathPattern, the value of this property is used as the date format
     instead.
    :type date_format: str
    :param time_format: The time format. Wherever {time} appears in
     pathPattern, the value of this property is used as the time format
     instead.
    :type time_format: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
    }

    def __init__(self, *, storage_accounts=None, container: str=None, path_pattern: str=None, date_format: str=None, time_format: str=None, **kwargs) -> None:
        super(BlobOutputDataSource, self).__init__(**kwargs)
        self.storage_accounts = storage_accounts
        self.container = container
        self.path_pattern = path_pattern
        self.date_format = date_format
        self.time_format = time_format
        self.type = 'Microsoft.Storage/Blob'


class ReferenceInputDataSource(Model):
    """Describes an input data source that contains reference data.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: BlobReferenceInputDataSource

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.Storage/Blob': 'BlobReferenceInputDataSource'}
    }

    def __init__(self, **kwargs) -> None:
        super(ReferenceInputDataSource, self).__init__(**kwargs)
        self.type = None


class BlobReferenceInputDataSource(ReferenceInputDataSource):
    """Describes a blob input data source that contains reference data.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param storage_accounts: A list of one or more Azure Storage accounts.
     Required on PUT (CreateOrReplace) requests.
    :type storage_accounts:
     list[~azure.mgmt.streamanalytics.models.StorageAccount]
    :param container: The name of a container within the associated Storage
     account. This container contains either the blob(s) to be read from or
     written to. Required on PUT (CreateOrReplace) requests.
    :type container: str
    :param path_pattern: The blob path pattern. Not a regular expression. It
     represents a pattern against which blob names will be matched to determine
     whether or not they should be included as input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input
     or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for a more detailed explanation and example.
    :type path_pattern: str
    :param date_format: The date format. Wherever {date} appears in
     pathPattern, the value of this property is used as the date format
     instead.
    :type date_format: str
    :param time_format: The time format. Wherever {time} appears in
     pathPattern, the value of this property is used as the time format
     instead.
    :type time_format: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
    }

    def __init__(self, *, storage_accounts=None, container: str=None, path_pattern: str=None, date_format: str=None, time_format: str=None, **kwargs) -> None:
        super(BlobReferenceInputDataSource, self).__init__(**kwargs)
        self.storage_accounts = storage_accounts
        self.container = container
        self.path_pattern = path_pattern
        self.date_format = date_format
        self.time_format = time_format
        self.type = 'Microsoft.Storage/Blob'


class StreamInputDataSource(Model):
    """Describes an input data source that contains stream data.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: IoTHubStreamInputDataSource,
    EventHubStreamInputDataSource, BlobStreamInputDataSource

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Microsoft.Devices/IotHubs': 'IoTHubStreamInputDataSource', 'Microsoft.ServiceBus/EventHub': 'EventHubStreamInputDataSource', 'Microsoft.Storage/Blob': 'BlobStreamInputDataSource'}
    }

    def __init__(self, **kwargs) -> None:
        super(StreamInputDataSource, self).__init__(**kwargs)
        self.type = None


class BlobStreamInputDataSource(StreamInputDataSource):
    """Describes a blob input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param storage_accounts: A list of one or more Azure Storage accounts.
     Required on PUT (CreateOrReplace) requests.
    :type storage_accounts:
     list[~azure.mgmt.streamanalytics.models.StorageAccount]
    :param container: The name of a container within the associated Storage
     account. This container contains either the blob(s) to be read from or
     written to. Required on PUT (CreateOrReplace) requests.
    :type container: str
    :param path_pattern: The blob path pattern. Not a regular expression. It
     represents a pattern against which blob names will be matched to determine
     whether or not they should be included as input or output to the job. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input
     or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for a more detailed explanation and example.
    :type path_pattern: str
    :param date_format: The date format. Wherever {date} appears in
     pathPattern, the value of this property is used as the date format
     instead.
    :type date_format: str
    :param time_format: The time format. Wherever {time} appears in
     pathPattern, the value of this property is used as the time format
     instead.
    :type time_format: str
    :param source_partition_count: The partition count of the blob input data
     source. Range 1 - 256.
    :type source_partition_count: int
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'storage_accounts': {'key': 'properties.storageAccounts', 'type': '[StorageAccount]'},
        'container': {'key': 'properties.container', 'type': 'str'},
        'path_pattern': {'key': 'properties.pathPattern', 'type': 'str'},
        'date_format': {'key': 'properties.dateFormat', 'type': 'str'},
        'time_format': {'key': 'properties.timeFormat', 'type': 'str'},
        'source_partition_count': {'key': 'properties.sourcePartitionCount', 'type': 'int'},
    }

    def __init__(self, *, storage_accounts=None, container: str=None, path_pattern: str=None, date_format: str=None, time_format: str=None, source_partition_count: int=None, **kwargs) -> None:
        super(BlobStreamInputDataSource, self).__init__(**kwargs)
        self.storage_accounts = storage_accounts
        self.container = container
        self.path_pattern = path_pattern
        self.date_format = date_format
        self.time_format = time_format
        self.source_partition_count = source_partition_count
        self.type = 'Microsoft.Storage/Blob'


class CloudError(Model):
    """CloudError.
    """

    _attribute_map = {
    }


class CsvSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized
    when written to an output in CSV format.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param field_delimiter: Specifies the delimiter that will be used to
     separate comma-separated value (CSV) records. See
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-input
     or
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for a list of supported values. Required on PUT (CreateOrReplace)
     requests.
    :type field_delimiter: str
    :param encoding: Specifies the encoding of the incoming data in the case
     of input and the encoding of outgoing data in the case of output. Required
     on PUT (CreateOrReplace) requests. Possible values include: 'UTF8'
    :type encoding: str or ~azure.mgmt.streamanalytics.models.Encoding
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'field_delimiter': {'key': 'properties.fieldDelimiter', 'type': 'str'},
        'encoding': {'key': 'properties.encoding', 'type': 'str'},
    }

    def __init__(self, *, field_delimiter: str=None, encoding=None, **kwargs) -> None:
        super(CsvSerialization, self).__init__(**kwargs)
        self.field_delimiter = field_delimiter
        self.encoding = encoding
        self.type = 'Csv'


class DiagnosticCondition(Model):
    """Condition applicable to the resource, or to the job overall, that warrant
    customer attention.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar since: The UTC timestamp of when the condition started. Customers
     should be able to find a corresponding event in the ops log around this
     time.
    :vartype since: str
    :ivar code: The opaque diagnostic code.
    :vartype code: str
    :ivar message: The human-readable message describing the condition in
     detail. Localized in the Accept-Language of the client request.
    :vartype message: str
    """

    _validation = {
        'since': {'readonly': True},
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'since': {'key': 'since', 'type': 'str'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(DiagnosticCondition, self).__init__(**kwargs)
        self.since = None
        self.code = None
        self.message = None


class Diagnostics(Model):
    """Describes conditions applicable to the Input, Output, or the job overall,
    that warrant customer attention.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar conditions: A collection of zero or more conditions applicable to
     the resource, or to the job overall, that warrant customer attention.
    :vartype conditions:
     list[~azure.mgmt.streamanalytics.models.DiagnosticCondition]
    """

    _validation = {
        'conditions': {'readonly': True},
    }

    _attribute_map = {
        'conditions': {'key': 'conditions', 'type': '[DiagnosticCondition]'},
    }

    def __init__(self, **kwargs) -> None:
        super(Diagnostics, self).__init__(**kwargs)
        self.conditions = None


class DocumentDbOutputDataSource(OutputDataSource):
    """Describes a DocumentDB output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param account_id: The DocumentDB account name or ID. Required on PUT
     (CreateOrReplace) requests.
    :type account_id: str
    :param account_key: The account key for the DocumentDB account. Required
     on PUT (CreateOrReplace) requests.
    :type account_key: str
    :param database: The name of the DocumentDB database. Required on PUT
     (CreateOrReplace) requests.
    :type database: str
    :param collection_name_pattern: The collection name pattern for the
     collections to be used. The collection name format can be constructed
     using the optional {partition} token, where partitions start from 0. See
     the DocumentDB section of
     https://docs.microsoft.com/en-us/rest/api/streamanalytics/stream-analytics-output
     for more information. Required on PUT (CreateOrReplace) requests.
    :type collection_name_pattern: str
    :param partition_key: The name of the field in output events used to
     specify the key for partitioning output across collections. If
     'collectionNamePattern' contains the {partition} token, this property is
     required to be specified.
    :type partition_key: str
    :param document_id: The name of the field in output events used to specify
     the primary key which insert or update operations are based on.
    :type document_id: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'account_id': {'key': 'properties.accountId', 'type': 'str'},
        'account_key': {'key': 'properties.accountKey', 'type': 'str'},
        'database': {'key': 'properties.database', 'type': 'str'},
        'collection_name_pattern': {'key': 'properties.collectionNamePattern', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
        'document_id': {'key': 'properties.documentId', 'type': 'str'},
    }

    def __init__(self, *, account_id: str=None, account_key: str=None, database: str=None, collection_name_pattern: str=None, partition_key: str=None, document_id: str=None, **kwargs) -> None:
        super(DocumentDbOutputDataSource, self).__init__(**kwargs)
        self.account_id = account_id
        self.account_key = account_key
        self.database = database
        self.collection_name_pattern = collection_name_pattern
        self.partition_key = partition_key
        self.document_id = document_id
        self.type = 'Microsoft.Storage/DocumentDB'


class ErrorResponse(Model):
    """Describes the error that occurred.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar code: Error code associated with the error that occurred.
    :vartype code: str
    :ivar message: Describes the error in detail.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = None
        self.message = None


class ServiceBusDataSourceProperties(Model):
    """The common properties that are associated with Service Bus data sources
    (Queues, Topics, Event Hubs, etc.).

    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, **kwargs) -> None:
        super(ServiceBusDataSourceProperties, self).__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key


class EventHubDataSourceProperties(ServiceBusDataSourceProperties):
    """The common properties that are associated with Event Hub data sources.

    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param event_hub_name: The name of the Event Hub. Required on PUT
     (CreateOrReplace) requests.
    :type event_hub_name: str
    """

    _attribute_map = {
        'service_bus_namespace': {'key': 'serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'sharedAccessPolicyKey', 'type': 'str'},
        'event_hub_name': {'key': 'eventHubName', 'type': 'str'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, event_hub_name: str=None, **kwargs) -> None:
        super(EventHubDataSourceProperties, self).__init__(service_bus_namespace=service_bus_namespace, shared_access_policy_name=shared_access_policy_name, shared_access_policy_key=shared_access_policy_key, **kwargs)
        self.event_hub_name = event_hub_name


class EventHubOutputDataSource(OutputDataSource):
    """Describes an Event Hub output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param event_hub_name: The name of the Event Hub. Required on PUT
     (CreateOrReplace) requests.
    :type event_hub_name: str
    :param partition_key: The key/column that is used to determine to which
     partition to send event data.
    :type partition_key: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'partition_key': {'key': 'properties.partitionKey', 'type': 'str'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, event_hub_name: str=None, partition_key: str=None, **kwargs) -> None:
        super(EventHubOutputDataSource, self).__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key
        self.event_hub_name = event_hub_name
        self.partition_key = partition_key
        self.type = 'Microsoft.ServiceBus/EventHub'


class EventHubStreamInputDataSource(StreamInputDataSource):
    """Describes an Event Hub input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param event_hub_name: The name of the Event Hub. Required on PUT
     (CreateOrReplace) requests.
    :type event_hub_name: str
    :param consumer_group_name: The name of an Event Hub Consumer Group that
     should be used to read events from the Event Hub. Specifying distinct
     consumer group names for multiple inputs allows each of those inputs to
     receive the same events from the Event Hub. If not specified, the input
     uses the Event Hubâ€™s default consumer group.
    :type consumer_group_name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'event_hub_name': {'key': 'properties.eventHubName', 'type': 'str'},
        'consumer_group_name': {'key': 'properties.consumerGroupName', 'type': 'str'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, event_hub_name: str=None, consumer_group_name: str=None, **kwargs) -> None:
        super(EventHubStreamInputDataSource, self).__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key
        self.event_hub_name = event_hub_name
        self.consumer_group_name = consumer_group_name
        self.type = 'Microsoft.ServiceBus/EventHub'


class SubResource(Model):
    """The base sub-resource model definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, **kwargs) -> None:
        super(SubResource, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None


class Function(SubResource):
    """A function object, containing all information associated with the named
    function. All functions are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    :param properties: The properties that are associated with a function.
    :type properties: ~azure.mgmt.streamanalytics.models.FunctionProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'FunctionProperties'},
    }

    def __init__(self, *, name: str=None, properties=None, **kwargs) -> None:
        super(Function, self).__init__(name=name, **kwargs)
        self.properties = properties


class FunctionInput(Model):
    """Describes one input parameter of a function.

    :param data_type: The (Azure Stream Analytics supported) data type of the
     function input parameter. A list of valid Azure Stream Analytics data
     types are described at
     https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
    :type data_type: str
    :param is_configuration_parameter: A flag indicating if the parameter is a
     configuration parameter. True if this input parameter is expected to be a
     constant. Default is false.
    :type is_configuration_parameter: bool
    """

    _attribute_map = {
        'data_type': {'key': 'dataType', 'type': 'str'},
        'is_configuration_parameter': {'key': 'isConfigurationParameter', 'type': 'bool'},
    }

    def __init__(self, *, data_type: str=None, is_configuration_parameter: bool=None, **kwargs) -> None:
        super(FunctionInput, self).__init__(**kwargs)
        self.data_type = data_type
        self.is_configuration_parameter = is_configuration_parameter


class FunctionOutput(Model):
    """Describes the output of a function.

    :param data_type: The (Azure Stream Analytics supported) data type of the
     function output. A list of valid Azure Stream Analytics data types are
     described at https://msdn.microsoft.com/en-us/library/azure/dn835065.aspx
    :type data_type: str
    """

    _attribute_map = {
        'data_type': {'key': 'dataType', 'type': 'str'},
    }

    def __init__(self, *, data_type: str=None, **kwargs) -> None:
        super(FunctionOutput, self).__init__(**kwargs)
        self.data_type = data_type


class FunctionProperties(Model):
    """The properties that are associated with a function.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ScalarFunctionProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar etag: The current entity tag for the function. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Scalar': 'ScalarFunctionProperties'}
    }

    def __init__(self, **kwargs) -> None:
        super(FunctionProperties, self).__init__(**kwargs)
        self.etag = None
        self.type = None


class Input(SubResource):
    """An input object, containing all information associated with the named
    input. All inputs are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    :param properties: The properties that are associated with an input.
     Required on PUT (CreateOrReplace) requests.
    :type properties: ~azure.mgmt.streamanalytics.models.InputProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'InputProperties'},
    }

    def __init__(self, *, name: str=None, properties=None, **kwargs) -> None:
        super(Input, self).__init__(name=name, **kwargs)
        self.properties = properties


class InputProperties(Model):
    """The properties that are associated with an input.

    You probably want to use the sub-classes and not this class directly. Known
    sub-classes are: ReferenceInputProperties, StreamInputProperties

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param serialization: Describes how data from an input is serialized or
     how data is serialized when written to an output. Required on PUT
     (CreateOrReplace) requests.
    :type serialization: ~azure.mgmt.streamanalytics.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output,
     or the job overall, that warrant customer attention.
    :vartype diagnostics: ~azure.mgmt.streamanalytics.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    :param type: Required. Constant filled by server.
    :type type: str
    """

    _validation = {
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    _subtype_map = {
        'type': {'Reference': 'ReferenceInputProperties', 'Stream': 'StreamInputProperties'}
    }

    def __init__(self, *, serialization=None, **kwargs) -> None:
        super(InputProperties, self).__init__(**kwargs)
        self.serialization = serialization
        self.diagnostics = None
        self.etag = None
        self.type = None


class IoTHubStreamInputDataSource(StreamInputDataSource):
    """Describes an IoT Hub input data source that contains stream data.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param iot_hub_namespace: The name or the URI of the IoT Hub. Required on
     PUT (CreateOrReplace) requests.
    :type iot_hub_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     IoT Hub. This policy must contain at least the Service connect permission.
     Required on PUT (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param consumer_group_name: The name of an IoT Hub Consumer Group that
     should be used to read events from the IoT Hub. If not specified, the
     input uses the Iot Hubâ€™s default consumer group.
    :type consumer_group_name: str
    :param endpoint: The IoT Hub endpoint to connect to (ie. messages/events,
     messages/operationsMonitoringEvents, etc.).
    :type endpoint: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'iot_hub_namespace': {'key': 'properties.iotHubNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'consumer_group_name': {'key': 'properties.consumerGroupName', 'type': 'str'},
        'endpoint': {'key': 'properties.endpoint', 'type': 'str'},
    }

    def __init__(self, *, iot_hub_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, consumer_group_name: str=None, endpoint: str=None, **kwargs) -> None:
        super(IoTHubStreamInputDataSource, self).__init__(**kwargs)
        self.iot_hub_namespace = iot_hub_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key
        self.consumer_group_name = consumer_group_name
        self.endpoint = endpoint
        self.type = 'Microsoft.Devices/IotHubs'


class JavaScriptFunctionBinding(FunctionBinding):
    """The binding to a JavaScript function.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param script: The JavaScript code containing a single function
     definition. For example: 'function (x, y) { return x + y; }'
    :type script: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'script': {'key': 'properties.script', 'type': 'str'},
    }

    def __init__(self, *, script: str=None, **kwargs) -> None:
        super(JavaScriptFunctionBinding, self).__init__(**kwargs)
        self.script = script
        self.type = 'Microsoft.StreamAnalytics/JavascriptUdf'


class JavaScriptFunctionRetrieveDefaultDefinitionParameters(FunctionRetrieveDefaultDefinitionParameters):
    """The parameters needed to retrieve the default function definition for a
    JavaScript function.

    All required parameters must be populated in order to send to Azure.

    :param binding_type: Required. Constant filled by server.
    :type binding_type: str
    :param script: The JavaScript code containing a single function
     definition. For example: 'function (x, y) { return x + y; }'.
    :type script: str
    :param udf_type: The function type. Possible values include: 'Scalar'
    :type udf_type: str or ~azure.mgmt.streamanalytics.models.UdfType
    """

    _validation = {
        'binding_type': {'required': True},
    }

    _attribute_map = {
        'binding_type': {'key': 'bindingType', 'type': 'str'},
        'script': {'key': 'bindingRetrievalProperties.script', 'type': 'str'},
        'udf_type': {'key': 'bindingRetrievalProperties.udfType', 'type': 'UdfType'},
    }

    def __init__(self, *, script: str=None, udf_type=None, **kwargs) -> None:
        super(JavaScriptFunctionRetrieveDefaultDefinitionParameters, self).__init__(**kwargs)
        self.script = script
        self.udf_type = udf_type
        self.binding_type = 'Microsoft.StreamAnalytics/JavascriptUdf'


class JsonSerialization(Serialization):
    """Describes how data from an input is serialized or how data is serialized
    when written to an output in JSON format.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param encoding: Specifies the encoding of the incoming data in the case
     of input and the encoding of outgoing data in the case of output. Required
     on PUT (CreateOrReplace) requests. Possible values include: 'UTF8'
    :type encoding: str or ~azure.mgmt.streamanalytics.models.Encoding
    :param format: This property only applies to JSON serialization of outputs
     only. It is not applicable to inputs. This property specifies the format
     of the JSON the output will be written in. The currently supported values
     are 'lineSeparated' indicating the output will be formatted by having each
     JSON object separated by a new line and 'array' indicating the output will
     be formatted as an array of JSON objects. Default value is 'lineSeparated'
     if left null. Possible values include: 'LineSeparated', 'Array'
    :type format: str or
     ~azure.mgmt.streamanalytics.models.JsonOutputSerializationFormat
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'encoding': {'key': 'properties.encoding', 'type': 'str'},
        'format': {'key': 'properties.format', 'type': 'str'},
    }

    def __init__(self, *, encoding=None, format=None, **kwargs) -> None:
        super(JsonSerialization, self).__init__(**kwargs)
        self.encoding = encoding
        self.format = format
        self.type = 'Json'


class OAuthBasedDataSourceProperties(Model):
    """The properties that are associated with data sources that use OAuth as
    their authentication model.

    :param refresh_token: A refresh token that can be used to obtain a valid
     access token that can then be used to authenticate with the data source. A
     valid refresh token is currently only obtainable via the Azure Portal. It
     is recommended to put a dummy string value here when creating the data
     source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on
     PUT (CreateOrReplace) requests.
    :type refresh_token: str
    :param token_user_principal_name: The user principal name (UPN) of the
     user that was used to obtain the refresh token. Use this property to help
     remember which user was used to obtain the refresh token.
    :type token_user_principal_name: str
    :param token_user_display_name: The user display name of the user that was
     used to obtain the refresh token. Use this property to help remember which
     user was used to obtain the refresh token.
    :type token_user_display_name: str
    """

    _attribute_map = {
        'refresh_token': {'key': 'refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'tokenUserDisplayName', 'type': 'str'},
    }

    def __init__(self, *, refresh_token: str=None, token_user_principal_name: str=None, token_user_display_name: str=None, **kwargs) -> None:
        super(OAuthBasedDataSourceProperties, self).__init__(**kwargs)
        self.refresh_token = refresh_token
        self.token_user_principal_name = token_user_principal_name
        self.token_user_display_name = token_user_display_name


class Operation(Model):
    """A Stream Analytics REST API operation.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: The name of the operation being performed on this particular
     object.
    :vartype name: str
    :ivar display: Contains the localized display information for this
     particular operation / action.
    :vartype display: ~azure.mgmt.streamanalytics.models.OperationDisplay
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(self, **kwargs) -> None:
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = None


class OperationDisplay(Model):
    """Contains the localized display information for this particular operation /
    action.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provider: The localized friendly form of the resource provider name.
    :vartype provider: str
    :ivar resource: The localized friendly form of the resource type related
     to this action/operation.
    :vartype resource: str
    :ivar operation: The localized friendly name for the operation.
    :vartype operation: str
    :ivar description: The localized friendly description for the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class Output(SubResource):
    """An output object, containing all information associated with the named
    output. All outputs are contained under a streaming job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    :param datasource: Describes the data source that output will be written
     to. Required on PUT (CreateOrReplace) requests.
    :type datasource: ~azure.mgmt.streamanalytics.models.OutputDataSource
    :param serialization: Describes how data from an input is serialized or
     how data is serialized when written to an output. Required on PUT
     (CreateOrReplace) requests.
    :type serialization: ~azure.mgmt.streamanalytics.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output,
     or the job overall, that warrant customer attention.
    :vartype diagnostics: ~azure.mgmt.streamanalytics.models.Diagnostics
    :ivar etag: The current entity tag for the output. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'datasource': {'key': 'properties.datasource', 'type': 'OutputDataSource'},
        'serialization': {'key': 'properties.serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'properties.diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, datasource=None, serialization=None, **kwargs) -> None:
        super(Output, self).__init__(name=name, **kwargs)
        self.datasource = datasource
        self.serialization = serialization
        self.diagnostics = None
        self.etag = None


class PowerBIOutputDataSource(OutputDataSource):
    """Describes a Power BI output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param refresh_token: A refresh token that can be used to obtain a valid
     access token that can then be used to authenticate with the data source. A
     valid refresh token is currently only obtainable via the Azure Portal. It
     is recommended to put a dummy string value here when creating the data
     source and then going to the Azure Portal to authenticate the data source
     which will update this property with a valid refresh token. Required on
     PUT (CreateOrReplace) requests.
    :type refresh_token: str
    :param token_user_principal_name: The user principal name (UPN) of the
     user that was used to obtain the refresh token. Use this property to help
     remember which user was used to obtain the refresh token.
    :type token_user_principal_name: str
    :param token_user_display_name: The user display name of the user that was
     used to obtain the refresh token. Use this property to help remember which
     user was used to obtain the refresh token.
    :type token_user_display_name: str
    :param dataset: The name of the Power BI dataset. Required on PUT
     (CreateOrReplace) requests.
    :type dataset: str
    :param table: The name of the Power BI table under the specified dataset.
     Required on PUT (CreateOrReplace) requests.
    :type table: str
    :param group_id: The ID of the Power BI group.
    :type group_id: str
    :param group_name: The name of the Power BI group. Use this property to
     help remember which specific Power BI group id was used.
    :type group_name: str
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'refresh_token': {'key': 'properties.refreshToken', 'type': 'str'},
        'token_user_principal_name': {'key': 'properties.tokenUserPrincipalName', 'type': 'str'},
        'token_user_display_name': {'key': 'properties.tokenUserDisplayName', 'type': 'str'},
        'dataset': {'key': 'properties.dataset', 'type': 'str'},
        'table': {'key': 'properties.table', 'type': 'str'},
        'group_id': {'key': 'properties.groupId', 'type': 'str'},
        'group_name': {'key': 'properties.groupName', 'type': 'str'},
    }

    def __init__(self, *, refresh_token: str=None, token_user_principal_name: str=None, token_user_display_name: str=None, dataset: str=None, table: str=None, group_id: str=None, group_name: str=None, **kwargs) -> None:
        super(PowerBIOutputDataSource, self).__init__(**kwargs)
        self.refresh_token = refresh_token
        self.token_user_principal_name = token_user_principal_name
        self.token_user_display_name = token_user_display_name
        self.dataset = dataset
        self.table = table
        self.group_id = group_id
        self.group_name = group_name
        self.type = 'PowerBI'


class ReferenceInputProperties(InputProperties):
    """The properties that are associated with an input containing reference data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param serialization: Describes how data from an input is serialized or
     how data is serialized when written to an output. Required on PUT
     (CreateOrReplace) requests.
    :type serialization: ~azure.mgmt.streamanalytics.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output,
     or the job overall, that warrant customer attention.
    :vartype diagnostics: ~azure.mgmt.streamanalytics.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    :param type: Required. Constant filled by server.
    :type type: str
    :param datasource: Describes an input data source that contains reference
     data. Required on PUT (CreateOrReplace) requests.
    :type datasource:
     ~azure.mgmt.streamanalytics.models.ReferenceInputDataSource
    """

    _validation = {
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'datasource': {'key': 'datasource', 'type': 'ReferenceInputDataSource'},
    }

    def __init__(self, *, serialization=None, datasource=None, **kwargs) -> None:
        super(ReferenceInputProperties, self).__init__(serialization=serialization, **kwargs)
        self.datasource = datasource
        self.type = 'Reference'


class Resource(Model):
    """The base resource model definition.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Resource location. Required on PUT (CreateOrReplace)
     requests.
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.location = location
        self.tags = tags


class ResourceTestStatus(Model):
    """Describes the status of the test operation along with error information, if
    applicable.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar status: The status of the test operation.
    :vartype status: str
    :ivar error: Describes the error that occurred.
    :vartype error: ~azure.mgmt.streamanalytics.models.ErrorResponse
    """

    _validation = {
        'status': {'readonly': True},
        'error': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'error': {'key': 'error', 'type': 'ErrorResponse'},
    }

    def __init__(self, **kwargs) -> None:
        super(ResourceTestStatus, self).__init__(**kwargs)
        self.status = None
        self.error = None


class ScalarFunctionProperties(FunctionProperties):
    """The properties that are associated with a scalar function.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar etag: The current entity tag for the function. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    :param type: Required. Constant filled by server.
    :type type: str
    :param inputs: A list of inputs describing the parameters of the function.
    :type inputs: list[~azure.mgmt.streamanalytics.models.FunctionInput]
    :param output: The output of the function.
    :type output: ~azure.mgmt.streamanalytics.models.FunctionOutput
    :param binding: The physical binding of the function. For example, in the
     Azure Machine Learning web serviceâ€™s case, this describes the endpoint.
    :type binding: ~azure.mgmt.streamanalytics.models.FunctionBinding
    """

    _validation = {
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'inputs': {'key': 'properties.inputs', 'type': '[FunctionInput]'},
        'output': {'key': 'properties.output', 'type': 'FunctionOutput'},
        'binding': {'key': 'properties.binding', 'type': 'FunctionBinding'},
    }

    def __init__(self, *, inputs=None, output=None, binding=None, **kwargs) -> None:
        super(ScalarFunctionProperties, self).__init__(**kwargs)
        self.inputs = inputs
        self.output = output
        self.binding = binding
        self.type = 'Scalar'


class ServiceBusQueueOutputDataSource(OutputDataSource):
    """Describes a Service Bus Queue output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param queue_name: The name of the Service Bus Queue. Required on PUT
     (CreateOrReplace) requests.
    :type queue_name: str
    :param property_columns: A string array of the names of output columns to
     be attached to Service Bus messages as custom properties.
    :type property_columns: list[str]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'queue_name': {'key': 'properties.queueName', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, queue_name: str=None, property_columns=None, **kwargs) -> None:
        super(ServiceBusQueueOutputDataSource, self).__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key
        self.queue_name = queue_name
        self.property_columns = property_columns
        self.type = 'Microsoft.ServiceBus/Queue'


class ServiceBusTopicOutputDataSource(OutputDataSource):
    """Describes a Service Bus Topic output data source.

    All required parameters must be populated in order to send to Azure.

    :param type: Required. Constant filled by server.
    :type type: str
    :param service_bus_namespace: The namespace that is associated with the
     desired Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on
     PUT (CreateOrReplace) requests.
    :type service_bus_namespace: str
    :param shared_access_policy_name: The shared access policy name for the
     Event Hub, Service Bus Queue, Service Bus Topic, etc. Required on PUT
     (CreateOrReplace) requests.
    :type shared_access_policy_name: str
    :param shared_access_policy_key: The shared access policy key for the
     specified shared access policy. Required on PUT (CreateOrReplace)
     requests.
    :type shared_access_policy_key: str
    :param topic_name: The name of the Service Bus Topic. Required on PUT
     (CreateOrReplace) requests.
    :type topic_name: str
    :param property_columns: A string array of the names of output columns to
     be attached to Service Bus messages as custom properties.
    :type property_columns: list[str]
    """

    _validation = {
        'type': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'service_bus_namespace': {'key': 'properties.serviceBusNamespace', 'type': 'str'},
        'shared_access_policy_name': {'key': 'properties.sharedAccessPolicyName', 'type': 'str'},
        'shared_access_policy_key': {'key': 'properties.sharedAccessPolicyKey', 'type': 'str'},
        'topic_name': {'key': 'properties.topicName', 'type': 'str'},
        'property_columns': {'key': 'properties.propertyColumns', 'type': '[str]'},
    }

    def __init__(self, *, service_bus_namespace: str=None, shared_access_policy_name: str=None, shared_access_policy_key: str=None, topic_name: str=None, property_columns=None, **kwargs) -> None:
        super(ServiceBusTopicOutputDataSource, self).__init__(**kwargs)
        self.service_bus_namespace = service_bus_namespace
        self.shared_access_policy_name = shared_access_policy_name
        self.shared_access_policy_key = shared_access_policy_key
        self.topic_name = topic_name
        self.property_columns = property_columns
        self.type = 'Microsoft.ServiceBus/Topic'


class Sku(Model):
    """The properties that are associated with a SKU.

    :param name: The name of the SKU. Required on PUT (CreateOrReplace)
     requests. Possible values include: 'Standard'
    :type name: str or ~azure.mgmt.streamanalytics.models.SkuName
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(self, *, name=None, **kwargs) -> None:
        super(Sku, self).__init__(**kwargs)
        self.name = name


class StartStreamingJobParameters(Model):
    """Parameters supplied to the Start Streaming Job operation.

    :param output_start_mode: Value may be JobStartTime, CustomTime, or
     LastOutputEventTime to indicate whether the starting point of the output
     event stream should start whenever the job is started, start at a custom
     user time stamp specified via the outputStartTime property, or start from
     the last event output time. Possible values include: 'JobStartTime',
     'CustomTime', 'LastOutputEventTime'
    :type output_start_mode: str or
     ~azure.mgmt.streamanalytics.models.OutputStartMode
    :param output_start_time: Value is either an ISO-8601 formatted time stamp
     that indicates the starting point of the output event stream, or null to
     indicate that the output event stream will start whenever the streaming
     job is started. This property must have a value if outputStartMode is set
     to CustomTime.
    :type output_start_time: datetime
    """

    _attribute_map = {
        'output_start_mode': {'key': 'outputStartMode', 'type': 'str'},
        'output_start_time': {'key': 'outputStartTime', 'type': 'iso-8601'},
    }

    def __init__(self, *, output_start_mode=None, output_start_time=None, **kwargs) -> None:
        super(StartStreamingJobParameters, self).__init__(**kwargs)
        self.output_start_mode = output_start_mode
        self.output_start_time = output_start_time


class StorageAccount(Model):
    """The properties that are associated with an Azure Storage account.

    :param account_name: The name of the Azure Storage account. Required on
     PUT (CreateOrReplace) requests.
    :type account_name: str
    :param account_key: The account key for the Azure Storage account.
     Required on PUT (CreateOrReplace) requests.
    :type account_key: str
    """

    _attribute_map = {
        'account_name': {'key': 'accountName', 'type': 'str'},
        'account_key': {'key': 'accountKey', 'type': 'str'},
    }

    def __init__(self, *, account_name: str=None, account_key: str=None, **kwargs) -> None:
        super(StorageAccount, self).__init__(**kwargs)
        self.account_name = account_name
        self.account_key = account_key


class StreamingJob(Resource):
    """A streaming job object, containing all information associated with the
    named streaming job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :ivar name: Resource name
    :vartype name: str
    :ivar type: Resource type
    :vartype type: str
    :param location: Resource location. Required on PUT (CreateOrReplace)
     requests.
    :type location: str
    :param tags: Resource tags
    :type tags: dict[str, str]
    :param sku: Describes the SKU of the streaming job. Required on PUT
     (CreateOrReplace) requests.
    :type sku: ~azure.mgmt.streamanalytics.models.Sku
    :ivar job_id: A GUID uniquely identifying the streaming job. This GUID is
     generated upon creation of the streaming job.
    :vartype job_id: str
    :ivar provisioning_state: Describes the provisioning status of the
     streaming job.
    :vartype provisioning_state: str
    :ivar job_state: Describes the state of the streaming job.
    :vartype job_state: str
    :param output_start_mode: This property should only be utilized when it is
     desired that the job be started immediately upon creation. Value may be
     JobStartTime, CustomTime, or LastOutputEventTime to indicate whether the
     starting point of the output event stream should start whenever the job is
     started, start at a custom user time stamp specified via the
     outputStartTime property, or start from the last event output time.
     Possible values include: 'JobStartTime', 'CustomTime',
     'LastOutputEventTime'
    :type output_start_mode: str or
     ~azure.mgmt.streamanalytics.models.OutputStartMode
    :param output_start_time: Value is either an ISO-8601 formatted time stamp
     that indicates the starting point of the output event stream, or null to
     indicate that the output event stream will start whenever the streaming
     job is started. This property must have a value if outputStartMode is set
     to CustomTime.
    :type output_start_time: datetime
    :ivar last_output_event_time: Value is either an ISO-8601 formatted
     timestamp indicating the last output event time of the streaming job or
     null indicating that output has not yet been produced. In case of multiple
     outputs or multiple streams, this shows the latest value in that set.
    :vartype last_output_event_time: datetime
    :param events_out_of_order_policy: Indicates the policy to apply to events
     that arrive out of order in the input event stream. Possible values
     include: 'Adjust', 'Drop'
    :type events_out_of_order_policy: str or
     ~azure.mgmt.streamanalytics.models.EventsOutOfOrderPolicy
    :param output_error_policy: Indicates the policy to apply to events that
     arrive at the output and cannot be written to the external storage due to
     being malformed (missing column values, column values of wrong type or
     size). Possible values include: 'Stop', 'Drop'
    :type output_error_policy: str or
     ~azure.mgmt.streamanalytics.models.OutputErrorPolicy
    :param events_out_of_order_max_delay_in_seconds: The maximum tolerable
     delay in seconds where out-of-order events can be adjusted to be back in
     order.
    :type events_out_of_order_max_delay_in_seconds: int
    :param events_late_arrival_max_delay_in_seconds: The maximum tolerable
     delay in seconds where events arriving late could be included.  Supported
     range is -1 to 1814399 (20.23:59:59 days) and -1 is used to specify wait
     indefinitely. If the property is absent, it is interpreted to have a value
     of -1.
    :type events_late_arrival_max_delay_in_seconds: int
    :param data_locale: The data locale of the stream analytics job. Value
     should be the name of a supported .NET Culture from the set
     https://msdn.microsoft.com/en-us/library/system.globalization.culturetypes(v=vs.110).aspx.
     Defaults to 'en-US' if none specified.
    :type data_locale: str
    :param compatibility_level: Controls certain runtime behaviors of the
     streaming job. Possible values include: '1.0'
    :type compatibility_level: str or
     ~azure.mgmt.streamanalytics.models.CompatibilityLevel
    :ivar created_date: Value is an ISO-8601 formatted UTC timestamp
     indicating when the streaming job was created.
    :vartype created_date: datetime
    :param inputs: A list of one or more inputs to the streaming job. The name
     property for each input is required when specifying this property in a PUT
     request. This property cannot be modify via a PATCH operation. You must
     use the PATCH API available for the individual input.
    :type inputs: list[~azure.mgmt.streamanalytics.models.Input]
    :param transformation: Indicates the query and the number of streaming
     units to use for the streaming job. The name property of the
     transformation is required when specifying this property in a PUT request.
     This property cannot be modify via a PATCH operation. You must use the
     PATCH API available for the individual transformation.
    :type transformation: ~azure.mgmt.streamanalytics.models.Transformation
    :param outputs: A list of one or more outputs for the streaming job. The
     name property for each output is required when specifying this property in
     a PUT request. This property cannot be modify via a PATCH operation. You
     must use the PATCH API available for the individual output.
    :type outputs: list[~azure.mgmt.streamanalytics.models.Output]
    :param functions: A list of one or more functions for the streaming job.
     The name property for each function is required when specifying this
     property in a PUT request. This property cannot be modify via a PATCH
     operation. You must use the PATCH API available for the individual
     transformation.
    :type functions: list[~azure.mgmt.streamanalytics.models.Function]
    :ivar etag: The current entity tag for the streaming job. This is an
     opaque string. You can use it to detect whether the resource has changed
     between requests. You can also use it in the If-Match or If-None-Match
     headers for write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'job_id': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'job_state': {'readonly': True},
        'last_output_event_time': {'readonly': True},
        'created_date': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'job_id': {'key': 'properties.jobId', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'job_state': {'key': 'properties.jobState', 'type': 'str'},
        'output_start_mode': {'key': 'properties.outputStartMode', 'type': 'str'},
        'output_start_time': {'key': 'properties.outputStartTime', 'type': 'iso-8601'},
        'last_output_event_time': {'key': 'properties.lastOutputEventTime', 'type': 'iso-8601'},
        'events_out_of_order_policy': {'key': 'properties.eventsOutOfOrderPolicy', 'type': 'str'},
        'output_error_policy': {'key': 'properties.outputErrorPolicy', 'type': 'str'},
        'events_out_of_order_max_delay_in_seconds': {'key': 'properties.eventsOutOfOrderMaxDelayInSeconds', 'type': 'int'},
        'events_late_arrival_max_delay_in_seconds': {'key': 'properties.eventsLateArrivalMaxDelayInSeconds', 'type': 'int'},
        'data_locale': {'key': 'properties.dataLocale', 'type': 'str'},
        'compatibility_level': {'key': 'properties.compatibilityLevel', 'type': 'str'},
        'created_date': {'key': 'properties.createdDate', 'type': 'iso-8601'},
        'inputs': {'key': 'properties.inputs', 'type': '[Input]'},
        'transformation': {'key': 'properties.transformation', 'type': 'Transformation'},
        'outputs': {'key': 'properties.outputs', 'type': '[Output]'},
        'functions': {'key': 'properties.functions', 'type': '[Function]'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(self, *, location: str=None, tags=None, sku=None, output_start_mode=None, output_start_time=None, events_out_of_order_policy=None, output_error_policy=None, events_out_of_order_max_delay_in_seconds: int=None, events_late_arrival_max_delay_in_seconds: int=None, data_locale: str=None, compatibility_level=None, inputs=None, transformation=None, outputs=None, functions=None, **kwargs) -> None:
        super(StreamingJob, self).__init__(location=location, tags=tags, **kwargs)
        self.sku = sku
        self.job_id = None
        self.provisioning_state = None
        self.job_state = None
        self.output_start_mode = output_start_mode
        self.output_start_time = output_start_time
        self.last_output_event_time = None
        self.events_out_of_order_policy = events_out_of_order_policy
        self.output_error_policy = output_error_policy
        self.events_out_of_order_max_delay_in_seconds = events_out_of_order_max_delay_in_seconds
        self.events_late_arrival_max_delay_in_seconds = events_late_arrival_max_delay_in_seconds
        self.data_locale = data_locale
        self.compatibility_level = compatibility_level
        self.created_date = None
        self.inputs = inputs
        self.transformation = transformation
        self.outputs = outputs
        self.functions = functions
        self.etag = None


class StreamInputProperties(InputProperties):
    """The properties that are associated with an input containing stream data.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :param serialization: Describes how data from an input is serialized or
     how data is serialized when written to an output. Required on PUT
     (CreateOrReplace) requests.
    :type serialization: ~azure.mgmt.streamanalytics.models.Serialization
    :ivar diagnostics: Describes conditions applicable to the Input, Output,
     or the job overall, that warrant customer attention.
    :vartype diagnostics: ~azure.mgmt.streamanalytics.models.Diagnostics
    :ivar etag: The current entity tag for the input. This is an opaque
     string. You can use it to detect whether the resource has changed between
     requests. You can also use it in the If-Match or If-None-Match headers for
     write operations for optimistic concurrency.
    :vartype etag: str
    :param type: Required. Constant filled by server.
    :type type: str
    :param datasource: Describes an input data source that contains stream
     data. Required on PUT (CreateOrReplace) requests.
    :type datasource: ~azure.mgmt.streamanalytics.models.StreamInputDataSource
    """

    _validation = {
        'diagnostics': {'readonly': True},
        'etag': {'readonly': True},
        'type': {'required': True},
    }

    _attribute_map = {
        'serialization': {'key': 'serialization', 'type': 'Serialization'},
        'diagnostics': {'key': 'diagnostics', 'type': 'Diagnostics'},
        'etag': {'key': 'etag', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'datasource': {'key': 'datasource', 'type': 'StreamInputDataSource'},
    }

    def __init__(self, *, serialization=None, datasource=None, **kwargs) -> None:
        super(StreamInputProperties, self).__init__(serialization=serialization, **kwargs)
        self.datasource = datasource
        self.type = 'Stream'


class SubscriptionQuota(SubResource):
    """Describes the current quota for the subscription.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    :ivar max_count: The max permitted usage of this resource.
    :vartype max_count: int
    :ivar current_count: The current usage of this resource.
    :vartype current_count: int
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'max_count': {'readonly': True},
        'current_count': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'max_count': {'key': 'properties.maxCount', 'type': 'int'},
        'current_count': {'key': 'properties.currentCount', 'type': 'int'},
    }

    def __init__(self, *, name: str=None, **kwargs) -> None:
        super(SubscriptionQuota, self).__init__(name=name, **kwargs)
        self.max_count = None
        self.current_count = None


class SubscriptionQuotasListResult(Model):
    """Result of the GetQuotas operation. It contains a list of quotas for the
    subscription in a particular region.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar value: List of quotas for the subscription in a particular region.
    :vartype value: list[~azure.mgmt.streamanalytics.models.SubscriptionQuota]
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SubscriptionQuota]'},
    }

    def __init__(self, **kwargs) -> None:
        super(SubscriptionQuotasListResult, self).__init__(**kwargs)
        self.value = None


class Transformation(SubResource):
    """A transformation object, containing all information associated with the
    named transformation. All transformations are contained under a streaming
    job.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Resource Id
    :vartype id: str
    :param name: Resource name
    :type name: str
    :ivar type: Resource type
    :vartype type: str
    :param streaming_units: Specifies the number of streaming units that the
     streaming job uses.
    :type streaming_units: int
    :param query: Specifies the query that will be run in the streaming job.
     You can learn more about the Stream Analytics Query Language (SAQL) here:
     https://msdn.microsoft.com/library/azure/dn834998 . Required on PUT
     (CreateOrReplace) requests.
    :type query: str
    :ivar etag: The current entity tag for the transformation. This is an
     opaque string. You can use it to detect whether the resource has changed
     between requests. You can also use it in the If-Match or If-None-Match
     headers for write operations for optimistic concurrency.
    :vartype etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
        'etag': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'streaming_units': {'key': 'properties.streamingUnits', 'type': 'int'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'etag': {'key': 'properties.etag', 'type': 'str'},
    }

    def __init__(self, *, name: str=None, streaming_units: int=None, query: str=None, **kwargs) -> None:
        super(Transformation, self).__init__(name=name, **kwargs)
        self.streaming_units = streaming_units
        self.query = query
        self.etag = None
