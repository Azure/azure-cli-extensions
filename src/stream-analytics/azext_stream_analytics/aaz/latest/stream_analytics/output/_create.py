# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "stream-analytics output create",
)
class Create(AAZCommand):
    """Create an output or replaces an already existing output under an existing streaming job.
    """

    _aaz_info = {
        "version": "2020-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.streamanalytics/streamingjobs/{}/outputs/{}", "2020-03-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.if_match = AAZStrArg(
            options=["--if-match"],
            help="The ETag of the output. Omit this value to always overwrite the current output. Specify the last-seen ETag value to prevent accidentally overwriting concurrent changes.",
        )
        _args_schema.if_none_match = AAZStrArg(
            options=["--if-none-match"],
            help="Set to '*' to allow a new output to be created, but to prevent updating an existing output. Other values will result in a 412 Pre-condition Failed response.",
        )
        _args_schema.job_name = AAZStrArg(
            options=["--job-name"],
            help="The name of the streaming job.",
            required=True,
        )
        _args_schema.output_name = AAZStrArg(
            options=["-n", "--name", "--output-name"],
            help="The name of the output.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.datasource = AAZDictArg(
            options=["--datasource"],
            help="Describes the data source that output will be written to. Required on PUT (CreateOrReplace) requests.",
        )
        _args_schema.serialization = AAZDictArg(
            options=["--serialization"],
            help="Describes how data from an input is serialized or how data is serialized when written to an output. Required on PUT (CreateOrReplace) requests.",
        )
        _args_schema.size_window = AAZIntArg(
            options=["--size-window"],
            help="The size window to constrain a Stream Analytics output to.",
        )
        _args_schema.time_window = AAZStrArg(
            options=["--time-window"],
            help="The time frame for filtering Stream Analytics job outputs.",
        )

        datasource = cls._args_schema.datasource
        datasource.Element = AAZAnyTypeArg()

        serialization = cls._args_schema.serialization
        serialization.Element = AAZAnyTypeArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OutputsCreateOrReplace(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OutputsCreateOrReplace(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StreamAnalytics/streamingjobs/{jobName}/outputs/{outputName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "jobName", self.ctx.args.job_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "outputName", self.ctx.args.output_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2020-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "If-Match", self.ctx.args.if_match,
                ),
                **self.serialize_header_param(
                    "If-None-Match", self.ctx.args.if_none_match,
                ),
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("name", AAZStrType, ".output_name")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("datasource", AAZDictType, ".datasource")
                properties.set_prop("serialization", AAZDictType, ".serialization")
                properties.set_prop("sizeWindow", AAZIntType, ".size_window")
                properties.set_prop("timeWindow", AAZStrType, ".time_window")

            datasource = _builder.get(".properties.datasource")
            if datasource is not None:
                datasource.set_elements(AAZAnyType, ".")

            serialization = _builder.get(".properties.serialization")
            if serialization is not None:
                serialization.set_elements(AAZAnyType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.datasource = AAZDictType()
            properties.diagnostics = AAZObjectType(
                flags={"read_only": True},
            )
            properties.etag = AAZStrType(
                flags={"read_only": True},
            )
            properties.serialization = AAZDictType()
            properties.size_window = AAZIntType(
                serialized_name="sizeWindow",
            )
            properties.time_window = AAZStrType(
                serialized_name="timeWindow",
            )

            datasource = cls._schema_on_200_201.properties.datasource
            datasource.Element = AAZAnyType()

            diagnostics = cls._schema_on_200_201.properties.diagnostics
            diagnostics.conditions = AAZListType(
                flags={"read_only": True},
            )

            conditions = cls._schema_on_200_201.properties.diagnostics.conditions
            conditions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.diagnostics.conditions.Element
            _element.code = AAZStrType(
                flags={"read_only": True},
            )
            _element.message = AAZStrType(
                flags={"read_only": True},
            )
            _element.since = AAZStrType(
                flags={"read_only": True},
            )

            serialization = cls._schema_on_200_201.properties.serialization
            serialization.Element = AAZAnyType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
