# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals
# pylint: disable=bad-continuation
# pylint: disable=line-too-long

from azure.cli.core.commands import CliCommandType
from azext_stream_analytics.generated._client_factory import (
    cf_streaming_job,
    cf_input,
    cf_output,
    cf_transformation,
    cf_function,
    cf_subscription,
    cf_cluster,
    cf_private_endpoint,
)


stream_analytics_cluster = CliCommandType(
    operations_tmpl=(
        'azext_stream_analytics.vendored_sdks.streamanalytics.operations._clusters_operations#ClustersOperations.{}'
    ),
    client_factory=cf_cluster,
)


stream_analytics_function = CliCommandType(
    operations_tmpl=(
        'azext_stream_analytics.vendored_sdks.streamanalytics.operations._functions_operations#FunctionsOperations.{}'
    ),
    client_factory=cf_function,
)


stream_analytics_input = CliCommandType(
    operations_tmpl=(
        'azext_stream_analytics.vendored_sdks.streamanalytics.operations._inputs_operations#InputsOperations.{}'
    ),
    client_factory=cf_input,
)


stream_analytics_streaming_job = CliCommandType(
    operations_tmpl='azext_stream_analytics.vendored_sdks.streamanalytics.operations._streaming_jobs_operations#StreamingJobsOperations.{}',
    client_factory=cf_streaming_job,
)


stream_analytics_output = CliCommandType(
    operations_tmpl=(
        'azext_stream_analytics.vendored_sdks.streamanalytics.operations._outputs_operations#OutputsOperations.{}'
    ),
    client_factory=cf_output,
)


stream_analytics_private_endpoint = CliCommandType(
    operations_tmpl='azext_stream_analytics.vendored_sdks.streamanalytics.operations._private_endpoints_operations#PrivateEndpointsOperations.{}',
    client_factory=cf_private_endpoint,
)


stream_analytics_subscription = CliCommandType(
    operations_tmpl='azext_stream_analytics.vendored_sdks.streamanalytics.operations._subscriptions_operations#SubscriptionsOperations.{}',
    client_factory=cf_subscription,
)


stream_analytics_transformation = CliCommandType(
    operations_tmpl='azext_stream_analytics.vendored_sdks.streamanalytics.operations._transformations_operations#TransformationsOperations.{}',
    client_factory=cf_transformation,
)


def load_command_table(self, _):

    with self.command_group('stream-analytics cluster', stream_analytics_cluster, client_factory=cf_cluster) as g:
        g.custom_command('list', 'stream_analytics_cluster_list')
        g.custom_show_command('show', 'stream_analytics_cluster_show')
        g.custom_command('create', 'stream_analytics_cluster_create', supports_no_wait=True)
        g.custom_command('update', 'stream_analytics_cluster_update', supports_no_wait=True)
        g.custom_command('delete', 'stream_analytics_cluster_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('list-streaming-job', 'stream_analytics_cluster_list_streaming_job')
        g.custom_wait_command('wait', 'stream_analytics_cluster_show')

    with self.command_group('stream-analytics function', stream_analytics_function, client_factory=cf_function) as g:
        g.custom_command('list', 'stream_analytics_function_list')
        g.custom_show_command('show', 'stream_analytics_function_show')
        g.custom_command('create', 'stream_analytics_function_create')
        g.custom_command('update', 'stream_analytics_function_update')
        g.custom_command('delete', 'stream_analytics_function_delete', confirmation=True)
        g.custom_command('test', 'stream_analytics_function_test', supports_no_wait=True)
        g.custom_wait_command('wait', 'stream_analytics_function_show')

    with self.command_group('stream-analytics input', stream_analytics_input, client_factory=cf_input) as g:
        g.custom_command('list', 'stream_analytics_input_list')
        g.custom_show_command('show', 'stream_analytics_input_show')
        g.custom_command('create', 'stream_analytics_input_create')
        g.custom_command('update', 'stream_analytics_input_update')
        g.custom_command('delete', 'stream_analytics_input_delete', confirmation=True)
        g.custom_command('test', 'stream_analytics_input_test', supports_no_wait=True)
        g.custom_wait_command('wait', 'stream_analytics_input_show')

    with self.command_group(
        'stream-analytics job', stream_analytics_streaming_job, client_factory=cf_streaming_job
    ) as g:
        g.custom_command('list', 'stream_analytics_job_list')
        g.custom_show_command('show', 'stream_analytics_job_show')
        g.custom_command('create', 'stream_analytics_job_create', supports_no_wait=True)
        g.custom_command('update', 'stream_analytics_job_update')
        g.custom_command('delete', 'stream_analytics_job_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('scale', 'stream_analytics_job_scale', supports_no_wait=True)
        g.custom_command('start', 'stream_analytics_job_start', supports_no_wait=True)
        g.custom_command('stop', 'stream_analytics_job_stop', supports_no_wait=True)
        g.custom_wait_command('wait', 'stream_analytics_job_show')

    with self.command_group('stream-analytics output', stream_analytics_output, client_factory=cf_output) as g:
        g.custom_command('list', 'stream_analytics_output_list')
        g.custom_show_command('show', 'stream_analytics_output_show')
        g.custom_command('create', 'stream_analytics_output_create')
        g.custom_command('update', 'stream_analytics_output_update')
        g.custom_command('delete', 'stream_analytics_output_delete', confirmation=True)
        g.custom_command('test', 'stream_analytics_output_test', supports_no_wait=True)
        g.custom_wait_command('wait', 'stream_analytics_output_show')

    with self.command_group(
        'stream-analytics private-endpoint', stream_analytics_private_endpoint, client_factory=cf_private_endpoint
    ) as g:
        g.custom_command('list', 'stream_analytics_private_endpoint_list')
        g.custom_show_command('show', 'stream_analytics_private_endpoint_show')
        g.custom_command('create', 'stream_analytics_private_endpoint_create')
        g.custom_command('delete', 'stream_analytics_private_endpoint_delete', supports_no_wait=True, confirmation=True)
        g.custom_wait_command('wait', 'stream_analytics_private_endpoint_show')

    with self.command_group(
        'stream-analytics subscription', stream_analytics_subscription, client_factory=cf_subscription
    ) as g:
        g.custom_command('inspect', 'stream_analytics_subscription_inspect')

    with self.command_group(
        'stream-analytics transformation', stream_analytics_transformation, client_factory=cf_transformation
    ) as g:
        g.custom_show_command('show', 'stream_analytics_transformation_show')
        g.custom_command('create', 'stream_analytics_transformation_create')
        g.custom_command('update', 'stream_analytics_transformation_update')

    with self.command_group('stream-analytics'):
        pass
