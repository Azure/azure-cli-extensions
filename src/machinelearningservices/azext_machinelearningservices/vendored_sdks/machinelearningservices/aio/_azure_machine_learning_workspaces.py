# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import AzureMachineLearningWorkspacesConfiguration
from .operations import OperationOperations
from .operations import WorkspaceOperations
from .operations import WorkspaceFeatureOperations
from .operations import NotebookOperations
from .operations import UsageOperations
from .operations import VirtualMachineSizeOperations
from .operations import QuotaOperations
from .operations import WorkspaceConnectionOperations
from .operations import MachineLearningComputeOperations
from .operations import AzureMachineLearningWorkspacesOperationsMixin
from .operations import PrivateEndpointConnectionOperations
from .operations import PrivateLinkResourceOperations
from .. import models


class AzureMachineLearningWorkspaces(AzureMachineLearningWorkspacesOperationsMixin):
    """These APIs allow end users to operate on Azure Machine Learning Workspace resources.

    :ivar operation: OperationOperations operations
    :vartype operation: azure_machine_learning_workspaces.aio.operations.OperationOperations
    :ivar workspace: WorkspaceOperations operations
    :vartype workspace: azure_machine_learning_workspaces.aio.operations.WorkspaceOperations
    :ivar workspace_feature: WorkspaceFeatureOperations operations
    :vartype workspace_feature: azure_machine_learning_workspaces.aio.operations.WorkspaceFeatureOperations
    :ivar notebook: NotebookOperations operations
    :vartype notebook: azure_machine_learning_workspaces.aio.operations.NotebookOperations
    :ivar usage: UsageOperations operations
    :vartype usage: azure_machine_learning_workspaces.aio.operations.UsageOperations
    :ivar virtual_machine_size: VirtualMachineSizeOperations operations
    :vartype virtual_machine_size: azure_machine_learning_workspaces.aio.operations.VirtualMachineSizeOperations
    :ivar quota: QuotaOperations operations
    :vartype quota: azure_machine_learning_workspaces.aio.operations.QuotaOperations
    :ivar workspace_connection: WorkspaceConnectionOperations operations
    :vartype workspace_connection: azure_machine_learning_workspaces.aio.operations.WorkspaceConnectionOperations
    :ivar machine_learning_compute: MachineLearningComputeOperations operations
    :vartype machine_learning_compute: azure_machine_learning_workspaces.aio.operations.MachineLearningComputeOperations
    :ivar private_endpoint_connection: PrivateEndpointConnectionOperations operations
    :vartype private_endpoint_connection: azure_machine_learning_workspaces.aio.operations.PrivateEndpointConnectionOperations
    :ivar private_link_resource: PrivateLinkResourceOperations operations
    :vartype private_link_resource: azure_machine_learning_workspaces.aio.operations.PrivateLinkResourceOperations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param subscription_id: Azure subscription identifier.
    :type subscription_id: str
    :param str base_url: Service URL
    :keyword int polling_interval: Default waiting time between two polls for LRO operations if no Retry-After header is present.
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        subscription_id: str,
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = AzureMachineLearningWorkspacesConfiguration(credential, subscription_id, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.operation = OperationOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspace = WorkspaceOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspace_feature = WorkspaceFeatureOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.notebook = NotebookOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.usage = UsageOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.virtual_machine_size = VirtualMachineSizeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.quota = QuotaOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.workspace_connection = WorkspaceConnectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.machine_learning_compute = MachineLearningComputeOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.private_endpoint_connection = PrivateEndpointConnectionOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.private_link_resource = PrivateLinkResourceOperations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AzureMachineLearningWorkspaces":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
