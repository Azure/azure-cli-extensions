# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddSku(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sku = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'tier':
                d['tier'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter sku. All possible keys are: name, tier'.
                format(k))
        return d


class AddSharedPrivateLinkResources(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddSharedPrivateLinkResources, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'private-link-resource-id':
                d['private_link_resource_id'] = v[0]
            elif kl == 'group-id':
                d['group_id'] = v[0]
            elif kl == 'request-message':
                d['request_message'] = v[0]
            elif kl == 'status':
                d['status'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter shared_private_link_resources. All '
                               'possible keys are: name, private-link-resource-id, group-id, request-message, status'.
                               format(k))
        return d


class AddIdentity(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.identity = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'user-assigned-identity':
                d['user_assigned_identity'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter identity. All possible keys are: '
                               'user-assigned-identity'.format(k))
        return d


class AddKeyVaultProperties(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.key_vault_properties = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'key-vault-arm-id':
                d['key_vault_arm_id'] = v[0]
            elif kl == 'key-identifier':
                d['key_identifier'] = v[0]
            elif kl == 'identity-client-id':
                d['identity_client_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter key_vault_properties. All possible keys '
                               'are: key-vault-arm-id, key-identifier, identity-client-id'.format(k))
        return d


class AddValue(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddValue, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'id':
                d['id'] = v[0]
            elif kl == 'type':
                d['type'] = v[0]
            elif kl == 'limit':
                d['limit'] = v[0]
            elif kl == 'unit':
                d['unit'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter value. All possible keys are: id, type, '
                               'limit, unit'.format(k))
        return d


class AddAdministratorAccount(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.administrator_account = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'username':
                d['username'] = v[0]
            elif kl == 'password':
                d['password'] = v[0]
            elif kl == 'public-key-data':
                d['public_key_data'] = v[0]
            elif kl == 'private-key-data':
                d['private_key_data'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter administrator_account. All possible keys '
                               'are: username, password, public-key-data, private-key-data'.format(k))
        return d


class AddScaleSettings(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.scale_settings = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['min_node_count'] = 0
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'max-node-count':
                d['max_node_count'] = v[0]
            elif kl == 'min-node-count':
                d['min_node_count'] = v[0]
            elif kl == 'node-idle-time-before-scale-down':
                d['node_idle_time_before_scale_down'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter scale_settings. All possible keys are: '
                               'max-node-count, min-node-count, node-idle-time-before-scale-down'.format(k))
        return d


class AddPrivateLinkServiceConnectionState(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.private_link_service_connection_state = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'status':
                d['status'] = v[0]
            elif kl == 'description':
                d['description'] = v[0]
            elif kl == 'actions-required':
                d['actions_required'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter private_link_service_connection_state. '
                               'All possible keys are: status, description, actions-required'.format(k))
        return d
