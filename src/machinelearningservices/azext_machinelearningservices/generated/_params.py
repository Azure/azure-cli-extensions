# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_machinelearningservices.action import (
    AddSku,
    AddSharedPrivateLinkResources,
    AddEncryptionKeyVaultProperties,
    AddValue,
    AddSshSettings,
    AddAdministratorAccount,
    AddScaleSettings,
    AddPrivateLinkServiceConnectionState
)


def load_arguments(self, _):

    with self.argument_context('machinelearningservices workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skiptoken', help='Continuation token for pagination.')

    with self.argument_context('machinelearningservices workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.',
                   id_part='name')

    with self.argument_context('machinelearningservices workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('description', help='The description of this workspace.')
        c.argument('friendly_name', help='The friendly name for this workspace. This name in mutable')
        c.argument('key_vault', help='ARM id of the key vault associated with this workspace. This cannot be changed on'
                   'ce the workspace has been created')
        c.argument('application_insights', help='ARM id of the application insights associated with this workspace. Thi'
                   's cannot be changed once the workspace has been created')
        c.argument('container_registry', help='ARM id of the container registry associated with this workspace. This ca'
                   'nnot be changed once the workspace has been created')
        c.argument('storage_account', help='ARM id of the storage account associated with this workspace. This cannot b'
                   'e changed once the workspace has been created')
        c.argument('discovery_url', help='Url for the discovery service to identify regional endpoints for machine lear'
                   'ning experimentation services')
        c.argument('hbi_workspace', arg_type=get_three_state_flag(), help='The flag to signal HBI data in the workspace'
                   ' and reduce diagnostic data collected by the service')
        c.argument('image_build_compute', help='The compute name for image build')
        c.argument('allow_public_access_when_behind_vnet', arg_type=get_three_state_flag(), help='The flag to indicate '
                   'whether to allow public access when behind VNet.')
        c.argument('shared_private_link_resources', action=AddSharedPrivateLinkResources, nargs='+', help='The list of '
                   'shared private link resources in this workspace.')
        c.argument('encryption_status', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Indicates whether or not'
                   ' the encryption is enabled for the workspace.')
        c.argument('encryption_key_vault_properties', action=AddEncryptionKeyVaultProperties, nargs='+', help='Customer'
                   ' Key vault properties.')

    with self.argument_context('machinelearningservices workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.',
                   id_part='name')
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('description', help='The description of this workspace.')
        c.argument('friendly_name', help='The friendly name for this workspace.')

    with self.argument_context('machinelearningservices workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.',
                   id_part='name')

    with self.argument_context('machinelearningservices workspace list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices workspace resync-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.',
                   id_part='name')

    with self.argument_context('machinelearningservices workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n'], help='Name of Azure Machine Learning workspace.',
                   id_part='name')

    with self.argument_context('machinelearningservices workspace-feature list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices notebook prepare') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices usage list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)

    with self.argument_context('machinelearningservices virtual-machine-size list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)

    with self.argument_context('machinelearningservices quota list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)

    with self.argument_context('machinelearningservices quota update') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group, id_part='name')
        c.argument('value', action=AddValue, nargs='+', help='The list for update quota.')

    with self.argument_context('machinelearningservices workspace-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('target', help='Target of the workspace connection.')
        c.argument('category', help='Category of the workspace connection.')

    with self.argument_context('machinelearningservices workspace-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('connection_name', help='Friendly name of the workspace connection', id_part='child_name_1')

    with self.argument_context('machinelearningservices workspace-connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('connection_name', help='Friendly name of the workspace connection')
        c.argument('name', help='Friendly name of the workspace connection')
        c.argument('category', help='Category of the workspace connection.')
        c.argument('target', help='Target of the workspace connection.')
        c.argument('auth_type', help='Authorization type of the workspace connection.')
        c.argument('value', help='Value details of the workspace connection.')

    with self.argument_context('machinelearningservices workspace-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('connection_name', help='Friendly name of the workspace connection', id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('skiptoken', help='Continuation token for pagination.')

    with self.argument_context('machinelearningservices machine-learning-compute show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute aks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('aks_properties', arg_type=CLIArgumentType(options_list=['--aks-properties'], help='AKS properties E'
                   'xpected value: json-string/@json-file.'))

    with self.argument_context('machinelearningservices machine-learning-compute aml-compute create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('aml_compute_properties', arg_type=CLIArgumentType(options_list=['--aml-compute-properties'], help=
                   'AML Compute properties Expected value: json-string/@json-file.'))

    with self.argument_context('machinelearningservices machine-learning-compute compute-instance create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('vm_size', help='Virtual Machine Size')
        c.argument('application_sharing_policy', arg_type=get_enum_type(['Personal', 'Shared']), help='Policy for shari'
                   'ng applications on this compute instance among users of parent workspace. If Personal, only the cre'
                   'ator can access applications on this compute instance. When Shared, any workspace user can access a'
                   'pplications on this instance depending on his/her assigned role.')
        c.argument('ssh_settings', action=AddSshSettings, nargs='+', help='Specifies policy and settings for SSH access'
                   '.')
        c.argument('subnet_id', help='The ID of the resource')

    with self.argument_context('machinelearningservices machine-learning-compute data-factory create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')

    with self.argument_context('machinelearningservices machine-learning-compute data-lake-analytics create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('data_lake_store_account_name', help='DataLake Store Account Name')

    with self.argument_context('machinelearningservices machine-learning-compute databricks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('databricks_access_token', help='Databricks access token')

    with self.argument_context('machinelearningservices machine-learning-compute hd-insight create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('ssh_port', help='Port open for ssh connections on the master node of the cluster.')
        c.argument('address', help='Public IP address of the master node of the cluster.')
        c.argument('administrator_account', action=AddAdministratorAccount, nargs='+', help='Admin credentials for mast'
                   'er node of the cluster')

    with self.argument_context('machinelearningservices machine-learning-compute virtual-machine create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('compute_location', help='Location for the underlying compute')
        c.argument('description', help='The description of the Machine Learning compute.')
        c.argument('resource_id', help='ARM resource id of the underlying compute')
        c.argument('virtual_machine_size', help='Virtual Machine size')
        c.argument('ssh_port', help='Port open for ssh connections.')
        c.argument('address', help='Public IP address of the virtual machine.')
        c.argument('administrator_account', action=AddAdministratorAccount, nargs='+', help='Admin credentials for virt'
                   'ual machine')

    with self.argument_context('machinelearningservices machine-learning-compute update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')
        c.argument('scale_settings', action=AddScaleSettings, nargs='+', help='Desired scale settings for the amlComput'
                   'e.')

    with self.argument_context('machinelearningservices machine-learning-compute delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')
        c.argument('underlying_resource_action', arg_type=get_enum_type(['Delete', 'Detach']), help='Delete the underly'
                   'ing compute if \'Delete\', or detach the underlying compute from workspace if \'Detach\'.')

    with self.argument_context('machinelearningservices machine-learning-compute list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')

    with self.argument_context('machinelearningservices machine-learning-compute list-node') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.')

    with self.argument_context('machinelearningservices machine-learning-compute restart') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', help='Name of the Azure Machine Learning compute.', id_part='child_name_1')

    with self.argument_context('machinelearningservices  list-sku') as c:
        pass

    with self.argument_context('machinelearningservices private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection associated with the workspace', id_part='child_name_1')

    with self.argument_context('machinelearningservices private-endpoint-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection associated with the workspace', id_part='child_name_1')

    with self.argument_context('machinelearningservices private-endpoint-connection put') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n'], help='The name of the private end'
                   'point connection associated with the workspace', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('identity_type', arg_type=get_enum_type(['SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssi'
                   'gned', 'None']), help='The identity type.')
        c.argument('identity_user_assigned_identities', arg_type=CLIArgumentType(options_list=['--identity-user-assigne'
                   'd-identities'], help='The list of user identities associated with resource. The user identity dicti'
                   'onary key references will be ARM resource ids in the form: \'/subscriptions/{subscriptionId}/resour'
                   'ceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityNa'
                   'me}\'. Expected value: json-string/@json-file.'))
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and pro'
                   'vider.')

    with self.argument_context('machinelearningservices private-link-resource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', help='Name of Azure Machine Learning workspace.')
