# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_machinelearningservices.action import (
    AddSku,
    AddSharedPrivateLinkResources,
    AddIdentity,
    AddKeyVaultProperties,
    AddValue,
    AddAdministratorAccount,
    AddScaleSettings,
    AddPrivateLinkServiceConnectionState
)


def load_arguments(self, _):

    with self.argument_context('machinelearningservices workspace list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skip', type=str, help='Continuation token for pagination.')

    with self.argument_context('machinelearningservices workspace show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices workspace create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('description', type=str, help='The description of this workspace.')
        c.argument('friendly_name', type=str, help='The friendly name for this workspace. This name in mutable')
        c.argument('key_vault', type=str, help='ARM id of the key vault associated with this workspace. This cannot be '
                   'changed once the workspace has been created')
        c.argument('application_insights', type=str, help='ARM id of the application insights associated with this '
                   'workspace. This cannot be changed once the workspace has been created')
        c.argument('container_registry', type=str, help='ARM id of the container registry associated with this '
                   'workspace. This cannot be changed once the workspace has been created')
        c.argument('storage_account', type=str, help='ARM id of the storage account associated with this workspace. '
                   'This cannot be changed once the workspace has been created')
        c.argument('discovery_url', type=str, help='Url for the discovery service to identify regional endpoints for '
                   'machine learning experimentation services')
        c.argument('hbi_workspace', arg_type=get_three_state_flag(), help='The flag to signal HBI data in the '
                   'workspace and reduce diagnostic data collected by the service')
        c.argument('image_build_compute', type=str, help='The compute name for image build')
        c.argument('allow_public_access_when_behind_vnet', arg_type=get_three_state_flag(), help='The flag to indicate '
                   'whether to allow public access when behind VNet.')
        c.argument('shared_private_link_resources', action=AddSharedPrivateLinkResources, nargs='+', help='The list of '
                   'shared private link resources in this workspace.')
        c.argument('primary_user_assigned_identity', type=str, help='The user assigned identity resource id that '
                   'represents the workspace identity.')
        c.argument('collections_throughput', type=int, help='The throughput of the collections in cosmosdb database',
                   arg_group='Service Managed Resources Settings Cosmos Db')
        c.argument('status', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Indicates whether or not the '
                   'encryption is enabled for the workspace.', arg_group='Encryption')
        c.argument('identity', action=AddIdentity, nargs='+', help='The identity that will be used to access the key '
                   'vault for encryption at rest.', arg_group='Encryption')
        c.argument('key_vault_properties', action=AddKeyVaultProperties, nargs='+', help='Customer Key vault '
                   'properties.', arg_group='Encryption')

    with self.argument_context('machinelearningservices workspace update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('description', type=str, help='The description of this workspace.')
        c.argument('friendly_name', type=str, help='The friendly name for this workspace.')
        c.argument('image_build_compute', type=str, help='The compute name for image build')
        c.argument('primary_user_assigned_identity', type=str, help='The user assigned identity resource id that '
                   'represents the workspace identity.')
        c.argument('collections_throughput', type=int, help='The throughput of the collections in cosmosdb database',
                   arg_group='Service Managed Resources Settings Cosmos Db')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')

    with self.argument_context('machinelearningservices workspace delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices workspace list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.')

    with self.argument_context('machinelearningservices workspace list-notebook-access-token') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.')

    with self.argument_context('machinelearningservices workspace resync-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices workspace wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', options_list=['--name', '-n', '--workspace-name'], type=str, help='Name of Azure '
                   'Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices workspace-feature list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices usage list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('machinelearningservices virtual-machine-size list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('machinelearningservices quota list') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('machinelearningservices quota update') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('value', action=AddValue, nargs='+', help='The list for update quota.')
        c.argument('quota_update_parameters_location', type=str, help='Region of workspace quota to be updated.',
                   id_part='name')

    with self.argument_context('machinelearningservices machine-learning-compute list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('skip', type=str, help='Continuation token for pagination.')

    with self.argument_context('machinelearningservices machine-learning-compute show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute aks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('ak_s_compute_location', type=str, help='Location for the underlying compute')
        c.argument('ak_s_description', type=str, help='The description of the Machine Learning compute.')
        c.argument('ak_s_resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('ak_s_disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication '
                   'and ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('ak_s_properties', type=validate_file_or_dict, help='AKS properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-compute aml-compute create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('aml_compute_properties', type=validate_file_or_dict, help='AML Compute properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-compute compute-instance create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('compute_instance_properties', type=validate_file_or_dict, help='Compute Instance properties '
                   'Expected value: json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-compute data-factory create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')

    with self.argument_context('machinelearningservices machine-learning-compute data-lake-analytics create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('data_lake_store_account_name', type=str, help='DataLake Store Account Name')

    with self.argument_context('machinelearningservices machine-learning-compute databricks create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('databricks_access_token', type=str, help='Databricks access token')
        c.argument('workspace_url', type=str, help='Workspace Url')

    with self.argument_context('machinelearningservices machine-learning-compute hd-insight create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('ssh_port', type=int, help='Port open for ssh connections on the master node of the cluster.')
        c.argument('address', type=str, help='Public IP address of the master node of the cluster.')
        c.argument('administrator_account', action=AddAdministratorAccount, nargs='+', help='Admin credentials for '
                   'master node of the cluster')

    with self.argument_context('machinelearningservices machine-learning-compute synapse-spark create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('synapse_spark_properties', type=validate_file_or_dict, help='AKS properties Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-compute virtual-machine create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('compute_location', type=str, help='Location for the underlying compute')
        c.argument('description', type=str, help='The description of the Machine Learning compute.')
        c.argument('resource_id', type=str, help='ARM resource id of the underlying compute')
        c.argument('disable_local_auth', arg_type=get_three_state_flag(), help='Opt-out of local authentication and '
                   'ensure customers can use only MSI and AAD exclusively for authentication.')
        c.argument('virtual_machine_properties', type=validate_file_or_dict, help=' Expected value: '
                   'json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-compute update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')
        c.argument('scale_settings', action=AddScaleSettings, nargs='+', help='Desired scale settings for the '
                   'amlCompute.')

    with self.argument_context('machinelearningservices machine-learning-compute delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')
        c.argument('underlying_resource_action', arg_type=get_enum_type(['Delete', 'Detach']), help='Delete the '
                   'underlying compute if \'Delete\', or detach the underlying compute from workspace if \'Detach\'.')

    with self.argument_context('machinelearningservices machine-learning-compute list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')

    with self.argument_context('machinelearningservices machine-learning-compute list-node') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.')

    with self.argument_context('machinelearningservices machine-learning-compute restart') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute start') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute stop') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-compute wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('compute_name', type=str, help='Name of the Azure Machine Learning compute.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices private-endpoint-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection associated with the workspace', id_part='child_name_1')

    with self.argument_context('machinelearningservices private-endpoint-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection associated with the workspace', id_part='child_name_1')

    with self.argument_context('machinelearningservices private-endpoint-connection put') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('private_endpoint_connection_name', options_list=['--name', '-n', '--private-endpoint-connection-nam'
                                                                     'e'], type=str, help='The name of the private '
                   'endpoint connection associated with the workspace', id_part='child_name_1')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku of the workspace.')
        c.argument('type_', options_list=['--type'], arg_type=get_enum_type(['SystemAssigned',
                                                                             'SystemAssigned,UserAssigned',
                                                                             'UserAssigned', 'None']), help='The '
                   'identity type.', arg_group='Identity')
        c.argument('user_assigned_identities', type=validate_file_or_dict, help='The user assigned identities '
                   'associated with the resource. Expected value: json-string/@json-file.', arg_group='Identity')
        c.argument('private_link_service_connection_state', action=AddPrivateLinkServiceConnectionState, nargs='+',
                   help='A collection of information about the state of the connection between service consumer and '
                   'provider.')

    with self.argument_context('machinelearningservices private-link-resource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices machine-learning-service list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('skip', type=str, help='Continuation token for pagination.')
        c.argument('model_id', type=str, help='The Model Id.')
        c.argument('model_name', type=str, help='The Model name.')
        c.argument('tag', type=str, help='The object tag.')
        c.argument('tags', tags_type)
        c.argument('properties', type=str, help='A set of properties with which to filter the returned services. It is '
                   'a comma separated string of properties key and/or properties key=value Example: '
                   'propKey1,propKey2,propKey3=value3 .')
        c.argument('run_id', type=str, help='runId for model associated with service.')
        c.argument('expand', arg_type=get_three_state_flag(), help='Set to True to include Model details.')
        c.argument('orderby', arg_type=get_enum_type(['CreatedAtDesc', 'CreatedAtAsc', 'UpdatedAtDesc',
                                                     'UpdatedAtAsc']), help='The option to order the response.')

    with self.argument_context('machinelearningservices machine-learning-service show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('service_name', type=str, help='Name of the Azure Machine Learning service.',
                   id_part='child_name_1')
        c.argument('expand', arg_type=get_three_state_flag(), help='Set to True to include Model details.')

    with self.argument_context('machinelearningservices machine-learning-service create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('service_name', type=str, help='Name of the Azure Machine Learning service.')
        c.argument('properties', type=validate_file_or_dict, help='The payload that is used to create or update the '
                   'Service. Expected value: json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-service update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('service_name', type=str, help='Name of the Azure Machine Learning service.',
                   id_part='child_name_1')
        c.argument('properties', type=validate_file_or_dict, help='The payload that is used to create or update the '
                   'Service. Expected value: json-string/@json-file.')

    with self.argument_context('machinelearningservices machine-learning-service delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('service_name', type=str, help='Name of the Azure Machine Learning service.',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices machine-learning-service wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('service_name', type=str, help='Name of the Azure Machine Learning service.',
                   id_part='child_name_1')
        c.argument('expand', arg_type=get_three_state_flag(), help='Set to True to include Model details.')

    with self.argument_context('machinelearningservices notebook list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices notebook prepare') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')

    with self.argument_context('machinelearningservices storage-account list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')

    with self.argument_context('machinelearningservices workspace-connection list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('target', type=str, help='Target of the workspace connection.')
        c.argument('category', type=str, help='Category of the workspace connection.')

    with self.argument_context('machinelearningservices workspace-connection show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('connection_name', type=str, help='Friendly name of the workspace connection',
                   id_part='child_name_1')

    with self.argument_context('machinelearningservices workspace-connection create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.')
        c.argument('connection_name', type=str, help='Friendly name of the workspace connection')
        c.argument('name', type=str, help='Friendly name of the workspace connection')
        c.argument('category', type=str, help='Category of the workspace connection.')
        c.argument('target', type=str, help='Target of the workspace connection.')
        c.argument('auth_type', type=str, help='Authorization type of the workspace connection.')
        c.argument('value', type=str, help='Value details of the workspace connection.')

    with self.argument_context('machinelearningservices workspace-connection delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('workspace_name', type=str, help='Name of Azure Machine Learning workspace.', id_part='name')
        c.argument('connection_name', type=str, help='Friendly name of the workspace connection',
                   id_part='child_name_1')
