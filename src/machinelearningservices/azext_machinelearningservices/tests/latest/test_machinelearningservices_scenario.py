# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from azure.cli.testsdk import StorageAccountPreparer
from .example_steps import step_workspace_create
from .example_steps import step_workspace_show
from .example_steps import step_workspace_list
from .example_steps import step_workspace_list2
from .example_steps import step_workspace_update
from .example_steps import step_workspace_list_key
from .example_steps import step_workspace_resync_key
from .example_steps import step_machine_learning_compute_aks_create
from .example_steps import step_machine_learning_compute_aks_create2
from .example_steps import step_machine_learning_compute_aks_create3
from .example_steps import step_machine_learning_compute_aks_create4
from .example_steps import step_machine_learning_compute_aks_create5
from .example_steps import step_machine_learning_compute_show
from .example_steps import step_machine_learning_compute_show2
from .example_steps import step_machine_learning_compute_show3
from .example_steps import step_machine_learning_compute_list
from .example_steps import step_machine_learning_compute_update
from .example_steps import step_machine_learning_compute_list_node
from .example_steps import step_machine_learning_compute_list_key
from .example_steps import step_machine_learning_compute_restart
from .example_steps import step_machine_learning_compute_start
from .example_steps import step_machine_learning_compute_stop
from .example_steps import step_machine_learning_compute_delete
from .example_steps import step_machine_learning_service_create
from .example_steps import step_machine_learning_service_show
from .example_steps import step_machine_learning_service_list
from .example_steps import step_machine_learning_service_delete
from .example_steps import step_notebook_list_key
from .example_steps import step_notebook_prepare
from .example_steps import step_private_endpoint_connection_put
from .example_steps import step_private_endpoint_connection_show
from .example_steps import step_private_endpoint_connection_delete
from .example_steps import step_private_link_resource_list
from .example_steps import step_quota_list
from .example_steps import step_quota_update
from .example_steps import step_storage_account_list_key
from .example_steps import step_usage_list
from .example_steps import step_virtual_machine_size_list
from .example_steps import step_workspace_list_sku
from .example_steps import step_workspace_connection_create
from .example_steps import step_workspace_connection_show
from .example_steps import step_workspace_connection_list
from .example_steps import step_workspace_connection_delete
from .example_steps import step_workspace_feature_list
from .example_steps import step_workspace_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7):
    setup_scenario(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7)
    step_workspace_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check("encryption.identity.userAssignedIdentity", "/subscriptions/{subscription_id}/resourceGroups/{rg}/pr"
                   "oviders/Microsoft.ManagedIdentity/userAssignedIdentities/testuai", case_sensitive=False),
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("description", "test description", case_sensitive=False),
        test.check("applicationInsights", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/microsoft.ins"
                   "ights/components/testinsights", case_sensitive=False),
        test.check("containerRegistry", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Conta"
                   "inerRegistry/registries/testRegistry", case_sensitive=False),
        test.check("encryption.keyVaultProperties.identityClientId", "", case_sensitive=False),
        test.check("encryption.keyVaultProperties.keyIdentifier", "https://testkv.vault.azure.net/keys/testkey/aabbccdd"
                   "ee112233445566778899aabb", case_sensitive=False),
        test.check("encryption.keyVaultProperties.keyVaultArmId", "/subscriptions/{subscription_id}/resourceGroups/{rg}"
                   "/providers/Microsoft.KeyVault/vaults/testkv", case_sensitive=False),
        test.check("encryption.status", "Enabled", case_sensitive=False),
        test.check("friendlyName", "HelloName", case_sensitive=False),
        test.check("hbiWorkspace", False),
        test.check("keyVault", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vault"
                   "s/testkv", case_sensitive=False),
        test.check("storageAccount", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Storag"
                   "e/storageAccounts/{sa}", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_workspace_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check("encryption.identity.userAssignedIdentity", "/subscriptions/{subscription_id}/resourceGroups/{rg}/pr"
                   "oviders/Microsoft.ManagedIdentity/userAssignedIdentities/testuai", case_sensitive=False),
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("description", "test description", case_sensitive=False),
        test.check("applicationInsights", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/microsoft.ins"
                   "ights/components/testinsights", case_sensitive=False),
        test.check("containerRegistry", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Conta"
                   "inerRegistry/registries/testRegistry", case_sensitive=False),
        test.check("encryption.keyVaultProperties.identityClientId", "", case_sensitive=False),
        test.check("encryption.keyVaultProperties.keyIdentifier", "https://testkv.vault.azure.net/keys/testkey/aabbccdd"
                   "ee112233445566778899aabb", case_sensitive=False),
        test.check("encryption.keyVaultProperties.keyVaultArmId", "/subscriptions/{subscription_id}/resourceGroups/{rg}"
                   "/providers/Microsoft.KeyVault/vaults/testkv", case_sensitive=False),
        test.check("encryption.status", "Enabled", case_sensitive=False),
        test.check("friendlyName", "HelloName", case_sensitive=False),
        test.check("hbiWorkspace", False),
        test.check("keyVault", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vault"
                   "s/testkv", case_sensitive=False),
        test.check("storageAccount", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Storag"
                   "e/storageAccounts/{sa}", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_workspace_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check('length(@)', 1),
    ])
    step_workspace_list2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check('length(@)', 2),
    ])
    step_workspace_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check("location", "eastus2euap", case_sensitive=False),
        test.check("description", "new description", case_sensitive=False),
        test.check("applicationInsights", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/microsoft.ins"
                   "ights/components/testinsights", case_sensitive=False),
        test.check("containerRegistry", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.Conta"
                   "inerRegistry/registries/testRegistry", case_sensitive=False),
        test.check("friendlyName", "New friendly name", case_sensitive=False),
        test.check("keyVault", "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vault"
                   "s/testkv", case_sensitive=False),
        test.check("storageAccount", "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Storag"
                   "e/storageAccounts/{sa}", case_sensitive=False),
        test.check("name", "{myWorkspace}", case_sensitive=False),
    ])
    step_workspace_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_resync_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_show2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_show3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_list_node(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_restart(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_start(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_stop(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_compute_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_service_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_service_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_service_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_machine_learning_service_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_notebook_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_notebook_prepare(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_private_endpoint_connection_put(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_private_endpoint_connection_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[
        test.check("name", "{myPrivateEndpointConnection}", case_sensitive=False),
    ])
    step_private_endpoint_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_private_link_resource_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_quota_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_quota_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_storage_account_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_usage_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_virtual_machine_size_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_list_sku(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_connection_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_connection_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_connection_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_feature_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    step_workspace_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=[])
    cleanup_scenario(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7)


# Test class for Scenario
@try_manual
class MachinelearningservicesScenarioTest(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super(MachinelearningservicesScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'myStorageAccount2': 'default',
            'myWorkspace6': 'default',
            'myPrivateLinkResource2': 'default',
            'myWorkspace3': 'demo_workspace1',
            'myWorkspace4': 'demo_workspace2',
            'myWorkspace': 'testworkspace',
            'myWorkspace2': 'workspaces123',
            'myWorkspace5': 'workspace-1',
            'myQuota': 'Standard_DSv2_Family_Cluster_Dedicated_vCPUs',
            'myPrivateEndpointConnection': '{privateEndpointConnectionName}',
            'myPrivateLinkResource': 'Sql',
            'myStorageAccount': '/subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/accountcrud-1234/providers/Microsoft.Storage/storageAccounts/testStorageAccount',
        })


    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_workspace-1234'[:7], key='rg',
                           parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_accountcrud-1234'[:7], key='rg_2',
                           parameter_name='rg_2')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_rg'[:7], key='rg_5', parameter_name='rg_5')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_myResourceGroup'[:7], key='rg_4',
                           parameter_name='rg_4')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_testrg123'[:7], key='rg_3',
                           parameter_name='rg_3')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_rg-1234'[:7], key='rg_6',
                           parameter_name='rg_6')
    @ResourceGroupPreparer(name_prefix='clitestmachinelearningservices_resourceGroup-1'[:7], key='rg_7',
                           parameter_name='rg_7')
    @StorageAccountPreparer(name_prefix='clitestmachinelearningservices_testStorageAccount'[:7], key='sa',
                            resource_group_parameter_name='rg_2')
    def test_machinelearningservices_Scenario(self, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7):
        call_scenario(self, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7)
        calc_coverage(__file__)
        raise_if()

