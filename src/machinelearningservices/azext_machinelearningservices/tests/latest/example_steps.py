# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Workspaces/put/Create Workspace
@try_manual
def step_workspace_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace create '
             '--identity type="SystemAssigned,UserAssigned" userAssignedIdentities={{"/subscriptions/00000000-1111-2222'
             '-3333-444444444444/resourceGroups/workspace-1234/providers/Microsoft.ManagedIdentity/userAssignedIdentiti'
             'es/testuai":{{}}}} '
             '--location "eastus2euap" '
             '--description "test description" '
             '--application-insights "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/microsoft.insights'
             '/components/testinsights" '
             '--container-registry "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.ContainerR'
             'egistry/registries/testRegistry" '
             '--identity user-assigned-identity="/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microso'
             'ft.ManagedIdentity/userAssignedIdentities/testuai" '
             '--key-vault-properties identity-client-id="" key-identifier="https://testkv.vault.azure.net/keys/testkey/'
             'aabbccddee112233445566778899aabb" key-vault-arm-id="/subscriptions/{subscription_id}/resourceGroups/{rg}/'
             'providers/Microsoft.KeyVault/vaults/testkv" '
             '--status "Enabled" '
             '--friendly-name "HelloName" '
             '--hbi-workspace false '
             '--key-vault "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.KeyVault/vaults/tes'
             'tkv" '
             '--shared-private-link-resources name="testdbresource" private-link-resource-id="/subscriptions/{subscript'
             'ion_id}/resourceGroups/{rg}/providers/Microsoft.DocumentDB/databaseAccounts/testdbresource/privateLinkRes'
             'ources/{myPrivateLinkResource}" group-id="{myPrivateLinkResource}" request-message="Please approve" '
             'status="Approved" '
             '--storage-account "/subscriptions/{subscription_id}/resourceGroups/{rg_2}/providers/Microsoft.Storage/sto'
             'rageAccounts/{sa}" '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=[])
    test.cmd('az machinelearningservices workspace wait --created '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspace
@try_manual
def step_workspace_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace show '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspaces by Resource Group
@try_manual
def step_workspace_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Workspaces/get/Get Workspaces by subscription
@try_manual
def step_workspace_list2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Workspaces/patch/Update Workspace
@try_manual
def step_workspace_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace update '
             '--description "new description" '
             '--friendly-name "New friendly name" '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/post/List Workspace Keys
@try_manual
def step_workspace_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list-key '
             '--resource-group "{rg_3}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Workspaces/post/Resync Workspace Keys
@try_manual
def step_workspace_resync_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace resync-key '
             '--resource-group "{rg_3}" '
             '--name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create a AML Compute
@try_manual
def step_machine_learning_compute_aks_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"enableNodePublicIp\\":true,\\"isolatedNetwork\\":false,\\"osType\\":\\"Windows\\"'
             ',\\"remoteLoginPortPublicAccess\\":\\"NotSpecified\\",\\"scaleSettings\\":{{\\"maxNodeCount\\":1,\\"minNo'
             'deCount\\":0,\\"nodeIdleTimeBeforeScaleDown\\":\\"PT5M\\"}},\\"virtualMachineImage\\":{{\\"id\\":\\"/subs'
             'criptions/{subscription_id}/resourceGroups/{rg_4}/providers/Microsoft.Compute/galleries/myImageGallery/im'
             'ages/myImageDefinition/versions/0.0.1\\"}},\\"vmPriority\\":\\"Dedicated\\",\\"vmSize\\":\\"STANDARD_NC6'
             '\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create a DataFactory Compute
@try_manual
def step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create AKS Compute
@try_manual
def step_machine_learning_compute_aks_create3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    return step_machine_learning_compute_aks_create2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks)


# EXAMPLE: /MachineLearningCompute/put/Create an ComputeInstance Compute
@try_manual
def step_machine_learning_compute_aks_create4(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"applicationSharingPolicy\\":\\"Personal\\",\\"computeInstanceAuthorizationType\\"'
             ':\\"personal\\",\\"personalComputeInstanceSettings\\":{{\\"assignedUser\\":{{\\"objectId\\":\\"00000000-0'
             '000-0000-0000-000000000000\\",\\"tenantId\\":\\"00000000-0000-0000-0000-000000000000\\"}}}},\\"sshSetting'
             's\\":{{\\"sshPublicAccess\\":\\"Disabled\\"}},\\"subnet\\":\\"test-subnet-resource-id\\",\\"vmSize\\":\\"'
             'STANDARD_NC6\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/put/Create an ComputeInstance Compute with minimal inputs
@try_manual
def step_machine_learning_compute_aks_create5(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute aks create '
             '--compute-name "compute123" '
             '--location "eastus" '
             '--ak-s-properties "{{\\"vmSize\\":\\"STANDARD_NC6\\"}}" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/get/Get a AKS Compute
@try_manual
def step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute show '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/get/Get a AML Compute
@try_manual
def step_machine_learning_compute_show2(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    return step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks)


# EXAMPLE: /MachineLearningCompute/get/Get an ComputeInstance
@try_manual
def step_machine_learning_compute_show3(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    return step_machine_learning_compute_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks)


# EXAMPLE: /MachineLearningCompute/get/Get Computes
@try_manual
def step_machine_learning_compute_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/patch/Update a AmlCompute Compute
@try_manual
def step_machine_learning_compute_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute update '
             '--compute-name "compute123" '
             '--scale-settings max-node-count=4 min-node-count=4 node-idle-time-before-scale-down="PT5M" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Get compute nodes information for a compute
@try_manual
def step_machine_learning_compute_list_node(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list-node '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/List AKS Compute Keys
@try_manual
def step_machine_learning_compute_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute list-key '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Restart ComputeInstance Compute
@try_manual
def step_machine_learning_compute_restart(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute restart '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Start ComputeInstance Compute
@try_manual
def step_machine_learning_compute_start(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute start '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/post/Stop ComputeInstance Compute
@try_manual
def step_machine_learning_compute_stop(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute stop '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningCompute/delete/Delete Compute
@try_manual
def step_machine_learning_compute_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-compute delete -y '
             '--compute-name "compute123" '
             '--resource-group "{rg_3}" '
             '--underlying-resource-action "Delete" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/put/Create Or Update service
@try_manual
def step_machine_learning_service_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service create '
             '--properties "{{\\"appInsightsEnabled\\":true,\\"authEnabled\\":true,\\"computeType\\":\\"ACI\\",\\"conta'
             'inerResourceRequirements\\":{{\\"cpu\\":1,\\"memoryInGB\\":1}},\\"environmentImageRequest\\":{{\\"assets'
             '\\":[{{\\"id\\":null,\\"mimeType\\":\\"application/x-python\\",\\"unpack\\":false,\\"url\\":\\"aml://stor'
             'age/azureml/score.py\\"}}],\\"driverProgram\\":\\"score.py\\",\\"environment\\":{{\\"name\\":\\"AzureML-S'
             'cikit-learn-0.20.3\\",\\"docker\\":{{\\"baseDockerfile\\":null,\\"baseImage\\":\\"mcr.microsoft.com/azure'
             'ml/base:openmpi3.1.2-ubuntu16.04\\",\\"baseImageRegistry\\":{{\\"address\\":null,\\"password\\":null,\\"u'
             'sername\\":null}}}},\\"environmentVariables\\":{{\\"EXAMPLE_ENV_VAR\\":\\"EXAMPLE_VALUE\\"}},\\"inferenci'
             'ngStackVersion\\":null,\\"python\\":{{\\"baseCondaEnvironment\\":null,\\"condaDependencies\\":{{\\"name\\'
             '":\\"azureml_ae1acbe6e1e6aabbad900b53c491a17c\\",\\"channels\\":[\\"conda-forge\\"],\\"dependencies\\":['
             '\\"python=3.6.2\\",{{\\"pip\\":[\\"azureml-core==1.0.69\\",\\"azureml-defaults==1.0.69\\",\\"azureml-tele'
             'metry==1.0.69\\",\\"azureml-train-restclients-hyperdrive==1.0.69\\",\\"azureml-train-core==1.0.69\\",\\"s'
             'cikit-learn==0.20.3\\",\\"scipy==1.2.1\\",\\"numpy==1.16.2\\",\\"joblib==0.13.2\\"]}}]}},\\"interpreterPa'
             'th\\":\\"python\\",\\"userManagedDependencies\\":false}},\\"spark\\":{{\\"packages\\":[],\\"precachePacka'
             'ges\\":true,\\"repositories\\":[]}},\\"version\\":\\"3\\"}},\\"models\\":[{{\\"name\\":\\"sklearn_regress'
             'ion_model.pkl\\",\\"mimeType\\":\\"application/x-python\\",\\"url\\":\\"aml://storage/azureml/sklearn_reg'
             'ression_model.pkl\\"}}]}},\\"location\\":\\"eastus2\\"}}" '
             '--resource-group "{rg_3}" '
             '--service-name "service456" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/get/Get Service
@try_manual
def step_machine_learning_service_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service show '
             '--resource-group "{rg_3}" '
             '--service-name "service123" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/get/Get Services
@try_manual
def step_machine_learning_service_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service list '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /MachineLearningService/delete/Delete Service
@try_manual
def step_machine_learning_service_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices machine-learning-service delete -y '
             '--resource-group "{rg_3}" '
             '--service-name "service123" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Notebooks/post/List Workspace Keys
@try_manual
def step_notebook_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices notebook list-key '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Notebooks/post/Prepare Notebook
@try_manual
def step_notebook_prepare(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices notebook prepare '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/put/WorkspacePutPrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_put(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection put '
             '--name "{myPrivateEndpointConnection}" '
             '--private-link-service-connection-state description="Auto-Approved" status="Approved" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/get/WorkspaceGetPrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection show '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateEndpointConnections/delete/WorkspaceDeletePrivateEndpointConnection
@try_manual
def step_private_endpoint_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-endpoint-connection delete -y '
             '--name "{myPrivateEndpointConnection}" '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /PrivateLinkResources/get/WorkspaceListPrivateLinkResources
@try_manual
def step_private_link_resource_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices private-link-resource list '
             '--resource-group "{rg_6}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Quotas/get/List workspace quotas by VMFamily
@try_manual
def step_quota_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices quota list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /Quotas/post/update quotas
@try_manual
def step_quota_update(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices quota update '
             '--location "eastus" '
             '--value type="Microsoft.MachineLearningServices/workspaces/quotas" id="/subscriptions/{subscription_id}/r'
             'esourceGroups/{rg_5}/providers/Microsoft.MachineLearningServices/workspaces/{myWorkspace3}/quotas/{myQuot'
             'a}" limit=100 unit="Count" '
             '--value type="Microsoft.MachineLearningServices/workspaces/quotas" id="/subscriptions/{subscription_id}/r'
             'esourceGroups/{rg_5}/providers/Microsoft.MachineLearningServices/workspaces/{myWorkspace4}/quotas/{myQuot'
             'a}" limit=200 unit="Count"',
             checks=checks)


# EXAMPLE: /StorageAccount/post/List Workspace Keys
@try_manual
def step_storage_account_list_key(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices storage-account list-key '
             '--resource-group "{rg_3}" '
             '--workspace-name "{myWorkspace2}"',
             checks=checks)


# EXAMPLE: /Usages/get/List Usages
@try_manual
def step_usage_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices usage list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /VirtualMachineSizes/get/List VM Sizes
@try_manual
def step_virtual_machine_size_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices virtual-machine-size list '
             '--location "eastus"',
             checks=checks)


# EXAMPLE: /Workspace/get/List Skus
@try_manual
def step_workspace_list_sku(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace list-sku',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/put/CreateWorkspaceConnection
@try_manual
def step_workspace_connection_create(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection create '
             '--connection-name "connection-1" '
             '--name "connection-1" '
             '--auth-type "PAT" '
             '--category "ACR" '
             '--target "www.facebook.com" '
             '--value "secrets" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/get/GetWorkspaceConnection
@try_manual
def step_workspace_connection_show(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection show '
             '--connection-name "connection-1" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/get/ListWorkspaceConnections
@try_manual
def step_workspace_connection_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection list '
             '--category "ACR" '
             '--resource-group "{rg_7}" '
             '--target "www.facebook.com" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceConnections/delete/DeleteWorkspaceConnection
@try_manual
def step_workspace_connection_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-connection delete -y '
             '--connection-name "connection-1" '
             '--resource-group "{rg_7}" '
             '--workspace-name "{myWorkspace5}"',
             checks=checks)


# EXAMPLE: /WorkspaceFeatures/get/List Workspace features
@try_manual
def step_workspace_feature_list(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace-feature list '
             '--resource-group "{rg_4}" '
             '--workspace-name "{myWorkspace}"',
             checks=checks)


# EXAMPLE: /Workspaces/delete/Delete Workspace
@try_manual
def step_workspace_delete(test, rg, rg_2, rg_5, rg_4, rg_3, rg_6, rg_7, checks=None):
    if checks is None:
        checks = []
    test.cmd('az machinelearningservices workspace delete -y '
             '--resource-group "{rg}" '
             '--name "{myWorkspace}"',
             checks=checks)

