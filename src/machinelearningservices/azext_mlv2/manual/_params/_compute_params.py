# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks

from ._common_params import (
    add_common_params,
    add_description_param,
    add_file_param,
    add_lro_param,
    add_max_results_params,
    add_override_param,
    add_tags_param,
)


def compute_param(c):
    c.argument(
        "name",
        options_list=["--name", "-n"],
        type=str,
        help="Name of the compute target (Required if not specified in the yaml file).",
    )


def load_compute_params(self):
    with self.argument_context("ml compute list") as c:
        add_common_params(c)
        add_max_results_params(c)
        c.argument("type", help="The type of compute target. Allowed values: AmlCompute, ComputeInstance, Kubernetes.")

    with self.argument_context("ml compute show") as c:
        add_common_params(c)
        compute_param(c)

    with self.argument_context("ml compute create") as c:
        add_common_params(c)
        add_override_param(c)
        add_lro_param(c)
        c.argument(
            "name",
            options_list=["--name", "-n"],
            help="Name of the compute target. Required if --file/-f is not provided.",
        )
        add_file_param(
            c,
            "compute",
            [YAMLRefDocLinks.AML_COMPUTE, YAMLRefDocLinks.COMPUTE_INSTANCE, YAMLRefDocLinks.VIRTUAL_MACHINE_COMPUTE],
        )
        c.argument("ssh_key_value", help="SSH public key of the administrator user account.")
        c.argument(
            "ssh_public_access_enabled",
            options_list=["--ssh-public-access-enabled", "-p"],
            help="Indicates whether public SSH port is enabled.",
        )
        c.argument("vnet_name", help="Name of the virtual network.")
        c.argument(
            "subnet",
            help="Name of the subnet. Can also reference a subnet in an existing vnet by ID instead of name. "
            "If subnet ID is specified then vnet-name will be ignored. Subnet ID can refer to a vnet/subnet "
            "in another RG by specifying the fully qualified subnet ID. Required when vnet name is specified.",
        )
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="The type of compute target. Required if --file/-f is not provided. "
            "Allowed values: AmlCompute, ComputeInstance.",
        )
        add_description_param(c, help_message="Description of the compute target.")
        add_tags_param(c)
        c.argument(
            "size",
            help="VM size to use for the compute target. More details can be found here: "
            "https://aka.ms/azureml-vm-details.",
        )
        c.argument(
            "identity_type",
            help="The type of managed identity. Allowed values: SystemAssigned, UserAssigned.",
        )
        c.argument(
            "user_assigned_identities",
            options_list=["--user-assigned-identities", "-i"],
            help="Use '[system]' to set a system assigned identity else input resource IDs separated by commas "
            "(ie `<ResourceID1>,<ResourceID2>`) to set user assigned identities.",
        )
        c.argument(
            "enable_node_public_ip",
            options_list=["--enable-node-public-ip"],
            help="Indicates whether public IP is enabled. Default: True."
        )

    with self.argument_context("ml compute create", arg_group="AmlCompute") as c:
        c.argument(
            "location",
            options_list=["--location", "-l"],
            help="Location of the compute. If not specified, defaults to the location of the workspace.",
        )
        c.argument(
            "admin_username", help="Name of the administrator user account that can be used to SSH into the node(s)."
        )
        c.argument(
            "admin_password", help="Password for the administrator user account if authentication type is 'Password'"
        )
        c.argument("min_instances", help="The minimum number of nodes to use on the cluster. Default: 0.")
        c.argument("max_instances", help="The maximum number of nodes to use on the cluster. Default: 4.")
        c.argument(
            "idle_time_before_scale_down",
            options_list=["--idle-time-before-scale-down", "-d"],
            help="Node idle time in seconds before scaling down the cluster. Default: 120.",
        )
        c.argument("tier", help="VM priority tier. Allowed values: dedicated, low_priority.")

    with self.argument_context("ml compute create", arg_group="ComputeInstance") as c:
        c.argument("user_tenant_id", help="AAD tenant ID of the assigned user.")
        c.argument("user_object_id", help="AAD object ID of the assigned user.")

    with self.argument_context("ml compute delete") as c:
        add_common_params(c)
        add_lro_param(c)
        compute_param(c)

    with self.argument_context("ml compute list-sizes") as c:
        add_common_params(c)
        compute_param(c)
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="The type of compute target. Allowed values: AmlCompute, ComputeInstance",
        )
        c.argument("recommended", help="Indicates whether to return recommended VM sizes or all VM sizes.")

    with self.argument_context("ml compute list-usage") as c:
        add_common_params(c)
        compute_param(c)
        c.argument("location", help="Defaults to workspace location.")

    with self.argument_context("ml compute connect-ssh") as c:
        add_common_params(c)
        c.argument(
            "name",
            options_list=["--name", "-n"],
            help="Name of the compute target. Required.",
        )
        c.argument(
            "private_key_file_path",
            options_list=["--private-key-file-path", "-f"],
            type=str,
            help="The path to the private key file file.",
        )

    with self.argument_context("ml compute list-nodes") as c:
        add_common_params(c)
        compute_param(c)

    with self.argument_context("ml compute start") as c:
        add_common_params(c)
        add_lro_param(c)
        compute_param(c)

    with self.argument_context("ml compute stop") as c:
        add_common_params(c)
        add_lro_param(c)
        compute_param(c)

    with self.argument_context("ml compute restart") as c:
        add_common_params(c)
        add_lro_param(c)
        compute_param(c)

    with self.argument_context("ml compute update") as c:
        add_common_params(c)
        add_lro_param(c)
        compute_param(c)
        add_tags_param(c)
        c.argument(
            "identity_type",
            help="The type of managed identity. Allowed values: SystemAssigned, UserAssigned.",
        )
        c.argument(
            "user_assigned_identities",
            options_list=["--user-assigned-identities", "-i"],
            help="Use '[system]' to set a system assigned identity else input resource IDs separated by commas "
            "(ie `<ResourceID1>,<ResourceID2>`) to set user assigned identities.",
        )
        c.argument("min_instances", help="Minimum number of nodes to use. Default: 0.")
        c.argument("max_instances", help="Maximum number of nodes to use. Default: 4.")
        c.argument(
            "idle_time_before_scale_down",
            options_list=["--idle-time-before-scale-down", "-d"],
            help="Node idle time in seconds before scaling down the cluster. Default: 120.",
        )

    with self.argument_context("ml compute detach") as c:
        add_common_params(c)
        compute_param(c)

    with self.argument_context("ml compute attach") as c:
        add_common_params(c)
        compute_param(c)
        c.argument("namespace", options_list=["--namespace"], help="Namespace of a KubernetesCompute")
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="The type of compute target. Allowed values: virtualmachine, Kubernetes.",
        )
        c.argument(
            "file",
            options_list=["--file", "-f"],
            help="Local path to the YAML file containing the Azure ML compute specification.",
        )
        c.argument(
            "resource_id",
            help="The fully qualified ID of the resource, including the resource name and resource type "
            "(Required if not specified in the yaml file).",
        )
        c.argument("identity_type", help="The type of manged identity. Allowed values: SystemAssigned, UserAssigned.")
        c.argument(
            "user_assigned_identities",
            options_list=["--user-assigned-identities", "-i"],
            help="The user assigned identity's resource ID, required for --identity_type=UserAssigned.",
        )

    with self.argument_context("ml compute attach", arg_group="VirtualMachine") as c:
        c.argument(
            "admin_username",
            help="Name of the administrator user account that can be used to SSH into the node(s)."
        )
        c.argument("admin_password", help="The administrator user password that can be used to SSH into the node(s).")
        c.argument(
            "ssh_port",
            help="The port number that can be used to SSH into the node(s). If not specified, the default "
                 "(port 22) will be used.",
        )
        c.argument(
            "ssh_private_key_file", help="The file containing the SSH private key of the administrator user account."
        )

    with self.argument_context("ml compute enable-sso") as c:
        add_common_params(c)
        compute_param(c)
        c.argument(
            "disable",
            options_list=["--disable"],
            help="Disable Single sign-on. Default: False."
        )
