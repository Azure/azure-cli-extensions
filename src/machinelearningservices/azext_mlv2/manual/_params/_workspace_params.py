# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks  # pylint: disable=no-name-in-module,import-error
from azure.cli.core.commands.parameters import ALL, LocalContextAction, LocalContextAttribute, resource_group_name_type

from ._common_params import (
    add_description_param,
    add_file_param,
    add_lro_param,
    add_max_results_params,
    add_override_param,
    add_tags_param,
)


def add_display_name_param(c):
    c.argument(
        "display_name",
        options_list=["--display-name"],
        help="Display name for the workspace.",
    )


# pylint: disable=too-many-statements
def load_workspace_params(self):
    with self.argument_context("ml workspace create") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_override_param(c)
        add_lro_param(c)
        add_file_param(c, "workspace", YAMLRefDocLinks.WORKSPACE)
        # workspace create command doesn't use add_workspace_common_params() as --names doesn't tie to az defaults for the workspace create command # pylint: disable=line-too-long
        c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the Azure ML workspace.")
        c.argument("location", options_list=["--location", "-l"], help="The location to be used for the new workspace.")
        add_description_param(c, help_message="Description of the Azure ML workspace.")
        add_display_name_param(c)
        c.argument("no_wait", help="Do not wait for workspace creation to finish.")
        add_tags_param(c)
        c.argument(
            "image_build_compute",
            options_list=["--image-build-compute", "-i"],
            help="The name of the compute target to use for building environment Docker images when the container registry is behind a VNet.",  # pylint: disable=line-too-long
        )
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity when a workspace is private link enabled.",
        )
        c.argument(
            "update_dependent_resources",
            options_list=["--update-dependent-resources", "-u"],
            help="Specifying --update_dependent_resources, gives your consent to update the workspace dependent resources. Updating the workspace-attached Azure Container Registry or Application Insights resource may break lineage of previous jobs, deployed inference endpoints, or your ability to rerun earlier jobs in this workspace.",  # pylint: disable=line-too-long
        )
        c.argument(
            "storage_account",
            options_list=["--storage-account", "-s"],
            help="ARM id of the storage account associated with this workspace.",
        )
        c.argument(
            "key_vault",
            options_list=["--key-vault", "-k"],
            help="ARM id of the key vault associated with this workspace.",
        )
        c.argument(
            "application_insights",
            options_list=["--application-insights", "-a"],
            help="ARM id of the application insights associated with this workspace.",
        )
        c.argument(
            "container_registry",
            options_list=["--container-registry", "-c"],
            help="ARM id of the container registry associated with this workspace.",
        )
        c.argument(
            "primary_user_assigned_identity",
            options_list=["--primary-user-assigned-identity", "-p"],
            help="ARM identifier of primary user assigned managed identity, in case multiple ones are specified. Also the default managed identity for clusterless compute.",  # pylint: disable=line-too-long
        )
        c.argument(
            "managed_network",
            options_list=["--managed-network", "-m"],
            help="Managed Network Isolation Mode for the workspace.",
        )
        c.argument(
            "provision_network_now",
            is_preview=True,
            options_list=["--provision-network-now"],
            help="Set to trigger the provisioning of the managed network when creating a worksapce with the manged network enabled, or else it does nothing.",  # pylint: disable=line-too-long
        )
        c.argument(
            "enable_data_isolation",
            options_list=["--enable-data-isolation", "-e"],
            help="A flag to determine if a workspace has data isolation enabled. The flag can only be set at the creation stage, it can't be updated.",  # pylint: disable=line-too-long
        )
        c.argument(
            "kind",
            options_list=[
                "--kind",
            ],
            help="Specifies the workspaces as a specific kind, overriding the value assigned in YAML, if it's present. Defaults to default. Valid kinds are: default, hub, and project.",  # pylint: disable=line-too-long
        )
        c.argument(
            "hub_id",
            options_list=[
                "--hub-id",
            ],
            help="Project kind only: An ARM ID which defines the parent hub of this project.",  # pylint: disable=line-too-long
        )
        c.argument(
            "default_resource_group",
            options_list=[
                "--default-resource-group",
            ],
            help="Hub kind only. If set, then child projects of this hub will have their resource group set this by default.",  # pylint: disable=line-too-long
        )
        c.argument(
            "system_datastores_auth_mode",
            is_preview=True,
            options_list=["--system-datastores-auth-mode", "-d"],
            help="Specifies the auth mode for the system data stores. Valid modes are: accesskey and identity.",  # pylint: disable=line-too-long
        )
        c.argument(
            "allow_roleassignment_on_rg",
            is_preview=True,
            options_list=["--allow-roleassignment-on-rg", "-r"],
            help="A flag to determine if a workspace could have role assignments on resource group level.",  # pylint: disable=line-too-long
        )

    with self.argument_context("ml workspace list") as c:
        c.argument("resource_group_name", resource_group_name_type)
        c.argument(
            "filtered_kinds",
            options_list=[
                "--filtered-kinds",
            ],
            help="List only the specified kinds of workspaces, as a comma separated list. Valid kinds are: default, hub, and project.",  # pylint: disable=line-too-long
        )
        add_max_results_params(c)

    with self.argument_context("ml workspace show") as c:
        add_workspace_common_params(c)

    with self.argument_context("ml workspace delete") as c:
        add_workspace_common_params(c)
        add_lro_param(c)
        c.argument(
            "all_resources",
            help="Delete all the dependent resources associated with the workspace (Azure Storage account, Azure Container Registry, Azure Application Insights, Azure Key Vault).",  # pylint: disable=line-too-long
        )
        c.argument(
            "permanently_delete",
            options_list=["--permanently-delete", "-p"],
            help="Workspaces are soft-deleted state by default to allow recovery of workspace data. Set this flag to override the soft-delete behavior and permanently delete your workspace.",  # pylint: disable=line-too-long
        )

    with self.argument_context("ml workspace list-keys") as c:
        add_workspace_common_params(c)

    with self.argument_context("ml workspace sync-keys") as c:
        add_workspace_common_params(c)
        add_lro_param(c)

    with self.argument_context("ml workspace provision-network") as c:
        add_workspace_common_params(c)
        add_lro_param(c)
        c.argument(
            "include_spark",
            options_list=["--include-spark"],
            help="Boolean [true/false] for if managed network should be provisioned to account for spark jobs. The default is false if flag not set. It can be enabled later by running this command again with this flag.",  # pylint: disable=line-too-long
        )

    with self.argument_context("ml workspace update") as c:
        add_workspace_common_params(c)
        add_override_param(c)
        add_lro_param(c)
        add_file_param(c, "workspace", YAMLRefDocLinks.WORKSPACE)
        add_description_param(c, help_message="Description of the Azure ML workspace.")
        add_display_name_param(c)
        c.argument(
            "image_build_compute",
            options_list=["--image-build-compute", "-i"],
            help="The name of the compute target to use for building environment Docker images when the container registry is behind a VNet.",  # pylint: disable=line-too-long
        )
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity when a workspace is private link enabled.",
        )
        c.argument(
            "network_acls",
            options_list=["--network-acls"],
            help="Comma-separated list of IP addresses or IP ranges in CIDR notation that are allowed to access the workspace. Example: 'XX.XX.XX.XX,XX.XX.XX.XX/32'. To set Public network access to 'Enabled', pass networkAcls as 'none' (i.e. this will reset network-acls) along with the PNA flag set as 'Enabled'. To disable, set the PNA flag as 'Disabled'. To set Public network access as 'Enabled from selected IP addresses', set the PNA flag as 'Enabled' and pass a comma-separated list of IPs in CIDR notation in 'network-acls.'",  # pylint: disable=line-too-long
        )
        c.argument(
            "update_dependent_resources",
            options_list=["--update-dependent-resources", "-u"],
            help="Specifying --update_dependent_resources, gives your consent to update the workspace dependent resources. Updating the workspace-attached Azure Container Registry or Application Insights resource may break lineage of previous jobs, deployed inference endpoints, or your ability to rerun earlier jobs in this workspace.",  # pylint: disable=line-too-long
        )
        c.argument(
            "application_insights",
            options_list=["--application-insights", "-a"],
            help="ARM id of the application insights associated with this workspace.",
        )
        c.argument(
            "container_registry",
            options_list=["--container-registry", "-c"],
            help="ARM id of the container registry associated with this workspace.",
        )
        c.argument(
            "primary_user_assigned_identity",
            options_list=["--primary-user-assigned-identity", "-p"],
            help="ARM id of the primary user assigned identity associated with this workspace.",
        )
        c.argument(
            "managed_network",
            options_list=["--managed-network", "-m"],
            help="Managed Network Isolation Mode for the workspace.",
        )
        c.argument(
            "system_datastores_auth_mode",
            is_preview=True,
            options_list=["--system-datastores-auth-mode", "-d"],
            help="Specifies the auth mode for the system data stores. Valid modes are: accesskey and identity.",  # pylint: disable=line-too-long
        )
        c.argument(
            "allow_roleassignment_on_rg",
            is_preview=True,
            options_list=["--allow-roleassignment-on-rg", "-r"],
            help="A flag to determine if a workspace could have role assignments on resource group level.",  # pylint: disable=line-too-long
        )

    with self.argument_context("ml workspace diagnose") as c:
        add_workspace_common_params(c)
        add_lro_param(c)


# Workspace commands' common paramaters differ from rest of the commands because it takes --name instead of --workspace-name as the workspace name. # pylint: disable=line-too-long
def add_workspace_common_params(c):
    c.argument("resource_group_name", resource_group_name_type)
    c.argument(
        "name",
        options_list=["--name", "-n"],
        type=str,
        help="Name of the Azure ML workspace."
        " You can configure the default workspace using `az configure --defaults workspace=<name>`",
        configured_default="workspace",
        local_context_attribute=LocalContextAttribute(
            name="aml_workspace_name", actions=[LocalContextAction.SET, LocalContextAction.GET], scopes=[ALL]
        ),
    )
