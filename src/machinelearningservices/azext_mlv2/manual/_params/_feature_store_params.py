# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks
from azure.cli.core.commands.parameters import ALL, LocalContextAction, LocalContextAttribute, resource_group_name_type

from ._common_params import (
    add_description_param,
    add_file_param,
    add_lro_param,
    add_max_results_params,
    add_override_param,
    add_tags_param,
)


def add_display_name_param(c):
    c.argument(
        "display_name",
        options_list=["--display-name"],
        help="Display name for the feature store.",
    )


def load_feature_store_params(self):
    with self.argument_context("ml feature-store create") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_override_param(c)
        add_lro_param(c)
        add_file_param(c, "feature_store", YAMLRefDocLinks.FEATURE_STORE)
        # Feature store create command doesn't use add_feature_store_common_params() as --names doesn't tie to
        # az defaults for the feature store create command
        c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the feature store.")
        c.argument(
            "offline_store",
            options_list=["--offline-store"],
            help="Feature store offline store config. materialization-identity is needed to setup offline store",
        )
        c.argument(
            "materialization_identity",
            options_list=["--materialization-identity", "-t"],
            help="The identity used for offline/online store connection.",
        )
        c.argument(
            "location", options_list=["--location", "-l"], help="The location to be used for the new feature store."
        )
        add_description_param(c, help_message="Description of the feature store.")
        add_display_name_param(c)
        c.argument("no_wait", help="Do not wait for feature store creation to finish.")
        add_tags_param(c)
        c.argument(
            "image_build_compute",
            options_list=["--image-build-compute", "-i"],
            help="The name of the compute target to use for building environment Docker images "
            "when the container registry is behind a VNet.",
        )
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity when a workspace is private link enabled.",
        )
        c.argument(
            "update_dependent_resources",
            options_list=["--update-dependent-resources", "-u"],
            help="Specifying --update_dependent_resources, gives your consent to update the feature store "
            "dependent resources. Updating the workspace-attached Azure Container Registry or Application "
            "Insights resource may break lineage of previous jobs, deployed inference endpoints, or your "
            "ability to rerun earlier jobs in this feature store.",
        )
        c.argument(
            "application_insights",
            options_list=["--application-insights", "-a"],
            help="ARM id of the application insights associated with this workspace.",
        )
        c.argument(
            "container_registry",
            options_list=["--container-registry", "-c"],
            help="ARM id of the container registry associated with this workspace.",
        )
        c.argument(
            "primary_user_assigned_identity",
            options_list=["--primary-user-assigned-identity", "-p"],
            help="ARM identifier of primary user assigned managed identity, in case multiple ones are "
            "specified. Also the default managed identity for clusterless compute.",
        )
        c.argument(
            "not_grant_materialization_identity_permissions",
            options_list=["--not-grant-permissions"],
            help="Specifying --not-grant-permissions, to not grant materializtion identity permission to "
            "feature store (workspace, offline store and online store). Default is False",
        )
        c.argument(
            "managed_network",
            options_list=["--managed-network", "-m"],
            help="Managed Network Isolation Mode for the workspace.",
        )

    with self.argument_context("ml feature-store list") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_max_results_params(c)

    with self.argument_context("ml feature-store show") as c:
        add_feature_store_common_params(c)

    with self.argument_context("ml feature-store delete") as c:
        add_feature_store_common_params(c)
        add_lro_param(c)
        c.argument(
            "all_resources",
            help="Delete all the dependent resources associated with the feature store "
            "(Azure Storage account, Azure Container Registry, Azure Application Insights, Azure Key Vault).",
        )

    with self.argument_context("ml feature-store update") as c:
        add_feature_store_common_params(c)
        add_override_param(c)
        add_lro_param(c)
        add_file_param(c, "feature_store", YAMLRefDocLinks.FEATURE_STORE)
        add_description_param(c, help_message="Description of the feature store.")
        add_display_name_param(c)
        c.argument(
            "materialization_identity",
            options_list=["--materialization-identity", "-t"],
            help="The identity used for offline/online store connection.",
        )
        c.argument(
            "image_build_compute",
            options_list=["--image-build-compute", "-i"],
            help="The name of the compute target to use for building environment Docker images "
            "when the container registry is behind a VNet.",
        )
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity when a workspace is private link enabled.",
        )
        c.argument(
            "update_dependent_resources",
            options_list=["--update-dependent-resources", "-u"],
            help="Specifying --update_dependent_resources, gives your consent to update the workspace "
            "dependent resources. Updating the workspace-attached Azure Container Registry or Application "
            "Insights resource may break lineage of previous jobs, deployed inference endpoints, or your "
            "ability to rerun earlier jobs in this workspace.",
        )
        c.argument(
            "application_insights",
            options_list=["--application-insights", "-a"],
            help="ARM id of the application insights associated with this workspace.",
        )
        c.argument(
            "container_registry",
            options_list=["--container-registry", "-c"],
            help="ARM id of the container registry associated with this workspace.",
        )
        c.argument(
            "primary_user_assigned_identity",
            options_list=["--primary-user-assigned-identity", "-p"],
            help="ARM id of the primary user assigned identity associated with this workspace.",
        )
        c.argument(
            "not_grant_materialization_identity_permissions",
            options_list=["--not-grant-permissions"],
            help="Specifying --not-grant-permissions, to not grant materializtion identity permission to "
            "feature store (workspace, offline store and online store). Default is False",
        )
        c.argument(
            "managed_network",
            options_list=["--managed-network", "-m"],
            help="Managed Network Isolation Mode for the workspace.",
        )

    with self.argument_context("ml feature-store provision-network") as c:
        add_feature_store_common_params(c)
        add_lro_param(c)
        c.argument(
            "resource_group",
            options_list=["--resource-group ", "-g"],
            help="Name of resource group. You can configure the default group using "
            "az configure --defaults group=<name>.",
        )
        c.argument(
            "include_spark",
            options_list=["--include-spark"],
            help="Boolean [true/false] for if managed network should be provisioned to account for spark jobs. "
                 "The default is false if flag not set. It can be enabled later by running this command again "
                 "with this flag.",
        )


# Feature store commands' common parameters differ from rest of the commands because it takes
# --name instead of --workspace-name as the workspace name.
def add_feature_store_common_params(c):
    c.argument("resource_group_name", resource_group_name_type)
    c.argument(
        "name",
        options_list=["--name", "-n"],
        type=str,
        help="Name of the feature store"
        " You can configure the default group using `az configure --defaults feature-store=<name>`",
        configured_default="feature-store",
        local_context_attribute=LocalContextAttribute(
            name="aml_feature_store_name", actions=[LocalContextAction.SET, LocalContextAction.GET], scopes=[ALL]
        ),
    )
