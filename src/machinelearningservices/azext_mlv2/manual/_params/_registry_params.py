# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks
from azure.cli.core.commands.parameters import ALL, LocalContextAction, LocalContextAttribute, resource_group_name_type

from ._common_params import (
    add_file_param,
    add_lro_param,
    add_max_results_params,
    add_override_param,
    add_tags_param,
)


def add_display_name_param(c):
    c.argument(
        "display_name",
        options_list=["--display-name"],
        help="Display name for the registry.",
    )


def load_registry_params(self):
    with self.argument_context("ml registry create") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_override_param(c)
        add_lro_param(c)
        # registry create command doesn't use add_registry_common_params() as --names doesn't tie to
        # az defaults for the registry create command
        c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the Azure ML registry.")
        add_file_param(c, "registry", YAMLRefDocLinks.REGISTRY)
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity for a registry.",
        )
        add_display_name_param(c)
        c.argument("no_wait", help="Do not wait for registry creation to finish.")
        add_tags_param(c)

    with self.argument_context("ml registry list") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_max_results_params(c)
        # Removed until we determine and officially spec-out a solution to the scope problem.

    with self.argument_context("ml registry show") as c:
        add_registry_common_params(c)

    with self.argument_context("ml registry diagnose") as c:
        add_registry_common_params(c)
        add_lro_param(c)

    with self.argument_context("ml registry update") as c:
        c.argument("resource_group_name", resource_group_name_type)
        add_lro_param(c)
        # registry create command doesn't use add_registry_common_params() as --names doesn't tie to
        # az defaults for the registry create command
        c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the Azure ML registry.")
        add_file_param(c, "registry", YAMLRefDocLinks.REGISTRY)
        c.argument(
            "public_network_access",
            options_list=["--public-network-access"],
            help="Allow public endpoint connectivity for a registry.",
        )
        add_display_name_param(c)
        c.argument("no_wait", help="Do not wait for registry update to finish.")
        add_tags_param(c)

    with self.argument_context("ml registry delete") as c:
        add_registry_common_params(c)


def add_registry_common_params(c):
    c.argument("resource_group_name", resource_group_name_type)
    c.argument(
        "name",
        options_list=["--name", "-n"],
        type=str,
        help="Name of the Azure ML registry."
        " You can configure the default group using `az configure --defaults registry=<name>`",
        configured_default="registry",
        local_context_attribute=LocalContextAttribute(
            name="aml_registry_name", actions=[LocalContextAction.SET, LocalContextAction.GET], scopes=[ALL]
        ),
    )
