# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks

from ._common_params import (
    add_archived_only_param,
    add_common_params,
    add_datastore_param,
    add_stage_param,
    add_description_param,
    add_file_param,
    add_include_archived_param,
    add_max_results_params,
    add_override_param,
    add_registry_param,
    add_tags_param,
)


def add_version_param(c):
    c.argument("version", options_list=["--version", "-v"], type=str, help="Version of the model.")


def add_name_param(c):
    c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the model.")


def add_label_param(c):
    c.argument("label", options_list=["--label", "-l"], help="Label of the model.")


def load_model_params(self):
    with self.argument_context("ml model create") as c:
        add_common_params(c)
        add_override_param(c)
        add_tags_param(c)
        add_name_param(c)
        add_version_param(c)
        add_registry_param(c)
        add_file_param(c, "model", YAMLRefDocLinks.MODEL)
        add_datastore_param(c)
        add_stage_param(c, asset_name="model")
        c.argument(
            "path",
            options_list=["--path", "-p"],
            help="Path to the model file(s). This can be either a local or a remote location. "
                 "If specified, --name/-n and --version/-v must also be provided.",
        )
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="Type of the model, allowed values are custom_model, mlflow_model and triton_model. "
                 "The default type is custom_model.",
        )
        add_description_param(c, help_message="Description of the model.")

    with self.argument_context("ml model show") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_label_param(c)
        add_registry_param(c)

    with self.argument_context("ml model download") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_registry_param(c)
        c.argument(
            "download_path",
            options_list=["--download-path", "-p"],
            help="Path to download the model files, defaults to the current working directory.",
        )

    with self.argument_context("ml model list") as c:
        add_common_params(c)
        c.argument(
            "name",
            options_list=["--name", "-n"],
            help="Name of the model. If provided, all the model versions under this name will be returned.",
        )
        add_stage_param(c, asset_name="model")
        add_max_results_params(c)
        add_registry_param(c)
        add_include_archived_param(c, help_message="List archived models and active models.")
        add_archived_only_param(c, help_message="List archived models only.")

    with self.argument_context("ml model update") as c:
        add_common_params(c)
        add_override_param(c)
        add_name_param(c)
        add_version_param(c)
        add_label_param(c)
        add_stage_param(c, asset_name="model")
        add_file_param(c, "model", YAMLRefDocLinks.MODEL)
        add_description_param(c, help_message="Description of the model.")
        add_registry_param(c)

    with self.argument_context("ml model archive") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_label_param(c)
        add_registry_param(c)

    with self.argument_context("ml model restore") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_label_param(c)
        add_registry_param(c)

    with self.argument_context("ml model package") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_registry_param(c)
        c.argument(
            "file",
            options_list=["--file", "-f"],
            help="Local path to the YAML file containing the model package definition."
        )

    with self.argument_context("ml model share") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument("share_with_name", help="Name  of the model to be created with.")
        c.argument("share_with_version", help="Version  of the model to be created with.")
        c.argument("registry_name", help="Destination registry.")
