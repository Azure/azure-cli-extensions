# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import YAMLRefDocLinks

from ._common_params import (
    add_archived_only_param,
    add_description_param,
    add_feature_store_common_params,
    add_file_param,
    add_include_archived_param,
    add_max_results_params,
    add_override_param,
    add_tags_param,
)


def add_name_param(c):
    c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the feature set.")


def add_version_param(c):
    c.argument("version", options_list=["--version", "-v"], help="Version of the feature set.")


def load_feature_set_params(self):
    with self.argument_context("ml feature-set list") as c:
        add_feature_store_common_params(c)
        c.argument(
            "name",
            options_list=["--name", "-n"],
            type=str,
            help="Name of the feature set. If provided, all the feature set versions under this name will be returned.",
        )
        add_include_archived_param(c, help_message="List archived feature set assets and active feature set assets.")
        add_archived_only_param(c, help_message="List archived feature set assets only.")
        add_max_results_params(c)

    with self.argument_context("ml feature-set show") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)

    with self.argument_context("ml feature-set create") as c:
        add_feature_store_common_params(c)
        add_override_param(c)
        add_name_param(c)
        add_version_param(c)
        add_description_param(c, help_message="Description of the feature set.")
        c.argument("description", options_list=["--description", "-d"], help="Description of the feature set.")
        add_file_param(c, "featureset", YAMLRefDocLinks.FEATURE_SET)
        c.argument("specification", options_list=["--specification", "-s"], help="Specification for feature set")
        c.argument(
            "materialization_settings",
            options_list=["--materialization-settings", "-m"],
            help="Materialization settings for feature set",
        )
        c.argument("no_wait", help="Do not wait for feature set creation to finish.")

    with self.argument_context("ml feature-set update") as c:
        add_feature_store_common_params(c)
        add_override_param(c)
        add_name_param(c)
        add_version_param(c)
        c.argument(
            "file",
            options_list=["--file", "-f"],
            help="Local path to the YAML file containing the feature set asset specification.",
        )
        c.argument("no_wait", help="Do not wait for feature set update to finish.")

    with self.argument_context("ml feature-set archive") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)

    with self.argument_context("ml feature-set restore") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)

    with self.argument_context("ml feature-set backfill") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)
        add_tags_param(c)
        add_description_param(c)
        c.argument(
            "feature_window_start_time",
            options_list=["--feature-window-start-time", "-s"],
            help="Start time of the feature window to be materialized",
        )
        c.argument(
            "feature_window_end_time",
            options_list=["--feature-window-end-time", "-e"],
            help="End time of the feature window to be materialized",
        )
        c.argument("display_name", options_list=["--display-name"], help="Specifies the display name")
        c.argument(
            "compute_resource",
            options_list=["--compute-resource", "-r"],
            help="Specifies the compute resource settings",
        )
        c.argument(
            "spark_configuration",
            options_list=["--spark-configuration-settings", "-c"],
            help="Specifies the spark compute settings",
        )
        c.argument(
            "file",
            options_list=["--file", "-f"],
            help="Local path to the YAML file containing the feature set backfill request",
        )
        c.argument(
            "by_data_status",
            options_list=["--by-data-status", "-d"],
            help=" Specified the data availability status that you want to backfill",
        )
        c.argument(
            "by_job_id",
            options_list=["--by-job-id", "-j"],
            help="Specify the jobId to retry the failed materialization",
        )

    with self.argument_context("ml feature-set list-materialization-operation") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument(
            "feature_window_start_time",
            options_list=["--feature-window-start-time", "-s"],
            help="Start time of the feature window to be materialized",
        )
        c.argument(
            "feature_window_end_time",
            options_list=["--feature-window-end-time", "-e"],
            help="End time of the feature window to be materialized",
        )
        c.argument(
            "filters",
            options_list=["--filters"],
            help="Comma-separated list of tag names (and optionally values). Example: tag1,tag2=value2.",
        )

    with self.argument_context("ml feature-set list-features") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument(
            "feature_name", options_list=["--feature-name"], type=str, help="Name of the feature (case sensitive)."
        )

    with self.argument_context("ml feature-set get-feature") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument(
            "feature_name", options_list=["--feature-name"], type=str, help="Name of the feature (case sensitive)."
        )

    with self.argument_context("ml feature-set show-feature") as c:
        add_feature_store_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument(
            "feature_name", options_list=["--feature-name"], type=str, help="Name of the feature (case sensitive)."
        )
