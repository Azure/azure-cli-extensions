# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.ai.ml.constants._common import AssetTypes, YAMLRefDocLinks
from azure.cli.core.commands.parameters import get_enum_type, get_three_state_flag

from ._common_params import (add_archived_only_param, add_common_params,
                             add_datastore_param, add_description_param,
                             add_file_param, add_include_archived_param,
                             add_max_results_params, add_override_param,
                             add_lro_param)


def add_name_param(c):
    c.argument("name", options_list=["--name", "-n"], type=str, help="Name of the data asset.")


def add_name_required_param(c):
    c.argument("name", options_list=["--name", "-n"], type=str,
               help="Name of the data asset. Required if --registry-name is provided.")


def add_version_param(c):
    c.argument("version", options_list=["--version", "-v"], help="Version of the data asset.")


def add_version_required_param(c):
    c.argument("version", options_list=["--version", "-v"],
               help="Version of the data asset. Required if --registry-name is provided.")


def add_version_and_label_params(c):
    c.argument("version", options_list=["--version", "-v"],
               help="Version of the data asset. Mutually exclusive with label.")
    c.argument("label", options_list=["--label", "-l"],
               help="Label of the data asset. Mutually exclusive with version.")


def add_version_or_label_required_params(c):
    c.argument("version", options_list=["--version", "-v"],
               help="Version of the data asset. Must be provided, if label is not provided. "
                    "Mutually exclusive with label.")
    c.argument("label", options_list=["--label", "-l"],
               help="Label of the data asset. Must be provided, if version is not provided. "
                    "Mutually exclusive with version.")


def add_registry_param(c):
    c.argument(
        "registry_name",
        options_list=["--registry-name"],
        help="If provided, the command will target the registry instead of a workspace. "
             "Hence resource group and workspace won't be required. Must be provided if "
             "--workspace-name and --resource-group are not provided ",
    )


def load_data_params(self):
    with self.argument_context("ml data list") as c:
        add_common_params(c)
        c.argument(
            "name",
            options_list=["--name", "-n"],
            type=str,
            help="Name of the data asset. If provided, all the data versions under this name "
                 "will be returned.",
        )
        add_include_archived_param(c, help_message="List archived data assets and active data assets.")
        add_archived_only_param(c, help_message="List archived data assets only.")
        add_max_results_params(c)
        add_registry_param(c)

    with self.argument_context("ml data show") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_or_label_required_params(c)
        add_registry_param(c)

    with self.argument_context("ml data create") as c:
        add_common_params(c)
        add_override_param(c)
        add_name_required_param(c)
        add_version_required_param(c)
        add_description_param(c, help_message="Description of the data asset.")
        add_datastore_param(c)
        add_registry_param(c)
        add_lro_param(c)
        c.argument("description", options_list=["--description", "-d"], help="Description of the data asset.")
        add_file_param(c, "data", YAMLRefDocLinks.DATA)
        c.argument(
            "skip_validation",
            options_list=["--skip-validation"],
            help="Skip validation of MLTable metadata when type is MLTable.",
        )
        c.argument("path", options_list=["--path", "-p"], help="Path to the data asset, can be local or remote.")
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="Type of the data asset.",
            arg_type=get_enum_type([AssetTypes.URI_FILE, AssetTypes.URI_FOLDER, AssetTypes.MLTABLE]),
        )

    with self.argument_context("ml data import") as c:
        add_common_params(c)
        add_override_param(c)
        add_name_param(c)
        add_version_param(c)
        add_description_param(c, help_message="Description of the data asset.")
        add_datastore_param(c)
        c.argument("description", options_list=["--description", "-d"], help="Description of the data asset.")
        add_file_param(c, "data", YAMLRefDocLinks.DATA)
        c.argument(
            "skip_validation",
            options_list=["--skip-validation"],
            help="Skip validation of compute resource referenced by underlying data import "
                 "materialization job.",
        )
        c.argument("path", options_list=["--path", "-p"], help="Path to the data asset on cloud storage.")
        c.argument(
            "type",
            options_list=["--type", "-t"],
            help="Type of the data asset.",
            arg_type=get_enum_type([AssetTypes.URI_FILE, AssetTypes.URI_FOLDER, AssetTypes.MLTABLE]),
        )

    with self.argument_context("ml data list-materialization-status") as c:
        add_common_params(c)
        c.argument(
            "max_results",
            options_list=["--max-results", "-r"],
            type=int,
            help="Max number of results to return. Default is 50",
        )
        c.argument("all_results", arg_type=get_three_state_flag(), help="Returns all results.")
        add_include_archived_param(c, help_message="List archived jobs and active jobs.")
        add_archived_only_param(c, help_message="List archived jobs only.")
        c.argument(
            "name",
            options_list=["--name", "-p"],
            type=str,
            help="Name of the asset. Will list all materialization jobs that create versions "
                 "of the asset matching the given name.",
        )

    with self.argument_context("ml data update") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_or_label_required_params(c)
        add_registry_param(c)

    with self.argument_context("ml data archive") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_and_label_params(c)

    with self.argument_context("ml data restore") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_and_label_params(c)

    with self.argument_context("ml data share") as c:
        add_common_params(c)
        add_name_param(c)
        add_version_param(c)
        c.argument("share_with_name", help="Name of the data asset to be created with.")
        c.argument("share_with_version", help="Version of the data asset to be created with.")
        c.argument("registry_name", help="Destination registry.")

    with self.argument_context("ml data mount") as c:
        add_common_params(c)
        c.argument("mount_point", help="A local path used as mount point.")
        c.argument("path", help="The data asset path to mount, in the form of `azureml:<name>` "
                                "or `azureml:<name>:<version>`")
        c.argument("mode", help="Mount mode. Only `ro_mount` (read-only) is supported for data asset mount.")
        c.argument("persistent", help="Make mount persist across reboots. Supported only on Compute Instance.")
