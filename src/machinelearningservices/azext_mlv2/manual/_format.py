# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from collections import OrderedDict

from azext_mlv2.manual.custom.utils import deep_get


def transform_environment(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("latest version", r.get("latest_version")),
            ]
        )
        if r.get("version", None):
            entry["version"] = r.get("version")
        transformed.append(entry)

    return transformed


def transform_environment_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
            ]
        )
        if r.get("latest_version", None):
            entry["latest version"] = r.get("latest_version")
        if r.get("version", None):
            entry["version"] = r.get("version")
        transformed.append(entry)

    return transformed


def transform_job(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("status", r.get("status")),
                ("experiment", r.get("experiment_name")),
                ("status", r.get("status")),
                ("compute target", r.get("compute", "")),
                ("job type", r.get("type")),
                ("created on", deep_get(r, ["creation_context", "created_at"], None)),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_data(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("latest version", r.get("latest_version")),
            ]
        )
        if r.get("version", None):
            entry["version"] = r.get("version")
            entry["data type"] = r.get("version")
            entry["path"] = r.get("path")
        transformed.append(entry)

    return transformed


def transform_datastore(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [("name", r.get("name")), ("storage type", r.get("type")), ("storage account name", r.get("account_name"))]
        )
        transformed.append(entry)

    return transformed


def transform_compute(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("compute type", r.get("type")),
                ("state", r.get("state", None) or r.get("provisioning_state", None)),
                ("Instance type", r.get("size", None)),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_vmsize(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("family", r.get("family", None)),
                ("v_cp_us", r.get("v_cp_us", None)),
                ("gpus", r.get("gpus", None)),
                ("os_vhd_size_mb", r.get("os_vhd_size_mb", None)),
                ("max_resource_volume_mb", r.get("max_resource_volume_mb", None)),
                ("memory_gb", r.get("memory_gb", None)),
                ("low_priority_capable", r.get("low_priority_capable", None)),
                ("premium_io", r.get("premium_io", None)),
                ("supported_compute_types", r.get("supported_compute_types", None)),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_usage(result):
    transformed = []
    for r in result:
        name = r.get("name", None)
        entry = OrderedDict(
            [
                ("aml_workspace_location", r.get("aml_workspace_location", None)),
                ("type", r.get("type", None)),
                ("unit", r.get("unit", None)),
                ("current_value", r.get("current_value", None)),
                ("limit", r.get("limit", None)),
                ("name", name["value"] if name and "value" in name else None),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_workspace(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("location", r.get("location")),
                ("description", r.get("description", None)),
            ]
        )
        transformed.append(entry)

    return transformed


# show use in registry list
def transform_registry(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("location", r.get("location")),
                (
                    "managed locations",
                    ", ".join([rep_loc.get("location") for rep_loc in r.get("replication_locations")]),
                ),
                ("description", r.get("description", None)),
            ]
        )
        transformed.append(entry)

    return transformed


# for use in registry show
def transform_registry_single(result):
    transformed = []
    entry = OrderedDict(
        [
            ("name", result.get("name")),
            ("location", result.get("location")),
            (
                "managed locations",
                ", ".join([rep_loc.get("location") for rep_loc in result.get("replication_locations")]),
            ),
            ("description", result.get("description", None)),
        ]
    )
    transformed.append(entry)

    return transformed


def transform_model(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("stage", r.get("stage")),
                ("latest version", r.get("latest version")),
            ]
        )
        if r.get("version", None):
            entry["version"] = r.get("version")
            entry["model type"] = r.get("type")
            entry["path"] = r.get("path", None)
        transformed.append(r)

    return transformed


def transform_model_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("tags", r.get("tags")),
                ("stage", r.get("stage")),
                ("id", r.get("id")),
                ("properties", r.get("properties")),
                ("description", r.get("description", "")),
                ("creation_context", r.get("creation_context")),
            ]
        )

        if r.get("latest_version", None):
            entry["latest version"] = r.get("latest_version")
        if r.get("version", None):
            entry["version"] = r.get("version")
            entry["model type"] = r.get("type")
            entry["path"] = r.get("path", None)
        transformed.append(entry)

    return transformed


def transform_component(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("latest version", r.get("latest_version")),
            ]
        )
        if r.get("version", None):
            entry["version"] = r.get("version")
            entry["Component type"] = r.get("type")
        transformed.append(entry)

    return transformed


def transform_connection(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("target", r.get("target")),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_deployment(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("endpoint_name", r.get("endpoint_name")),
                ("provisioning_state", r.get("provisioning_state", None)),
                ("instance_type", r.get("instance_type", None)),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_deployment_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("endpoint_name", r.get("endpoint_name")),
                ("provisioning_state", r.get("provisioning_state", None)),
                ("instance_type", r.get("instance_type", None)),
                ("model", r.get("model")),
                ("type", r.get("type")),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_endpoint_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("location", r.get("location")),
                ("traffic", r.get("traffic")),
                ("mirror_traffic", r.get("mirror_traffic")),
                ("provisioning_state", r.get("provisioning_state")),
                ("kind", r.get("kind")),
                ("tags", r.get("tags")),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_batch_endpoint_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("id", r.get("id")),
                ("name", r.get("name")),
                ("deployment_name", deep_get(r, ["defaults", "deploymentName"])),
                ("location", r.get("location")),
                ("provisioning_state", r.get("provisioning_state")),
                ("scoring_uri", r.get("scoring_uri")),
                ("auth_mode", r.get("auth_mode")),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_batch_deployment_list(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("id", r.get("id")),
                ("name", r.get("name")),
                ("model", r.get("model")),
                ("code", deep_get(r, ["code_configuration", "code"])),
                ("environment", r.get("environment")),
                ("compute", r.get("compute")),
                ("tags", r.get("tags")),
                ("creation_context", r.get("creation_context")),
                ("provisioning_state", r.get("provisioning_state")),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_batch_deployment_list_jobs(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("status", deep_get(r, ["properties", "status"])),
                ("output", deep_get(r, ["properties", "output"])),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_schedule(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("description", r.get("description")),
                ("is_enabled", r.get("is_enabled")),
                ("provisioning_state", r.get("provisioning_state")),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_virtual_cluster(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("location", r.get("location")),
            ]
        )
        transformed.append(entry)
    return transformed


def transform_feature_store(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("location", r.get("location")),
                ("description", r.get("description", None)),
            ]
        )
        transformed.append(entry)

    return transformed


def transform_feature_set(result):
    transformed = []
    for r in result:
        entry = OrderedDict([("name", r.get("name"))])
        if r.get("version", None):
            entry["version"] = r.get("version")
        transformed.append(entry)

    return transformed


def transform_feature_store_entity(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
            ]
        )
        if r.get("version", None):
            entry["version"] = r.get("version")
        transformed.append(entry)

    return transformed


def transform_feature(result):
    transformed = []
    for r in result:
        entry = OrderedDict(
            [
                ("name", r.get("name")),
                ("data_type", r.get("data_type")),
            ]
        )
        transformed.append(entry)
    return transformed
