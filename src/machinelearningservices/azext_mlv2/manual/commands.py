# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from azure.cli.core.commands import CliCommandType
from azure.cli.core.extension.operations import extension_exists

from ._format import (
    transform_batch_deployment_list,
    transform_batch_deployment_list_jobs,
    transform_batch_endpoint_list,
    transform_component,
    transform_compute,
    transform_connection,
    transform_data,
    transform_datastore,
    transform_deployment_list,
    transform_endpoint_list,
    transform_environment,
    transform_environment_list,
    transform_feature,
    transform_feature_set,
    transform_feature_store,
    transform_feature_store_entity,
    transform_job,
    transform_model,
    transform_model_list,
    transform_registry,
    transform_registry_single,
    transform_schedule,
    transform_usage,
    transform_virtual_cluster,
    transform_vmsize,
    transform_workspace,
)
from .custom.utils import private_features_enabled


def load_command_table(self, _):
    if extension_exists(ext_name="azure-cli-ml"):
        from azure.cli.core.style import Style, print_styled_text

        print_styled_text(
            [
                (
                    Style.WARNING,
                    """
**************************************************************************************************************
* WARNING:                                                                                                   *
* Extension "azure-cli-ml" cannot be used along with extension "ml". This may result in unexpected behaviour.*
* Please remove azure-cli-ml extension by running  "az extension remove -n azure-cli-ml                      *
**************************************************************************************************************
                """,
                )
            ]
        )

    from azext_mlv2.generated._client_factory import cf_ml_cl

    with self.command_group("ml", client_factory=cf_ml_cl) as g:
        pass

    with self.command_group("ml model", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.model#{}"
        custom_model = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="_ml_model_show",
            getter_type=custom_model,
            setter_name="_ml_model_update",
            setter_type=custom_model,
        )

        g.custom_command("create", "ml_model_create", supports_no_wait=True)
        g.custom_show_command("show", "ml_model_show")
        g.custom_command("download", "ml_model_download")
        g.custom_command("list", "ml_model_list", transform=transform_model_list, table_transformer=transform_model)
        g.custom_command("archive", "ml_model_archive")
        g.custom_command("restore", "ml_model_restore")
        g.custom_command("package", "ml_model_package", is_preview=True)
        g.custom_command("share", "ml_model_share")

    with self.command_group("ml environment", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.environment#{}"
        custom_environment = CliCommandType(operations_tmpl=custom_tmpl)

        g.custom_command("create", "ml_environment_create", supports_no_wait=True)
        g.custom_show_command("show", "ml_environment_show")
        g.custom_command(
            "list",
            "ml_environment_list",
            transform=transform_environment_list,
            table_transformer=transform_environment,
        )
        g.custom_command("archive", "ml_environment_archive")
        g.custom_command("restore", "ml_environment_restore")
        g.custom_command("share", "ml_environment_share")
        g.generic_update_command(
            "update",
            getter_name="_ml_environment_show",
            getter_type=custom_environment,
            setter_name="_ml_environment_update",
            setter_type=custom_environment,
        )

    with self.command_group("ml data", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.data#{}"
        custom_data = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_command("create", "ml_data_create", supports_no_wait=True)
        g.custom_command("import", "ml_data_import", is_preview=True)
        g.custom_command("list-materialization-status", "ml_data_list_materialization_status", is_preview=True)
        g.custom_show_command("show", "ml_data_show")
        g.custom_command("list", "ml_data_list", table_transformer=transform_data)
        g.custom_command("archive", "ml_data_archive")
        g.custom_command("restore", "ml_data_restore")
        g.custom_command("share", "ml_data_share", is_preview=True)
        g.custom_command("mount", "ml_data_mount", is_preview=True)
        g.generic_update_command(
            "update",
            getter_name="_ml_data_show",
            getter_type=custom_data,
            setter_name="_ml_data_update",
            setter_type=custom_data,
        )

    with self.command_group("ml job", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.job#{}"
        custom_job = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_command("create", "ml_job_create")
        g.custom_command("download", "ml_job_download")
        g.custom_command("stream", "ml_job_stream")
        g.custom_show_command("show", "ml_job_show")
        g.custom_command("archive", "ml_job_archive")
        g.custom_command("restore", "ml_job_restore")
        g.custom_command("show-services", "ml_job_show_services")
        g.custom_command("connect-ssh", "ml_job_connect_ssh")
        g.custom_command("validate", "ml_job_validate")
        if private_features_enabled():
            g.custom_command("list", "ml_job_list_private_preview", table_transformer=transform_job)
            g.custom_command("cancel", "ml_job_cancel_private_preview")
        else:
            g.custom_command("cancel", "ml_job_cancel")
            g.custom_command("list", "ml_job_list", table_transformer=transform_job)
        g.generic_update_command(
            "update",
            getter_name="_ml_job_show",
            getter_type=custom_job,
            setter_name="_ml_job_update",
            setter_type=custom_job,
        )

    with self.command_group("ml online-endpoint", client_factory=cf_ml_cl) as g:
        g.custom_show_command("show", "ml_online_endpoint_show")
        g.custom_command("create", "ml_online_endpoint_create", supports_no_wait=True)
        g.custom_command("delete", "ml_online_endpoint_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("list", "ml_online_endpoint_list", transform=transform_endpoint_list)
        g.custom_command("get-credentials", "ml_online_endpoint_get_credentials")
        custom_tmpl = "azext_mlv2.manual.custom.online_endpoint#{}"
        custom_online_endpoint = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="_ml_online_endpoint_show",
            getter_type=custom_online_endpoint,
            setter_name="ml_online_endpoint_update",
            setter_type=custom_online_endpoint,
            supports_no_wait=True,
        )
        g.custom_command("invoke", "ml_online_endpoint_invoke")
        g.custom_command("regenerate-keys", "ml_online_endpoint_regenerate_keys", supports_no_wait=True)

    with self.command_group("ml online-deployment", client_factory=cf_ml_cl) as g:
        g.custom_command("create", "ml_online_deployment_create", supports_no_wait=True)
        g.custom_show_command("show", "ml_online_deployment_show")
        g.custom_command("delete", "ml_online_deployment_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("list", "ml_online_deployment_list", transform=transform_deployment_list)
        g.custom_command("get-logs", "ml_online_deployment_get_logs")
        custom_tmpl = "azext_mlv2.manual.custom.online_deployment#{}"
        custom_online_deployment = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="_ml_online_deployment_show",
            getter_type=custom_online_deployment,
            setter_name="ml_online_deployment_update",
            setter_type=custom_online_deployment,
            supports_no_wait=True,
        )

    with self.command_group("ml batch-endpoint", client_factory=cf_ml_cl) as g:
        g.custom_show_command("show", "ml_batch_endpoint_show")
        g.custom_command("create", "ml_batch_endpoint_create", supports_no_wait=True)
        g.custom_command("delete", "ml_batch_endpoint_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("list", "ml_batch_endpoint_list", transform=transform_batch_endpoint_list)
        g.custom_command("list-jobs", "ml_batch_endpoint_list_jobs")
        custom_tmpl = "azext_mlv2.manual.custom.batch_endpoint#{}"
        custom_batch_endpoint = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="_ml_batch_endpoint_show",
            getter_type=custom_batch_endpoint,
            setter_name="ml_batch_endpoint_update",
            setter_type=custom_batch_endpoint,
            supports_no_wait=True,
        )
        g.custom_command("invoke", "ml_batch_endpoint_invoke")

    with self.command_group("ml batch-deployment", client_factory=cf_ml_cl) as g:
        g.custom_command("create", "ml_batch_deployment_create", supports_no_wait=True)
        g.custom_show_command("show", "ml_batch_deployment_show")
        g.custom_command("delete", "ml_batch_deployment_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("list", "ml_batch_deployment_list", transform=transform_batch_deployment_list)
        g.custom_command("list-jobs", "ml_batch_deployment_list_jobs", transform=transform_batch_deployment_list_jobs)
        custom_tmpl = "azext_mlv2.manual.custom.batch_deployment#{}"
        custom_batch_deployment = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="_ml_batch_deployment_show",
            getter_type=custom_batch_deployment,
            setter_name="ml_batch_deployment_update",
            setter_type=custom_batch_deployment,
            supports_no_wait=True,
        )

    with self.command_group("ml compute", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.compute#{}"
        custom_compute = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_command("create", "ml_compute_create", supports_no_wait=True)
        g.custom_command("attach", "ml_compute_attach", supports_no_wait=True)
        g.custom_show_command("show", "ml_compute_show")
        g.custom_command("list-nodes", "ml_compute_list_nodes")
        g.custom_command("list", "ml_compute_list", table_transformer=transform_compute)
        g.custom_command("delete", "ml_compute_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("detach", "ml_compute_detach", supports_no_wait=True, confirmation=True)
        g.custom_command("start", "ml_compute_start", supports_no_wait=True)
        g.custom_command("stop", "ml_compute_stop", supports_no_wait=True)
        g.custom_command("restart", "ml_compute_restart", supports_no_wait=True)
        g.custom_command("list-sizes", "ml_compute_list_sizes", table_transformer=transform_vmsize)
        g.custom_command("list-usage", "ml_compute_list_usage", table_transformer=transform_usage)
        g.custom_command("connect-ssh", "ml_compute_connect_ssh", is_preview=True)
        g.generic_update_command(
            "update",
            getter_name="ml_compute_show",
            getter_type=custom_compute,
            setter_name="_ml_compute_update",
            setter_type=custom_compute,
            supports_no_wait=True,
        )
        g.custom_command("enable-sso", "ml_compute_enable_sso", is_preview=True)

    with self.command_group("ml workspace", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.workspace#{}"
        custom_job = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_workspace_show")
        g.custom_command("list", "ml_workspace_list", table_transformer=transform_workspace)
        g.custom_command("list-keys", "ml_workspace_listkeys")
        g.custom_command("sync-keys", "ml_workspace_synckeys", supports_no_wait=True)
        g.custom_command("create", "ml_workspace_create", supports_no_wait=True)
        g.custom_command("delete", "ml_workspace_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("diagnose", "ml_workspace_diagnose", supports_no_wait=True)
        g.custom_command("provision-network", "ml_workspace_provision_network", supports_no_wait=True)
        g.generic_update_command(
            "update",
            getter_name="ml_workspace_show",
            getter_type=custom_job,
            setter_name="ml_workspace_update",
            setter_type=custom_job,
            supports_no_wait=True,
        )

    with self.command_group("ml workspace outbound-rule", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.workspace_outbound_rule#{}"
        custom_job = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_workspace_outbound_rule_show")
        g.custom_command("list", "ml_workspace_outbound_rule_list")
        g.custom_command("set", "ml_workspace_outbound_rule_set", supports_no_wait=True)
        g.custom_command("remove", "ml_workspace_outbound_rule_remove", supports_no_wait=True, confirmation=True)

    with self.command_group("ml registry", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.registry#{}"
        custom_registry = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_registry_show", table_transformer=transform_registry_single)
        g.custom_command("list", "ml_registry_list", table_transformer=transform_registry)
        g.custom_command("create", "ml_registry_create", supports_no_wait=True)
        g.generic_update_command(
            "update",
            getter_name="_ml_registry_show",
            getter_type=custom_registry,
            setter_name="ml_registry_update",
            setter_type=custom_registry,
            supports_no_wait=True,
        )
        g.custom_command("delete", "ml_registry_delete")
        # Commands in workspace group that weren't implemented here:
        # list-keys, sync-keys, diagnose

    with self.command_group("ml connection", client_factory=cf_ml_cl, is_preview=True) as g:
        g.custom_show_command("show", "ml_connection_show")
        g.custom_command("create", "ml_connection_create")
        g.custom_command("list", "ml_connection_list", table_transformer=transform_connection)
        g.custom_command("delete", "ml_connection_delete", confirmation=True)
        custom_tmpl = "azext_mlv2.manual.custom.connection#{}"
        custom_connection = CliCommandType(operations_tmpl=custom_tmpl)
        g.generic_update_command(
            "update",
            getter_name="ml_connection_show",
            getter_type=custom_connection,
            setter_name="_ml_connection_update",
            setter_type=custom_connection,
        )

    with self.command_group("ml datastore", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.datastore#{}"
        custom_job = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_command("delete", "ml_datastore_delete")
        g.custom_command("create", "ml_datastore_create")
        g.custom_show_command("show", "ml_datastore_show")
        g.custom_command("list", "ml_datastore_list", table_transformer=transform_datastore)
        g.custom_command("mount", "ml_datastore_mount", is_preview=True)
        g.generic_update_command(
            "update",
            getter_name="_ml_datastore_show",
            getter_type=custom_job,
            setter_name="ml_datastore_update",
            setter_type=custom_job,
        )

    with self.command_group("ml component", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.component#{}"
        custom_component = CliCommandType(operations_tmpl=custom_tmpl)

        if private_features_enabled():
            g.custom_command("validate", "ml_component_validate")

        g.custom_show_command("show", "ml_component_show")
        g.custom_command("list", "ml_component_list", table_transformer=transform_component)
        g.custom_command("create", "ml_component_create")

        g.generic_update_command(
            "update",
            getter_name="_ml_component_show",
            getter_type=custom_component,
            setter_name="ml_component_update",
            setter_type=custom_component,
        )
        g.custom_command("archive", "ml_component_archive")
        g.custom_command("restore", "ml_component_restore")
        g.custom_command("prepare-for-sign", "ml_component_prepare_for_sign")

    with self.command_group("ml schedule", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.schedule#{}"
        custom_schedule = CliCommandType(operations_tmpl=custom_tmpl)

        g.custom_show_command("show", "ml_schedule_show")
        g.custom_command("list", "ml_schedule_list", table_transformer=transform_schedule)
        g.custom_command("create", "ml_schedule_create", supports_no_wait=True)

        g.generic_update_command(
            "update",
            getter_name="ml_schedule_show",
            getter_type=custom_schedule,
            setter_name="ml_schedule_update",
            setter_type=custom_schedule,
            supports_no_wait=True,
        )
        g.custom_command("disable", "ml_schedule_disable", supports_no_wait=True)
        g.custom_command("enable", "ml_schedule_enable", supports_no_wait=True)
        g.custom_command("delete", "ml_schedule_delete", supports_no_wait=True)
        g.custom_command("trigger", "ml_schedule_trigger")

    if private_features_enabled():
        with self.command_group("ml virtualcluster", client_factory=cf_ml_cl, is_preview=True) as g:
            custom_tmpl = "azext_mlv2.manual.custom.virtualcluster#{}"

            g.custom_show_command("show", "ml_virtual_cluster_show")
            g.custom_command("list", "ml_virtual_cluster_list", table_transformer=transform_virtual_cluster)

    with self.command_group("ml feature-store", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.feature_store#{}"
        custom_feature_store = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_feature_store_show")
        g.custom_command("list", "ml_feature_store_list", table_transformer=transform_feature_store)
        g.custom_command("create", "ml_feature_store_create", supports_no_wait=True)
        g.custom_command("delete", "ml_feature_store_delete", supports_no_wait=True, confirmation=True)
        g.custom_command("provision-network", "ml_feature_store_provision_network", supports_no_wait=True)
        g.generic_update_command(
            "update",
            getter_name="ml_feature_store_show",
            getter_type=custom_feature_store,
            setter_name="ml_feature_store_update",
            setter_type=custom_feature_store,
            supports_no_wait=True,
        )

    with self.command_group("ml feature-store-entity", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.feature_store_entity#{}"
        custom_feature_store_entity = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_feature_store_entity_show")
        g.custom_command("list", "ml_feature_store_entity_list", table_transformer=transform_feature_store_entity)
        g.custom_command("create", "ml_feature_store_entity_create", supports_no_wait=True)
        g.custom_command("archive", "ml_feature_store_entity_archive", confirmation=True)
        g.custom_command("restore", "ml_feature_store_entity_restore", confirmation=True)
        g.generic_update_command(
            "update",
            getter_name="_ml_feature_store_entity_show",
            getter_type=custom_feature_store_entity,
            setter_name="_ml_feature_store_entity_update",
            setter_type=custom_feature_store_entity,
            supports_no_wait=True,
        )

    with self.command_group("ml feature-set", client_factory=cf_ml_cl) as g:
        custom_tmpl = "azext_mlv2.manual.custom.feature_set#{}"
        custom_feature_set = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_feature_set_show")
        g.custom_command("list", "ml_feature_set_list", table_transformer=transform_feature_set)
        g.custom_command("create", "ml_feature_set_create", supports_no_wait=True)
        g.custom_command("list-features", "ml_feature_set_list_features", table_transformer=transform_feature)
        g.custom_command(
            "get-feature",
            "ml_feature_set_show_feature",
            deprecate_info=g.deprecate(redirect="ml feature-set show-feature"),
        )
        g.custom_command("show-feature", "ml_feature_set_show_feature")
        g.custom_command("backfill", "ml_feature_set_backfill")
        g.custom_command("list-materialization-operation", "ml_feature_set_list_materialization_operation")
        g.custom_command("archive", "ml_feature_set_archive", confirmation=True)
        g.custom_command("restore", "ml_feature_set_restore", confirmation=True)
        g.generic_update_command(
            "update",
            getter_name="_ml_feature_set_show",
            getter_type=custom_feature_set,
            setter_name="ml_feature_set_update",
            setter_type=custom_feature_set,
            supports_no_wait=True,
        )

    with self.command_group("ml serverless-endpoint", client_factory=cf_ml_cl, is_preview=True) as g:
        custom_tmpl = "azext_mlv2.manual.custom.serverless_endpoint#{}"
        cutom_serverless_endpoint = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_serverless_endpoint_show")
        g.custom_command("list", "ml_serverless_endpoint_list")
        g.custom_command("get-credentials", "ml_serverless_endpoint_get_credentials")
        g.custom_command("create", "ml_serverless_endpoint_create", supports_no_wait=True)
        g.custom_command("delete", "ml_serverless_endpoint_delete", supports_no_wait=True)
        g.custom_command("regenerate-keys", "ml_serverless_endpoint_regenerate_keys", supports_no_wait=True)
        g.generic_update_command(
            "update",
            getter_name="ml_serverless_endpoint_show",
            getter_type=cutom_serverless_endpoint,
            setter_name="_ml_serverless_endpoint_update",
            setter_type=cutom_serverless_endpoint,
            supports_no_wait=True,
        )

    with self.command_group("ml capability-host", client_factory=cf_ml_cl, is_preview=True) as g:
        g.custom_show_command("show", "ml_capability_host_show")
        g.custom_command("create", "ml_capability_host_create", supports_no_wait=True)
        g.custom_command("delete", "ml_capability_host_delete", supports_no_wait=True)

    with self.command_group("ml marketplace-subscription", client_factory=cf_ml_cl, is_preview=True) as g:
        custom_tmpl = "azext_mlv2.manual.custom.marketplace_subscription#{}"
        custom_feature_set = CliCommandType(operations_tmpl=custom_tmpl)
        g.custom_show_command("show", "ml_marketplace_subscription_show")
        g.custom_command("list", "ml_marketplace_subscription_list")
        g.custom_command("create", "ml_marketplace_subscription_create", supports_no_wait=True)
        g.custom_command("delete", "ml_marketplace_subscription_delete", supports_no_wait=True)

    with self.command_group("ml index", client_factory=cf_ml_cl, is_preview=True) as g:
        g.custom_show_command("show", "ml_index_show")
        g.custom_command("list", "ml_index_list")
        g.custom_command("create", "ml_index_create")

    with self.command_group("ml azure-openai-deployment", client_factory=cf_ml_cl, is_preview=True) as g:
        g.custom_command("list", "ml_azure_openai_deployment_list")
