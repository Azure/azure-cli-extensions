# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from knack.help_files import helps

from ..custom.utils import private_features_enabled


def get_job_help():
    helps[
        "ml job"
    ] = """
        type: group
        short-summary: Manage Azure ML jobs.
        long-summary: >
            An Azure ML job executes a task against a specified compute target. You can configure jobs
            to scale out model training on Azure. Azure ML supports different job types with different
            capabilities. For example, the most basic job, a command job, executes a command in a Docker
            container and can be leveraged for single-node and distributed training. A sweep job executes
            a hyperparameter sweep over a specified search space for tuning a model's hyperparameters.


            Jobs also enable systematic tracking for your ML experimentation and workflows. Once a job is
            created, Azure ML maintains a run record for the job that includes the metadata, any metrics,
            logs, and artifacts generated during the job, code that was executed, and the Azure ML
            environment used. All of your jobs' run records can be viewed in Azure ML studio.
    """
    helps[
        "ml job connect-ssh"
    ] = """
        type: command
        short-summary: Set up ssh connection and sends the request to the SSH service running inside user's container through Tundra.
        examples:
        - name: Set up ssh connection and sends the request to the SSH service.
          text: az ml job connect-ssh --name my-job-id --node-index 0 --private-key-file-path "C:/Temp/.ssh/id_rsa" --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job create"
    ] = """
        type: command
        short-summary: Create a job.
        long-summary: >
            To create a job, you will typically need to configure any code to be run, an environment
            encapsulating the dependencies, a compute target to execute the job on, and any additional
            job-specific settings. When a job is created, it is submitted for execution against the
            specified compute resource.
        examples:
        - name: Create a job from a YAML specification file
          text: az ml job create --file job.yml --resource-group my-resource-group --workspace-name my-workspace
        - name: Create a job from a YAML specification file and open the job's run details in the Azure ML studio portal
          text: az ml job create --file job.yml --web --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job list"
    ] = """
        type: command
        short-summary: List jobs in a workspace.
        examples:
        - name: List all the jobs status in a workspace using --query argument to execute a JMESPath query on the results of commands.
          text: az ml job list --query \"[].{Name:name,Jobstatus:status}\"  --output table --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job show"
    ] = """
        type: command
        short-summary: Show details for a job.
        examples:
        - name: Show the status of a job using --query argument to execute a JMESPath query on the results of commands.
          text: az ml job show --name my-job-id --query "{Name:name,Jobstatus:status}"  --output table --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job show-services"
    ] = """
        type: command
        short-summary: Show services of a job per node.
        examples:
        - name: Show the services of a job per node using --query argument to execute a JMESPath query on the results of commands.
          text: az ml job show-services --name my-job-id --node-index 0 --query "{Name:name,Jobstatus:status}"  --output table --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job download"
    ] = """
        type: command
        short-summary: Download all job-related files.
        long-summary: The files will be downloaded in a folder named after the job's name.
        examples:
        - name: Download a job's logs and outputs to the current working directory
          text: az ml job download --name my-job --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml job stream"
    ] = """
        type: command
        short-summary: Stream job logs to the console.
    """
    helps[
        "ml job update"
    ] = """
        type: command
        short-summary: Update a job.
        long-summary: >
            Only the 'tags' and 'properties' properties can be updated.
    """
    if private_features_enabled():
        helps[
            "ml job cancel"
        ] = """
        type: command
        short-summary: Cancel a job by name or multiple jobs by tag name.
        examples:
        - name: Cancel a job by name
          text: az ml job cancel --name my-job-id --resource-group my-resource-group --workspace-name my-workspace
        - name: Cancel multiple jobs by tag name
          text: az ml job cancel --name "" --tag my-tag-name --resource-group my-resource-group --workspace-name my-workspace
        """

    if not private_features_enabled():
        helps[
            "ml job cancel"
        ] = """
        type: command
        short-summary: Cancel a job.
        examples:
        - name: Cancel a job by name
          text: az ml job cancel --name my-job-id --resource-group my-resource-group --workspace-name my-workspace
        """
    helps[
        "ml job archive"
    ] = """
        type: command
        short-summary: Archive a job.
        long-summary: >
            Archiving a job will hide it by default from list queries (`az ml job list`). You
            can still continue to reference and use an archived job in your workflows. Only completed jobs can be archived.
    """
    helps[
        "ml job restore"
    ] = """
        type: command
        short-summary: Restore an archived job.
        long-summary: >
            When an archived job is restored, it will no longer be hidden from list queries (`az ml job list`).
    """

    helps[
        "ml job validate"
    ] = """
        type: command
        short-summary: Validate a job. This command works for pipeline jobs only for now.
        long-summary: >
            This command will validate a YAML specification file to check if it is valid for job
            creation, and return all issues that were found. Validation mainly includes local
            checking for schema, like missing fields, environment without version specified,
            code referred to an non-existent local path; it will also check for the existence of
            referenced compute targets in the target workspace.
            Validation result will be printed to the console, including both errors and warnings.
            Only errors will cause the validation to fail.
            A job passed validation will be able to be submitted.
            This command works for pipeline jobs only for now.
        examples:
        - name: Validate a YAML specification file to check if it is valid for job creation.
          text: az ml job validate --file job.yml --resource-group my-resource-group --workspace-name my-workspace
    """
