# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from knack.help_files import helps


def get_data_help():
    helps[
        "ml data"
    ] = """
        type: group
        short-summary: Manage Azure ML data assets.
        long-summary: >
            Azure ML data assets are references to file(s) in your storage services or public
            URLs along with any corresponding metadata. They are not copies of your data.
            You can use these data assets to access relevant data during model training and
            mount or download the referenced data to your compute target.
    """
    helps[
        "ml data list"
    ] = """
        type: command
        short-summary: List data assets in a workspace/registry. If you are using a registry, replace `--workspace-name my-workspace` with the `--registry-name <registry-name>` option.
        examples:
        - name: List all the data assets in a workspace
          text: az ml data list --resource-group my-resource-group --workspace-name my-workspace
        - name: List all the data asset versions for the specified name in a workspace
          text: az ml data list --name my-data --resource-group my-resource-group --workspace-name my-workspace
        - name: List all the data assets in a workspace using --query argument to execute a JMESPath query on the results of commands.
          text: az ml data list --query \"[].{Name:name}\" --output table --resource-group my-resource-group --workspace-name my-workspace
        - name: List all the data assets in a registry
          text: az ml data list --registry-name my-registry-name
        - name: List all the data asset versions for the specified name in a registry
          text: az ml data list --name my-data --registry-name my-registry-name
    """
    helps[
        "ml data show"
    ] = """
        type: command
        short-summary: Shows details for a data asset in a workspace/registry. If you are using a registry, replace `--workspace-name my-workspace` with the `--registry-name <registry-name>` option.
        examples:
        - name: Show details for a data asset with the specified name and version in a workspace
          text: az ml data show --name my-data --version 1 --resource-group my-resource-group --workspace-name my-workspace
        - name: Show details for a data asset with the specified name and label
          text: az ml data show --name my-data --label latest --resource-group my-resource-group --workspace-name my-workspace
        - name: Show details for a data asset with the specified name and version in a registry
          text: az ml data show --name my-data --version 1 --registry-name my-registry-name
    """
    helps[
        "ml data create"
    ] = """
        type: command
        short-summary: Create a data asset in a workspace/registry. If you are using a registry, replace `--workspace-name my-workspace` with the `--registry-name <registry-name>` option.
        long-summary: >
            Data assets can be defined from files on your local machine or as references to
            files in cloud storage. The created data asset will be tracked in the workspace/registry
            under the specified name and version.


            To create a data asset from file(s) on your local machine, specify the 'path'
            field in your YAML config. Azure ML will upload these file(s) to the blob container
            that backs the workspace's default datastore (named 'workspaceblobstore'). The created
            data asset will then point to that uploaded data.


            To create a data asset that references file(s) in cloud storage, specify the 'path' to the file(s)
            in storage in your YAML config.


            You can also create a data asset directly from a storage URL or public URL. To do
            so, specify the URL to the 'path' field in your YAML config.

            If you are using a registry, replace `--workspace-name my-workspace` with the `--registry-name <my-registry-name>` option.
        examples:
        - name: Create a data asset from a YAML specification file in a workspace
          text: az ml data create --file data.yml --resource-group my-resource-group --workspace-name my-workspace
        - name: Create a data asset from a YAML specification file in a registry
          text: az ml data create --file data.yml --registry-name my-registry-name
        - name: Create a data asset without using a YAML specification file in a workspace
          text: az ml data create --name my-data --version 1 --path ./my-data.csv --resource-group my-resource-group --workspace-name my-workspace
        - name: Create a data asset without using a YAML specification file in a registry
          text: az ml data create --name my-data --version 1 --path ./my-data.csv --registry-name my-registry-name
    """
    helps[
        "ml data import"
    ] = """
        type: command
        short-summary: Import data and create a data asset.
        long-summary: >
            Data asset can be created by first importing data from database or filesystem
            to cloud storage. The created data asset will be tracked in the workspace under
            the specified name and version.


            Specify 'query' of database table or 'path' on filesystem fields in your YAML config.
            Azure ML will run a job to copy the data to cloud storage first .
        examples:
        - name: Import a data asset from a YAML specification file
          text: az ml data import --file dataimport.yml --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml data list-materialization-status"
    ] = """
        type: command
        short-summary: Show status of list of data import materialization jobs that create versions of a data asset.
        long-summary: >
            Show status of list of data import materialization jobs that create versions of a data asset.
        examples:
        - name: Show materialization status of a data asset from a YAML specification file
          text: az ml data list-materialization-status --name asset-name --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml data archive"
    ] = """
        type: command
        short-summary: Archive a data asset.
        long-summary: >
            Archiving a data asset will hide it by default from list queries (`az ml data list`). You
            can still continue to reference and use an archived data asset in your workflows.
            You can archive either a data asset container or a specific data asset version. Archiving a
            data asset container will archive all versions of the data asset under that given name.
            You can restore an archived data asset using `az ml data restore`. If the entire
            data asset container is archived, you cannot restore individual versions of the data asset -
            you will need to restore the data asset container.
        examples:
        - name: Archive an data asset container (archives all versions of that data asset)
          text: az ml data archive --name my-env --resource-group my-resource-group --workspace-name my-workspace
        - name: Archive a specific data asset version
          text: az ml data archive --name my-env --version 1 --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml data restore"
    ] = """
        type: command
        short-summary: Restore an archived data asset.
        long-summary: >
            When an archived data asset is restored, it will no longer be hidden from list queries (`az ml
            data list`).
            If an entire data asset container is archived, you can restore that archived container. This
            will restore all versions of the data asset under that given name. You cannot restore only a
            specific data asset version if the entire data asset container is archived - you will need to
            restore the entire container. If only an individual data asset version was archived, you can
            restore that specific version.
        examples:
        - name: Restore an archived data asset container (restores all versions of that data asset)
          text: az ml data restore --name my-env --resource-group my-resource-group --workspace-name my-workspace
        - name: Restore a specific archived data asset version
          text: az ml data restore --name my-env --version 1 --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml data update"
    ] = """
        type: command
        short-summary: Update a data asset.
        long-summary: >
            Only the 'description' and 'tags' properties can be updated.
    """

    helps[
        "ml data share"
    ] = """
        type: command
        short-summary: Share a specific data asset from workspace to registry.
        long-summary: >
            Copy an existing data asset from a workspace to a registry for cross-workspace reuse.
        examples:
        - name: Share an existing data asset from workspace to registry
          text: az ml data share --name my-data --version my-version --resource-group my-resource-group --workspace-name my-workspace --share-with-name new-name-in-registry --share-with-version new-version-in-registry --registry-name my-registry
    """

    helps[
        "ml data mount"
    ] = """
        type: command
        short-summary: Mount a specific data asset to a local path. For now only Linux is supported.
        examples:
        - name: Mount a data asset version with Named Asset URI
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path azureml:my_urifolder:1
        - name: Mount a data asset version with AzureML full URI
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path azureml://subscriptions/my-sub-id/resourcegroups/my-rg/workspaces/myworkspace/data/some_data/versions/5
        - name: Mount all versions of a data asset with Named Asset URI
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path azureml:my_urifolder
        - name: Mount all versions of a data asset with AzureML full URI
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path azureml://subscriptions/my-sub-id/resourcegroups/my-rg/workspaces/myworkspace/data/some_data
        - name: Mount data on public HTTP(s) server by URL
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv
        - name: Mount data on Azure by Azure Blob Storage URL
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path https://<account_name>.blob.core.windows.net/<container_name>/<path>
        - name: Mount data on Azure by Azure Data Lake Storage Gen 2 URL
          text: >
            az ml data mount --mount-point /mnt/my-data --mode ro_mount --path abfss://<file_system>@<account_name>.dfs.core.windows.net/<path>
    """
