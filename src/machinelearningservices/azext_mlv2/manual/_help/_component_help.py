# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from knack.help_files import helps

from ..custom.utils import private_features_enabled


def get_component_help():
    helps[
        "ml component"
    ] = """
          type: group
          short-summary: Manage Azure ML components.
          long-summary: >
              Azure ML component defines the configuration of component for pipeline jobs. You can configure
              the input/output ports, execution environment and command of component. After the component
              are created, you can reference the components in the pipeline job to execute them in docker containers.
      """
    helps[
        "ml component show"
    ] = """
          type: command
          short-summary: Show details for a component.
          examples:
          - name: Show detail for a component with the specified name and version
            text: az ml component show --name my-component --version 1 --resource-group my-resource-group --workspace-name my-workspace
          - name: Show detail for a component in registry with the specified name and version
            text: az ml component show --name my-component --version 1 --registry-name my-registry-name --resource-group my-resource-group
      """
    helps[
        "ml component list"
    ] = """
          type: command
          short-summary: List components in a workspace.
          examples:
          - name: List all the components in a workspace
            text: az ml component list --resource-group my-resource-group --workspace-name my-workspace
          - name: List all the component versions for the specified name in a workspace
            text: az ml component list --name my-component --resource-group my-resource-group --workspace-name my-workspace
          - name: List all the components in a workspace using --query argument to execute a JMESPath query on the results of commands.
            text: az ml component list --query \"[].{Name:name}\"  --output table --resource-group my-resource-group --workspace-name my-workspace
          - name: List all the components in a registry
            text: az ml component list --registry-name my-registry-name --resource-group my-resource-group
          - name: List all the component versions for the specified name in a registry
            text: az ml component list --name my-component --registry-name my-registry-name --resource-group my-resource-group
          - name: List all the components in a registry using --query argument to execute a JMESPath query on the results of commands.
            text: az ml component list --query \"[].{Name:name}\"  --output table --registry-name my-registry-name --resource-group my-resource-group
      """
    helps[
        "ml component create"
    ] = """
          type: command
          short-summary: Create a component.
          examples:
          - name: Create a component from a YAML specification file
            text: az ml component create --file my_component.yml --resource-group my-resource-group --workspace-name my-workspace
          - name: Create a component from a YAML specification file with specified version
            text: az ml component create --file my_component.yml --version 1 --resource-group my-resource-group --workspace-name my-workspace
          - name: Create a component in registry from a YAML specification file
            text: az ml component create --file my_component.yml --registry-name my-registry-name --resource-group my-resource-group
          - name: Create a component in registry from a YAML specification file with specified version
            text: az ml component create --file my_component.yml --version 1 --registry-name my-registry-name --resource-group my-resource-group
      """
    helps[
        "ml component update"
    ] = """
          type: command
          short-summary: Update a component. Currently only a few fields(description, display_name) support update.
          examples:
          - name: Update a component's description
            text: az ml component update -n my_component -v 1 --set description="new description" -g my-resource-group -w my-workspace
      """
    helps[
        "ml component archive"
    ] = """
        type: command
        short-summary: Archive a component.
        long-summary: >
            Archiving a component will hide it by default from list queries (`az ml component list`). You
            can still continue to reference and use an archived component in your pipelines.
            You can archive either a component container or a specific component version. Archiving a
            component container will archive all versions of the component under that given name.
            You can restore an archived component using `az ml component restore`. If the entire
            component container is archived, you cannot restore individual versions of the component -
            you will need to restore the component container.
        examples:
        - name: Archive a component container (archives all versions of that component)
          text: az ml component archive --name my-component --resource-group my-resource-group --workspace-name my-workspace
        - name: Archive a specific component version
          text: az ml component archive --name my-component --version 1 --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml component restore"
    ] = """
        type: command
        short-summary: Restore an archived component.
        long-summary: >
            When an archived component is restored, it will no longer be hidden from list queries (`az ml component list`).
            If an entire component container is archived, you can restore that archived container. This
            will restore all versions of the component under that given name. You cannot restore only a
            specific component version if the entire component container is archived - you will need to
            restore the entire container. If only an individual component version was archived, you can
            restore that specific version.
        examples:
        - name: Restore an archived component container (restores all versions of that component)
          text: az ml component restore --name my-component --resource-group my-resource-group --workspace-name my-workspace
        - name: Restore a specific archived component version
          text: az ml component restore --name my-component --version 1 --resource-group my-resource-group --workspace-name my-workspace
    """
    helps[
        "ml component prepare-for-sign"
    ] = """
          type: command
          short-summary: Prepare a component for signing.
          long-summary: >
            Preparing a component for sign generates 2 files: catalog.json and catalog.json.sig, these files contain the SHA256 generated for each
            file that is present in the target folder. If the files are already present, they will be deleted and new files will be created with updated signature.
          examples:
          - name: Prepare a component from a YAML specification file for signing
            text: az ml component prepare-for-sign --file my_component.yml --resource-group my-resource-group --workspace-name my-workspace
          - name: Prepare a component in registry from a YAML specification file for signing
            text: az ml component prepare-for-sign --file my_component.yml --registry-name my-registry-name --resource-group my-resource-group
      """

    if private_features_enabled():
        helps[
            "ml component validate"
        ] = """
        type: command
        short-summary: Validate a component.
        long-summary: >
            This command will validate a component, and return all issues that were found.
            Validation includes checking for schema, like missing fields, environment without version specified,
            code referred to an non-existent local path. It also checks for the existence of dependencies.
            A component passed validation will be able to be submitted.
            There won't be resources created or modified by this command.
        examples:
        - name: Validate a component from a YAML specification file, including check resource dependencies in current workspace
          text: az ml component validate --file my_component.yml --resource-group my-resource-group --workspace-name my-workspace
"""
