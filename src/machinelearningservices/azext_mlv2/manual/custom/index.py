# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import io
from itertools import islice

from azure.ai.ml.entities._load_functions import load_index

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_ml_client


def ml_index_create(
    cmd,
    resource_group_name=None,
    workspace_name=None,
    name=None,
    version=None,
    file=None,
    path=None,
    description=None,
    tags=None,
    stage=None,
    registry_name=None,
    params_override=None,
    datastore=None,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        registry_name=registry_name,
    )
    params_override = params_override or []

    if name:
        params_override.append({"name": name})
    if version:
        params_override.append({"version": version})
    if path:
        params_override.append({"path": path})
    if description:
        params_override.append({"description": description})
    if tags:
        params_override.append({"tags": tags})
    if stage:
        params_override.append({"stage": stage})
    if datastore:
        params_override.append({"datastore": datastore})

    try:
        index = ml_client.indexes.create_or_update(
            load_index(source=file or io.StringIO("{}"), params_override=params_override)
        )
        return _dump_entity_with_warnings(index)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug, yaml_operation=bool(file))


def ml_index_list(
    cmd,
    resource_group_name=None,
    workspace_name=None,
    name=None,
    max_results=None,
    registry_name=None,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        registry_name=registry_name,
    )

    try:
        results = ml_client.indexes.list(name=name)

        if max_results:
            results = islice(results, int(max_results))

        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_index_show(
    cmd, name, workspace_name=None, resource_group_name=None, registry_name=None, version=None, label=None
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        registry_name=registry_name,
    )

    try:
        return _dump_entity_with_warnings(ml_client.indexes.get(name=name, version=version, label=label))
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)
