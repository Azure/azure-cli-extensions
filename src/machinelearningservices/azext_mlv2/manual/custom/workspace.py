# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from itertools import islice
from typing import Dict

from knack.log import get_logger

from azure.ai.ml._version import VERSION  # pylint: disable=no-name-in-module,import-error
from azure.ai.ml.constants._common import Scope  # pylint: disable=no-name-in-module, import-error
from azure.ai.ml.entities._load_functions import load_workspace  # pylint: disable=no-name-in-module, import-error
from azure.cli.core.commands import LongRunningOperation

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_ml_client

module_logger = get_logger()


def ml_workspace_list(cmd, resource_group_name=None, max_results=None, filtered_kinds=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)
    scope = Scope.RESOURCE_GROUP if resource_group_name else Scope.SUBSCRIPTION

    try:
        if max_results:
            results = islice(ml_client.workspaces.list(scope=scope), int(max_results), filtered_kinds=filtered_kinds)
        else:
            results = ml_client.workspaces.list(scope=scope, filtered_kinds=filtered_kinds)
        return list(map(lambda x: _dump_entity_with_warnings(x), results))  # pylint: disable=unnecessary-lambda
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_show(cmd, resource_group_name, name):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        ws = ml_client.workspaces.get(name)
        return _dump_entity_with_warnings(ws)
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_listkeys(cmd, resource_group_name, name):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        return ml_client.workspaces.get_keys(name)
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_synckeys(cmd, resource_group_name, name, no_wait=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        synckeys_result = ml_client.workspaces.begin_sync_keys(name)
        if not no_wait:
            synckeys_result = LongRunningOperation(cmd.cli_ctx)(synckeys_result)
        return synckeys_result
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_provision_network(cmd, resource_group_name, name, include_spark=False, no_wait=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        provision_network_result = ml_client.workspaces.begin_provision_network(
            workspace_name=name, include_spark=include_spark
        )
        if not no_wait:
            provision_network_result = LongRunningOperation(cmd.cli_ctx)(provision_network_result)
        return provision_network_result
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


# pylint: disable=too-many-locals, too-many-branches, too-many-statements
def ml_workspace_create(
    cmd,
    resource_group_name,
    name=None,
    display_name=None,
    description=None,
    tags=None,
    image_build_compute=None,
    public_network_access=None,
    storage_account=None,
    key_vault=None,
    application_insights=None,
    container_registry=None,
    params_override=None,
    file=None,
    no_wait=False,
    location=None,
    update_dependent_resources=False,
    primary_user_assigned_identity=None,
    managed_network=None,
    provision_network_now=False,
    enable_data_isolation=False,
    # sub-class fields
    hub_id=None,
    default_resource_group=None,
    kind=None,
    system_datastores_auth_mode=None,
    allow_roleassignment_on_rg=True,
):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if display_name:
        params_override.append({"display_name": display_name})
    if description:
        params_override.append({"description": description})
    if tags is None:
        tags = {}
    # add tag in the workspace to indicate which cli version the workspace is created from
    if tags.get("createdByToolkit") is None:
        tags["createdByToolkit"] = f"cli-v2-{VERSION}"
    params_override.append({"tags": tags})
    if location:
        params_override.append({"location": location})
    if image_build_compute:
        params_override.append({"image_build_compute": image_build_compute})
    if public_network_access is not None:
        params_override.append({"public_network_access": public_network_access})
    if storage_account:
        params_override.append({"storage_account": storage_account})
    if key_vault:
        params_override.append({"key_vault": key_vault})
    if application_insights:
        params_override.append({"application_insights": application_insights})
    if container_registry:
        params_override.append({"container_registry": container_registry})
    if primary_user_assigned_identity:
        params_override.append({"primary_user_assigned_identity": primary_user_assigned_identity})
    if managed_network:
        if managed_network not in ["disabled", "allow_internet_outbound", "allow_only_approved_outbound"]:
            log_and_raise_error(
                "allowed values for managed-network are disabled, allow_internet_outbound, allow_only_approved_outbound"
            )
        params_override.append({"managed_network": {"isolation_mode": managed_network}})
    if provision_network_now is not None:
        params_override.append({"provision_network_now": provision_network_now})
    if enable_data_isolation:
        params_override.append({"enable_data_isolation": enable_data_isolation})
    if hub_id:
        params_override.append({"hub_id": hub_id})
    if default_resource_group:
        params_override.append({"default_resource_group": default_resource_group})
    if kind:
        params_override.append({"kind": kind})
    if system_datastores_auth_mode:
        params_override.append({"system_datastores_auth_mode": system_datastores_auth_mode})
    if not allow_roleassignment_on_rg:
        params_override.append({"allow_roleassignment_on_rg": allow_roleassignment_on_rg})

    try:
        workspace = load_workspace(source=file, params_override=params_override)
        ws = ml_client.workspaces.begin_create(
            workspace=workspace, update_dependent_resources=update_dependent_resources
        )
        if not no_wait:  # pylint: disable=unnecessary-lambda
            ws = LongRunningOperation(cmd.cli_ctx)(ws)
            return _dump_entity_with_warnings(ws)
        # pylint: disable=logging-fstring-interpolation
        module_logger.warning(
            f"Workspace create request initiated. Status can be checked using `az ml workspace show -n {workspace.name}`"  # pylint: disable=line-too-long
        )
        return ws
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_update(
    cmd,
    resource_group_name,
    name,
    display_name=None,
    image_build_compute=None,
    public_network_access=None,
    description=None,
    application_insights=None,
    container_registry=None,
    parameters: Dict = None,
    file=None,
    no_wait=False,
    update_dependent_resources=False,
    primary_user_assigned_identity=None,
    managed_network=None,
    system_datastores_auth_mode=None,
    allow_roleassignment_on_rg=None,
    network_acls=None,
):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    tags = parameters.pop("tags", {})
    params_override = []
    if name:
        params_override.append({"name": name})
    if display_name:
        params_override.append({"display_name": display_name})
    if image_build_compute:
        params_override.append({"image_build_compute": image_build_compute})
    if public_network_access is not None:
        params_override.append({"public_network_access": public_network_access})
    if description:
        params_override.append({"description": description})
    if application_insights:
        params_override.append({"application_insights": application_insights})
    if container_registry:
        params_override.append({"container_registry": container_registry})
    if primary_user_assigned_identity:
        params_override.append({"primary_user_assigned_identity": primary_user_assigned_identity})
    if managed_network:
        if managed_network not in ["disabled", "allow_internet_outbound", "allow_only_approved_outbound"]:
            log_and_raise_error(
                "allowed values for managed-network are disabled, allow_internet_outbound, allow_only_approved_outbound"
            )
        params_override.append({"managed_network": {"isolation_mode": managed_network}})
    if system_datastores_auth_mode:
        params_override.append({"system_datastores_auth_mode": system_datastores_auth_mode})
    if allow_roleassignment_on_rg is not None:
        params_override.append({"allow_roleassignment_on_rg": allow_roleassignment_on_rg})
    if isinstance(network_acls, str):
        network_acls = network_acls.strip()
        if network_acls and network_acls.lower() != "none":
            ip_allowlist = network_acls.split(",")
            network_acls = {
                "default_action": "Deny",
                "ip_rules": [{"value": ip} for ip in ip_allowlist]
            }
        elif (network_acls.lower() == "none"):
            # Reset network_acls if an empty string with spaces is passed
            network_acls = {
                "default_action": "Allow",
                "ip_rules": []
            }
        else:
            log_and_raise_error(
                "Invalid value for network_acls. Please provide a comma-separated list of IPs/IP ranges "
                "in CIDR notation or None."
            )
        params_override.append({"network_acls": network_acls})

    workspace = load_workspace(file, params_override=params_override)
    if workspace.tags:
        workspace.tags.update(tags)
    else:
        workspace.tags = tags
    try:
        ws = ml_client.workspaces.begin_update(workspace, update_dependent_resources=update_dependent_resources)
        if not no_wait:
            ws = LongRunningOperation(cmd.cli_ctx)(ws)
            return _dump_entity_with_warnings(ws)
        # pylint: disable=logging-fstring-interpolation
        module_logger.warning(
            f"Workspace update request initiated. Status can be checked using `az ml workspace show -n {workspace.name}`"  # pylint: disable=line-too-long
        )
        return ws
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_delete(cmd, resource_group_name, name, all_resources=False, no_wait=False, permanently_delete=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        del_result = ml_client.workspaces.begin_delete(
            name=name, delete_dependent_resources=all_resources, permanently_delete=permanently_delete
        )
        if not no_wait:
            del_result = LongRunningOperation(cmd.cli_ctx)(del_result)
        return del_result
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)


def ml_workspace_diagnose(cmd, resource_group_name, name, no_wait=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        diagnose_result = ml_client.workspaces.begin_diagnose(name=name)
        if not no_wait:
            diagnose_result = LongRunningOperation(cmd.cli_ctx)(diagnose_result)
        return diagnose_result
    except Exception as err:  # pylint: disable=broad-except
        log_and_raise_error(err, debug)
