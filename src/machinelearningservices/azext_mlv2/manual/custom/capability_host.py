# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import logging
from azure.ai.ml.entities._load_functions import load_capability_host
from azure.ai.ml.entities._workspace._ai_workspaces.capability_host import (
    CapabilityHost,
)
from azure.cli.core.commands import LongRunningOperation
from azext_mlv2.manual.custom.utils import _dump_entity_with_warnings

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_ml_client, wrap_lro

module_logger = logging.getLogger(__name__)
module_logger.propagate = 0


def ml_capability_host_show(cmd, name, resource_group_name, workspace_name):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
    )

    try:
        capability_host = ml_client.capability_hosts.get(name=name)
        return _dump_entity_with_warnings(capability_host)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_capability_host_create(
    cmd,
    resource_group_name,
    workspace_name,
    name=None,
    description=None,
    capability_host_kind: str = 'Agents',
    vector_store_connections=None,
    storage_connections=None,
    ai_services_connections=None,
    file=None,
    no_wait=False,
    params_override=None,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
    )
    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if description:
        params_override.append({"description": description})
    if vector_store_connections:
        params_override.append({"vector_store_connections": vector_store_connections})
    if storage_connections:
        params_override.append({"storage_connections": storage_connections})
    if ai_services_connections:
        params_override.append({"ai_services_connections": ai_services_connections})
    if capability_host_kind:
        params_override.append({"capability_host_kind": capability_host_kind})
    try:
        capability_host = load_capability_host(
            source=file, params_override=params_override
        )
        result = ml_client.capability_hosts.begin_create_or_update(capability_host)

        if no_wait:
            module_logger.warning(
                "Capability host create request initiated. "
                "Status can be checked using `az ml capability-host show -n %s`",
                capability_host.name,
            )
        else:
            capability_host = LongRunningOperation(cmd.cli_ctx)(result)
        if isinstance(capability_host, CapabilityHost):
            return _dump_entity_with_warnings(capability_host)

    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)


def ml_capability_host_delete(
    cmd,
    name,
    resource_group_name,
    workspace_name,
    no_wait=False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
    )

    try:
        delete_result = ml_client.capability_hosts.begin_delete(name=name)
        if not no_wait:
            delete_result = wrap_lro(cmd.cli_ctx, delete_result)
        return _dump_entity_with_warnings(delete_result)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)
