# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import logging
from typing import Dict

from azure.ai.ml.constants._endpoint import EndpointGetLogsFields
from azure.ai.ml.entities._assets._artifacts.model import Model
from azure.ai.ml.entities._assets.environment import Environment
from azure.ai.ml.entities._deployment.online_deployment import OnlineDeployment
from azure.ai.ml.entities._load_functions import load_online_deployment
from azure.ai.ml.constants._common import REGISTRY_URI_FORMAT
from azure.ai.ml.exceptions import ErrorCategory, ErrorTarget, UserErrorException, ValidationException

from ._telemetry._util import (
    _set_asset_reference_type,
    _set_code_reference_type,
    _set_egress_public_network_access,
    _set_instance_type,
)
from ._telemetry.structure import OnlineDeploymentInfo
from .raise_error import log_and_raise_error
from .utils import (
    _dump_entity_with_warnings,
    get_ml_client,
    is_not_found_error,
    open_online_endpoint_in_browser,
    telemetry_log_info,
    wrap_lro,
    private_features_enabled,
)

module_logger = logging.getLogger(__name__)
module_logger.propagate = 0


def ml_online_deployment_create(
    cmd,
    resource_group_name,
    workspace_name,
    file,
    endpoint_name=None,
    name=None,
    local=False,
    local_enable_gpu=False,
    vscode_debug=False,
    no_wait=False,
    all_traffic=False,
    params_override=None,
    web: bool = False,
    skip_script_validation: bool = False,
    package_model: bool = False,
    **kwargs,  # pylint: disable=unused-argument
):
    params_override = params_override or []
    online_deployment_info = OnlineDeploymentInfo()
    try:
        if local and no_wait:
            msg = '"no_wait" and "local" options are mutually exclusive. Set only one option and try again.'
            raise UserErrorException(
                message=msg,
                no_personal_data_message=msg,
                target=ErrorTarget.ONLINE_DEPLOYMENT,
                error_category=ErrorCategory.USER_ERROR,
            )
        if name:
            params_override.append({"name": name})
        if endpoint_name:
            params_override.append({"endpoint_name": endpoint_name})
        deployment = load_online_deployment(source=file, params_override=params_override)
        registry_reference = None
        if isinstance(deployment.model, str) and deployment.model.startswith(REGISTRY_URI_FORMAT):
            registry_reference = deployment.model.split("/")[3]

        online_deployment_info = _generate_deployment_telemetry_log(online_deployment_info, deployment)

        ml_client, debug = get_ml_client(
            cli_ctx=cmd.cli_ctx,
            resource_group_name=resource_group_name,
            workspace_name=workspace_name,
            registry_reference=registry_reference,
        )
        try:
            ml_client.online_deployments.get(name=deployment.name, endpoint_name=deployment.endpoint_name, local=local)
        except Exception as err:  # pylint: disable=broad-exception-caught
            if is_not_found_error(err):
                pass
            else:
                raise ValueError(
                    "Unexpected error verifying a deployment with the provided name does not exist on this endpoint."
                ) from err

        else:
            msg = (
                "(UserError) A deployment with this name already exists. If you are trying to create a new "
                "deployment, use a different name. If you are trying to update an existing deployment, use "
                "`az ml online-deployment update` instead."
            )
            raise ValidationException(
                message=msg,
                no_personal_data_message=msg,
                error_target=ErrorTarget.ONLINE_DEPLOYMENT,
                error_category=ErrorCategory.USER_ERROR,
            )

        if all_traffic:
            if no_wait:
                module_logger.warning(
                    "All traffic won't be set to deployment %s since no_wait option was provided. "
                    "You can try to set all the traffic to this deployment once its has completed.",
                    deployment.name
                )
            else:
                module_logger.warning(
                    "All traffic will be set to deployment %s once it has been provisioned.\n"
                    "If you interrupt this command or it times out while waiting for the provisioning, "
                    "you can try to set all the traffic to this deployment later once its has been provisioned.",
                    deployment.name
                )

        if web:
            endpoint = ml_client.online_endpoints.get(deployment.endpoint_name, local=local)
            open_online_endpoint_in_browser(endpoint)

        if not private_features_enabled():
            package_model = False
        deployment = ml_client.begin_create_or_update(
            deployment,
            local=local,
            local_enable_gpu=local_enable_gpu,
            vscode_debug=vscode_debug,
            skip_script_validation=skip_script_validation,
            package_model=package_model
        )
        if no_wait:
            return _dump_entity_with_warnings(deployment)
        deployment = wrap_lro(cmd.cli_ctx, deployment)
        if all_traffic and not no_wait:
            endpoint = ml_client.online_endpoints.get(deployment.endpoint_name, local=local)
            endpoint.traffic = {deployment.name: 100}
            endpoint = ml_client.begin_create_or_update(endpoint, local=local)
            endpoint = wrap_lro(cmd.cli_ctx, endpoint)
        return _dump_entity_with_warnings(deployment)
    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)
    finally:
        telemetry_log_info(online_deployment_info.__dict__)


def ml_online_deployment_update(
    cmd,
    resource_group_name,
    workspace_name,
    local=False,
    local_enable_gpu=False,
    vscode_debug=False,
    no_wait=False,
    parameters: Dict = None,
    file=None,
    web: bool = False,
    skip_script_validation: bool = False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        if file:
            # If we receive a YAML file we need to load the data from the file.
            # And overwrite the values passed under parameters. So we need to update
            # the parameters dict that we received to include the OnlineDeployment properties
            # from the YAML file
            parameters = _update_deployment_parameters(parameters, file)
        OnlineDeployment._set_scale_settings(data=parameters)  # pylint: disable=protected-access
        deployment = OnlineDeployment._load(data=parameters, yaml_path=file)  # pylint: disable=protected-access
        if local and no_wait:
            msg = '"no_wait" and "local" options are mutually exclusive. Set only one option and try again.'
            raise UserErrorException(
                message=msg,
                no_personal_data_message=msg,
                target=ErrorTarget.ONLINE_DEPLOYMENT,
                error_category=ErrorCategory.USER_ERROR,
            )
        if file:
            # Check if deployment exists
            try:
                ml_client.online_deployments.get(
                    name=deployment.name, endpoint_name=deployment.endpoint_name, local=local
                )
            except Exception as err:  # pylint: disable=broad-exception-caught
                if is_not_found_error(err):
                    raise ValueError("Deployment does not exist") from err
        endpointName = deployment.endpoint_name
        if web and endpointName:
            endpoint = ml_client.online_endpoints.get(endpointName, local=local)
            open_online_endpoint_in_browser(endpoint)
        deployment = ml_client.begin_create_or_update(
            deployment,
            local=local,
            local_enable_gpu=local_enable_gpu,
            vscode_debug=vscode_debug,
            skip_script_validation=skip_script_validation
        )
        if not no_wait:
            deployment = wrap_lro(cmd.cli_ctx, deployment)
        if deployment:  # TODO: https://msdata.visualstudio.com/Vienna/_workitems/edit/1252491/
            return _dump_entity_with_warnings(deployment)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_online_deployment_show(
    cmd, resource_group_name, workspace_name, name, endpoint_name, local=False, web: bool = False
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        try:
            deployment = ml_client.online_deployments.get(name, endpoint_name, local=local)
            if web:
                endpoint = ml_client.online_endpoints.get(endpoint_name, local=local)
                open_online_endpoint_in_browser(endpoint)
        except Exception as err:  # pylint: disable=broad-exception-caught
            if is_not_found_error(err):
                raise ValueError("Deployment does not exist.") from err
            raise err
        return _dump_entity_with_warnings(deployment)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def _ml_online_deployment_show(
    cmd, resource_group_name, workspace_name, name=None, endpoint_name=None, file=None, local=False
):
    params_override = {}
    if name:
        params_override["name"] = name

    if endpoint_name:
        params_override["endpoint_name"] = endpoint_name
    if file:
        # Current logic should not make a GET call when users provide a YAML file.
        # We should only keep track of the values the users want to overwrite.
        # In this case the only values users can specify are name and endpoint_name
        return params_override
    return ml_online_deployment_show(cmd, resource_group_name, workspace_name, name, endpoint_name, local)


def ml_online_deployment_delete(
    cmd,
    resource_group_name,
    workspace_name,
    name,
    endpoint_name,
    local: bool = False,
    no_wait=False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        result = ml_client.online_deployments.begin_delete(name, endpoint_name, local=local)
        if local and no_wait:
            msg = '"no_wait" and "local" options are mutually exclusive. Set only one option and try again.'
            raise UserErrorException(
                message=msg,
                no_personal_data_message=msg,
                target=ErrorTarget.ONLINE_DEPLOYMENT,
                error_category=ErrorCategory.USER_ERROR,
            )
        if not no_wait:
            result = wrap_lro(cmd.cli_ctx, result)
        return _dump_entity_with_warnings(result)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_online_deployment_list(cmd, resource_group_name, workspace_name, endpoint_name, local: bool = False):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        return [
            _dump_entity_with_warnings(deployment)
            for deployment in ml_client.online_deployments.list(endpoint_name, local=local)
        ]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_online_deployment_get_logs(
    cmd,
    resource_group_name,
    workspace_name,
    name,
    endpoint_name,
    lines=EndpointGetLogsFields.LINES,
    container=None,
    local: bool = False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        logs = ml_client.online_deployments.get_logs(name, endpoint_name, lines, container_type=container, local=local)
        print(logs.replace("\\n", "\n"))
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def _generate_deployment_telemetry_log(online_deployment_info, deployment):
    online_deployment_info.deployment_type = deployment.type
    online_deployment_info.instance_type = _set_instance_type(deployment)
    online_deployment_info.egress_public_network_access = _set_egress_public_network_access(deployment)
    if deployment.readiness_probe:
        online_deployment_info.readiness_probe = "custom"
    else:
        online_deployment_info.readiness_probe = "default"
    if deployment.liveness_probe:
        online_deployment_info.liveness_probe = "custom"
    else:
        online_deployment_info.liveness_probe = "default"
    if deployment.code_configuration:
        online_deployment_info.code_configuration_reference_type = _set_code_reference_type(
            deployment.code_configuration
        )
    if deployment.model:
        online_deployment_info.model_reference_type = _set_asset_reference_type(deployment.model, Model)
    if deployment.environment:
        online_deployment_info.environment_reference_type = _set_asset_reference_type(
            deployment.environment, Environment
        )
    return online_deployment_info


def _update_deployment_parameters(parameters, file):
    params_override = []
    # Convert the parameters dictionary to a list of dictionaries
    # since it's the type load_online_deployment is expecting for params_override
    for k, v in parameters.items():
        if k != "params_override":
            params_override.append({k: v})
    return load_online_deployment(source=file, params_override=params_override)._to_dict()  # pylint: disable=protected-access
