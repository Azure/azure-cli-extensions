# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
class ModelInfo:  # pylint: disable=too-few-public-methods
    """
    Model info for telemetry.
    This enforced structure will help to write the Kusto query
    """

    def __init__(self):
        self.model_type = None  # e.g. "custom", "mlflow", etc.
        self.path_type = None  # e.g. "local", "remote", "datastores", "runs" etc.
        self.scenario = None  # custom scenario, e.g. "promote", or anything else.
        self.promo_match = None  # type of workspace path match is used model promotion.


class OnlineDeploymentInfo:  # pylint: disable=too-few-public-methods,too-many-instance-attributes
    """
    Online deployment info for telemetry.
    This enforced structure will help to write the Kusto query
    """

    def __init__(self):
        self.deployment_type = None  # values: managed or kubernetes
        self.liveness_probe = None  # values: default or custom
        self.readiness_probe = None  # values: default or custom
        self.egress_public_network_access = None  # values: enabled or disabled
        self.code_configuration_reference_type = None  # values: id, name:version, inline, registry
        self.environment_reference_type = None  # values: version, label, inline, registry
        self.instance_type = None  # if deployment is managed: get instance type
        self.model_reference_type = None  # values: version, label, inline, registry


class ScheduleInfo:  # pylint: disable=too-few-public-methods
    """
    Schedule info for telemetry when monitoring is set.
    This enforced structure will help to write the Kusto query
    """

    def __init__(self):
        self.signal_types = None
        self.task_type = None
