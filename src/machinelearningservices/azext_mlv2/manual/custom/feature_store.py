# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import json
from itertools import islice

from knack.log import get_logger

from azure.ai.ml._version import VERSION
from azure.ai.ml.constants._common import Scope
from azure.ai.ml.entities._load_functions import load_feature_store
from azure.cli.core.commands import LongRunningOperation

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_ml_client

module_logger = get_logger()


def ml_feature_store_list(cmd, resource_group_name=None, max_results=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)
    scope = Scope.RESOURCE_GROUP if resource_group_name else Scope.SUBSCRIPTION

    try:
        if max_results:
            results = islice(ml_client.feature_stores.list(scope=scope), int(max_results))
        else:
            results = ml_client.feature_stores.list(scope=scope)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_show(cmd, resource_group_name, name):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        feature_store = ml_client.feature_stores.get(name)
        return _dump_entity_with_warnings(feature_store)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_create(
    cmd,
    resource_group_name,
    name=None,
    display_name=None,
    description=None,
    offline_store=None,
    materialization_identity=None,
    tags=None,
    image_build_compute=None,
    public_network_access=None,
    application_insights=None,
    container_registry=None,
    params_override=None,
    file=None,
    no_wait=False,
    location=None,
    update_dependent_resources=False,
    primary_user_assigned_identity=None,
    not_grant_materialization_identity_permissions=False,
    managed_network=None,
):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)
    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if display_name:
        params_override.append({"display_name": display_name})
    if description:
        params_override.append({"description": description})
    if tags is None:
        tags = {}
    # add tag in the featurestore to indicate which cli version the featurestore is created from
    if tags.get("createdByToolkit") is None:
        tags["createdByToolkit"] = "cli-v2-{}".format(VERSION)
    params_override.append({"tags": tags})
    if offline_store:
        params_override.append({"offline_store": json.loads(offline_store)})
    if materialization_identity:
        params_override.append({"materialization_identity": json.loads(materialization_identity)})
    if location:
        params_override.append({"location": location})
    if image_build_compute:
        params_override.append({"image_build_compute": image_build_compute})
    if public_network_access is not None:
        params_override.append({"public_network_access": public_network_access})
    if application_insights:
        params_override.append({"application_insights": application_insights})
    if container_registry:
        params_override.append({"container_registry": container_registry})
    if primary_user_assigned_identity:
        params_override.append({"primary_user_assigned_identity": primary_user_assigned_identity})
    if managed_network:
        if managed_network not in ["disabled", "allow_internet_outbound", "allow_only_approved_outbound"]:
            log_and_raise_error(
                "allowed values for managed-network are disabled, allow_internet_outbound, "
                "allow_only_approved_outbound"
            )
        params_override.append({"managed_network": {"isolation_mode": managed_network}})

    try:
        feature_store = load_feature_store(source=file, params_override=params_override)
        feature_store_poller = ml_client.feature_stores.begin_create(
            feature_store=feature_store,
            update_dependent_resources=update_dependent_resources,
            grant_materialization_permissions=not not_grant_materialization_identity_permissions,
        )
        if not no_wait:
            feature_store_poller = LongRunningOperation(cmd.cli_ctx)(feature_store_poller)
            return _dump_entity_with_warnings(feature_store_poller)

        module_logger.warning(
            "FeatureStore create request initiated. Status can be checked using `az ml feature-store show --name %s`",
            feature_store.name,
        )
        return feature_store_poller
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_update(
    cmd,
    resource_group_name,
    name,
    display_name=None,
    materialization_identity=None,
    image_build_compute=None,
    public_network_access=None,
    description=None,
    application_insights=None,
    container_registry=None,
    parameters=None,
    file=None,
    no_wait=False,
    update_dependent_resources=False,
    primary_user_assigned_identity=None,
    not_grant_materialization_identity_permissions=False,
    managed_network=None,
):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)
    tags = parameters.pop("tags", {})
    params_override = []

    if parameters and not file:
        for key in parameters.keys():
            if parameters[key]:
                params_override.append({key: parameters[key]})

    if name:
        params_override.append({"name": name})
    if display_name:
        params_override.append({"display_name": display_name})
    if materialization_identity:
        params_override.append({"materialization_identity": json.loads(materialization_identity)})
    if image_build_compute:
        params_override.append({"image_build_compute": image_build_compute})
    if public_network_access:
        params_override.append({"public_network_access": public_network_access})
    if description:
        params_override.append({"description": description})
    if application_insights:
        params_override.append({"application_insights": application_insights})
    if container_registry:
        params_override.append({"container_registry": container_registry})
    if primary_user_assigned_identity:
        params_override.append({"primary_user_assigned_identity": primary_user_assigned_identity})
    if managed_network:
        if managed_network not in ["disabled", "allow_internet_outbound", "allow_only_approved_outbound"]:
            log_and_raise_error(
                "allowed values for managed-network are disabled, allow_internet_outbound, "
                "allow_only_approved_outbound"
            )
        params_override.append({"managed_network": {"isolation_mode": managed_network}})

    feature_store = load_feature_store(file, params_override=params_override)

    if feature_store.tags:
        feature_store.tags.update(tags)
    else:
        feature_store.tags = tags
    try:
        feature_store_poller = ml_client.feature_stores.begin_update(
            feature_store,
            update_dependent_resources=update_dependent_resources,
            grant_materialization_permissions=not not_grant_materialization_identity_permissions,
        )
        if not no_wait:
            feature_store_poller = LongRunningOperation(cmd.cli_ctx)(feature_store_poller)
            return _dump_entity_with_warnings(feature_store_poller)

        module_logger.warning(
            "FeatureStore update request initiated. Status can be checked using `az ml feature-store show --name %s`",
            feature_store.name,
        )
        return feature_store_poller
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_delete(cmd, resource_group_name, name, all_resources=False, no_wait=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        del_result = ml_client.feature_stores.begin_delete(name=name, delete_dependent_resources=all_resources)
        if not no_wait:
            del_result = LongRunningOperation(cmd.cli_ctx)(del_result)
        return del_result
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_provision_network(cmd, resource_group_name, name, include_spark=False, no_wait=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name)

    try:
        provision_network_result = ml_client.feature_stores.begin_provision_network(
            feature_store_name=name, include_spark=include_spark
        )
        if not no_wait:
            provision_network_result = LongRunningOperation(cmd.cli_ctx)(provision_network_result)
        return provision_network_result
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)
