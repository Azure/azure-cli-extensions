# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from itertools import islice
from typing import Dict

from azure.ai.ml.entities import Datastore
from azure.ai.ml.entities._load_functions import load_datastore

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_ml_client, modify_sys_path_for_rslex_mount


def ml_datastore_delete(cmd, resource_group_name, workspace_name, name):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        return ml_client.datastores.delete(name)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_datastore_show(cmd, resource_group_name, workspace_name, name):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        return ml_client.datastores.get(name, include_secrets=False)._to_dict()  # pylint: disable=protected-access
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def _ml_datastore_show(cmd, resource_group_name, workspace_name, file=None, name=None):
    try:
        if file:
            params_override = []
            if name:
                params_override = [{"name": name}]
            return load_datastore(file, params_override=params_override)._to_dict()  # pylint: disable=protected-access
        return ml_datastore_show(cmd, resource_group_name, workspace_name, name)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err)


def ml_datastore_list(cmd, resource_group_name, workspace_name, max_results=None):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        if max_results:
            results = islice(ml_client.datastores.list(include_secrets=False), int(max_results))
        else:
            results = ml_client.datastores.list(include_secrets=False)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_datastore_create(cmd, resource_group_name, workspace_name, file, name=None, params_override=None):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    params_override = params_override or []
    if name:
        params_override.append({"name": name})

    try:
        datastore = load_datastore(file, params_override=params_override)
        return ml_client.datastores.create_or_update(datastore)._to_dict()  # pylint: disable=protected-access
    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)


def ml_datastore_update(cmd, resource_group_name, workspace_name, parameters: Dict):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        datastore = Datastore._load(parameters)  # pylint: disable=protected-access
        return ml_client.datastores.create_or_update(datastore)._to_dict()  # pylint: disable=protected-access
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_datastore_mount(cmd,
                       path,
                       mount_point='/home/azureuser/mount/data',
                       resource_group_name=None,
                       workspace_name=None,
                       mode='ro_mount',
                       persistent=False):

    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    modify_sys_path_for_rslex_mount(persistent)
    ml_client.datastores.mount(path=path, mount_point=mount_point, mode=mode, debug=debug, persistent=persistent)
