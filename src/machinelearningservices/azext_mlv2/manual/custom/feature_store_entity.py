# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from itertools import islice
from typing import Optional

from knack.log import get_logger

from azure.ai.ml.entities._load_functions import load_feature_store_entity
from azure.cli.core.commands import LongRunningOperation

from .raise_error import log_and_raise_error
from .utils import _dump_entity_with_warnings, get_list_view_type, get_ml_client

module_logger = get_logger()


def ml_feature_store_entity_list(
    cmd,
    resource_group_name=None,
    workspace_name=None,
    name=None,
    max_results=None,
    include_archived=False,
    archived_only=False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        list_view_type = get_list_view_type(include_archived=include_archived, archived_only=archived_only)
        if max_results:
            results = islice(
                ml_client.feature_store_entities.list(name=name, list_view_type=list_view_type),
                int(max_results),
            )
        else:
            results = ml_client.feature_store_entities.list(name=name, list_view_type=list_view_type)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_entity_show(cmd, name, version, resource_group_name=None, workspace_name=None):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    try:
        feature_store_entity = ml_client.feature_store_entities.get(name=name, version=version)
        return _dump_entity_with_warnings(feature_store_entity)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_entity_create(
    cmd,
    resource_group_name: Optional[str] = None,
    workspace_name: Optional[str] = None,
    file: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    version: Optional[str] = None,
    params_override: Optional[list] = None,
    no_wait=False,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
    )
    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if description:
        params_override.append({"description": description})
    if version:
        params_override.append({"version": version})

    try:
        feature_store_entity = load_feature_store_entity(source=file, params_override=params_override)
        feature_store_entity_poller = ml_client.feature_store_entities.begin_create_or_update(feature_store_entity)
        if not no_wait:
            feature_store_entity = LongRunningOperation(cmd.cli_ctx)(feature_store_entity_poller)
        else:
            module_logger.warning(
                "Feature store entity create request initiated. Status can be checked using "
                "`az ml feature-store-entity show --name %s --version %s`",
                feature_store_entity.name, feature_store_entity.version
            )
        return _dump_entity_with_warnings(feature_store_entity)
    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)


# This will only be used for generic update
def _ml_feature_store_entity_show(cmd, resource_group_name, workspace_name, name, version):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        return ml_client.feature_store_entities.get(name=name, version=version)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


# This will only be used for generic update
def _ml_feature_store_entity_update(cmd, resource_group_name, workspace_name, name, version, no_wait=False, **kwargs):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    feature_store_entity_obj = kwargs["parameters"]
    feature_store_entity_obj.name = name
    feature_store_entity_obj.version = version
    try:
        feature_store_entity_poller = ml_client.feature_store_entities.begin_create_or_update(feature_store_entity_obj)
        if not no_wait:
            feature_store_entity = LongRunningOperation(cmd.cli_ctx)(feature_store_entity_poller)
            return _dump_entity_with_warnings(feature_store_entity)
        module_logger.warning(
            "Feature store entity update request initiated. Status can be checked using "
            "`az ml feature-store-entity show --name %s --version %s`",
            name, version
        )
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_entity_archive(cmd, name, version, resource_group_name=None, workspace_name=None):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        return ml_client.feature_store_entities.archive(name=name, version=version)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_feature_store_entity_restore(cmd, name, version, resource_group_name=None, workspace_name=None):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    try:
        return ml_client.feature_store_entities.restore(name=name, version=version)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)
