# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
from itertools import islice
from typing import Optional

from azure.ai.ml.constants._common import MLTABLE_METADATA_SCHEMA_URL_FALLBACK, MAX_LIST_CLI_RESULTS
from azure.ai.ml.entities._load_functions import load_data

from .raise_error import log_and_raise_error, print_limited_result_set_warning
from .utils import (
    _dump_entity_with_warnings,
    get_list_view_type,
    get_ml_client,
    modify_sys_path_for_rslex_mount,
)


def ml_data_list(cmd,
                 resource_group_name=None,
                 workspace_name=None,
                 registry_name=None,
                 name=None,
                 max_results=None,
                 include_archived=False,
                 archived_only=False):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     registry_name=registry_name)
    try:
        list_view_type = get_list_view_type(include_archived=include_archived,
                                            archived_only=archived_only)
        if max_results:
            results = islice(
                ml_client.data.list(name=name, list_view_type=list_view_type),
                int(max_results),
            )
        else:
            results = ml_client.data.list(name=name,
                                          list_view_type=list_view_type)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_data_show(cmd,
                 name,
                 resource_group_name=None,
                 workspace_name=None,
                 registry_name=None,
                 version=None,
                 label=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     registry_name=registry_name)

    try:
        data = ml_client.data.get(name=name, version=version, label=label)
        return _dump_entity_with_warnings(data)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_data_create(cmd,
                   resource_group_name: Optional[str] = None,
                   workspace_name: Optional[str] = None,
                   registry_name: Optional[str] = None,
                   file: Optional[str] = None,
                   name: Optional[str] = None,
                   description: Optional[str] = None,
                   version: Optional[str] = None,
                   skip_validation: bool = False,
                   params_override: Optional[list] = None,
                   type: Optional[str] = None,  # pylint: disable=redefined-builtin
                   path: Optional[str] = None,
                   datastore: Optional[str] = None,
                   no_wait: Optional[bool] = False):  # pylint: disable=unused-argument
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx,
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        registry_name=registry_name,
    )
    config = cmd.cli_ctx.config
    mltable_schema_url = config.get("data", "mltable_metadata_schema_url",
                                    MLTABLE_METADATA_SCHEMA_URL_FALLBACK)

    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if description:
        params_override.append({"description": description})
    if version:
        params_override.append({"version": version})
    if type:
        params_override.append({"type": type})
    if path:
        params_override.append({"path": path})
    if datastore:
        params_override.append({"datastore": datastore})

    try:
        data = load_data(source=file, params_override=params_override)
        data._skip_validation = skip_validation  # pylint: disable=protected-access
        data._mltable_schema_url = mltable_schema_url  # pylint: disable=protected-access
        data = ml_client.data.create_or_update(data)
        return _dump_entity_with_warnings(data)
    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)


def ml_data_import(
    cmd,
    resource_group_name: str,
    workspace_name: str,
    file: Optional[str] = None,
    name: Optional[str] = None,
    description: Optional[str] = None,
    version: Optional[str] = None,
    skip_validation: bool = False,
    params_override: Optional[list] = None,
    type: Optional[str] = None,  # pylint: disable=redefined-builtin
    path: Optional[str] = None,
    datastore: Optional[str] = None,
    **kwargs,
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    params_override = params_override or []
    if name:
        params_override.append({"name": name})
    if description:
        params_override.append({"description": description})
    if version:
        params_override.append({"version": version})
    if type:
        params_override.append({"type": type})
    if path:
        params_override.append({"path": path})
    if datastore:
        params_override.append({"datastore": datastore})

    try:
        data_import = load_data(source=file, params_override=params_override)
        data_import._skip_validation = skip_validation  # pylint: disable=protected-access
        job = ml_client.data.import_data(data_import, **kwargs)
        return _dump_entity_with_warnings(job)
    except Exception as err:  # pylint: disable=broad-exception-caught
        yaml_operation = bool(file)
        log_and_raise_error(err, debug, yaml_operation=yaml_operation)


def ml_data_list_materialization_status(
    cmd,
    resource_group_name,
    workspace_name,
    name=None,
    max_results=MAX_LIST_CLI_RESULTS,
    all_results=False,
    include_archived=False,
    archived_only=False,
    **kwargs
):
    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    if all_results:
        max_results = None
    else:
        print_limited_result_set_warning(max_results)

    try:
        list_view_type = get_list_view_type(include_archived=include_archived, archived_only=archived_only)
        if max_results:
            results = islice(
                ml_client.data.list_materialization_status(name=name, list_view_type=list_view_type, **kwargs),
                int(max_results),
            )
        else:
            results = ml_client.data.list_materialization_status(name=name, list_view_type=list_view_type, **kwargs)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


# This will only be used for generic update
def _ml_data_show(cmd,
                  resource_group_name,
                  workspace_name,
                  name,
                  version=None,
                  label=None,
                  registry_name=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     registry_name=registry_name)
    try:
        return ml_client.data.get(name=name, version=version, label=label)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


# This will only be used for generic update
def _ml_data_update(cmd,
                    resource_group_name,
                    workspace_name,
                    name,
                    version=None,
                    registry_name=None,
                    **kwargs):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     registry_name=registry_name)
    data_obj = kwargs["parameters"]
    data_obj.name = name
    data_obj.version = version
    try:
        data = ml_client.data.create_or_update(data_obj)
        return _dump_entity_with_warnings(data)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_data_archive(cmd,
                    name,
                    resource_group_name=None,
                    workspace_name=None,
                    version=None,
                    label=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name)
    try:
        return ml_client.data.archive(name=name, version=version, label=label)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_data_restore(cmd,
                    name,
                    resource_group_name=None,
                    workspace_name=None,
                    version=None,
                    label=None):
    ml_client, debug = get_ml_client(cli_ctx=cmd.cli_ctx,
                                     resource_group_name=resource_group_name,
                                     workspace_name=workspace_name)
    try:
        return ml_client.data.restore(name=name, version=version, label=label)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_data_share(
    cmd,
    name,
    version,
    share_with_name,
    share_with_version,
    registry_name,
    resource_group_name,
    workspace_name
):
    ml_client, _ = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )

    model = ml_client.data.share(
        name=name,
        version=version,
        registry_name=registry_name,
        share_with_name=share_with_name,
        share_with_version=share_with_version
    )
    return _dump_entity_with_warnings(model)


def ml_data_mount(
    cmd,
    path,
    mount_point='/home/azureuser/mount/data',
    resource_group_name=None,
    workspace_name=None,
    mode='ro_mount',
    persistent=False
):

    ml_client, debug = get_ml_client(
        cli_ctx=cmd.cli_ctx, resource_group_name=resource_group_name, workspace_name=workspace_name
    )
    modify_sys_path_for_rslex_mount(persistent)
    ml_client.data.mount(path=path, mount_point=mount_point, mode=mode, debug=debug, persistent=persistent)
