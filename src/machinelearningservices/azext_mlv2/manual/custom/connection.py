# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# ---------------------------------------------------------
from itertools import islice
from typing import Dict

from azext_mlv2.manual.custom import get_ml_client
from azext_mlv2.manual.custom.utils import _dump_entity_with_warnings
from azure.ai.ml import load_connection
from azure.ai.ml.entities import WorkspaceConnection

from .raise_error import log_and_raise_error


def ml_connection_show(cmd, resource_group_name, workspace_name, name, populate_secrets=False):
    ml_client, debug = get_ml_client(
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        cli_ctx=cmd.cli_ctx,
    )

    try:
        ws = ml_client.connections.get(name, populate_secrets=populate_secrets)
        return _dump_entity_with_warnings(ws)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_connection_create(
    cmd,
    resource_group_name,
    workspace_name,
    file,
    populate_secrets=False,
    name=None,
    params_override=None,
):
    ml_client, debug = get_ml_client(
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        cli_ctx=cmd.cli_ctx,
    )

    params_override = params_override or []
    if name:
        params_override.append({"name": name})

    try:
        connection = load_connection(source=file, params_override=params_override)
        ws = ml_client.connections.create_or_update(connection, populate_secrets=populate_secrets)
        return _dump_entity_with_warnings(ws)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_connection_delete(cmd, resource_group_name, workspace_name, name):
    ml_client, debug = get_ml_client(
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        cli_ctx=cmd.cli_ctx,
    )
    try:
        return ml_client.connections.delete(name)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def ml_connection_list(
    cmd, resource_group_name, workspace_name, connection_type=None, max_results=None, populate_secrets=False
):
    ml_client, debug = get_ml_client(
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        cli_ctx=cmd.cli_ctx,
    )

    try:
        if max_results:
            results = islice(ml_client.connections.list(connection_type=connection_type), int(max_results))
        else:
            results = ml_client.connections.list(connection_type=connection_type, populate_secrets=populate_secrets)
        return [_dump_entity_with_warnings(x) for x in results]
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)


def _ml_connection_update(cmd, resource_group_name, workspace_name, parameters: Dict = None, populate_secrets=False):
    ml_client, debug = get_ml_client(
        resource_group_name=resource_group_name,
        workspace_name=workspace_name,
        cli_ctx=cmd.cli_ctx,
    )

    try:
        # Set unknown to EXCLUDE so that marshallow doesn't raise on dump only fields.
        connection = WorkspaceConnection._load(data=parameters)  # pylint: disable=protected-access
        updated_connection = ml_client.connections.create_or_update(connection, populate_secrets=populate_secrets)
        return _dump_entity_with_warnings(updated_connection)
    except Exception as err:  # pylint: disable=broad-exception-caught
        log_and_raise_error(err, debug)
