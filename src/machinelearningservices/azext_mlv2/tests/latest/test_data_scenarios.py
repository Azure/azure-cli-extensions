# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest
from azext_mlv2.tests.util import assert_same
from azure.ai.ml._artifacts._constants import ARTIFACT_ORIGIN
from azure.ai.ml.exceptions import ValidationErrorType, ValidationException
from knack.cli import CLIError


class DataScenarioTest(MLBaseScenarioTest):
    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_data(self) -> None:
        cassette_reset_index = "29"
        data_name_create_suffix_1 = "-create1-" + cassette_reset_index
        self.kwargs["data_name_create_1"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_1
        )
        data_name_create_suffix_2 = "-create2-" + cassette_reset_index
        self.kwargs["data_name_create_2"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_2
        )
        data_name_create_suffix_3 = "-create3-" + cassette_reset_index
        self.kwargs["data_name_create_3"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_3
        )
        data_name_create_suffix_4 = "-create4-" + cassette_reset_index
        self.kwargs["data_name_create_4"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_4
        )

        # create UriFolder
        data_folder = self.cmd(
            "az ml data create --name {data_name_create_1} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_local_path.yaml --version 1"
        )
        data_folder_obj = yaml.safe_load(data_folder.output)
        assert data_folder_obj["name"] == self.kwargs.get("data_name_create_1", None)
        assert ARTIFACT_ORIGIN in data_folder_obj["path"]
        assert data_folder_obj["version"] == "1"
        assert "workspaceblobstore" in data_folder_obj["path"]
        assert data_folder_obj["path"].endswith("/data/")
        assert data_folder_obj["type"] == "uri_folder"

        # create UriFile
        data_file = self.cmd(
            "az ml data create --name {data_name_create_2} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml --version 2 --set path=../python/simple_train.py description=bla"
        )
        data_file_obj = yaml.safe_load(data_file.output)
        assert data_file_obj["name"] == self.kwargs.get("data_name_create_2", None)
        assert data_file_obj["version"] == "2"
        assert data_file_obj["path"].endswith("simple_train.py")
        assert data_file_obj["description"] == "bla"
        assert data_file_obj["type"] == "uri_file"

        # create mltable
        data_mltable = self.cmd(
            "az ml data create --name {data_name_create_3} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_local_path_mltable.yaml --version 1"
        )
        data_mltable_obj = yaml.safe_load(data_mltable.output)
        assert data_mltable_obj["name"] == self.kwargs.get("data_name_create_3", None)
        assert data_mltable_obj["version"] == "1"
        assert data_mltable_obj["path"].endswith("/iris-mltable/")
        assert data_mltable_obj["description"] == "iris dataset"
        assert data_mltable_obj["type"] == "mltable"

        # create without file param
        data_params_only = self.cmd(
            "az ml data create --name={data_name_create_4} --version=2 --path=./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/python/simple_train.py --description=inline-bla --type=uri_file"
        )
        data_params_only_obj = yaml.safe_load(data_params_only.output)
        assert data_params_only_obj["name"] == self.kwargs.get("data_name_create_4", None)
        assert data_params_only_obj["version"] == "2"
        assert data_params_only_obj["path"].endswith("simple_train.py")
        assert data_params_only_obj["description"] == "inline-bla"
        assert data_params_only_obj["type"] == "uri_file"

        # data show
        data_name_show_suffix = "-show-" + cassette_reset_index
        self.kwargs["data_name_show"] = "{}{}".format(self.kwargs.get("dataV2Name", None), data_name_show_suffix)

        data_create_for_show = self.cmd(
            "az ml data create --name {data_name_show} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml"
        )
        data_create_for_show_obj = yaml.safe_load(data_create_for_show.output)

        data_show = self.cmd("az ml data show --name {data_name_show} --version 1")
        data_show_obj = yaml.safe_load(data_show.output)
        assert_same(data_create_for_show_obj, data_show_obj)

        # data update
        data_name_update_suffix = "-update-" + cassette_reset_index
        self.kwargs["data_name_update"] = "{}{}".format(self.kwargs.get("dataV2Name", None), data_name_update_suffix)
        self.cmd(
            "az ml data create --name {data_name_update} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml"
        )

        data_update = self.cmd("az ml data update --name {data_name_update} --version 1 --set description=blabla")
        data_update_obj = yaml.safe_load(data_update.output)
        assert data_update_obj["name"] == self.kwargs.get("data_name_update", None)
        assert data_update_obj["version"] == "1"
        assert data_update_obj["description"] == "blabla"

        # data list
        data_name_list_suffix = "-list-" + cassette_reset_index
        self.kwargs["data_name_list"] = "{}{}".format(self.kwargs.get("dataV2Name", None), data_name_list_suffix)
        self.cmd(
            "az ml data create --name {data_name_list} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml"
        )

        data_list = self.cmd("az ml data list --max-results 1")
        assert len(yaml.safe_load(data_list.output)) != 0
        data_list_versions = self.cmd("az ml data list --name {data_name_list} --max-results 1")
        assert len(yaml.safe_load(data_list_versions.output)) != 0

        # archive
        data_name_archive_suffix = "-archive-" + cassette_reset_index
        self.kwargs["data_name_archive"] = "{}{}".format(self.kwargs.get("dataV2Name", None), data_name_archive_suffix)
        self.cmd(
            "az ml data create --name {data_name_archive} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml"
        )
        # Archive and restore data version
        data_archive_obj = self.cmd("az ml data archive --name {data_name_archive} --version 1")
        assert data_archive_obj.output == ""

        data_restore_obj = self.cmd("az ml data restore --name {data_name_archive} --version 1")
        assert data_restore_obj.output == ""

        # Archive and restore data
        data_archive_obj = self.cmd("az ml data archive --name {data_name_archive}")
        assert data_archive_obj.output == ""

        data_restore_obj = self.cmd("az ml data restore --name {data_name_archive}")
        assert data_restore_obj.output == ""

        data_name_validate_suffix = "-validate-" + cassette_reset_index
        self.kwargs["data_name_validate"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_validate_suffix
        )

        data_skipped_validation = self.cmd(
            "az ml data create --name {data_name_validate} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_local_path_mltable.yaml --path ./invalid-mltable --skip-validation"
        )
        data_skipped_validation_obj = yaml.safe_load(data_skipped_validation.output)
        assert data_skipped_validation_obj["name"] == self.kwargs.get("data_name_validate", None)
        assert data_skipped_validation_obj["version"] == "1"

    @pytest.mark.skipif(
        condition=True, reason="Skipping in order to appease CI for hotfix to get CLI working. WIll fix in a few days."
    )
    def test_data_validation_errors(self) -> None:
        cassette_reset_index = "29"
        data_name_create_suffix_5 = "-create5-" + cassette_reset_index
        self.kwargs["data_name_create_5"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_5
        )

        with pytest.raises((ValidationException, CLIError)) as ex:
            self.cmd(
                "az ml data create --name {data_name_create_5} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_local_path_mltable.yaml --path ./invalid-mltable"
            )
            assert ex.error_type == ValidationErrorType.INVALID_VALUE
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Data yaml files and/or"
                in str(ex)
            )

        with pytest.raises((ValidationException, CLIError)) as ex:
            self.cmd(
                "az ml data create --name {data_name_create_5} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_file.yaml --path ./file_that_does_not_exist.txt"
            )
            assert ex.error_type == ValidationErrorType.FILE_OR_FOLDER_NOT_FOUND
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Data yaml files and/or"
                in str(ex)
            )

        with pytest.raises((ValidationException, CLIError)) as ex:
            self.cmd(
                "az ml data create --name {data_name_create_5} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_missing_path_test.yml"
            )
            assert ex.error_type == ValidationErrorType.MISSING_FIELD
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Data yaml files and/or"
                in str(ex)
            )

        with pytest.raises((ValidationException, CLIError)) as ex:
            self.cmd(
                "az ml data create --name {data_name_create_5} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_missing_path_test.yml"
            )
            assert ex.error_type == ValidationErrorType.UNKNOWN_FIELD
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Data yaml files and/or"
                in str(ex)
            )

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_data_datastore_param(self) -> None:
        cassette_reset_index = "29"
        data_name_create_suffix_6 = "-create6-" + cassette_reset_index
        self.kwargs["data_name_create_6"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_6
        )
        data_name_create_suffix_7 = "-create7-" + cassette_reset_index
        self.kwargs["data_name_create_7"] = "{}{}".format(
            self.kwargs.get("dataV2Name", None), data_name_create_suffix_7
        )

        data_cmd_1 = self.cmd(
            "az ml data create --name {data_name_create_6} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_with_datastore.yaml"
        )
        data_cmd_1_out = yaml.safe_load(data_cmd_1.output)
        assert "workspaceartifactstore" in data_cmd_1_out["path"]

        data_cmd_2 = self.cmd(
            "az ml data create --name {data_name_create_7} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/dataset/data_with_datastore.yaml --datastore workspaceblobstore"
        )
        data_cmd_2_out = yaml.safe_load(data_cmd_2.output)
        assert "workspaceblobstore" in data_cmd_2_out["path"]

    # This test is not working and Kevin is working to fix it. TODO: https://msdata.visualstudio.com/Vienna/_workitems/edit/2374157
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_data_share(self) -> None:
        cmd = self.cmd(
            "az ml data share --name bani-can-cli-momo-model_inputs -v 1 --share-with-name ban-data-test --share-with-version 100 --registry-name bani-can"
        )
