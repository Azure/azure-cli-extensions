# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest
from azure.ai.ml.exceptions import ValidationErrorType, ValidationException
from knack.cli import CLIError


def b64read(p):
    from base64 import b64encode

    with open(p, "rb") as f:
        return b64encode(f.read()).decode("utf-8")


def create_cmd_str(file_name: str, var_name: str, suffix=None) -> str:
    if not suffix:
        suffix = ""
    return f"az ml datastore create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/datastore/{file_name} --name {{{var_name}}} {suffix} -g testrg -w testworkspace"


class DatastoreScenarioTest(MLBaseScenarioTest):
    def test_datastore_blob(self) -> None:
        file_name = "blob_store.yml"
        var_name = "blobDatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name, "--set credentials.account_key={encoded_account_key}"))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)

        assert ds_obj["type"] == "azure_blob"
        assert ds_obj["container_name"] == "testblob"

    def test_datastore_file(self) -> None:
        file_name = "file_store.yml"
        var_name = "fileDatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name, "--set credentials.account_key={encoded_account_key}"))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)

        assert ds_obj["type"] == "azure_file"
        assert ds_obj["file_share_name"] == "testfileshare"

    def test_datastore_blob_credentialless(self) -> None:
        file_name = "credential_less_blob_store.yml"
        var_name = "blobCredlessDatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)

        assert ds_obj["type"] == "azure_blob"
        assert ds_obj["account_name"] == "sdkvnextcli902348975"
        assert ds_obj["container_name"] == "testblob"

    def test_datastore_adlsgen1_credentialless(self) -> None:
        file_name = "credential_less_adls_gen1.yml"
        var_name = "adlsgen1CredlessDatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)
        assert ds_obj["type"] == "azure_data_lake_gen1"
        assert ds_obj["store_name"] == "mytestdatalakegen1"

    def test_datastore_adlsgen1(self) -> None:
        file_name = "adls_gen1.yml"
        var_name = "adlsgen1DatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)
        assert ds_obj["type"] == "azure_data_lake_gen1"
        assert ds_obj["store_name"] == "cliv2testdatalake"

    def test_datastore_adlsgen2_credentialless(self) -> None:
        file_name = "credential_less_adls_gen2.yml"
        var_name = "adlsgen2CredlessDatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)
        assert ds_obj["type"] == "azure_data_lake_gen2"
        assert ds_obj["account_name"] == "mytestdatalakegen2"
        assert ds_obj["filesystem"] == "my-gen2-container"

    def test_datastore_adlsgen2(self) -> None:
        file_name = "adls_gen2.yml"
        var_name = "adlsgen2DatastoreName"
        ds_obj = self.cmd(create_cmd_str(file_name, var_name))
        ds_obj = yaml.safe_load(ds_obj.output)
        assert ds_obj["name"] == self.kwargs.get(var_name, None)
        assert ds_obj["type"] == "azure_data_lake_gen2"
        assert ds_obj["account_name"] == "cliv2testblob"
        assert ds_obj["filesystem"] == "a-file-system"

    @pytest.mark.skip("this test is very flaky and causing many issues, please fix")
    def test_datastore_validation_errors(self) -> None:
        with pytest.raises((ValidationException, CLIError)) as ex:
            self.cmd(
                "az ml datastore create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/datastore/blob_store.yml --set type=azure_fake_storage -g testrg -w testworkspace"
            )
            # TODO datastore team, fix this test
            # also note, when I run this test locally these assertions are not even hit
            # so not sure this test case is actually even testing anything
            assert ex.error_type == ValidationErrorType.INVALID_VALUE
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Datastore yaml files and/or"
                in str(ex)
            )

        with pytest.raises(CLIError) as ex:
            self.cmd(
                "az ml datastore create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/datastore/datastore_missing_parameter.yml -g testrg -w testworkspace"
            )
            assert ex.error_type == ValidationErrorType.MISSING_FIELD
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Datastore yaml files and/or"
                in str(ex)
            )

        with pytest.raises(CLIError) as ex:
            self.cmd(
                "az ml datastore create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/datastore/datastore_unknown_parameter.yml -g testrg -w testworkspace"
            )
            assert ex.error_type == ValidationErrorType.UNKNOWN_FIELD
            assert (
                "Error: The yaml file you provided does not match the prescribed schema for Datastore yaml files and/or"
                in str(ex)
            )


