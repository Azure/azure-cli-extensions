# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest


class FeatureStoreEntityScenarioTest(MLBaseScenarioTest):
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_featureStoreEntity(self) -> None:
        self.kwargs["resourceGroup"] = "test-rg-000006"

        fs_entity_obj = self.cmd(
            "az ml feature-store-entity create -f ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/featurestore/entities/account.yaml --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription} --no-wait"
        )
        self.assertEqual(fs_entity_obj.output, "")
        if not self.is_live:
            from time import sleep
            
            sleep(800)  # This sleep is only required for fresh recording of cassette

        fs_entity_obj_show = self.cmd("az ml feature-store-entity show -n account -v 1 --resource-group {resourceGroup} -w {workspaceName} --subscription {subscription}")
        fs_entity_obj_show = yaml.safe_load(fs_entity_obj_show.output)
        self.assertEqual(fs_entity_obj_show["name"], "account")
        self.assertIsNotNone(fs_entity_obj_show["description"])
        self.assertIsNotNone(fs_entity_obj_show["index_columns"])
        self.assertIsNotNone(fs_entity_obj_show["stage"])
        self.assertEqual(fs_entity_obj_show["version"], "1")

        self.kwargs["updatedDescription"] = "description2"
        self.kwargs["updatedStage"] = "Production"
        fs_entity_obj_update = self.cmd(
            "az ml feature-store-entity update -n account -v 1 --set description={updatedDescription} --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_update = yaml.safe_load(fs_entity_obj_update.output)
        self.assertEqual(fs_entity_obj_update["name"], "account")
        self.assertIsNotNone(fs_entity_obj_update["description"])
        self.assertIsNotNone(fs_entity_obj_update["index_columns"])
        self.assertIsNotNone(fs_entity_obj_update["stage"])
        self.assertEqual(fs_entity_obj_update["version"], "1")
        if not self.is_live:
            from time import sleep

            sleep(100)  # This sleep is only required for fresh recording of cassette
        
        fs_entity_obj_update = self.cmd(
            "az ml feature-store-entity update -n account -v 1 --set stage={updatedStage} --no-wait --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(fs_entity_obj_update.output, "")
        if not self.is_live:
            from time import sleep

            sleep(100)  # This sleep is only required for fresh recording of cassette

        fs_entity_obj_show = self.cmd(
            "az ml feature-store-entity show -n account -v 1 --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_show = yaml.safe_load(fs_entity_obj_show.output)
        self.assertEqual(fs_entity_obj_show["description"], self.kwargs.get("updatedDescription", None))
        self.assertEqual(fs_entity_obj_show["stage"], self.kwargs.get("updatedStage", None))

        fs_entity_obj_list = self.cmd(
            "az ml feature-store-entity list --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_list = yaml.safe_load(fs_entity_obj_list.output)
        self.assertEqual(len(fs_entity_obj_list), 1)

        fs_entity_obj_list = self.cmd(
            "az ml feature-store-entity list --include-archived --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_list = yaml.safe_load(fs_entity_obj_list.output)
        self.assertEqual(len(fs_entity_obj_list), 1)

        fs_entity_obj_list = self.cmd(
            "az ml feature-store-entity list --archived-only --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_list = yaml.safe_load(fs_entity_obj_list.output)
        self.assertEqual(len(fs_entity_obj_list), 0)

        fs_entity_obj_archive = self.cmd(
            "az ml feature-store-entity archive --name account --version 1 --yes --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(fs_entity_obj_archive.output, "")

        fs_entity_obj_show = self.cmd(
            "az ml feature-store-entity show -n account -v 1 --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_show = yaml.safe_load(fs_entity_obj_show.output)
        self.assertEqual(fs_entity_obj_show["stage"], "Archived")

        fs_entity_obj_restore = self.cmd(
            "az ml feature-store-entity restore --name account --version 1 --yes --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(fs_entity_obj_restore.output, "")

        fs_entity_obj_show = self.cmd(
            "az ml feature-store-entity list -n account --resource-group {resourceGroup} --workspace-name {workspaceName} --subscription {subscription}"
        )
        fs_entity_obj_show = yaml.safe_load(fs_entity_obj_show.output)
        self.assertEqual(fs_entity_obj_show[0]["stage"], "Development")


