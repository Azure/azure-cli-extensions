# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest

from azure.ai.ml import load_registry


class RegistryScenarioTest(MLBaseScenarioTest):
    def test_registry_list(self):
        env_obj = self.cmd("az ml registry list -g testrg")
        env_obj = yaml.safe_load(env_obj.output)
        assert env_obj[0]["container_registry"]["acr_account_sku"] == "premium"

    def test_registry_show(self):
        env_obj = self.cmd("az ml registry show -g testrg --name testregistry")
        env_obj = yaml.safe_load(env_obj.output)
        assert env_obj["replication_locations"][0]["location"] == "eastus"

    # note this test will fail if the specified registry already exists before the test starts.
    # This might happen if the test fails in a live run before the delete operation occurs.
    def test_registry_create_and_delete(self):
        target_yaml = (
            "./src/machinelearningservices/azext_mlv2/tests/test_configs/registry/registry_valid_cli_test.yaml"
        )
        reg = load_registry(source=target_yaml)
        # Try getting registry to ensure that it doesn't already exist.
        env_obj = self.cmd(
            f"az ml registry show -g testrg --name {reg.name}", expect_failure=True
        )
        if env_obj.output != "":
            raise ValueError(
                f"Targeted Registry {reg.name} for create/delete testing already seems to exist. Delete it, or change the targeted registry."
            )

        # Create registry
        env_obj = self.cmd(f"az ml registry create -g testrg --file {target_yaml}")
        env_obj = yaml.safe_load(env_obj.output)
        assert (
            env_obj["discoveryUrl"]
            == f"https://westcentralus.api.azureml.ms/registrymanagement/v1.0/registries/{reg.name}/discovery"
        )

        if self.is_live:  # Ensure that creation is complete
            from time import sleep

            sleep(30)  # This sleep is only required for fresh recording of cassette

        # delete registry
        del_result = self.cmd(f"az ml registry delete --debug -g testrg --name {reg.name}")
        assert del_result.output == ""

    def test_registry_update_with_file(self) -> None:
        # create a registry to start
        env_obj = self.cmd(
            "az ml registry create -g testrg --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/registry/registry_valid_cli_to_be_updated.yaml"
        )
        env_obj = yaml.safe_load(env_obj.output)
        env_obj["tags"]["version"] == "original"

        # test file-based update
        updated_obj = self.cmd(
            "az ml registry update -g testrg --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/registry/registry_valid_cli_test_updated.yaml"
        )
        updated_obj = yaml.safe_load(updated_obj.output)
        updated_obj["tags"]["version"] == "updated"

        # normal CLargs overriding file update
        updated_obj = self.cmd(
            "az ml registry update -g testrg --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/registry/registry_valid_cli_test_updated.yaml --tags version=updatedAgain"
        )
        updated_obj = yaml.safe_load(updated_obj.output)
        updated_obj["tags"]["version"] == "updatedAgain"

        # Failure test to ensure mutex of --file and --set
        updated_obj = self.cmd(
            "az ml registry update -g testrg --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/registry/registry_valid_cli_test_updated.yaml  --set tags.version=notUpdated"
        )
        updated_obj = yaml.safe_load(updated_obj.output)
        updated_obj["tags"]["version"] == "updatedAgain"

        # No-file update using --set
        updated_obj = self.cmd(
            "az ml registry update -g testrg --name registryUpdateTest  --set tags.version=updatedYetAgain"
        )
        updated_obj = yaml.safe_load(updated_obj.output)
        updated_obj["tags"]["version"] == "updatedYetAgain"

        # delete registry
        del_result = self.cmd(
            f"az ml registry delete --debug -g testrg --name registryUpdateTest"
        )
        assert del_result.output == ""


