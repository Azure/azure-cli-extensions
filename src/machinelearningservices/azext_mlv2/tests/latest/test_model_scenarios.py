# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import os

import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest
from azext_mlv2.tests.util import assert_same

from azure.ai.ml._artifacts._constants import ARTIFACT_ORIGIN
from azure.ai.ml.constants._common import AssetTypes

from ..util import private_flag


class ModelScenarioTest(MLBaseScenarioTest):
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_no_workspace_no_registry(self) -> None:
        for base_command in ["az ml model list", "az ml model show -n abc", "az ml model create -n abc"]:
            with pytest.raises(Exception) as exp:
                dep_obj = self.cmd(f'{base_command} --workspace-name="" --registry-name=""')
            assert "one the following arguments are required: [--workspace-name/-w, --registry-name]" in str(exp.value)

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model(self) -> None:
        model_obj = self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_full.yml --name {modelName} --tags abc=456 foo=bar -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert model_obj["description"] == "this is my test model"
        assert "lightgbm_mlflow_model" in model_obj["path"]
        assert ARTIFACT_ORIGIN in model_obj["path"]
        assert model_obj["tags"]["abc"] == "456"
        assert model_obj["tags"]["foo"] == "bar"

        model_show_job = self.cmd("az ml model show --name {modelName} --version 3 -g testrg -w testworkspace")
        model_show_job = yaml.safe_load(model_show_job.output)
        assert_same(model_obj, model_show_job)

        model_local_obj = self.cmd(
            "az ml model create --path ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model.pkl --name {modelName} --version 5 --tags abc=789 -g testrg -w testworkspace"
        )
        model_local_obj = yaml.safe_load(model_local_obj.output)
        assert model_local_obj["name"] == self.kwargs.get("modelName", None)
        assert "model.pkl" in model_local_obj["path"]
        assert model_local_obj["tags"]["abc"] == "789"

        model_local_show_job = self.cmd("az ml model show --name {modelName} --version 5 -g testrg -w testworkspace")
        model_local_show_job = yaml.safe_load(model_local_show_job.output)
        assert_same(model_local_obj, model_local_show_job)

        # list model
        model = self.cmd("az ml model list --max-results 1 -g testrg -w testworkspace")
        assert len(yaml.safe_load(model.output)) == 1

        # archive and restore model version
        model_archive_obj = self.cmd("az ml model archive --name {modelName} --version 3 -g testrg -w testworkspace")
        assert model_archive_obj.output == ""

        model_restore_obj = self.cmd("az ml model restore --name {modelName} --version 3 -g testrg -w testworkspace")
        assert model_restore_obj.output == ""

        # archive and restore model
        model_archive_obj = self.cmd("az ml model archive --name {modelName} -g testrg -w testworkspace")
        assert model_archive_obj.output == ""

        model_restore_obj = self.cmd("az ml model restore --name {modelName} -g testrg -w testworkspace")
        assert model_restore_obj.output == ""

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_with_stage(self) -> None:
        model_obj = self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_with_stage.yml --name {modelName} --tags abc=456 foo=bar -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert model_obj["description"] == "this is my test model with stage"
        assert model_obj["stage"] == "Production"
        assert "lightgbm_mlflow_model" in model_obj["path"]
        assert ARTIFACT_ORIGIN in model_obj["path"]
        assert model_obj["tags"]["abc"] == "456"
        assert model_obj["tags"]["foo"] == "bar"

        model_show_job = self.cmd("az ml model show --name {modelName} --version 3 -g testrg -w testworkspace")
        model_show_job = yaml.safe_load(model_show_job.output)
        assert_same(model_obj, model_show_job)

        # list model
        models = self.cmd("az ml model list --name {modelName} --stage Production -g testrg -w testworkspace")
        models = yaml.safe_load(models.output)
        assert len(models) == 1
        model = models[0]
        assert "stage" in model
        assert model["stage"] == "Production"

    def test_model_list(self) -> None:
        models = self.cmd("az ml model list -g testrg -w testworkspace")
        models = yaml.safe_load(models.output)
        for model in models:
            assert len(model.keys()) == 9
            assert model["name"]
            assert model["latest version"]
            assert "id" in model
            assert "stage" in model
            assert "version" not in model
            assert "model type" not in model
            assert "path" not in model

        if len(models) > 0:
            first_model = models[0]
            model_name = first_model["name"]
            model_name_obj = self.cmd(f"az ml model list --name {model_name} -g testrg -w testworkspace")
            model_name_obj = yaml.safe_load(model_name_obj.output)
            assert "name" in model_name_obj[0]
            assert "version" in model_name_obj[0]
            assert "model type" in model_name_obj[0]
            assert "path" in model_name_obj[0]
            assert "latest version" not in model_name_obj[0]
            assert "id" in model_name_obj[0]
            assert "properties" in model_name_obj[0]
            assert "description" in model_name_obj[0]
            assert "creation_context" in model_name_obj[0]
            assert "tags" in model_name_obj[0]

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_remote_path(self) -> None:
        model_obj = self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_full.yml --name {modelName} -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        self.kwargs.update({"path": model_obj["path"]})
        model_remote_obj = self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_path.yml --name {modelName2} --set path={path} -g testrg -w testworkspace"
        )
        model_remote_obj = yaml.safe_load(model_remote_obj.output)
        model_remote_obj["path"] == model_obj["path"]

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_without_yml(self) -> None:

        model_obj = self.cmd(
            "az ml model create --name {modelName} --path ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model.pkl --version 1 --description bla -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert "model.pkl" in model_obj["path"]
        assert ARTIFACT_ORIGIN in model_obj["path"]
        assert model_obj["description"] == "bla"

        model_show_job = self.cmd("az ml model show --name {modelName} --version 1 -g testrg -w testworkspace")
        model_show_job = yaml.safe_load(model_show_job.output)
        assert_same(model_obj, model_show_job)

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_update_stage(self) -> None:

        model_obj = self.cmd(
            "az ml model create --name {modelName} --path ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model.pkl --version 1 --stage Development -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert "model.pkl" in model_obj["path"]
        assert ARTIFACT_ORIGIN in model_obj["path"]
        assert model_obj["stage"] == "Development"

        model_show_job = self.cmd("az ml model show --name {modelName} --version 1 -g testrg -w testworkspace")
        model_show_job = yaml.safe_load(model_show_job.output)
        assert_same(model_obj, model_show_job)

        model_obj = self.cmd(
            "az ml model update --name {modelName} --version 1 --stage Production -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert model_obj["stage"] == "Production"

        model_show_job = self.cmd("az ml model show --name {modelName} --version 1 -g testrg -w testworkspace")
        model_show_job = yaml.safe_load(model_show_job.output)
        assert_same(model_obj, model_show_job)

    def test_model_datastore_uri(self) -> None:
        """
        Re-record instructions: In order to re-record this test create a job run that outputs a model. Go into datastores
        navigate to the datastore where the run output is stored (default datastore will be workspaceblob). Copy the
        path from the root of the datastore folder to the model folder/file. Replace the harcoded path parameter in the create commands
         using the following shortform uri form: azureml://datastores/<name-of-datastore>/paths/<path-from-root-to-model-folder/file>
        **Note:** For AutoML this path will be
        azureml://datastores/workspaceartifactstore/paths/ExperimentRun/dcid.<Parent_Run_ID>_<child_index>/outputs/
        """
        modelNameFolder = self.kwargs.get("modelName", None) + "-folder-1"
        modelNameFile = self.kwargs.get("modelName", None) + "-file-1"
        self.kwargs.update(
            {
                "modelNameFolder": modelNameFolder,
                "modelNameFile": modelNameFile,
                "folderVersion": 1,
                "fileVersion": 1,
            }
        )
        model_obj_folder = self.cmd(
            "az ml model create --name {modelNameFolder} --version {folderVersion} --path  azureml://datastores/workspaceartifactstore/paths/ExperimentRun/dcid.quirky_knee_46ds1xhcgt_1/outputs -g testrg -w testworkspace"
        )
        model_obj_folder = yaml.safe_load(model_obj_folder.output)
        assert model_obj_folder["name"] == self.kwargs.get("modelNameFolder", None)
        assert model_obj_folder["type"] == AssetTypes.CUSTOM_MODEL
        model_show_job_folder = self.cmd("az ml model show --name {modelNameFolder} --version {folderVersion} -g testrg -w testworkspace")
        model_show_job_folder = yaml.safe_load(model_show_job_folder.output)
        assert_same(model_obj_folder, model_show_job_folder)

        model_obj_file = self.cmd(
            "az ml model create --name {modelNameFile} --version {fileVersion} --path azureml://datastores/workspaceartifactstore/paths/ExperimentRun/dcid.quirky_knee_46ds1xhcgt_1/outputs/model.pkl -g testrg -w testworkspace"
        )
        model_obj_file = yaml.safe_load(model_obj_file.output)
        assert model_obj_file["name"] == self.kwargs.get("modelNameFile", None)
        assert model_obj_file["type"] == AssetTypes.CUSTOM_MODEL
        model_show_job_file = self.cmd("az ml model show --name {modelNameFile} --version {fileVersion} -g testrg -w testworkspace")
        model_show_job_file = yaml.safe_load(model_show_job_file.output)
        assert_same(model_obj_file, model_show_job_file)

    def test_model_job_uri(self) -> None:
        """
        Re-record instructions: In order to re-record this test create a job run that outputs a model to either a default output folder or a named output folder.
        Copy the run id of the job. Navigate to the output + log tab and locate the correct output folder. Copy the path from the root of the output tab to the
        location of the model folder/file. Replace the harcoded path parameter in the create commands with the following job uri format:
        azureml://jobs/<job-run-id>/outputs/<name-of-output-folder>/paths/<path-from-root-to-model-folder/file>. Note that if your output tab is the default then the name with be "artifacts"
        for <name-of-output-folder>
        """
        modelNameFolder = self.kwargs.get("modelName", None) + "-folder-2"
        modelNameFile = self.kwargs.get("modelName", None) + "-file-2"
        self.kwargs.update(
            {"modelNameFolder": modelNameFolder, "modelNameFile": modelNameFile, "folderVersion": 2, "fileVersion": 1}
        )
        model_obj_folder = self.cmd(
            "az ml model create --name {modelNameFolder} --version {folderVersion} --path azureml://jobs/quirky_knee_46ds1xhcgt_1/outputs/artifacts -g testrg -w testworkspace"
        )
        model_obj_folder = yaml.safe_load(model_obj_folder.output)
        assert model_obj_folder["name"] == self.kwargs.get("modelNameFolder", None)
        assert model_obj_folder["type"] == AssetTypes.CUSTOM_MODEL
        model_show_job_folder = self.cmd("az ml model show --name {modelNameFolder} --version {folderVersion} -g testrg -w testworkspace")
        model_show_job_folder = yaml.safe_load(model_show_job_folder.output)
        assert_same(model_obj_folder, model_show_job_folder)

        model_obj_file = self.cmd(
            "az ml model create --name {modelNameFile} --version {fileVersion} --path azureml://jobs/quirky_knee_46ds1xhcgt_1/outputs/artifacts/outputs/model.pkl -g testrg -w testworkspace"
        )
        model_obj_file = yaml.safe_load(model_obj_file.output)
        assert model_obj_file["name"] == self.kwargs.get("modelNameFile", None)
        assert model_obj_file["type"] == AssetTypes.CUSTOM_MODEL
        model_show_job_file = self.cmd("az ml model show --name {modelNameFile} --version {fileVersion} -g testrg -w testworkspace")
        model_show_job_file = yaml.safe_load(model_show_job_file.output)
        assert_same(model_obj_file, model_show_job_file)

    def test_model_mlflow_uri(self) -> None:
        """
        Re-record instructions: In order to re-record this test create a job run that outputs a model using mlflow.autolog(). Copy the run id
        of the job. Navigate to the output + log tab of the run where the model was outputed. Copy the path from the root of the output tab to the
        location of the model folder. Note that mlflow uri's can only register model folders and not model files. Replace the harcoded path parameter
        in the create command with the following mlflow uri format: runs:/<job-run-id>/<path-from-root-to-model-folder>
        """
        modelNameFolder = self.kwargs.get("modelName", None) + "-folder-3"
        self.kwargs.update(
            {
                "modelNameFolder": modelNameFolder,
                "folderVersion": 2,
            }
        )
        model_obj_folder = self.cmd(
            "az ml model create --name {modelNameFolder} --version {folderVersion} --path runs:/quirky_knee_46ds1xhcgt_1/outputs --type mlflow_model -g testrg -w testworkspace"
        )
        model_obj_folder = yaml.safe_load(model_obj_folder.output)
        assert model_obj_folder["name"] == self.kwargs.get("modelNameFolder", None)
        assert model_obj_folder["type"] == AssetTypes.MLFLOW_MODEL
        model_show_job_folder = self.cmd("az ml model show --name {modelNameFolder} --version {folderVersion} -g testrg -w testworkspace")
        model_show_job_folder = yaml.safe_load(model_show_job_folder.output)
        assert_same(model_obj_folder, model_show_job_folder)

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_download_mlflow(self) -> None:
        self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_full.yml --name lightgbm_predict --tags abc=456 foo=bar -g testrg -w testworkspace"
        )
        model_dowload_cmd = self.cmd("az ml model download -n lightgbm_predict -v 3 -p downloaded -g testrg -w testworkspace")
        download_cmd_out = yaml.safe_load(model_dowload_cmd.output)
        assert download_cmd_out is None
        wd = os.path.join(os.getcwd(), "downloaded/lightgbm_predict")
        files = next(os.walk(wd))
        assert download_cmd_out is None
        assert "lightgbm_mlflow_model" in files[1]

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_download_local_upload_singlefile(self) -> None:
        self.cmd(
            "az ml model create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_full.yml --name mir_test_model --tags abc=456 foo=bar -g testrg -w testworkspace"
        )
        model_dowload_cmd = self.cmd("az ml model download -n mir_test_model -v 3 -p downloaded -g testrg -w testworkspace")
        download_cmd_out = yaml.safe_load(model_dowload_cmd.output)
        wd = os.path.join(os.getcwd(), "downloaded/mir_test_model")
        files = next(os.walk(wd))
        assert download_cmd_out is None
        assert "lightgbm_mlflow_model" in files[1]

    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_model_anon_with_batch(self) -> None:
        """
        To re record this test please create the batch endpoint bla1 and underlying compute.
        az ml compute create -n cpu-cluster -t AmlCompute --size Standard_DS11_v2 -g testrg -w testworkspace
        az ml batch-endpoint create -n bla1 -g testrg -w testworkspace
        **Note:** This test may fail because of code hash mismatch. It is normal, because hash is calculated from
        the full file path. Just see, what hash is in failed test on the gate and set it in the cassette file.
        """
        model_cmd = self.cmd(
            "az ml batch-deployment create -n batch-dep1 -e bla1 --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/deployments/batch/batch_deployment_anon_model.yaml -g testrg -w testworkspace"
        )
        model_cmd_out = yaml.safe_load(model_cmd.output)
        assert "bd64529f9a171e743eea068b71027c76" in model_cmd_out["model"]

    def test_model_create_in_registry(self) -> None:
        """
        To re record this model we have to increment the version as the model cannot be removed from registry;
        the attempt to create model if this version is already present, will result in TypeError.

        **Note:** Due to tread pool executor, all the responses cannot be recorded, even if we will create
        file manually, it will still not be read and as consequence we will get live request and 409 errors.
        To avoid thread competition, the model_full.yml was replaced by model_minimal.yml.
        """
        model_obj = self.cmd(
            "az ml model create -n model_version_e2e10  -v 14 -f ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_minimal.yml --registry-name testFeed -g testrg -w testworkspace"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert len(model_obj) > 1

    def test_model_show_and_list_in_registry(self) -> None:
        model_obj_get = self.cmd("az ml model show -n model_version_e2e -v 1 --registry-name testFeed -g testrg -w testworkspace")
        model_obj_get = yaml.safe_load(model_obj_get.output)
        assert len(model_obj_get) > 1
        assert model_obj_get["id"] == "azureml://registries/testFeed/models/model_version_e2e/versions/1"

        model_obj_list = self.cmd("az ml model list -o table --registry-name testFeed -g testrg -w testworkspace")
        model_obj_list = yaml.safe_load(model_obj_list.output)
        assert len(model_obj_list) > 1

    def test_model_create_in_registry_no_storage(self) -> None:
        # this will test creation of model in a registry which was created without a storage account. If you want to rerecord create a registry without storage
        # and then use that registry
        try:
            model_obj = self.cmd(
                "az ml model create -n model_version_e2e10  -v 2 -f ./src/machinelearningservices/azext_mlv2/tests/test_configs/model/model_full.yml --registry-name registry-nostore -g testrg -w testworkspace"
            )
        except:
            assert True
        else:
            assert False

    def test_model_archive_in_registry(self) -> None:

        env_archive_obj = self.cmd(
            "az ml model archive  -n model_version_e2e -v 1  --registry-name dsvm-test -g testrg -w testworkspace"
        )
        assert env_archive_obj.output == ""

    def test_model_restore_in_registry(self) -> None:

        env_restore_obj = self.cmd(
            "az ml model restore  -n model_version_e2e -v 1  --registry-name dsvm-test -g testrg -w testworkspace"
        )
        assert env_restore_obj.output == ""






