# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest


class FeatureStoreScenarioTest(MLBaseScenarioTest):
    def test_featureStore(self) -> None:
        self.kwargs["resourceGroup"] = "test-rg-000006"

        fs_obj = self.cmd(
            "az ml feature-store create -n {workspaceName} --resource-group {resourceGroup} --subscription {subscription} --no-wait -f ./src/machinelearningservices/azext_mlv2/tests/test_configs/featurestore/featurestore.yaml"
        )
        self.assertEqual(fs_obj.output, "")
        if not self.is_live:
            from time import sleep
            
            sleep(800)  # This sleep is only required for fresh recording of cassette

        fs_obj_show = self.cmd("az ml feature-store show --name {workspaceName} --resource-group {resourceGroup} --subscription {subscription}")
        fs_obj_show = yaml.safe_load(fs_obj_show.output)
        self.assertEqual(fs_obj_show["name"], self.kwargs.get("workspaceName", None))
        self.assertIsNotNone(fs_obj_show["application_insights"])
        self.assertIsNotNone(fs_obj_show["description"])
        self.assertIsNotNone(fs_obj_show["display_name"])
        self.assertFalse(fs_obj_show["hbi_workspace"])
        self.assertIsNotNone(fs_obj_show["identity"])
        self.assertIsNotNone(fs_obj_show["key_vault"])
        self.assertIsNotNone(fs_obj_show["location"])
        self.assertIsNotNone(fs_obj_show["managed_network"])
        self.assertIsNotNone(fs_obj_show["materialization_identity"])
        self.assertIsNotNone(fs_obj_show["name"])
        self.assertIsNotNone(fs_obj_show["offline_store"])
        self.assertIsNotNone(fs_obj_show["public_network_access"])
        self.assertIsNotNone(fs_obj_show["resource_group"])
        self.assertIsNotNone(fs_obj_show["storage_account"])
        self.assertIsNotNone(fs_obj_show["tags"])

        fs_obj_list = self.cmd("az ml feature-store list --resource-group {resourceGroup} --subscription {subscription}")
        self.assertGreater(len(fs_obj_list.output), 0)

        self.kwargs["updatedDescription"] = "description2"
        self.kwargs["updatedDisplayName"] = "display_name2"
        self.kwargs["public_network_access"] = "Disabled"
        fs_obj_update = self.cmd(
            "az ml feature-store update -n {workspaceName} --display-name {updatedDisplayName} --public-network-access {public_network_access} --set description={updatedDescription} -g {resourceGroup} --subscription {subscription} --no-wait"
        )
        self.assertEqual(fs_obj_update.output, "")
        if not self.is_live:
            from time import sleep

            sleep(100)  # This sleep is only required for fresh recording of cassette

        fs_obj_show = self.cmd(
            "az ml feature-store show --resource-group {resourceGroup} --name {workspaceName} --subscription {subscription}"
        )
        fs_obj_show = yaml.safe_load(fs_obj_show.output)
        self.assertEqual(fs_obj_show["description"], self.kwargs.get("updatedDescription", None))
        self.assertEqual(fs_obj_show["display_name"], self.kwargs.get("updatedDisplayName", None))
        self.assertEqual(fs_obj_show["public_network_access"], self.kwargs.get("public_network_access", None))

        fs_obj_delete = self.cmd(
            "az ml feature-store delete --resource-group {resourceGroup} --subscription {subscription} --name {workspaceName} --yes --no-wait"
        )
        self.assertEqual(fs_obj_delete.output, "")
        
    def test_featurestore_managednetwork_provision(self) -> None:
        self.kwargs["resourceGroup"] = "test-rg-000006"

        workspaceName = self.kwargs.get("workspaceName", None)
        workspaceName += "_mvnetprov"
        resourceGroup = self.kwargs.get("resourceGroup", None)
        subscription = self.kwargs.get("subscription", None)
        fs_obj = self.cmd(
            f"az ml feature-store create -n {workspaceName} --resource-group {resourceGroup} --subscription {subscription} --managed-network allow_internet_outbound --no-wait --location centraluseuap"
        )
        self.assertEqual(fs_obj.output, "")
        if not self.is_live:
            from time import sleep

            sleep(120)  # This sleep is only required for fresh recording of cassette

        fs_obj_show = self.cmd(f"az ml feature-store show -n {workspaceName} --resource-group {resourceGroup} --subscription {subscription}")
        fs_obj_show = yaml.safe_load(fs_obj_show.output)
        self.assertEqual(fs_obj_show["name"], workspaceName)
        self.assertIsNotNone(fs_obj_show["application_insights"])
        self.assertIsNotNone(fs_obj_show["description"])
        self.assertIsNotNone(fs_obj_show["display_name"])
        self.assertFalse(fs_obj_show["hbi_workspace"])
        self.assertIsNotNone(fs_obj_show["identity"])
        self.assertIsNotNone(fs_obj_show["key_vault"])
        self.assertIsNotNone(fs_obj_show["location"])
        self.assertIsNotNone(fs_obj_show["managed_network"])
        self.assertIsNotNone(fs_obj_show["materialization_identity"])
        self.assertIsNotNone(fs_obj_show["name"])
        self.assertIsNotNone(fs_obj_show["offline_store"])
        self.assertIsNotNone(fs_obj_show["public_network_access"])
        self.assertIsNotNone(fs_obj_show["resource_group"])
        self.assertIsNotNone(fs_obj_show["storage_account"])
        self.assertIsNotNone(fs_obj_show["tags"])
        self.assertEqual(fs_obj_show["managed_network"]["isolation_mode"], "allow_internet_outbound")

        fs_obj_prov_net = self.cmd(f"az ml feature-store provision-network -n {workspaceName} -g {resourceGroup} --subscription {subscription}")
        fs_obj_prov_net = yaml.safe_load(fs_obj_prov_net.output)
        self.assertEqual(fs_obj_prov_net["status"], "Active")
        self.assertFalse(fs_obj_prov_net["sparkReady"])

        fs_obj_show = self.cmd(f"az ml feature-store show -n {workspaceName} -g {resourceGroup} --subscription {subscription}")
        fs_obj_show = yaml.safe_load(fs_obj_show.output)
        self.assertEqual(fs_obj_show["managed_network"]["status"]["status"], "Active")
        self.assertFalse(fs_obj_show["managed_network"]["status"]["spark_ready"])

        fs_obj_delete = self.cmd(
            f"az ml feature-store delete --resource-group {resourceGroup} --subscription {subscription} --name {workspaceName} --yes --no-wait"
        )
        self.assertEqual(fs_obj_delete.output, "")


