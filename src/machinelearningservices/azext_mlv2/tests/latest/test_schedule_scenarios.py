# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# ---------------------------------------------------------
import pydash
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest
from azext_mlv2.tests.util import assert_same

from azure.ai.ml.constants._common import MAX_LIST_CLI_RESULTS


@pytest.mark.skip(reason="TODO: 2161301, Test is failing when executing from recording in ADO")
class ScheduleScenarioTest(MLBaseScenarioTest):
    def test_cron_schedule_with_file(self) -> None:
        schedule_name_suffix = "-1"
        self.kwargs["schedule_name1"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_cron_schedule_with_file_reference.yml --name {schedule_name1}"
        schedule_obj = self.cmd(create_schedule)

        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert schedule_obj["name"] == self.kwargs.get("schedule_name1", None)
        assert schedule_obj["is_enabled"] is True
        assert schedule_obj["provisioning_state"] == "Succeeded"
        assert schedule_obj["trigger"] == {
            "end_time": "2023-06-10 10:15:00",
            "expression": "15 10 * * 1",
            "start_time": "2023-03-10 10:15:00",
            "time_zone": "Pacific Standard Time",
            "type": "cron",
        }
        expected_job = {
            "compute": "azureml:cpu-cluster",
            "display_name": "hello_pipeline_abc",
            "experiment_name": "Default",
            "inputs": {"hello_string_top_level_input": {"path": "${{name}}"}},
            "jobs": {
                "a": {
                    "inputs": {"hello_string": {"path": "${{parent.inputs.hello_string_top_level_input}}"}},
                    "type": "command",
                },
                "b": {
                    "type": "command",
                },
                "c": {
                    "inputs": {"world_input": {"path": "${{parent.jobs.b.outputs.world_output}}"}},
                    "type": "command",
                },
            },
            "status": "NotStarted",
            "type": "pipeline",
        }
        assert (
            pydash.omit(schedule_obj["create_job"], *["jobs.a.component", "jobs.b.component", "jobs.c.component"])
            == expected_job
        )

        show_schedule = "az ml schedule show --name {schedule_name1}"
        schedule_show_obj = self.cmd(show_schedule)
        schedule_show_obj = yaml.safe_load(schedule_show_obj.output)
        assert_same(
            schedule_obj,
            schedule_show_obj,
        )

        updated_schedule_command = (
            'az ml schedule update --name {schedule_name1} --set trigger.expression="*/15 * * * 1"'
        )
        schedule_update_obj = self.cmd(updated_schedule_command)
        schedule_update_obj = yaml.safe_load(schedule_update_obj.output)

        assert schedule_update_obj["trigger"]["expression"] == "*/15 * * * 1"
        assert_same(
            schedule_show_obj,
            schedule_update_obj,
            filter=[
                "creation_context",
                "trigger.expression",
            ],
        )

        disable_schedule_command = "az ml schedule disable --name {schedule_name1}"
        schedule_disable_obj = self.cmd(disable_schedule_command)
        schedule_disable_obj = yaml.safe_load(schedule_disable_obj.output)
        assert schedule_disable_obj["is_enabled"] is False

        enable_schedule_command = "az ml schedule enable --name {schedule_name1}"
        schedule_enable_obj = self.cmd(enable_schedule_command)
        schedule_enable_obj = yaml.safe_load(schedule_enable_obj.output)
        assert schedule_enable_obj["is_enabled"] is True

    def test_schedule_delete(self) -> None:
        schedule_name_suffix = "-2"
        self.kwargs["schedule_name2"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_cron_schedule_with_file_reference.yml --name {schedule_name2}"
        schedule_obj = self.cmd(create_schedule)
        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert schedule_obj["name"] == self.kwargs.get("schedule_name2", None)
        assert schedule_obj["is_enabled"] is True

        delete_schedule_command = "az ml schedule delete --name {schedule_name2}"
        with pytest.raises(Exception) as exc_info:
            self.cmd(delete_schedule_command)
        exception_raised = exc_info.value
        assert "Cannot delete an active trigger" in str(exception_raised)

        disable_schedule_command = "az ml schedule disable --name {schedule_name2}"
        schedule_enable_obj = self.cmd(disable_schedule_command)
        schedule_enable_obj = yaml.safe_load(schedule_enable_obj.output)
        assert schedule_enable_obj["is_enabled"] is False

        delete_schedule_command = "az ml schedule delete --name {schedule_name2}"
        schedule_delete_msg = self.cmd(delete_schedule_command)
        schedule_delete_msg = schedule_delete_msg.output
        assert schedule_delete_msg == ""

        show_schedule = "az ml schedule show --name {schedule_name2}"
        # SystemExit 3 'not found'
        with self.assertRaisesRegex(SystemExit, "3"):
            self.cmd(show_schedule)

    def test_recurrence_schedule_no_pattern(self) -> None:
        schedule_name_suffix = "-3"
        self.kwargs["schedule_name3"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_recurrence_schedule_no_pattern.yml --name {schedule_name3}"
        schedule_obj = self.cmd(create_schedule)
        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert schedule_obj["trigger"] == {
            "end_time": "2022-05-12 10:15:00",
            "frequency": "day",
            "interval": 1,
            "schedule": {"hours": [], "minutes": []},
            "start_time": "2022-05-10 10:15:00",
            "time_zone": "Pacific Standard Time",
            "type": "recurrence",
        }

        disable_schedule_command = "az ml schedule disable --name {schedule_name3}"
        schedule_enable_obj = self.cmd(disable_schedule_command)
        schedule_enable_obj = yaml.safe_load(schedule_enable_obj.output)
        assert schedule_enable_obj["is_enabled"] is False

    def test_recurrence_schedule_with_pattern(self) -> None:
        schedule_name_suffix = "-4"
        self.kwargs["schedule_name4"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_recurrence_schedule_with_pattern.yml --name {schedule_name4}"
        schedule_obj = self.cmd(create_schedule)
        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert schedule_obj["trigger"] == {
            "frequency": "week",
            "interval": 1,
            "schedule": {"hours": [10], "minutes": [15], "week_days": ["monday"]},
            "start_time": "2022-05-10 10:15:00",
            "time_zone": "Pacific Standard Time",
            "type": "recurrence",
        }

        disable_schedule_command = "az ml schedule disable --name {schedule_name4}"
        schedule_enable_obj = self.cmd(disable_schedule_command)
        schedule_enable_obj = yaml.safe_load(schedule_enable_obj.output)
        assert schedule_enable_obj["is_enabled"] is False

    def test_schedule_with_remote_job(self) -> None:
        job_name_suffix = "-schedule"
        self.kwargs["schedule_pipeline_job"] = "{}{}".format(self.kwargs.get("pipelineJobName", None), job_name_suffix)
        create_job_command = "az ml job create -f ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/pipeline_jobs/hello-pipeline-abc.yml --name {schedule_pipeline_job}"
        job_obj = self.cmd(create_job_command)
        job_obj = yaml.safe_load(job_obj.output)

        schedule_name_suffix = "-5"
        self.kwargs["schedule_name5"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        self.kwargs["schedule_pipeline_job"] = job_obj["id"]
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_cron_schedule_with_arm_id.yml --name {schedule_name5} --set create_job={schedule_pipeline_job}"
        schedule_obj = self.cmd(create_schedule)
        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert pydash.omit(schedule_obj["create_job"]) == {
            "experiment_name": "Default",
            "id": "azureml:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/000000000000000/providers/Microsoft.MachineLearningServices/workspaces/sdk-master/jobs/test-pjob-000021-schedule",
            "resourceGroup": "000000000000000",
            "status": "NotStarted",
            "type": "pipeline",
        }

        updated_schedule_command = (
            'az ml schedule update --name {schedule_name5} --set trigger.expression="*/15 * * * 1"'
        )
        schedule_update_obj = self.cmd(updated_schedule_command)
        schedule_update_obj = yaml.safe_load(schedule_update_obj.output)

        assert schedule_update_obj["trigger"]["expression"] == "*/15 * * * 1"
        assert_same(
            schedule_obj,
            schedule_update_obj,
            filter=[
                "creation_context",
                "trigger.expression",
            ],
        )

    def test_schedule_list(self) -> None:
        schedule_name_suffix = "scheduleNameNumber_"
        total_schedules = 2
        for i in range(total_schedules):
            self.cmd(
                f"az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_cron_schedule_with_file_reference.yml --name {schedule_name_suffix}{i}"
            )

        schedule_list_obj = self.cmd("az ml schedule list --max-results 1")
        schedule_list_yml = yaml.safe_load(schedule_list_obj.output)
        assert len(schedule_list_yml) == 1

        default_job_list_obj = self.cmd("az ml schedule list --max-results 5")
        default_job_list_yml = yaml.safe_load(default_job_list_obj.output)
        assert len(default_job_list_yml) >= total_schedules
        assert len(default_job_list_yml) <= MAX_LIST_CLI_RESULTS

        for i in range(total_schedules):
            self.cmd(f"az ml schedule disable --name {schedule_name_suffix}{i}")

    def test_schedule_trigger(self) -> None:
        schedule_name_suffix = "-6"
        self.kwargs["schedule_name6"] = "{}{}".format(self.kwargs.get("scheduleName", None), schedule_name_suffix)
        create_schedule = "az ml schedule create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/schedule/hello_recurrence_schedule_with_pattern.yml --name {schedule_name6}"
        schedule_obj = self.cmd(create_schedule)
        schedule_obj = yaml.safe_load(schedule_obj.output)
        assert schedule_obj["is_enabled"] is True

        trigger_schedule_command = "az ml schedule trigger --name {schedule_name6}"
        schedule_trigger_obj = self.cmd(trigger_schedule_command)
        schedule_trigger_obj = yaml.safe_load(schedule_trigger_obj.output)
        assert schedule_trigger_obj["job_name"] is not None
        assert schedule_trigger_obj["schedule_action_type"] == "CreateJob"
