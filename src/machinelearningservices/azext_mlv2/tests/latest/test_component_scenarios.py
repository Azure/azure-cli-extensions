# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# ---------------------------------------------------------
import json
from typing import Any, Dict
from unittest.mock import patch

import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest
from knack.cli import CLIError
from msrest.exceptions import ClientRequestError

from azure.ai.ml.constants._common import AZUREML_PRIVATE_FEATURES_ENV_VAR
from azure.ai.ml.dsl._utils import environment_variable_overwrite
from azure.ai.ml.exceptions import ValidationException
from azure.cli.testsdk.scenario_tests.decorators import AllowLargeResponse

from ..util import private_flag


@pytest.fixture()
def enable_private_preview_features():
    with environment_variable_overwrite(AZUREML_PRIVATE_FEATURES_ENV_VAR, "true"):
        yield


@pytest.mark.usefixtures("enable_private_preview_features")
class ComponentScenarioTest(MLBaseScenarioTest):
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_component_no_workspace_no_registry(self) -> None:
        for base_command in [
            "az ml component list",
            "az ml component show -n abc",
            "az ml component create -n abc -f xyz.yml",
        ]:
            with pytest.raises(Exception) as exp:
                dep_obj = self.cmd(f'{base_command} --workspace-name="" --registry-name=""')
            assert "one the following arguments are required: [--workspace-name/-w, --registry-name]" in str(exp.value)

    def assert_component_create_get_list(self, path, version, _type):
        component_obj = self.cmd(
            f"az ml component create --file {path} --name {{componentName}} --set display_name={{componentName}} -g testrg -w testworkspace"
        )
        component_obj = yaml.safe_load(component_obj.output)
        assert component_obj["version"] == version
        assert component_obj["type"] == _type
        assert component_obj["name"] == self.kwargs.get("componentName", None)
        assert component_obj["display_name"] == self.kwargs.get("componentName", None)
        assert component_obj["id"]
        assert "creation_context" in component_obj

        # show component
        component_show_obj = self.cmd(f"az ml component show --name {{componentName}} --version {version} -g testrg -w testworkspace")
        component_show_obj = yaml.safe_load(component_show_obj.output)
        assert component_obj == component_show_obj
        assert "creation_context" in component_obj

        # list components
        components = self.cmd("az ml component list --max-results 1 -g testrg -w testworkspace")
        assert len(yaml.safe_load(components.output)) != 0
        return component_obj

    @AllowLargeResponse()
    def test_component(self):
        component_obj = self.assert_component_create_get_list(
            path="./src/machinelearningservices/azext_mlv2/tests/test_configs/components/helloworld_component.yml",
            version="0.0.1",
            _type="command",
        )
        # list component versions
        component_versions = self.cmd("az ml component list --name {componentName} -g testrg -w testworkspace")
        component_versions = yaml.safe_load(component_versions.output)
        assert len(component_versions) == 1
        component_list_obj = component_versions[0]
        assert component_list_obj == component_obj

        # update component
        component_update_obj = self.cmd(
            "az ml component update --name {componentName} -v 0.0.1 --set display_name=NewComponent --verbose -g testrg -w testworkspace"
        )
        component_update_obj = yaml.safe_load(component_update_obj.output)
        assert component_update_obj["display_name"] == "NewComponent"

        # archive component version
        component_archive_obj = self.cmd("az ml component archive -n {componentName} -v 0.0.1 -g testrg -w testworkspace")
        assert component_archive_obj.output == ""

        # restore component version
        component_restore_obj = self.cmd("az ml component restore -n {componentName} -v 0.0.1 -g testrg -w testworkspace")
        assert component_restore_obj.output == ""

        # archive component
        component_archive_obj = self.cmd("az ml component archive -n {componentName} -g testrg -w testworkspace")
        assert component_archive_obj.output == ""

        # restore component
        component_restore_obj = self.cmd("az ml component restore -n {componentName} -g testrg -w testworkspace")
        assert component_restore_obj.output == ""

    @AllowLargeResponse()
    def test_automl_component(self):
        self.assert_component_create_get_list(
            path="./src/machinelearningservices/azext_mlv2/tests/test_configs/components/automl/classification.yaml",
            version="1.0",
            _type="automl",
        )

    def test_component_show_registry(self) -> None:
        env_obj = self.cmd("az ml component show -n 'HelloWorldRegistry' -v 0.0.1  --registry-name testFeed")
        env_obj = yaml.safe_load(env_obj.output)
        assert env_obj["id"] == "azureml://registries/testFeed/components/HelloWorldRegistry/versions/0.0.1"
        assert env_obj["name"] == "HelloWorldRegistry"

    def test_component_show_without_version_label(self) -> None:
        with pytest.raises(ClientRequestError) as error_info:
            env_obj = self.cmd("az ml component show -n 'HelloWorldRegistry' --registry-name testFeed")
        assert "Must provide either version or label." in str(error_info)

    def test_component_list_registry(self) -> None:
        env_obj = self.cmd("az ml component list -n 'HelloWorldRegistry' --registry-name testFeed")
        env_obj = yaml.safe_load(env_obj.output)
        assert len(env_obj) == 1

    def test_component_container_list_registry(self) -> None:
        env_obj = self.cmd("az ml component list --registry-name testFeed")
        env_obj = yaml.safe_load(env_obj.output)
        assert len(env_obj) > 1

    def test_component_archive_registry(self) -> None:
        env_obj = self.cmd("az ml component archive -n batchscore -v 1.0.12 --registry-name bani-reg-wentral")
        env_obj = yaml.safe_load(env_obj.output)
        assert env_obj is None

    def test_component_restore_registry(self) -> None:
        env_obj = self.cmd("az ml component restore -n batchscore -v 1.0.12 --registry-name bani-reg-wentral")
        env_obj = yaml.safe_load(env_obj.output)
        assert env_obj is None

    def get_result_obj(self, cmd_str: str) -> Dict[str, Any]:
        output = self.cmd(cmd_str).output
        if output:
            return json.loads(output)
        else:
            return {}

    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_component_validate_on_load(self) -> None:
        for target_file, target_field, target_message in [
            # on load
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/no_file.yml",
                "*",
                "No such file or directory",
            ),
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/non_dict.yml",
                "*",
                "Expect dict but get <class 'str'> after parsing yaml file",
            ),
        ]:
            with pytest.raises((ValidationException, CLIError)) as err:
                self.cmd("az ml component validate -g testrg -w testworkspace --file {}".format(target_file))
            assert target_message in str(err.value)
    
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_component_validate(self) -> None:
        for target_file, target_field, target_message in [
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/helloworld_component_with_blank_input_names.yml",
                "inputs.have blank",
                "'have blank' is not a valid parameter name",
            ),
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/helloworld_component_conflict_input_names.yml",
                "inputs.COMPONENT_IN_NUMBER",
                "which are equal ignore case.",
            ),
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/name_none.yml",
                "name",
                "Field may not be null.",
            ),
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/combo.yml",
                "name",
                "Field may not be null.",
            ),
            (
                "./src/machinelearningservices/azext_mlv2/tests/test_configs/components/invalid/combo.yml",
                "code",
                "",
            ),
        ]:
            error_msg_on_validate = self.get_result_obj(f"az ml component validate -g testrg -w testworkspace --file {target_file} -o json")
            messages = error_msg_on_validate["errors"]
            target_field_found = False
            for message in messages:
                if message["path"] == target_field:
                    assert target_message in message["message"]
                    target_field_found = True
            assert target_field_found, "target field {} not found in\n{}".format(target_field, json.dumps(messages))

    def test_component_with_short_resource_id(self) -> None:
        with private_flag():
            with pytest.raises((ValidationException, CLIError)) as exc_info:
                self.cmd(
                    "az ml component create  -f ./src/machinelearningservices/azext_mlv2/tests/test_configs/components/helloworld_component_registry_asset.yml -v 6 --registry-name testfeed"
                )
            exception_raised = exc_info.value
            assert (
                "Use fully qualified name to reference custom environments when creating assets in registry. The syntax for fully qualified names is azureml://registries/azureml/environments/{env-name}/versions/{version}"
                in str(exception_raised)
            )

    def test_component_git_path(self) -> None:
        with private_flag():
            component_obj = self.cmd(
                "az ml component create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/components/component_git_path.yml --name {componentName} --set display_name={componentName} -g testrg -w testworkspace"
            )
            component_obj = yaml.safe_load(component_obj.output)
            assert "version" in component_obj
            assert component_obj["type"] == "command"
            assert component_obj["name"] == self.kwargs.get("componentName", None)
            assert component_obj["display_name"] == self.kwargs.get("componentName", None)
            assert component_obj["id"]
            assert "creation_context" in component_obj
            assert "code" in component_obj

    def test_component_create_skip_validation(self) -> None:
        create_component_command = "az ml component create -f ./src/machinelearningservices/azext_mlv2/tests/test_configs/components/helloworld_component.yml -g testrg -w testworkspace"

        from azure.ai.ml.operations import ComponentOperations

        with patch.object(ComponentOperations, "_validate") as mock_validate:
            self.cmd(create_component_command + " --skip-validation")
            mock_validate.assert_not_called()
            self.cmd(create_component_command)
            mock_validate.assert_called_once()

    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_enable_internal_component(self):
        from azure.ai.ml.constants._common import AZUREML_INTERNAL_COMPONENTS_ENV_VAR
        from azure.ai.ml.dsl._utils import environment_variable_overwrite

        cmd_str = (
            "az ml component validate -g testrg -w testworkspace --file "
            "./src/machinelearningservices/azext_mlv2/tests/test_configs/internal/helloworld_component_scope.yml"
            " -o json"
        )
        with environment_variable_overwrite(AZUREML_INTERNAL_COMPONENTS_ENV_VAR, "False"):
            execution_result = self.cmd(cmd_str)
            validation_result = json.loads(execution_result.output)

            assert validation_result["result"] == "Failed"
            assert (
                "Internal components is a private feature in v2"
                ", please set environment variable" in validation_result["errors"][0]["message"]
            )

        with environment_variable_overwrite(AZUREML_INTERNAL_COMPONENTS_ENV_VAR, "True"):
            execution_result = self.cmd(cmd_str)
            validation_result = json.loads(execution_result.output)
            assert validation_result["result"] == "Succeeded"

    @pytest.mark.skip(reason="This test is not working yet")
    def test_show_internal_component(self):
        from azure.ai.ml.constants import AZUREML_INTERNAL_COMPONENTS_ENV_VAR
        from azure.ai.ml.dsl._utils import environment_variable_overwrite

        with environment_variable_overwrite(AZUREML_INTERNAL_COMPONENTS_ENV_VAR, "True"):
            component_obj_output = self.cmd(
                "az ml component create --file ./src/machinelearningservices/azext_mlv2/tests/test_configs/internal/helloworld_component_scope.yml -g testrg -w testworkspace"
            )
            component_obj = yaml.safe_load(component_obj_output.output)
            assert component_obj["type"] == "ScopeComponent"

            loaded_component_obj_output = self.cmd(
                "az ml component show --name {} --version {} -g testrg -w testworkspace".format(component_obj["name"], component_obj["version"])
            )
            loaded_component_obj = yaml.safe_load(loaded_component_obj_output.output)
            assert loaded_component_obj["type"] == "ScopeComponent"

        with environment_variable_overwrite(AZUREML_INTERNAL_COMPONENTS_ENV_VAR, "False"):
            with pytest.raises(
                ValidationException,
                match="Internal components is a private feature in v2, please set " "environment variable",
            ):
                self.cmd(
                    "az ml component show --name {} --version {} -g testrg -w testworkspace".format(
                        component_obj["name"], component_obj["version"]
                    )
                )

    @AllowLargeResponse()
    def test_create_pipeline_component(self):
        self.cassette.allow_playback_repeats = True
        self.assert_component_create_get_list(
            path="./src/machinelearningservices/azext_mlv2/tests/test_configs/components/helloworld_inline_pipeline_component.yml",
            version="1",
            _type="pipeline",
        )


