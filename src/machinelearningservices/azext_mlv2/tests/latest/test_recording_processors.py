# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import json

from azext_mlv2.tests.recording_processors import RecordingRedactor

from .._vcr_constants import MockReplacers

try:
    import unittest.mock as mock
except ImportError:
    import mock

import unittest


class TestRecordingProcessors(unittest.TestCase):
    def test_recording_redactor_processor_with_token(self):
        TOKEN_STR = '{"token_type": "Bearer", "resource": "url", "key": "real_token", "kerberosPassword": "another_real_token", "access_token": "some_other_real_token"}'
        request_sample = {
            "url": "https://www.bing,com",
            "headers": {"beta": ["value_1", "value_2"]},
            "body": {"string": TOKEN_STR},
        }
        token_response_sample = {"body": {"string": TOKEN_STR}}
        rp = RecordingRedactor(
            keys=MockReplacers.CONSTANTS_TO_SCRUB_IN_BODY, replacement=MockReplacers.MOCKED_REPLACEMENT_VALUE
        )

        self.assertIs(request_sample, rp.process_request(request_sample))  # reference equality
        # print(rp.process_request(json.loads(json.dumps(request_sample))))
        # self.assertEqual(rp.process_request(json.loads(json.dumps(request_sample))['body']['string']),
        #               MockReplacers.MOCKED_REPLACEMENT_VALUE)

        self.assertEqual(
            json.loads(rp.process_response(token_response_sample)["body"]["string"])["key"],
            "7ab78dc0408317610b913659a097a7f2b0659090886fb41351398953e05c3cf3",
        )
        self.assertEqual(
            json.loads(rp.process_response(token_response_sample)["body"]["string"])["access_token"],
            "bdff48a4d78ef4f97517e1d0144d381ae0bfc1b74ab6635ffa2e66df40ac250c",
        )

    def test_recording_redactor_processor_without_token(self):
        no_token_request_sample = {
            "url": "https://www.bing,com",
            "headers": {"beta": ["value_1", "value_2"], "body": {"string": '{"location": "westus"}'}},
        }
        no_token_response_sample = {"body": {"string": '{"location": "westus"}'}}
        rp = RecordingRedactor(
            keys=MockReplacers.CONSTANTS_TO_SCRUB_IN_BODY, replacement=MockReplacers.MOCKED_REPLACEMENT_VALUE
        )
        self.assertDictEqual(rp.process_request(no_token_request_sample), no_token_request_sample)
        self.assertDictEqual(rp.process_response(no_token_response_sample), no_token_response_sample)
