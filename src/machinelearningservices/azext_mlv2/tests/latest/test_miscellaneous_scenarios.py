# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest


class MiscellaneousScenarioTest(MLBaseScenarioTest):
    # TODO: Add code section below once Code GET is fixed, https://msdata.visualstudio.com/Vienna/_workitems/edit/1419236.
    @pytest.mark.skip(reason="TODO: 2161301, Test is failing when executing from recording in ADO")
    def test_autoincrement(self) -> None:
        # ENVIRONMENT
        environment_obj = self.cmd(
            "az ml environment create --name {environmentName} --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/environment/environment_no_version.yml"
        )
        environment_obj = yaml.safe_load(environment_obj.output)
        assert environment_obj["name"] == self.kwargs.get("environmentName", None)
        assert environment_obj["version"] == "1"

        # COMPONENT
        component_obj = self.cmd(
            "az ml component create --file ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/components/component_no_version.yml --set name={componentName}"
        )
        component_obj = yaml.safe_load(component_obj.output)
        assert component_obj["name"] == self.kwargs.get("componentName", None)
        assert environment_obj["version"] == "1"
        # MODEL
        model_obj = self.cmd(
            "az ml model create --path ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/model/model.pkl --name {modelName}"
        )
        model_obj = yaml.safe_load(model_obj.output)
        assert model_obj["name"] == self.kwargs.get("modelName", None)
        assert model_obj["version"] == "1"
