# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import pytest
import yaml
from azext_mlv2.tests.scenario_test_helper import MLBaseScenarioTest


class FeatureSetScenarioTest(MLBaseScenarioTest):
    # This test is not working. TODO: https://dev.azure.com/msdata/Vienna/_workitems/edit/3372868
    @pytest.mark.skip(reason="Recording and replay not working.")
    def test_featureSet(self) -> None:
        self.kwargs["resourceGroup"] = "test-rg-000006"
        self.kwargs["featureSetName"] = "sample"
        self.kwargs["featureSetVersion"] = "1"

        feature_set_obj = self.cmd(
            "az ml feature-set create -n {featureSetName} -v {featureSetVersion} --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription} --no-wait -f ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/featurestore/featuresets/featureset_asset.yml"
        )
        self.assertEqual(feature_set_obj.output, "")
        if self.is_live:
            from time import sleep
            
            sleep(120)  # This sleep is only required for fresh recording of cassette

        feature_set_obj_show = self.cmd(
            "az ml feature-set show -n {featureSetName} -v {featureSetVersion} --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription}"
        )
        feature_set_obj_show = yaml.safe_load(feature_set_obj_show.output)
        self.assertIsNotNone(feature_set_obj_show["description"])
        self.assertGreater(len(feature_set_obj_show["entities"]), 0)
        self.assertEqual(feature_set_obj_show["entities"][0], "azureml:account:1")
        self.assertIsNotNone(feature_set_obj_show["materialization_settings"])
        self.assertTrue(feature_set_obj_show["materialization_settings"]["offline_enabled"])
        self.assertFalse(feature_set_obj_show["materialization_settings"]["online_enabled"])
        self.assertEqual(feature_set_obj_show["name"], self.kwargs.get("featureSetName", None))
        self.assertIsNotNone(feature_set_obj_show["specification"])
        self.assertEqual(feature_set_obj_show["stage"], "Development")
        self.assertEqual(feature_set_obj_show["version"], self.kwargs.get("featureSetVersion",None))
        self.assertEqual(feature_set_obj_show["tags"]["data_type"], "nonPII")

        feature_set_obj_list = self.cmd("az ml feature-set list --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription}")
        self.assertGreater(len(feature_set_obj_list.output), 0)

        feature_set_obj_list = self.cmd("az ml feature-set list --name {featureSetName} --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription}")
        self.assertGreater(len(feature_set_obj_list.output), 0)

        self.kwargs["updatedDescription"] = "description2"
        self.kwargs["updatedTags"] = "vanilla"
        feature_set_obj_update = self.cmd(
            "az ml feature-set update -n {featureSetName} -v {featureSetVersion} --set tags.cake_type={updatedTags} --set description={updatedDescription} --no-wait  --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(feature_set_obj_update.output, "")
        if self.is_live:
            from time import sleep

            sleep(180)  # This sleep is only required for fresh recording of cassette

        feature_set_obj_show = self.cmd(
            "az ml feature-set show --name {featureSetName} --version {featureSetVersion} --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription}"
        )
        feature_set_obj_show = yaml.safe_load(feature_set_obj_show.output)
        self.assertEqual(feature_set_obj_show["description"], self.kwargs.get("updatedDescription", None))
        self.assertEqual(feature_set_obj_show["tags"]["cake_type"], self.kwargs.get("updatedTags", None))

        feature_set_obj_lf = self.cmd(
            "az ml feature-set list-features --name {featureSetName} --version {featureSetVersion} --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        self.assertGreater(len(feature_set_obj_lf.output), 0)

        feature_set_obj_gf = self.cmd(
            "az ml feature-set get-feature --feature-name transaction_amount_3d_avg --name {featureSetName} --version {featureSetVersion} --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        feature_set_obj_gf = yaml.safe_load(feature_set_obj_gf.output)
        self.assertEqual(feature_set_obj_gf["dataType"], "Double")
        self.assertIsNone(feature_set_obj_gf["description"])
        self.assertEqual(feature_set_obj_gf["name"], "transaction_amount_3d_avg")
        self.assertIsNone(feature_set_obj_gf["tags"])
        
        feature_set_obj_sf = self.cmd(
            "az ml feature-set show-feature --feature-name transaction_amount_3d_avg --name {featureSetName} --version {featureSetVersion} --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        feature_set_obj_sf = yaml.safe_load(feature_set_obj_sf.output)
        self.assertEqual(feature_set_obj_sf["dataType"], "Double")
        self.assertIsNone(feature_set_obj_sf["description"])
        self.assertEqual(feature_set_obj_sf["name"], "transaction_amount_3d_avg")
        self.assertIsNone(feature_set_obj_sf["tags"])

        feature_set_obj_backfill = self.cmd(
            "az ml feature-set backfill --name {featureSetName} --version {featureSetVersion} --feature-window-start-time 2023-03-01T00:00.000Z --feature-window-end-time 2023-04-01T00:00.000Z --by-data-status \"['None', 'Incomplete']\" --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        feature_set_obj_backfill = yaml.safe_load(feature_set_obj_backfill.output)
        self.assertIsNotNone(feature_set_obj_backfill["jobIds"])
        self.assertEqual(feature_set_obj_backfill["type"], "BackfillMaterialization")

        feature_set_obj_lmo = self.cmd(
            "az ml feature-set list-materialization-operation --name {featureSetName} --version {featureSetVersion} -s 2023-03-01T00:00.000Z -e 2023-04-01T00:00.000Z --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        self.assertGreater(len(feature_set_obj_lmo.output), 0)

        ## Archiving featureset

        self.kwargs["featureSetName"] = "sample"
        self.kwargs["featureSetVersion"] = "disabled"

        feature_set_obj = self.cmd(
            "az ml feature-set create -n {featureSetName}  -v {featureSetVersion} --feature-store-name {workspaceName} --resource-group {resourceGroup} --subscription {subscription} --no-wait -f ./src/cli/src/machinelearningservices/azext_mlv2/tests/test_configs/featurestore/featuresets/featureset_asset_disable_mat.yml"
        )
        self.assertEqual(feature_set_obj.output, "")
        if self.is_live:
            from time import sleep
            
            sleep(180)  # This sleep is only required for fresh recording of cassette

        feature_set_obj_archive = self.cmd(
            "az ml feature-set archive --name {featureSetName} --version {featureSetVersion} --yes --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(feature_set_obj_archive.output, "")

        if self.is_live:
            from time import sleep
            
            sleep(120)  # This sleep is only required for fresh recording of cassette

        feature_set_obj_show = self.cmd(
            "az ml feature-set show -n {featureSetName} -v {featureSetVersion} --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        feature_set_obj_show = yaml.safe_load(feature_set_obj_show.output)
        self.assertEqual(feature_set_obj_show["stage"], "Archived")

        feature_set_obj_restore = self.cmd(
           "az ml feature-set restore --name {featureSetName} --version {featureSetVersion} --yes --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        self.assertEqual(feature_set_obj_restore.output, "")

        if self.is_live:
            from time import sleep
            
            sleep(120)  # This sleep is only required for fresh recording of cassette

        feature_set_obj_show = self.cmd(
            "az ml feature-set show -n {featureSetName} -v {featureSetVersion} --resource-group {resourceGroup} --feature-store-name {workspaceName} --subscription {subscription}"
        )
        feature_set_obj_show = yaml.safe_load(feature_set_obj_show.output)
        self.assertEqual(feature_set_obj_show["stage"], "Development")
        
