# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
import binascii
import hashlib
import json

import six

from azure.cli.testsdk.scenario_tests import RecordingProcessor

from ._vcr_constants import MockReplacers
from .util import is_text_payload


class RecordingRedactor(RecordingProcessor):
    """Remove the sensitive info inside request or response body or recordings"""

    def __init__(self, keys=None, replacement=None):
        super(RecordingRedactor, self).__init__()
        self._replacement = replacement
        self._keys = keys if keys else []
        self._activated = False

    def reset(self):
        self._activated = False

    def process_request(self, request):  # pylint: disable=no-self-use
        try:
            # Filtering async delete operations as they result in conflicts during the recording.
            method = request.method.lower()
            if method in ["delete"]:
                self._activated = True

            if is_text_payload(request) and request.body:
                request.body = self._replace_keys(request.body.decode()).encode()

        except AttributeError:
            pass
        return request

    def process_response(self, response):
        if not self._activated:
            try:
                body = json.loads(response["body"]["string"])
                self._activated = False
            except (KeyError, ValueError):
                return response
            if body:
                for field in body:
                    if field in MockReplacers.SECRETS_TO_REDACT:
                        # record a hash of the secret instead of a simple replacement like "redacted"
                        # because some tests require unique, consistent values
                        digest = hashlib.sha256(six.ensure_binary(body[field])).digest()
                        body[field] = six.ensure_str(binascii.hexlify(digest))

            response["body"]["string"] = json.dumps(body)

        return response

    def _replace_keys(self, body):
        def _replace_recursively(dictionary):
            for key in dictionary:
                value = dictionary[key]
                if key in self._keys:
                    dictionary[key] = self._replacement
                elif isinstance(value, dict):
                    _replace_recursively(value)

        try:
            body = json.loads(body)
            _replace_recursively(body)
        except (KeyError, ValueError):
            return body
        return json.dumps(body)
