# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def quota_reservation_list(client,
                           reservation_order_id):
    return client.list(reservation_order_id=reservation_order_id)


def quota_reservation_show(client,
                           reservation_id,
                           reservation_order_id,
                           expand=None):
    return client.get(reservation_id=reservation_id,
                      reservation_order_id=reservation_order_id,
                      expand=expand)


def quota_reservation_update(client,
                             reservation_order_id,
                             reservation_id,
                             applied_scope_type=None,
                             applied_scopes=None,
                             instance_flexibility=None,
                             name=None,
                             renew=None,
                             location=None,
                             reserved_resource_type=None,
                             billing_scope_id=None,
                             term=None,
                             billing_plan=None,
                             quantity=None,
                             display_name=None,
                             applied_scope_type_applied_scope_type=None,
                             applied_scopes1=None,
                             renew1=None,
                             instance_flexibility1=None,
                             sku_name=None,
                             no_wait=False):
    if renew is None:
        renew = False
    if renew1 is None:
        renew1 = False
    parameters = {}
    parameters['applied_scope_type'] = applied_scope_type
    parameters['applied_scopes'] = applied_scopes
    parameters['instance_flexibility'] = instance_flexibility
    parameters['name'] = name
    parameters['renew'] = False if renew is None else renew
    parameters['purchase_properties'] = {}
    parameters['purchase_properties']['location'] = location
    parameters['purchase_properties']['reserved_resource_type'] = reserved_resource_type
    parameters['purchase_properties']['billing_scope_id'] = billing_scope_id
    parameters['purchase_properties']['term'] = term
    parameters['purchase_properties']['billing_plan'] = billing_plan
    parameters['purchase_properties']['quantity'] = quantity
    parameters['purchase_properties']['display_name'] = display_name
    parameters['purchase_properties']['applied_scope_type'] = applied_scope_type_applied_scope_type
    parameters['purchase_properties']['applied_scopes'] = applied_scopes1
    parameters['purchase_properties']['renew'] = False if renew1 is None else renew1
    parameters = sku_name
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       reservation_order_id=reservation_order_id,
                       reservation_id=reservation_id,
                       parameters=parameters)


def quota_reservation_available_scope(client,
                                      reservation_order_id,
                                      reservation_id,
                                      properties=None,
                                      no_wait=False):
    body = {}
    body['properties'] = properties
    return sdk_no_wait(no_wait,
                       client.begin_available_scopes,
                       reservation_order_id=reservation_order_id,
                       reservation_id=reservation_id,
                       body=body)


def quota_reservation_list_revision(client,
                                    reservation_id,
                                    reservation_order_id):
    return client.list_revisions(reservation_id=reservation_id,
                                 reservation_order_id=reservation_order_id)


def quota_reservation_merge(client,
                            reservation_order_id,
                            sources=None,
                            no_wait=False):
    body = {}
    body['sources'] = sources
    return sdk_no_wait(no_wait,
                       client.begin_merge,
                       reservation_order_id=reservation_order_id,
                       body=body)


def quota_reservation_split(client,
                            reservation_order_id,
                            quantities=None,
                            reservation_id=None,
                            no_wait=False):
    body = {}
    body['quantities'] = quantities
    body['reservation_id'] = reservation_id
    return sdk_no_wait(no_wait,
                       client.begin_split,
                       reservation_order_id=reservation_order_id,
                       body=body)


def quota_show_applied_reservation_list(client,
                                        subscription_id):
    return client.get_applied_reservation_list(subscription_id=subscription_id)


def quota_show_catalog(client,
                       subscription_id,
                       reserved_resource_type,
                       location=None):
    return client.get_catalog(subscription_id=subscription_id,
                              reserved_resource_type=reserved_resource_type,
                              location=location)


def quota_reservation_order_list(client):
    return client.list()


def quota_reservation_order_show(client,
                                 reservation_order_id,
                                 expand=None):
    return client.get(reservation_order_id=reservation_order_id,
                      expand=expand)


def quota_reservation_order_calculate(client,
                                      location=None,
                                      reserved_resource_type=None,
                                      billing_scope_id=None,
                                      term=None,
                                      billing_plan=None,
                                      quantity=None,
                                      display_name=None,
                                      applied_scope_type=None,
                                      applied_scopes=None,
                                      renew=None,
                                      instance_flexibility=None,
                                      name=None):
    if renew is None:
        renew = False
    body = {}
    body['location'] = location
    body['reserved_resource_type'] = reserved_resource_type
    body['billing_scope_id'] = billing_scope_id
    body['term'] = term
    body['billing_plan'] = billing_plan
    body['quantity'] = quantity
    body['display_name'] = display_name
    body['applied_scope_type'] = applied_scope_type
    body['applied_scopes'] = applied_scopes
    body['renew'] = False if renew is None else renew
    body['reserved_resource_properties'] = {}
    body['reserved_resource_properties']['instance_flexibility'] = instance_flexibility
    body['sku'] = {}
    body['sku']['name'] = name
    return client.calculate(body=body)


def quota_reservation_order_purchase(client,
                                     reservation_order_id,
                                     location=None,
                                     reserved_resource_type=None,
                                     billing_scope_id=None,
                                     term=None,
                                     billing_plan=None,
                                     quantity=None,
                                     display_name=None,
                                     applied_scope_type=None,
                                     applied_scopes=None,
                                     renew=None,
                                     instance_flexibility=None,
                                     name=None,
                                     no_wait=False):
    if renew is None:
        renew = False
    body = {}
    body['location'] = location
    body['reserved_resource_type'] = reserved_resource_type
    body['billing_scope_id'] = billing_scope_id
    body['term'] = term
    body['billing_plan'] = billing_plan
    body['quantity'] = quantity
    body['display_name'] = display_name
    body['applied_scope_type'] = applied_scope_type
    body['applied_scopes'] = applied_scopes
    body['renew'] = False if renew is None else renew
    body['reserved_resource_properties'] = {}
    body['reserved_resource_properties']['instance_flexibility'] = instance_flexibility
    body['sku'] = {}
    body['sku']['name'] = name
    return sdk_no_wait(no_wait,
                       client.begin_purchase,
                       reservation_order_id=reservation_order_id,
                       body=body)


def quota_operation_list(client):
    return client.list()


def quota_calculate_exchange_post(client,
                                  reservations_to_purchase=None,
                                  reservations_to_exchange=None):
    body = {}
    body['properties'] = {}
    body['properties']['reservations_to_purchase'] = reservations_to_purchase
    body['properties']['reservations_to_exchange'] = reservations_to_exchange
    return client.begin_post(body=body)


def quota_exchange_post(client,
                        session_id=None):
    body = {}
    body['properties'] = {}
    body['properties']['session_id'] = session_id
    return client.begin_post(body=body)


def quota_list(client,
               subscription_id,
               provider_id,
               location):
    return client.list(subscription_id=subscription_id,
                       provider_id=provider_id,
                       location=location)


def quota_show(client,
               subscription_id,
               provider_id,
               location,
               resource_name):
    return client.get(subscription_id=subscription_id,
                      provider_id=provider_id,
                      location=location,
                      resource_name=resource_name)


def quota_create(client,
                 subscription_id,
                 provider_id,
                 location,
                 resource_name,
                 limit=None,
                 unit=None,
                 resource_type=None,
                 properties=None,
                 value=None,
                 no_wait=False):
    create_quota_request = {}
    create_quota_request['properties'] = {}
    create_quota_request['properties']['limit'] = limit
    create_quota_request['properties']['unit'] = unit
    create_quota_request['properties']['resource_type'] = resource_type
    create_quota_request['properties']['properties'] = properties
    create_quota_request['properties']['name'] = {}
    create_quota_request['properties']['name']['value'] = value
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       subscription_id=subscription_id,
                       provider_id=provider_id,
                       location=location,
                       resource_name=resource_name,
                       create_quota_request=create_quota_request)


def quota_update(client,
                 subscription_id,
                 provider_id,
                 location,
                 resource_name,
                 limit=None,
                 unit=None,
                 resource_type=None,
                 properties=None,
                 value=None,
                 no_wait=False):
    create_quota_request = {}
    create_quota_request['properties'] = {}
    create_quota_request['properties']['limit'] = limit
    create_quota_request['properties']['unit'] = unit
    create_quota_request['properties']['resource_type'] = resource_type
    create_quota_request['properties']['properties'] = properties
    create_quota_request['properties']['name'] = {}
    create_quota_request['properties']['name']['value'] = value
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       subscription_id=subscription_id,
                       provider_id=provider_id,
                       location=location,
                       resource_name=resource_name,
                       create_quota_request=create_quota_request)


def quota_quota_request_status_list(client,
                                    subscription_id,
                                    provider_id,
                                    location,
                                    filter_=None,
                                    top=None,
                                    skiptoken=None):
    return client.list(subscription_id=subscription_id,
                       provider_id=provider_id,
                       location=location,
                       filter=filter_,
                       top=top,
                       skiptoken=skiptoken)


def quota_quota_request_status_show(client,
                                    subscription_id,
                                    provider_id,
                                    location,
                                    id_):
    return client.get(subscription_id=subscription_id,
                      provider_id=provider_id,
                      location=location,
                      id=id_)
