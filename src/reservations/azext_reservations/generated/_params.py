# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type,
    get_location_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_reservations.action import (
    AddProperties,
    AddReservationsToPurchase,
    AddReservationsToExchange
)


def load_arguments(self, _):

    with self.argument_context('quota reservation list') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')

    with self.argument_context('quota reservation show') as c:
        c.argument('reservation_id', type=str, help='Id of the Reservation Item')
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('expand', type=str, help='Supported value of this query is renewProperties')

    with self.argument_context('quota reservation update') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('reservation_id', type=str, help='Id of the Reservation Item')
        c.argument('applied_scope_type', arg_type=get_enum_type(['Single', 'Shared']), help='Type of the Applied '
                   'Scope.')
        c.argument('applied_scopes', nargs='+', help='List of the subscriptions that the benefit will be applied. Do '
                   'not specify if AppliedScopeType is Shared.')
        c.argument('instance_flexibility', arg_type=get_enum_type(['On', 'Off']), help='Turning this on will apply the '
                   'reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines '
                   'reserved resource type.')
        c.argument('name', type=str, help='Name of the Reservation')
        c.argument('renew', arg_type=get_three_state_flag(), help='Setting this to true will automatically purchase a '
                   'new reservation on the expiration date time.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('reserved_resource_type', arg_type=get_enum_type(['VirtualMachines', 'SqlDatabases', 'SuseLinux',
                                                                     'CosmosDb', 'RedHat', 'SqlDataWarehouse',
                                                                     'VMwareCloudSimple', 'RedHatOsa', 'Databricks',
                                                                     'AppService', 'ManagedDisk', 'BlockBlob',
                                                                     'RedisCache', 'AzureDataExplorer', 'MySql',
                                                                     'MariaDb', 'PostgreSql', 'DedicatedHost',
                                                                     'SapHana', 'SqlAzureHybridBenefit']), help='The '
                   'type of the resource that is being reserved.', arg_group='Renew Properties Purchase Properties '
                   'Properties')
        c.argument('billing_scope_id', type=str, help='Subscription that will be charged for purchasing Reservation',
                   arg_group='Renew Properties Purchase Properties Properties')
        c.argument('term', arg_type=get_enum_type(['P1Y', 'P3Y']), help='Represent the term of Reservation.',
                   arg_group='Renew Properties Purchase Properties Properties')
        c.argument('billing_plan', arg_type=get_enum_type(['Upfront', 'Monthly']), help='Represent the billing plans.',
                   arg_group='Renew Properties Purchase Properties Properties')
        c.argument('quantity', type=int, help='Quantity of the SKUs that are part of the Reservation. Must be greater '
                   'than zero.', arg_group='Renew Properties Purchase Properties Properties')
        c.argument('display_name', type=str, help='Friendly name of the Reservation', arg_group='Renew Properties '
                   'Purchase Properties Properties')
        c.argument('applied_scope_type_applied_scope_type', arg_type=get_enum_type(['Single', 'Shared']), help='Type '
                   'of the Applied Scope.', arg_group='Renew Properties Purchase Properties Properties')
        c.argument('applied_scopes1', nargs='+', help='List of the subscriptions that the benefit will be applied. Do '
                   'not specify if AppliedScopeType is Shared.', arg_group='Renew Properties Purchase Properties '
                   'Properties')
        c.argument('renew1', arg_type=get_three_state_flag(), help='Setting this to true will automatically purchase a '
                   'new reservation on the expiration date time.', arg_group='Renew Properties Purchase Properties '
                   'Properties')
        c.argument('instance_flexibility1', arg_type=get_enum_type(['On', 'Off']), help='Turning this on will apply '
                   'the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines '
                   'reserved resource type.', arg_group='Renew Properties Purchase Properties Properties Reserved '
                   'Resource Properties')
        c.argument('sku_name', type=str, help='', arg_group='Renew Properties Purchase Properties Sku')

    with self.argument_context('quota reservation available-scope') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('reservation_id', type=str, help='Id of the Reservation Item')
        c.argument('properties', action=AddProperties, nargs='+', help='Available scope request properties')

    with self.argument_context('quota reservation list-revision') as c:
        c.argument('reservation_id', type=str, help='Id of the Reservation Item')
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')

    with self.argument_context('quota reservation merge') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('sources', nargs='+', help='Format of the resource id should be /providers/Microsoft.Capacity/reserv'
                   'ationOrders/{reservationOrderId}/reservations/{reservationId}')

    with self.argument_context('quota reservation split') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('quantities', nargs='+', help='List of the quantities in the new reservations to create.')
        c.argument('reservation_id', type=str, help='Resource id of the reservation to be split. Format of the '
                   'resource id should be /providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/reservat'
                   'ions/{reservationId}')

    with self.argument_context('quota reservation wait') as c:
        c.argument('reservation_id', type=str, help='Id of the Reservation Item')
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('expand', type=str, help='Supported value of this query is renewProperties')

    with self.argument_context('quota show-applied-reservation-list') as c:
        c.argument('subscription_id', type=str, help='Id of the subscription', id_part='subscription')

    with self.argument_context('quota show-catalog') as c:
        c.argument('subscription_id', type=str, help='Id of the subscription', id_part='subscription')
        c.argument('reserved_resource_type', type=str, help='The type of the resource for which the skus should be '
                   'provided.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('quota reservation-order show') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('expand', type=str, help='May be used to expand the planInformation.')

    with self.argument_context('quota reservation-order calculate') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('reserved_resource_type', arg_type=get_enum_type(['VirtualMachines', 'SqlDatabases', 'SuseLinux',
                                                                     'CosmosDb', 'RedHat', 'SqlDataWarehouse',
                                                                     'VMwareCloudSimple', 'RedHatOsa', 'Databricks',
                                                                     'AppService', 'ManagedDisk', 'BlockBlob',
                                                                     'RedisCache', 'AzureDataExplorer', 'MySql',
                                                                     'MariaDb', 'PostgreSql', 'DedicatedHost',
                                                                     'SapHana', 'SqlAzureHybridBenefit']), help='The '
                   'type of the resource that is being reserved.')
        c.argument('billing_scope_id', type=str, help='Subscription that will be charged for purchasing Reservation')
        c.argument('term', arg_type=get_enum_type(['P1Y', 'P3Y']), help='Represent the term of Reservation.')
        c.argument('billing_plan', arg_type=get_enum_type(['Upfront', 'Monthly']),
                   help='Represent the billing plans.')
        c.argument('quantity', type=int, help='Quantity of the SKUs that are part of the Reservation. Must be greater '
                   'than zero.')
        c.argument('display_name', type=str, help='Friendly name of the Reservation')
        c.argument('applied_scope_type', arg_type=get_enum_type(['Single', 'Shared']), help='Type of the Applied '
                   'Scope.')
        c.argument('applied_scopes', nargs='+', help='List of the subscriptions that the benefit will be applied. Do '
                   'not specify if AppliedScopeType is Shared.')
        c.argument('renew', arg_type=get_three_state_flag(), help='Setting this to true will automatically purchase a '
                   'new reservation on the expiration date time.')
        c.argument('instance_flexibility', arg_type=get_enum_type(['On', 'Off']), help='Turning this on will apply the '
                   'reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines '
                   'reserved resource type.', arg_group='Reserved Resource Properties')
        c.argument('name', type=str, help='', arg_group='Sku')

    with self.argument_context('quota reservation-order purchase') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('reserved_resource_type', arg_type=get_enum_type(['VirtualMachines', 'SqlDatabases', 'SuseLinux',
                                                                     'CosmosDb', 'RedHat', 'SqlDataWarehouse',
                                                                     'VMwareCloudSimple', 'RedHatOsa', 'Databricks',
                                                                     'AppService', 'ManagedDisk', 'BlockBlob',
                                                                     'RedisCache', 'AzureDataExplorer', 'MySql',
                                                                     'MariaDb', 'PostgreSql', 'DedicatedHost',
                                                                     'SapHana', 'SqlAzureHybridBenefit']), help='The '
                   'type of the resource that is being reserved.')
        c.argument('billing_scope_id', type=str, help='Subscription that will be charged for purchasing Reservation')
        c.argument('term', arg_type=get_enum_type(['P1Y', 'P3Y']), help='Represent the term of Reservation.')
        c.argument('billing_plan', arg_type=get_enum_type(['Upfront', 'Monthly']),
                   help='Represent the billing plans.')
        c.argument('quantity', type=int, help='Quantity of the SKUs that are part of the Reservation. Must be greater '
                   'than zero.')
        c.argument('display_name', type=str, help='Friendly name of the Reservation')
        c.argument('applied_scope_type', arg_type=get_enum_type(['Single', 'Shared']), help='Type of the Applied '
                   'Scope.')
        c.argument('applied_scopes', nargs='+', help='List of the subscriptions that the benefit will be applied. Do '
                   'not specify if AppliedScopeType is Shared.')
        c.argument('renew', arg_type=get_three_state_flag(), help='Setting this to true will automatically purchase a '
                   'new reservation on the expiration date time.')
        c.argument('instance_flexibility', arg_type=get_enum_type(['On', 'Off']), help='Turning this on will apply the '
                   'reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines '
                   'reserved resource type.', arg_group='Reserved Resource Properties')
        c.argument('name', type=str, help='', arg_group='Sku')

    with self.argument_context('quota reservation-order wait') as c:
        c.argument('reservation_order_id', type=str, help='Order Id of the reservation')
        c.argument('expand', type=str, help='May be used to expand the planInformation.')

    with self.argument_context('quota calculate-exchange post') as c:
        c.argument('reservations_to_purchase', action=AddReservationsToPurchase, nargs='+', help='List of reservations '
                   'that are being purchased in this exchange.')
        c.argument('reservations_to_exchange', action=AddReservationsToExchange, nargs='+', help='List of reservations '
                   'that are being returned in this exchange.')

    with self.argument_context('quota exchange post') as c:
        c.argument('session_id', type=str, help='SessionId that was returned by CalculateExchange API.')

    with self.argument_context('quota list') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.')
        c.argument('provider_id', type=str, help='Azure resource provider ID.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))

    with self.argument_context('quota show') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.', id_part='subscription')
        c.argument('provider_id', type=str, help='Azure resource provider ID.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='child_name_1')
        c.argument('resource_name', type=str, help='The resource name for a resource provider, such as SKU name for '
                   'Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices',
                   id_part='child_name_2')

    with self.argument_context('quota create') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.')
        c.argument('provider_id', type=str, help='Azure resource provider ID.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('resource_name', type=str, help='The resource name for a resource provider, such as SKU name for '
                   'Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices')
        c.argument('limit', type=int, help='Quota properties.')
        c.argument('unit', type=str, help=' The limit units, such as **count** and **bytes**. Use the unit field '
                   'provided in the response of the GET quota operation.')
        c.argument('resource_type', arg_type=get_enum_type(['standard', 'dedicated', 'lowPriority', 'shared',
                                                            'serviceSpecific']),
                                                            help='The name of the resource type.')
        c.argument('properties', type=validate_file_or_dict, help='Additional properties for the specified resource '
                   'provider. Expected value: json-string/@json-file.')
        c.argument('value', type=str, help='Resource name.', arg_group='Name')

    with self.argument_context('quota update') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.', id_part='subscription')
        c.argument('provider_id', type=str, help='Azure resource provider ID.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='child_name_1')
        c.argument('resource_name', type=str, help='The resource name for a resource provider, such as SKU name for '
                   'Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices',
                   id_part='child_name_2')
        c.argument('limit', type=int, help='Quota properties.')
        c.argument('unit', type=str, help=' The limit units, such as **count** and **bytes**. Use the unit field '
                   'provided in the response of the GET quota operation.')
        c.argument('resource_type', arg_type=get_enum_type(['standard', 'dedicated', 'lowPriority', 'shared',
                                                            'serviceSpecific']),
                                                            help='The name of the resource type.')
        c.argument('properties', type=validate_file_or_dict, help='Additional properties for the specified resource '
                   'provider. Expected value: json-string/@json-file.')
        c.argument('value', type=str, help='Resource name.', arg_group='Name')

    with self.argument_context('quota wait') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.', id_part='subscription')
        c.argument('provider_id', type=str, help='Azure resource provider ID.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='child_name_1')
        c.argument('resource_name', type=str, help='The resource name for a resource provider, such as SKU name for '
                   'Microsoft.Compute, Sku or TotalLowPriorityCores for Microsoft.MachineLearningServices',
                   id_part='child_name_2')

    with self.argument_context('quota quota-request-status list') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.')
        c.argument('provider_id', type=str, help='Azure resource provider ID.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx))
        c.argument('filter_', options_list=['--filter'], type=str, help='| Field                    | Supported '
                   'operators   |---------------------|------------------------  |requestSubmitTime | ge, le, eq, gt, '
                   'lt')
        c.argument('top', type=int, help='Number of records to return.')
        c.argument('skiptoken', type=str, help='Skiptoken is only used if a previous operation returned a partial '
                   'result. If a previous response contains a nextLink element, the value of the nextLink element '
                   'includes a skiptoken parameter that specifies a starting point to use for subsequent calls.')

    with self.argument_context('quota quota-request-status show') as c:
        c.argument('subscription_id', type=str, help='Azure subscription ID.', id_part='subscription')
        c.argument('provider_id', type=str, help='Azure resource provider ID.', id_part='name')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='child_name_1')
        c.argument('id_', options_list=['--id'], type=str, help='Quota Request ID.', id_part='child_name_2')
