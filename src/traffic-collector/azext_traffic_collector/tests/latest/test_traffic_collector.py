# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
import time
from azure.cli.testsdk import (ScenarioTest, ResourceGroupPreparer)


class TrafficCollectorScenario(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='cli_test_azure_traffic_collector', location='westus')
    def test_azure_traffic_scenario(self, resource_group):
        subs_id = self.get_subscription_id()
        atc_name = self.create_random_name(prefix='cli_test_atc-', length=30)
        cp_name = self.create_random_name(prefix='cli_test_cp-', length=20)
        self.kwargs.update({
            'subs_id': subs_id,
            'rg': resource_group,
            'name': atc_name,
            'cp_name': cp_name,
            'location': 'westus',
            'ip': '{ingestion-sources:[{resource-id:/subscriptions/' + subs_id + '/resourceGroups/' + resource_group + '/providers/Microsoft.Network/expressRouteCircuits/' + cp_name + ',source-type:Resource}],ingestion-type:IPFIX}',
            'ep': '{emission-destinations:[{destination-type:AzureMonitor}],emission-type:IPFIX}'
        })
        self.cmd('az network-function traffic-collector create '
                 '--resource-group {rg} '
                 '--name {name} --location {location} --tags foo=doo',
                 checks=[
                     self.check('name', self.kwargs['name']),
                     self.check('tags.foo', 'doo')
                 ])

        self.cmd('az network-function traffic-collector list --resource-group {rg}',
                 checks=[
                     self.check('@[0].type', 'Microsoft.NetworkFunction/AzureTrafficCollectors'),
                     self.check('@[0].resourceGroup', self.kwargs['rg']),
                     self.check('@[0].name', self.kwargs['name'])]
                 )

        self.cmd('az network-function traffic-collector show --resource-group {rg} --name {name}',
                 checks=[
                     self.check('name', self.kwargs['name']),
                     self.check('resourceGroup', self.kwargs['rg']),
                     self.check('type', 'Microsoft.NetworkFunction/AzureTrafficCollectors'),
                 ])

        self.cmd(
            'az network-function traffic-collector update --resource-group {rg} --name {name} --tags foo=doo1',
            checks=[
                self.check('name', self.kwargs['name']),
                self.check('resourceGroup', self.kwargs['rg']),
                self.check('tags.foo', 'doo1')
            ])

        # Collector Policy Tests
        self.cmd('az network-function traffic-collector collector-policy create --resource-group {rg} '
                 '--traffic-collector-name {name} -n {cp_name} -l {location} --ingestion-policy {ip}',
                 checks=[
                     self.check('name', self.kwargs['cp_name'])
                 ])

        self.cmd('az network-function traffic-collector collector-policy show --resource-group {rg} '
                 '--traffic-collector-name {name} -n {cp_name}',
                 checks=[
                     self.check('name', self.kwargs['cp_name']),
                     self.check('emissionPolicies | length(@)', 0),
                     self.check('ingestionPolicy.ingestionSources | length(@)', 1),
                     self.check('type', 'Microsoft.NetworkFunction/AzureTrafficCollectors/CollectorPolicies')
                 ])

        self.cmd('az network-function traffic-collector collector-policy update --resource-group {rg} '
                 '--traffic-collector-name {name} -n {cp_name} --emission-policies [0]={ep}',
                 checks=[
                     self.check('name', self.kwargs['cp_name'])
                 ])

        self.cmd('az network-function traffic-collector collector-policy show --resource-group {rg} '
                 '--traffic-collector-name {name} -n {cp_name}',
                 checks=[
                     self.check('name', self.kwargs['cp_name']),
                     self.check('emissionPolicies | length(@)', 1),
                     self.check('ingestionPolicy.ingestionSources | length(@)', 1),
                     self.check('type', 'Microsoft.NetworkFunction/AzureTrafficCollectors/CollectorPolicies')
                 ])

        self.cmd(
            'az network-function traffic-collector collector-policy delete --resource-group {rg} '
            '--traffic-collector-name {name} --name {cp_name} --yes')

        time.sleep(120)
        self.cmd('az network-function traffic-collector delete --resource-group {rg} --name {name} --yes')
