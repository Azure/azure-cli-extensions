# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_automation.action import AddPublishContentLinkContentHash


def load_arguments(self, _):

    with self.argument_context('automation runbook list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.')

    with self.argument_context('automation runbook show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.', id_part='name')
        c.argument('runbook_name', options_list=['--name', '-n', '--runbook-name'], type=str, help='The runbook name.',
                   id_part='child_name_1')

    with self.argument_context('automation runbook create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.')
        c.argument('runbook_name', type=str, help='The runbook name.')
        c.argument('name', type=str, help='Gets or sets the name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('runbook_type', arg_type=get_enum_type(['Script', 'Graph', 'PowerShellWorkflow', 'PowerShell', ''
                                                           'GraphPowerShellWorkflow', 'GraphPowerShell']), help='Gets '
                   'or sets the type of the runbook.')
        c.argument('description', type=str, help='Gets or sets the description of the runbook.')
        c.argument('log_activity_trace', type=int, help='Gets or sets the activity-level tracing options of the '
                   'runbook.')
        c.argument('publish_content_link_uri', type=str, help='Gets or sets the uri of the runbook content.')
        c.argument('publish_content_link_content_hash', action=AddPublishContentLinkContentHash, nargs='*', help='Gets '
                   'or sets the hash.')
        c.argument('publish_content_link_version', type=str, help='Gets or sets the version of the content.')
        c.argument('draft_in_edit', arg_type=get_three_state_flag(), help='Gets or sets whether runbook is in edit '
                   'mode.')
        c.argument('draft_draft_content_link', type=validate_file_or_dict, help='Gets or sets the draft runbook '
                   'content link. Expected value: json-string/@json-file.')
        c.argument('draft_creation_time', help='Gets or sets the creation time of the runbook draft.')
        c.argument('draft_last_modified_time', help='Gets or sets the last modified time of the runbook draft.')
        c.argument('draft_parameters', type=validate_file_or_dict, help='Gets or sets the runbook draft parameters. '
                   'Expected value: json-string/@json-file.')
        c.argument('draft_output_types', nargs='*', help='Gets or sets the runbook output types.')

    with self.argument_context('automation runbook update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.', id_part='name')
        c.argument('runbook_name', type=str, help='The runbook name.', id_part='child_name_1')
        c.argument('name', type=str, help='Gets or sets the name of the resource.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('description', type=str, help='Gets or sets the description of the runbook.')
        c.argument('log_verbose', arg_type=get_three_state_flag(), help='Gets or sets verbose log option.')
        c.argument('log_progress', arg_type=get_three_state_flag(), help='Gets or sets progress log option.')
        c.argument('log_activity_trace', type=int, help='Gets or sets the activity-level tracing options of the '
                   'runbook.')

    with self.argument_context('automation runbook delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.', id_part='name')
        c.argument('runbook_name', options_list=['--name', '-n', '--runbook-name'], type=str, help='The runbook name.',
                   id_part='child_name_1')

    with self.argument_context('automation runbook publish') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.', id_part='name')
        c.argument('runbook_name', options_list=['--name', '-n', '--runbook-name'], type=str, help='The parameters '
                   'supplied to the publish runbook operation.', id_part='child_name_1')

    with self.argument_context('automation runbook wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('automation_account_name', type=str, help='The name of the automation account.', id_part='name')
        c.argument('runbook_name', options_list=['--name', '-n', '--runbook-name'], type=str, help='The runbook name.',
                   id_part='child_name_1')
