# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "automation runbook create",
)
class Create(AAZCommand):
    """Create the runbook identified by runbook name.

    :example: Create the runbook identified by runbook name.
        az automation runbook create --automation-account-name "myAutomationAccount" --resource-group "rg"                --name "myRunbook" --type "PowerShell" --location "East US 2"
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/runbooks/{}", "2023-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.automation_account_name = AAZStrArg(
            options=["--automation-account-name"],
            help="The name of the automation account.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.runbook_name = AAZStrArg(
            options=["-n", "--name", "--runbook-name"],
            help="The runbook name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z][a-zA-Z-_0-9]*$",
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZStrArg(
            options=["--location"],
            arg_group="Parameters",
            help="Gets or sets the location of the resource.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Gets or sets the tags attached to the resource.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Gets or sets the description of the runbook.",
        )
        _args_schema.draft = AAZObjectArg(
            options=["--draft"],
            arg_group="Properties",
            help="Gets or sets the draft runbook properties.",
        )
        _args_schema.log_activity_trace = AAZIntArg(
            options=["--log-activity-trace"],
            arg_group="Properties",
            help="Gets or sets the activity-level tracing options of the runbook.",
        )
        _args_schema.log_progress = AAZBoolArg(
            options=["--log-progress"],
            arg_group="Properties",
            help="Gets or sets progress log option.",
        )
        _args_schema.log_verbose = AAZBoolArg(
            options=["--log-verbose"],
            arg_group="Properties",
            help="Gets or sets verbose log option.",
        )
        _args_schema.publish_content_link = AAZObjectArg(
            options=["--publish-content-link"],
            arg_group="Properties",
            help="Gets or sets the published runbook content link.",
        )
        cls._build_args_content_link_create(_args_schema.publish_content_link)
        _args_schema.runbook_type = AAZStrArg(
            options=["--runbook-type"],
            arg_group="Properties",
            help="Gets or sets the type of the runbook.",
            required=True,
            enum={"Graph": "Graph", "GraphPowerShell": "GraphPowerShell", "GraphPowerShellWorkflow": "GraphPowerShellWorkflow", "PowerShell": "PowerShell", "PowerShell72": "PowerShell72", "PowerShellWorkflow": "PowerShellWorkflow", "Python2": "Python2", "Python3": "Python3", "Script": "Script"},
        )

        draft = cls._args_schema.draft
        draft.creation_time = AAZDateTimeArg(
            options=["creation-time"],
            help="Gets or sets the creation time of the runbook draft.",
        )
        draft.draft_content_link = AAZObjectArg(
            options=["draft-content-link"],
            help="Gets or sets the draft runbook content link.",
        )
        cls._build_args_content_link_create(draft.draft_content_link)
        draft.in_edit = AAZBoolArg(
            options=["in-edit"],
            help="Gets or sets whether runbook is in edit mode.",
        )
        draft.last_modified_time = AAZDateTimeArg(
            options=["last-modified-time"],
            help="Gets or sets the last modified time of the runbook draft.",
        )
        draft.output_types = AAZListArg(
            options=["output-types"],
            help="Gets or sets the runbook output types.",
        )
        draft.parameters = AAZDictArg(
            options=["parameters"],
            help="Gets or sets the runbook draft parameters.",
        )

        output_types = cls._args_schema.draft.output_types
        output_types.Element = AAZStrArg()

        parameters = cls._args_schema.draft.parameters
        parameters.Element = AAZObjectArg()

        _element = cls._args_schema.draft.parameters.Element
        _element.default_value = AAZStrArg(
            options=["default-value"],
            help="Gets or sets the default value of parameter.",
        )
        _element.is_mandatory = AAZBoolArg(
            options=["is-mandatory"],
            help="Gets or sets a Boolean value to indicate whether the parameter is mandatory or not.",
        )
        _element.position = AAZIntArg(
            options=["position"],
            help="Get or sets the position of the parameter.",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Gets or sets the type of the parameter.",
        )
        return cls._args_schema

    _args_content_link_create = None

    @classmethod
    def _build_args_content_link_create(cls, _schema):
        if cls._args_content_link_create is not None:
            _schema.content_hash = cls._args_content_link_create.content_hash
            _schema.uri = cls._args_content_link_create.uri
            _schema.version = cls._args_content_link_create.version
            return

        cls._args_content_link_create = AAZObjectArg()

        content_link_create = cls._args_content_link_create
        content_link_create.content_hash = AAZObjectArg(
            options=["content-hash"],
            help="Sets the hash.",
        )
        content_link_create.uri = AAZStrArg(
            options=["uri"],
            help="Sets the uri of the content.",
        )
        content_link_create.version = AAZStrArg(
            options=["version"],
            help="Sets the version of the content.",
        )

        content_hash = cls._args_content_link_create.content_hash
        content_hash.algorithm = AAZStrArg(
            options=["algorithm"],
            help="Gets or sets the content hash algorithm used to hash the content.",
            required=True,
        )
        content_hash.value = AAZStrArg(
            options=["value"],
            help="Gets or sets expected hash value of the content.",
            required=True,
        )

        _schema.content_hash = cls._args_content_link_create.content_hash
        _schema.uri = cls._args_content_link_create.uri
        _schema.version = cls._args_content_link_create.version

    def _execute_operations(self):
        self.pre_operations()
        self.RunbookCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class RunbookCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "runbookName", self.ctx.args.runbook_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("name", AAZStrType, ".runbook_name")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("draft", AAZObjectType, ".draft")
                properties.set_prop("logActivityTrace", AAZIntType, ".log_activity_trace")
                properties.set_prop("logProgress", AAZBoolType, ".log_progress")
                properties.set_prop("logVerbose", AAZBoolType, ".log_verbose")
                _CreateHelper._build_schema_content_link_create(properties.set_prop("publishContentLink", AAZObjectType, ".publish_content_link"))
                properties.set_prop("runbookType", AAZStrType, ".runbook_type", typ_kwargs={"flags": {"required": True}})

            draft = _builder.get(".properties.draft")
            if draft is not None:
                draft.set_prop("creationTime", AAZStrType, ".creation_time")
                _CreateHelper._build_schema_content_link_create(draft.set_prop("draftContentLink", AAZObjectType, ".draft_content_link"))
                draft.set_prop("inEdit", AAZBoolType, ".in_edit")
                draft.set_prop("lastModifiedTime", AAZStrType, ".last_modified_time")
                draft.set_prop("outputTypes", AAZListType, ".output_types")
                draft.set_prop("parameters", AAZDictType, ".parameters")

            output_types = _builder.get(".properties.draft.outputTypes")
            if output_types is not None:
                output_types.set_elements(AAZStrType, ".")

            parameters = _builder.get(".properties.draft.parameters")
            if parameters is not None:
                parameters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.draft.parameters{}")
            if _elements is not None:
                _elements.set_prop("defaultValue", AAZStrType, ".default_value")
                _elements.set_prop("isMandatory", AAZBoolType, ".is_mandatory")
                _elements.set_prop("position", AAZIntType, ".position")
                _elements.set_prop("type", AAZStrType, ".type")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType()
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
            )
            properties.description = AAZStrType()
            properties.draft = AAZObjectType()
            properties.job_count = AAZIntType(
                serialized_name="jobCount",
            )
            properties.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            properties.last_modified_time = AAZStrType(
                serialized_name="lastModifiedTime",
            )
            properties.log_activity_trace = AAZIntType(
                serialized_name="logActivityTrace",
            )
            properties.log_progress = AAZBoolType(
                serialized_name="logProgress",
            )
            properties.log_verbose = AAZBoolType(
                serialized_name="logVerbose",
            )
            properties.output_types = AAZListType(
                serialized_name="outputTypes",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.runbook_type = AAZStrType(
                serialized_name="runbookType",
            )
            properties.state = AAZStrType()

            draft = cls._schema_on_200_201.properties.draft
            draft.creation_time = AAZStrType(
                serialized_name="creationTime",
            )
            draft.in_edit = AAZBoolType(
                serialized_name="inEdit",
            )
            draft.last_modified_time = AAZStrType(
                serialized_name="lastModifiedTime",
            )
            draft.output_types = AAZListType(
                serialized_name="outputTypes",
            )
            draft.parameters = AAZDictType()

            output_types = cls._schema_on_200_201.properties.draft.output_types
            output_types.Element = AAZStrType()

            parameters = cls._schema_on_200_201.properties.draft.parameters
            parameters.Element = AAZObjectType()
            _CreateHelper._build_schema_runbook_parameter_read(parameters.Element)

            output_types = cls._schema_on_200_201.properties.output_types
            output_types.Element = AAZStrType()

            parameters = cls._schema_on_200_201.properties.parameters
            parameters.Element = AAZObjectType()
            _CreateHelper._build_schema_runbook_parameter_read(parameters.Element)

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_content_link_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("contentHash", AAZObjectType, ".content_hash")
        _builder.set_prop("uri", AAZStrType, ".uri")
        _builder.set_prop("version", AAZStrType, ".version")

        content_hash = _builder.get(".contentHash")
        if content_hash is not None:
            content_hash.set_prop("algorithm", AAZStrType, ".algorithm", typ_kwargs={"flags": {"required": True}})
            content_hash.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

    _schema_runbook_parameter_read = None

    @classmethod
    def _build_schema_runbook_parameter_read(cls, _schema):
        if cls._schema_runbook_parameter_read is not None:
            _schema.default_value = cls._schema_runbook_parameter_read.default_value
            _schema.is_mandatory = cls._schema_runbook_parameter_read.is_mandatory
            _schema.position = cls._schema_runbook_parameter_read.position
            _schema.type = cls._schema_runbook_parameter_read.type
            return

        cls._schema_runbook_parameter_read = _schema_runbook_parameter_read = AAZObjectType()

        runbook_parameter_read = _schema_runbook_parameter_read
        runbook_parameter_read.default_value = AAZStrType(
            serialized_name="defaultValue",
        )
        runbook_parameter_read.is_mandatory = AAZBoolType(
            serialized_name="isMandatory",
        )
        runbook_parameter_read.position = AAZIntType()
        runbook_parameter_read.type = AAZStrType()

        _schema.default_value = cls._schema_runbook_parameter_read.default_value
        _schema.is_mandatory = cls._schema_runbook_parameter_read.is_mandatory
        _schema.position = cls._schema_runbook_parameter_read.position
        _schema.type = cls._schema_runbook_parameter_read.type


__all__ = ["Create"]
