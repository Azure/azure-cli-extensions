# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "automation runbook show",
)
class Show(AAZCommand):
    """Get the runbook identified by runbook name.

    :example: Get the runbook identified by runbook name.
        az automation runbook show --automation-account-name "myAutomationAccount" --resource-group "rg"                --name "myRunbook"
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/runbooks/{}", "2023-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.automation_account_name = AAZStrArg(
            options=["--automation-account-name"],
            help="The name of the automation account.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.runbook_name = AAZStrArg(
            options=["-n", "--name", "--runbook-name"],
            help="The runbook name.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z][a-zA-Z-_0-9]*$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.RunbookGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class RunbookGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/runbooks/{runbookName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "runbookName", self.ctx.args.runbook_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.creation_time = AAZStrType(
                serialized_name="creationTime",
            )
            properties.description = AAZStrType()
            properties.draft = AAZObjectType()
            properties.job_count = AAZIntType(
                serialized_name="jobCount",
            )
            properties.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            properties.last_modified_time = AAZStrType(
                serialized_name="lastModifiedTime",
            )
            properties.log_activity_trace = AAZIntType(
                serialized_name="logActivityTrace",
            )
            properties.log_progress = AAZBoolType(
                serialized_name="logProgress",
            )
            properties.log_verbose = AAZBoolType(
                serialized_name="logVerbose",
            )
            properties.output_types = AAZListType(
                serialized_name="outputTypes",
            )
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.runbook_type = AAZStrType(
                serialized_name="runbookType",
            )
            properties.state = AAZStrType()

            draft = cls._schema_on_200.properties.draft
            draft.creation_time = AAZStrType(
                serialized_name="creationTime",
            )
            draft.in_edit = AAZBoolType(
                serialized_name="inEdit",
            )
            draft.last_modified_time = AAZStrType(
                serialized_name="lastModifiedTime",
            )
            draft.output_types = AAZListType(
                serialized_name="outputTypes",
            )
            draft.parameters = AAZDictType()

            output_types = cls._schema_on_200.properties.draft.output_types
            output_types.Element = AAZStrType()

            parameters = cls._schema_on_200.properties.draft.parameters
            parameters.Element = AAZObjectType()
            _ShowHelper._build_schema_runbook_parameter_read(parameters.Element)

            output_types = cls._schema_on_200.properties.output_types
            output_types.Element = AAZStrType()

            parameters = cls._schema_on_200.properties.parameters
            parameters.Element = AAZObjectType()
            _ShowHelper._build_schema_runbook_parameter_read(parameters.Element)

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_runbook_parameter_read = None

    @classmethod
    def _build_schema_runbook_parameter_read(cls, _schema):
        if cls._schema_runbook_parameter_read is not None:
            _schema.default_value = cls._schema_runbook_parameter_read.default_value
            _schema.is_mandatory = cls._schema_runbook_parameter_read.is_mandatory
            _schema.position = cls._schema_runbook_parameter_read.position
            _schema.type = cls._schema_runbook_parameter_read.type
            return

        cls._schema_runbook_parameter_read = _schema_runbook_parameter_read = AAZObjectType()

        runbook_parameter_read = _schema_runbook_parameter_read
        runbook_parameter_read.default_value = AAZStrType(
            serialized_name="defaultValue",
        )
        runbook_parameter_read.is_mandatory = AAZBoolType(
            serialized_name="isMandatory",
        )
        runbook_parameter_read.position = AAZIntType()
        runbook_parameter_read.type = AAZStrType()

        _schema.default_value = cls._schema_runbook_parameter_read.default_value
        _schema.is_mandatory = cls._schema_runbook_parameter_read.is_mandatory
        _schema.position = cls._schema_runbook_parameter_read.position
        _schema.type = cls._schema_runbook_parameter_read.type


__all__ = ["Show"]
