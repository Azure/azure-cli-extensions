# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "automation source-control update",
)
class Update(AAZCommand):
    """Update a source control.

    :example: Update source control properties
        az automation source-control update -g rg --automation-account-name myAutomationAccount --name sourceControl --access-token ghp_GITHUB_TOKEN --token-type PersonalAccessToken --publish-runbook True
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/sourcecontrols/{}", "2023-11-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.automation_account_name = AAZStrArg(
            options=["--account", "--automation-account-name"],
            help="The name of the automation account.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.source_control_name = AAZStrArg(
            options=["-n", "--name", "--source-control-name"],
            help="The name of source control.",
            required=True,
            id_part="child_name_1",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.auto_sync = AAZBoolArg(
            options=["--auto-sync"],
            arg_group="Properties",
            help="The auto async of the source control. Default is false.",
            nullable=True,
        )
        _args_schema.branch = AAZStrArg(
            options=["--branch"],
            arg_group="Properties",
            help="The repo branch of the source control. Include branch as empty string for VsoTfvc.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=255,
            ),
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="The user description of the source control.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=512,
            ),
        )
        _args_schema.folder_path = AAZStrArg(
            options=["--folder-path"],
            arg_group="Properties",
            help="The folder path of the source control. Path must be relative.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=255,
            ),
        )
        _args_schema.publish_runbook = AAZBoolArg(
            options=["--publish-runbook"],
            arg_group="Properties",
            help="The auto publish of the source control. Default is true.",
            nullable=True,
        )
        _args_schema.repo_url = AAZStrArg(
            options=["--repo-url"],
            arg_group="Properties",
            help="The repo url of the source control.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _args_schema.source_type = AAZStrArg(
            options=["--source-type"],
            arg_group="Properties",
            help="The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.",
            nullable=True,
            enum={"GitHub": "GitHub", "VsoGit": "VsoGit", "VsoTfvc": "VsoTfvc"},
        )

        # define Arg Group "SecurityToken"

        _args_schema = cls._args_schema
        _args_schema.access_token = AAZStrArg(
            options=["--access-token"],
            arg_group="SecurityToken",
            help="The access token.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=1024,
            ),
        )
        _args_schema.refresh_token = AAZStrArg(
            options=["--refresh-token"],
            arg_group="SecurityToken",
            help="The refresh token.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=1024,
            ),
        )
        _args_schema.token_type = AAZStrArg(
            options=["--token-type"],
            arg_group="SecurityToken",
            help="The token type. Must be either PersonalAccessToken or Oauth.",
            nullable=True,
            enum={"Oauth": "Oauth", "PersonalAccessToken": "PersonalAccessToken"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SourceControlGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.SourceControlCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SourceControlGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sourceControlName", self.ctx.args.source_control_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_source_control_read(cls._schema_on_200)

            return cls._schema_on_200

    class SourceControlCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/sourceControls/{sourceControlName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sourceControlName", self.ctx.args.source_control_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_source_control_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("autoSync", AAZBoolType, ".auto_sync")
                properties.set_prop("branch", AAZStrType, ".branch")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("folderPath", AAZStrType, ".folder_path")
                properties.set_prop("publishRunbook", AAZBoolType, ".publish_runbook")
                properties.set_prop("repoUrl", AAZStrType, ".repo_url")
                properties.set_prop("securityToken", AAZObjectType)
                properties.set_prop("sourceType", AAZStrType, ".source_type")

            security_token = _builder.get(".properties.securityToken")
            if security_token is not None:
                security_token.set_prop("accessToken", AAZStrType, ".access_token")
                security_token.set_prop("refreshToken", AAZStrType, ".refresh_token")
                security_token.set_prop("tokenType", AAZStrType, ".token_type")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_source_control_read = None

    @classmethod
    def _build_schema_source_control_read(cls, _schema):
        if cls._schema_source_control_read is not None:
            _schema.id = cls._schema_source_control_read.id
            _schema.name = cls._schema_source_control_read.name
            _schema.properties = cls._schema_source_control_read.properties
            _schema.type = cls._schema_source_control_read.type
            return

        cls._schema_source_control_read = _schema_source_control_read = AAZObjectType()

        source_control_read = _schema_source_control_read
        source_control_read.id = AAZStrType(
            flags={"read_only": True},
        )
        source_control_read.name = AAZStrType(
            flags={"read_only": True},
        )
        source_control_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        source_control_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_source_control_read.properties
        properties.auto_sync = AAZBoolType(
            serialized_name="autoSync",
        )
        properties.branch = AAZStrType()
        properties.creation_time = AAZStrType(
            serialized_name="creationTime",
        )
        properties.description = AAZStrType()
        properties.folder_path = AAZStrType(
            serialized_name="folderPath",
        )
        properties.last_modified_time = AAZStrType(
            serialized_name="lastModifiedTime",
        )
        properties.publish_runbook = AAZBoolType(
            serialized_name="publishRunbook",
        )
        properties.repo_url = AAZStrType(
            serialized_name="repoUrl",
        )
        properties.source_type = AAZStrType(
            serialized_name="sourceType",
        )

        _schema.id = cls._schema_source_control_read.id
        _schema.name = cls._schema_source_control_read.name
        _schema.properties = cls._schema_source_control_read.properties
        _schema.type = cls._schema_source_control_read.type


__all__ = ["Update"]
