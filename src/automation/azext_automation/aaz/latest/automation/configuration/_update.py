# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "automation configuration update",
)
class Update(AAZCommand):
    """Update the configuration identified by configuration name.

    :example: Update script in DSC Configuration
        az automation configuration update -g rg --automation-account-name myAutomationAccount -n SetupServer --location westus2 --source-type embeddedContent --source "Configuration SetupServer {\r\n    Node localhostServer {\r\n                               WindowsFeature IIS {\r\n                               Name = "Web-Server";\r\n            Ensure = "Present"\r\n        }\r\n    }\r\n}"
    """

    _aaz_info = {
        "version": "2023-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.automation/automationaccounts/{}/configurations/{}", "2023-11-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.automation_account_name = AAZStrArg(
            options=["--account", "--automation-account-name"],
            help="The name of the automation account.",
            required=True,
            id_part="name",
        )
        _args_schema.configuration_name = AAZStrArg(
            options=["-n", "--name", "--configuration-name"],
            help="The configuration name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.location = AAZStrArg(
            options=["--location"],
            arg_group="Parameters",
            help="Gets or sets the location of the resource.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Gets or sets the tags attached to the resource.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Gets or sets the description of the configuration.",
            nullable=True,
        )
        _args_schema.log_progress = AAZBoolArg(
            options=["--log-progress"],
            arg_group="Properties",
            help="Gets or sets progress log option.",
            nullable=True,
        )
        _args_schema.log_verbose = AAZBoolArg(
            options=["--log-verbose"],
            arg_group="Properties",
            help="Gets or sets verbose log option.",
            nullable=True,
        )
        _args_schema.parameters = AAZDictArg(
            options=["--parameters"],
            arg_group="Properties",
            help="Gets or sets the configuration parameters.",
            nullable=True,
        )

        parameters = cls._args_schema.parameters
        parameters.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.parameters.Element
        _element.default_value = AAZStrArg(
            options=["default-value"],
            help="Gets or sets the default value of parameter.",
            nullable=True,
        )
        _element.is_mandatory = AAZBoolArg(
            options=["is-mandatory"],
            help="Gets or sets a Boolean value to indicate whether the parameter is mandatory or not.",
            nullable=True,
        )
        _element.position = AAZIntArg(
            options=["position"],
            help="Get or sets the position of the parameter.",
            nullable=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Gets or sets the type of the parameter.",
            nullable=True,
        )

        # define Arg Group "Source"

        _args_schema = cls._args_schema
        _args_schema.source_hash = AAZObjectArg(
            options=["--source-hash"],
            arg_group="Source",
            help="Gets or sets the hash.",
            nullable=True,
        )
        _args_schema.source_type = AAZStrArg(
            options=["--source-type"],
            arg_group="Source",
            help="Gets or sets the content source type.",
            nullable=True,
            enum={"embeddedContent": "embeddedContent", "uri": "uri"},
        )
        _args_schema.source = AAZStrArg(
            options=["--source"],
            arg_group="Source",
            help="Gets or sets the value of the content. This is based on the content source type.",
            nullable=True,
        )
        _args_schema.source_version = AAZStrArg(
            options=["--source-version"],
            arg_group="Source",
            help="Gets or sets the version of the content.",
            nullable=True,
        )

        source_hash = cls._args_schema.source_hash
        source_hash.algorithm = AAZStrArg(
            options=["algorithm"],
            help="Gets or sets the content hash algorithm used to hash the content.",
        )
        source_hash.value = AAZStrArg(
            options=["value"],
            help="Gets or sets expected hash value of the content.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.DscConfigurationGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.DscConfigurationCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DscConfigurationGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_dsc_configuration_read(cls._schema_on_200)

            return cls._schema_on_200

    class DscConfigurationCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Automation/automationAccounts/{automationAccountName}/configurations/{configurationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "automationAccountName", self.ctx.args.automation_account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "configurationName", self.ctx.args.configuration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_dsc_configuration_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("name", AAZStrType, ".configuration_name")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("logProgress", AAZBoolType, ".log_progress")
                properties.set_prop("logVerbose", AAZBoolType, ".log_verbose")
                properties.set_prop("parameters", AAZDictType, ".parameters")
                properties.set_prop("source", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.parameters{}")
            if _elements is not None:
                _elements.set_prop("defaultValue", AAZStrType, ".default_value")
                _elements.set_prop("isMandatory", AAZBoolType, ".is_mandatory")
                _elements.set_prop("position", AAZIntType, ".position")
                _elements.set_prop("type", AAZStrType, ".type")

            source = _builder.get(".properties.source")
            if source is not None:
                source.set_prop("hash", AAZObjectType, ".source_hash")
                source.set_prop("type", AAZStrType, ".source_type")
                source.set_prop("value", AAZStrType, ".source")
                source.set_prop("version", AAZStrType, ".source_version")

            hash = _builder.get(".properties.source.hash")
            if hash is not None:
                hash.set_prop("algorithm", AAZStrType, ".algorithm", typ_kwargs={"flags": {"required": True}})
                hash.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_dsc_configuration_read = None

    @classmethod
    def _build_schema_dsc_configuration_read(cls, _schema):
        if cls._schema_dsc_configuration_read is not None:
            _schema.etag = cls._schema_dsc_configuration_read.etag
            _schema.id = cls._schema_dsc_configuration_read.id
            _schema.location = cls._schema_dsc_configuration_read.location
            _schema.name = cls._schema_dsc_configuration_read.name
            _schema.properties = cls._schema_dsc_configuration_read.properties
            _schema.tags = cls._schema_dsc_configuration_read.tags
            _schema.type = cls._schema_dsc_configuration_read.type
            return

        cls._schema_dsc_configuration_read = _schema_dsc_configuration_read = AAZObjectType()

        dsc_configuration_read = _schema_dsc_configuration_read
        dsc_configuration_read.etag = AAZStrType()
        dsc_configuration_read.id = AAZStrType(
            flags={"read_only": True},
        )
        dsc_configuration_read.location = AAZStrType()
        dsc_configuration_read.name = AAZStrType(
            flags={"read_only": True},
        )
        dsc_configuration_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        dsc_configuration_read.tags = AAZDictType()
        dsc_configuration_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_dsc_configuration_read.properties
        properties.creation_time = AAZStrType(
            serialized_name="creationTime",
        )
        properties.description = AAZStrType()
        properties.job_count = AAZIntType(
            serialized_name="jobCount",
        )
        properties.last_modified_time = AAZStrType(
            serialized_name="lastModifiedTime",
        )
        properties.log_verbose = AAZBoolType(
            serialized_name="logVerbose",
        )
        properties.node_configuration_count = AAZIntType(
            serialized_name="nodeConfigurationCount",
        )
        properties.parameters = AAZDictType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )
        properties.source = AAZObjectType()
        properties.state = AAZStrType()

        parameters = _schema_dsc_configuration_read.properties.parameters
        parameters.Element = AAZObjectType()

        _element = _schema_dsc_configuration_read.properties.parameters.Element
        _element.default_value = AAZStrType(
            serialized_name="defaultValue",
        )
        _element.is_mandatory = AAZBoolType(
            serialized_name="isMandatory",
        )
        _element.position = AAZIntType()
        _element.type = AAZStrType()

        source = _schema_dsc_configuration_read.properties.source
        source.hash = AAZObjectType()
        source.type = AAZStrType()
        source.value = AAZStrType()
        source.version = AAZStrType()

        hash = _schema_dsc_configuration_read.properties.source.hash
        hash.algorithm = AAZStrType(
            flags={"required": True},
        )
        hash.value = AAZStrType(
            flags={"required": True},
        )

        tags = _schema_dsc_configuration_read.tags
        tags.Element = AAZStrType()

        _schema.etag = cls._schema_dsc_configuration_read.etag
        _schema.id = cls._schema_dsc_configuration_read.id
        _schema.location = cls._schema_dsc_configuration_read.location
        _schema.name = cls._schema_dsc_configuration_read.name
        _schema.properties = cls._schema_dsc_configuration_read.properties
        _schema.tags = cls._schema_dsc_configuration_read.tags
        _schema.type = cls._schema_dsc_configuration_read.type


__all__ = ["Update"]
