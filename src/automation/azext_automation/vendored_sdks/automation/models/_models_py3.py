# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._automation_client_enums import *


class Resource(msrest.serialization.Model):
    """The core properties of ARM resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The Azure Region where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = tags
        self.location = location


class AutomationAccount(TrackedResource):
    """Definition of the automation account type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The Azure Region where the resource lives.
    :type location: str
    :param etag: Gets or sets the etag of the resource.
    :type etag: str
    :param sku: Gets or sets the SKU of account.
    :type sku: ~automation_client.models.Sku
    :param last_modified_by: Gets or sets the last modified by.
    :type last_modified_by: str
    :ivar state: Gets status of account. Possible values include: "Ok", "Unavailable", "Suspended".
    :vartype state: str or ~automation_client.models.AutomationAccountState
    :ivar creation_time: Gets the creation time.
    :vartype creation_time: ~datetime.datetime
    :ivar last_modified_time: Gets the last modified time.
    :vartype last_modified_time: ~datetime.datetime
    :param description: Gets or sets the description.
    :type description: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'state': {'readonly': True},
        'creation_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        etag: Optional[str] = None,
        sku: Optional["Sku"] = None,
        last_modified_by: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(AutomationAccount, self).__init__(tags=tags, location=location, **kwargs)
        self.etag = etag
        self.sku = sku
        self.last_modified_by = last_modified_by
        self.state = None
        self.creation_time = None
        self.last_modified_time = None
        self.description = description


class AutomationAccountCreateOrUpdateParameters(msrest.serialization.Model):
    """The parameters supplied to the create or update automation account operation.

    :param name: Gets or sets name of the resource.
    :type name: str
    :param location: Gets or sets the location of the resource.
    :type location: str
    :param tags: A set of tags. Gets or sets the tags attached to the resource.
    :type tags: dict[str, str]
    :param sku: Gets or sets account SKU.
    :type sku: ~automation_client.models.Sku
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["Sku"] = None,
        **kwargs
    ):
        super(AutomationAccountCreateOrUpdateParameters, self).__init__(**kwargs)
        self.name = name
        self.location = location
        self.tags = tags
        self.sku = sku


class AutomationAccountListResult(msrest.serialization.Model):
    """The response model for the list account operation.

    :param value: Gets or sets list of accounts.
    :type value: list[~automation_client.models.AutomationAccount]
    :param next_link: Gets or sets the next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[AutomationAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["AutomationAccount"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(AutomationAccountListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AutomationAccountUpdateParameters(msrest.serialization.Model):
    """The parameters supplied to the update automation account operation.

    :param name: Gets or sets the name of the resource.
    :type name: str
    :param location: Gets or sets the location of the resource.
    :type location: str
    :param tags: A set of tags. Gets or sets the tags attached to the resource.
    :type tags: dict[str, str]
    :param sku: Gets or sets account SKU.
    :type sku: ~automation_client.models.Sku
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'sku': {'key': 'properties.sku', 'type': 'Sku'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        sku: Optional["Sku"] = None,
        **kwargs
    ):
        super(AutomationAccountUpdateParameters, self).__init__(**kwargs)
        self.name = name
        self.location = location
        self.tags = tags
        self.sku = sku


class ContentHash(msrest.serialization.Model):
    """Definition of the runbook property type.

    All required parameters must be populated in order to send to Azure.

    :param algorithm: Required. Gets or sets the content hash algorithm used to hash the content.
    :type algorithm: str
    :param value: Required. Gets or sets expected hash value of the content.
    :type value: str
    """

    _validation = {
        'algorithm': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'algorithm': {'key': 'algorithm', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        algorithm: str,
        value: str,
        **kwargs
    ):
        super(ContentHash, self).__init__(**kwargs)
        self.algorithm = algorithm
        self.value = value


class ContentLink(msrest.serialization.Model):
    """Definition of the content link.

    :param uri: Gets or sets the uri of the runbook content.
    :type uri: str
    :param content_hash: Gets or sets the hash.
    :type content_hash: ~automation_client.models.ContentHash
    :param version: Gets or sets the version of the content.
    :type version: str
    """

    _attribute_map = {
        'uri': {'key': 'uri', 'type': 'str'},
        'content_hash': {'key': 'contentHash', 'type': 'ContentHash'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        uri: Optional[str] = None,
        content_hash: Optional["ContentHash"] = None,
        version: Optional[str] = None,
        **kwargs
    ):
        super(ContentLink, self).__init__(**kwargs)
        self.uri = uri
        self.content_hash = content_hash
        self.version = version


class ErrorResponse(msrest.serialization.Model):
    """Error response of an operation failure.

    :param code: Error code.
    :type code: str
    :param message: Error message indicating why the operation failed.
    :type message: str
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        message: Optional[str] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.code = code
        self.message = message


class Job(Resource):
    """Definition of the job.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param runbook: Gets or sets the runbook.
    :type runbook: ~automation_client.models.RunbookAssociationProperty
    :param started_by: Gets or sets the job started by.
    :type started_by: str
    :param run_on: Gets or sets the runOn which specifies the group name where the job is to be
     executed.
    :type run_on: str
    :param job_id: Gets or sets the id of the job.
    :type job_id: str
    :param creation_time: Gets or sets the creation time of the job.
    :type creation_time: ~datetime.datetime
    :param status: Gets or sets the status of the job. Possible values include: "New",
     "Activating", "Running", "Completed", "Failed", "Stopped", "Blocked", "Suspended",
     "Disconnected", "Suspending", "Stopping", "Resuming", "Removing".
    :type status: str or ~automation_client.models.JobStatus
    :param status_details: Gets or sets the status details of the job.
    :type status_details: str
    :param start_time: Gets or sets the start time of the job.
    :type start_time: ~datetime.datetime
    :param end_time: Gets or sets the end time of the job.
    :type end_time: ~datetime.datetime
    :param exception: Gets or sets the exception of the job.
    :type exception: str
    :param last_modified_time: Gets or sets the last modified time of the job.
    :type last_modified_time: ~datetime.datetime
    :param last_status_modified_time: Gets or sets the last status modified time of the job.
    :type last_status_modified_time: ~datetime.datetime
    :param parameters: Gets or sets the parameters of the job.
    :type parameters: dict[str, str]
    :ivar provisioning_state: The current provisioning state of the job. Possible values include:
     "Failed", "Succeeded", "Suspended", "Processing".
    :vartype provisioning_state: str or ~automation_client.models.JobProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'runbook': {'key': 'properties.runbook', 'type': 'RunbookAssociationProperty'},
        'started_by': {'key': 'properties.startedBy', 'type': 'str'},
        'run_on': {'key': 'properties.runOn', 'type': 'str'},
        'job_id': {'key': 'properties.jobId', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'status_details': {'key': 'properties.statusDetails', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'exception': {'key': 'properties.exception', 'type': 'str'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'last_status_modified_time': {'key': 'properties.lastStatusModifiedTime', 'type': 'iso-8601'},
        'parameters': {'key': 'properties.parameters', 'type': '{str}'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        runbook: Optional["RunbookAssociationProperty"] = None,
        started_by: Optional[str] = None,
        run_on: Optional[str] = None,
        job_id: Optional[str] = None,
        creation_time: Optional[datetime.datetime] = None,
        status: Optional[Union[str, "JobStatus"]] = None,
        status_details: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        exception: Optional[str] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        last_status_modified_time: Optional[datetime.datetime] = None,
        parameters: Optional[Dict[str, str]] = None,
        **kwargs
    ):
        super(Job, self).__init__(**kwargs)
        self.runbook = runbook
        self.started_by = started_by
        self.run_on = run_on
        self.job_id = job_id
        self.creation_time = creation_time
        self.status = status
        self.status_details = status_details
        self.start_time = start_time
        self.end_time = end_time
        self.exception = exception
        self.last_modified_time = last_modified_time
        self.last_status_modified_time = last_status_modified_time
        self.parameters = parameters
        self.provisioning_state = None


class JobCollectionItem(Resource):
    """Job collection item properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :ivar runbook: The runbook association.
    :vartype runbook: ~automation_client.models.RunbookAssociationProperty
    :ivar job_id: The id of the job.
    :vartype job_id: str
    :ivar creation_time: The creation time of the job.
    :vartype creation_time: ~datetime.datetime
    :ivar status: The status of the job. Possible values include: "New", "Activating", "Running",
     "Completed", "Failed", "Stopped", "Blocked", "Suspended", "Disconnected", "Suspending",
     "Stopping", "Resuming", "Removing".
    :vartype status: str or ~automation_client.models.JobStatus
    :ivar start_time: The start time of the job.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: The end time of the job.
    :vartype end_time: ~datetime.datetime
    :ivar last_modified_time: The last modified time of the job.
    :vartype last_modified_time: ~datetime.datetime
    :ivar provisioning_state: The provisioning state of a resource.
    :vartype provisioning_state: str
    :param run_on: Specifies the runOn group name where the job was executed.
    :type run_on: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'runbook': {'readonly': True},
        'job_id': {'readonly': True},
        'creation_time': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'last_modified_time': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'runbook': {'key': 'properties.runbook', 'type': 'RunbookAssociationProperty'},
        'job_id': {'key': 'properties.jobId', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'start_time': {'key': 'properties.startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'properties.endTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'run_on': {'key': 'properties.runOn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        run_on: Optional[str] = None,
        **kwargs
    ):
        super(JobCollectionItem, self).__init__(**kwargs)
        self.runbook = None
        self.job_id = None
        self.creation_time = None
        self.status = None
        self.start_time = None
        self.end_time = None
        self.last_modified_time = None
        self.provisioning_state = None
        self.run_on = run_on


class JobCreateParameters(msrest.serialization.Model):
    """The parameters supplied to the create job operation.

    :param runbook: Gets or sets the runbook.
    :type runbook: ~automation_client.models.RunbookAssociationProperty
    :param parameters: Gets or sets the parameters of the job.
    :type parameters: dict[str, str]
    :param run_on: Gets or sets the runOn which specifies the group name where the job is to be
     executed.
    :type run_on: str
    """

    _attribute_map = {
        'runbook': {'key': 'properties.runbook', 'type': 'RunbookAssociationProperty'},
        'parameters': {'key': 'properties.parameters', 'type': '{str}'},
        'run_on': {'key': 'properties.runOn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        runbook: Optional["RunbookAssociationProperty"] = None,
        parameters: Optional[Dict[str, str]] = None,
        run_on: Optional[str] = None,
        **kwargs
    ):
        super(JobCreateParameters, self).__init__(**kwargs)
        self.runbook = runbook
        self.parameters = parameters
        self.run_on = run_on


class JobListResultV2(msrest.serialization.Model):
    """The response model for the list job operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param value: List of jobs.
    :type value: list[~automation_client.models.JobCollectionItem]
    :ivar next_link: The  link to the next page.
    :vartype next_link: str
    """

    _validation = {
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[JobCollectionItem]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["JobCollectionItem"]] = None,
        **kwargs
    ):
        super(JobListResultV2, self).__init__(**kwargs)
        self.value = value
        self.next_link = None


class JobStream(msrest.serialization.Model):
    """Definition of the job stream.

    :param id: Gets or sets the id of the resource.
    :type id: str
    :param job_stream_id: Gets or sets the id of the job stream.
    :type job_stream_id: str
    :param time: Gets or sets the creation time of the job.
    :type time: ~datetime.datetime
    :param stream_type: Gets or sets the stream type. Possible values include: "Progress",
     "Output", "Warning", "Error", "Debug", "Verbose", "Any".
    :type stream_type: str or ~automation_client.models.JobStreamType
    :param stream_text: Gets or sets the stream text.
    :type stream_text: str
    :param summary: Gets or sets the summary.
    :type summary: str
    :param value: Gets or sets the values of the job stream.
    :type value: dict[str, object]
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'job_stream_id': {'key': 'properties.jobStreamId', 'type': 'str'},
        'time': {'key': 'properties.time', 'type': 'iso-8601'},
        'stream_type': {'key': 'properties.streamType', 'type': 'str'},
        'stream_text': {'key': 'properties.streamText', 'type': 'str'},
        'summary': {'key': 'properties.summary', 'type': 'str'},
        'value': {'key': 'properties.value', 'type': '{object}'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        job_stream_id: Optional[str] = None,
        time: Optional[datetime.datetime] = None,
        stream_type: Optional[Union[str, "JobStreamType"]] = None,
        stream_text: Optional[str] = None,
        summary: Optional[str] = None,
        value: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(JobStream, self).__init__(**kwargs)
        self.id = id
        self.job_stream_id = job_stream_id
        self.time = time
        self.stream_type = stream_type
        self.stream_text = stream_text
        self.summary = summary
        self.value = value


class JobStreamListResult(msrest.serialization.Model):
    """The response model for the list job stream operation.

    :param value: A list of job streams.
    :type value: list[~automation_client.models.JobStream]
    :param next_link: Gets or sets the next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[JobStream]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["JobStream"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(JobStreamListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Key(msrest.serialization.Model):
    """Automation key which is used to register a DSC Node.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar key_name: Automation key name. Possible values include: "Primary", "Secondary".
    :vartype key_name: str or ~automation_client.models.AutomationKeyName
    :ivar permissions: Automation key permissions. Possible values include: "Read", "Full".
    :vartype permissions: str or ~automation_client.models.AutomationKeyPermissions
    :ivar value: Value of the Automation Key used for registration.
    :vartype value: str
    """

    _validation = {
        'key_name': {'readonly': True},
        'permissions': {'readonly': True},
        'value': {'readonly': True},
    }

    _attribute_map = {
        'key_name': {'key': 'KeyName', 'type': 'str'},
        'permissions': {'key': 'Permissions', 'type': 'str'},
        'value': {'key': 'Value', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Key, self).__init__(**kwargs)
        self.key_name = None
        self.permissions = None
        self.value = None


class KeyListResult(msrest.serialization.Model):
    """KeyListResult.

    :param keys: Lists the automation keys.
    :type keys: list[~automation_client.models.Key]
    """

    _attribute_map = {
        'keys': {'key': 'keys', 'type': '[Key]'},
    }

    def __init__(
        self,
        *,
        keys: Optional[List["Key"]] = None,
        **kwargs
    ):
        super(KeyListResult, self).__init__(**kwargs)
        self.keys = keys


class Operation(msrest.serialization.Model):
    """Automation REST API operation.

    :param name: Operation name: {provider}/{resource}/{operation}.
    :type name: str
    :param display: Provider, Resource and Operation values.
    :type display: ~automation_client.models.OperationDisplay
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        display: Optional["OperationDisplay"] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = name
        self.display = display


class OperationDisplay(msrest.serialization.Model):
    """Provider, Resource and Operation values.

    :param provider: Service provider: Microsoft.Automation.
    :type provider: str
    :param resource: Resource on which the operation is performed: Runbooks, Jobs etc.
    :type resource: str
    :param operation: Operation type: Read, write, delete, etc.
    :type operation: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        operation: Optional[str] = None,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation


class OperationListResult(msrest.serialization.Model):
    """The response model for the list of Automation operations.

    :param value: List of Automation operations supported by the Automation resource provider.
    :type value: list[~automation_client.models.Operation]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Operation"]] = None,
        **kwargs
    ):
        super(OperationListResult, self).__init__(**kwargs)
        self.value = value


class ProxyResource(Resource):
    """ARM proxy resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class Runbook(TrackedResource):
    """Definition of the runbook type.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: The Azure Region where the resource lives.
    :type location: str
    :param etag: Gets or sets the etag of the resource.
    :type etag: str
    :param runbook_type: Gets or sets the type of the runbook. Possible values include: "Script",
     "Graph", "PowerShellWorkflow", "PowerShell", "GraphPowerShellWorkflow", "GraphPowerShell".
    :type runbook_type: str or ~automation_client.models.RunbookTypeEnum
    :param publish_content_link: Gets or sets the published runbook content link.
    :type publish_content_link: ~automation_client.models.ContentLink
    :param state: Gets or sets the state of the runbook. Possible values include: "New", "Edit",
     "Published".
    :type state: str or ~automation_client.models.RunbookState
    :param log_verbose: Gets or sets verbose log option.
    :type log_verbose: bool
    :param log_progress: Gets or sets progress log option.
    :type log_progress: bool
    :param log_activity_trace: Gets or sets the option to log activity trace of the runbook.
    :type log_activity_trace: int
    :param job_count: Gets or sets the job count of the runbook.
    :type job_count: int
    :param parameters: Gets or sets the runbook parameters.
    :type parameters: dict[str, ~automation_client.models.RunbookParameter]
    :param output_types: Gets or sets the runbook output types.
    :type output_types: list[str]
    :param draft: Gets or sets the draft runbook properties.
    :type draft: ~automation_client.models.RunbookDraft
    :ivar provisioning_state: Gets or sets the provisioning state of the runbook. Default value:
     "Succeeded".
    :vartype provisioning_state: str
    :param last_modified_by: Gets or sets the last modified by.
    :type last_modified_by: str
    :param creation_time: Gets or sets the creation time.
    :type creation_time: ~datetime.datetime
    :param last_modified_time: Gets or sets the last modified time.
    :type last_modified_time: ~datetime.datetime
    :param description: Gets or sets the description.
    :type description: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'provisioning_state': {'constant': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'runbook_type': {'key': 'properties.runbookType', 'type': 'str'},
        'publish_content_link': {'key': 'properties.publishContentLink', 'type': 'ContentLink'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'log_verbose': {'key': 'properties.logVerbose', 'type': 'bool'},
        'log_progress': {'key': 'properties.logProgress', 'type': 'bool'},
        'log_activity_trace': {'key': 'properties.logActivityTrace', 'type': 'int'},
        'job_count': {'key': 'properties.jobCount', 'type': 'int'},
        'parameters': {'key': 'properties.parameters', 'type': '{RunbookParameter}'},
        'output_types': {'key': 'properties.outputTypes', 'type': '[str]'},
        'draft': {'key': 'properties.draft', 'type': 'RunbookDraft'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'last_modified_by': {'key': 'properties.lastModifiedBy', 'type': 'str'},
        'creation_time': {'key': 'properties.creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'properties.lastModifiedTime', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
    }

    provisioning_state = "Succeeded"

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        location: Optional[str] = None,
        etag: Optional[str] = None,
        runbook_type: Optional[Union[str, "RunbookTypeEnum"]] = None,
        publish_content_link: Optional["ContentLink"] = None,
        state: Optional[Union[str, "RunbookState"]] = None,
        log_verbose: Optional[bool] = None,
        log_progress: Optional[bool] = None,
        log_activity_trace: Optional[int] = None,
        job_count: Optional[int] = None,
        parameters: Optional[Dict[str, "RunbookParameter"]] = None,
        output_types: Optional[List[str]] = None,
        draft: Optional["RunbookDraft"] = None,
        last_modified_by: Optional[str] = None,
        creation_time: Optional[datetime.datetime] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(Runbook, self).__init__(tags=tags, location=location, **kwargs)
        self.etag = etag
        self.runbook_type = runbook_type
        self.publish_content_link = publish_content_link
        self.state = state
        self.log_verbose = log_verbose
        self.log_progress = log_progress
        self.log_activity_trace = log_activity_trace
        self.job_count = job_count
        self.parameters = parameters
        self.output_types = output_types
        self.draft = draft
        self.last_modified_by = last_modified_by
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.description = description


class RunbookAssociationProperty(msrest.serialization.Model):
    """The runbook property associated with the entity.

    :param name: Gets or sets the name of the runbook.
    :type name: str
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        **kwargs
    ):
        super(RunbookAssociationProperty, self).__init__(**kwargs)
        self.name = name


class RunbookCreateOrUpdateDraftParameters(msrest.serialization.Model):
    """The parameters supplied to the create or update runbook operation.

    All required parameters must be populated in order to send to Azure.

    :param runbook_content: Required. Content of the Runbook.
    :type runbook_content: str
    """

    _validation = {
        'runbook_content': {'required': True},
    }

    _attribute_map = {
        'runbook_content': {'key': 'runbookContent', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        runbook_content: str,
        **kwargs
    ):
        super(RunbookCreateOrUpdateDraftParameters, self).__init__(**kwargs)
        self.runbook_content = runbook_content


class RunbookCreateOrUpdateDraftProperties(msrest.serialization.Model):
    """The parameters supplied to the create or update draft runbook properties.

    All required parameters must be populated in order to send to Azure.

    :param log_verbose: Gets or sets verbose log option.
    :type log_verbose: bool
    :param log_progress: Gets or sets progress log option.
    :type log_progress: bool
    :param runbook_type: Required. Gets or sets the type of the runbook. Possible values include:
     "Script", "Graph", "PowerShellWorkflow", "PowerShell", "GraphPowerShellWorkflow",
     "GraphPowerShell".
    :type runbook_type: str or ~automation_client.models.RunbookTypeEnum
    :param draft: Required. Gets or sets the draft runbook properties.
    :type draft: ~automation_client.models.RunbookDraft
    :param description: Gets or sets the description of the runbook.
    :type description: str
    :param log_activity_trace: Gets or sets the activity-level tracing options of the runbook.
    :type log_activity_trace: int
    """

    _validation = {
        'runbook_type': {'required': True},
        'draft': {'required': True},
    }

    _attribute_map = {
        'log_verbose': {'key': 'logVerbose', 'type': 'bool'},
        'log_progress': {'key': 'logProgress', 'type': 'bool'},
        'runbook_type': {'key': 'runbookType', 'type': 'str'},
        'draft': {'key': 'draft', 'type': 'RunbookDraft'},
        'description': {'key': 'description', 'type': 'str'},
        'log_activity_trace': {'key': 'logActivityTrace', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        runbook_type: Union[str, "RunbookTypeEnum"],
        draft: "RunbookDraft",
        log_verbose: Optional[bool] = None,
        log_progress: Optional[bool] = None,
        description: Optional[str] = None,
        log_activity_trace: Optional[int] = None,
        **kwargs
    ):
        super(RunbookCreateOrUpdateDraftProperties, self).__init__(**kwargs)
        self.log_verbose = log_verbose
        self.log_progress = log_progress
        self.runbook_type = runbook_type
        self.draft = draft
        self.description = description
        self.log_activity_trace = log_activity_trace


class RunbookCreateOrUpdateParameters(msrest.serialization.Model):
    """The parameters supplied to the create or update runbook operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Gets or sets the name of the resource.
    :type name: str
    :param location: Gets or sets the location of the resource.
    :type location: str
    :param tags: A set of tags. Gets or sets the tags attached to the resource.
    :type tags: dict[str, str]
    :param log_verbose: Gets or sets verbose log option.
    :type log_verbose: bool
    :param log_progress: Gets or sets progress log option.
    :type log_progress: bool
    :param runbook_type: Required. Gets or sets the type of the runbook. Possible values include:
     "Script", "Graph", "PowerShellWorkflow", "PowerShell", "GraphPowerShellWorkflow",
     "GraphPowerShell".
    :type runbook_type: str or ~automation_client.models.RunbookTypeEnum
    :param draft: Gets or sets the draft runbook properties.
    :type draft: ~automation_client.models.RunbookDraft
    :param publish_content_link: Gets or sets the published runbook content link.
    :type publish_content_link: ~automation_client.models.ContentLink
    :param description: Gets or sets the description of the runbook.
    :type description: str
    :param log_activity_trace: Gets or sets the activity-level tracing options of the runbook.
    :type log_activity_trace: int
    """

    _validation = {
        'runbook_type': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'log_verbose': {'key': 'properties.logVerbose', 'type': 'bool'},
        'log_progress': {'key': 'properties.logProgress', 'type': 'bool'},
        'runbook_type': {'key': 'properties.runbookType', 'type': 'str'},
        'draft': {'key': 'properties.draft', 'type': 'RunbookDraft'},
        'publish_content_link': {'key': 'properties.publishContentLink', 'type': 'ContentLink'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'log_activity_trace': {'key': 'properties.logActivityTrace', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        runbook_type: Union[str, "RunbookTypeEnum"],
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        log_verbose: Optional[bool] = None,
        log_progress: Optional[bool] = None,
        draft: Optional["RunbookDraft"] = None,
        publish_content_link: Optional["ContentLink"] = None,
        description: Optional[str] = None,
        log_activity_trace: Optional[int] = None,
        **kwargs
    ):
        super(RunbookCreateOrUpdateParameters, self).__init__(**kwargs)
        self.name = name
        self.location = location
        self.tags = tags
        self.log_verbose = log_verbose
        self.log_progress = log_progress
        self.runbook_type = runbook_type
        self.draft = draft
        self.publish_content_link = publish_content_link
        self.description = description
        self.log_activity_trace = log_activity_trace


class RunbookDraft(msrest.serialization.Model):
    """RunbookDraft.

    :param in_edit: Gets or sets whether runbook is in edit mode.
    :type in_edit: bool
    :param draft_content_link: Gets or sets the draft runbook content link.
    :type draft_content_link: ~automation_client.models.ContentLink
    :param creation_time: Gets or sets the creation time of the runbook draft.
    :type creation_time: ~datetime.datetime
    :param last_modified_time: Gets or sets the last modified time of the runbook draft.
    :type last_modified_time: ~datetime.datetime
    :param parameters: Gets or sets the runbook draft parameters.
    :type parameters: dict[str, ~automation_client.models.RunbookParameter]
    :param output_types: Gets or sets the runbook output types.
    :type output_types: list[str]
    """

    _attribute_map = {
        'in_edit': {'key': 'inEdit', 'type': 'bool'},
        'draft_content_link': {'key': 'draftContentLink', 'type': 'ContentLink'},
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
        'parameters': {'key': 'parameters', 'type': '{RunbookParameter}'},
        'output_types': {'key': 'outputTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        in_edit: Optional[bool] = None,
        draft_content_link: Optional["ContentLink"] = None,
        creation_time: Optional[datetime.datetime] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        parameters: Optional[Dict[str, "RunbookParameter"]] = None,
        output_types: Optional[List[str]] = None,
        **kwargs
    ):
        super(RunbookDraft, self).__init__(**kwargs)
        self.in_edit = in_edit
        self.draft_content_link = draft_content_link
        self.creation_time = creation_time
        self.last_modified_time = last_modified_time
        self.parameters = parameters
        self.output_types = output_types


class RunbookDraftUndoEditResult(msrest.serialization.Model):
    """The response model for the undo edit runbook operation.

    :param status_code:  Possible values include: "Continue", "SwitchingProtocols", "OK",
     "Created", "Accepted", "NonAuthoritativeInformation", "NoContent", "ResetContent",
     "PartialContent", "MultipleChoices", "Ambiguous", "MovedPermanently", "Moved", "Found",
     "Redirect", "SeeOther", "RedirectMethod", "NotModified", "UseProxy", "Unused",
     "TemporaryRedirect", "RedirectKeepVerb", "BadRequest", "Unauthorized", "PaymentRequired",
     "Forbidden", "NotFound", "MethodNotAllowed", "NotAcceptable", "ProxyAuthenticationRequired",
     "RequestTimeout", "Conflict", "Gone", "LengthRequired", "PreconditionFailed",
     "RequestEntityTooLarge", "RequestUriTooLong", "UnsupportedMediaType",
     "RequestedRangeNotSatisfiable", "ExpectationFailed", "UpgradeRequired", "InternalServerError",
     "NotImplemented", "BadGateway", "ServiceUnavailable", "GatewayTimeout",
     "HttpVersionNotSupported".
    :type status_code: str or ~automation_client.models.HttpStatusCode
    :param request_id:
    :type request_id: str
    """

    _attribute_map = {
        'status_code': {'key': 'statusCode', 'type': 'str'},
        'request_id': {'key': 'requestId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        status_code: Optional[Union[str, "HttpStatusCode"]] = None,
        request_id: Optional[str] = None,
        **kwargs
    ):
        super(RunbookDraftUndoEditResult, self).__init__(**kwargs)
        self.status_code = status_code
        self.request_id = request_id


class RunbookListResult(msrest.serialization.Model):
    """The response model for the list runbook operation.

    :param value: Gets or sets a list of runbooks.
    :type value: list[~automation_client.models.Runbook]
    :param next_link: Gets or sets the next link.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Runbook]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Runbook"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(RunbookListResult, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class RunbookParameter(msrest.serialization.Model):
    """Definition of the runbook parameter type.

    :param type: Gets or sets the type of the parameter.
    :type type: str
    :param is_mandatory: Gets or sets a Boolean value to indicate whether the parameter is
     mandatory or not.
    :type is_mandatory: bool
    :param position: Get or sets the position of the parameter.
    :type position: int
    :param default_value: Gets or sets the default value of parameter.
    :type default_value: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'is_mandatory': {'key': 'isMandatory', 'type': 'bool'},
        'position': {'key': 'position', 'type': 'int'},
        'default_value': {'key': 'defaultValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        is_mandatory: Optional[bool] = None,
        position: Optional[int] = None,
        default_value: Optional[str] = None,
        **kwargs
    ):
        super(RunbookParameter, self).__init__(**kwargs)
        self.type = type
        self.is_mandatory = is_mandatory
        self.position = position
        self.default_value = default_value


class RunbookUpdateParameters(msrest.serialization.Model):
    """The parameters supplied to the update runbook operation.

    :param name: Gets or sets the name of the resource.
    :type name: str
    :param location: Gets or sets the location of the resource.
    :type location: str
    :param tags: A set of tags. Gets or sets the tags attached to the resource.
    :type tags: dict[str, str]
    :param description: Gets or sets the description of the runbook.
    :type description: str
    :param log_verbose: Gets or sets verbose log option.
    :type log_verbose: bool
    :param log_progress: Gets or sets progress log option.
    :type log_progress: bool
    :param log_activity_trace: Gets or sets the activity-level tracing options of the runbook.
    :type log_activity_trace: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'log_verbose': {'key': 'properties.logVerbose', 'type': 'bool'},
        'log_progress': {'key': 'properties.logProgress', 'type': 'bool'},
        'log_activity_trace': {'key': 'properties.logActivityTrace', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        location: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        description: Optional[str] = None,
        log_verbose: Optional[bool] = None,
        log_progress: Optional[bool] = None,
        log_activity_trace: Optional[int] = None,
        **kwargs
    ):
        super(RunbookUpdateParameters, self).__init__(**kwargs)
        self.name = name
        self.location = location
        self.tags = tags
        self.description = description
        self.log_verbose = log_verbose
        self.log_progress = log_progress
        self.log_activity_trace = log_activity_trace


class Sku(msrest.serialization.Model):
    """The account SKU.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Gets or sets the SKU name of the account. Possible values include:
     "Free", "Basic".
    :type name: str or ~automation_client.models.SkuNameEnum
    :param family: Gets or sets the SKU family.
    :type family: str
    :param capacity: Gets or sets the SKU capacity.
    :type capacity: int
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        name: Union[str, "SkuNameEnum"],
        family: Optional[str] = None,
        capacity: Optional[int] = None,
        **kwargs
    ):
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.family = family
        self.capacity = capacity


class Statistics(msrest.serialization.Model):
    """Definition of the statistic.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar counter_property: Gets the property value of the statistic.
    :vartype counter_property: str
    :ivar counter_value: Gets the value of the statistic.
    :vartype counter_value: long
    :ivar start_time: Gets the startTime of the statistic.
    :vartype start_time: ~datetime.datetime
    :ivar end_time: Gets the endTime of the statistic.
    :vartype end_time: ~datetime.datetime
    :ivar id: Gets the id.
    :vartype id: str
    """

    _validation = {
        'counter_property': {'readonly': True},
        'counter_value': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'id': {'readonly': True},
    }

    _attribute_map = {
        'counter_property': {'key': 'counterProperty', 'type': 'str'},
        'counter_value': {'key': 'counterValue', 'type': 'long'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'id': {'key': 'id', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Statistics, self).__init__(**kwargs)
        self.counter_property = None
        self.counter_value = None
        self.start_time = None
        self.end_time = None
        self.id = None


class StatisticsListResult(msrest.serialization.Model):
    """The response model for the list statistics operation.

    :param value: Gets or sets a list of statistics.
    :type value: list[~automation_client.models.Statistics]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Statistics]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Statistics"]] = None,
        **kwargs
    ):
        super(StatisticsListResult, self).__init__(**kwargs)
        self.value = value


class TestJob(msrest.serialization.Model):
    """Definition of the test job.

    :param creation_time: Gets or sets the creation time of the test job.
    :type creation_time: ~datetime.datetime
    :param status: Gets or sets the status of the test job.
    :type status: str
    :param status_details: Gets or sets the status details of the test job.
    :type status_details: str
    :param run_on: Gets or sets the runOn which specifies the group name where the job is to be
     executed.
    :type run_on: str
    :param start_time: Gets or sets the start time of the test job.
    :type start_time: ~datetime.datetime
    :param end_time: Gets or sets the end time of the test job.
    :type end_time: ~datetime.datetime
    :param exception: Gets or sets the exception of the test job.
    :type exception: str
    :param last_modified_time: Gets or sets the last modified time of the test job.
    :type last_modified_time: ~datetime.datetime
    :param last_status_modified_time: Gets or sets the last status modified time of the test job.
    :type last_status_modified_time: ~datetime.datetime
    :param parameters: Gets or sets the parameters of the test job.
    :type parameters: dict[str, str]
    :param log_activity_trace: The activity-level tracing options of the runbook.
    :type log_activity_trace: int
    """

    _attribute_map = {
        'creation_time': {'key': 'creationTime', 'type': 'iso-8601'},
        'status': {'key': 'status', 'type': 'str'},
        'status_details': {'key': 'statusDetails', 'type': 'str'},
        'run_on': {'key': 'runOn', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'iso-8601'},
        'end_time': {'key': 'endTime', 'type': 'iso-8601'},
        'exception': {'key': 'exception', 'type': 'str'},
        'last_modified_time': {'key': 'lastModifiedTime', 'type': 'iso-8601'},
        'last_status_modified_time': {'key': 'lastStatusModifiedTime', 'type': 'iso-8601'},
        'parameters': {'key': 'parameters', 'type': '{str}'},
        'log_activity_trace': {'key': 'logActivityTrace', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        creation_time: Optional[datetime.datetime] = None,
        status: Optional[str] = None,
        status_details: Optional[str] = None,
        run_on: Optional[str] = None,
        start_time: Optional[datetime.datetime] = None,
        end_time: Optional[datetime.datetime] = None,
        exception: Optional[str] = None,
        last_modified_time: Optional[datetime.datetime] = None,
        last_status_modified_time: Optional[datetime.datetime] = None,
        parameters: Optional[Dict[str, str]] = None,
        log_activity_trace: Optional[int] = None,
        **kwargs
    ):
        super(TestJob, self).__init__(**kwargs)
        self.creation_time = creation_time
        self.status = status
        self.status_details = status_details
        self.run_on = run_on
        self.start_time = start_time
        self.end_time = end_time
        self.exception = exception
        self.last_modified_time = last_modified_time
        self.last_status_modified_time = last_status_modified_time
        self.parameters = parameters
        self.log_activity_trace = log_activity_trace


class TestJobCreateParameters(msrest.serialization.Model):
    """The parameters supplied to the create test job operation.

    :param parameters: Gets or sets the parameters of the test job.
    :type parameters: dict[str, str]
    :param run_on: Gets or sets the runOn which specifies the group name where the job is to be
     executed.
    :type run_on: str
    """

    _attribute_map = {
        'parameters': {'key': 'parameters', 'type': '{str}'},
        'run_on': {'key': 'runOn', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        parameters: Optional[Dict[str, str]] = None,
        run_on: Optional[str] = None,
        **kwargs
    ):
        super(TestJobCreateParameters, self).__init__(**kwargs)
        self.parameters = parameters
        self.run_on = run_on


class Usage(msrest.serialization.Model):
    """Definition of Usage.

    :param id: Gets or sets the id of the resource.
    :type id: str
    :param name: Gets or sets the usage counter name.
    :type name: ~automation_client.models.UsageCounterName
    :param unit: Gets or sets the usage unit name.
    :type unit: str
    :param current_value: Gets or sets the current usage value.
    :type current_value: float
    :param limit: Gets or sets max limit. -1 for unlimited.
    :type limit: long
    :param throttle_status: Gets or sets the throttle status.
    :type throttle_status: str
    """

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'UsageCounterName'},
        'unit': {'key': 'unit', 'type': 'str'},
        'current_value': {'key': 'currentValue', 'type': 'float'},
        'limit': {'key': 'limit', 'type': 'long'},
        'throttle_status': {'key': 'throttleStatus', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        id: Optional[str] = None,
        name: Optional["UsageCounterName"] = None,
        unit: Optional[str] = None,
        current_value: Optional[float] = None,
        limit: Optional[int] = None,
        throttle_status: Optional[str] = None,
        **kwargs
    ):
        super(Usage, self).__init__(**kwargs)
        self.id = id
        self.name = name
        self.unit = unit
        self.current_value = current_value
        self.limit = limit
        self.throttle_status = throttle_status


class UsageCounterName(msrest.serialization.Model):
    """Definition of usage counter name.

    :param value: Gets or sets the usage counter name.
    :type value: str
    :param localized_value: Gets or sets the localized usage counter name.
    :type localized_value: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': 'str'},
        'localized_value': {'key': 'localizedValue', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[str] = None,
        localized_value: Optional[str] = None,
        **kwargs
    ):
        super(UsageCounterName, self).__init__(**kwargs)
        self.value = value
        self.localized_value = localized_value


class UsageListResult(msrest.serialization.Model):
    """The response model for the get usage operation.

    :param value: Gets or sets usage.
    :type value: list[~automation_client.models.Usage]
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Usage]'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["Usage"]] = None,
        **kwargs
    ):
        super(UsageListResult, self).__init__(**kwargs)
        self.value = value
