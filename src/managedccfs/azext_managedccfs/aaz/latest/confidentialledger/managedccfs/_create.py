# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "confidentialledger managedccfs create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create an Azure Managed CCF instance.

    :example: Deploy a Managed CCF instance with the sample JS application
        az confidentialledger managedccfs create --certs [{certificate:'c:\certs\member0_cert.pem',identifier:"member0"},{certificate:'c:\certs\member1_cert.pem',identifier:"member1"}] --name mymccfinstance --resource-group mccfRG --location southcentralus --deployment-type {language-runtime:'JS',app-source-uri:'sample'}

    :example: Deploy a Managed CCF instance with a custom JS application
        az confidentialledger managedccfs create --certs [{certificate:'c:\certs\member0_cert.pem',identifier:"member0"},{certificate:'c:\certs\member1_cert.pem',identifier:"member1"}] --name mymccfinstance --resource-group mccfRG --location southcentralus --deployment-type {language-runtime:'JS',app-source-uri:'customImage'}
    """

    _aaz_info = {
        "version": "2022-09-08-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.confidentialledger/managedccfs/{}", "2022-09-08-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, None)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.app_name = AAZStrArg(
            options=["-n", "--name", "--app-name"],
            help="The unique name of the instance.",
            required=True,
            is_preview=True,
            fmt=AAZStrArgFormat(
                pattern="^[^-0-9][A-Za-z0-9-]{1,33}[A-Za-z0-9]$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "ManagedCCF"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="ManagedCCF",
            help="The geo-location of the instance. The only region that is supported is southcentralus.",
            required=True,
            is_preview=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="ManagedCCF",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.deployment_type = AAZObjectArg(
            options=["--deployment-type"],
            arg_group="Properties",
            help="Instance specific data.",
            is_preview=True,
        )

        deployment_type = cls._args_schema.deployment_type
        deployment_type.app_source_uri = AAZStrArg(
            options=["app-source-uri"],
            help="Source Uri containing the Managed CCF code. For sample JS application, use the value 'sample' and for a custom JS application, use the value 'customImage'",
            is_preview=True,
        )
        deployment_type.language_runtime = AAZStrArg(
            options=["language-runtime"],
            help="The language runtime value is 'JS'",
            is_preview=True,
            enum={"CPP": "CPP", "JS": "JS"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ManagedCCFCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class ManagedCCFCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConfidentialLedger/managedCCFs/{appName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "appName", self.ctx.args.app_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-09-08-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType)
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("deploymentType", AAZObjectType, ".deployment_type")

            deployment_type = _builder.get(".properties.deploymentType")
            if deployment_type is not None:
                deployment_type.set_prop("appSourceUri", AAZStrType, ".app_source_uri")
                deployment_type.set_prop("languageRuntime", AAZStrType, ".language_runtime")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_201(self, session):
            pass


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
