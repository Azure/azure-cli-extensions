# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_migrate.generated._client_factory import cf_project
    migrate_project = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._project_operations#ProjectOperations.{}',
        client_factory=cf_project)
    with self.command_group('migrate project', migrate_project, client_factory=cf_project, is_experimental=True) as g:
        g.custom_command('list', 'migrate_project_list')
        g.custom_show_command('show', 'migrate_project_show')
        g.custom_command('create', 'migrate_project_create')
        g.custom_command('update', 'migrate_project_update')
        g.custom_command('delete', 'migrate_project_delete', confirmation=True)
        g.custom_command('assessment-option', 'migrate_project_assessment_option')
        g.custom_command('assessment-option-list', 'migrate_project_assessment_option_list')

    from azext_migrate.generated._client_factory import cf_machine
    migrate_machine = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._machine_operations#MachineOperations.{}',
        client_factory=cf_machine)
    with self.command_group('migrate machine', migrate_machine, client_factory=cf_machine, is_experimental=True) as g:
        g.custom_command('list', 'migrate_machine_list')
        g.custom_show_command('show', 'migrate_machine_show')

    from azext_migrate.generated._client_factory import cf_group
    migrate_group = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._group_operations#GroupOperations.{}',
        client_factory=cf_group)
    with self.command_group('migrate group', migrate_group, client_factory=cf_group, is_experimental=True) as g:
        g.custom_command('list', 'migrate_group_list')
        g.custom_show_command('show', 'migrate_group_show')
        g.custom_command('create', 'migrate_group_create')
        g.custom_command('delete', 'migrate_group_delete', confirmation=True)
        g.custom_command('update-machine', 'migrate_group_update_machine')

    from azext_migrate.generated._client_factory import cf_assessment
    migrate_assessment = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._assessment_operations#AssessmentOperations.{}',
        client_factory=cf_assessment)
    with self.command_group('migrate assessment', migrate_assessment, client_factory=cf_assessment,
                            is_experimental=True) as g:
        g.custom_command('list', 'migrate_assessment_list')
        g.custom_show_command('show', 'migrate_assessment_show')
        g.custom_command('create', 'migrate_assessment_create')
        g.custom_command('delete', 'migrate_assessment_delete', confirmation=True)
        g.custom_command('get-report-download-url', 'migrate_assessment_get_report_download_url')

    from azext_migrate.generated._client_factory import cf_assessed_machine
    migrate_assessed_machine = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._assessed_machine_operations#AssessedMachineOpe'
        'rations.{}',
        client_factory=cf_assessed_machine)
    with self.command_group('migrate assessed-machine', migrate_assessed_machine, client_factory=cf_assessed_machine,
                            is_experimental=True) as g:
        g.custom_command('list', 'migrate_assessed_machine_list')
        g.custom_show_command('show', 'migrate_assessed_machine_show')

    from azext_migrate.generated._client_factory import cf_hyper_vcollector
    migrate_hyper_vcollector = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._hyper_vcollector_operations#HyperVCollectorOpe'
        'rations.{}',
        client_factory=cf_hyper_vcollector)
    with self.command_group('migrate hyper-v-collector', migrate_hyper_vcollector, client_factory=cf_hyper_vcollector,
                            is_experimental=True) as g:
        g.custom_command('list', 'migrate_hyper_v_collector_list')
        g.custom_show_command('show', 'migrate_hyper_v_collector_show')
        g.custom_command('create', 'migrate_hyper_v_collector_create')
        g.custom_command('delete', 'migrate_hyper_v_collector_delete', confirmation=True)

    from azext_migrate.generated._client_factory import cf_vmware_collector
    migrate_vmware_collector = CliCommandType(
        operations_tmpl='azext_migrate.vendored_sdks.migrate.operations._vmware_collector_operations#VMwareCollectorOpe'
        'rations.{}',
        client_factory=cf_vmware_collector)
    with self.command_group('migrate v-mware-collector', migrate_vmware_collector, client_factory=cf_vmware_collector,
                            is_experimental=True) as g:
        g.custom_command('list', 'migrate_v_mware_collector_list')
        g.custom_show_command('show', 'migrate_v_mware_collector_show')
        g.custom_command('create', 'migrate_v_mware_collector_create')
        g.custom_command('delete', 'migrate_v_mware_collector_delete', confirmation=True)
