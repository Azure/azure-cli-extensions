# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines


def migrate_project_list(client,
                         resource_group_name=None):
    if resource_group_name:
        return client.list(resource_group_name=resource_group_name)
    return client.list_by_subscription()


def migrate_project_show(client,
                         resource_group_name,
                         project_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name)


def migrate_project_create(client,
                           resource_group_name,
                           project_name,
                           e_tag=None,
                           location=None,
                           tags=None,
                           properties=None):
    return client.create(resource_group_name=resource_group_name,
                         project_name=project_name,
                         e_tag=e_tag,
                         location=location,
                         tags=tags,
                         properties=properties)


def migrate_project_update(client,
                           resource_group_name,
                           project_name,
                           e_tag=None,
                           location=None,
                           tags=None,
                           properties=None):
    return client.update(resource_group_name=resource_group_name,
                         project_name=project_name,
                         e_tag=e_tag,
                         location=location,
                         tags=tags,
                         properties=properties)


def migrate_project_delete(client,
                           resource_group_name,
                           project_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name)


def migrate_project_assessment_option(client,
                                      resource_group_name,
                                      project_name,
                                      assessment_options_name):
    return client.assessment_option(resource_group_name=resource_group_name,
                                    project_name=project_name,
                                    assessment_options_name=assessment_options_name)


def migrate_project_assessment_option_list(client,
                                           resource_group_name,
                                           project_name):
    return client.assessment_option_list(resource_group_name=resource_group_name,
                                         project_name=project_name)


def migrate_machine_list(client,
                         resource_group_name,
                         project_name):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name)


def migrate_machine_show(client,
                         resource_group_name,
                         project_name,
                         machine_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      machine_name=machine_name)


def migrate_group_list(client,
                       resource_group_name,
                       project_name):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name)


def migrate_group_show(client,
                       resource_group_name,
                       project_name,
                       group_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      group_name=group_name)


def migrate_group_create(client,
                         resource_group_name,
                         project_name,
                         group_name,
                         e_tag=None):
    return client.create(resource_group_name=resource_group_name,
                         project_name=project_name,
                         group_name=group_name,
                         e_tag=e_tag,
                         properties=None)


def migrate_group_delete(client,
                         resource_group_name,
                         project_name,
                         group_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name,
                         group_name=group_name)


def migrate_group_update_machine(client,
                                 resource_group_name,
                                 project_name,
                                 group_name,
                                 e_tag=None,
                                 properties=None):
    return client.update_machine(resource_group_name=resource_group_name,
                                 project_name=project_name,
                                 group_name=group_name,
                                 e_tag=e_tag,
                                 properties=properties)


def migrate_assessment_list(client,
                            resource_group_name,
                            project_name,
                            group_name=None):
    if resource_group_name and project_name is not None and group_name is not None:
        return client.list_by_group(resource_group_name=resource_group_name,
                                    project_name=project_name,
                                    group_name=group_name)
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name)


def migrate_assessment_show(client,
                            resource_group_name,
                            project_name,
                            group_name,
                            assessment_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      group_name=group_name,
                      assessment_name=assessment_name)


def migrate_assessment_create(client,
                              resource_group_name,
                              project_name,
                              group_name,
                              assessment_name,
                              e_tag=None,
                              azure_location=None,
                              azure_offer_code=None,
                              azure_pricing_tier=None,
                              azure_storage_redundancy=None,
                              scaling_factor=None,
                              percentile=None,
                              time_range=None,
                              stage=None,
                              currency=None,
                              azure_hybrid_use_benefit=None,
                              discount_percentage=None,
                              sizing_criterion=None,
                              reserved_instance=None,
                              azure_vm_families=None,
                              azure_disk_type=None,
                              vm_uptime=None):
    return client.create(resource_group_name=resource_group_name,
                         project_name=project_name,
                         group_name=group_name,
                         assessment_name=assessment_name,
                         e_tag=e_tag,
                         azure_location=azure_location,
                         azure_offer_code=azure_offer_code,
                         azure_pricing_tier=azure_pricing_tier,
                         azure_storage_redundancy=azure_storage_redundancy,
                         scaling_factor=scaling_factor,
                         percentile=percentile,
                         time_range=time_range,
                         stage=stage,
                         currency=currency,
                         azure_hybrid_use_benefit=azure_hybrid_use_benefit,
                         discount_percentage=discount_percentage,
                         sizing_criterion=sizing_criterion,
                         reserved_instance=reserved_instance,
                         azure_vm_families=azure_vm_families,
                         azure_disk_type=azure_disk_type,
                         vm_uptime=vm_uptime)


def migrate_assessment_delete(client,
                              resource_group_name,
                              project_name,
                              group_name,
                              assessment_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name,
                         group_name=group_name,
                         assessment_name=assessment_name)


def migrate_assessment_get_report_download_url(client,
                                               resource_group_name,
                                               project_name,
                                               group_name,
                                               assessment_name):
    return client.get_report_download_url(resource_group_name=resource_group_name,
                                          project_name=project_name,
                                          group_name=group_name,
                                          assessment_name=assessment_name)


def migrate_assessed_machine_list(client,
                                  resource_group_name,
                                  project_name,
                                  group_name,
                                  assessment_name):
    return client.list_by_assessment(resource_group_name=resource_group_name,
                                     project_name=project_name,
                                     group_name=group_name,
                                     assessment_name=assessment_name)


def migrate_assessed_machine_show(client,
                                  resource_group_name,
                                  project_name,
                                  group_name,
                                  assessment_name,
                                  assessed_machine_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      group_name=group_name,
                      assessment_name=assessment_name,
                      assessed_machine_name=assessed_machine_name)


def migrate_hyper_v_collector_list(client,
                                   resource_group_name,
                                   project_name):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name)


def migrate_hyper_v_collector_show(client,
                                   resource_group_name,
                                   project_name,
                                   hyper_v_collector_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      hyper_v_collector_name=hyper_v_collector_name)


def migrate_hyper_v_collector_create(client,
                                     resource_group_name,
                                     project_name,
                                     hyper_v_collector_name,
                                     e_tag=None,
                                     discovery_site_id=None,
                                     agent_properties_spn_details=None):
    return client.create(resource_group_name=resource_group_name,
                         project_name=project_name,
                         hyper_v_collector_name=hyper_v_collector_name,
                         e_tag=e_tag,
                         discovery_site_id=discovery_site_id,
                         spn_details=agent_properties_spn_details)


def migrate_hyper_v_collector_delete(client,
                                     resource_group_name,
                                     project_name,
                                     hyper_v_collector_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name,
                         hyper_v_collector_name=hyper_v_collector_name)


def migrate_v_mware_collector_list(client,
                                   resource_group_name,
                                   project_name):
    return client.list_by_project(resource_group_name=resource_group_name,
                                  project_name=project_name)


def migrate_v_mware_collector_show(client,
                                   resource_group_name,
                                   project_name,
                                   vm_ware_collector_name):
    return client.get(resource_group_name=resource_group_name,
                      project_name=project_name,
                      vm_ware_collector_name=vm_ware_collector_name)


def migrate_v_mware_collector_create(client,
                                     resource_group_name,
                                     project_name,
                                     vm_ware_collector_name,
                                     e_tag=None,
                                     discovery_site_id=None,
                                     agent_properties_spn_details=None):
    return client.create(resource_group_name=resource_group_name,
                         project_name=project_name,
                         vm_ware_collector_name=vm_ware_collector_name,
                         e_tag=e_tag,
                         discovery_site_id=discovery_site_id,
                         spn_details=agent_properties_spn_details)


def migrate_v_mware_collector_delete(client,
                                     resource_group_name,
                                     project_name,
                                     vm_ware_collector_name):
    return client.delete(resource_group_name=resource_group_name,
                         project_name=project_name,
                         vm_ware_collector_name=vm_ware_collector_name)
