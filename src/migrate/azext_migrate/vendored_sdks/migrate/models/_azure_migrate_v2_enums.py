# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum, EnumMeta
from six import with_metaclass

class _CaseInsensitiveEnumMeta(EnumMeta):
    def __getitem__(self, name):
        return super().__getitem__(name.upper())

    def __getattr__(cls, name):
        """Return the enum member matching `name`
        We use __getattr__ instead of descriptors or inserting into the enum
        class' __dict__ in order to support `name` and `value` being both
        properties for enum members (which live in the class' __dict__) and
        enum members themselves.
        """
        try:
            return cls._member_map_[name.upper()]
        except KeyError:
            raise AttributeError(name)


class AssessmentSizingCriterion(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Assessment sizing criterion.
    """

    PERFORMANCE_BASED = "PerformanceBased"
    AS_ON_PREMISES = "AsOnPremises"

class AssessmentStage(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """User configurable setting that describes the status of the assessment.
    """

    IN_PROGRESS = "InProgress"
    UNDER_REVIEW = "UnderReview"
    APPROVED = "Approved"

class AssessmentStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the assessment has been created and is valid.
    """

    CREATED = "Created"
    UPDATED = "Updated"
    RUNNING = "Running"
    COMPLETED = "Completed"
    INVALID = "Invalid"
    OUT_OF_SYNC = "OutOfSync"
    OUT_DATED = "OutDated"

class AzureDiskSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Recommended Azure size for the disk, given utilization data and preferences set on Assessment.
    """

    UNKNOWN = "Unknown"
    STANDARD_S4 = "Standard_S4"
    STANDARD_S6 = "Standard_S6"
    STANDARD_S10 = "Standard_S10"
    STANDARD_S15 = "Standard_S15"
    STANDARD_S20 = "Standard_S20"
    STANDARD_S30 = "Standard_S30"
    STANDARD_S40 = "Standard_S40"
    STANDARD_S50 = "Standard_S50"
    PREMIUM_P4 = "Premium_P4"
    PREMIUM_P6 = "Premium_P6"
    PREMIUM_P10 = "Premium_P10"
    PREMIUM_P15 = "Premium_P15"
    PREMIUM_P20 = "Premium_P20"
    PREMIUM_P30 = "Premium_P30"
    PREMIUM_P40 = "Premium_P40"
    PREMIUM_P50 = "Premium_P50"
    STANDARD_S60 = "Standard_S60"
    STANDARD_S70 = "Standard_S70"
    STANDARD_S80 = "Standard_S80"
    PREMIUM_P60 = "Premium_P60"
    PREMIUM_P70 = "Premium_P70"
    PREMIUM_P80 = "Premium_P80"
    STANDARD_SSD_E10 = "StandardSSD_E10"
    STANDARD_SSD_E15 = "StandardSSD_E15"
    STANDARD_SSD_E20 = "StandardSSD_E20"
    STANDARD_SSD_E30 = "StandardSSD_E30"
    STANDARD_SSD_E40 = "StandardSSD_E40"
    STANDARD_SSD_E50 = "StandardSSD_E50"
    STANDARD_SSD_E60 = "StandardSSD_E60"
    STANDARD_SSD_E70 = "StandardSSD_E70"
    STANDARD_SSD_E80 = "StandardSSD_E80"
    STANDARD_SSD_E4 = "StandardSSD_E4"
    STANDARD_SSD_E6 = "StandardSSD_E6"

class AzureDiskSuitabilityDetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If disk is suitable to be migrate but some conditions/checks were not considered while
    calculating suitability, this explains the details.
    """

    NONE = "None"
    NUMBER_OF_READ_OPERATIONS_PER_SECOND_MISSING = "NumberOfReadOperationsPerSecondMissing"
    NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_MISSING = "NumberOfWriteOperationsPerSecondMissing"
    MEGABYTES_PER_SECOND_OF_READ_MISSING = "MegabytesPerSecondOfReadMissing"
    MEGABYTES_PER_SECOND_OF_WRITE_MISSING = "MegabytesPerSecondOfWriteMissing"
    DISK_GIGABYTES_CONSUMED_MISSING = "DiskGigabytesConsumedMissing"
    DISK_GIGABYTES_PROVISIONED_MISSING = "DiskGigabytesProvisionedMissing"
    NUMBER_OF_READ_OPERATIONS_PER_SECOND_OUT_OF_RANGE = "NumberOfReadOperationsPerSecondOutOfRange"
    NUMBER_OF_WRITE_OPERATIONS_PER_SECOND_OUT_OF_RANGE = "NumberOfWriteOperationsPerSecondOutOfRange"
    MEGABYTES_PER_SECOND_OF_READ_OUT_OF_RANGE = "MegabytesPerSecondOfReadOutOfRange"
    MEGABYTES_PER_SECOND_OF_WRITE_OUT_OF_RANGE = "MegabytesPerSecondOfWriteOutOfRange"
    DISK_GIGABYTES_CONSUMED_OUT_OF_RANGE = "DiskGigabytesConsumedOutOfRange"
    DISK_GIGABYTES_PROVISIONED_OUT_OF_RANGE = "DiskGigabytesProvisionedOutOfRange"

class AzureDiskSuitabilityExplanation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If disk is not suitable to be migrated, this explains the reasons and mitigation steps.
    """

    UNKNOWN = "Unknown"
    NOT_APPLICABLE = "NotApplicable"
    DISK_SIZE_GREATER_THAN_SUPPORTED = "DiskSizeGreaterThanSupported"
    NO_SUITABLE_DISK_SIZE_FOR_IOPS = "NoSuitableDiskSizeForIops"
    NO_SUITABLE_DISK_SIZE_FOR_THROUGHPUT = "NoSuitableDiskSizeForThroughput"
    NO_DISK_SIZE_FOUND_IN_SELECTED_LOCATION = "NoDiskSizeFoundInSelectedLocation"
    NO_DISK_SIZE_FOUND_FOR_SELECTED_REDUNDANCY = "NoDiskSizeFoundForSelectedRedundancy"
    INTERNAL_ERROR_OCCURRED_FOR_DISK_EVALUATION = "InternalErrorOccurredForDiskEvaluation"
    NO_EA_PRICE_FOUND_FOR_DISK_SIZE = "NoEaPriceFoundForDiskSize"

class AzureDiskType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Storage type selected for this disk.
    """

    UNKNOWN = "Unknown"
    STANDARD = "Standard"
    PREMIUM = "Premium"
    STANDARD_SSD = "StandardSSD"
    STANDARD_OR_PREMIUM = "StandardOrPremium"

class AzureHybridUseBenefit(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """AHUB discount on windows virtual machines.
    """

    UNKNOWN = "Unknown"
    YES = "Yes"
    NO = "No"

class AzureLocation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Target Azure location for which the machines should be assessed. These enums are the same as
    used by Compute API.
    """

    UNKNOWN = "Unknown"
    EAST_ASIA = "EastAsia"
    SOUTHEAST_ASIA = "SoutheastAsia"
    AUSTRALIA_EAST = "AustraliaEast"
    AUSTRALIA_SOUTHEAST = "AustraliaSoutheast"
    BRAZIL_SOUTH = "BrazilSouth"
    CANADA_CENTRAL = "CanadaCentral"
    CANADA_EAST = "CanadaEast"
    WEST_EUROPE = "WestEurope"
    NORTH_EUROPE = "NorthEurope"
    CENTRAL_INDIA = "CentralIndia"
    SOUTH_INDIA = "SouthIndia"
    WEST_INDIA = "WestIndia"
    JAPAN_EAST = "JapanEast"
    JAPAN_WEST = "JapanWest"
    KOREA_CENTRAL = "KoreaCentral"
    KOREA_SOUTH = "KoreaSouth"
    UK_WEST = "UkWest"
    UK_SOUTH = "UkSouth"
    NORTH_CENTRAL_US = "NorthCentralUs"
    EAST_US = "EastUs"
    WEST_US2 = "WestUs2"
    SOUTH_CENTRAL_US = "SouthCentralUs"
    CENTRAL_US = "CentralUs"
    EAST_US2 = "EastUs2"
    WEST_US = "WestUs"
    WEST_CENTRAL_US = "WestCentralUs"
    GERMANY_CENTRAL = "GermanyCentral"
    GERMANY_NORTHEAST = "GermanyNortheast"
    CHINA_NORTH = "ChinaNorth"
    CHINA_EAST = "ChinaEast"
    US_GOV_ARIZONA = "USGovArizona"
    US_GOV_TEXAS = "USGovTexas"
    US_GOV_IOWA = "USGovIowa"
    US_GOV_VIRGINIA = "USGovVirginia"
    US_DO_D_CENTRAL = "USDoDCentral"
    US_DO_D_EAST = "USDoDEast"

class AzureNetworkAdapterSuitabilityDetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If network adapter is not suitable for cloud, this explains the reasons.
    """

    NONE = "None"
    MEGABYTES_OF_DATA_TRANSMITTED_MISSING = "MegabytesOfDataTransmittedMissing"
    MEGABYTES_OF_DATA_TRANSMITTED_OUT_OF_RANGE = "MegabytesOfDataTransmittedOutOfRange"

class AzureNetworkAdapterSuitabilityExplanation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If network adapter is suitable, this explains the reasons and mitigation steps.
    """

    UNKNOWN = "Unknown"
    NOT_APPLICABLE = "NotApplicable"
    INTERNAL_ERROR_OCCURRED = "InternalErrorOccurred"

class AzureOfferCode(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Offer code according to which cost estimation is done.
    """

    UNKNOWN = "Unknown"
    MSAZR0003_P = "MSAZR0003P"
    MSAZR0044_P = "MSAZR0044P"
    MSAZR0059_P = "MSAZR0059P"
    MSAZR0060_P = "MSAZR0060P"
    MSAZR0062_P = "MSAZR0062P"
    MSAZR0063_P = "MSAZR0063P"
    MSAZR0064_P = "MSAZR0064P"
    MSAZR0029_P = "MSAZR0029P"
    MSAZR0022_P = "MSAZR0022P"
    MSAZR0023_P = "MSAZR0023P"
    MSAZR0148_P = "MSAZR0148P"
    MSAZR0025_P = "MSAZR0025P"
    MSAZR0036_P = "MSAZR0036P"
    MSAZR0120_P = "MSAZR0120P"
    MSAZR0121_P = "MSAZR0121P"
    MSAZR0122_P = "MSAZR0122P"
    MSAZR0123_P = "MSAZR0123P"
    MSAZR0124_P = "MSAZR0124P"
    MSAZR0125_P = "MSAZR0125P"
    MSAZR0126_P = "MSAZR0126P"
    MSAZR0127_P = "MSAZR0127P"
    MSAZR0128_P = "MSAZR0128P"
    MSAZR0129_P = "MSAZR0129P"
    MSAZR0130_P = "MSAZR0130P"
    MSAZR0111_P = "MSAZR0111P"
    MSAZR0144_P = "MSAZR0144P"
    MSAZR0149_P = "MSAZR0149P"
    MSMCAZR0044_P = "MSMCAZR0044P"
    MSMCAZR0059_P = "MSMCAZR0059P"
    MSMCAZR0060_P = "MSMCAZR0060P"
    MSMCAZR0063_P = "MSMCAZR0063P"
    MSMCAZR0120_P = "MSMCAZR0120P"
    MSMCAZR0121_P = "MSMCAZR0121P"
    MSMCAZR0125_P = "MSMCAZR0125P"
    MSMCAZR0128_P = "MSMCAZR0128P"
    MSAZRDE0003_P = "MSAZRDE0003P"
    MSAZRDE0044_P = "MSAZRDE0044P"
    MSAZRUSGOV0003_P = "MSAZRUSGOV0003P"
    EA = "EA"

class AzurePricingTier(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Pricing tier for Size evaluation.
    """

    STANDARD = "Standard"
    BASIC = "Basic"

class AzureStorageRedundancy(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Storage Redundancy type offered by Azure.
    """

    UNKNOWN = "Unknown"
    LOCALLY_REDUNDANT = "LocallyRedundant"
    ZONE_REDUNDANT = "ZoneRedundant"
    GEO_REDUNDANT = "GeoRedundant"
    READ_ACCESS_GEO_REDUNDANT = "ReadAccessGeoRedundant"

class AzureVmFamily(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Azure VM family.
    """

    UNKNOWN = "Unknown"
    BASIC_A0_A4 = "Basic_A0_A4"
    STANDARD_A0_A7 = "Standard_A0_A7"
    STANDARD_A8_A11 = "Standard_A8_A11"
    AV2_SERIES = "Av2_series"
    D_SERIES = "D_series"
    DV2_SERIES = "Dv2_series"
    DS_SERIES = "DS_series"
    D_SV2_SERIES = "DSv2_series"
    F_SERIES = "F_series"
    FS_SERIES = "Fs_series"
    G_SERIES = "G_series"
    GS_SERIES = "GS_series"
    H_SERIES = "H_series"
    LS_SERIES = "Ls_series"
    DSV3_SERIES = "Dsv3_series"
    DV3_SERIES = "Dv3_series"
    FSV2_SERIES = "Fsv2_series"
    EV3_SERIES = "Ev3_series"
    ESV3_SERIES = "Esv3_series"
    M_SERIES = "M_series"
    DC_SERIES = "DC_Series"

class AzureVmSize(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Recommended Azure size for this machine.
    """

    UNKNOWN = "Unknown"
    BASIC_A0 = "Basic_A0"
    BASIC_A1 = "Basic_A1"
    BASIC_A2 = "Basic_A2"
    BASIC_A3 = "Basic_A3"
    BASIC_A4 = "Basic_A4"
    STANDARD_A0 = "Standard_A0"
    STANDARD_A1 = "Standard_A1"
    STANDARD_A2 = "Standard_A2"
    STANDARD_A3 = "Standard_A3"
    STANDARD_A4 = "Standard_A4"
    STANDARD_A5 = "Standard_A5"
    STANDARD_A6 = "Standard_A6"
    STANDARD_A7 = "Standard_A7"
    STANDARD_A8 = "Standard_A8"
    STANDARD_A9 = "Standard_A9"
    STANDARD_A10 = "Standard_A10"
    STANDARD_A11 = "Standard_A11"
    STANDARD_A1_V2 = "Standard_A1_v2"
    STANDARD_A2_V2 = "Standard_A2_v2"
    STANDARD_A4_V2 = "Standard_A4_v2"
    STANDARD_A8_V2 = "Standard_A8_v2"
    STANDARD_A2_M_V2 = "Standard_A2m_v2"
    STANDARD_A4_M_V2 = "Standard_A4m_v2"
    STANDARD_A8_M_V2 = "Standard_A8m_v2"
    STANDARD_D1 = "Standard_D1"
    STANDARD_D2 = "Standard_D2"
    STANDARD_D3 = "Standard_D3"
    STANDARD_D4 = "Standard_D4"
    STANDARD_D11 = "Standard_D11"
    STANDARD_D12 = "Standard_D12"
    STANDARD_D13 = "Standard_D13"
    STANDARD_D14 = "Standard_D14"
    STANDARD_D1_V2 = "Standard_D1_v2"
    STANDARD_D2_V2 = "Standard_D2_v2"
    STANDARD_D3_V2 = "Standard_D3_v2"
    STANDARD_D4_V2 = "Standard_D4_v2"
    STANDARD_D5_V2 = "Standard_D5_v2"
    STANDARD_D11_V2 = "Standard_D11_v2"
    STANDARD_D12_V2 = "Standard_D12_v2"
    STANDARD_D13_V2 = "Standard_D13_v2"
    STANDARD_D14_V2 = "Standard_D14_v2"
    STANDARD_D15_V2 = "Standard_D15_v2"
    STANDARD_DS1 = "Standard_DS1"
    STANDARD_DS2 = "Standard_DS2"
    STANDARD_DS3 = "Standard_DS3"
    STANDARD_DS4 = "Standard_DS4"
    STANDARD_DS11 = "Standard_DS11"
    STANDARD_DS12 = "Standard_DS12"
    STANDARD_DS13 = "Standard_DS13"
    STANDARD_DS14 = "Standard_DS14"
    STANDARD_DS1_V2 = "Standard_DS1_v2"
    STANDARD_DS2_V2 = "Standard_DS2_v2"
    STANDARD_DS3_V2 = "Standard_DS3_v2"
    STANDARD_DS4_V2 = "Standard_DS4_v2"
    STANDARD_DS5_V2 = "Standard_DS5_v2"
    STANDARD_DS11_V2 = "Standard_DS11_v2"
    STANDARD_DS12_V2 = "Standard_DS12_v2"
    STANDARD_DS13_V2 = "Standard_DS13_v2"
    STANDARD_DS14_V2 = "Standard_DS14_v2"
    STANDARD_DS15_V2 = "Standard_DS15_v2"
    STANDARD_F1 = "Standard_F1"
    STANDARD_F2 = "Standard_F2"
    STANDARD_F4 = "Standard_F4"
    STANDARD_F8 = "Standard_F8"
    STANDARD_F16 = "Standard_F16"
    STANDARD_F1_S = "Standard_F1s"
    STANDARD_F2_S = "Standard_F2s"
    STANDARD_F4_S = "Standard_F4s"
    STANDARD_F8_S = "Standard_F8s"
    STANDARD_F16_S = "Standard_F16s"
    STANDARD_G1 = "Standard_G1"
    STANDARD_G2 = "Standard_G2"
    STANDARD_G3 = "Standard_G3"
    STANDARD_G4 = "Standard_G4"
    STANDARD_G5 = "Standard_G5"
    STANDARD_GS1 = "Standard_GS1"
    STANDARD_GS2 = "Standard_GS2"
    STANDARD_GS3 = "Standard_GS3"
    STANDARD_GS4 = "Standard_GS4"
    STANDARD_GS5 = "Standard_GS5"
    STANDARD_H8 = "Standard_H8"
    STANDARD_H16 = "Standard_H16"
    STANDARD_H8_M = "Standard_H8m"
    STANDARD_H16_M = "Standard_H16m"
    STANDARD_H16_R = "Standard_H16r"
    STANDARD_H16_MR = "Standard_H16mr"
    STANDARD_L4_S = "Standard_L4s"
    STANDARD_L8_S = "Standard_L8s"
    STANDARD_L16_S = "Standard_L16s"
    STANDARD_L32_S = "Standard_L32s"
    STANDARD_D2_S_V3 = "Standard_D2s_v3"
    STANDARD_D4_S_V3 = "Standard_D4s_v3"
    STANDARD_D8_S_V3 = "Standard_D8s_v3"
    STANDARD_D16_S_V3 = "Standard_D16s_v3"
    STANDARD_D32_S_V3 = "Standard_D32s_v3"
    STANDARD_D64_S_V3 = "Standard_D64s_v3"
    STANDARD_D2_V3 = "Standard_D2_v3"
    STANDARD_D4_V3 = "Standard_D4_v3"
    STANDARD_D8_V3 = "Standard_D8_v3"
    STANDARD_D16_V3 = "Standard_D16_v3"
    STANDARD_D32_V3 = "Standard_D32_v3"
    STANDARD_D64_V3 = "Standard_D64_v3"
    STANDARD_F2_S_V2 = "Standard_F2s_v2"
    STANDARD_F4_S_V2 = "Standard_F4s_v2"
    STANDARD_F8_S_V2 = "Standard_F8s_v2"
    STANDARD_F16_S_V2 = "Standard_F16s_v2"
    STANDARD_F32_S_V2 = "Standard_F32s_v2"
    STANDARD_F64_S_V2 = "Standard_F64s_v2"
    STANDARD_F72_S_V2 = "Standard_F72s_v2"
    STANDARD_E2_V3 = "Standard_E2_v3"
    STANDARD_E4_V3 = "Standard_E4_v3"
    STANDARD_E8_V3 = "Standard_E8_v3"
    STANDARD_E16_V3 = "Standard_E16_v3"
    STANDARD_E32_V3 = "Standard_E32_v3"
    STANDARD_E64_V3 = "Standard_E64_v3"
    STANDARD_E2_S_V3 = "Standard_E2s_v3"
    STANDARD_E4_S_V3 = "Standard_E4s_v3"
    STANDARD_E8_S_V3 = "Standard_E8s_v3"
    STANDARD_E16_S_V3 = "Standard_E16s_v3"
    STANDARD_E32_S_V3 = "Standard_E32s_v3"
    STANDARD_E64_S_V3 = "Standard_E64s_v3"
    STANDARD_M64_S = "Standard_M64s"
    STANDARD_M64_MS = "Standard_M64ms"
    STANDARD_M128_S = "Standard_M128s"
    STANDARD_M128_MS = "Standard_M128ms"

class AzureVmSuitabilityDetail(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If machine is not suitable for cloud, this explains the reasons.
    """

    NONE = "None"
    RECOMMENDED_SIZE_HAS_LESS_NETWORK_ADAPTERS = "RecommendedSizeHasLessNetworkAdapters"
    CANNOT_REPORT_COMPUTE_COST = "CannotReportComputeCost"
    CANNOT_REPORT_STORAGE_COST = "CannotReportStorageCost"
    CANNOT_REPORT_BANDWIDTH_COSTS = "CannotReportBandwidthCosts"
    PERCENTAGE_OF_CORES_UTILIZED_MISSING = "PercentageOfCoresUtilizedMissing"
    PERCENTAGE_OF_MEMORY_UTILIZED_MISSING = "PercentageOfMemoryUtilizedMissing"
    PERCENTAGE_OF_CORES_UTILIZED_OUT_OF_RANGE = "PercentageOfCoresUtilizedOutOfRange"
    PERCENTAGE_OF_MEMORY_UTILIZED_OUT_OF_RANGE = "PercentageOfMemoryUtilizedOutOfRange"

class AzureVmSuitabilityExplanation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """If machine is not ready to be migrated, this explains the reasons and mitigation steps.
    """

    UNKNOWN = "Unknown"
    NOT_APPLICABLE = "NotApplicable"
    GUEST_OPERATING_SYSTEM_ARCHITECTURE_NOT_SUPPORTED = "GuestOperatingSystemArchitectureNotSupported"
    GUEST_OPERATING_SYSTEM_NOT_SUPPORTED = "GuestOperatingSystemNotSupported"
    BOOT_TYPE_NOT_SUPPORTED = "BootTypeNotSupported"
    MORE_DISKS_THAN_SUPPORTED = "MoreDisksThanSupported"
    NO_SUITABLE_VM_SIZE_FOUND = "NoSuitableVmSizeFound"
    ONE_OR_MORE_DISKS_NOT_SUITABLE = "OneOrMoreDisksNotSuitable"
    ONE_OR_MORE_ADAPTERS_NOT_SUITABLE = "OneOrMoreAdaptersNotSuitable"
    INTERNAL_ERROR_OCCURRED_DURING_COMPUTE_EVALUATION = "InternalErrorOccurredDuringComputeEvaluation"
    INTERNAL_ERROR_OCCURRED_DURING_STORAGE_EVALUATION = "InternalErrorOccurredDuringStorageEvaluation"
    INTERNAL_ERROR_OCCURRED_DURING_NETWORK_EVALUATION = "InternalErrorOccurredDuringNetworkEvaluation"
    NO_VM_SIZE_SUPPORTS_STORAGE_PERFORMANCE = "NoVmSizeSupportsStoragePerformance"
    NO_VM_SIZE_SUPPORTS_NETWORK_PERFORMANCE = "NoVmSizeSupportsNetworkPerformance"
    NO_VM_SIZE_FOR_SELECTED_PRICING_TIER = "NoVmSizeForSelectedPricingTier"
    NO_VM_SIZE_FOR_SELECTED_AZURE_LOCATION = "NoVmSizeForSelectedAzureLocation"
    CHECK_RED_HAT_LINUX_VERSION = "CheckRedHatLinuxVersion"
    CHECK_OPEN_SUSE_LINUX_VERSION = "CheckOpenSuseLinuxVersion"
    CHECK_WINDOWS_SERVER2008_R2_VERSION = "CheckWindowsServer2008R2Version"
    CHECK_CENT_OS_VERSION = "CheckCentOsVersion"
    CHECK_DEBIAN_LINUX_VERSION = "CheckDebianLinuxVersion"
    CHECK_SUSE_LINUX_VERSION = "CheckSuseLinuxVersion"
    CHECK_ORACLE_LINUX_VERSION = "CheckOracleLinuxVersion"
    CHECK_UBUNTU_LINUX_VERSION = "CheckUbuntuLinuxVersion"
    CHECK_CORE_OS_LINUX_VERSION = "CheckCoreOsLinuxVersion"
    WINDOWS_SERVER_VERSION_CONDITIONALLY_SUPPORTED = "WindowsServerVersionConditionallySupported"
    NO_GUEST_OPERATING_SYSTEM_CONDITIONALLY_SUPPORTED = "NoGuestOperatingSystemConditionallySupported"
    WINDOWS_CLIENT_VERSIONS_CONDITIONALLY_SUPPORTED = "WindowsClientVersionsConditionallySupported"
    BOOT_TYPE_UNKNOWN = "BootTypeUnknown"
    GUEST_OPERATING_SYSTEM_UNKNOWN = "GuestOperatingSystemUnknown"
    WINDOWS_SERVER_VERSIONS_SUPPORTED_WITH_CAVEAT = "WindowsServerVersionsSupportedWithCaveat"
    WINDOWS_OS_NO_LONGER_UNDER_MS_SUPPORT = "WindowsOSNoLongerUnderMSSupport"
    ENDORSED_WITH_CONDITIONS_LINUX_DISTRIBUTIONS = "EndorsedWithConditionsLinuxDistributions"
    UNENDORSED_LINUX_DISTRIBUTIONS = "UnendorsedLinuxDistributions"
    NO_VM_SIZE_FOR_STANDARD_PRICING_TIER = "NoVmSizeForStandardPricingTier"
    NO_VM_SIZE_FOR_BASIC_PRICING_TIER = "NoVmSizeForBasicPricingTier"

class CloudSuitability(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether this disk is suitable for Azure.
    """

    UNKNOWN = "Unknown"
    NOT_SUITABLE = "NotSuitable"
    SUITABLE = "Suitable"
    CONDITIONALLY_SUITABLE = "ConditionallySuitable"
    READINESS_UNKNOWN = "ReadinessUnknown"

class Currency(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Currency to report prices in.
    """

    UNKNOWN = "Unknown"
    USD = "USD"
    DKK = "DKK"
    CAD = "CAD"
    IDR = "IDR"
    JPY = "JPY"
    KRW = "KRW"
    NZD = "NZD"
    NOK = "NOK"
    RUB = "RUB"
    SAR = "SAR"
    ZAR = "ZAR"
    SEK = "SEK"
    TRY_ENUM = "TRY"
    GBP = "GBP"
    MXN = "MXN"
    MYR = "MYR"
    INR = "INR"
    HKD = "HKD"
    BRL = "BRL"
    TWD = "TWD"
    EUR = "EUR"
    CHF = "CHF"
    ARS = "ARS"
    AUD = "AUD"
    CNY = "CNY"

class GroupStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether the group has been created and is valid.
    """

    CREATED = "Created"
    UPDATED = "Updated"
    RUNNING = "Running"
    COMPLETED = "Completed"
    INVALID = "Invalid"

class GroupUpdateOperation(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Whether to add or remove the machines.
    """

    ADD = "Add"
    REMOVE = "Remove"

class MachineBootType(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Boot type of the machine.
    """

    UNKNOWN = "Unknown"
    EFI = "EFI"
    BIOS = "BIOS"

class Percentile(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Percentile of performance data used to recommend Azure size.
    """

    PERCENTILE50 = "Percentile50"
    PERCENTILE90 = "Percentile90"
    PERCENTILE95 = "Percentile95"
    PERCENTILE99 = "Percentile99"

class ProjectStatus(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Assessment project status.
    """

    ACTIVE = "Active"
    INACTIVE = "Inactive"

class ProvisioningState(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Provisioning state of the project.
    """

    ACCEPTED = "Accepted"
    CREATING = "Creating"
    DELETING = "Deleting"
    FAILED = "Failed"
    MOVING = "Moving"
    SUCCEEDED = "Succeeded"

class ReservedInstance(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Azure reserved instance.
    """

    NONE = "None"
    RI1_YEAR = "RI1Year"
    RI3_YEAR = "RI3Year"

class TimeRange(with_metaclass(_CaseInsensitiveEnumMeta, str, Enum)):
    """Time range of performance data used to recommend a size.
    """

    DAY = "Day"
    WEEK = "Week"
    MONTH = "Month"
    CUSTOM = "Custom"
