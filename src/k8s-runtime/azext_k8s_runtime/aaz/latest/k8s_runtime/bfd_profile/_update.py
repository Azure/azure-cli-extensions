# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "k8s-runtime bfd-profile update",
)
class Update(AAZCommand):
    """Update a BfdProfile

    :example: Update a Bfd Profile
        az k8s-runtime bfd-profile update --resource-uri subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/example/providers/Microsoft.Kubernetes/connectedClusters/cluster1 --bfd-profile-name testprofile --receive-interval 300 --transmit-interval 300 --detect-multiplier 3 --echo-interval 50 --echo-mode Disabled --passive-mode Disabled --minimum-ttl 254
    """

    _aaz_info = {
        "version": "2024-08-01",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.kubernetesruntime/bfdprofiles/{}", "2024-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.bfd_profile_name = AAZStrArg(
            options=["--bfd-profile-name"],
            help="The name of the BfdProfile",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.detect_multiplier = AAZIntArg(
            options=["--detect-multiplier"],
            arg_group="Properties",
            help="Detect multiplier",
            nullable=True,
        )
        _args_schema.echo_interval = AAZIntArg(
            options=["--echo-interval"],
            arg_group="Properties",
            help="Echo interval in milliseconds",
            nullable=True,
        )
        _args_schema.echo_mode = AAZStrArg(
            options=["--echo-mode"],
            arg_group="Properties",
            help="Echo mode",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.minimum_ttl = AAZIntArg(
            options=["--minimum-ttl"],
            arg_group="Properties",
            help="Minimum TTL",
            nullable=True,
        )
        _args_schema.passive_mode = AAZStrArg(
            options=["--passive-mode"],
            arg_group="Properties",
            help="Passive mode",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.receive_interval = AAZIntArg(
            options=["--receive-interval"],
            arg_group="Properties",
            help="Receive interval in milliseconds",
            nullable=True,
        )
        _args_schema.transmit_interval = AAZIntArg(
            options=["--transmit-interval"],
            arg_group="Properties",
            help="Transmit interval in milliseconds",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.BfdProfilesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.BfdProfilesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BfdProfilesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bfdProfiles/{bfdProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "bfdProfileName", self.ctx.args.bfd_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_bfd_profile_read(cls._schema_on_200)

            return cls._schema_on_200

    class BfdProfilesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bfdProfiles/{bfdProfileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "bfdProfileName", self.ctx.args.bfd_profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_bfd_profile_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("detectMultiplier", AAZIntType, ".detect_multiplier")
                properties.set_prop("echoInterval", AAZIntType, ".echo_interval")
                properties.set_prop("echoMode", AAZStrType, ".echo_mode")
                properties.set_prop("minimumTtl", AAZIntType, ".minimum_ttl")
                properties.set_prop("passiveMode", AAZStrType, ".passive_mode")
                properties.set_prop("receiveInterval", AAZIntType, ".receive_interval")
                properties.set_prop("transmitInterval", AAZIntType, ".transmit_interval")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_bfd_profile_read = None

    @classmethod
    def _build_schema_bfd_profile_read(cls, _schema):
        if cls._schema_bfd_profile_read is not None:
            _schema.id = cls._schema_bfd_profile_read.id
            _schema.name = cls._schema_bfd_profile_read.name
            _schema.properties = cls._schema_bfd_profile_read.properties
            _schema.system_data = cls._schema_bfd_profile_read.system_data
            _schema.type = cls._schema_bfd_profile_read.type
            return

        cls._schema_bfd_profile_read = _schema_bfd_profile_read = AAZObjectType()

        bfd_profile_read = _schema_bfd_profile_read
        bfd_profile_read.id = AAZStrType(
            flags={"read_only": True},
        )
        bfd_profile_read.name = AAZStrType(
            flags={"read_only": True},
        )
        bfd_profile_read.properties = AAZObjectType()
        bfd_profile_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        bfd_profile_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_bfd_profile_read.properties
        properties.detect_multiplier = AAZIntType(
            serialized_name="detectMultiplier",
        )
        properties.echo_interval = AAZIntType(
            serialized_name="echoInterval",
        )
        properties.echo_mode = AAZStrType(
            serialized_name="echoMode",
        )
        properties.minimum_ttl = AAZIntType(
            serialized_name="minimumTtl",
        )
        properties.passive_mode = AAZStrType(
            serialized_name="passiveMode",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.receive_interval = AAZIntType(
            serialized_name="receiveInterval",
        )
        properties.transmit_interval = AAZIntType(
            serialized_name="transmitInterval",
        )

        system_data = _schema_bfd_profile_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_bfd_profile_read.id
        _schema.name = cls._schema_bfd_profile_read.name
        _schema.properties = cls._schema_bfd_profile_read.properties
        _schema.system_data = cls._schema_bfd_profile_read.system_data
        _schema.type = cls._schema_bfd_profile_read.type


__all__ = ["Update"]
