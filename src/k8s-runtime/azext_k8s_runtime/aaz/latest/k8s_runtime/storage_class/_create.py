# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "k8s-runtime storage-class create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a StorageClass

    :example: Create an RWX storage class on top of managed-csi storage class
        az k8s-runtime storage-class create --resource-uri subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/example/providers/Microsoft.Kubernetes/connectedClusters/cluster1 --storage-class-name rwxsc --type-properties rwx.backing-storage-class-name=managed-csi

    :example: Create a Blob storage class
        az k8s-runtime storage-class create --resource-uri subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/example/providers/Microsoft.Kubernetes/connectedClusters/cluster1 --storage-class-name blobsc --type-properties blob.azure-storage-account-key=accountkey blob.azure-storage-account-name=accountname
    """

    _aaz_info = {
        "version": "2023-10-01-preview",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.kubernetesruntime/storageclasses/{}", "2023-10-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource.",
            required=True,
        )
        _args_schema.storage_class_name = AAZStrArg(
            options=["--storage-class-name"],
            help="The name of the the storage class",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.access_modes = AAZListArg(
            options=["--access-modes"],
            arg_group="Properties",
            help="The access mode: [ReadWriteOnce, ReadWriteMany] or [ReadWriteOnce]",
        )
        _args_schema.allow_volume_expansion = AAZStrArg(
            options=["--allow-volume-expansion"],
            arg_group="Properties",
            help="Volume can be expanded or not",
            enum={"Allow": "Allow", "Disallow": "Disallow"},
        )
        _args_schema.data_resilience = AAZStrArg(
            options=["--data-resilience"],
            arg_group="Properties",
            help="Allow single data node failure",
            enum={"DataResilient": "DataResilient", "NotDataResilient": "NotDataResilient"},
        )
        _args_schema.failover_speed = AAZStrArg(
            options=["--failover-speed"],
            arg_group="Properties",
            help="Failover speed: NA, Slow, Fast",
            enum={"Fast": "Fast", "NotAvailable": "NotAvailable", "Slow": "Slow", "Super": "Super"},
        )
        _args_schema.limitations = AAZListArg(
            options=["--limitations"],
            arg_group="Properties",
            help="Limitations of the storage class",
        )
        _args_schema.mount_options = AAZListArg(
            options=["--mount-options"],
            arg_group="Properties",
            help="Additional mount options",
        )
        _args_schema.performance = AAZStrArg(
            options=["--performance"],
            arg_group="Properties",
            help="Performance tier",
            enum={"Basic": "Basic", "Premium": "Premium", "Standard": "Standard", "Ultra": "Ultra", "Undefined": "Undefined"},
        )
        _args_schema.priority = AAZIntArg(
            options=["--priority"],
            arg_group="Properties",
            help="Selection priority when multiple storage classes meet the criteria. 0: Highest, -1: Never use",
        )
        _args_schema.provisioner = AAZStrArg(
            options=["--provisioner"],
            arg_group="Properties",
            help="Provisioner name",
        )
        _args_schema.type_properties = AAZObjectArg(
            options=["--type-properties"],
            arg_group="Properties",
            help="Properties of the StorageClass",
        )
        _args_schema.volume_binding_mode = AAZStrArg(
            options=["--volume-binding-mode"],
            arg_group="Properties",
            help="Binding mode of volumes: Immediate, WaitForFirstConsumer",
            enum={"Immediate": "Immediate", "WaitForFirstConsumer": "WaitForFirstConsumer"},
        )

        access_modes = cls._args_schema.access_modes
        access_modes.Element = AAZStrArg(
            enum={"ReadWriteMany": "ReadWriteMany", "ReadWriteOnce": "ReadWriteOnce"},
        )

        limitations = cls._args_schema.limitations
        limitations.Element = AAZStrArg()

        mount_options = cls._args_schema.mount_options
        mount_options.Element = AAZStrArg()

        type_properties = cls._args_schema.type_properties
        type_properties.blob = AAZObjectArg(
            options=["blob"],
            help="Properties of a blob storage class",
        )
        type_properties.nfs = AAZObjectArg(
            options=["nfs"],
            help="Properties of a NFS storage class",
        )
        type_properties.rwx = AAZObjectArg(
            options=["rwx"],
            help="Properties of a RWX storage class",
        )
        type_properties.smb = AAZObjectArg(
            options=["smb"],
            help="Properties of an SMB storage class",
        )

        blob = cls._args_schema.type_properties.blob
        blob.azure_storage_account_key = AAZPasswordArg(
            options=["azure-storage-account-key"],
            help="Azure Storage Account Key",
            required=True,
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        blob.azure_storage_account_name = AAZStrArg(
            options=["azure-storage-account-name"],
            help="Azure Storage Account Name",
            required=True,
        )

        nfs = cls._args_schema.type_properties.nfs
        nfs.mount_permissions = AAZStrArg(
            options=["mount-permissions"],
            help="Mounted folder permissions. Default is 0. If set as non-zero, driver will perform `chmod` after mount",
        )
        nfs.on_delete = AAZStrArg(
            options=["on-delete"],
            help="The action to take when a NFS volume is deleted. Default is Delete",
            enum={"Delete": "Delete", "Retain": "Retain"},
        )
        nfs.server = AAZStrArg(
            options=["server"],
            help="NFS Server",
            required=True,
        )
        nfs.share = AAZStrArg(
            options=["share"],
            help="NFS share",
            required=True,
        )
        nfs.sub_dir = AAZStrArg(
            options=["sub-dir"],
            help="Sub directory under share. If the sub directory doesn't exist, driver will create it",
        )

        rwx = cls._args_schema.type_properties.rwx
        rwx.backing_storage_class_name = AAZStrArg(
            options=["backing-storage-class-name"],
            help="The backing storageclass used to create new storageclass",
            required=True,
        )

        smb = cls._args_schema.type_properties.smb
        smb.domain = AAZStrArg(
            options=["domain"],
            help="Server domain",
        )
        smb.password = AAZPasswordArg(
            options=["password"],
            help="Server password",
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        smb.source = AAZStrArg(
            options=["source"],
            help="SMB Source",
            required=True,
        )
        smb.sub_dir = AAZStrArg(
            options=["sub-dir"],
            help="Sub directory under share. If the sub directory doesn't exist, driver will create it",
        )
        smb.username = AAZStrArg(
            options=["username"],
            help="Server username",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.StorageClassCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StorageClassCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.KubernetesRuntime/storageClasses/{storageClassName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageClassName", self.ctx.args.storage_class_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-10-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("accessModes", AAZListType, ".access_modes")
                properties.set_prop("allowVolumeExpansion", AAZStrType, ".allow_volume_expansion")
                properties.set_prop("dataResilience", AAZStrType, ".data_resilience")
                properties.set_prop("failoverSpeed", AAZStrType, ".failover_speed")
                properties.set_prop("limitations", AAZListType, ".limitations")
                properties.set_prop("mountOptions", AAZListType, ".mount_options")
                properties.set_prop("performance", AAZStrType, ".performance")
                properties.set_prop("priority", AAZIntType, ".priority")
                properties.set_prop("provisioner", AAZStrType, ".provisioner")
                properties.set_prop("typeProperties", AAZObjectType, ".type_properties", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("volumeBindingMode", AAZStrType, ".volume_binding_mode")

            access_modes = _builder.get(".properties.accessModes")
            if access_modes is not None:
                access_modes.set_elements(AAZStrType, ".")

            limitations = _builder.get(".properties.limitations")
            if limitations is not None:
                limitations.set_elements(AAZStrType, ".")

            mount_options = _builder.get(".properties.mountOptions")
            if mount_options is not None:
                mount_options.set_elements(AAZStrType, ".")

            type_properties = _builder.get(".properties.typeProperties")
            if type_properties is not None:
                type_properties.set_const("type", "Blob", AAZStrType, ".blob", typ_kwargs={"flags": {"required": True}})
                type_properties.set_const("type", "NFS", AAZStrType, ".nfs", typ_kwargs={"flags": {"required": True}})
                type_properties.set_const("type", "RWX", AAZStrType, ".rwx", typ_kwargs={"flags": {"required": True}})
                type_properties.set_const("type", "SMB", AAZStrType, ".smb", typ_kwargs={"flags": {"required": True}})
                type_properties.discriminate_by("type", "Blob")
                type_properties.discriminate_by("type", "NFS")
                type_properties.discriminate_by("type", "RWX")
                type_properties.discriminate_by("type", "SMB")

            disc_blob = _builder.get(".properties.typeProperties{type:Blob}")
            if disc_blob is not None:
                disc_blob.set_prop("azureStorageAccountKey", AAZStrType, ".blob.azure_storage_account_key", typ_kwargs={"flags": {"secret": True}})
                disc_blob.set_prop("azureStorageAccountName", AAZStrType, ".blob.azure_storage_account_name", typ_kwargs={"flags": {"required": True}})

            disc_nfs = _builder.get(".properties.typeProperties{type:NFS}")
            if disc_nfs is not None:
                disc_nfs.set_prop("mountPermissions", AAZStrType, ".nfs.mount_permissions")
                disc_nfs.set_prop("onDelete", AAZStrType, ".nfs.on_delete")
                disc_nfs.set_prop("server", AAZStrType, ".nfs.server", typ_kwargs={"flags": {"required": True}})
                disc_nfs.set_prop("share", AAZStrType, ".nfs.share", typ_kwargs={"flags": {"required": True}})
                disc_nfs.set_prop("subDir", AAZStrType, ".nfs.sub_dir")

            disc_rwx = _builder.get(".properties.typeProperties{type:RWX}")
            if disc_rwx is not None:
                disc_rwx.set_prop("backingStorageClassName", AAZStrType, ".rwx.backing_storage_class_name", typ_kwargs={"flags": {"required": True}})

            disc_smb = _builder.get(".properties.typeProperties{type:SMB}")
            if disc_smb is not None:
                disc_smb.set_prop("domain", AAZStrType, ".smb.domain")
                disc_smb.set_prop("password", AAZStrType, ".smb.password", typ_kwargs={"flags": {"secret": True}})
                disc_smb.set_prop("source", AAZStrType, ".smb.source", typ_kwargs={"flags": {"required": True}})
                disc_smb.set_prop("subDir", AAZStrType, ".smb.sub_dir")
                disc_smb.set_prop("username", AAZStrType, ".smb.username")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.access_modes = AAZListType(
                serialized_name="accessModes",
            )
            properties.allow_volume_expansion = AAZStrType(
                serialized_name="allowVolumeExpansion",
            )
            properties.data_resilience = AAZStrType(
                serialized_name="dataResilience",
            )
            properties.failover_speed = AAZStrType(
                serialized_name="failoverSpeed",
            )
            properties.limitations = AAZListType()
            properties.mount_options = AAZListType(
                serialized_name="mountOptions",
            )
            properties.performance = AAZStrType()
            properties.priority = AAZIntType()
            properties.provisioner = AAZStrType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.type_properties = AAZObjectType(
                serialized_name="typeProperties",
                flags={"required": True},
            )
            properties.volume_binding_mode = AAZStrType(
                serialized_name="volumeBindingMode",
            )

            access_modes = cls._schema_on_200_201.properties.access_modes
            access_modes.Element = AAZStrType()

            limitations = cls._schema_on_200_201.properties.limitations
            limitations.Element = AAZStrType()

            mount_options = cls._schema_on_200_201.properties.mount_options
            mount_options.Element = AAZStrType()

            type_properties = cls._schema_on_200_201.properties.type_properties
            type_properties.type = AAZStrType(
                flags={"required": True},
            )

            disc_blob = cls._schema_on_200_201.properties.type_properties.discriminate_by("type", "Blob")
            disc_blob.azure_storage_account_key = AAZStrType(
                serialized_name="azureStorageAccountKey",
                flags={"secret": True},
            )
            disc_blob.azure_storage_account_name = AAZStrType(
                serialized_name="azureStorageAccountName",
                flags={"required": True},
            )

            disc_nfs = cls._schema_on_200_201.properties.type_properties.discriminate_by("type", "NFS")
            disc_nfs.mount_permissions = AAZStrType(
                serialized_name="mountPermissions",
            )
            disc_nfs.on_delete = AAZStrType(
                serialized_name="onDelete",
            )
            disc_nfs.server = AAZStrType(
                flags={"required": True},
            )
            disc_nfs.share = AAZStrType(
                flags={"required": True},
            )
            disc_nfs.sub_dir = AAZStrType(
                serialized_name="subDir",
            )

            disc_rwx = cls._schema_on_200_201.properties.type_properties.discriminate_by("type", "RWX")
            disc_rwx.backing_storage_class_name = AAZStrType(
                serialized_name="backingStorageClassName",
                flags={"required": True},
            )

            disc_smb = cls._schema_on_200_201.properties.type_properties.discriminate_by("type", "SMB")
            disc_smb.domain = AAZStrType()
            disc_smb.password = AAZStrType(
                flags={"secret": True},
            )
            disc_smb.source = AAZStrType(
                flags={"required": True},
            )
            disc_smb.sub_dir = AAZStrType(
                serialized_name="subDir",
            )
            disc_smb.username = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
