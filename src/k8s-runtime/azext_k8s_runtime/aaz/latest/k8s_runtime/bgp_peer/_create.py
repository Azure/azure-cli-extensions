# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "k8s-runtime bgp-peer create",
)
class Create(AAZCommand):
    """Create a BgpPeer

    :example: Create a BGP Peer
        az k8s-runtime bgp-peer create --bgp-peer-name bgpPeer1 --resource-uri subscriptions/00000000-1111-2222-3333-444444444444/resourceGroups/example/providers/Microsoft.Kubernetes/connectedClusters/cluster1 --my-asn 10000 --peer-asn 20000 --peer-address 192.168.50.1
    """

    _aaz_info = {
        "version": "2024-08-01",
        "resources": [
            ["mgmt-plane", "/{resourceuri}/providers/microsoft.kubernetesruntime/bgppeers/{}", "2024-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.bgp_peer_name = AAZStrArg(
            options=["--bgp-peer-name"],
            help="The name of the BgpPeer",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,24}$",
            ),
        )
        _args_schema.resource_uri = AAZStrArg(
            options=["--resource-uri"],
            help="The fully qualified Azure Resource manager identifier of the resource.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.bfd_profile = AAZStrArg(
            options=["--bfd-profile"],
            arg_group="Properties",
            help="BFD Profile",
        )
        _args_schema.bgp_multi_hop = AAZStrArg(
            options=["--bgp-multi-hop"],
            arg_group="Properties",
            help="eBGP multiple hop",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        _args_schema.hold_time = AAZStrArg(
            options=["--hold-time"],
            arg_group="Properties",
            help="Hold time, per RFC4271",
        )
        _args_schema.keep_alive_time = AAZStrArg(
            options=["--keep-alive-time"],
            arg_group="Properties",
            help="Keepalive time, per RFC4271",
        )
        _args_schema.my_asn = AAZIntArg(
            options=["--my-asn"],
            arg_group="Properties",
            help="My ASN",
        )
        _args_schema.node_selector = AAZListArg(
            options=["--node-selector"],
            arg_group="Properties",
            help="A dynamic label mapping to select related nodes to peer with. For instance, if you want to create a BGP peer only for nodes with label \"a=b\", then please specify {\"a\": \"b\"} in the field.",
        )
        _args_schema.peer_address = AAZStrArg(
            options=["--peer-address"],
            arg_group="Properties",
            help="Peer Address",
        )
        _args_schema.peer_asn = AAZIntArg(
            options=["--peer-asn"],
            arg_group="Properties",
            help="Peer ASN",
        )
        _args_schema.peer_port = AAZIntArg(
            options=["--peer-port"],
            arg_group="Properties",
            help="Peer BGP port",
        )

        node_selector = cls._args_schema.node_selector
        node_selector.Element = AAZObjectArg()

        _element = cls._args_schema.node_selector.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Label name",
            required=True,
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Label value",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.BgpPeersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BgpPeersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{resourceUri}/providers/Microsoft.KubernetesRuntime/bgpPeers/{bgpPeerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "bgpPeerName", self.ctx.args.bgp_peer_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceUri", self.ctx.args.resource_uri,
                    skip_quote=True,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("bfdProfile", AAZStrType, ".bfd_profile")
                properties.set_prop("bgpMultiHop", AAZStrType, ".bgp_multi_hop")
                properties.set_prop("holdTime", AAZStrType, ".hold_time")
                properties.set_prop("keepAliveTime", AAZStrType, ".keep_alive_time")
                properties.set_prop("myAsn", AAZIntType, ".my_asn", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("nodeSelector", AAZListType, ".node_selector")
                properties.set_prop("peerAddress", AAZStrType, ".peer_address", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("peerAsn", AAZIntType, ".peer_asn", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("peerPort", AAZIntType, ".peer_port")

            node_selector = _builder.get(".properties.nodeSelector")
            if node_selector is not None:
                node_selector.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.nodeSelector[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("value", AAZStrType, ".value", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.bfd_profile = AAZStrType(
                serialized_name="bfdProfile",
            )
            properties.bgp_multi_hop = AAZStrType(
                serialized_name="bgpMultiHop",
            )
            properties.hold_time = AAZStrType(
                serialized_name="holdTime",
            )
            properties.keep_alive_time = AAZStrType(
                serialized_name="keepAliveTime",
            )
            properties.my_asn = AAZIntType(
                serialized_name="myAsn",
                flags={"required": True},
            )
            properties.node_selector = AAZListType(
                serialized_name="nodeSelector",
            )
            properties.peer_address = AAZStrType(
                serialized_name="peerAddress",
                flags={"required": True},
            )
            properties.peer_asn = AAZIntType(
                serialized_name="peerAsn",
                flags={"required": True},
            )
            properties.peer_port = AAZIntType(
                serialized_name="peerPort",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            node_selector = cls._schema_on_200_201.properties.node_selector
            node_selector.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.node_selector.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.value = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
