# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements
# pylint: disable=line-too-long

from knack.log import get_logger

from azure.cli.core.commands import AzCliCommand
from azure.mgmt.kubernetesconfiguration import SourceControlConfigurationClient
from azure.mgmt.resource import ResourceManagementClient
from azure.mgmt.kubernetesconfiguration.models import Extension, Identity
from azure.cli.core.commands.client_factory import get_mgmt_service_client

from .common import KUBERNETES_RUNTIME_RP, ConnectedClusterResourceId, query_rp_oid


logger = get_logger(__name__)


# https://learn.microsoft.com/en-us/azure/role-based-access-control/built-in-roles#kubernetes-extension-contributor
LOAD_BALANCER_EXTENSION_NAME = "arcnetworking"
LOAD_BALANCER_EXTENSION_TYPE = "microsoft.arcnetworking"


def enable_load_balancer(cmd: AzCliCommand, resource_uri: str):
    """
    Enable load balancer service in a connected cluster


    :param resource_uri: The resource uri of the connected cluster
    """

    resource_id = ConnectedClusterResourceId.parse(resource_uri)

    print(f"Register Kubernetes Runtime RP in subscription {resource_id.subscription_id}...")
    resource_management_client: ResourceManagementClient = get_mgmt_service_client(cmd.cli_ctx, ResourceManagementClient, subscription_id=resource_id.subscription_id)

    resource_management_client.providers.register(
        resource_provider_namespace=KUBERNETES_RUNTIME_RP
    )

    print(f"Installing Arc Networking Extension in cluster {resource_id.cluster_name}...")

    object_id = query_rp_oid(cmd)
    logger.info("Found Kubernetes Runtime RP SP in tenant with object id %s", object_id)

    source_control_configuration_client: SourceControlConfigurationClient = get_mgmt_service_client(cmd.cli_ctx, SourceControlConfigurationClient)

    lro = source_control_configuration_client.extensions.begin_create(
        resource_group_name=resource_id.resource_group,
        cluster_rp="Microsoft.Kubernetes",
        cluster_resource_name="connectedClusters",
        cluster_name=resource_id.cluster_name,
        extension_name=LOAD_BALANCER_EXTENSION_NAME,
        extension=Extension(
            identity=Identity(
                type="SystemAssigned"
            ),
            extension_type=LOAD_BALANCER_EXTENSION_TYPE,
            release_train="preview",
            configuration_settings={
                "k8sRuntimeFpaObjectId": object_id,
            },
            auto_upgrade_minor_version=True,
        )
    )

    # Prevent blocking KeyboardInterrupt
    while not lro.done():
        lro.wait(1)

    extension = lro.result()

    return {
        "extension": extension,
    }


def disable_load_balancer(cmd: AzCliCommand, resource_uri: str):
    """
    Disable load balancer service in a connected cluster


    :param resource_uri: The resource uri of the connected cluster
    """

    resource_id = ConnectedClusterResourceId.parse(resource_uri)

    print(f"Uninstall Arc Networking Extension in cluster {resource_id.cluster_name}...")
    source_control_configuration_client: SourceControlConfigurationClient = get_mgmt_service_client(cmd.cli_ctx, SourceControlConfigurationClient)

    extension = source_control_configuration_client.extensions.get(
        resource_group_name=resource_id.resource_group,
        cluster_rp="Microsoft.Kubernetes",
        cluster_resource_name="connectedClusters",
        cluster_name=resource_id.cluster_name,
        extension_name=LOAD_BALANCER_EXTENSION_NAME,
    )

    delete_lro = source_control_configuration_client.extensions.begin_delete(
        resource_group_name=resource_id.resource_group,
        cluster_rp="Microsoft.Kubernetes",
        cluster_resource_name="connectedClusters",
        cluster_name=resource_id.cluster_name,
        extension_name=LOAD_BALANCER_EXTENSION_NAME,
    )

    # Prevent blocking KeyboardInterrupt
    while not delete_lro.done():
        delete_lro.wait(1)

    return {
        "extension": extension,
    }
