# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import subprocess
import tempfile
import azext_k8s_runtime.custom_commands.load_balancer as lb

from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer, live_only


def _get_test_data_filepath():
    with tempfile.NamedTemporaryFile(delete=False) as temp:
        return temp.name


REGION = "eastus"


class K8sRuntimeScenario(ScenarioTest):
    def create_connected_cluster(self, resource_group):
        managed_cluster_name = self.create_random_name(prefix='test-connect', length=24)
        kubeconfig = _get_test_data_filepath()
        self.kwargs.update({
            'rg': resource_group,
            'name': self.create_random_name(prefix='cc-', length=12),
            'managed_cluster_name': managed_cluster_name,
            "kubeconfig": kubeconfig,
            'location': REGION,
        })

        self.cmd('aks create -g {rg} -n {managed_cluster_name} --generate-ssh-keys')
        self.cmd('aks get-credentials -g {rg} -n {managed_cluster_name} -f \'{kubeconfig}\' --admin')
        connected_cluster = self.cmd('connectedk8s connect -g {rg} -n {name} -l {location} --kube-config \'{kubeconfig}\' --kube-context {managed_cluster_name}-admin', checks=[
            self.check('resourceGroup', '{rg}'),
            self.check('name', '{name}')
        ])

        connected_cluster_resource_uri = connected_cluster.get_output_in_json()["id"]

        self.kwargs.update({
            "resource_uri": connected_cluster_resource_uri,
        })

    @live_only()
    @ResourceGroupPreparer(name_prefix='k8srttest', random_name_length=16)
    def test_load_balancer_enable_disable(self, resource_group):
        self.create_connected_cluster(resource_group)

        enable_result = self.cmd("az k8s-runtime load-balancer enable --resource-uri {resource_uri}", checks=[
            self.check("extension.name", lb.LOAD_BALANCER_EXTENSION_NAME),
            self.check("extension.extensionType", lb.LOAD_BALANCER_EXTENSION_TYPE),
            self.check("extension.provisioningState", "Succeeded"),
        ]).get_output_in_json()

        self.cmd("az k8s-runtime load-balancer disable --resource-uri {resource_uri}", checks=[
            self.check("extension.id", enable_result["extension"]["id"]),
        ])

        os.remove(self.kwargs["kubeconfig"])
