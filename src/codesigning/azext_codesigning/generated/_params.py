# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('codesigning list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('codesigning show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')

    with self.argument_context('codesigning create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name')
        c.argument('tags', tags_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('code_sign_account_properties_account_name', type=str, help='')
        c.argument('account_url', type=str, help='')
        c.argument('verification_status', arg_type=get_enum_type(['Completed', 'InProgress', 'NotCompleted']),
                   help='The vetting status of the code sign account')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Canceled', 'Provisioning',
                                                                 'Updating', 'Deleting', 'Accepted']), help='The '
                   'current provisioning state')

    with self.argument_context('codesigning update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')
        c.argument('tags', tags_type)

    with self.argument_context('codesigning delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')

    with self.argument_context('codesigning certificate-profile list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name')

    with self.argument_context('codesigning certificate-profile show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')
        c.argument('profile_name', type=str, help='Certificate profile name', id_part='child_name_1')

    with self.argument_context('codesigning certificate-profile create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name')
        c.argument('profile_name', type=str, help='Certificate profile name')
        c.argument('certificate_profile_properties_profile_name', type=str, help='')
        c.argument('profile_type', arg_type=get_enum_type(['Test', 'Trial', 'PrivateTrust', 'PublicTrust']), help='')
        c.argument('common_name', type=str, help='')
        c.argument('subject_alternative_name', type=str, help='')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Canceled', 'Provisioning',
                                                                 'Updating', 'Deleting', 'Accepted']), help='The '
                   'current provisioning state')

    with self.argument_context('codesigning certificate-profile update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')
        c.argument('profile_name', type=str, help='Certificate profile name', id_part='child_name_1')
        c.argument('certificate_profile_properties_profile_name', type=str, help='', id_part='child_name_1')
        c.argument('profile_type', arg_type=get_enum_type(['Test', 'Trial', 'PrivateTrust', 'PublicTrust']), help='')
        c.argument('common_name', type=str, help='')
        c.argument('subject_alternative_name', type=str, help='')
        c.argument('provisioning_state', arg_type=get_enum_type(['Succeeded', 'Failed', 'Canceled', 'Provisioning',
                                                                 'Updating', 'Deleting', 'Accepted']), help='The '
                   'current provisioning state')

    with self.argument_context('codesigning certificate-profile delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='Code Sign account name', id_part='name')
        c.argument('profile_name', type=str, help='Certificate profile name', id_part='child_name_1')
