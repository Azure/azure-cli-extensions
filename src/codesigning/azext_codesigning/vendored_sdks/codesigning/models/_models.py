# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from azure.core.exceptions import HttpResponseError
import msrest.serialization


class Certificate(msrest.serialization.Model):
    """Properties of the certificate.

    :param serial_number: Id of the certificate.
    :type serial_number: str
    :param subject_name: Subject name of the certificate.
    :type subject_name: str
    :param thumbprint: Thumbprint of the certificate.
    :type thumbprint: str
    :param created_date: Certificate created date.
    :type created_date: str
    :param expiry_date: Certificate expiry date.
    :type expiry_date: str
    """

    _attribute_map = {
        'serial_number': {'key': 'serialNumber', 'type': 'str'},
        'subject_name': {'key': 'subjectName', 'type': 'str'},
        'thumbprint': {'key': 'thumbprint', 'type': 'str'},
        'created_date': {'key': 'createdDate', 'type': 'str'},
        'expiry_date': {'key': 'expiryDate', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Certificate, self).__init__(**kwargs)
        self.serial_number = kwargs.get('serial_number', None)
        self.subject_name = kwargs.get('subject_name', None)
        self.thumbprint = kwargs.get('thumbprint', None)
        self.created_date = kwargs.get('created_date', None)
        self.expiry_date = kwargs.get('expiry_date', None)


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class CertificateProfile(Resource):
    """Certificate profile resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.codesigning.models.SystemData
    :param profile_type: Required. Profile type of the certificate. Possible values include:
     "PublicTrust".
    :type profile_type: str or ~azure.mgmt.codesigning.models.ProfileType
    :param rotation_policy: Required. Rotation policy of the certificate. Possible values include:
     "30 Days".
    :type rotation_policy: str or ~azure.mgmt.codesigning.models.RotationPolicy
    :param common_name: Required. Used as CN in the subject name of the certificate.
    :type common_name: str
    :ivar authority: Certificate authority of the certificate.
    :vartype authority: str
    :param organization: Required. Used as O in the subject name of the certificate.
    :type organization: str
    :ivar street_address:
    :vartype street_address: str
    :ivar country:
    :vartype country: str
    :ivar state:
    :vartype state: str
    :ivar city:
    :vartype city: str
    :ivar certificates:
    :vartype certificates: list[~azure.mgmt.codesigning.models.Certificate]
    :ivar provisioning_state: Provisioning state of the vault. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.codesigning.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'system_data': {'readonly': True},
        'profile_type': {'required': True},
        'rotation_policy': {'required': True},
        'common_name': {'required': True},
        'authority': {'readonly': True},
        'organization': {'required': True},
        'street_address': {'readonly': True},
        'country': {'readonly': True},
        'state': {'readonly': True},
        'city': {'readonly': True},
        'certificates': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'profile_type': {'key': 'properties.profileType', 'type': 'str'},
        'rotation_policy': {'key': 'properties.rotationPolicy', 'type': 'str'},
        'common_name': {'key': 'properties.commonName', 'type': 'str'},
        'authority': {'key': 'properties.authority', 'type': 'str'},
        'organization': {'key': 'properties.organization', 'type': 'str'},
        'street_address': {'key': 'properties.streetAddress', 'type': 'str'},
        'country': {'key': 'properties.country', 'type': 'str'},
        'state': {'key': 'properties.state', 'type': 'str'},
        'city': {'key': 'properties.city', 'type': 'str'},
        'certificates': {'key': 'properties.certificates', 'type': '[Certificate]'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CertificateProfile, self).__init__(**kwargs)
        self.system_data = None
        self.profile_type = kwargs['profile_type']
        self.rotation_policy = kwargs['rotation_policy']
        self.common_name = kwargs['common_name']
        self.authority = None
        self.organization = kwargs['organization']
        self.street_address = None
        self.country = None
        self.state = None
        self.city = None
        self.certificates = None
        self.provisioning_state = None


class CertificateProfilePatch(msrest.serialization.Model):
    """Certificate Profile Patch Properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar certificates:
    :vartype certificates: list[~azure.mgmt.codesigning.models.Certificate]
    """

    _validation = {
        'certificates': {'readonly': True},
    }

    _attribute_map = {
        'certificates': {'key': 'properties.certificates', 'type': '[Certificate]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CertificateProfilePatch, self).__init__(**kwargs)
        self.certificates = None


class CertificateProfiles(msrest.serialization.Model):
    """The paginated list of certificate profiles.

    :param value: The list of certificate profiles.
    :type value: list[~azure.mgmt.codesigning.models.CertificateProfile]
    :param next_link: The link to fetch the next page of certificate profile.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CertificateProfile]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CertificateProfiles, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(TrackedResource, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.location = kwargs['location']


class CodeSigningAccount(TrackedResource):
    """Code signing account resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :param location: Required. The geo-location where the resource lives.
    :type location: str
    :ivar system_data: Metadata pertaining to creation and last modification of the resource.
    :vartype system_data: ~azure.mgmt.codesigning.models.SystemData
    :ivar account_uri: The URI of the code signing account for performing operations on certificate
     profiles. This property is readonly.
    :vartype account_uri: str
    :ivar provisioning_state: Provisioning state of the vault. Possible values include:
     "Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted".
    :vartype provisioning_state: str or ~azure.mgmt.codesigning.models.ProvisioningState
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'location': {'required': True},
        'system_data': {'readonly': True},
        'account_uri': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'location': {'key': 'location', 'type': 'str'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'account_uri': {'key': 'properties.accountUri', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CodeSigningAccount, self).__init__(**kwargs)
        self.system_data = None
        self.account_uri = None
        self.provisioning_state = None


class CodeSigningAccountPatch(msrest.serialization.Model):
    """Parameters for creating or updating a code signing account.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param tags: A set of tags. Resource tags.
    :type tags: dict[str, str]
    :ivar account_uri: Account Uri of the code signing account.
    :vartype account_uri: str
    """

    _validation = {
        'account_uri': {'readonly': True},
    }

    _attribute_map = {
        'tags': {'key': 'tags', 'type': '{str}'},
        'account_uri': {'key': 'properties.accountUri', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CodeSigningAccountPatch, self).__init__(**kwargs)
        self.tags = kwargs.get('tags', None)
        self.account_uri = None


class CodeSigningAccounts(msrest.serialization.Model):
    """The paginated list of code signing accounts.

    :param value: List of code signing accounts.
    :type value: list[~azure.mgmt.codesigning.models.CodeSigningAccount]
    :param next_link: The link to fetch the next page of code signing account.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CodeSigningAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(CodeSigningAccounts, self).__init__(**kwargs)
        self.value = kwargs.get('value', None)
        self.next_link = kwargs.get('next_link', None)


class ErrorAdditionalInfo(msrest.serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: object
    """

    _validation = {
        'type': {'readonly': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorAdditionalInfo, self).__init__(**kwargs)
        self.type = None
        self.info = None


class ErrorDetail(msrest.serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details: list[~azure.mgmt.codesigning.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info: list[~azure.mgmt.codesigning.models.ErrorAdditionalInfo]
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'additional_info': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ErrorDetail]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[ErrorAdditionalInfo]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetail, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.additional_info = None


class ErrorResponse(msrest.serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.).

    :param error: The error object.
    :type error: ~azure.mgmt.codesigning.models.ErrorDetail
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'ErrorDetail'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = kwargs.get('error', None)


class Operation(msrest.serialization.Model):
    """The code signing API operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Operation name: {Microsoft.CodeSigning}/{resource}/{operation}.
    :vartype name: str
    :param is_data_action: Indicates whether the operation is a data action.
    :type is_data_action: bool
    :param display: Display of the operation.
    :type display: ~azure.mgmt.codesigning.models.OperationDisplay
    """

    _validation = {
        'name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.is_data_action = kwargs.get('is_data_action', None)
        self.display = kwargs.get('display', None)


class OperationDisplay(msrest.serialization.Model):
    """Operation display payload.

    :param provider: Resource provider of the operation.
    :type provider: str
    :param resource: Code signing resource on which the operation is performed.
    :type resource: str
    :param operation: Localized friendly name for the operation read, write, etc.
    :type operation: str
    :param description: Localized friendly description for the operation.
    :type description: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = kwargs.get('provider', None)
        self.resource = kwargs.get('resource', None)
        self.operation = kwargs.get('operation', None)
        self.description = kwargs.get('description', None)


class OperationList(msrest.serialization.Model):
    """The paginated list of code signing API operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: The list of code signing API operations.
    :vartype value: list[~azure.mgmt.codesigning.models.Operation]
    :param next_link: The link to fetch the next page of code signing API operations.
    :type next_link: str
    """

    _validation = {
        'value': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationList, self).__init__(**kwargs)
        self.value = None
        self.next_link = kwargs.get('next_link', None)


class ProxyResource(Resource):
    """The resource model definition for an Azure Resource Manager proxy resource. It will have everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class SystemData(msrest.serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :param created_by: The identity that created the resource.
    :type created_by: str
    :param created_by_type: The type of identity that created the resource. Possible values
     include: "User", "Application", "ManagedIdentity", "Key".
    :type created_by_type: str or ~azure.mgmt.codesigning.models.CreatedByType
    :param created_at: The timestamp of resource creation (UTC).
    :type created_at: ~datetime.datetime
    :param last_modified_by: The identity that last modified the resource.
    :type last_modified_by: str
    :param last_modified_by_type: The type of identity that last modified the resource. Possible
     values include: "User", "Application", "ManagedIdentity", "Key".
    :type last_modified_by_type: str or ~azure.mgmt.codesigning.models.CreatedByType
    :param last_modified_at: The type of identity that last modified the resource.
    :type last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        'created_by': {'key': 'createdBy', 'type': 'str'},
        'created_by_type': {'key': 'createdByType', 'type': 'str'},
        'created_at': {'key': 'createdAt', 'type': 'iso-8601'},
        'last_modified_by': {'key': 'lastModifiedBy', 'type': 'str'},
        'last_modified_by_type': {'key': 'lastModifiedByType', 'type': 'str'},
        'last_modified_at': {'key': 'lastModifiedAt', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemData, self).__init__(**kwargs)
        self.created_by = kwargs.get('created_by', None)
        self.created_by_type = kwargs.get('created_by_type', None)
        self.created_at = kwargs.get('created_at', None)
        self.last_modified_by = kwargs.get('last_modified_by', None)
        self.last_modified_by_type = kwargs.get('last_modified_by_type', None)
        self.last_modified_at = kwargs.get('last_modified_at', None)
