# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "code-signing certificate-profile create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Create a certificate profile
    """

    _aaz_info = {
        "version": "2023-04-30-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.codesigning/codesigningaccounts/{}/certificateprofiles/{}", "2023-04-30-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.account_name = AAZStrArg(
            options=["--account-name"],
            help="Code Signing account name",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?=.{3,24}$)[^0-9][A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$",
            ),
        )
        _args_schema.profile_name = AAZStrArg(
            options=["-n", "--name", "--profile-name"],
            help="Certificate profile name",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^(?=.{5,100}$)[^0-9][A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.common_name = AAZStrArg(
            options=["--common-name"],
            arg_group="Properties",
            help="Used as CN in the subject name of the certificate",
            required=True,
        )
        _args_schema.include_city = AAZBoolArg(
            options=["--include-city"],
            arg_group="Properties",
            help="Whether to include in the public trust or private trust certificate subject name",
            default=False,
        )
        _args_schema.include_country = AAZBoolArg(
            options=["--include-country"],
            arg_group="Properties",
            help="Whether to include in the public trust or private trust certificate subject name",
            default=False,
        )
        _args_schema.include_postal_code = AAZBoolArg(
            options=["--include-postal-code"],
            arg_group="Properties",
            help="Whether to include in the public trust certificate subject name",
            default=False,
        )
        _args_schema.include_state = AAZBoolArg(
            options=["--include-state"],
            arg_group="Properties",
            help="Whether to include in the public trust or private trust certificate subject name",
            default=False,
        )
        _args_schema.include_street_address = AAZBoolArg(
            options=["--include-street-address"],
            arg_group="Properties",
            help="Whether to include in the public trust certificate subject name",
            default=False,
        )
        _args_schema.organization = AAZStrArg(
            options=["--organization"],
            arg_group="Properties",
            help="Used as O in the subject name of the certificate",
            required=True,
        )
        _args_schema.organization_unit = AAZStrArg(
            options=["--organization-unit"],
            arg_group="Properties",
            help="Used as OU in the subject name of the private trust certificate",
        )
        _args_schema.profile_type = AAZStrArg(
            options=["--profile-type"],
            arg_group="Properties",
            help="Profile type of the certificate",
            required=True,
            enum={"PrivateTrust": "PrivateTrust", "PrivateTrustCIPolicy": "PrivateTrustCIPolicy", "PublicTrust": "PublicTrust", "PublicTrustTest": "PublicTrustTest", "VBSEnclave": "VBSEnclave"},
        )
        _args_schema.rotation_policy = AAZStrArg(
            options=["--rotation-policy"],
            arg_group="Properties",
            help="Rotation policy of the certificate",
            required=True,
            default="3 Days",
            enum={"3 Days": "3 Days", "30 Days": "30 Days"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.CertificateProfileCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CertificateProfileCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accountName", self.ctx.args.account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "profileName", self.ctx.args.profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-30-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("commonName", AAZStrType, ".common_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("includeCity", AAZBoolType, ".include_city")
                properties.set_prop("includeCountry", AAZBoolType, ".include_country")
                properties.set_prop("includePostalCode", AAZBoolType, ".include_postal_code")
                properties.set_prop("includeState", AAZBoolType, ".include_state")
                properties.set_prop("includeStreetAddress", AAZBoolType, ".include_street_address")
                properties.set_prop("organization", AAZStrType, ".organization", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("organizationUnit", AAZStrType, ".organization_unit")
                properties.set_prop("profileType", AAZStrType, ".profile_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("rotationPolicy", AAZStrType, ".rotation_policy", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.certificates = AAZListType(
                flags={"read_only": True},
            )
            properties.city = AAZStrType(
                flags={"read_only": True},
            )
            properties.common_name = AAZStrType(
                serialized_name="commonName",
                flags={"required": True},
            )
            properties.country = AAZStrType(
                flags={"read_only": True},
            )
            properties.enhanced_key_usage = AAZStrType(
                serialized_name="enhancedKeyUsage",
                flags={"read_only": True},
            )
            properties.identity_validation_id = AAZStrType(
                serialized_name="identityValidationId",
                flags={"read_only": True},
            )
            properties.include_city = AAZBoolType(
                serialized_name="includeCity",
            )
            properties.include_country = AAZBoolType(
                serialized_name="includeCountry",
            )
            properties.include_postal_code = AAZBoolType(
                serialized_name="includePostalCode",
            )
            properties.include_state = AAZBoolType(
                serialized_name="includeState",
            )
            properties.include_street_address = AAZBoolType(
                serialized_name="includeStreetAddress",
            )
            properties.organization = AAZStrType(
                flags={"required": True},
            )
            properties.organization_unit = AAZStrType(
                serialized_name="organizationUnit",
            )
            properties.postal_code = AAZStrType(
                serialized_name="postalCode",
                flags={"read_only": True},
            )
            properties.profile_type = AAZStrType(
                serialized_name="profileType",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.rotation_policy = AAZStrType(
                serialized_name="rotationPolicy",
                flags={"required": True},
            )
            properties.state = AAZStrType(
                flags={"read_only": True},
            )
            properties.status = AAZStrType()
            properties.street_address = AAZStrType(
                serialized_name="streetAddress",
                flags={"read_only": True},
            )

            certificates = cls._schema_on_200_201.properties.certificates
            certificates.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.certificates.Element
            _element.created_date = AAZStrType(
                serialized_name="createdDate",
            )
            _element.expiry_date = AAZStrType(
                serialized_name="expiryDate",
            )
            _element.revocations = AAZListType()
            _element.serial_number = AAZStrType(
                serialized_name="serialNumber",
            )
            _element.status = AAZStrType()
            _element.subject_name = AAZStrType(
                serialized_name="subjectName",
            )
            _element.thumbprint = AAZStrType()

            revocations = cls._schema_on_200_201.properties.certificates.Element.revocations
            revocations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.certificates.Element.revocations.Element
            _element.reason = AAZStrType()
            _element.remarks = AAZStrType()
            _element.requested_at = AAZStrType(
                serialized_name="requestedAt",
            )
            _element.revoked_at = AAZStrType(
                serialized_name="revokedAt",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
