# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "codesigning certificate-profile revoke-certificate",
    is_preview=True,
)
class RevokeCertificate(AAZCommand):
    """Revoke certificate
    """

    _aaz_info = {
        "version": "2024-02-05-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.codesigning/codesigningaccounts/{}/certificateprofiles/{}/revokecertificate", "2024-02-05-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.account_name = AAZStrArg(
            options=["--account-name"],
            help="Code Signing account name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^(?=.{3,24}$)[^0-9][A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$",
            ),
        )
        _args_schema.profile_name = AAZStrArg(
            options=["--profile-name"],
            help="Certificate profile name",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^(?=.{5,100}$)[^0-9][A-Za-z0-9]+(?:-[A-Za-z0-9]+)*$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.effective_at = AAZDateTimeArg(
            options=["--effective-at"],
            arg_group="Body",
            help="The timestamp when the revocation is effective",
            required=True,
        )
        _args_schema.reason = AAZStrArg(
            options=["--reason"],
            arg_group="Body",
            help="Reason for revocation",
            required=True,
        )
        _args_schema.remarks = AAZStrArg(
            options=["--remarks"],
            arg_group="Body",
            help="Remarks for the revocation",
        )
        _args_schema.serial_number = AAZStrArg(
            options=["--serial-number"],
            arg_group="Body",
            help="Serial number of the certificate",
            required=True,
        )
        _args_schema.thumbprint = AAZStrArg(
            options=["--thumbprint"],
            arg_group="Body",
            help="Thumbprint of the certificate",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CertificateProfilesRevokeCertificate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class CertificateProfilesRevokeCertificate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CodeSigning/codeSigningAccounts/{accountName}/certificateProfiles/{profileName}/revokeCertificate",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accountName", self.ctx.args.account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "profileName", self.ctx.args.profile_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-02-05-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("effectiveAt", AAZStrType, ".effective_at", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("reason", AAZStrType, ".reason", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("remarks", AAZStrType, ".remarks")
            _builder.set_prop("serialNumber", AAZStrType, ".serial_number", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("thumbprint", AAZStrType, ".thumbprint", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_204(self, session):
            pass


class _RevokeCertificateHelper:
    """Helper class for RevokeCertificate"""


__all__ = ["RevokeCertificate"]
