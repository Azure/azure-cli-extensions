# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric device update",
)
class Update(AAZCommand):
    """Update the Network Device resource.

    :example: Update the Network Device
        az networkfabric device update --resource-group "example-rg" --resource-name "example-device" --host-name "AustinNF-AR-CE1" --serial-number "Arista;DCS-7280DR3-24;12.05;JPE21115446"
    """

    _aaz_info = {
        "version": "2025-07-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkdevices/{}", "2025-07-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Device.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
            nullable=True,
        )
        _args_schema.host_name = AAZStrArg(
            options=["--host-name"],
            arg_group="Properties",
            help="The host name of the device.",
            nullable=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.identity_selector = AAZObjectArg(
            options=["--identity-selector"],
            arg_group="Properties",
            help="The selection of the managed identity to use with this storage account. The identity type must be either system assigned or user assigned.",
            nullable=True,
        )
        _args_schema.serial_number = AAZStrArg(
            options=["--serial-number"],
            arg_group="Properties",
            help="Serial number of the device. Format of serial Number - Make;Model;HardwareRevisionId;SerialNumber.",
            nullable=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Properties",
            help="Resource tags.",
        )

        identity_selector = cls._args_schema.identity_selector
        identity_selector.identity_type = AAZStrArg(
            options=["identity-type"],
            help="The type of managed identity that is being selected.",
            enum={"SystemAssignedIdentity": "SystemAssignedIdentity", "UserAssignedIdentity": "UserAssignedIdentity"},
        )
        identity_selector.user_assigned_identity_resource_id = AAZResourceIdArg(
            options=["user-assigned-identity-resource-id"],
            help="The user assigned managed identity resource ID to use. Mutually exclusive with a system assigned identity type.",
            nullable=True,
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkDevicesUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkDevicesUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkDevices/{networkDeviceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkDeviceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-07-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation", typ_kwargs={"nullable": True})
                properties.set_prop("hostName", AAZStrType, ".host_name", typ_kwargs={"nullable": True})
                properties.set_prop("identitySelector", AAZObjectType, ".identity_selector", typ_kwargs={"nullable": True})
                properties.set_prop("serialNumber", AAZStrType, ".serial_number", typ_kwargs={"nullable": True})

            identity_selector = _builder.get(".properties.identitySelector")
            if identity_selector is not None:
                identity_selector.set_prop("identityType", AAZStrType, ".identity_type")
                identity_selector.set_prop("userAssignedIdentityResourceId", AAZStrType, ".user_assigned_identity_resource_id", typ_kwargs={"nullable": True})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.identity = AAZIdentityObjectType()
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.certificate_rotation_status = AAZListType(
                serialized_name="certificateRotationStatus",
                flags={"read_only": True},
            )
            properties.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            properties.host_name = AAZStrType(
                serialized_name="hostName",
            )
            properties.identity_selector = AAZObjectType(
                serialized_name="identitySelector",
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.management_ipv4_address = AAZStrType(
                serialized_name="managementIpv4Address",
                flags={"read_only": True},
            )
            properties.management_ipv6_address = AAZStrType(
                serialized_name="managementIpv6Address",
                flags={"read_only": True},
            )
            properties.network_device_role = AAZStrType(
                serialized_name="networkDeviceRole",
                flags={"read_only": True},
            )
            properties.network_device_sku = AAZStrType(
                serialized_name="networkDeviceSku",
            )
            properties.network_fabric_id = AAZStrType(
                serialized_name="networkFabricId",
                nullable=True,
                flags={"read_only": True},
            )
            properties.network_rack_id = AAZStrType(
                serialized_name="networkRackId",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.rw_device_config = AAZStrType(
                serialized_name="rwDeviceConfig",
                flags={"read_only": True},
            )
            properties.secret_rotation_status = AAZListType(
                serialized_name="secretRotationStatus",
                flags={"read_only": True},
            )
            properties.serial_number = AAZStrType(
                serialized_name="serialNumber",
                flags={"required": True},
            )
            properties.version = AAZStrType(
                flags={"read_only": True},
            )

            certificate_rotation_status = cls._schema_on_200.properties.certificate_rotation_status
            certificate_rotation_status.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.certificate_rotation_status.Element
            _element.certificate_archive_reference = AAZObjectType(
                serialized_name="certificateArchiveReference",
                flags={"read_only": True},
            )
            _element.certificate_type = AAZStrType(
                serialized_name="certificateType",
                flags={"read_only": True},
            )
            _element.expire_time = AAZStrType(
                serialized_name="expireTime",
                flags={"read_only": True},
            )
            _element.last_rotation_time = AAZStrType(
                serialized_name="lastRotationTime",
                flags={"read_only": True},
            )
            _element.synchronization_status = AAZStrType(
                serialized_name="synchronizationStatus",
                flags={"read_only": True},
            )

            certificate_archive_reference = cls._schema_on_200.properties.certificate_rotation_status.Element.certificate_archive_reference
            certificate_archive_reference.certificate_name = AAZStrType(
                serialized_name="certificateName",
                flags={"read_only": True},
            )
            certificate_archive_reference.certificate_version = AAZStrType(
                serialized_name="certificateVersion",
                flags={"read_only": True},
            )
            certificate_archive_reference.key_vault_id = AAZStrType(
                serialized_name="keyVaultId",
                nullable=True,
                flags={"read_only": True},
            )
            certificate_archive_reference.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
                flags={"read_only": True},
            )

            identity_selector = cls._schema_on_200.properties.identity_selector
            identity_selector.identity_type = AAZStrType(
                serialized_name="identityType",
                flags={"required": True},
            )
            identity_selector.user_assigned_identity_resource_id = AAZStrType(
                serialized_name="userAssignedIdentityResourceId",
                nullable=True,
            )

            last_operation = cls._schema_on_200.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            secret_rotation_status = cls._schema_on_200.properties.secret_rotation_status
            secret_rotation_status.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.secret_rotation_status.Element
            _element.last_rotation_time = AAZStrType(
                serialized_name="lastRotationTime",
                flags={"read_only": True},
            )
            _element.secret_archive_reference = AAZObjectType(
                serialized_name="secretArchiveReference",
                flags={"read_only": True},
            )
            _element.secret_type = AAZStrType(
                serialized_name="secretType",
                flags={"read_only": True},
            )
            _element.synchronization_status = AAZStrType(
                serialized_name="synchronizationStatus",
                flags={"read_only": True},
            )

            secret_archive_reference = cls._schema_on_200.properties.secret_rotation_status.Element.secret_archive_reference
            secret_archive_reference.key_vault_id = AAZStrType(
                serialized_name="keyVaultId",
                nullable=True,
                flags={"read_only": True},
            )
            secret_archive_reference.key_vault_uri = AAZStrType(
                serialized_name="keyVaultUri",
                flags={"read_only": True},
            )
            secret_archive_reference.secret_name = AAZStrType(
                serialized_name="secretName",
                flags={"read_only": True},
            )
            secret_archive_reference.secret_version = AAZStrType(
                serialized_name="secretVersion",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
