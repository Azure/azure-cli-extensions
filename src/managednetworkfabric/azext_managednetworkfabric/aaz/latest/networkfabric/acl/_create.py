# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric acl create",
)
class Create(AAZCommand):
    """Create a Access Control List resource

    :example: Creates a Access Control List resource.
        az networkfabric acl create --resource-group "example-rg" --location "westus3" --resource-name "example-accesscontrollist" --address-family "ipv4" --conditions "[{sequenceNumber:123,action:allow,destinationAddress:'1.1.10.10',destinationPort:1254,sourceAddress:'1.1.1.0/24',sourcePort:1276,protocol:255,annotation:asdf}]"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric acl create --conditions ??
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/accesscontrollists/{}", "2023-02-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Access Control List",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="Location of Azure region",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.address_family = AAZStrArg(
            options=["--address-family"],
            arg_group="Properties",
            help="IP address family. Example: ipv4 | ipv6.",
            required=True,
            enum={"ipv4": "ipv4", "ipv6": "ipv6"},
        )
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.conditions = AAZListArg(
            options=["--conditions"],
            arg_group="Properties",
            help="Access Control List conditions.",
            required=True,
        )

        conditions = cls._args_schema.conditions
        conditions.Element = AAZObjectArg()

        _element = cls._args_schema.conditions.Element
        _element.action = AAZStrArg(
            options=["action"],
            help="action. Example: allow | deny.",
            required=True,
            enum={"allow": "allow", "deny": "deny"},
        )
        _element.annotation = AAZStrArg(
            options=["annotation"],
            help="Switch configuration description.",
        )
        _element.destination_address = AAZStrArg(
            options=["destination-address"],
            help="destinationAddress. Example: any | 1.1.1.0/24 | 1.1.10.10",
            required=True,
        )
        _element.destination_port = AAZStrArg(
            options=["destination-port"],
            help="destinationPort. Example: any | 1253",
            required=True,
        )
        _element.protocol = AAZIntArg(
            options=["protocol"],
            help="TCP/IP protocol as defined in the list of IP protocol numbers. Example: 255 (any) | 0 | 1.",
            required=True,
        )
        _element.sequence_number = AAZIntArg(
            options=["sequence-number"],
            help="sequenceNumber of the Access Control List.",
            required=True,
        )
        _element.source_address = AAZStrArg(
            options=["source-address"],
            help="sourceAddress. Example: any | 1.1.1.0/24 | 1.1.10.10",
            required=True,
        )
        _element.source_port = AAZStrArg(
            options=["source-port"],
            help="sourcePort. Example: any | 1253",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.AccessControlListsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AccessControlListsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accessControlListName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("addressFamily", AAZStrType, ".address_family", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("conditions", AAZListType, ".conditions", typ_kwargs={"flags": {"required": True}})

            conditions = _builder.get(".properties.conditions")
            if conditions is not None:
                conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.conditions[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("annotation", AAZStrType, ".annotation")
                _elements.set_prop("destinationAddress", AAZStrType, ".destination_address", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("destinationPort", AAZStrType, ".destination_port", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("protocol", AAZIntType, ".protocol", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("sequenceNumber", AAZIntType, ".sequence_number", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("sourceAddress", AAZStrType, ".source_address", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("sourcePort", AAZStrType, ".source_port", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.address_family = AAZStrType(
                serialized_name="addressFamily",
                flags={"required": True},
            )
            properties.annotation = AAZStrType()
            properties.conditions = AAZListType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            conditions = cls._schema_on_200.properties.conditions
            conditions.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.conditions.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.annotation = AAZStrType()
            _element.destination_address = AAZStrType(
                serialized_name="destinationAddress",
                flags={"required": True},
            )
            _element.destination_port = AAZStrType(
                serialized_name="destinationPort",
                flags={"required": True},
            )
            _element.protocol = AAZIntType(
                flags={"required": True},
            )
            _element.sequence_number = AAZIntType(
                serialized_name="sequenceNumber",
                flags={"required": True},
            )
            _element.source_address = AAZStrType(
                serialized_name="sourceAddress",
                flags={"required": True},
            )
            _element.source_port = AAZStrType(
                serialized_name="sourcePort",
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
