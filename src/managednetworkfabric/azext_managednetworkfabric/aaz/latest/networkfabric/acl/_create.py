# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric acl create",
)
class Create(AAZCommand):
    """Create a Access Control List resource

    :example: Creates an Access Control List with Configuration type as "File".
        az networkfabric acl create --resource-group "example-rg" --location "westus3" --resource-name "example-accesscontrollist" --configuration-type "File" --acls-url "https://ACL-Storage-URL"

    :example: Creates an Access Control List with Configuration type as "Inline".
        az networkfabric acl create --resource-group "example-rg" --location "westus3" --resource-name "example-accesscontrollist" --configuration-type "Inline" --default-action "Permit" --dynamic-match-configurations "[{ipGroups:[{name:'example-ipGroup',ipAddressType:IPv4,ipPrefixes:['10.20.3.1/20']}],vlanGroups:[{name:'example-vlanGroup',vlans:['20-30']}],portGroups:[{name:'example-portGroup',ports:['100-200']}]}]" --match-configurations "[{matchConfigurationName:'example-match',sequenceNumber:123,ipAddressType:IPv4,matchConditions:[{etherTypes:['0x1'],fragments:['0xff00-0xffff'],ipLengths:['4094-9214'],ttlValues:[23],dscpMarkings:[32],portCondition:{flags:[established],portType:SourcePort,layer4Protocol:TCP,ports:['1-20'],portGroupNames:['example-portGroup']},protocolTypes:[TCP],vlanMatchCondition:{vlans:['20-30'],innerVlans:[30],vlanGroupNames:['example-vlanGroup']},ipCondition:{type:SourceIP,prefixType:Prefix,ipPrefixValues:['10.20.20.20/12'],ipGroupNames:['example-ipGroup']}}],actions:[{type:Count,counterName:'example-counter'}]}]"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric acl create --dynamic-match-configurations "??"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/accesscontrollists/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Access Control List",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.acl_type = AAZStrArg(
            options=["--acl-type"],
            arg_group="Properties",
            help="Access Control List (ACL) Type",
            enum={"ControlPlaneTrafficPolicy": "ControlPlaneTrafficPolicy", "Management": "Management", "Tenant": "Tenant"},
        )
        _args_schema.acls_url = AAZStrArg(
            options=["--acls-url"],
            arg_group="Properties",
            help="Access Control List file URL.",
        )
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.configuration_type = AAZStrArg(
            options=["--configuration-type"],
            arg_group="Properties",
            help="Input method to configure Access Control List.",
            required=True,
            enum={"File": "File", "Inline": "Inline"},
        )
        _args_schema.default_action = AAZStrArg(
            options=["--default-action"],
            arg_group="Properties",
            help="Default action that needs to be applied when no condition is matched. Example: Permit | Deny.",
            default="Permit",
            enum={"Deny": "Deny", "Permit": "Permit"},
        )
        _args_schema.device_role = AAZStrArg(
            options=["--device-role"],
            arg_group="Properties",
            help="Device Role",
            enum={"CE": "CE", "ManagementSwitch": "ManagementSwitch", "NPB": "NPB", "ToR": "ToR"},
        )
        _args_schema.dynamic_match_configurations = AAZListArg(
            options=["--dynamic-match-configurations"],
            arg_group="Properties",
            help="List of dynamic match configurations.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _args_schema.global_access_control_list_actions = AAZObjectArg(
            options=["--global-access-control-list-actions"],
            arg_group="Properties",
            help="Global Access Control List (ACL) actions",
        )
        _args_schema.match_configurations = AAZListArg(
            options=["--match-configurations"],
            arg_group="Properties",
            help="List of match configurations.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        dynamic_match_configurations = cls._args_schema.dynamic_match_configurations
        dynamic_match_configurations.Element = AAZObjectArg()

        _element = cls._args_schema.dynamic_match_configurations.Element
        _element.ip_groups = AAZListArg(
            options=["ip-groups"],
            help="List of IP Groups.",
        )
        _element.port_groups = AAZListArg(
            options=["port-groups"],
            help="List of the port groups.",
        )
        _element.vlan_groups = AAZListArg(
            options=["vlan-groups"],
            help="List of vlan groups.",
        )

        ip_groups = cls._args_schema.dynamic_match_configurations.Element.ip_groups
        ip_groups.Element = AAZObjectArg()

        _element = cls._args_schema.dynamic_match_configurations.Element.ip_groups.Element
        _element.ip_address_type = AAZStrArg(
            options=["ip-address-type"],
            help="IP Address type.",
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        _element.ip_prefixes = AAZListArg(
            options=["ip-prefixes"],
            help="List of IP Prefixes.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="IP Group name.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        ip_prefixes = cls._args_schema.dynamic_match_configurations.Element.ip_groups.Element.ip_prefixes
        ip_prefixes.Element = AAZStrArg()

        port_groups = cls._args_schema.dynamic_match_configurations.Element.port_groups
        port_groups.Element = AAZObjectArg()

        _element = cls._args_schema.dynamic_match_configurations.Element.port_groups.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the port group.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _element.ports = AAZListArg(
            options=["ports"],
            help="List of the ports that need to be matched.",
        )

        ports = cls._args_schema.dynamic_match_configurations.Element.port_groups.Element.ports
        ports.Element = AAZStrArg()

        vlan_groups = cls._args_schema.dynamic_match_configurations.Element.vlan_groups
        vlan_groups.Element = AAZObjectArg()

        _element = cls._args_schema.dynamic_match_configurations.Element.vlan_groups.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Vlan group name.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _element.vlans = AAZListArg(
            options=["vlans"],
            help="List of vlans.",
        )

        vlans = cls._args_schema.dynamic_match_configurations.Element.vlan_groups.Element.vlans
        vlans.Element = AAZStrArg()

        global_access_control_list_actions = cls._args_schema.global_access_control_list_actions
        global_access_control_list_actions.enable_count = AAZStrArg(
            options=["enable-count"],
            help="Configuration to enable or disable ACL action count.",
            default="False",
            enum={"False": "False", "True": "True"},
        )

        match_configurations = cls._args_schema.match_configurations
        match_configurations.Element = AAZObjectArg()

        _element = cls._args_schema.match_configurations.Element
        _element.actions = AAZListArg(
            options=["actions"],
            help="List of actions that need to be performed for the matched conditions.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.ip_address_type = AAZStrArg(
            options=["ip-address-type"],
            help="Type of IP Address. IPv4 or IPv6",
            enum={"IPv4": "IPv4", "IPv6": "IPv6"},
        )
        _element.match_conditions = AAZListArg(
            options=["match-conditions"],
            help="List of the match conditions.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.match_configuration_name = AAZStrArg(
            options=["match-configuration-name"],
            help="The name of the match configuration.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _element.sequence_number = AAZIntArg(
            options=["sequence-number"],
            help="Sequence Number of the match configuration.",
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )

        actions = cls._args_schema.match_configurations.Element.actions
        actions.Element = AAZObjectArg()

        _element = cls._args_schema.match_configurations.Element.actions.Element
        _element.counter_name = AAZStrArg(
            options=["counter-name"],
            help="Name of the counter block to get match count information.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _element.police_rate_configuration = AAZObjectArg(
            options=["police-rate-configuration"],
            help="Police rate configuration",
        )
        _element.remark_comment = AAZStrArg(
            options=["remark-comment"],
            help="Remark comment",
        )
        _element.type = AAZStrArg(
            options=["type"],
            help="Type of actions that can be performed.",
            enum={"Count": "Count", "Drop": "Drop", "Log": "Log", "PoliceRate": "PoliceRate", "Remark": "Remark"},
        )

        police_rate_configuration = cls._args_schema.match_configurations.Element.actions.Element.police_rate_configuration
        police_rate_configuration.bit_rate = AAZObjectArg(
            options=["bit-rate"],
            help="Rate limit in bits per second.",
        )
        police_rate_configuration.burst_size = AAZObjectArg(
            options=["burst-size"],
            help="Burst size in packets.",
        )

        bit_rate = cls._args_schema.match_configurations.Element.actions.Element.police_rate_configuration.bit_rate
        bit_rate.rate = AAZIntArg(
            options=["rate"],
            help="Bitrate.",
        )
        bit_rate.unit = AAZStrArg(
            options=["unit"],
            help="Bitrate unit.",
            enum={"Gbps": "Gbps", "Kbps": "Kbps", "Mbps": "Mbps", "bps": "bps"},
        )

        burst_size = cls._args_schema.match_configurations.Element.actions.Element.police_rate_configuration.burst_size
        burst_size.size = AAZIntArg(
            options=["size"],
            help="Burst size.",
        )
        burst_size.unit = AAZStrArg(
            options=["unit"],
            help="Burst size unit.",
            enum={"Bytes": "Bytes", "GBytes": "GBytes", "KBytes": "KBytes", "MBytes": "MBytes"},
        )

        match_conditions = cls._args_schema.match_configurations.Element.match_conditions
        match_conditions.Element = AAZObjectArg()

        _element = cls._args_schema.match_configurations.Element.match_conditions.Element
        _element.dscp_markings = AAZListArg(
            options=["dscp-markings"],
            help="List of DSCP Markings that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.ether_types = AAZListArg(
            options=["ether-types"],
            help="List of ether type values that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.fragments = AAZListArg(
            options=["fragments"],
            help="List of IP fragment packets that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.icmp_configuration = AAZObjectArg(
            options=["icmp-configuration"],
            help="Internet Control Message Protocol (ICMP) configuration",
        )
        _element.ip_condition = AAZObjectArg(
            options=["ip-condition"],
            help="IP condition that needs to be matched.",
        )
        _element.ip_lengths = AAZListArg(
            options=["ip-lengths"],
            help="List of IP Lengths that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.port_condition = AAZObjectArg(
            options=["port-condition"],
            help="Defines the port condition that needs to be matched.",
        )
        _element.protocol_neighbors = AAZListArg(
            options=["protocol-neighbors"],
            help="Protocol neighbors that need to be matched.",
        )
        _element.protocol_types = AAZListArg(
            options=["protocol-types"],
            help="List of the protocols that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.ttl_values = AAZListArg(
            options=["ttl-values"],
            help="List of TTL [Time To Live] values that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.vlan_match_condition = AAZObjectArg(
            options=["vlan-match-condition"],
            help="Vlan match condition that needs to be matched.",
        )

        dscp_markings = cls._args_schema.match_configurations.Element.match_conditions.Element.dscp_markings
        dscp_markings.Element = AAZStrArg()

        ether_types = cls._args_schema.match_configurations.Element.match_conditions.Element.ether_types
        ether_types.Element = AAZStrArg()

        fragments = cls._args_schema.match_configurations.Element.match_conditions.Element.fragments
        fragments.Element = AAZStrArg()

        icmp_configuration = cls._args_schema.match_configurations.Element.match_conditions.Element.icmp_configuration
        icmp_configuration.icmp_types = AAZListArg(
            options=["icmp-types"],
            help="Internet Control Message Protocol (ICMP) types",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        icmp_types = cls._args_schema.match_configurations.Element.match_conditions.Element.icmp_configuration.icmp_types
        icmp_types.Element = AAZStrArg()

        ip_condition = cls._args_schema.match_configurations.Element.match_conditions.Element.ip_condition
        ip_condition.ip_group_names = AAZListArg(
            options=["ip-group-names"],
            help="The List of IP Group Names that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        ip_condition.ip_prefix_values = AAZListArg(
            options=["ip-prefix-values"],
            help="The list of IP Prefixes that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        ip_condition.prefix_type = AAZStrArg(
            options=["prefix-type"],
            help="IP Prefix Type that needs to be matched.",
            enum={"LongestPrefix": "LongestPrefix", "Prefix": "Prefix"},
        )
        ip_condition.type = AAZStrArg(
            options=["type"],
            help="IP Address type that needs to be matched.",
            enum={"Bidirectional": "Bidirectional", "DestinationIP": "DestinationIP", "SourceIP": "SourceIP"},
        )

        ip_group_names = cls._args_schema.match_configurations.Element.match_conditions.Element.ip_condition.ip_group_names
        ip_group_names.Element = AAZStrArg()

        ip_prefix_values = cls._args_schema.match_configurations.Element.match_conditions.Element.ip_condition.ip_prefix_values
        ip_prefix_values.Element = AAZStrArg()

        ip_lengths = cls._args_schema.match_configurations.Element.match_conditions.Element.ip_lengths
        ip_lengths.Element = AAZStrArg()

        port_condition = cls._args_schema.match_configurations.Element.match_conditions.Element.port_condition
        port_condition.flags = AAZListArg(
            options=["flags"],
            help="List of protocol flags that need to be matched. Example: established | initial | <List-of-TCP-flags>. List of eligible TCP Flags are ack, fin, not-ack, not-fin, not-psh, not-rst, not-syn, not-urg, psh, rst, syn, urg",
        )
        port_condition.layer4_protocol = AAZStrArg(
            options=["layer4-protocol"],
            help="Layer4 protocol type that needs to be matched.",
            required=True,
            enum={"SCTP": "SCTP", "TCP": "TCP", "UDP": "UDP"},
        )
        port_condition.port_group_names = AAZListArg(
            options=["port-group-names"],
            help="List of the port Group Names that need to be matched.",
        )
        port_condition.port_type = AAZStrArg(
            options=["port-type"],
            help="Port type that needs to be matched.",
            enum={"Bidirectional": "Bidirectional", "DestinationPort": "DestinationPort", "SourcePort": "SourcePort"},
        )
        port_condition.ports = AAZListArg(
            options=["ports"],
            help="List of the Ports that need to be matched.",
        )

        flags = cls._args_schema.match_configurations.Element.match_conditions.Element.port_condition.flags
        flags.Element = AAZStrArg()

        port_group_names = cls._args_schema.match_configurations.Element.match_conditions.Element.port_condition.port_group_names
        port_group_names.Element = AAZStrArg()

        ports = cls._args_schema.match_configurations.Element.match_conditions.Element.port_condition.ports
        ports.Element = AAZStrArg()

        protocol_neighbors = cls._args_schema.match_configurations.Element.match_conditions.Element.protocol_neighbors
        protocol_neighbors.Element = AAZStrArg()

        protocol_types = cls._args_schema.match_configurations.Element.match_conditions.Element.protocol_types
        protocol_types.Element = AAZStrArg()

        ttl_values = cls._args_schema.match_configurations.Element.match_conditions.Element.ttl_values
        ttl_values.Element = AAZStrArg()

        vlan_match_condition = cls._args_schema.match_configurations.Element.match_conditions.Element.vlan_match_condition
        vlan_match_condition.inner_vlans = AAZListArg(
            options=["inner-vlans"],
            help="List of inner vlans that need to be matched.Inputs can be single vlan or the range of vlans.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        vlan_match_condition.vlan_group_names = AAZListArg(
            options=["vlan-group-names"],
            help="List of vlan group names that need to be matched.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        vlan_match_condition.vlans = AAZListArg(
            options=["vlans"],
            help="List of vlans that need to be matched. Inputs can be single vlan or the range of vlans.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        inner_vlans = cls._args_schema.match_configurations.Element.match_conditions.Element.vlan_match_condition.inner_vlans
        inner_vlans.Element = AAZStrArg()

        vlan_group_names = cls._args_schema.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlan_group_names
        vlan_group_names.Element = AAZStrArg()

        vlans = cls._args_schema.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlans
        vlans.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.AccessControlListsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AccessControlListsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/accessControlLists/{accessControlListName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accessControlListName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("aclType", AAZStrType, ".acl_type")
                properties.set_prop("aclsUrl", AAZStrType, ".acls_url")
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("configurationType", AAZStrType, ".configuration_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("defaultAction", AAZStrType, ".default_action")
                properties.set_prop("deviceRole", AAZStrType, ".device_role")
                properties.set_prop("dynamicMatchConfigurations", AAZListType, ".dynamic_match_configurations")
                properties.set_prop("globalAccessControlListActions", AAZObjectType, ".global_access_control_list_actions")
                properties.set_prop("matchConfigurations", AAZListType, ".match_configurations")

            dynamic_match_configurations = _builder.get(".properties.dynamicMatchConfigurations")
            if dynamic_match_configurations is not None:
                dynamic_match_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dynamicMatchConfigurations[]")
            if _elements is not None:
                _elements.set_prop("ipGroups", AAZListType, ".ip_groups")
                _elements.set_prop("portGroups", AAZListType, ".port_groups")
                _elements.set_prop("vlanGroups", AAZListType, ".vlan_groups")

            ip_groups = _builder.get(".properties.dynamicMatchConfigurations[].ipGroups")
            if ip_groups is not None:
                ip_groups.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dynamicMatchConfigurations[].ipGroups[]")
            if _elements is not None:
                _elements.set_prop("ipAddressType", AAZStrType, ".ip_address_type")
                _elements.set_prop("ipPrefixes", AAZListType, ".ip_prefixes")
                _elements.set_prop("name", AAZStrType, ".name")

            ip_prefixes = _builder.get(".properties.dynamicMatchConfigurations[].ipGroups[].ipPrefixes")
            if ip_prefixes is not None:
                ip_prefixes.set_elements(AAZStrType, ".")

            port_groups = _builder.get(".properties.dynamicMatchConfigurations[].portGroups")
            if port_groups is not None:
                port_groups.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dynamicMatchConfigurations[].portGroups[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("ports", AAZListType, ".ports")

            ports = _builder.get(".properties.dynamicMatchConfigurations[].portGroups[].ports")
            if ports is not None:
                ports.set_elements(AAZStrType, ".")

            vlan_groups = _builder.get(".properties.dynamicMatchConfigurations[].vlanGroups")
            if vlan_groups is not None:
                vlan_groups.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.dynamicMatchConfigurations[].vlanGroups[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("vlans", AAZListType, ".vlans")

            vlans = _builder.get(".properties.dynamicMatchConfigurations[].vlanGroups[].vlans")
            if vlans is not None:
                vlans.set_elements(AAZStrType, ".")

            global_access_control_list_actions = _builder.get(".properties.globalAccessControlListActions")
            if global_access_control_list_actions is not None:
                global_access_control_list_actions.set_prop("enableCount", AAZStrType, ".enable_count")

            match_configurations = _builder.get(".properties.matchConfigurations")
            if match_configurations is not None:
                match_configurations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.matchConfigurations[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("ipAddressType", AAZStrType, ".ip_address_type")
                _elements.set_prop("matchConditions", AAZListType, ".match_conditions")
                _elements.set_prop("matchConfigurationName", AAZStrType, ".match_configuration_name")
                _elements.set_prop("sequenceNumber", AAZIntType, ".sequence_number")

            actions = _builder.get(".properties.matchConfigurations[].actions")
            if actions is not None:
                actions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.matchConfigurations[].actions[]")
            if _elements is not None:
                _elements.set_prop("counterName", AAZStrType, ".counter_name")
                _elements.set_prop("policeRateConfiguration", AAZObjectType, ".police_rate_configuration")
                _elements.set_prop("remarkComment", AAZStrType, ".remark_comment")
                _elements.set_prop("type", AAZStrType, ".type")

            police_rate_configuration = _builder.get(".properties.matchConfigurations[].actions[].policeRateConfiguration")
            if police_rate_configuration is not None:
                police_rate_configuration.set_prop("bitRate", AAZObjectType, ".bit_rate")
                police_rate_configuration.set_prop("burstSize", AAZObjectType, ".burst_size")

            bit_rate = _builder.get(".properties.matchConfigurations[].actions[].policeRateConfiguration.bitRate")
            if bit_rate is not None:
                bit_rate.set_prop("rate", AAZIntType, ".rate")
                bit_rate.set_prop("unit", AAZStrType, ".unit")

            burst_size = _builder.get(".properties.matchConfigurations[].actions[].policeRateConfiguration.burstSize")
            if burst_size is not None:
                burst_size.set_prop("size", AAZIntType, ".size")
                burst_size.set_prop("unit", AAZStrType, ".unit")

            match_conditions = _builder.get(".properties.matchConfigurations[].matchConditions")
            if match_conditions is not None:
                match_conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.matchConfigurations[].matchConditions[]")
            if _elements is not None:
                _elements.set_prop("dscpMarkings", AAZListType, ".dscp_markings")
                _elements.set_prop("etherTypes", AAZListType, ".ether_types")
                _elements.set_prop("fragments", AAZListType, ".fragments")
                _elements.set_prop("icmpConfiguration", AAZObjectType, ".icmp_configuration")
                _elements.set_prop("ipCondition", AAZObjectType, ".ip_condition")
                _elements.set_prop("ipLengths", AAZListType, ".ip_lengths")
                _elements.set_prop("portCondition", AAZObjectType, ".port_condition")
                _elements.set_prop("protocolNeighbors", AAZListType, ".protocol_neighbors")
                _elements.set_prop("protocolTypes", AAZListType, ".protocol_types")
                _elements.set_prop("ttlValues", AAZListType, ".ttl_values")
                _elements.set_prop("vlanMatchCondition", AAZObjectType, ".vlan_match_condition")

            dscp_markings = _builder.get(".properties.matchConfigurations[].matchConditions[].dscpMarkings")
            if dscp_markings is not None:
                dscp_markings.set_elements(AAZStrType, ".")

            ether_types = _builder.get(".properties.matchConfigurations[].matchConditions[].etherTypes")
            if ether_types is not None:
                ether_types.set_elements(AAZStrType, ".")

            fragments = _builder.get(".properties.matchConfigurations[].matchConditions[].fragments")
            if fragments is not None:
                fragments.set_elements(AAZStrType, ".")

            icmp_configuration = _builder.get(".properties.matchConfigurations[].matchConditions[].icmpConfiguration")
            if icmp_configuration is not None:
                icmp_configuration.set_prop("icmpTypes", AAZListType, ".icmp_types")

            icmp_types = _builder.get(".properties.matchConfigurations[].matchConditions[].icmpConfiguration.icmpTypes")
            if icmp_types is not None:
                icmp_types.set_elements(AAZStrType, ".")

            ip_condition = _builder.get(".properties.matchConfigurations[].matchConditions[].ipCondition")
            if ip_condition is not None:
                ip_condition.set_prop("ipGroupNames", AAZListType, ".ip_group_names")
                ip_condition.set_prop("ipPrefixValues", AAZListType, ".ip_prefix_values")
                ip_condition.set_prop("prefixType", AAZStrType, ".prefix_type")
                ip_condition.set_prop("type", AAZStrType, ".type")

            ip_group_names = _builder.get(".properties.matchConfigurations[].matchConditions[].ipCondition.ipGroupNames")
            if ip_group_names is not None:
                ip_group_names.set_elements(AAZStrType, ".")

            ip_prefix_values = _builder.get(".properties.matchConfigurations[].matchConditions[].ipCondition.ipPrefixValues")
            if ip_prefix_values is not None:
                ip_prefix_values.set_elements(AAZStrType, ".")

            ip_lengths = _builder.get(".properties.matchConfigurations[].matchConditions[].ipLengths")
            if ip_lengths is not None:
                ip_lengths.set_elements(AAZStrType, ".")

            port_condition = _builder.get(".properties.matchConfigurations[].matchConditions[].portCondition")
            if port_condition is not None:
                port_condition.set_prop("flags", AAZListType, ".flags")
                port_condition.set_prop("layer4Protocol", AAZStrType, ".layer4_protocol", typ_kwargs={"flags": {"required": True}})
                port_condition.set_prop("portGroupNames", AAZListType, ".port_group_names")
                port_condition.set_prop("portType", AAZStrType, ".port_type")
                port_condition.set_prop("ports", AAZListType, ".ports")

            flags = _builder.get(".properties.matchConfigurations[].matchConditions[].portCondition.flags")
            if flags is not None:
                flags.set_elements(AAZStrType, ".")

            port_group_names = _builder.get(".properties.matchConfigurations[].matchConditions[].portCondition.portGroupNames")
            if port_group_names is not None:
                port_group_names.set_elements(AAZStrType, ".")

            ports = _builder.get(".properties.matchConfigurations[].matchConditions[].portCondition.ports")
            if ports is not None:
                ports.set_elements(AAZStrType, ".")

            protocol_neighbors = _builder.get(".properties.matchConfigurations[].matchConditions[].protocolNeighbors")
            if protocol_neighbors is not None:
                protocol_neighbors.set_elements(AAZStrType, ".")

            protocol_types = _builder.get(".properties.matchConfigurations[].matchConditions[].protocolTypes")
            if protocol_types is not None:
                protocol_types.set_elements(AAZStrType, ".")

            ttl_values = _builder.get(".properties.matchConfigurations[].matchConditions[].ttlValues")
            if ttl_values is not None:
                ttl_values.set_elements(AAZStrType, ".")

            vlan_match_condition = _builder.get(".properties.matchConfigurations[].matchConditions[].vlanMatchCondition")
            if vlan_match_condition is not None:
                vlan_match_condition.set_prop("innerVlans", AAZListType, ".inner_vlans")
                vlan_match_condition.set_prop("vlanGroupNames", AAZListType, ".vlan_group_names")
                vlan_match_condition.set_prop("vlans", AAZListType, ".vlans")

            inner_vlans = _builder.get(".properties.matchConfigurations[].matchConditions[].vlanMatchCondition.innerVlans")
            if inner_vlans is not None:
                inner_vlans.set_elements(AAZStrType, ".")

            vlan_group_names = _builder.get(".properties.matchConfigurations[].matchConditions[].vlanMatchCondition.vlanGroupNames")
            if vlan_group_names is not None:
                vlan_group_names.set_elements(AAZStrType, ".")

            vlans = _builder.get(".properties.matchConfigurations[].matchConditions[].vlanMatchCondition.vlans")
            if vlans is not None:
                vlans.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.acl_type = AAZStrType(
                serialized_name="aclType",
            )
            properties.acls_url = AAZStrType(
                serialized_name="aclsUrl",
            )
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            properties.configuration_type = AAZStrType(
                serialized_name="configurationType",
                flags={"required": True},
            )
            properties.default_action = AAZStrType(
                serialized_name="defaultAction",
            )
            properties.device_role = AAZStrType(
                serialized_name="deviceRole",
            )
            properties.dynamic_match_configurations = AAZListType(
                serialized_name="dynamicMatchConfigurations",
            )
            properties.global_access_control_list_actions = AAZObjectType(
                serialized_name="globalAccessControlListActions",
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.last_synced_time = AAZStrType(
                serialized_name="lastSyncedTime",
                flags={"read_only": True},
            )
            properties.match_configurations = AAZListType(
                serialized_name="matchConfigurations",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            dynamic_match_configurations = cls._schema_on_200_201.properties.dynamic_match_configurations
            dynamic_match_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.dynamic_match_configurations.Element
            _element.ip_groups = AAZListType(
                serialized_name="ipGroups",
            )
            _element.port_groups = AAZListType(
                serialized_name="portGroups",
            )
            _element.vlan_groups = AAZListType(
                serialized_name="vlanGroups",
            )

            ip_groups = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.ip_groups
            ip_groups.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.ip_groups.Element
            _element.ip_address_type = AAZStrType(
                serialized_name="ipAddressType",
            )
            _element.ip_prefixes = AAZListType(
                serialized_name="ipPrefixes",
            )
            _element.name = AAZStrType()

            ip_prefixes = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.ip_groups.Element.ip_prefixes
            ip_prefixes.Element = AAZStrType()

            port_groups = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.port_groups
            port_groups.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.port_groups.Element
            _element.name = AAZStrType()
            _element.ports = AAZListType()

            ports = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.port_groups.Element.ports
            ports.Element = AAZStrType()

            vlan_groups = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.vlan_groups
            vlan_groups.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.vlan_groups.Element
            _element.name = AAZStrType()
            _element.vlans = AAZListType()

            vlans = cls._schema_on_200_201.properties.dynamic_match_configurations.Element.vlan_groups.Element.vlans
            vlans.Element = AAZStrType()

            global_access_control_list_actions = cls._schema_on_200_201.properties.global_access_control_list_actions
            global_access_control_list_actions.enable_count = AAZStrType(
                serialized_name="enableCount",
            )

            last_operation = cls._schema_on_200_201.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            match_configurations = cls._schema_on_200_201.properties.match_configurations
            match_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.match_configurations.Element
            _element.actions = AAZListType()
            _element.ip_address_type = AAZStrType(
                serialized_name="ipAddressType",
            )
            _element.match_conditions = AAZListType(
                serialized_name="matchConditions",
            )
            _element.match_configuration_name = AAZStrType(
                serialized_name="matchConfigurationName",
            )
            _element.sequence_number = AAZIntType(
                serialized_name="sequenceNumber",
            )

            actions = cls._schema_on_200_201.properties.match_configurations.Element.actions
            actions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.match_configurations.Element.actions.Element
            _element.counter_name = AAZStrType(
                serialized_name="counterName",
            )
            _element.police_rate_configuration = AAZObjectType(
                serialized_name="policeRateConfiguration",
            )
            _element.remark_comment = AAZStrType(
                serialized_name="remarkComment",
            )
            _element.type = AAZStrType()

            police_rate_configuration = cls._schema_on_200_201.properties.match_configurations.Element.actions.Element.police_rate_configuration
            police_rate_configuration.bit_rate = AAZObjectType(
                serialized_name="bitRate",
            )
            police_rate_configuration.burst_size = AAZObjectType(
                serialized_name="burstSize",
            )

            bit_rate = cls._schema_on_200_201.properties.match_configurations.Element.actions.Element.police_rate_configuration.bit_rate
            bit_rate.rate = AAZIntType()
            bit_rate.unit = AAZStrType()

            burst_size = cls._schema_on_200_201.properties.match_configurations.Element.actions.Element.police_rate_configuration.burst_size
            burst_size.size = AAZIntType()
            burst_size.unit = AAZStrType()

            match_conditions = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions
            match_conditions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element
            _element.dscp_markings = AAZListType(
                serialized_name="dscpMarkings",
            )
            _element.ether_types = AAZListType(
                serialized_name="etherTypes",
            )
            _element.fragments = AAZListType()
            _element.icmp_configuration = AAZObjectType(
                serialized_name="icmpConfiguration",
            )
            _element.ip_condition = AAZObjectType(
                serialized_name="ipCondition",
            )
            _element.ip_lengths = AAZListType(
                serialized_name="ipLengths",
            )
            _element.port_condition = AAZObjectType(
                serialized_name="portCondition",
            )
            _element.protocol_neighbors = AAZListType(
                serialized_name="protocolNeighbors",
            )
            _element.protocol_types = AAZListType(
                serialized_name="protocolTypes",
            )
            _element.ttl_values = AAZListType(
                serialized_name="ttlValues",
            )
            _element.vlan_match_condition = AAZObjectType(
                serialized_name="vlanMatchCondition",
            )

            dscp_markings = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.dscp_markings
            dscp_markings.Element = AAZStrType()

            ether_types = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ether_types
            ether_types.Element = AAZStrType()

            fragments = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.fragments
            fragments.Element = AAZStrType()

            icmp_configuration = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.icmp_configuration
            icmp_configuration.icmp_types = AAZListType(
                serialized_name="icmpTypes",
            )

            icmp_types = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.icmp_configuration.icmp_types
            icmp_types.Element = AAZStrType()

            ip_condition = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ip_condition
            ip_condition.ip_group_names = AAZListType(
                serialized_name="ipGroupNames",
            )
            ip_condition.ip_prefix_values = AAZListType(
                serialized_name="ipPrefixValues",
            )
            ip_condition.prefix_type = AAZStrType(
                serialized_name="prefixType",
            )
            ip_condition.type = AAZStrType()

            ip_group_names = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ip_condition.ip_group_names
            ip_group_names.Element = AAZStrType()

            ip_prefix_values = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ip_condition.ip_prefix_values
            ip_prefix_values.Element = AAZStrType()

            ip_lengths = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ip_lengths
            ip_lengths.Element = AAZStrType()

            port_condition = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.port_condition
            port_condition.flags = AAZListType()
            port_condition.layer4_protocol = AAZStrType(
                serialized_name="layer4Protocol",
                flags={"required": True},
            )
            port_condition.port_group_names = AAZListType(
                serialized_name="portGroupNames",
            )
            port_condition.port_type = AAZStrType(
                serialized_name="portType",
            )
            port_condition.ports = AAZListType()

            flags = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.port_condition.flags
            flags.Element = AAZStrType()

            port_group_names = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.port_condition.port_group_names
            port_group_names.Element = AAZStrType()

            ports = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.port_condition.ports
            ports.Element = AAZStrType()

            protocol_neighbors = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.protocol_neighbors
            protocol_neighbors.Element = AAZStrType()

            protocol_types = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.protocol_types
            protocol_types.Element = AAZStrType()

            ttl_values = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.ttl_values
            ttl_values.Element = AAZStrType()

            vlan_match_condition = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition
            vlan_match_condition.inner_vlans = AAZListType(
                serialized_name="innerVlans",
            )
            vlan_match_condition.vlan_group_names = AAZListType(
                serialized_name="vlanGroupNames",
            )
            vlan_match_condition.vlans = AAZListType()

            inner_vlans = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.inner_vlans
            inner_vlans.Element = AAZStrType()

            vlan_group_names = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlan_group_names
            vlan_group_names.Element = AAZStrType()

            vlans = cls._schema_on_200_201.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlans
            vlans.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
