# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric l3domain create",
)
class Create(AAZCommand):
    """Create a L3 Isolation Domain resource.

    :example: Create a L3 Isolation Domain
        az networkfabric l3domain create --resource-group "example-rg" --resource-name "example-l3domain" --location "westus3" --nf-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabricName" --redistribute-connected-subnets "True" --redistribute-static-routes "True" --aggregate-route-configuration "{ipv4Routes:[{prefix:'10.0.0.1/28'},{prefix:'10.0.0.2/28'}],ipv6Routes:[{prefix:'2fff::/64'},{prefix:'2fff::/65'}]}" --connected-subnet-route-policy "{exportRoutePolicyId:'exportRoutePolicyId'}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric l3domain create --connected-subnet-route-policy ??
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/l3isolationdomains/{}", "2023-02-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the L3 Isolation Domain",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="Location of Azure region",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.aggregate_route_configuration = AAZObjectArg(
            options=["--aggregate-route-configuration"],
            arg_group="Properties",
            help="List of Ipv4 and Ipv6 route configurations.",
        )
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.connected_subnet_route_policy = AAZObjectArg(
            options=["--connected-subnet-route-policy"],
            arg_group="Properties",
            help="Connected Subnet RoutePolicy",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="L3 Isolation Domain description.",
        )
        _args_schema.nf_id = AAZStrArg(
            options=["--nf-id"],
            arg_group="Properties",
            help="Resource ID of the Network Fabric resource",
        )
        _args_schema.redistribute_connected_subnets = AAZStrArg(
            options=["--redistribute-connected-subnets"],
            arg_group="Properties",
            help="Advertise Connected Subnets. Default Value is True. Ex: \"True\" | \"False\".",
            enum={"False": "False", "True": "True"},
        )
        _args_schema.redistribute_static_routes = AAZStrArg(
            options=["--redistribute-static-routes"],
            arg_group="Properties",
            help="Advertise Static Routes. Default Value is False. Ex: \"True\" | \"False\".",
            enum={"False": "False", "True": "True"},
        )

        aggregate_route_configuration = cls._args_schema.aggregate_route_configuration
        aggregate_route_configuration.ipv4_routes = AAZListArg(
            options=["ipv4-routes"],
            help="List of Ipv4Route prefixes.",
        )
        aggregate_route_configuration.ipv6_routes = AAZListArg(
            options=["ipv6-routes"],
            help="List of Ipv6Routes prefixes.",
        )

        ipv4_routes = cls._args_schema.aggregate_route_configuration.ipv4_routes
        ipv4_routes.Element = AAZObjectArg()

        _element = cls._args_schema.aggregate_route_configuration.ipv4_routes.Element
        _element.prefix = AAZStrArg(
            options=["prefix"],
            help="IPv4 Prefix of the aggregate Ipv4Route.",
        )

        ipv6_routes = cls._args_schema.aggregate_route_configuration.ipv6_routes
        ipv6_routes.Element = AAZObjectArg()

        _element = cls._args_schema.aggregate_route_configuration.ipv6_routes.Element
        _element.prefix = AAZStrArg(
            options=["prefix"],
            help="IPv6 Prefix of the aggregate IPv6 Route.",
        )

        connected_subnet_route_policy = cls._args_schema.connected_subnet_route_policy
        connected_subnet_route_policy.export_route_policy_id = AAZStrArg(
            options=["export-route-policy-id"],
            help="exportRoutePolicyId value.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.L3IsolationDomainsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class L3IsolationDomainsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "l3IsolationDomainName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("aggregateRouteConfiguration", AAZObjectType, ".aggregate_route_configuration")
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("connectedSubnetRoutePolicy", AAZObjectType, ".connected_subnet_route_policy")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("networkFabricId", AAZStrType, ".nf_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("redistributeConnectedSubnets", AAZStrType, ".redistribute_connected_subnets")
                properties.set_prop("redistributeStaticRoutes", AAZStrType, ".redistribute_static_routes")

            aggregate_route_configuration = _builder.get(".properties.aggregateRouteConfiguration")
            if aggregate_route_configuration is not None:
                aggregate_route_configuration.set_prop("ipv4Routes", AAZListType, ".ipv4_routes")
                aggregate_route_configuration.set_prop("ipv6Routes", AAZListType, ".ipv6_routes")

            ipv4_routes = _builder.get(".properties.aggregateRouteConfiguration.ipv4Routes")
            if ipv4_routes is not None:
                ipv4_routes.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.aggregateRouteConfiguration.ipv4Routes[]")
            if _elements is not None:
                _elements.set_prop("prefix", AAZStrType, ".prefix")

            ipv6_routes = _builder.get(".properties.aggregateRouteConfiguration.ipv6Routes")
            if ipv6_routes is not None:
                ipv6_routes.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.aggregateRouteConfiguration.ipv6Routes[]")
            if _elements is not None:
                _elements.set_prop("prefix", AAZStrType, ".prefix")

            connected_subnet_route_policy = _builder.get(".properties.connectedSubnetRoutePolicy")
            if connected_subnet_route_policy is not None:
                connected_subnet_route_policy.set_prop("exportRoutePolicyId", AAZStrType, ".export_route_policy_id")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.aggregate_route_configuration = AAZObjectType(
                serialized_name="aggregateRouteConfiguration",
            )
            properties.annotation = AAZStrType()
            properties.connected_subnet_route_policy = AAZObjectType(
                serialized_name="connectedSubnetRoutePolicy",
            )
            properties.description = AAZStrType()
            properties.disabled_on_resources = AAZListType(
                serialized_name="disabledOnResources",
                flags={"read_only": True},
            )
            properties.network_fabric_id = AAZStrType(
                serialized_name="networkFabricId",
                flags={"required": True},
            )
            properties.option_b_disabled_on_resources = AAZListType(
                serialized_name="optionBDisabledOnResources",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.redistribute_connected_subnets = AAZStrType(
                serialized_name="redistributeConnectedSubnets",
            )
            properties.redistribute_static_routes = AAZStrType(
                serialized_name="redistributeStaticRoutes",
            )

            aggregate_route_configuration = cls._schema_on_200_201.properties.aggregate_route_configuration
            aggregate_route_configuration.ipv4_routes = AAZListType(
                serialized_name="ipv4Routes",
            )
            aggregate_route_configuration.ipv6_routes = AAZListType(
                serialized_name="ipv6Routes",
            )

            ipv4_routes = cls._schema_on_200_201.properties.aggregate_route_configuration.ipv4_routes
            ipv4_routes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.aggregate_route_configuration.ipv4_routes.Element
            _element.prefix = AAZStrType()

            ipv6_routes = cls._schema_on_200_201.properties.aggregate_route_configuration.ipv6_routes
            ipv6_routes.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.aggregate_route_configuration.ipv6_routes.Element
            _element.prefix = AAZStrType()

            connected_subnet_route_policy = cls._schema_on_200_201.properties.connected_subnet_route_policy
            connected_subnet_route_policy.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            connected_subnet_route_policy.export_route_policy_id = AAZStrType(
                serialized_name="exportRoutePolicyId",
            )

            disabled_on_resources = cls._schema_on_200_201.properties.disabled_on_resources
            disabled_on_resources.Element = AAZStrType()

            option_b_disabled_on_resources = cls._schema_on_200_201.properties.option_b_disabled_on_resources
            option_b_disabled_on_resources.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
