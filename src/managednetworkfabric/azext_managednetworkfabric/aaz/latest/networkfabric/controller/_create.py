# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric controller create",
)
class Create(AAZCommand):
    """Create a Network Fabric Controller resource

    :example: Create a Network Fabric Controller. For RE-PUT with 'mrg' parameter, both name and location properties are required.
        az networkfabric controller create --resource-group "example-rg" --location "westus3"  --resource-name "example-nfc" --ipv4-address-space "10.0.0.0/19" --is-workload-management-network-enabled "True" --nfc-sku "Basic" --infra-er-connections "[{expressRouteCircuitId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.Network/expressRouteCircuits/example-expressRouteCircuit',expressRouteAuthorizationKey:'auth-key'},{expressRouteCircuitId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.Network/expressRouteCircuits/example-expressRouteCircuit',expressRouteAuthorizationKey:'auth-key'}]" --workload-er-connections "[{expressRouteCircuitId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.Network/expressRouteCircuits/example-expressRouteCircuit',expressRouteAuthorizationKey:'auth-key'},{expressRouteCircuitId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.Network/expressRouteCircuits/example-expressRouteCircuit',expressRouteAuthorizationKey:'auth-key'}]" --mrg name=example-mrgName location=eastus

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric controller create --infra-er-connections "??"
    """

    _aaz_info = {
        "version": "2023-06-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkfabriccontrollers/{}", "2023-06-15"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Fabric Controller.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Body",
            help="Location of Azure region",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Description for underlying resource.",
        )
        _args_schema.infra_er_connections = AAZListArg(
            options=["--infra-er-connections"],
            arg_group="Properties",
            help="Infra ER connections to manage infra resources.",
        )
        _args_schema.ipv4_address_space = AAZStrArg(
            options=["--ipv4-address-space"],
            arg_group="Properties",
            help="IPv4 Network Fabric Controller Address Space.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.ipv6_address_space = AAZStrArg(
            options=["--ipv6-address-space"],
            arg_group="Properties",
            help="IPv6 Network Fabric Controller Address Space.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.is_workload_management_network_enabled = AAZStrArg(
            options=["--is-workload-management-network-enabled"],
            arg_group="Properties",
            help="A workload management network is required for all the tenant (workload) traffic. This traffic is only dedicated for Tenant workloads which are required to access internet or any other MSFT/Public endpoints. Default value is True.",
            enum={"False": "False", "True": "True"},
        )
        _args_schema.managed_resource_group_configuration = AAZObjectArg(
            options=["--mrg", "--managed-resource-group-configuration"],
            arg_group="Properties",
            help="Managed Resource Group configuration properties.",
        )
        _args_schema.nfc_sku = AAZStrArg(
            options=["--nfc-sku"],
            arg_group="Properties",
            help="Network Fabric Controller SKU.",
            enum={"Basic": "Basic", "HighPerformance": "HighPerformance", "Standard": "Standard"},
        )
        _args_schema.workload_er_connections = AAZListArg(
            options=["--workload-er-connections"],
            arg_group="Properties",
            help="workload management Network for hosting Proxy, NTP and DNS for workloads.",
        )

        infra_er_connections = cls._args_schema.infra_er_connections
        infra_er_connections.Element = AAZObjectArg()
        cls._build_args_express_route_connection_information_create(infra_er_connections.Element)

        managed_resource_group_configuration = cls._args_schema.managed_resource_group_configuration
        managed_resource_group_configuration.location = AAZStrArg(
            options=["location"],
            help="Managed resource group location.",
        )
        managed_resource_group_configuration.name = AAZStrArg(
            options=["name"],
            help="The NFC service will be hosted in a Managed resource group.",
        )

        workload_er_connections = cls._args_schema.workload_er_connections
        workload_er_connections.Element = AAZObjectArg()
        cls._build_args_express_route_connection_information_create(workload_er_connections.Element)
        return cls._args_schema

    _args_express_route_connection_information_create = None

    @classmethod
    def _build_args_express_route_connection_information_create(cls, _schema):
        if cls._args_express_route_connection_information_create is not None:
            _schema.express_route_authorization_key = cls._args_express_route_connection_information_create.express_route_authorization_key
            _schema.express_route_circuit_id = cls._args_express_route_connection_information_create.express_route_circuit_id
            return

        cls._args_express_route_connection_information_create = AAZObjectArg()

        express_route_connection_information_create = cls._args_express_route_connection_information_create
        express_route_connection_information_create.express_route_authorization_key = AAZStrArg(
            options=["express-route-authorization-key"],
            help="Authorization key for the circuit, must be of type Microsoft.Network/expressRouteCircuits/authorizations. The Auth Key is a mandatory attribute.",
            required=True,
        )
        express_route_connection_information_create.express_route_circuit_id = AAZStrArg(
            options=["express-route-circuit-id"],
            help="The express route circuit Azure resource ID, must be of type Microsoft.Network/expressRouteCircuits/circuitName. The ExpressRoute Circuit is a mandatory attribute.",
            required=True,
        )

        _schema.express_route_authorization_key = cls._args_express_route_connection_information_create.express_route_authorization_key
        _schema.express_route_circuit_id = cls._args_express_route_connection_information_create.express_route_circuit_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkFabricControllersCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkFabricControllersCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/{networkFabricControllerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricControllerName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("infrastructureExpressRouteConnections", AAZListType, ".infra_er_connections")
                properties.set_prop("ipv4AddressSpace", AAZStrType, ".ipv4_address_space")
                properties.set_prop("ipv6AddressSpace", AAZStrType, ".ipv6_address_space")
                properties.set_prop("isWorkloadManagementNetworkEnabled", AAZStrType, ".is_workload_management_network_enabled")
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType, ".managed_resource_group_configuration")
                properties.set_prop("nfcSku", AAZStrType, ".nfc_sku")
                properties.set_prop("workloadExpressRouteConnections", AAZListType, ".workload_er_connections")

            infrastructure_express_route_connections = _builder.get(".properties.infrastructureExpressRouteConnections")
            if infrastructure_express_route_connections is not None:
                _CreateHelper._build_schema_express_route_connection_information_create(infrastructure_express_route_connections.set_elements(AAZObjectType, "."))

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("location", AAZStrType, ".location")
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".name")

            workload_express_route_connections = _builder.get(".properties.workloadExpressRouteConnections")
            if workload_express_route_connections is not None:
                _CreateHelper._build_schema_express_route_connection_information_create(workload_express_route_connections.set_elements(AAZObjectType, "."))

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.annotation = AAZStrType()
            properties.infrastructure_express_route_connections = AAZListType(
                serialized_name="infrastructureExpressRouteConnections",
            )
            properties.infrastructure_services = AAZObjectType(
                serialized_name="infrastructureServices",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_controller_services_read(properties.infrastructure_services)
            properties.ipv4_address_space = AAZStrType(
                serialized_name="ipv4AddressSpace",
            )
            properties.ipv6_address_space = AAZStrType(
                serialized_name="ipv6AddressSpace",
            )
            properties.is_workload_management_network_enabled = AAZStrType(
                serialized_name="isWorkloadManagementNetworkEnabled",
            )
            properties.managed_resource_group_configuration = AAZObjectType(
                serialized_name="managedResourceGroupConfiguration",
            )
            properties.network_fabric_ids = AAZListType(
                serialized_name="networkFabricIds",
                flags={"read_only": True},
            )
            properties.nfc_sku = AAZStrType(
                serialized_name="nfcSku",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.tenant_internet_gateway_ids = AAZListType(
                serialized_name="tenantInternetGatewayIds",
                flags={"read_only": True},
            )
            properties.workload_express_route_connections = AAZListType(
                serialized_name="workloadExpressRouteConnections",
            )
            properties.workload_management_network = AAZBoolType(
                serialized_name="workloadManagementNetwork",
                flags={"read_only": True},
            )
            properties.workload_services = AAZObjectType(
                serialized_name="workloadServices",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_controller_services_read(properties.workload_services)

            infrastructure_express_route_connections = cls._schema_on_200_201.properties.infrastructure_express_route_connections
            infrastructure_express_route_connections.Element = AAZObjectType()
            _CreateHelper._build_schema_express_route_connection_information_read(infrastructure_express_route_connections.Element)

            managed_resource_group_configuration = cls._schema_on_200_201.properties.managed_resource_group_configuration
            managed_resource_group_configuration.location = AAZStrType()
            managed_resource_group_configuration.name = AAZStrType()

            network_fabric_ids = cls._schema_on_200_201.properties.network_fabric_ids
            network_fabric_ids.Element = AAZStrType()

            tenant_internet_gateway_ids = cls._schema_on_200_201.properties.tenant_internet_gateway_ids
            tenant_internet_gateway_ids.Element = AAZStrType()

            workload_express_route_connections = cls._schema_on_200_201.properties.workload_express_route_connections
            workload_express_route_connections.Element = AAZObjectType()
            _CreateHelper._build_schema_express_route_connection_information_read(workload_express_route_connections.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_express_route_connection_information_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("expressRouteAuthorizationKey", AAZStrType, ".express_route_authorization_key", typ_kwargs={"flags": {"required": True, "secret": True}})
        _builder.set_prop("expressRouteCircuitId", AAZStrType, ".express_route_circuit_id", typ_kwargs={"flags": {"required": True}})

    _schema_controller_services_read = None

    @classmethod
    def _build_schema_controller_services_read(cls, _schema):
        if cls._schema_controller_services_read is not None:
            _schema.ipv4_address_spaces = cls._schema_controller_services_read.ipv4_address_spaces
            _schema.ipv6_address_spaces = cls._schema_controller_services_read.ipv6_address_spaces
            return

        cls._schema_controller_services_read = _schema_controller_services_read = AAZObjectType(
            flags={"read_only": True}
        )

        controller_services_read = _schema_controller_services_read
        controller_services_read.ipv4_address_spaces = AAZListType(
            serialized_name="ipv4AddressSpaces",
        )
        controller_services_read.ipv6_address_spaces = AAZListType(
            serialized_name="ipv6AddressSpaces",
        )

        ipv4_address_spaces = _schema_controller_services_read.ipv4_address_spaces
        ipv4_address_spaces.Element = AAZStrType()

        ipv6_address_spaces = _schema_controller_services_read.ipv6_address_spaces
        ipv6_address_spaces.Element = AAZStrType()

        _schema.ipv4_address_spaces = cls._schema_controller_services_read.ipv4_address_spaces
        _schema.ipv6_address_spaces = cls._schema_controller_services_read.ipv6_address_spaces

    _schema_express_route_connection_information_read = None

    @classmethod
    def _build_schema_express_route_connection_information_read(cls, _schema):
        if cls._schema_express_route_connection_information_read is not None:
            _schema.express_route_authorization_key = cls._schema_express_route_connection_information_read.express_route_authorization_key
            _schema.express_route_circuit_id = cls._schema_express_route_connection_information_read.express_route_circuit_id
            return

        cls._schema_express_route_connection_information_read = _schema_express_route_connection_information_read = AAZObjectType()

        express_route_connection_information_read = _schema_express_route_connection_information_read
        express_route_connection_information_read.express_route_authorization_key = AAZStrType(
            serialized_name="expressRouteAuthorizationKey",
            flags={"required": True, "secret": True},
        )
        express_route_connection_information_read.express_route_circuit_id = AAZStrType(
            serialized_name="expressRouteCircuitId",
            flags={"required": True},
        )

        _schema.express_route_authorization_key = cls._schema_express_route_connection_information_read.express_route_authorization_key
        _schema.express_route_circuit_id = cls._schema_express_route_connection_information_read.express_route_circuit_id


__all__ = ["Create"]
