# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric controller wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkfabriccontrollers/{}", "2023-06-15"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Fabric Controller.",
            required=True,
            id_part="name",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkFabricControllersGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class NetworkFabricControllersGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/{networkFabricControllerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricControllerName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-06-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.annotation = AAZStrType()
            properties.infrastructure_express_route_connections = AAZListType(
                serialized_name="infrastructureExpressRouteConnections",
            )
            properties.infrastructure_services = AAZObjectType(
                serialized_name="infrastructureServices",
                flags={"read_only": True},
            )
            _WaitHelper._build_schema_controller_services_read(properties.infrastructure_services)
            properties.ipv4_address_space = AAZStrType(
                serialized_name="ipv4AddressSpace",
            )
            properties.ipv6_address_space = AAZStrType(
                serialized_name="ipv6AddressSpace",
            )
            properties.is_workload_management_network_enabled = AAZStrType(
                serialized_name="isWorkloadManagementNetworkEnabled",
            )
            properties.managed_resource_group_configuration = AAZObjectType(
                serialized_name="managedResourceGroupConfiguration",
            )
            properties.network_fabric_ids = AAZListType(
                serialized_name="networkFabricIds",
                flags={"read_only": True},
            )
            properties.nfc_sku = AAZStrType(
                serialized_name="nfcSku",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.tenant_internet_gateway_ids = AAZListType(
                serialized_name="tenantInternetGatewayIds",
                flags={"read_only": True},
            )
            properties.workload_express_route_connections = AAZListType(
                serialized_name="workloadExpressRouteConnections",
            )
            properties.workload_management_network = AAZBoolType(
                serialized_name="workloadManagementNetwork",
                flags={"read_only": True},
            )
            properties.workload_services = AAZObjectType(
                serialized_name="workloadServices",
                flags={"read_only": True},
            )
            _WaitHelper._build_schema_controller_services_read(properties.workload_services)

            infrastructure_express_route_connections = cls._schema_on_200.properties.infrastructure_express_route_connections
            infrastructure_express_route_connections.Element = AAZObjectType()
            _WaitHelper._build_schema_express_route_connection_information_read(infrastructure_express_route_connections.Element)

            managed_resource_group_configuration = cls._schema_on_200.properties.managed_resource_group_configuration
            managed_resource_group_configuration.location = AAZStrType()
            managed_resource_group_configuration.name = AAZStrType()

            network_fabric_ids = cls._schema_on_200.properties.network_fabric_ids
            network_fabric_ids.Element = AAZStrType()

            tenant_internet_gateway_ids = cls._schema_on_200.properties.tenant_internet_gateway_ids
            tenant_internet_gateway_ids.Element = AAZStrType()

            workload_express_route_connections = cls._schema_on_200.properties.workload_express_route_connections
            workload_express_route_connections.Element = AAZObjectType()
            _WaitHelper._build_schema_express_route_connection_information_read(workload_express_route_connections.Element)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_controller_services_read = None

    @classmethod
    def _build_schema_controller_services_read(cls, _schema):
        if cls._schema_controller_services_read is not None:
            _schema.ipv4_address_spaces = cls._schema_controller_services_read.ipv4_address_spaces
            _schema.ipv6_address_spaces = cls._schema_controller_services_read.ipv6_address_spaces
            return

        cls._schema_controller_services_read = _schema_controller_services_read = AAZObjectType(
            flags={"read_only": True}
        )

        controller_services_read = _schema_controller_services_read
        controller_services_read.ipv4_address_spaces = AAZListType(
            serialized_name="ipv4AddressSpaces",
        )
        controller_services_read.ipv6_address_spaces = AAZListType(
            serialized_name="ipv6AddressSpaces",
        )

        ipv4_address_spaces = _schema_controller_services_read.ipv4_address_spaces
        ipv4_address_spaces.Element = AAZStrType()

        ipv6_address_spaces = _schema_controller_services_read.ipv6_address_spaces
        ipv6_address_spaces.Element = AAZStrType()

        _schema.ipv4_address_spaces = cls._schema_controller_services_read.ipv4_address_spaces
        _schema.ipv6_address_spaces = cls._schema_controller_services_read.ipv6_address_spaces

    _schema_express_route_connection_information_read = None

    @classmethod
    def _build_schema_express_route_connection_information_read(cls, _schema):
        if cls._schema_express_route_connection_information_read is not None:
            _schema.express_route_authorization_key = cls._schema_express_route_connection_information_read.express_route_authorization_key
            _schema.express_route_circuit_id = cls._schema_express_route_connection_information_read.express_route_circuit_id
            return

        cls._schema_express_route_connection_information_read = _schema_express_route_connection_information_read = AAZObjectType()

        express_route_connection_information_read = _schema_express_route_connection_information_read
        express_route_connection_information_read.express_route_authorization_key = AAZStrType(
            serialized_name="expressRouteAuthorizationKey",
            flags={"required": True, "secret": True},
        )
        express_route_connection_information_read.express_route_circuit_id = AAZStrType(
            serialized_name="expressRouteCircuitId",
            flags={"required": True},
        )

        _schema.express_route_authorization_key = cls._schema_express_route_connection_information_read.express_route_authorization_key
        _schema.express_route_circuit_id = cls._schema_express_route_connection_information_read.express_route_circuit_id


__all__ = ["Wait"]
