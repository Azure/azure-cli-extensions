# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric internetgatewayrule create",
)
class Create(AAZCommand):
    """Create an Internet Gateway Rule resource

    :example: Create a Internet Gateway Rule
        az networkfabric internetgatewayrule create --resource-group "example-rg" --location "westus3" --resource-name "example-internetgatewayrule" --rule-properties "{action:Allow,addressList:['10.10.10.10']}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric internetgatewayrule create --rule-properties "??"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/internetgatewayrules/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Internet Gateway rule.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.rule_properties = AAZObjectArg(
            options=["--rule-properties"],
            arg_group="Properties",
            help="Rules for the InternetGateways",
            required=True,
        )

        rule_properties = cls._args_schema.rule_properties
        rule_properties.action = AAZStrArg(
            options=["action"],
            help="Specify action.",
            required=True,
            enum={"Allow": "Allow", "Deny": "Deny"},
        )
        rule_properties.address_list = AAZListArg(
            options=["address-list"],
            help="List of Addresses to be allowed or denied.",
        )
        rule_properties.condition = AAZStrArg(
            options=["condition"],
            help="Specify rule condition.",
            enum={"And": "And", "Or": "Or"},
        )
        rule_properties.destination_address_list = AAZListArg(
            options=["destination-address-list"],
            help="List of Addresses to be allowed or denied.",
        )
        rule_properties.header_address_list = AAZListArg(
            options=["header-address-list"],
            help="List of header Name and source addresses associated with the header.",
        )
        rule_properties.source_address_list = AAZListArg(
            options=["source-address-list"],
            help="List of source IPv4 and IPv6 address to be allowed or denied.",
        )

        address_list = cls._args_schema.rule_properties.address_list
        address_list.Element = AAZStrArg()

        destination_address_list = cls._args_schema.rule_properties.destination_address_list
        destination_address_list.Element = AAZStrArg()

        header_address_list = cls._args_schema.rule_properties.header_address_list
        header_address_list.Element = AAZObjectArg()

        _element = cls._args_schema.rule_properties.header_address_list.Element
        _element.address_list = AAZListArg(
            options=["address-list"],
            help="List of source remote IP to be allowed or denied.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _element.header_name = AAZStrArg(
            options=["header-name"],
            help="Name of the header.",
        )

        address_list = cls._args_schema.rule_properties.header_address_list.Element.address_list
        address_list.Element = AAZStrArg()

        source_address_list = cls._args_schema.rule_properties.source_address_list
        source_address_list.Element = AAZStrArg()

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.InternetGatewayRulesCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class InternetGatewayRulesCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/internetGatewayRules/{internetGatewayRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "internetGatewayRuleName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("ruleProperties", AAZObjectType, ".rule_properties", typ_kwargs={"flags": {"required": True}})

            rule_properties = _builder.get(".properties.ruleProperties")
            if rule_properties is not None:
                rule_properties.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                rule_properties.set_prop("addressList", AAZListType, ".address_list")
                rule_properties.set_prop("condition", AAZStrType, ".condition")
                rule_properties.set_prop("destinationAddressList", AAZListType, ".destination_address_list")
                rule_properties.set_prop("headerAddressList", AAZListType, ".header_address_list")
                rule_properties.set_prop("sourceAddressList", AAZListType, ".source_address_list")

            address_list = _builder.get(".properties.ruleProperties.addressList")
            if address_list is not None:
                address_list.set_elements(AAZStrType, ".")

            destination_address_list = _builder.get(".properties.ruleProperties.destinationAddressList")
            if destination_address_list is not None:
                destination_address_list.set_elements(AAZStrType, ".")

            header_address_list = _builder.get(".properties.ruleProperties.headerAddressList")
            if header_address_list is not None:
                header_address_list.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.ruleProperties.headerAddressList[]")
            if _elements is not None:
                _elements.set_prop("addressList", AAZListType, ".address_list")
                _elements.set_prop("headerName", AAZStrType, ".header_name")

            address_list = _builder.get(".properties.ruleProperties.headerAddressList[].addressList")
            if address_list is not None:
                address_list.set_elements(AAZStrType, ".")

            source_address_list = _builder.get(".properties.ruleProperties.sourceAddressList")
            if source_address_list is not None:
                source_address_list.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.annotation = AAZStrType()
            properties.internet_gateway_ids = AAZListType(
                serialized_name="internetGatewayIds",
                flags={"read_only": True},
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.rule_properties = AAZObjectType(
                serialized_name="ruleProperties",
                flags={"required": True},
            )

            internet_gateway_ids = cls._schema_on_200_201.properties.internet_gateway_ids
            internet_gateway_ids.Element = AAZStrType()

            last_operation = cls._schema_on_200_201.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            rule_properties = cls._schema_on_200_201.properties.rule_properties
            rule_properties.action = AAZStrType(
                flags={"required": True},
            )
            rule_properties.address_list = AAZListType(
                serialized_name="addressList",
            )
            rule_properties.condition = AAZStrType()
            rule_properties.destination_address_list = AAZListType(
                serialized_name="destinationAddressList",
            )
            rule_properties.header_address_list = AAZListType(
                serialized_name="headerAddressList",
            )
            rule_properties.source_address_list = AAZListType(
                serialized_name="sourceAddressList",
            )

            address_list = cls._schema_on_200_201.properties.rule_properties.address_list
            address_list.Element = AAZStrType()

            destination_address_list = cls._schema_on_200_201.properties.rule_properties.destination_address_list
            destination_address_list.Element = AAZStrType()

            header_address_list = cls._schema_on_200_201.properties.rule_properties.header_address_list
            header_address_list.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.rule_properties.header_address_list.Element
            _element.address_list = AAZListType(
                serialized_name="addressList",
            )
            _element.header_name = AAZStrType(
                serialized_name="headerName",
            )

            address_list = cls._schema_on_200_201.properties.rule_properties.header_address_list.Element.address_list
            address_list.Element = AAZStrType()

            source_address_list = cls._schema_on_200_201.properties.rule_properties.source_address_list
            source_address_list.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
