# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric nni create",
)
class Create(AAZCommand):
    """Create a Network To Network Interconnect resource.

    :example: Create a Network To Network Interconnect
        az networkfabric nni create --resource-group "example-rg" --fabric "example-fabric" --resource-name "example-nni" --nni-type "CE" --is-management-type "True" --use-option-b "True" --layer2-configuration "{portCount:3,mtu:1500}" --layer3-configuration "{importRoutePolicyId:'importRoutePolicyId',exportRoutePolicyId:'exportRoutePolicyId',peerASN:28,vlanId:501,primaryIpv4Prefix:'172.31.0.0/31',secondaryIpv4Prefix:'172.31.0.20/31'}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric nni create --layer2-configuration ??
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkfabrics/{}/networktonetworkinterconnects/{}", "2023-02-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric", "--fabric-name"],
            help="Name of the Network Fabric.",
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the NetworkToNetworkInterconnect Name",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.is_management_type = AAZStrArg(
            options=["--is-management-type"],
            arg_group="Properties",
            help="Configuration to use NNI for Infrastructure Management. Example: True/False.",
            enum={"False": "False", "True": "True"},
        )
        _args_schema.layer2_configuration = AAZObjectArg(
            options=["--layer2-configuration"],
            arg_group="Properties",
            help="Common properties for Layer2Configuration.",
        )
        _args_schema.layer3_configuration = AAZObjectArg(
            options=["--layer3-configuration"],
            arg_group="Properties",
            help="Common properties for Layer3Configuration.",
        )
        _args_schema.nni_type = AAZStrArg(
            options=["--nni-type"],
            arg_group="Properties",
            help="Type of NNI used. Example: CE | NPB",
            enum={"CE": "CE", "NPB": "NPB"},
        )
        _args_schema.use_option_b = AAZStrArg(
            options=["--use-option-b"],
            arg_group="Properties",
            help="Parameter to configure option B for NNI. If set to True, Layer3 configuration is mandatory.",
            enum={"False": "False", "True": "True"},
        )

        layer2_configuration = cls._args_schema.layer2_configuration
        layer2_configuration.mtu = AAZIntArg(
            options=["mtu"],
            help="MTU of the packets between PE & CE. The value is between 1500 to 9000. Default value is 1500",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=9000,
                minimum=1500,
            ),
        )
        layer2_configuration.port_count = AAZIntArg(
            options=["port-count"],
            help="Number of ports connected between PE/CE. Maximum value depends on FabricSKU.",
        )

        layer3_configuration = cls._args_schema.layer3_configuration
        layer3_configuration.export_route_policy_id = AAZStrArg(
            options=["export-route-policy-id"],
            help="exportRoutePolicyId",
        )
        layer3_configuration.import_route_policy_id = AAZStrArg(
            options=["import-route-policy-id"],
            help="importRoutePolicyId",
        )
        layer3_configuration.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="ASN of PE devices for CE/PE connectivity. The value should be between 1 to 65535. Example : 28",
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=1,
            ),
        )
        layer3_configuration.primary_ipv4_prefix = AAZStrArg(
            options=["primary-ipv4-prefix"],
            help="IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.31.0.0/31.",
        )
        layer3_configuration.primary_ipv6_prefix = AAZStrArg(
            options=["primary-ipv6-prefix"],
            help="IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a0/126.",
        )
        layer3_configuration.secondary_ipv4_prefix = AAZStrArg(
            options=["secondary-ipv4-prefix"],
            help="Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.31.0.20/31.",
        )
        layer3_configuration.secondary_ipv6_prefix = AAZStrArg(
            options=["secondary-ipv6-prefix"],
            help="Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a4/126.",
        )
        layer3_configuration.vlan_id = AAZIntArg(
            options=["vlan-id"],
            help="VLAN for CE/PE Layer 3 connectivity. The value should be between 501 to 4095. Example : 501",
            fmt=AAZIntArgFormat(
                maximum=4095,
                minimum=501,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkToNetworkInterconnectsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkToNetworkInterconnectsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabrics/{networkFabricName}/networkToNetworkInterconnects/{networkToNetworkInterconnectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkToNetworkInterconnectName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("isManagementType", AAZStrType, ".is_management_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("layer2Configuration", AAZObjectType, ".layer2_configuration")
                properties.set_prop("layer3Configuration", AAZObjectType, ".layer3_configuration")
                properties.set_prop("nniType", AAZStrType, ".nni_type")
                properties.set_prop("useOptionB", AAZStrType, ".use_option_b", typ_kwargs={"flags": {"required": True}})

            layer2_configuration = _builder.get(".properties.layer2Configuration")
            if layer2_configuration is not None:
                layer2_configuration.set_prop("mtu", AAZIntType, ".mtu", typ_kwargs={"flags": {"required": True}})
                layer2_configuration.set_prop("portCount", AAZIntType, ".port_count")

            layer3_configuration = _builder.get(".properties.layer3Configuration")
            if layer3_configuration is not None:
                layer3_configuration.set_prop("exportRoutePolicyId", AAZStrType, ".export_route_policy_id")
                layer3_configuration.set_prop("importRoutePolicyId", AAZStrType, ".import_route_policy_id")
                layer3_configuration.set_prop("peerASN", AAZIntType, ".peer_asn")
                layer3_configuration.set_prop("primaryIpv4Prefix", AAZStrType, ".primary_ipv4_prefix")
                layer3_configuration.set_prop("primaryIpv6Prefix", AAZStrType, ".primary_ipv6_prefix")
                layer3_configuration.set_prop("secondaryIpv4Prefix", AAZStrType, ".secondary_ipv4_prefix")
                layer3_configuration.set_prop("secondaryIpv6Prefix", AAZStrType, ".secondary_ipv6_prefix")
                layer3_configuration.set_prop("vlanId", AAZIntType, ".vlan_id")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.is_management_type = AAZStrType(
                serialized_name="isManagementType",
                flags={"required": True},
            )
            properties.layer2_configuration = AAZObjectType(
                serialized_name="layer2Configuration",
            )
            properties.layer3_configuration = AAZObjectType(
                serialized_name="layer3Configuration",
            )
            properties.nni_type = AAZStrType(
                serialized_name="nniType",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.use_option_b = AAZStrType(
                serialized_name="useOptionB",
                flags={"required": True},
            )

            layer2_configuration = cls._schema_on_200_201.properties.layer2_configuration
            layer2_configuration.interfaces = AAZListType(
                flags={"read_only": True},
            )
            layer2_configuration.mtu = AAZIntType(
                flags={"required": True},
            )
            layer2_configuration.port_count = AAZIntType(
                serialized_name="portCount",
            )

            interfaces = cls._schema_on_200_201.properties.layer2_configuration.interfaces
            interfaces.Element = AAZStrType()

            layer3_configuration = cls._schema_on_200_201.properties.layer3_configuration
            layer3_configuration.export_route_policy_id = AAZStrType(
                serialized_name="exportRoutePolicyId",
            )
            layer3_configuration.fabric_asn = AAZIntType(
                serialized_name="fabricASN",
                flags={"read_only": True},
            )
            layer3_configuration.import_route_policy_id = AAZStrType(
                serialized_name="importRoutePolicyId",
            )
            layer3_configuration.peer_asn = AAZIntType(
                serialized_name="peerASN",
            )
            layer3_configuration.primary_ipv4_prefix = AAZStrType(
                serialized_name="primaryIpv4Prefix",
            )
            layer3_configuration.primary_ipv6_prefix = AAZStrType(
                serialized_name="primaryIpv6Prefix",
            )
            layer3_configuration.secondary_ipv4_prefix = AAZStrType(
                serialized_name="secondaryIpv4Prefix",
            )
            layer3_configuration.secondary_ipv6_prefix = AAZStrType(
                serialized_name="secondaryIpv6Prefix",
            )
            layer3_configuration.vlan_id = AAZIntType(
                serialized_name="vlanId",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
