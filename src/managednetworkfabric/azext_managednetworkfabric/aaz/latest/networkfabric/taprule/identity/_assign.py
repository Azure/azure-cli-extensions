# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric taprule identity assign",
)
class Assign(AAZCommand):
    """Assign the user or system managed identities.
    """

    _aaz_info = {
        "version": "2025-07-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networktaprules/{}", "2025-07-15", "identity"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Tap Rule.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties.identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Properties.identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Properties.identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkTapRulesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.get())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.get())
        yield self.NetworkTapRulesUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.get(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.identity

        def _set(self, value):
            result = self.ctx.vars.instance
            result.identity = value
            return

    class NetworkTapRulesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkTapRules/{networkTapRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkTapRuleName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-07-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AssignHelper._build_schema_network_tap_rule_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkTapRulesUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkTapRules/{networkTapRuleName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkTapRuleName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-07-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            identity = self.serialize_content(self.ctx.selectors.subresource.required())
            return {"identity": identity}

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AssignHelper._build_schema_network_tap_rule_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.get())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZIdentityObjectType
            )
            _builder.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "assign"}})
            _builder.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "assign"}})

            user_assigned = _builder.get(".userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            return _instance_value


class _AssignHelper:
    """Helper class for Assign"""

    _schema_network_tap_rule_read = None

    @classmethod
    def _build_schema_network_tap_rule_read(cls, _schema):
        if cls._schema_network_tap_rule_read is not None:
            _schema.id = cls._schema_network_tap_rule_read.id
            _schema.identity = cls._schema_network_tap_rule_read.identity
            _schema.location = cls._schema_network_tap_rule_read.location
            _schema.name = cls._schema_network_tap_rule_read.name
            _schema.properties = cls._schema_network_tap_rule_read.properties
            _schema.system_data = cls._schema_network_tap_rule_read.system_data
            _schema.tags = cls._schema_network_tap_rule_read.tags
            _schema.type = cls._schema_network_tap_rule_read.type
            return

        cls._schema_network_tap_rule_read = _schema_network_tap_rule_read = AAZObjectType()

        network_tap_rule_read = _schema_network_tap_rule_read
        network_tap_rule_read.id = AAZStrType(
            flags={"read_only": True},
        )
        network_tap_rule_read.identity = AAZIdentityObjectType()
        network_tap_rule_read.location = AAZStrType(
            flags={"required": True},
        )
        network_tap_rule_read.name = AAZStrType(
            flags={"read_only": True},
        )
        network_tap_rule_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        network_tap_rule_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        network_tap_rule_read.tags = AAZDictType()
        network_tap_rule_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_network_tap_rule_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_network_tap_rule_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_network_tap_rule_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_network_tap_rule_read.properties
        properties.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        properties.annotation = AAZStrType()
        properties.configuration_state = AAZStrType(
            serialized_name="configurationState",
            flags={"read_only": True},
        )
        properties.configuration_type = AAZStrType(
            serialized_name="configurationType",
            flags={"required": True},
        )
        properties.dynamic_match_configurations = AAZListType(
            serialized_name="dynamicMatchConfigurations",
        )
        properties.global_network_tap_rule_actions = AAZObjectType(
            serialized_name="globalNetworkTapRuleActions",
        )
        properties.identity_selector = AAZObjectType(
            serialized_name="identitySelector",
        )
        properties.last_operation = AAZObjectType(
            serialized_name="lastOperation",
            flags={"read_only": True},
        )
        properties.last_synced_time = AAZStrType(
            serialized_name="lastSyncedTime",
            flags={"read_only": True},
        )
        properties.match_configurations = AAZListType(
            serialized_name="matchConfigurations",
        )
        properties.network_fabric_ids = AAZListType(
            serialized_name="networkFabricIds",
            flags={"read_only": True},
        )
        properties.network_tap_ids = AAZListType(
            serialized_name="networkTapIds",
            flags={"read_only": True},
        )
        properties.polling_interval_in_seconds = AAZIntType(
            serialized_name="pollingIntervalInSeconds",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.tap_rules_url = AAZStrType(
            serialized_name="tapRulesUrl",
        )

        dynamic_match_configurations = _schema_network_tap_rule_read.properties.dynamic_match_configurations
        dynamic_match_configurations.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element
        _element.ip_groups = AAZListType(
            serialized_name="ipGroups",
        )
        _element.port_groups = AAZListType(
            serialized_name="portGroups",
        )
        _element.vlan_groups = AAZListType(
            serialized_name="vlanGroups",
        )

        ip_groups = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.ip_groups
        ip_groups.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.ip_groups.Element
        _element.ip_address_type = AAZStrType(
            serialized_name="ipAddressType",
        )
        _element.ip_prefixes = AAZListType(
            serialized_name="ipPrefixes",
        )
        _element.name = AAZStrType()

        ip_prefixes = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.ip_groups.Element.ip_prefixes
        ip_prefixes.Element = AAZStrType()

        port_groups = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.port_groups
        port_groups.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.port_groups.Element
        _element.name = AAZStrType()
        _element.ports = AAZListType()

        ports = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.port_groups.Element.ports
        ports.Element = AAZStrType()

        vlan_groups = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.vlan_groups
        vlan_groups.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.vlan_groups.Element
        _element.name = AAZStrType()
        _element.vlans = AAZListType()

        vlans = _schema_network_tap_rule_read.properties.dynamic_match_configurations.Element.vlan_groups.Element.vlans
        vlans.Element = AAZStrType()

        global_network_tap_rule_actions = _schema_network_tap_rule_read.properties.global_network_tap_rule_actions
        global_network_tap_rule_actions.enable_count = AAZStrType(
            serialized_name="enableCount",
        )
        global_network_tap_rule_actions.truncate = AAZStrType()

        identity_selector = _schema_network_tap_rule_read.properties.identity_selector
        identity_selector.identity_type = AAZStrType(
            serialized_name="identityType",
            flags={"required": True},
        )
        identity_selector.user_assigned_identity_resource_id = AAZStrType(
            serialized_name="userAssignedIdentityResourceId",
        )

        last_operation = _schema_network_tap_rule_read.properties.last_operation
        last_operation.details = AAZStrType(
            flags={"read_only": True},
        )

        match_configurations = _schema_network_tap_rule_read.properties.match_configurations
        match_configurations.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.match_configurations.Element
        _element.actions = AAZListType()
        _element.ip_address_type = AAZStrType(
            serialized_name="ipAddressType",
        )
        _element.match_conditions = AAZListType(
            serialized_name="matchConditions",
        )
        _element.match_configuration_name = AAZStrType(
            serialized_name="matchConfigurationName",
        )
        _element.sequence_number = AAZIntType(
            serialized_name="sequenceNumber",
        )

        actions = _schema_network_tap_rule_read.properties.match_configurations.Element.actions
        actions.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.match_configurations.Element.actions.Element
        _element.destination_id = AAZStrType(
            serialized_name="destinationId",
        )
        _element.is_timestamp_enabled = AAZStrType(
            serialized_name="isTimestampEnabled",
        )
        _element.match_configuration_name = AAZStrType(
            serialized_name="matchConfigurationName",
        )
        _element.truncate = AAZStrType()
        _element.type = AAZStrType()

        match_conditions = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions
        match_conditions.Element = AAZObjectType()

        _element = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element
        _element.encapsulation_type = AAZStrType(
            serialized_name="encapsulationType",
        )
        _element.ip_condition = AAZObjectType(
            serialized_name="ipCondition",
        )
        _element.port_condition = AAZObjectType(
            serialized_name="portCondition",
        )
        _element.protocol_types = AAZListType(
            serialized_name="protocolTypes",
        )
        _element.vlan_match_condition = AAZObjectType(
            serialized_name="vlanMatchCondition",
        )

        ip_condition = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.ip_condition
        ip_condition.ip_group_names = AAZListType(
            serialized_name="ipGroupNames",
        )
        ip_condition.ip_prefix_values = AAZListType(
            serialized_name="ipPrefixValues",
        )
        ip_condition.prefix_type = AAZStrType(
            serialized_name="prefixType",
        )
        ip_condition.type = AAZStrType()

        ip_group_names = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.ip_condition.ip_group_names
        ip_group_names.Element = AAZStrType()

        ip_prefix_values = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.ip_condition.ip_prefix_values
        ip_prefix_values.Element = AAZStrType()

        port_condition = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.port_condition
        port_condition.layer4_protocol = AAZStrType(
            serialized_name="layer4Protocol",
            flags={"required": True},
        )
        port_condition.port_group_names = AAZListType(
            serialized_name="portGroupNames",
        )
        port_condition.port_type = AAZStrType(
            serialized_name="portType",
        )
        port_condition.ports = AAZListType()

        port_group_names = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.port_condition.port_group_names
        port_group_names.Element = AAZStrType()

        ports = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.port_condition.ports
        ports.Element = AAZStrType()

        protocol_types = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.protocol_types
        protocol_types.Element = AAZStrType()

        vlan_match_condition = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition
        vlan_match_condition.inner_vlans = AAZListType(
            serialized_name="innerVlans",
        )
        vlan_match_condition.vlan_group_names = AAZListType(
            serialized_name="vlanGroupNames",
        )
        vlan_match_condition.vlans = AAZListType()

        inner_vlans = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.inner_vlans
        inner_vlans.Element = AAZStrType()

        vlan_group_names = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlan_group_names
        vlan_group_names.Element = AAZStrType()

        vlans = _schema_network_tap_rule_read.properties.match_configurations.Element.match_conditions.Element.vlan_match_condition.vlans
        vlans.Element = AAZStrType()

        network_fabric_ids = _schema_network_tap_rule_read.properties.network_fabric_ids
        network_fabric_ids.Element = AAZStrType()

        network_tap_ids = _schema_network_tap_rule_read.properties.network_tap_ids
        network_tap_ids.Element = AAZStrType()

        system_data = _schema_network_tap_rule_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_network_tap_rule_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_network_tap_rule_read.id
        _schema.identity = cls._schema_network_tap_rule_read.identity
        _schema.location = cls._schema_network_tap_rule_read.location
        _schema.name = cls._schema_network_tap_rule_read.name
        _schema.properties = cls._schema_network_tap_rule_read.properties
        _schema.system_data = cls._schema_network_tap_rule_read.system_data
        _schema.tags = cls._schema_network_tap_rule_read.tags
        _schema.type = cls._schema_network_tap_rule_read.type


__all__ = ["Assign"]
