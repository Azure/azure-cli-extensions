# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric externalnetwork create",
)
class Create(AAZCommand):
    """Create a External Network resource

    :example: Create a External Network with option B properties
        az networkfabric externalnetwork create --resource-group "example-rg" --l3domain "example-l3domain" --resource-name "example-externalNetwork" --peering-option "OptionB" --option-b-properties "{routeTargets:{exportIpv4RouteTargets:['65046:10039'],exportIpv6RouteTargets:['65046:10039'],importIpv4RouteTargets:['65046:10039'],importIpv6RouteTargets:['65046:10039']}}" --import-route-policy "{importIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',importIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}" --export-route-policy "{exportIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',exportIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}"

    :example: Create a External Network with option A properties
        az networkfabric externalnetwork create --resource-group "example-rg" --l3domain "example-l3domain" --resource-name "example-externalNetwork" --peering-option "OptionA" --option-a-properties "{peerASN:65234,vlanId:501,mtu:1500,primaryIpv4Prefix:'172.23.1.0/31',secondaryIpv4Prefix:'172.23.1.2/31',bfdConfiguration:{multiplier:5,intervalInMilliSeconds:300}}" --import-route-policy "{importIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',importIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}" --export-route-policy "{exportIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',exportIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric externalnetwork create --option-a-properties "??"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/l3isolationdomains/{}/externalnetworks/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the External Network.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.l3_isolation_domain_name = AAZStrArg(
            options=["--l3domain", "--l3-isolation-domain-name"],
            help="Name of the L3 Isolation Domain.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.export_route_policy = AAZObjectArg(
            options=["--export-route-policy"],
            arg_group="Properties",
            help="Export Route Policy either IPv4 or IPv6.",
        )
        _args_schema.import_route_policy = AAZObjectArg(
            options=["--import-route-policy"],
            arg_group="Properties",
            help="Import Route Policy either IPv4 or IPv6.",
        )
        _args_schema.network_to_network_interconnect_id = AAZResourceIdArg(
            options=["--nni-id", "--network-to-network-interconnect-id"],
            arg_group="Properties",
            help="ARM Resource ID of the networkToNetworkInterconnectId of the ExternalNetwork resource.",
        )
        _args_schema.option_a_properties = AAZObjectArg(
            options=["--option-a-properties"],
            arg_group="Properties",
            help="option A properties object",
        )
        _args_schema.option_b_properties = AAZObjectArg(
            options=["--option-b-properties"],
            arg_group="Properties",
            help="option B properties object",
        )
        _args_schema.peering_option = AAZStrArg(
            options=["--peering-option"],
            arg_group="Properties",
            help="Peering option list.",
            required=True,
            enum={"OptionA": "OptionA", "OptionB": "OptionB"},
        )
        _args_schema.static_route_configuration = AAZObjectArg(
            options=["--static-route-configuration"],
            arg_group="Properties",
            help="Static Route Configuration.",
        )

        export_route_policy = cls._args_schema.export_route_policy
        export_route_policy.export_ipv4_route_policy_id = AAZResourceIdArg(
            options=["export-ipv4-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )
        export_route_policy.export_ipv6_route_policy_id = AAZResourceIdArg(
            options=["export-ipv6-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )

        import_route_policy = cls._args_schema.import_route_policy
        import_route_policy.import_ipv4_route_policy_id = AAZResourceIdArg(
            options=["import-ipv4-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )
        import_route_policy.import_ipv6_route_policy_id = AAZResourceIdArg(
            options=["import-ipv6-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )

        option_a_properties = cls._args_schema.option_a_properties
        option_a_properties.bfd_configuration = AAZObjectArg(
            options=["bfd-configuration"],
            help="BFD configuration properties",
        )
        option_a_properties.bmp_configuration = AAZObjectArg(
            options=["bmp-configuration"],
            help="BMP Monitor Configuration.",
        )
        option_a_properties.egress_acl_id = AAZResourceIdArg(
            options=["egress-acl-id"],
            help="Egress Acl. ARM resource ID of Access Control Lists.",
        )
        option_a_properties.ingress_acl_id = AAZResourceIdArg(
            options=["ingress-acl-id"],
            help="Ingress Acl. ARM resource ID of Access Control Lists.",
        )
        option_a_properties.mtu = AAZIntArg(
            options=["mtu"],
            help="MTU to use for option A peering.",
            default=1500,
            fmt=AAZIntArgFormat(
                maximum=9200,
                minimum=64,
            ),
        )
        option_a_properties.native_ipv4_prefix_limit = AAZObjectArg(
            options=["native-ipv4-prefix-limit"],
            help="Native IPv4 prefix limits configuration",
        )
        option_a_properties.native_ipv6_prefix_limit = AAZObjectArg(
            options=["native-ipv6-prefix-limit"],
            help="Native IPv6 prefix limits configuration",
        )
        option_a_properties.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="Peer ASN number.Example : 28",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        option_a_properties.primary_ipv4_prefix = AAZStrArg(
            options=["primary-ipv4-prefix"],
            help="IPv4 Address Prefix.",
        )
        option_a_properties.primary_ipv6_prefix = AAZStrArg(
            options=["primary-ipv6-prefix"],
            help="IPv6 Address Prefix.",
        )
        option_a_properties.secondary_ipv4_prefix = AAZStrArg(
            options=["secondary-ipv4-prefix"],
            help="Secondary IPv4 Address Prefix.",
        )
        option_a_properties.secondary_ipv6_prefix = AAZStrArg(
            options=["secondary-ipv6-prefix"],
            help="Secondary IPv6 Address Prefix.",
        )
        option_a_properties.v4_over_v6_bgp_session = AAZStrArg(
            options=["v4-over-v6-bgp-session"],
            help="V4OverV6 BGP Session state",
            default="Disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        option_a_properties.v6_over_v4_bgp_session = AAZStrArg(
            options=["v6-over-v4-bgp-session"],
            help="V6OverV4 BGP Session state",
            default="Disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        option_a_properties.vlan_id = AAZIntArg(
            options=["vlan-id"],
            help="Vlan identifier. Example : 501",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4094,
                minimum=501,
            ),
        )

        bfd_configuration = cls._args_schema.option_a_properties.bfd_configuration
        bfd_configuration.interval_in_milli_seconds = AAZIntArg(
            options=["interval-in-milli-seconds"],
            help="Interval in milliseconds. Example: 300.",
            default=300,
        )
        bfd_configuration.multiplier = AAZIntArg(
            options=["multiplier"],
            help="Multiplier for the Bfd Configuration. Example: 5.",
            default=5,
        )

        bmp_configuration = cls._args_schema.option_a_properties.bmp_configuration
        bmp_configuration.configuration_state = AAZStrArg(
            options=["configuration-state"],
            help="BMP Configuration State.",
            default="Disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        native_ipv4_prefix_limit = cls._args_schema.option_a_properties.native_ipv4_prefix_limit
        native_ipv4_prefix_limit.prefix_limits = AAZListArg(
            options=["prefix-limits"],
            help="Prefix limits",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        prefix_limits = cls._args_schema.option_a_properties.native_ipv4_prefix_limit.prefix_limits
        prefix_limits.Element = AAZObjectArg()
        cls._build_args_prefix_limit_properties_create(prefix_limits.Element)

        native_ipv6_prefix_limit = cls._args_schema.option_a_properties.native_ipv6_prefix_limit
        native_ipv6_prefix_limit.prefix_limits = AAZListArg(
            options=["prefix-limits"],
            help="Prefix limits",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        prefix_limits = cls._args_schema.option_a_properties.native_ipv6_prefix_limit.prefix_limits
        prefix_limits.Element = AAZObjectArg()
        cls._build_args_prefix_limit_properties_create(prefix_limits.Element)

        option_b_properties = cls._args_schema.option_b_properties
        option_b_properties.export_route_targets = AAZListArg(
            options=["export-route-targets"],
            help="RouteTargets to be applied. This is used for the backward compatibility.",
        )
        option_b_properties.import_route_targets = AAZListArg(
            options=["import-route-targets"],
            help="RouteTargets to be applied. This is used for the backward compatibility.",
        )
        option_b_properties.route_targets = AAZObjectArg(
            options=["route-targets"],
            help="RouteTargets to be applied.",
        )

        export_route_targets = cls._args_schema.option_b_properties.export_route_targets
        export_route_targets.Element = AAZStrArg()

        import_route_targets = cls._args_schema.option_b_properties.import_route_targets
        import_route_targets.Element = AAZStrArg()

        route_targets = cls._args_schema.option_b_properties.route_targets
        route_targets.export_ipv4_route_targets = AAZListArg(
            options=["export-ipv4-route-targets"],
            help="Route Targets to be applied for outgoing routes into CE.",
        )
        route_targets.export_ipv6_route_targets = AAZListArg(
            options=["export-ipv6-route-targets"],
            help="Route Targets to be applied for outgoing routes from CE.",
        )
        route_targets.import_ipv4_route_targets = AAZListArg(
            options=["import-ipv4-route-targets"],
            help="Route Targets to be applied for incoming routes into CE.",
        )
        route_targets.import_ipv6_route_targets = AAZListArg(
            options=["import-ipv6-route-targets"],
            help="Route Targets to be applied for incoming routes from CE.",
        )

        export_ipv4_route_targets = cls._args_schema.option_b_properties.route_targets.export_ipv4_route_targets
        export_ipv4_route_targets.Element = AAZStrArg()

        export_ipv6_route_targets = cls._args_schema.option_b_properties.route_targets.export_ipv6_route_targets
        export_ipv6_route_targets.Element = AAZStrArg()

        import_ipv4_route_targets = cls._args_schema.option_b_properties.route_targets.import_ipv4_route_targets
        import_ipv4_route_targets.Element = AAZStrArg()

        import_ipv6_route_targets = cls._args_schema.option_b_properties.route_targets.import_ipv6_route_targets
        import_ipv6_route_targets.Element = AAZStrArg()

        static_route_configuration = cls._args_schema.static_route_configuration
        static_route_configuration.bfd_configuration = AAZObjectArg(
            options=["bfd-configuration"],
            help="BFD configuration properties",
        )
        cls._build_args_bfd_configuration_create(static_route_configuration.bfd_configuration)
        static_route_configuration.ipv4_routes = AAZListArg(
            options=["ipv4-routes"],
            help="List of IPv4 Routes.",
        )
        static_route_configuration.ipv6_routes = AAZListArg(
            options=["ipv6-routes"],
            help="List of IPv6 Routes.",
        )

        ipv4_routes = cls._args_schema.static_route_configuration.ipv4_routes
        ipv4_routes.Element = AAZObjectArg()
        cls._build_args_static_route_properties_create(ipv4_routes.Element)

        ipv6_routes = cls._args_schema.static_route_configuration.ipv6_routes
        ipv6_routes.Element = AAZObjectArg()
        cls._build_args_static_route_properties_create(ipv6_routes.Element)
        return cls._args_schema

    _args_bfd_configuration_create = None

    @classmethod
    def _build_args_bfd_configuration_create(cls, _schema):
        if cls._args_bfd_configuration_create is not None:
            _schema.interval_in_milli_seconds = cls._args_bfd_configuration_create.interval_in_milli_seconds
            _schema.multiplier = cls._args_bfd_configuration_create.multiplier
            return

        cls._args_bfd_configuration_create = AAZObjectArg()

        bfd_configuration_create = cls._args_bfd_configuration_create
        bfd_configuration_create.interval_in_milli_seconds = AAZIntArg(
            options=["interval-in-milli-seconds"],
            help="Interval in milliseconds. Example: 300.",
            default=300,
        )
        bfd_configuration_create.multiplier = AAZIntArg(
            options=["multiplier"],
            help="Multiplier for the Bfd Configuration. Example: 5.",
            default=5,
        )

        _schema.interval_in_milli_seconds = cls._args_bfd_configuration_create.interval_in_milli_seconds
        _schema.multiplier = cls._args_bfd_configuration_create.multiplier

    _args_prefix_limit_properties_create = None

    @classmethod
    def _build_args_prefix_limit_properties_create(cls, _schema):
        if cls._args_prefix_limit_properties_create is not None:
            _schema.idle_time_expiry = cls._args_prefix_limit_properties_create.idle_time_expiry
            _schema.maximum_routes = cls._args_prefix_limit_properties_create.maximum_routes
            _schema.threshold = cls._args_prefix_limit_properties_create.threshold
            return

        cls._args_prefix_limit_properties_create = AAZObjectArg()

        prefix_limit_properties_create = cls._args_prefix_limit_properties_create
        prefix_limit_properties_create.idle_time_expiry = AAZIntArg(
            options=["idle-time-expiry"],
            help="Idle Time Expiry in seconds, default is 60.",
            default=60,
        )
        prefix_limit_properties_create.maximum_routes = AAZIntArg(
            options=["maximum-routes"],
            help="Maximum routes allowed.",
        )
        prefix_limit_properties_create.threshold = AAZIntArg(
            options=["threshold"],
            help="Limit at which route prefixes a warning is generate.",
        )

        _schema.idle_time_expiry = cls._args_prefix_limit_properties_create.idle_time_expiry
        _schema.maximum_routes = cls._args_prefix_limit_properties_create.maximum_routes
        _schema.threshold = cls._args_prefix_limit_properties_create.threshold

    _args_static_route_properties_create = None

    @classmethod
    def _build_args_static_route_properties_create(cls, _schema):
        if cls._args_static_route_properties_create is not None:
            _schema.next_hop = cls._args_static_route_properties_create.next_hop
            _schema.prefix = cls._args_static_route_properties_create.prefix
            return

        cls._args_static_route_properties_create = AAZObjectArg()

        static_route_properties_create = cls._args_static_route_properties_create
        static_route_properties_create.next_hop = AAZListArg(
            options=["next-hop"],
            help="List of next hop addresses.",
            required=True,
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        static_route_properties_create.prefix = AAZStrArg(
            options=["prefix"],
            help="Prefix of the route.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        next_hop = cls._args_static_route_properties_create.next_hop
        next_hop.Element = AAZStrArg()

        _schema.next_hop = cls._args_static_route_properties_create.next_hop
        _schema.prefix = cls._args_static_route_properties_create.prefix

    def _execute_operations(self):
        self.pre_operations()
        yield self.ExternalNetworksCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ExternalNetworksCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "externalNetworkName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "l3IsolationDomainName", self.ctx.args.l3_isolation_domain_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("exportRoutePolicy", AAZObjectType, ".export_route_policy")
                properties.set_prop("importRoutePolicy", AAZObjectType, ".import_route_policy")
                properties.set_prop("networkToNetworkInterconnectId", AAZStrType, ".network_to_network_interconnect_id")
                properties.set_prop("optionAProperties", AAZObjectType, ".option_a_properties")
                properties.set_prop("optionBProperties", AAZObjectType, ".option_b_properties")
                properties.set_prop("peeringOption", AAZStrType, ".peering_option", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("staticRouteConfiguration", AAZObjectType, ".static_route_configuration")

            export_route_policy = _builder.get(".properties.exportRoutePolicy")
            if export_route_policy is not None:
                export_route_policy.set_prop("exportIpv4RoutePolicyId", AAZStrType, ".export_ipv4_route_policy_id")
                export_route_policy.set_prop("exportIpv6RoutePolicyId", AAZStrType, ".export_ipv6_route_policy_id")

            import_route_policy = _builder.get(".properties.importRoutePolicy")
            if import_route_policy is not None:
                import_route_policy.set_prop("importIpv4RoutePolicyId", AAZStrType, ".import_ipv4_route_policy_id")
                import_route_policy.set_prop("importIpv6RoutePolicyId", AAZStrType, ".import_ipv6_route_policy_id")

            option_a_properties = _builder.get(".properties.optionAProperties")
            if option_a_properties is not None:
                option_a_properties.set_prop("bfdConfiguration", AAZObjectType, ".bfd_configuration")
                option_a_properties.set_prop("bmpConfiguration", AAZObjectType, ".bmp_configuration")
                option_a_properties.set_prop("egressAclId", AAZStrType, ".egress_acl_id")
                option_a_properties.set_prop("ingressAclId", AAZStrType, ".ingress_acl_id")
                option_a_properties.set_prop("mtu", AAZIntType, ".mtu")
                option_a_properties.set_prop("nativeIpv4PrefixLimit", AAZObjectType, ".native_ipv4_prefix_limit")
                option_a_properties.set_prop("nativeIpv6PrefixLimit", AAZObjectType, ".native_ipv6_prefix_limit")
                option_a_properties.set_prop("peerASN", AAZIntType, ".peer_asn", typ_kwargs={"flags": {"required": True}})
                option_a_properties.set_prop("primaryIpv4Prefix", AAZStrType, ".primary_ipv4_prefix")
                option_a_properties.set_prop("primaryIpv6Prefix", AAZStrType, ".primary_ipv6_prefix")
                option_a_properties.set_prop("secondaryIpv4Prefix", AAZStrType, ".secondary_ipv4_prefix")
                option_a_properties.set_prop("secondaryIpv6Prefix", AAZStrType, ".secondary_ipv6_prefix")
                option_a_properties.set_prop("v4OverV6BgpSession", AAZStrType, ".v4_over_v6_bgp_session")
                option_a_properties.set_prop("v6OverV4BgpSession", AAZStrType, ".v6_over_v4_bgp_session")
                option_a_properties.set_prop("vlanId", AAZIntType, ".vlan_id", typ_kwargs={"flags": {"required": True}})

            bfd_configuration = _builder.get(".properties.optionAProperties.bfdConfiguration")
            if bfd_configuration is not None:
                bfd_configuration.set_prop("intervalInMilliSeconds", AAZIntType, ".interval_in_milli_seconds")
                bfd_configuration.set_prop("multiplier", AAZIntType, ".multiplier")

            bmp_configuration = _builder.get(".properties.optionAProperties.bmpConfiguration")
            if bmp_configuration is not None:
                bmp_configuration.set_prop("configurationState", AAZStrType, ".configuration_state")

            native_ipv4_prefix_limit = _builder.get(".properties.optionAProperties.nativeIpv4PrefixLimit")
            if native_ipv4_prefix_limit is not None:
                native_ipv4_prefix_limit.set_prop("prefixLimits", AAZListType, ".prefix_limits")

            prefix_limits = _builder.get(".properties.optionAProperties.nativeIpv4PrefixLimit.prefixLimits")
            if prefix_limits is not None:
                _CreateHelper._build_schema_prefix_limit_properties_create(prefix_limits.set_elements(AAZObjectType, "."))

            native_ipv6_prefix_limit = _builder.get(".properties.optionAProperties.nativeIpv6PrefixLimit")
            if native_ipv6_prefix_limit is not None:
                native_ipv6_prefix_limit.set_prop("prefixLimits", AAZListType, ".prefix_limits")

            prefix_limits = _builder.get(".properties.optionAProperties.nativeIpv6PrefixLimit.prefixLimits")
            if prefix_limits is not None:
                _CreateHelper._build_schema_prefix_limit_properties_create(prefix_limits.set_elements(AAZObjectType, "."))

            option_b_properties = _builder.get(".properties.optionBProperties")
            if option_b_properties is not None:
                option_b_properties.set_prop("exportRouteTargets", AAZListType, ".export_route_targets")
                option_b_properties.set_prop("importRouteTargets", AAZListType, ".import_route_targets")
                option_b_properties.set_prop("routeTargets", AAZObjectType, ".route_targets")

            export_route_targets = _builder.get(".properties.optionBProperties.exportRouteTargets")
            if export_route_targets is not None:
                export_route_targets.set_elements(AAZStrType, ".")

            import_route_targets = _builder.get(".properties.optionBProperties.importRouteTargets")
            if import_route_targets is not None:
                import_route_targets.set_elements(AAZStrType, ".")

            route_targets = _builder.get(".properties.optionBProperties.routeTargets")
            if route_targets is not None:
                route_targets.set_prop("exportIpv4RouteTargets", AAZListType, ".export_ipv4_route_targets")
                route_targets.set_prop("exportIpv6RouteTargets", AAZListType, ".export_ipv6_route_targets")
                route_targets.set_prop("importIpv4RouteTargets", AAZListType, ".import_ipv4_route_targets")
                route_targets.set_prop("importIpv6RouteTargets", AAZListType, ".import_ipv6_route_targets")

            export_ipv4_route_targets = _builder.get(".properties.optionBProperties.routeTargets.exportIpv4RouteTargets")
            if export_ipv4_route_targets is not None:
                export_ipv4_route_targets.set_elements(AAZStrType, ".")

            export_ipv6_route_targets = _builder.get(".properties.optionBProperties.routeTargets.exportIpv6RouteTargets")
            if export_ipv6_route_targets is not None:
                export_ipv6_route_targets.set_elements(AAZStrType, ".")

            import_ipv4_route_targets = _builder.get(".properties.optionBProperties.routeTargets.importIpv4RouteTargets")
            if import_ipv4_route_targets is not None:
                import_ipv4_route_targets.set_elements(AAZStrType, ".")

            import_ipv6_route_targets = _builder.get(".properties.optionBProperties.routeTargets.importIpv6RouteTargets")
            if import_ipv6_route_targets is not None:
                import_ipv6_route_targets.set_elements(AAZStrType, ".")

            static_route_configuration = _builder.get(".properties.staticRouteConfiguration")
            if static_route_configuration is not None:
                _CreateHelper._build_schema_bfd_configuration_create(static_route_configuration.set_prop("bfdConfiguration", AAZObjectType, ".bfd_configuration"))
                static_route_configuration.set_prop("ipv4Routes", AAZListType, ".ipv4_routes")
                static_route_configuration.set_prop("ipv6Routes", AAZListType, ".ipv6_routes")

            ipv4_routes = _builder.get(".properties.staticRouteConfiguration.ipv4Routes")
            if ipv4_routes is not None:
                _CreateHelper._build_schema_static_route_properties_create(ipv4_routes.set_elements(AAZObjectType, "."))

            ipv6_routes = _builder.get(".properties.staticRouteConfiguration.ipv6Routes")
            if ipv6_routes is not None:
                _CreateHelper._build_schema_static_route_properties_create(ipv6_routes.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            properties.export_route_policy = AAZObjectType(
                serialized_name="exportRoutePolicy",
            )
            properties.import_route_policy = AAZObjectType(
                serialized_name="importRoutePolicy",
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.network_to_network_interconnect_id = AAZStrType(
                serialized_name="networkToNetworkInterconnectId",
            )
            properties.option_a_properties = AAZObjectType(
                serialized_name="optionAProperties",
            )
            properties.option_b_properties = AAZObjectType(
                serialized_name="optionBProperties",
            )
            properties.peering_option = AAZStrType(
                serialized_name="peeringOption",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.static_route_configuration = AAZObjectType(
                serialized_name="staticRouteConfiguration",
            )

            export_route_policy = cls._schema_on_200_201.properties.export_route_policy
            export_route_policy.export_ipv4_route_policy_id = AAZStrType(
                serialized_name="exportIpv4RoutePolicyId",
            )
            export_route_policy.export_ipv6_route_policy_id = AAZStrType(
                serialized_name="exportIpv6RoutePolicyId",
            )

            import_route_policy = cls._schema_on_200_201.properties.import_route_policy
            import_route_policy.import_ipv4_route_policy_id = AAZStrType(
                serialized_name="importIpv4RoutePolicyId",
            )
            import_route_policy.import_ipv6_route_policy_id = AAZStrType(
                serialized_name="importIpv6RoutePolicyId",
            )

            last_operation = cls._schema_on_200_201.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            option_a_properties = cls._schema_on_200_201.properties.option_a_properties
            option_a_properties.bfd_configuration = AAZObjectType(
                serialized_name="bfdConfiguration",
            )
            _CreateHelper._build_schema_bfd_configuration_read(option_a_properties.bfd_configuration)
            option_a_properties.bmp_configuration = AAZObjectType(
                serialized_name="bmpConfiguration",
            )
            option_a_properties.egress_acl_id = AAZStrType(
                serialized_name="egressAclId",
            )
            option_a_properties.fabric_asn = AAZIntType(
                serialized_name="fabricASN",
                flags={"read_only": True},
            )
            option_a_properties.ingress_acl_id = AAZStrType(
                serialized_name="ingressAclId",
            )
            option_a_properties.mtu = AAZIntType()
            option_a_properties.native_ipv4_prefix_limit = AAZObjectType(
                serialized_name="nativeIpv4PrefixLimit",
            )
            option_a_properties.native_ipv6_prefix_limit = AAZObjectType(
                serialized_name="nativeIpv6PrefixLimit",
            )
            option_a_properties.peer_asn = AAZIntType(
                serialized_name="peerASN",
                flags={"required": True},
            )
            option_a_properties.primary_ipv4_prefix = AAZStrType(
                serialized_name="primaryIpv4Prefix",
            )
            option_a_properties.primary_ipv6_prefix = AAZStrType(
                serialized_name="primaryIpv6Prefix",
            )
            option_a_properties.secondary_ipv4_prefix = AAZStrType(
                serialized_name="secondaryIpv4Prefix",
            )
            option_a_properties.secondary_ipv6_prefix = AAZStrType(
                serialized_name="secondaryIpv6Prefix",
            )
            option_a_properties.v4_over_v6_bgp_session = AAZStrType(
                serialized_name="v4OverV6BgpSession",
            )
            option_a_properties.v6_over_v4_bgp_session = AAZStrType(
                serialized_name="v6OverV4BgpSession",
            )
            option_a_properties.vlan_id = AAZIntType(
                serialized_name="vlanId",
                flags={"required": True},
            )

            bmp_configuration = cls._schema_on_200_201.properties.option_a_properties.bmp_configuration
            bmp_configuration.configuration_state = AAZStrType(
                serialized_name="configurationState",
            )

            native_ipv4_prefix_limit = cls._schema_on_200_201.properties.option_a_properties.native_ipv4_prefix_limit
            native_ipv4_prefix_limit.prefix_limits = AAZListType(
                serialized_name="prefixLimits",
            )

            prefix_limits = cls._schema_on_200_201.properties.option_a_properties.native_ipv4_prefix_limit.prefix_limits
            prefix_limits.Element = AAZObjectType()
            _CreateHelper._build_schema_prefix_limit_properties_read(prefix_limits.Element)

            native_ipv6_prefix_limit = cls._schema_on_200_201.properties.option_a_properties.native_ipv6_prefix_limit
            native_ipv6_prefix_limit.prefix_limits = AAZListType(
                serialized_name="prefixLimits",
            )

            prefix_limits = cls._schema_on_200_201.properties.option_a_properties.native_ipv6_prefix_limit.prefix_limits
            prefix_limits.Element = AAZObjectType()
            _CreateHelper._build_schema_prefix_limit_properties_read(prefix_limits.Element)

            option_b_properties = cls._schema_on_200_201.properties.option_b_properties
            option_b_properties.export_route_targets = AAZListType(
                serialized_name="exportRouteTargets",
            )
            option_b_properties.import_route_targets = AAZListType(
                serialized_name="importRouteTargets",
            )
            option_b_properties.route_targets = AAZObjectType(
                serialized_name="routeTargets",
            )

            export_route_targets = cls._schema_on_200_201.properties.option_b_properties.export_route_targets
            export_route_targets.Element = AAZStrType()

            import_route_targets = cls._schema_on_200_201.properties.option_b_properties.import_route_targets
            import_route_targets.Element = AAZStrType()

            route_targets = cls._schema_on_200_201.properties.option_b_properties.route_targets
            route_targets.export_ipv4_route_targets = AAZListType(
                serialized_name="exportIpv4RouteTargets",
            )
            route_targets.export_ipv6_route_targets = AAZListType(
                serialized_name="exportIpv6RouteTargets",
            )
            route_targets.import_ipv4_route_targets = AAZListType(
                serialized_name="importIpv4RouteTargets",
            )
            route_targets.import_ipv6_route_targets = AAZListType(
                serialized_name="importIpv6RouteTargets",
            )

            export_ipv4_route_targets = cls._schema_on_200_201.properties.option_b_properties.route_targets.export_ipv4_route_targets
            export_ipv4_route_targets.Element = AAZStrType()

            export_ipv6_route_targets = cls._schema_on_200_201.properties.option_b_properties.route_targets.export_ipv6_route_targets
            export_ipv6_route_targets.Element = AAZStrType()

            import_ipv4_route_targets = cls._schema_on_200_201.properties.option_b_properties.route_targets.import_ipv4_route_targets
            import_ipv4_route_targets.Element = AAZStrType()

            import_ipv6_route_targets = cls._schema_on_200_201.properties.option_b_properties.route_targets.import_ipv6_route_targets
            import_ipv6_route_targets.Element = AAZStrType()

            static_route_configuration = cls._schema_on_200_201.properties.static_route_configuration
            static_route_configuration.bfd_configuration = AAZObjectType(
                serialized_name="bfdConfiguration",
            )
            _CreateHelper._build_schema_bfd_configuration_read(static_route_configuration.bfd_configuration)
            static_route_configuration.ipv4_routes = AAZListType(
                serialized_name="ipv4Routes",
            )
            static_route_configuration.ipv6_routes = AAZListType(
                serialized_name="ipv6Routes",
            )

            ipv4_routes = cls._schema_on_200_201.properties.static_route_configuration.ipv4_routes
            ipv4_routes.Element = AAZObjectType()
            _CreateHelper._build_schema_static_route_properties_read(ipv4_routes.Element)

            ipv6_routes = cls._schema_on_200_201.properties.static_route_configuration.ipv6_routes
            ipv6_routes.Element = AAZObjectType()
            _CreateHelper._build_schema_static_route_properties_read(ipv6_routes.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_bfd_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("intervalInMilliSeconds", AAZIntType, ".interval_in_milli_seconds")
        _builder.set_prop("multiplier", AAZIntType, ".multiplier")

    @classmethod
    def _build_schema_prefix_limit_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("idleTimeExpiry", AAZIntType, ".idle_time_expiry")
        _builder.set_prop("maximumRoutes", AAZIntType, ".maximum_routes")
        _builder.set_prop("threshold", AAZIntType, ".threshold")

    @classmethod
    def _build_schema_static_route_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("nextHop", AAZListType, ".next_hop", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

        next_hop = _builder.get(".nextHop")
        if next_hop is not None:
            next_hop.set_elements(AAZStrType, ".")

    _schema_bfd_configuration_read = None

    @classmethod
    def _build_schema_bfd_configuration_read(cls, _schema):
        if cls._schema_bfd_configuration_read is not None:
            _schema.administrative_state = cls._schema_bfd_configuration_read.administrative_state
            _schema.interval_in_milli_seconds = cls._schema_bfd_configuration_read.interval_in_milli_seconds
            _schema.multiplier = cls._schema_bfd_configuration_read.multiplier
            return

        cls._schema_bfd_configuration_read = _schema_bfd_configuration_read = AAZObjectType()

        bfd_configuration_read = _schema_bfd_configuration_read
        bfd_configuration_read.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        bfd_configuration_read.interval_in_milli_seconds = AAZIntType(
            serialized_name="intervalInMilliSeconds",
        )
        bfd_configuration_read.multiplier = AAZIntType()

        _schema.administrative_state = cls._schema_bfd_configuration_read.administrative_state
        _schema.interval_in_milli_seconds = cls._schema_bfd_configuration_read.interval_in_milli_seconds
        _schema.multiplier = cls._schema_bfd_configuration_read.multiplier

    _schema_prefix_limit_properties_read = None

    @classmethod
    def _build_schema_prefix_limit_properties_read(cls, _schema):
        if cls._schema_prefix_limit_properties_read is not None:
            _schema.idle_time_expiry = cls._schema_prefix_limit_properties_read.idle_time_expiry
            _schema.maximum_routes = cls._schema_prefix_limit_properties_read.maximum_routes
            _schema.threshold = cls._schema_prefix_limit_properties_read.threshold
            return

        cls._schema_prefix_limit_properties_read = _schema_prefix_limit_properties_read = AAZObjectType()

        prefix_limit_properties_read = _schema_prefix_limit_properties_read
        prefix_limit_properties_read.idle_time_expiry = AAZIntType(
            serialized_name="idleTimeExpiry",
        )
        prefix_limit_properties_read.maximum_routes = AAZIntType(
            serialized_name="maximumRoutes",
        )
        prefix_limit_properties_read.threshold = AAZIntType()

        _schema.idle_time_expiry = cls._schema_prefix_limit_properties_read.idle_time_expiry
        _schema.maximum_routes = cls._schema_prefix_limit_properties_read.maximum_routes
        _schema.threshold = cls._schema_prefix_limit_properties_read.threshold

    _schema_static_route_properties_read = None

    @classmethod
    def _build_schema_static_route_properties_read(cls, _schema):
        if cls._schema_static_route_properties_read is not None:
            _schema.next_hop = cls._schema_static_route_properties_read.next_hop
            _schema.prefix = cls._schema_static_route_properties_read.prefix
            return

        cls._schema_static_route_properties_read = _schema_static_route_properties_read = AAZObjectType()

        static_route_properties_read = _schema_static_route_properties_read
        static_route_properties_read.next_hop = AAZListType(
            serialized_name="nextHop",
            flags={"required": True},
        )
        static_route_properties_read.prefix = AAZStrType(
            flags={"required": True},
        )

        next_hop = _schema_static_route_properties_read.next_hop
        next_hop.Element = AAZStrType()

        _schema.next_hop = cls._schema_static_route_properties_read.next_hop
        _schema.prefix = cls._schema_static_route_properties_read.prefix


__all__ = ["Create"]
