# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric externalnetwork create",
)
class Create(AAZCommand):
    """Create a External Network resource

    :example: Create a External Network with option B properties
        az networkfabric externalnetwork create --resource-group "example-rg" --l3domain "example-l3domain" --resource-name "example-externalNetwork" --peering-option "OptionB" --import-route-policy-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy" --export-route-policy-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy" --option-b-properties "{importRouteTargets:['65541:2001','65542:2002'],exportRouteTargets:['65531:2001','65532:2002']}"

    :example: Create a External Network with option A properties
        az networkfabric externalnetwork create --resource-group "example-rg" --l3domain "example-l3domain" --resource-name "example-externalNetwork" --peering-option "OptionA" --import-route-policy-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy" --export-route-policy-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy" --option-a-properties "{peerASN:65234,vlanId:501,mtu:1500,primaryIpv4Prefix:'172.23.1.0/31',secondaryIpv4Prefix:'172.23.1.2/31'}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric externalnetwork create --option-a-properties ??
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/l3isolationdomains/{}/externalnetworks/{}", "2023-02-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the ExternalNetwork",
            required=True,
        )
        _args_schema.l3_isolation_domain_name = AAZStrArg(
            options=["--l3domain", "--l3-isolation-domain-name"],
            help="Name of the L3IsolationDomain",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of the resource group",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.export_route_policy_id = AAZStrArg(
            options=["--export-route-policy-id"],
            arg_group="Properties",
            help="ARM resource ID of exportRoutePolicy.",
        )
        _args_schema.import_route_policy_id = AAZStrArg(
            options=["--import-route-policy-id"],
            arg_group="Properties",
            help="ARM resource ID of importRoutePolicy.",
        )
        _args_schema.option_a_properties = AAZObjectArg(
            options=["--option-a-properties"],
            arg_group="Properties",
            help="option A properties object.",
        )
        _args_schema.option_b_properties = AAZObjectArg(
            options=["--option-b-properties"],
            arg_group="Properties",
            help="option B properties object.",
        )
        _args_schema.peering_option = AAZStrArg(
            options=["--peering-option"],
            arg_group="Properties",
            help="Peering option list.",
            required=True,
            enum={"OptionA": "OptionA", "OptionB": "OptionB"},
        )

        option_a_properties = cls._args_schema.option_a_properties
        option_a_properties.mtu = AAZIntArg(
            options=["mtu"],
            help="MTU to use for option A peering. The value should be between 1500 to 9000.Default Value is 1500. Example : 1650.",
            default=1500,
            fmt=AAZIntArgFormat(
                maximum=9000,
                minimum=1500,
            ),
        )
        option_a_properties.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="Peer ASN number. The value should be between 1 to 65535. Example : 65234.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=65535,
                minimum=1,
            ),
        )
        option_a_properties.primary_ipv4_prefix = AAZStrArg(
            options=["primary-ipv4-prefix"],
            help="IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.23.1.0/31.",
        )
        option_a_properties.primary_ipv6_prefix = AAZStrArg(
            options=["primary-ipv6-prefix"],
            help="IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a1/126.",
        )
        option_a_properties.secondary_ipv4_prefix = AAZStrArg(
            options=["secondary-ipv4-prefix"],
            help="Secondary IPv4 Address Prefix of CE-PE interconnect links. Default value is 172.23.1.2/31.",
        )
        option_a_properties.secondary_ipv6_prefix = AAZStrArg(
            options=["secondary-ipv6-prefix"],
            help="Secondary IPv6 Address Prefix of CE-PE interconnect links. Default value is 3FFE:FFFF:0:CD30::a1/126.",
        )
        option_a_properties.vlan_id = AAZIntArg(
            options=["vlan-id"],
            help="Vlan identifier. The value should be between 501 to 4095. Example : 501.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4095,
                minimum=501,
            ),
        )

        option_b_properties = cls._args_schema.option_b_properties
        option_b_properties.export_route_targets = AAZListArg(
            options=["export-route-targets"],
            help="Route Targets to be applied for outgoing routes from CE.",
        )
        option_b_properties.import_route_targets = AAZListArg(
            options=["import-route-targets"],
            help="Route Targets to be applied for incoming routes into CE.",
        )

        export_route_targets = cls._args_schema.option_b_properties.export_route_targets
        export_route_targets.Element = AAZStrArg()

        import_route_targets = cls._args_schema.option_b_properties.import_route_targets
        import_route_targets.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ExternalNetworksCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ExternalNetworksCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/externalNetworks/{externalNetworkName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "externalNetworkName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "l3IsolationDomainName", self.ctx.args.l3_isolation_domain_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("exportRoutePolicyId", AAZStrType, ".export_route_policy_id")
                properties.set_prop("importRoutePolicyId", AAZStrType, ".import_route_policy_id")
                properties.set_prop("optionAProperties", AAZObjectType, ".option_a_properties")
                properties.set_prop("optionBProperties", AAZObjectType, ".option_b_properties")
                properties.set_prop("peeringOption", AAZStrType, ".peering_option", typ_kwargs={"flags": {"required": True}})

            option_a_properties = _builder.get(".properties.optionAProperties")
            if option_a_properties is not None:
                option_a_properties.set_prop("mtu", AAZIntType, ".mtu")
                option_a_properties.set_prop("peerASN", AAZIntType, ".peer_asn", typ_kwargs={"flags": {"required": True}})
                option_a_properties.set_prop("primaryIpv4Prefix", AAZStrType, ".primary_ipv4_prefix")
                option_a_properties.set_prop("primaryIpv6Prefix", AAZStrType, ".primary_ipv6_prefix")
                option_a_properties.set_prop("secondaryIpv4Prefix", AAZStrType, ".secondary_ipv4_prefix")
                option_a_properties.set_prop("secondaryIpv6Prefix", AAZStrType, ".secondary_ipv6_prefix")
                option_a_properties.set_prop("vlanId", AAZIntType, ".vlan_id", typ_kwargs={"flags": {"required": True}})

            option_b_properties = _builder.get(".properties.optionBProperties")
            if option_b_properties is not None:
                option_b_properties.set_prop("exportRouteTargets", AAZListType, ".export_route_targets")
                option_b_properties.set_prop("importRouteTargets", AAZListType, ".import_route_targets")

            export_route_targets = _builder.get(".properties.optionBProperties.exportRouteTargets")
            if export_route_targets is not None:
                export_route_targets.set_elements(AAZStrType, ".")

            import_route_targets = _builder.get(".properties.optionBProperties.importRouteTargets")
            if import_route_targets is not None:
                import_route_targets.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.disabled_on_resources = AAZListType(
                serialized_name="disabledOnResources",
                flags={"read_only": True},
            )
            properties.export_route_policy_id = AAZStrType(
                serialized_name="exportRoutePolicyId",
            )
            properties.import_route_policy_id = AAZStrType(
                serialized_name="importRoutePolicyId",
            )
            properties.network_to_network_interconnect_id = AAZStrType(
                serialized_name="networkToNetworkInterconnectId",
                flags={"read_only": True},
            )
            properties.option_a_properties = AAZObjectType(
                serialized_name="optionAProperties",
            )
            properties.option_b_properties = AAZObjectType(
                serialized_name="optionBProperties",
            )
            properties.peering_option = AAZStrType(
                serialized_name="peeringOption",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            disabled_on_resources = cls._schema_on_200_201.properties.disabled_on_resources
            disabled_on_resources.Element = AAZStrType()

            option_a_properties = cls._schema_on_200_201.properties.option_a_properties
            option_a_properties.bfd_configuration = AAZObjectType(
                serialized_name="bfdConfiguration",
            )
            option_a_properties.fabric_asn = AAZIntType(
                serialized_name="fabricASN",
                flags={"read_only": True},
            )
            option_a_properties.mtu = AAZIntType()
            option_a_properties.peer_asn = AAZIntType(
                serialized_name="peerASN",
                flags={"required": True},
            )
            option_a_properties.primary_ipv4_prefix = AAZStrType(
                serialized_name="primaryIpv4Prefix",
            )
            option_a_properties.primary_ipv6_prefix = AAZStrType(
                serialized_name="primaryIpv6Prefix",
            )
            option_a_properties.secondary_ipv4_prefix = AAZStrType(
                serialized_name="secondaryIpv4Prefix",
            )
            option_a_properties.secondary_ipv6_prefix = AAZStrType(
                serialized_name="secondaryIpv6Prefix",
            )
            option_a_properties.vlan_id = AAZIntType(
                serialized_name="vlanId",
                flags={"required": True},
            )

            bfd_configuration = cls._schema_on_200_201.properties.option_a_properties.bfd_configuration
            bfd_configuration.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            bfd_configuration.interval = AAZIntType(
                flags={"read_only": True},
            )
            bfd_configuration.multiplier = AAZIntType(
                flags={"read_only": True},
            )

            option_b_properties = cls._schema_on_200_201.properties.option_b_properties
            option_b_properties.export_route_targets = AAZListType(
                serialized_name="exportRouteTargets",
            )
            option_b_properties.import_route_targets = AAZListType(
                serialized_name="importRouteTargets",
            )

            export_route_targets = cls._schema_on_200_201.properties.option_b_properties.export_route_targets
            export_route_targets.Element = AAZStrType()

            import_route_targets = cls._schema_on_200_201.properties.option_b_properties.import_route_targets
            import_route_targets.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
