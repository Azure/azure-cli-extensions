# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric tap identity show",
)
class Show(AAZCommand):
    """Show the details of managed identities.
    """

    _aaz_info = {
        "version": "2025-07-15",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networktaps/{}", "2025-07-15", "identity"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Tap.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkTapsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.identity

        def _set(self, value):
            result = self.ctx.vars.instance
            result.identity = value
            return

    class NetworkTapsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkTaps/{networkTapName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkTapName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-07-15",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _ShowHelper._build_schema_network_tap_read(cls._schema_on_200)

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_network_tap_read = None

    @classmethod
    def _build_schema_network_tap_read(cls, _schema):
        if cls._schema_network_tap_read is not None:
            _schema.id = cls._schema_network_tap_read.id
            _schema.identity = cls._schema_network_tap_read.identity
            _schema.location = cls._schema_network_tap_read.location
            _schema.name = cls._schema_network_tap_read.name
            _schema.properties = cls._schema_network_tap_read.properties
            _schema.system_data = cls._schema_network_tap_read.system_data
            _schema.tags = cls._schema_network_tap_read.tags
            _schema.type = cls._schema_network_tap_read.type
            return

        cls._schema_network_tap_read = _schema_network_tap_read = AAZObjectType()

        network_tap_read = _schema_network_tap_read
        network_tap_read.id = AAZStrType(
            flags={"read_only": True},
        )
        network_tap_read.identity = AAZIdentityObjectType()
        network_tap_read.location = AAZStrType(
            flags={"required": True},
        )
        network_tap_read.name = AAZStrType(
            flags={"read_only": True},
        )
        network_tap_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        network_tap_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        network_tap_read.tags = AAZDictType()
        network_tap_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_network_tap_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_network_tap_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_network_tap_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_network_tap_read.properties
        properties.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        properties.annotation = AAZStrType()
        properties.configuration_state = AAZStrType(
            serialized_name="configurationState",
            flags={"read_only": True},
        )
        properties.destinations = AAZListType(
            flags={"required": True},
        )
        properties.last_operation = AAZObjectType(
            serialized_name="lastOperation",
            flags={"read_only": True},
        )
        properties.network_fabric_ids = AAZListType(
            serialized_name="networkFabricIds",
            flags={"read_only": True},
        )
        properties.network_packet_broker_id = AAZStrType(
            serialized_name="networkPacketBrokerId",
            flags={"required": True},
        )
        properties.polling_type = AAZStrType(
            serialized_name="pollingType",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.source_tap_rule_id = AAZStrType(
            serialized_name="sourceTapRuleId",
            flags={"read_only": True},
        )

        destinations = _schema_network_tap_read.properties.destinations
        destinations.Element = AAZObjectType()

        _element = _schema_network_tap_read.properties.destinations.Element
        _element.destination_id = AAZStrType(
            serialized_name="destinationId",
            flags={"required": True},
        )
        _element.destination_tap_rule_id = AAZStrType(
            serialized_name="destinationTapRuleId",
        )
        _element.destination_type = AAZStrType(
            serialized_name="destinationType",
            flags={"required": True},
        )
        _element.isolation_domain_properties = AAZObjectType(
            serialized_name="isolationDomainProperties",
        )
        _element.name = AAZStrType(
            flags={"required": True},
        )

        isolation_domain_properties = _schema_network_tap_read.properties.destinations.Element.isolation_domain_properties
        isolation_domain_properties.encapsulation = AAZStrType()
        isolation_domain_properties.neighbor_group_ids = AAZListType(
            serialized_name="neighborGroupIds",
        )

        neighbor_group_ids = _schema_network_tap_read.properties.destinations.Element.isolation_domain_properties.neighbor_group_ids
        neighbor_group_ids.Element = AAZStrType()

        last_operation = _schema_network_tap_read.properties.last_operation
        last_operation.details = AAZStrType(
            flags={"read_only": True},
        )

        network_fabric_ids = _schema_network_tap_read.properties.network_fabric_ids
        network_fabric_ids.Element = AAZStrType()

        system_data = _schema_network_tap_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_network_tap_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_network_tap_read.id
        _schema.identity = cls._schema_network_tap_read.identity
        _schema.location = cls._schema_network_tap_read.location
        _schema.name = cls._schema_network_tap_read.name
        _schema.properties = cls._schema_network_tap_read.properties
        _schema.system_data = cls._schema_network_tap_read.system_data
        _schema.tags = cls._schema_network_tap_read.tags
        _schema.type = cls._schema_network_tap_read.type


__all__ = ["Show"]
