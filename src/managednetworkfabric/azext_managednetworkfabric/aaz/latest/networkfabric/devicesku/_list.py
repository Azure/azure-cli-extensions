# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric devicesku list",
)
class List(AAZCommand):
    """List all Network Device SKUs in the provided subscription.

    :example: List the DeviceSKU for Subscription
        az networkfabric devicesku list --subscription <subscriptionId>
    """

    _aaz_info = {
        "version": "2023-02-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.managednetworkfabric/networkdeviceskus", "2023-02-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkDeviceSkusListBySubscription(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class NetworkDeviceSkusListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ManagedNetworkFabric/networkDeviceSkus",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-02-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.interfaces = AAZListType()
            properties.limits = AAZObjectType()
            properties.manufacturer = AAZStrType()
            properties.model = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.supported_role_types = AAZListType(
                serialized_name="supportedRoleTypes",
            )
            properties.supported_versions = AAZListType(
                serialized_name="supportedVersions",
            )

            interfaces = cls._schema_on_200.value.Element.properties.interfaces
            interfaces.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.interfaces.Element
            _element.identifier = AAZStrType()
            _element.interface_type = AAZStrType(
                serialized_name="interfaceType",
            )
            _element.supported_connector_types = AAZListType(
                serialized_name="supportedConnectorTypes",
            )

            supported_connector_types = cls._schema_on_200.value.Element.properties.interfaces.Element.supported_connector_types
            supported_connector_types.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.interfaces.Element.supported_connector_types.Element
            _element.connector_type = AAZStrType(
                serialized_name="connectorType",
            )
            _element.max_speed_in_mbps = AAZIntType(
                serialized_name="maxSpeedInMbps",
            )

            limits = cls._schema_on_200.value.Element.properties.limits
            limits.max_bidirectional_forwarding_detection_peers = AAZIntType(
                serialized_name="maxBidirectionalForwardingDetectionPeers",
            )
            limits.max_border_gateway_protocol_peers = AAZIntType(
                serialized_name="maxBorderGatewayProtocolPeers",
            )
            limits.max_sub_interfaces = AAZIntType(
                serialized_name="maxSubInterfaces",
            )
            limits.max_tunnel_interfaces = AAZIntType(
                serialized_name="maxTunnelInterfaces",
            )
            limits.max_virtual_router_functions = AAZIntType(
                serialized_name="maxVirtualRouterFunctions",
            )
            limits.physical_interface_count = AAZIntType(
                serialized_name="physicalInterfaceCount",
            )

            supported_role_types = cls._schema_on_200.value.Element.properties.supported_role_types
            supported_role_types.Element = AAZStrType()

            supported_versions = cls._schema_on_200.value.Element.properties.supported_versions
            supported_versions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.supported_versions.Element
            _element.is_current = AAZStrType(
                serialized_name="isCurrent",
            )
            _element.is_test = AAZStrType(
                serialized_name="isTest",
            )
            _element.vendor_firmware_version = AAZStrType(
                serialized_name="vendorFirmwareVersion",
            )
            _element.vendor_os_version = AAZStrType(
                serialized_name="vendorOsVersion",
            )
            _element.version = AAZStrType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
