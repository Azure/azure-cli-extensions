# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric internalnetwork update",
)
class Update(AAZCommand):
    """Update the Internal Network resource.

    :example: Update the Internal Network resource
        az networkfabric internalnetwork update --resource-group "example-rg" --l3-isolation-domain-name "example-l3domain" --resource-name "example-internalNetwork" --mtu 1500 --is-monitoring-enabled "True" --connected-ipv4-subnets "[{prefix:'10.0.0.1/21'},{prefix:'10.0.0.1/22'}]" --static-route-configuration "{bfdConfiguration:{multiplier:5,intervalInMilliSeconds:300},ipv4Routes:[{prefix:'10.1.0.0/24',nextHop:['10.0.0.1','10.0.0.2']},{prefix:'10.1.0.0/24',nextHop:['10.0.0.1','10.0.0.2']}]}" --bgp-configuration  "{bfdConfiguration:{multiplier:5,intervalInMilliSeconds:300},defaultRouteOriginate:True,allowAS:2,allowASOverride:Enable,peerASN:65047,ipv4ListenRangePrefixes:['10.1.0.0/28','10.1.0.1/28'],ipv4NeighborAddress:[{address:'10.0.0.11'},{address:'10.0.0.12'}]}" --import-route-policy "{importIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',importIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}" --export-route-policy "{exportIpv4RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy',exportIpv6RoutePolicyId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/microsoft.managednetworkfabric/routePolicies/example-routepolicy'}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric internalnetwork update --static-route-configuration "??"
        az networkfabric internalnetwork update --static-route-configuration "{ipv4-routes:??"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/l3isolationdomains/{}/internalnetworks/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Internal Network.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.l3_isolation_domain_name = AAZStrArg(
            options=["--l3domain", "--l3-isolation-domain-name"],
            help="Name of the L3 Isolation Domain.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
            nullable=True,
        )
        _args_schema.bgp_configuration = AAZObjectArg(
            options=["--bgp-configuration"],
            arg_group="Properties",
            help="BGP configuration properties.",
            nullable=True,
        )
        _args_schema.connected_ipv4_subnets = AAZListArg(
            options=["--connected-ipv4-subnets"],
            arg_group="Properties",
            help="List of Connected IPv4 Subnets.",
            nullable=True,
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _args_schema.connected_ipv6_subnets = AAZListArg(
            options=["--connected-ipv6-subnets"],
            arg_group="Properties",
            help="List of connected IPv6 Subnets.",
            nullable=True,
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        _args_schema.egress_acl_id = AAZResourceIdArg(
            options=["--egress-acl-id"],
            arg_group="Properties",
            help="Egress Acl. ARM resource ID of Access Control Lists.",
            nullable=True,
        )
        _args_schema.export_route_policy = AAZObjectArg(
            options=["--export-route-policy"],
            arg_group="Properties",
            help="Export Route Policy either IPv4 or IPv6.",
            nullable=True,
        )
        _args_schema.import_route_policy = AAZObjectArg(
            options=["--import-route-policy"],
            arg_group="Properties",
            help="Import Route Policy either IPv4 or IPv6.",
            nullable=True,
        )
        _args_schema.ingress_acl_id = AAZResourceIdArg(
            options=["--ingress-acl-id"],
            arg_group="Properties",
            help="Ingress Acl. ARM resource ID of Access Control Lists.",
            nullable=True,
        )
        _args_schema.is_monitoring_enabled = AAZStrArg(
            options=["--is-monitoring-enabled"],
            arg_group="Properties",
            help="To check whether monitoring of internal network is enabled or not.",
            nullable=True,
            enum={"False": "False", "True": "True"},
        )
        _args_schema.mtu = AAZIntArg(
            options=["--mtu"],
            arg_group="Properties",
            help="Maximum transmission unit. Default value is 1500.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=9200,
                minimum=64,
            ),
        )
        _args_schema.native_ipv4_prefix_limit = AAZObjectArg(
            options=["--native-ipv4-prefix-limit"],
            arg_group="Properties",
            help="Native IPv4 Prefix Limit Configuration properties.",
            nullable=True,
        )
        _args_schema.native_ipv6_prefix_limit = AAZObjectArg(
            options=["--native-ipv6-prefix-limit"],
            arg_group="Properties",
            help="Native IPv6 Prefix Limit Configuration properties.",
            nullable=True,
        )
        _args_schema.static_route_configuration = AAZObjectArg(
            options=["--static-route-configuration"],
            arg_group="Properties",
            help="Static Route Configuration properties.",
            nullable=True,
        )

        bgp_configuration = cls._args_schema.bgp_configuration
        bgp_configuration.allow_as = AAZIntArg(
            options=["allow-as"],
            help="Allows for routes to be received and processed even if the router detects its own ASN in the AS-Path. 0 is disable, Possible values are 1-10, default is 2.",
            fmt=AAZIntArgFormat(
                maximum=10,
                minimum=0,
            ),
        )
        bgp_configuration.allow_as_override = AAZStrArg(
            options=["allow-as-override"],
            help="Enable Or Disable state.",
            enum={"Disable": "Disable", "Enable": "Enable"},
        )
        bgp_configuration.annotation = AAZStrArg(
            options=["annotation"],
            help="Switch configuration description.",
        )
        bgp_configuration.bfd_configuration = AAZObjectArg(
            options=["bfd-configuration"],
            help="BFD configuration properties",
        )
        cls._build_args_bfd_patch_configuration_update(bgp_configuration.bfd_configuration)
        bgp_configuration.bmp_configuration = AAZObjectArg(
            options=["bmp-configuration"],
            help="InternalNetwork BMP Configuration",
        )
        bgp_configuration.default_route_originate = AAZStrArg(
            options=["default-route-originate"],
            help="Originate a defaultRoute. Ex: \"True\" | \"False\".",
            enum={"False": "False", "True": "True"},
        )
        bgp_configuration.ipv4_listen_range_prefixes = AAZListArg(
            options=["ipv4-listen-range-prefixes"],
            help="List of BGP IPv4 Listen Range prefixes.",
        )
        bgp_configuration.ipv4_neighbor_address = AAZListArg(
            options=["ipv4-neighbor-address"],
            help="List with stringified IPv4 Neighbor Addresses.",
        )
        bgp_configuration.ipv6_listen_range_prefixes = AAZListArg(
            options=["ipv6-listen-range-prefixes"],
            help="List of BGP IPv6 Listen Ranges prefixes.",
        )
        bgp_configuration.ipv6_neighbor_address = AAZListArg(
            options=["ipv6-neighbor-address"],
            help="List with stringified IPv6 Neighbor Address.",
        )
        bgp_configuration.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="Peer ASN. Example: 65047.",
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        bgp_configuration.v4_over_v6_bgp_session = AAZStrArg(
            options=["v4-over-v6-bgp-session"],
            help="V4 over V6 bgp session.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        bgp_configuration.v6_over_v4_bgp_session = AAZStrArg(
            options=["v6-over-v4-bgp-session"],
            help="v6 over v4 bgp session.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        bmp_configuration = cls._args_schema.bgp_configuration.bmp_configuration
        bmp_configuration.bmp_configuration_state = AAZStrArg(
            options=["bmp-configuration-state"],
            help="BMP Monitoring configuration state.",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        bmp_configuration.neighbor_ip_exclusions = AAZListArg(
            options=["neighbor-ip-exclusions"],
            help="BMP Collector Address.",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        neighbor_ip_exclusions = cls._args_schema.bgp_configuration.bmp_configuration.neighbor_ip_exclusions
        neighbor_ip_exclusions.Element = AAZStrArg()

        ipv4_listen_range_prefixes = cls._args_schema.bgp_configuration.ipv4_listen_range_prefixes
        ipv4_listen_range_prefixes.Element = AAZStrArg()

        ipv4_neighbor_address = cls._args_schema.bgp_configuration.ipv4_neighbor_address
        ipv4_neighbor_address.Element = AAZObjectArg()
        cls._build_args_neighbor_address_patch_update(ipv4_neighbor_address.Element)

        ipv6_listen_range_prefixes = cls._args_schema.bgp_configuration.ipv6_listen_range_prefixes
        ipv6_listen_range_prefixes.Element = AAZStrArg()

        ipv6_neighbor_address = cls._args_schema.bgp_configuration.ipv6_neighbor_address
        ipv6_neighbor_address.Element = AAZObjectArg()
        cls._build_args_neighbor_address_patch_update(ipv6_neighbor_address.Element)

        connected_ipv4_subnets = cls._args_schema.connected_ipv4_subnets
        connected_ipv4_subnets.Element = AAZObjectArg()
        cls._build_args_connected_subnet_patch_update(connected_ipv4_subnets.Element)

        connected_ipv6_subnets = cls._args_schema.connected_ipv6_subnets
        connected_ipv6_subnets.Element = AAZObjectArg()
        cls._build_args_connected_subnet_patch_update(connected_ipv6_subnets.Element)

        export_route_policy = cls._args_schema.export_route_policy
        export_route_policy.export_ipv4_route_policy_id = AAZResourceIdArg(
            options=["export-ipv4-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )
        export_route_policy.export_ipv6_route_policy_id = AAZResourceIdArg(
            options=["export-ipv6-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )

        import_route_policy = cls._args_schema.import_route_policy
        import_route_policy.import_ipv4_route_policy_id = AAZResourceIdArg(
            options=["import-ipv4-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )
        import_route_policy.import_ipv6_route_policy_id = AAZResourceIdArg(
            options=["import-ipv6-route-policy-id"],
            help="ARM resource ID of RoutePolicy.",
        )

        native_ipv4_prefix_limit = cls._args_schema.native_ipv4_prefix_limit
        native_ipv4_prefix_limit.prefix_limits = AAZListArg(
            options=["prefix-limits"],
            help="Prefix limits",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        prefix_limits = cls._args_schema.native_ipv4_prefix_limit.prefix_limits
        prefix_limits.Element = AAZObjectArg()
        cls._build_args_prefix_limit_patch_properties_update(prefix_limits.Element)

        native_ipv6_prefix_limit = cls._args_schema.native_ipv6_prefix_limit
        native_ipv6_prefix_limit.prefix_limits = AAZListArg(
            options=["prefix-limits"],
            help="Prefix limits",
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )

        prefix_limits = cls._args_schema.native_ipv6_prefix_limit.prefix_limits
        prefix_limits.Element = AAZObjectArg()
        cls._build_args_prefix_limit_patch_properties_update(prefix_limits.Element)

        static_route_configuration = cls._args_schema.static_route_configuration
        static_route_configuration.bfd_configuration = AAZObjectArg(
            options=["bfd-configuration"],
            help="BFD configuration properties",
        )
        cls._build_args_bfd_patch_configuration_update(static_route_configuration.bfd_configuration)
        static_route_configuration.ipv4_routes = AAZListArg(
            options=["ipv4-routes"],
            help="List of IPv4 Routes.",
        )
        static_route_configuration.ipv6_routes = AAZListArg(
            options=["ipv6-routes"],
            help="List of IPv6 Routes.",
        )

        ipv4_routes = cls._args_schema.static_route_configuration.ipv4_routes
        ipv4_routes.Element = AAZObjectArg()
        cls._build_args_static_route_patch_properties_update(ipv4_routes.Element)

        ipv6_routes = cls._args_schema.static_route_configuration.ipv6_routes
        ipv6_routes.Element = AAZObjectArg()
        cls._build_args_static_route_patch_properties_update(ipv6_routes.Element)
        return cls._args_schema

    _args_bfd_patch_configuration_update = None

    @classmethod
    def _build_args_bfd_patch_configuration_update(cls, _schema):
        if cls._args_bfd_patch_configuration_update is not None:
            _schema.interval_in_milli_seconds = cls._args_bfd_patch_configuration_update.interval_in_milli_seconds
            _schema.multiplier = cls._args_bfd_patch_configuration_update.multiplier
            return

        cls._args_bfd_patch_configuration_update = AAZObjectArg()

        bfd_patch_configuration_update = cls._args_bfd_patch_configuration_update
        bfd_patch_configuration_update.interval_in_milli_seconds = AAZIntArg(
            options=["interval-in-milli-seconds"],
            help="Interval in milliseconds. Example: 300.",
        )
        bfd_patch_configuration_update.multiplier = AAZIntArg(
            options=["multiplier"],
            help="Multiplier for the Bfd Configuration. Example: 5.",
        )

        _schema.interval_in_milli_seconds = cls._args_bfd_patch_configuration_update.interval_in_milli_seconds
        _schema.multiplier = cls._args_bfd_patch_configuration_update.multiplier

    _args_connected_subnet_patch_update = None

    @classmethod
    def _build_args_connected_subnet_patch_update(cls, _schema):
        if cls._args_connected_subnet_patch_update is not None:
            _schema.annotation = cls._args_connected_subnet_patch_update.annotation
            _schema.prefix = cls._args_connected_subnet_patch_update.prefix
            return

        cls._args_connected_subnet_patch_update = AAZObjectArg()

        connected_subnet_patch_update = cls._args_connected_subnet_patch_update
        connected_subnet_patch_update.annotation = AAZStrArg(
            options=["annotation"],
            help="Switch configuration description.",
        )
        connected_subnet_patch_update.prefix = AAZStrArg(
            options=["prefix"],
            help="Prefix of the Connected Subnet.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        _schema.annotation = cls._args_connected_subnet_patch_update.annotation
        _schema.prefix = cls._args_connected_subnet_patch_update.prefix

    _args_neighbor_address_patch_update = None

    @classmethod
    def _build_args_neighbor_address_patch_update(cls, _schema):
        if cls._args_neighbor_address_patch_update is not None:
            _schema.address = cls._args_neighbor_address_patch_update.address
            return

        cls._args_neighbor_address_patch_update = AAZObjectArg()

        neighbor_address_patch_update = cls._args_neighbor_address_patch_update
        neighbor_address_patch_update.address = AAZStrArg(
            options=["address"],
            help="IP Address.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        _schema.address = cls._args_neighbor_address_patch_update.address

    _args_prefix_limit_patch_properties_update = None

    @classmethod
    def _build_args_prefix_limit_patch_properties_update(cls, _schema):
        if cls._args_prefix_limit_patch_properties_update is not None:
            _schema.idle_time_expiry = cls._args_prefix_limit_patch_properties_update.idle_time_expiry
            _schema.maximum_routes = cls._args_prefix_limit_patch_properties_update.maximum_routes
            _schema.soft_limit = cls._args_prefix_limit_patch_properties_update.soft_limit
            return

        cls._args_prefix_limit_patch_properties_update = AAZObjectArg()

        prefix_limit_patch_properties_update = cls._args_prefix_limit_patch_properties_update
        prefix_limit_patch_properties_update.idle_time_expiry = AAZIntArg(
            options=["idle-time-expiry"],
            help="Idle time expiry in seconds.",
        )
        prefix_limit_patch_properties_update.maximum_routes = AAZIntArg(
            options=["maximum-routes"],
            help="Maximum routes allowed.",
        )
        prefix_limit_patch_properties_update.soft_limit = AAZIntArg(
            options=["soft-limit"],
            help="Limit at which route prefixes a warning is generate.",
        )

        _schema.idle_time_expiry = cls._args_prefix_limit_patch_properties_update.idle_time_expiry
        _schema.maximum_routes = cls._args_prefix_limit_patch_properties_update.maximum_routes
        _schema.soft_limit = cls._args_prefix_limit_patch_properties_update.soft_limit

    _args_static_route_patch_properties_update = None

    @classmethod
    def _build_args_static_route_patch_properties_update(cls, _schema):
        if cls._args_static_route_patch_properties_update is not None:
            _schema.next_hop = cls._args_static_route_patch_properties_update.next_hop
            _schema.prefix = cls._args_static_route_patch_properties_update.prefix
            return

        cls._args_static_route_patch_properties_update = AAZObjectArg()

        static_route_patch_properties_update = cls._args_static_route_patch_properties_update
        static_route_patch_properties_update.next_hop = AAZListArg(
            options=["next-hop"],
            help="List of next hop addresses.",
            required=True,
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        static_route_patch_properties_update.prefix = AAZStrArg(
            options=["prefix"],
            help="Prefix of the route.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        next_hop = cls._args_static_route_patch_properties_update.next_hop
        next_hop.Element = AAZStrArg()

        _schema.next_hop = cls._args_static_route_patch_properties_update.next_hop
        _schema.prefix = cls._args_static_route_patch_properties_update.prefix

    def _execute_operations(self):
        self.pre_operations()
        yield self.InternalNetworksUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class InternalNetworksUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/l3IsolationDomains/{l3IsolationDomainName}/internalNetworks/{internalNetworkName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "internalNetworkName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "l3IsolationDomainName", self.ctx.args.l3_isolation_domain_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation", typ_kwargs={"nullable": True})
                properties.set_prop("bgpConfiguration", AAZObjectType, ".bgp_configuration", typ_kwargs={"nullable": True})
                properties.set_prop("connectedIPv4Subnets", AAZListType, ".connected_ipv4_subnets", typ_kwargs={"nullable": True})
                properties.set_prop("connectedIPv6Subnets", AAZListType, ".connected_ipv6_subnets", typ_kwargs={"nullable": True})
                properties.set_prop("egressAclId", AAZStrType, ".egress_acl_id", typ_kwargs={"nullable": True})
                properties.set_prop("exportRoutePolicy", AAZObjectType, ".export_route_policy", typ_kwargs={"nullable": True})
                properties.set_prop("importRoutePolicy", AAZObjectType, ".import_route_policy", typ_kwargs={"nullable": True})
                properties.set_prop("ingressAclId", AAZStrType, ".ingress_acl_id", typ_kwargs={"nullable": True})
                properties.set_prop("isMonitoringEnabled", AAZStrType, ".is_monitoring_enabled", typ_kwargs={"nullable": True})
                properties.set_prop("mtu", AAZIntType, ".mtu", typ_kwargs={"nullable": True})
                properties.set_prop("nativeIpv4PrefixLimit", AAZObjectType, ".native_ipv4_prefix_limit", typ_kwargs={"nullable": True})
                properties.set_prop("nativeIpv6PrefixLimit", AAZObjectType, ".native_ipv6_prefix_limit", typ_kwargs={"nullable": True})
                properties.set_prop("staticRouteConfiguration", AAZObjectType, ".static_route_configuration", typ_kwargs={"nullable": True})

            bgp_configuration = _builder.get(".properties.bgpConfiguration")
            if bgp_configuration is not None:
                bgp_configuration.set_prop("allowAS", AAZIntType, ".allow_as")
                bgp_configuration.set_prop("allowASOverride", AAZStrType, ".allow_as_override")
                bgp_configuration.set_prop("annotation", AAZStrType, ".annotation")
                _UpdateHelper._build_schema_bfd_patch_configuration_update(bgp_configuration.set_prop("bfdConfiguration", AAZObjectType, ".bfd_configuration"))
                bgp_configuration.set_prop("bmpConfiguration", AAZObjectType, ".bmp_configuration")
                bgp_configuration.set_prop("defaultRouteOriginate", AAZStrType, ".default_route_originate")
                bgp_configuration.set_prop("ipv4ListenRangePrefixes", AAZListType, ".ipv4_listen_range_prefixes")
                bgp_configuration.set_prop("ipv4NeighborAddress", AAZListType, ".ipv4_neighbor_address")
                bgp_configuration.set_prop("ipv6ListenRangePrefixes", AAZListType, ".ipv6_listen_range_prefixes")
                bgp_configuration.set_prop("ipv6NeighborAddress", AAZListType, ".ipv6_neighbor_address")
                bgp_configuration.set_prop("peerASN", AAZIntType, ".peer_asn")
                bgp_configuration.set_prop("v4OverV6BgpSession", AAZStrType, ".v4_over_v6_bgp_session")
                bgp_configuration.set_prop("v6OverV4BgpSession", AAZStrType, ".v6_over_v4_bgp_session")

            bmp_configuration = _builder.get(".properties.bgpConfiguration.bmpConfiguration")
            if bmp_configuration is not None:
                bmp_configuration.set_prop("bmpConfigurationState", AAZStrType, ".bmp_configuration_state")
                bmp_configuration.set_prop("neighborIpExclusions", AAZListType, ".neighbor_ip_exclusions")

            neighbor_ip_exclusions = _builder.get(".properties.bgpConfiguration.bmpConfiguration.neighborIpExclusions")
            if neighbor_ip_exclusions is not None:
                neighbor_ip_exclusions.set_elements(AAZStrType, ".")

            ipv4_listen_range_prefixes = _builder.get(".properties.bgpConfiguration.ipv4ListenRangePrefixes")
            if ipv4_listen_range_prefixes is not None:
                ipv4_listen_range_prefixes.set_elements(AAZStrType, ".")

            ipv4_neighbor_address = _builder.get(".properties.bgpConfiguration.ipv4NeighborAddress")
            if ipv4_neighbor_address is not None:
                _UpdateHelper._build_schema_neighbor_address_patch_update(ipv4_neighbor_address.set_elements(AAZObjectType, "."))

            ipv6_listen_range_prefixes = _builder.get(".properties.bgpConfiguration.ipv6ListenRangePrefixes")
            if ipv6_listen_range_prefixes is not None:
                ipv6_listen_range_prefixes.set_elements(AAZStrType, ".")

            ipv6_neighbor_address = _builder.get(".properties.bgpConfiguration.ipv6NeighborAddress")
            if ipv6_neighbor_address is not None:
                _UpdateHelper._build_schema_neighbor_address_patch_update(ipv6_neighbor_address.set_elements(AAZObjectType, "."))

            connected_i_pv4_subnets = _builder.get(".properties.connectedIPv4Subnets")
            if connected_i_pv4_subnets is not None:
                _UpdateHelper._build_schema_connected_subnet_patch_update(connected_i_pv4_subnets.set_elements(AAZObjectType, "."))

            connected_i_pv6_subnets = _builder.get(".properties.connectedIPv6Subnets")
            if connected_i_pv6_subnets is not None:
                _UpdateHelper._build_schema_connected_subnet_patch_update(connected_i_pv6_subnets.set_elements(AAZObjectType, "."))

            export_route_policy = _builder.get(".properties.exportRoutePolicy")
            if export_route_policy is not None:
                export_route_policy.set_prop("exportIpv4RoutePolicyId", AAZStrType, ".export_ipv4_route_policy_id")
                export_route_policy.set_prop("exportIpv6RoutePolicyId", AAZStrType, ".export_ipv6_route_policy_id")

            import_route_policy = _builder.get(".properties.importRoutePolicy")
            if import_route_policy is not None:
                import_route_policy.set_prop("importIpv4RoutePolicyId", AAZStrType, ".import_ipv4_route_policy_id")
                import_route_policy.set_prop("importIpv6RoutePolicyId", AAZStrType, ".import_ipv6_route_policy_id")

            native_ipv4_prefix_limit = _builder.get(".properties.nativeIpv4PrefixLimit")
            if native_ipv4_prefix_limit is not None:
                native_ipv4_prefix_limit.set_prop("prefixLimits", AAZListType, ".prefix_limits")

            prefix_limits = _builder.get(".properties.nativeIpv4PrefixLimit.prefixLimits")
            if prefix_limits is not None:
                _UpdateHelper._build_schema_prefix_limit_patch_properties_update(prefix_limits.set_elements(AAZObjectType, "."))

            native_ipv6_prefix_limit = _builder.get(".properties.nativeIpv6PrefixLimit")
            if native_ipv6_prefix_limit is not None:
                native_ipv6_prefix_limit.set_prop("prefixLimits", AAZListType, ".prefix_limits")

            prefix_limits = _builder.get(".properties.nativeIpv6PrefixLimit.prefixLimits")
            if prefix_limits is not None:
                _UpdateHelper._build_schema_prefix_limit_patch_properties_update(prefix_limits.set_elements(AAZObjectType, "."))

            static_route_configuration = _builder.get(".properties.staticRouteConfiguration")
            if static_route_configuration is not None:
                _UpdateHelper._build_schema_bfd_patch_configuration_update(static_route_configuration.set_prop("bfdConfiguration", AAZObjectType, ".bfd_configuration"))
                static_route_configuration.set_prop("ipv4Routes", AAZListType, ".ipv4_routes")
                static_route_configuration.set_prop("ipv6Routes", AAZListType, ".ipv6_routes")

            ipv4_routes = _builder.get(".properties.staticRouteConfiguration.ipv4Routes")
            if ipv4_routes is not None:
                _UpdateHelper._build_schema_static_route_patch_properties_update(ipv4_routes.set_elements(AAZObjectType, "."))

            ipv6_routes = _builder.get(".properties.staticRouteConfiguration.ipv6Routes")
            if ipv6_routes is not None:
                _UpdateHelper._build_schema_static_route_patch_properties_update(ipv6_routes.set_elements(AAZObjectType, "."))

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.bgp_configuration = AAZObjectType(
                serialized_name="bgpConfiguration",
            )
            properties.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            properties.connected_i_pv4_subnets = AAZListType(
                serialized_name="connectedIPv4Subnets",
            )
            properties.connected_i_pv6_subnets = AAZListType(
                serialized_name="connectedIPv6Subnets",
            )
            properties.egress_acl_id = AAZStrType(
                serialized_name="egressAclId",
            )
            properties.export_route_policy = AAZObjectType(
                serialized_name="exportRoutePolicy",
            )
            properties.extension = AAZStrType()
            properties.import_route_policy = AAZObjectType(
                serialized_name="importRoutePolicy",
            )
            properties.ingress_acl_id = AAZStrType(
                serialized_name="ingressAclId",
            )
            properties.is_monitoring_enabled = AAZStrType(
                serialized_name="isMonitoringEnabled",
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.mtu = AAZIntType()
            properties.native_ipv4_prefix_limit = AAZObjectType(
                serialized_name="nativeIpv4PrefixLimit",
            )
            properties.native_ipv6_prefix_limit = AAZObjectType(
                serialized_name="nativeIpv6PrefixLimit",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.static_route_configuration = AAZObjectType(
                serialized_name="staticRouteConfiguration",
            )
            properties.vlan_id = AAZIntType(
                serialized_name="vlanId",
                flags={"required": True},
            )

            bgp_configuration = cls._schema_on_200.properties.bgp_configuration
            bgp_configuration.allow_as = AAZIntType(
                serialized_name="allowAS",
            )
            bgp_configuration.allow_as_override = AAZStrType(
                serialized_name="allowASOverride",
            )
            bgp_configuration.annotation = AAZStrType()
            bgp_configuration.bfd_configuration = AAZObjectType(
                serialized_name="bfdConfiguration",
            )
            _UpdateHelper._build_schema_bfd_configuration_read(bgp_configuration.bfd_configuration)
            bgp_configuration.bmp_configuration = AAZObjectType(
                serialized_name="bmpConfiguration",
            )
            bgp_configuration.default_route_originate = AAZStrType(
                serialized_name="defaultRouteOriginate",
            )
            bgp_configuration.fabric_asn = AAZIntType(
                serialized_name="fabricASN",
                flags={"read_only": True},
            )
            bgp_configuration.ipv4_listen_range_prefixes = AAZListType(
                serialized_name="ipv4ListenRangePrefixes",
            )
            bgp_configuration.ipv4_neighbor_address = AAZListType(
                serialized_name="ipv4NeighborAddress",
            )
            bgp_configuration.ipv6_listen_range_prefixes = AAZListType(
                serialized_name="ipv6ListenRangePrefixes",
            )
            bgp_configuration.ipv6_neighbor_address = AAZListType(
                serialized_name="ipv6NeighborAddress",
            )
            bgp_configuration.peer_asn = AAZIntType(
                serialized_name="peerASN",
                flags={"required": True},
            )
            bgp_configuration.v4_over_v6_bgp_session = AAZStrType(
                serialized_name="v4OverV6BgpSession",
            )
            bgp_configuration.v6_over_v4_bgp_session = AAZStrType(
                serialized_name="v6OverV4BgpSession",
            )

            bmp_configuration = cls._schema_on_200.properties.bgp_configuration.bmp_configuration
            bmp_configuration.bmp_configuration_state = AAZStrType(
                serialized_name="bmpConfigurationState",
            )
            bmp_configuration.neighbor_ip_exclusions = AAZListType(
                serialized_name="neighborIpExclusions",
            )

            neighbor_ip_exclusions = cls._schema_on_200.properties.bgp_configuration.bmp_configuration.neighbor_ip_exclusions
            neighbor_ip_exclusions.Element = AAZStrType()

            ipv4_listen_range_prefixes = cls._schema_on_200.properties.bgp_configuration.ipv4_listen_range_prefixes
            ipv4_listen_range_prefixes.Element = AAZStrType()

            ipv4_neighbor_address = cls._schema_on_200.properties.bgp_configuration.ipv4_neighbor_address
            ipv4_neighbor_address.Element = AAZObjectType()
            _UpdateHelper._build_schema_neighbor_address_read(ipv4_neighbor_address.Element)

            ipv6_listen_range_prefixes = cls._schema_on_200.properties.bgp_configuration.ipv6_listen_range_prefixes
            ipv6_listen_range_prefixes.Element = AAZStrType()

            ipv6_neighbor_address = cls._schema_on_200.properties.bgp_configuration.ipv6_neighbor_address
            ipv6_neighbor_address.Element = AAZObjectType()
            _UpdateHelper._build_schema_neighbor_address_read(ipv6_neighbor_address.Element)

            connected_i_pv4_subnets = cls._schema_on_200.properties.connected_i_pv4_subnets
            connected_i_pv4_subnets.Element = AAZObjectType()
            _UpdateHelper._build_schema_connected_subnet_read(connected_i_pv4_subnets.Element)

            connected_i_pv6_subnets = cls._schema_on_200.properties.connected_i_pv6_subnets
            connected_i_pv6_subnets.Element = AAZObjectType()
            _UpdateHelper._build_schema_connected_subnet_read(connected_i_pv6_subnets.Element)

            export_route_policy = cls._schema_on_200.properties.export_route_policy
            export_route_policy.export_ipv4_route_policy_id = AAZStrType(
                serialized_name="exportIpv4RoutePolicyId",
            )
            export_route_policy.export_ipv6_route_policy_id = AAZStrType(
                serialized_name="exportIpv6RoutePolicyId",
            )

            import_route_policy = cls._schema_on_200.properties.import_route_policy
            import_route_policy.import_ipv4_route_policy_id = AAZStrType(
                serialized_name="importIpv4RoutePolicyId",
            )
            import_route_policy.import_ipv6_route_policy_id = AAZStrType(
                serialized_name="importIpv6RoutePolicyId",
            )

            last_operation = cls._schema_on_200.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            native_ipv4_prefix_limit = cls._schema_on_200.properties.native_ipv4_prefix_limit
            native_ipv4_prefix_limit.prefix_limits = AAZListType(
                serialized_name="prefixLimits",
            )

            prefix_limits = cls._schema_on_200.properties.native_ipv4_prefix_limit.prefix_limits
            prefix_limits.Element = AAZObjectType()
            _UpdateHelper._build_schema_prefix_limit_properties_read(prefix_limits.Element)

            native_ipv6_prefix_limit = cls._schema_on_200.properties.native_ipv6_prefix_limit
            native_ipv6_prefix_limit.prefix_limits = AAZListType(
                serialized_name="prefixLimits",
            )

            prefix_limits = cls._schema_on_200.properties.native_ipv6_prefix_limit.prefix_limits
            prefix_limits.Element = AAZObjectType()
            _UpdateHelper._build_schema_prefix_limit_properties_read(prefix_limits.Element)

            static_route_configuration = cls._schema_on_200.properties.static_route_configuration
            static_route_configuration.bfd_configuration = AAZObjectType(
                serialized_name="bfdConfiguration",
            )
            _UpdateHelper._build_schema_bfd_configuration_read(static_route_configuration.bfd_configuration)
            static_route_configuration.extension = AAZStrType()
            static_route_configuration.ipv4_routes = AAZListType(
                serialized_name="ipv4Routes",
            )
            static_route_configuration.ipv6_routes = AAZListType(
                serialized_name="ipv6Routes",
            )

            ipv4_routes = cls._schema_on_200.properties.static_route_configuration.ipv4_routes
            ipv4_routes.Element = AAZObjectType()
            _UpdateHelper._build_schema_static_route_properties_read(ipv4_routes.Element)

            ipv6_routes = cls._schema_on_200.properties.static_route_configuration.ipv6_routes
            ipv6_routes.Element = AAZObjectType()
            _UpdateHelper._build_schema_static_route_properties_read(ipv6_routes.Element)

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_bfd_patch_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("intervalInMilliSeconds", AAZIntType, ".interval_in_milli_seconds")
        _builder.set_prop("multiplier", AAZIntType, ".multiplier")

    @classmethod
    def _build_schema_connected_subnet_patch_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("annotation", AAZStrType, ".annotation")
        _builder.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_neighbor_address_patch_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("address", AAZStrType, ".address")

    @classmethod
    def _build_schema_prefix_limit_patch_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("idleTimeExpiry", AAZIntType, ".idle_time_expiry")
        _builder.set_prop("maximumRoutes", AAZIntType, ".maximum_routes")
        _builder.set_prop("softLimit", AAZIntType, ".soft_limit")

    @classmethod
    def _build_schema_static_route_patch_properties_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("nextHop", AAZListType, ".next_hop", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

        next_hop = _builder.get(".nextHop")
        if next_hop is not None:
            next_hop.set_elements(AAZStrType, ".")

    _schema_bfd_configuration_read = None

    @classmethod
    def _build_schema_bfd_configuration_read(cls, _schema):
        if cls._schema_bfd_configuration_read is not None:
            _schema.administrative_state = cls._schema_bfd_configuration_read.administrative_state
            _schema.interval_in_milli_seconds = cls._schema_bfd_configuration_read.interval_in_milli_seconds
            _schema.multiplier = cls._schema_bfd_configuration_read.multiplier
            return

        cls._schema_bfd_configuration_read = _schema_bfd_configuration_read = AAZObjectType()

        bfd_configuration_read = _schema_bfd_configuration_read
        bfd_configuration_read.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        bfd_configuration_read.interval_in_milli_seconds = AAZIntType(
            serialized_name="intervalInMilliSeconds",
        )
        bfd_configuration_read.multiplier = AAZIntType()

        _schema.administrative_state = cls._schema_bfd_configuration_read.administrative_state
        _schema.interval_in_milli_seconds = cls._schema_bfd_configuration_read.interval_in_milli_seconds
        _schema.multiplier = cls._schema_bfd_configuration_read.multiplier

    _schema_connected_subnet_read = None

    @classmethod
    def _build_schema_connected_subnet_read(cls, _schema):
        if cls._schema_connected_subnet_read is not None:
            _schema.annotation = cls._schema_connected_subnet_read.annotation
            _schema.prefix = cls._schema_connected_subnet_read.prefix
            return

        cls._schema_connected_subnet_read = _schema_connected_subnet_read = AAZObjectType()

        connected_subnet_read = _schema_connected_subnet_read
        connected_subnet_read.annotation = AAZStrType()
        connected_subnet_read.prefix = AAZStrType(
            flags={"required": True},
        )

        _schema.annotation = cls._schema_connected_subnet_read.annotation
        _schema.prefix = cls._schema_connected_subnet_read.prefix

    _schema_neighbor_address_read = None

    @classmethod
    def _build_schema_neighbor_address_read(cls, _schema):
        if cls._schema_neighbor_address_read is not None:
            _schema.address = cls._schema_neighbor_address_read.address
            _schema.bfd_administrative_state = cls._schema_neighbor_address_read.bfd_administrative_state
            _schema.bgp_administrative_state = cls._schema_neighbor_address_read.bgp_administrative_state
            _schema.configuration_state = cls._schema_neighbor_address_read.configuration_state
            return

        cls._schema_neighbor_address_read = _schema_neighbor_address_read = AAZObjectType()

        neighbor_address_read = _schema_neighbor_address_read
        neighbor_address_read.address = AAZStrType()
        neighbor_address_read.bfd_administrative_state = AAZStrType(
            serialized_name="bfdAdministrativeState",
            flags={"read_only": True},
        )
        neighbor_address_read.bgp_administrative_state = AAZStrType(
            serialized_name="bgpAdministrativeState",
            flags={"read_only": True},
        )
        neighbor_address_read.configuration_state = AAZStrType(
            serialized_name="configurationState",
            flags={"read_only": True},
        )

        _schema.address = cls._schema_neighbor_address_read.address
        _schema.bfd_administrative_state = cls._schema_neighbor_address_read.bfd_administrative_state
        _schema.bgp_administrative_state = cls._schema_neighbor_address_read.bgp_administrative_state
        _schema.configuration_state = cls._schema_neighbor_address_read.configuration_state

    _schema_prefix_limit_properties_read = None

    @classmethod
    def _build_schema_prefix_limit_properties_read(cls, _schema):
        if cls._schema_prefix_limit_properties_read is not None:
            _schema.idle_time_expiry = cls._schema_prefix_limit_properties_read.idle_time_expiry
            _schema.maximum_routes = cls._schema_prefix_limit_properties_read.maximum_routes
            _schema.threshold = cls._schema_prefix_limit_properties_read.threshold
            return

        cls._schema_prefix_limit_properties_read = _schema_prefix_limit_properties_read = AAZObjectType()

        prefix_limit_properties_read = _schema_prefix_limit_properties_read
        prefix_limit_properties_read.idle_time_expiry = AAZIntType(
            serialized_name="idleTimeExpiry",
        )
        prefix_limit_properties_read.maximum_routes = AAZIntType(
            serialized_name="maximumRoutes",
        )
        prefix_limit_properties_read.threshold = AAZIntType()

        _schema.idle_time_expiry = cls._schema_prefix_limit_properties_read.idle_time_expiry
        _schema.maximum_routes = cls._schema_prefix_limit_properties_read.maximum_routes
        _schema.threshold = cls._schema_prefix_limit_properties_read.threshold

    _schema_static_route_properties_read = None

    @classmethod
    def _build_schema_static_route_properties_read(cls, _schema):
        if cls._schema_static_route_properties_read is not None:
            _schema.next_hop = cls._schema_static_route_properties_read.next_hop
            _schema.prefix = cls._schema_static_route_properties_read.prefix
            return

        cls._schema_static_route_properties_read = _schema_static_route_properties_read = AAZObjectType()

        static_route_properties_read = _schema_static_route_properties_read
        static_route_properties_read.next_hop = AAZListType(
            serialized_name="nextHop",
            flags={"required": True},
        )
        static_route_properties_read.prefix = AAZStrType(
            flags={"required": True},
        )

        next_hop = _schema_static_route_properties_read.next_hop
        next_hop.Element = AAZStrType()

        _schema.next_hop = cls._schema_static_route_properties_read.next_hop
        _schema.prefix = cls._schema_static_route_properties_read.prefix


__all__ = ["Update"]
