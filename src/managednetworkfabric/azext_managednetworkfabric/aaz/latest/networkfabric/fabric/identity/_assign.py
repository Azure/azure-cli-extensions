# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric fabric identity assign",
)
class Assign(AAZCommand):
    """Assign the user or system managed identities.
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkfabrics/{}", "2024-06-15-preview", "identity"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.network_fabric_name = AAZStrArg(
            options=["-n", "--name", "--network-fabric-name"],
            help="Name of the Network Fabric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Resource.identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Resource.identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Resource.identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NetworkFabricsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.selectors.subresource.required())
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.post_instance_update(self.ctx.selectors.subresource.required())
        yield self.NetworkFabricsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.identity

        def _set(self, value):
            result = self.ctx.vars.instance
            result.identity = value
            return

    class NetworkFabricsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabrics/{networkFabricName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricName", self.ctx.args.network_fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _AssignHelper._build_schema_network_fabric_read(cls._schema_on_200)

            return cls._schema_on_200

    class NetworkFabricsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabrics/{networkFabricName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricName", self.ctx.args.network_fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _AssignHelper._build_schema_network_fabric_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.selectors.subresource.required())

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZIdentityObjectType
            )
            _builder.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "assign"}})
            _builder.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "assign"}})

            user_assigned = _builder.get(".userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            return _instance_value


class _AssignHelper:
    """Helper class for Assign"""

    _schema_network_fabric_read = None

    @classmethod
    def _build_schema_network_fabric_read(cls, _schema):
        if cls._schema_network_fabric_read is not None:
            _schema.id = cls._schema_network_fabric_read.id
            _schema.identity = cls._schema_network_fabric_read.identity
            _schema.location = cls._schema_network_fabric_read.location
            _schema.name = cls._schema_network_fabric_read.name
            _schema.properties = cls._schema_network_fabric_read.properties
            _schema.system_data = cls._schema_network_fabric_read.system_data
            _schema.tags = cls._schema_network_fabric_read.tags
            _schema.type = cls._schema_network_fabric_read.type
            return

        cls._schema_network_fabric_read = _schema_network_fabric_read = AAZObjectType()

        network_fabric_read = _schema_network_fabric_read
        network_fabric_read.id = AAZStrType(
            flags={"read_only": True},
        )
        network_fabric_read.identity = AAZIdentityObjectType()
        network_fabric_read.location = AAZStrType(
            flags={"required": True},
        )
        network_fabric_read.name = AAZStrType(
            flags={"read_only": True},
        )
        network_fabric_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        network_fabric_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        network_fabric_read.tags = AAZDictType()
        network_fabric_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_network_fabric_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_network_fabric_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType(
            nullable=True,
        )

        _element = _schema_network_fabric_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_network_fabric_read.properties
        properties.active_commit_batches = AAZListType(
            serialized_name="activeCommitBatches",
            flags={"read_only": True},
        )
        properties.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        properties.annotation = AAZStrType()
        properties.configuration_state = AAZStrType(
            serialized_name="configurationState",
            flags={"read_only": True},
        )
        properties.control_plane_acls = AAZListType(
            serialized_name="controlPlaneAcls",
        )
        properties.fabric_asn = AAZIntType(
            serialized_name="fabricASN",
            flags={"required": True},
        )
        properties.fabric_locks = AAZListType(
            serialized_name="fabricLocks",
            flags={"read_only": True},
        )
        properties.fabric_version = AAZStrType(
            serialized_name="fabricVersion",
        )
        properties.feature_flags = AAZListType(
            serialized_name="featureFlags",
            flags={"read_only": True},
        )
        properties.hardware_alert_threshold = AAZIntType(
            serialized_name="hardwareAlertThreshold",
        )
        properties.ipv4_prefix = AAZStrType(
            serialized_name="ipv4Prefix",
            flags={"required": True},
        )
        properties.ipv6_prefix = AAZStrType(
            serialized_name="ipv6Prefix",
        )
        properties.l2_isolation_domains = AAZListType(
            serialized_name="l2IsolationDomains",
            flags={"read_only": True},
        )
        properties.l3_isolation_domains = AAZListType(
            serialized_name="l3IsolationDomains",
            flags={"read_only": True},
        )
        properties.last_operation = AAZObjectType(
            serialized_name="lastOperation",
            flags={"read_only": True},
        )
        properties.management_network_configuration = AAZObjectType(
            serialized_name="managementNetworkConfiguration",
            flags={"required": True},
        )
        properties.network_fabric_controller_id = AAZStrType(
            serialized_name="networkFabricControllerId",
            flags={"required": True},
        )
        properties.network_fabric_sku = AAZStrType(
            serialized_name="networkFabricSku",
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rack_count = AAZIntType(
            serialized_name="rackCount",
        )
        properties.racks = AAZListType(
            flags={"read_only": True},
        )
        properties.router_ids = AAZListType(
            serialized_name="routerIds",
            flags={"read_only": True},
        )
        properties.server_count_per_rack = AAZIntType(
            serialized_name="serverCountPerRack",
            flags={"required": True},
        )
        properties.storage_account_configuration = AAZObjectType(
            serialized_name="storageAccountConfiguration",
        )
        properties.storage_array_count = AAZIntType(
            serialized_name="storageArrayCount",
        )
        properties.terminal_server_configuration = AAZObjectType(
            serialized_name="terminalServerConfiguration",
            flags={"required": True},
        )
        properties.trusted_ip_prefixes = AAZListType(
            serialized_name="trustedIpPrefixes",
        )
        properties.unique_rd_configuration = AAZObjectType(
            serialized_name="uniqueRdConfiguration",
        )

        active_commit_batches = _schema_network_fabric_read.properties.active_commit_batches
        active_commit_batches.Element = AAZStrType()

        control_plane_acls = _schema_network_fabric_read.properties.control_plane_acls
        control_plane_acls.Element = AAZStrType()

        fabric_locks = _schema_network_fabric_read.properties.fabric_locks
        fabric_locks.Element = AAZObjectType()

        _element = _schema_network_fabric_read.properties.fabric_locks.Element
        _element.lock_state = AAZStrType(
            serialized_name="lockState",
        )
        _element.lock_type = AAZStrType(
            serialized_name="lockType",
        )

        feature_flags = _schema_network_fabric_read.properties.feature_flags
        feature_flags.Element = AAZObjectType()

        _element = _schema_network_fabric_read.properties.feature_flags.Element
        _element.feature_flag_name = AAZStrType(
            serialized_name="featureFlagName",
        )
        _element.feature_flag_value = AAZStrType(
            serialized_name="featureFlagValue",
        )

        l2_isolation_domains = _schema_network_fabric_read.properties.l2_isolation_domains
        l2_isolation_domains.Element = AAZStrType()

        l3_isolation_domains = _schema_network_fabric_read.properties.l3_isolation_domains
        l3_isolation_domains.Element = AAZStrType()

        last_operation = _schema_network_fabric_read.properties.last_operation
        last_operation.details = AAZStrType(
            flags={"read_only": True},
        )

        management_network_configuration = _schema_network_fabric_read.properties.management_network_configuration
        management_network_configuration.infrastructure_vpn_configuration = AAZObjectType(
            serialized_name="infrastructureVpnConfiguration",
            flags={"required": True},
        )
        cls._build_schema_vpn_configuration_properties_read(management_network_configuration.infrastructure_vpn_configuration)
        management_network_configuration.workload_vpn_configuration = AAZObjectType(
            serialized_name="workloadVpnConfiguration",
            flags={"required": True},
        )
        cls._build_schema_vpn_configuration_properties_read(management_network_configuration.workload_vpn_configuration)

        racks = _schema_network_fabric_read.properties.racks
        racks.Element = AAZStrType()

        router_ids = _schema_network_fabric_read.properties.router_ids
        router_ids.Element = AAZStrType()

        storage_account_configuration = _schema_network_fabric_read.properties.storage_account_configuration
        storage_account_configuration.storage_account_id = AAZStrType(
            serialized_name="storageAccountId",
        )
        storage_account_configuration.storage_account_identity = AAZObjectType(
            serialized_name="storageAccountIdentity",
        )

        storage_account_identity = _schema_network_fabric_read.properties.storage_account_configuration.storage_account_identity
        storage_account_identity.identity_type = AAZStrType(
            serialized_name="identityType",
            flags={"required": True},
        )
        storage_account_identity.user_assigned_identity_resource_id = AAZStrType(
            serialized_name="userAssignedIdentityResourceId",
        )

        terminal_server_configuration = _schema_network_fabric_read.properties.terminal_server_configuration
        terminal_server_configuration.network_device_id = AAZStrType(
            serialized_name="networkDeviceId",
            flags={"read_only": True},
        )
        terminal_server_configuration.password = AAZStrType(
            flags={"secret": True},
        )
        terminal_server_configuration.primary_ipv4_prefix = AAZStrType(
            serialized_name="primaryIpv4Prefix",
            flags={"required": True},
        )
        terminal_server_configuration.primary_ipv6_prefix = AAZStrType(
            serialized_name="primaryIpv6Prefix",
        )
        terminal_server_configuration.secondary_ipv4_prefix = AAZStrType(
            serialized_name="secondaryIpv4Prefix",
            flags={"required": True},
        )
        terminal_server_configuration.secondary_ipv6_prefix = AAZStrType(
            serialized_name="secondaryIpv6Prefix",
        )
        terminal_server_configuration.serial_number = AAZStrType(
            serialized_name="serialNumber",
        )
        terminal_server_configuration.username = AAZStrType(
            flags={"required": True},
        )

        trusted_ip_prefixes = _schema_network_fabric_read.properties.trusted_ip_prefixes
        trusted_ip_prefixes.Element = AAZStrType()

        unique_rd_configuration = _schema_network_fabric_read.properties.unique_rd_configuration
        unique_rd_configuration.nni_derived_unique_rd_configuration_state = AAZStrType(
            serialized_name="nniDerivedUniqueRdConfigurationState",
        )
        unique_rd_configuration.unique_rd_configuration_state = AAZStrType(
            serialized_name="uniqueRdConfigurationState",
        )
        unique_rd_configuration.unique_rds = AAZListType(
            serialized_name="uniqueRds",
            flags={"read_only": True},
        )

        unique_rds = _schema_network_fabric_read.properties.unique_rd_configuration.unique_rds
        unique_rds.Element = AAZStrType()

        system_data = _schema_network_fabric_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_network_fabric_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_network_fabric_read.id
        _schema.identity = cls._schema_network_fabric_read.identity
        _schema.location = cls._schema_network_fabric_read.location
        _schema.name = cls._schema_network_fabric_read.name
        _schema.properties = cls._schema_network_fabric_read.properties
        _schema.system_data = cls._schema_network_fabric_read.system_data
        _schema.tags = cls._schema_network_fabric_read.tags
        _schema.type = cls._schema_network_fabric_read.type

    _schema_vpn_configuration_properties_read = None

    @classmethod
    def _build_schema_vpn_configuration_properties_read(cls, _schema):
        if cls._schema_vpn_configuration_properties_read is not None:
            _schema.administrative_state = cls._schema_vpn_configuration_properties_read.administrative_state
            _schema.network_to_network_interconnect_id = cls._schema_vpn_configuration_properties_read.network_to_network_interconnect_id
            _schema.option_a_properties = cls._schema_vpn_configuration_properties_read.option_a_properties
            _schema.option_b_properties = cls._schema_vpn_configuration_properties_read.option_b_properties
            _schema.peering_option = cls._schema_vpn_configuration_properties_read.peering_option
            return

        cls._schema_vpn_configuration_properties_read = _schema_vpn_configuration_properties_read = AAZObjectType()

        vpn_configuration_properties_read = _schema_vpn_configuration_properties_read
        vpn_configuration_properties_read.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        vpn_configuration_properties_read.network_to_network_interconnect_id = AAZStrType(
            serialized_name="networkToNetworkInterconnectId",
        )
        vpn_configuration_properties_read.option_a_properties = AAZObjectType(
            serialized_name="optionAProperties",
        )
        vpn_configuration_properties_read.option_b_properties = AAZObjectType(
            serialized_name="optionBProperties",
        )
        vpn_configuration_properties_read.peering_option = AAZStrType(
            serialized_name="peeringOption",
            flags={"required": True},
        )

        option_a_properties = _schema_vpn_configuration_properties_read.option_a_properties
        option_a_properties.bfd_configuration = AAZObjectType(
            serialized_name="bfdConfiguration",
        )
        option_a_properties.mtu = AAZIntType()
        option_a_properties.peer_asn = AAZIntType(
            serialized_name="peerASN",
            flags={"required": True},
        )
        option_a_properties.primary_ipv4_prefix = AAZStrType(
            serialized_name="primaryIpv4Prefix",
        )
        option_a_properties.primary_ipv6_prefix = AAZStrType(
            serialized_name="primaryIpv6Prefix",
        )
        option_a_properties.secondary_ipv4_prefix = AAZStrType(
            serialized_name="secondaryIpv4Prefix",
        )
        option_a_properties.secondary_ipv6_prefix = AAZStrType(
            serialized_name="secondaryIpv6Prefix",
        )
        option_a_properties.vlan_id = AAZIntType(
            serialized_name="vlanId",
            flags={"required": True},
        )

        bfd_configuration = _schema_vpn_configuration_properties_read.option_a_properties.bfd_configuration
        bfd_configuration.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        bfd_configuration.interval_in_milli_seconds = AAZIntType(
            serialized_name="intervalInMilliSeconds",
        )
        bfd_configuration.multiplier = AAZIntType()

        option_b_properties = _schema_vpn_configuration_properties_read.option_b_properties
        option_b_properties.export_route_targets = AAZListType(
            serialized_name="exportRouteTargets",
        )
        option_b_properties.import_route_targets = AAZListType(
            serialized_name="importRouteTargets",
        )
        option_b_properties.route_targets = AAZObjectType(
            serialized_name="routeTargets",
        )

        export_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.export_route_targets
        export_route_targets.Element = AAZStrType()

        import_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.import_route_targets
        import_route_targets.Element = AAZStrType()

        route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets
        route_targets.export_ipv4_route_targets = AAZListType(
            serialized_name="exportIpv4RouteTargets",
        )
        route_targets.export_ipv6_route_targets = AAZListType(
            serialized_name="exportIpv6RouteTargets",
        )
        route_targets.import_ipv4_route_targets = AAZListType(
            serialized_name="importIpv4RouteTargets",
        )
        route_targets.import_ipv6_route_targets = AAZListType(
            serialized_name="importIpv6RouteTargets",
        )

        export_ipv4_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.export_ipv4_route_targets
        export_ipv4_route_targets.Element = AAZStrType()

        export_ipv6_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.export_ipv6_route_targets
        export_ipv6_route_targets.Element = AAZStrType()

        import_ipv4_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.import_ipv4_route_targets
        import_ipv4_route_targets.Element = AAZStrType()

        import_ipv6_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.import_ipv6_route_targets
        import_ipv6_route_targets.Element = AAZStrType()

        _schema.administrative_state = cls._schema_vpn_configuration_properties_read.administrative_state
        _schema.network_to_network_interconnect_id = cls._schema_vpn_configuration_properties_read.network_to_network_interconnect_id
        _schema.option_a_properties = cls._schema_vpn_configuration_properties_read.option_a_properties
        _schema.option_b_properties = cls._schema_vpn_configuration_properties_read.option_b_properties
        _schema.peering_option = cls._schema_vpn_configuration_properties_read.peering_option


__all__ = ["Assign"]
