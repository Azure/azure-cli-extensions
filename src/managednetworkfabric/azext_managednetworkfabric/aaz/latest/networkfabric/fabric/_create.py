# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "networkfabric fabric create",
)
class Create(AAZCommand):
    """Create a Network Fabric resource

    :example: Create a Network Fabric with option B Properties
        az networkfabric fabric create --resource-group "example-rg" --location "westus3" --resource-name "example-fabric" --nf-sku "fab1" --fabric-version "1.x.x" --nfc-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/example-NFC" --fabric-asn 20 --ipv4-prefix 10.1.0.0/19 --rack-count 2 --server-count-per-rack 5 --ts-config "{primaryIpv4Prefix:'172.31.0.0/30',secondaryIpv4Prefix:'172.31.0.20/30',username:'****',password:'*****',serialNumber:'1234'}" --managed-network-config "{infrastructureVpnConfiguration:{networkToNetworkInterconnectId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric/networkToNetworkInterconnects/example-nni',peeringOption:OptionB,optionBProperties:{routeTargets:{exportIpv4RouteTargets:['65046:10039'],exportIpv6RouteTargets:['65046:10039'],importIpv4RouteTargets:['65046:10039'],importIpv6RouteTargets:['65046:10039']}}},workloadVpnConfiguration:{networkToNetworkInterconnectId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric/networkToNetworkInterconnects/example-nni',peeringOption:OptionB,optionBProperties:{routeTargets:{exportIpv4RouteTargets:['65046:10039'],exportIpv6RouteTargets:['65046:10039'],importIpv4RouteTargets:['65046:10039'],importIpv6RouteTargets:['65046:10039']}}}}"

    :example: Create a Network Fabric with option A Properties
        az networkfabric fabric create --resource-group "example-rg" --location "westus3" --resource-name "example-fabric" --nf-sku "fab1" --fabric-version "1.x.x" --nfc-id "/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabricControllers/example-NFC" --fabric-asn 20 --ipv4-prefix "10.1.0.0/19" --rack-count 2 --server-count-per-rack 5 --ts-config "{primaryIpv4Prefix:'172.31.0.0/30',secondaryIpv4Prefix:'172.31.0.20/30',username:'****',password:'*****',serialNumber:1234}" --managed-network-config "{infrastructureVpnConfiguration:{networkToNetworkInterconnectId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric/networkToNetworkInterconnects/example-nni',peeringOption:OptionA,optionAProperties:{bfdConfiguration:{multiplier:5,intervalInMilliSeconds:300},mtu:1500,vlanId:520,peerASN:65133,primaryIpv4Prefix:'172.31.0.0/31',secondaryIpv4Prefix:'172.31.0.20/31'}},workloadVpnConfiguration:{networkToNetworkInterconnectId:'/subscriptions/xxxxx-xxxx-xxxx-xxxx-xxxxx/resourceGroups/example-rg/providers/Microsoft.ManagedNetworkFabric/networkFabrics/example-fabric/networkToNetworkInterconnects/example-nni',peeringOption:OptionA,optionAProperties:{bfdConfiguration:{multiplier:5,intervalInMilliSeconds:300},mtu:1500,vlanId:520,peerASN:65133,primaryIpv4Prefix:'172.31.0.0/31',secondaryIpv4Prefix:'172.31.0.20/31',primaryIpv6Prefix:'3FFE:FFFF:0:CD30::a0/127',secondaryIpv6Prefix:'3FFE:FFFF:0:CD30::a0/127'}}}"

    :example: Help text for sub parameters under the specific parent can be viewed by using the shorthand syntax '??'. See https://github.com/Azure/azure-cli/tree/dev/doc/shorthand_syntax.md for more about shorthand syntax.
        az networkfabric fabric create --ts-config "??"
        az networkfabric fabric create --managed-network-config "{infrastructureVpnConfiguration:??"
        az networkfabric fabric create --managed-network-config "{infrastructureVpnConfiguration:{option-b-properties:??"
    """

    _aaz_info = {
        "version": "2024-06-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.managednetworkfabric/networkfabrics/{}", "2024-06-15-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="Name of the Network Fabric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,127}$",
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.annotation = AAZStrArg(
            options=["--annotation"],
            arg_group="Properties",
            help="Switch configuration description.",
        )
        _args_schema.control_plane_acls = AAZListArg(
            options=["--control-plane-acls"],
            arg_group="Properties",
            help="Control Plane Access Control List ARM resource IDs.",
        )
        _args_schema.fabric_asn = AAZIntArg(
            options=["--fabric-asn"],
            arg_group="Properties",
            help="ASN of CE devices for CE/PE connectivity.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        _args_schema.fabric_version = AAZStrArg(
            options=["--fabric-version"],
            arg_group="Properties",
            help="The version of Network Fabric.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.hardware_alert_threshold = AAZIntArg(
            options=["--hardware-alert-threshold"],
            arg_group="Properties",
            help="Hardware alert threshold percentage. Possible values are from 20 to 100.",
            fmt=AAZIntArgFormat(
                maximum=100,
                minimum=20,
            ),
        )
        _args_schema.ipv4_prefix = AAZStrArg(
            options=["--ipv4-prefix"],
            arg_group="Properties",
            help="IPv4Prefix for Management Network. Example: 10.1.0.0/19.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.ipv6_prefix = AAZStrArg(
            options=["--ipv6-prefix"],
            arg_group="Properties",
            help="IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.management_network_configuration = AAZObjectArg(
            options=["--managed-network-config", "--management-network-configuration"],
            arg_group="Properties",
            help="Configuration to be used to setup the management network.",
            required=True,
        )
        _args_schema.network_fabric_controller_id = AAZResourceIdArg(
            options=["--nfc-id", "--network-fabric-controller-id"],
            arg_group="Properties",
            help="Azure resource ID for the NetworkFabricController the NetworkFabric belongs.",
            required=True,
        )
        _args_schema.network_fabric_sku = AAZStrArg(
            options=["--nf-sku", "--network-fabric-sku"],
            arg_group="Properties",
            help="Supported Network Fabric SKU.Example: Compute / Aggregate racks. Once the user chooses a particular SKU, only supported racks can be added to the Network Fabric. The SKU determines whether it is a single / multi rack Network Fabric.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        _args_schema.rack_count = AAZIntArg(
            options=["--rack-count"],
            arg_group="Properties",
            help="Number of compute racks associated to Network Fabric.",
            fmt=AAZIntArgFormat(
                maximum=8,
                minimum=1,
            ),
        )
        _args_schema.server_count_per_rack = AAZIntArg(
            options=["--server-count-per-rack"],
            arg_group="Properties",
            help="Number of servers.Possible values are from 1-16.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=16,
                minimum=1,
            ),
        )
        _args_schema.storage_account_configuration = AAZObjectArg(
            options=["--storage-account-configuration"],
            arg_group="Properties",
            help="Bring your own storage account configurations for Network Fabric.",
        )
        _args_schema.storage_array_count = AAZIntArg(
            options=["--storage-array-count"],
            arg_group="Properties",
            help="Number of Storage arrays associated with the Network Fabric.",
            fmt=AAZIntArgFormat(
                maximum=2,
                minimum=1,
            ),
        )
        _args_schema.terminal_server_configuration = AAZObjectArg(
            options=["--ts-config", "--terminal-server-configuration"],
            arg_group="Properties",
            help="Network and credentials configuration currently applied to terminal server.",
            required=True,
        )
        _args_schema.trusted_ip_prefixes = AAZListArg(
            options=["--trusted-ip-prefixes"],
            arg_group="Properties",
            help="Trusted IP Prefixes ARM resource IDs.",
        )
        _args_schema.unique_rd_configuration = AAZObjectArg(
            options=["--unique-rd-configuration"],
            arg_group="Properties",
            help="Unique Route Distinguisher configuration",
        )

        control_plane_acls = cls._args_schema.control_plane_acls
        control_plane_acls.Element = AAZResourceIdArg()

        management_network_configuration = cls._args_schema.management_network_configuration
        management_network_configuration.infrastructure_vpn_configuration = AAZObjectArg(
            options=["infrastructure-vpn-configuration"],
            help="VPN Configuration properties.",
            required=True,
        )
        cls._build_args_vpn_configuration_properties_create(management_network_configuration.infrastructure_vpn_configuration)
        management_network_configuration.workload_vpn_configuration = AAZObjectArg(
            options=["workload-vpn-configuration"],
            help="VPN Configuration properties.",
            required=True,
        )
        cls._build_args_vpn_configuration_properties_create(management_network_configuration.workload_vpn_configuration)

        storage_account_configuration = cls._args_schema.storage_account_configuration
        storage_account_configuration.storage_account_id = AAZResourceIdArg(
            options=["storage-account-id"],
            help="Network Fabric storage account resource identifier.",
        )
        storage_account_configuration.storage_account_identity = AAZObjectArg(
            options=["storage-account-identity"],
            help="The selection of the managed identity to use with this storage account. The identity type must be either system assigned or user assigned.",
        )

        storage_account_identity = cls._args_schema.storage_account_configuration.storage_account_identity
        storage_account_identity.identity_type = AAZStrArg(
            options=["identity-type"],
            help="The type of managed identity that is being selected.",
            required=True,
            enum={"SystemAssignedIdentity": "SystemAssignedIdentity", "UserAssignedIdentity": "UserAssignedIdentity"},
        )
        storage_account_identity.user_assigned_identity_resource_id = AAZResourceIdArg(
            options=["user-assigned-identity-resource-id"],
            help="The user assigned managed identity resource ID to use. Mutually exclusive with a system assigned identity type.",
        )

        terminal_server_configuration = cls._args_schema.terminal_server_configuration
        terminal_server_configuration.password = AAZPasswordArg(
            options=["password"],
            help="Password for the terminal server connection.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        terminal_server_configuration.primary_ipv4_prefix = AAZStrArg(
            options=["primary-ipv4-prefix"],
            help="IPv4 Address Prefix.",
            required=True,
        )
        terminal_server_configuration.primary_ipv6_prefix = AAZStrArg(
            options=["primary-ipv6-prefix"],
            help="IPv6 Address Prefix.",
        )
        terminal_server_configuration.secondary_ipv4_prefix = AAZStrArg(
            options=["secondary-ipv4-prefix"],
            help="Secondary IPv4 Address Prefix.",
            required=True,
        )
        terminal_server_configuration.secondary_ipv6_prefix = AAZStrArg(
            options=["secondary-ipv6-prefix"],
            help="Secondary IPv6 Address Prefix.",
        )
        terminal_server_configuration.serial_number = AAZStrArg(
            options=["serial-number"],
            help="Serial Number of Terminal server.",
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )
        terminal_server_configuration.username = AAZStrArg(
            options=["username"],
            help="Username for the terminal server connection.",
            required=True,
            fmt=AAZStrArgFormat(
                min_length=1,
            ),
        )

        trusted_ip_prefixes = cls._args_schema.trusted_ip_prefixes
        trusted_ip_prefixes.Element = AAZResourceIdArg()

        unique_rd_configuration = cls._args_schema.unique_rd_configuration
        unique_rd_configuration.nni_derived_unique_rd_configuration_state = AAZStrArg(
            options=["nni-derived-unique-rd-configuration-state"],
            help="NNI derived unique Route Distinguisher state. Default is Disabled.",
            default="Disabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        unique_rd_configuration.unique_rd_configuration_state = AAZStrArg(
            options=["unique-rd-configuration-state"],
            help="Unique Route Distinguisher configuration state. Default is Enabled.",
            default="Enabled",
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    _args_vpn_configuration_properties_create = None

    @classmethod
    def _build_args_vpn_configuration_properties_create(cls, _schema):
        if cls._args_vpn_configuration_properties_create is not None:
            _schema.network_to_network_interconnect_id = cls._args_vpn_configuration_properties_create.network_to_network_interconnect_id
            _schema.option_a_properties = cls._args_vpn_configuration_properties_create.option_a_properties
            _schema.option_b_properties = cls._args_vpn_configuration_properties_create.option_b_properties
            _schema.peering_option = cls._args_vpn_configuration_properties_create.peering_option
            return

        cls._args_vpn_configuration_properties_create = AAZObjectArg()

        vpn_configuration_properties_create = cls._args_vpn_configuration_properties_create
        vpn_configuration_properties_create.network_to_network_interconnect_id = AAZResourceIdArg(
            options=["network-to-network-interconnect-id"],
            help="ARM Resource ID of the Network To Network Interconnect.",
        )
        vpn_configuration_properties_create.option_a_properties = AAZObjectArg(
            options=["option-a-properties"],
            help="option A properties",
        )
        vpn_configuration_properties_create.option_b_properties = AAZObjectArg(
            options=["option-b-properties"],
            help="option B properties",
        )
        vpn_configuration_properties_create.peering_option = AAZStrArg(
            options=["peering-option"],
            help="Peering option list.",
            required=True,
            enum={"OptionA": "OptionA", "OptionB": "OptionB"},
        )

        option_a_properties = cls._args_vpn_configuration_properties_create.option_a_properties
        option_a_properties.bfd_configuration = AAZObjectArg(
            options=["bfd-configuration"],
            help="BFD Configuration properties.",
        )
        option_a_properties.mtu = AAZIntArg(
            options=["mtu"],
            help="MTU to use for option A peering.",
            default=1500,
            fmt=AAZIntArgFormat(
                maximum=9200,
                minimum=64,
            ),
        )
        option_a_properties.peer_asn = AAZIntArg(
            options=["peer-asn"],
            help="Peer ASN number.Example : 28",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4294967295,
                minimum=1,
            ),
        )
        option_a_properties.primary_ipv4_prefix = AAZStrArg(
            options=["primary-ipv4-prefix"],
            help="IPv4 Address Prefix.",
        )
        option_a_properties.primary_ipv6_prefix = AAZStrArg(
            options=["primary-ipv6-prefix"],
            help="IPv6 Address Prefix.",
        )
        option_a_properties.secondary_ipv4_prefix = AAZStrArg(
            options=["secondary-ipv4-prefix"],
            help="Secondary IPv4 Address Prefix.",
        )
        option_a_properties.secondary_ipv6_prefix = AAZStrArg(
            options=["secondary-ipv6-prefix"],
            help="Secondary IPv6 Address Prefix.",
        )
        option_a_properties.vlan_id = AAZIntArg(
            options=["vlan-id"],
            help="Vlan Id.Example : 501",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=4094,
                minimum=501,
            ),
        )

        bfd_configuration = cls._args_vpn_configuration_properties_create.option_a_properties.bfd_configuration
        bfd_configuration.interval_in_milli_seconds = AAZIntArg(
            options=["interval-in-milli-seconds"],
            help="Interval in milliseconds. Example: 300.",
            default=300,
        )
        bfd_configuration.multiplier = AAZIntArg(
            options=["multiplier"],
            help="Multiplier for the Bfd Configuration. Example: 5.",
            default=5,
        )

        option_b_properties = cls._args_vpn_configuration_properties_create.option_b_properties
        option_b_properties.export_route_targets = AAZListArg(
            options=["export-route-targets"],
            help="Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.",
        )
        option_b_properties.import_route_targets = AAZListArg(
            options=["import-route-targets"],
            help="Route Targets to be applied for incoming routes into CE. This is for backward compatibility.",
        )
        option_b_properties.route_targets = AAZObjectArg(
            options=["route-targets"],
            help="Route Targets to be applied.",
        )

        export_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.export_route_targets
        export_route_targets.Element = AAZStrArg()

        import_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.import_route_targets
        import_route_targets.Element = AAZStrArg()

        route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.route_targets
        route_targets.export_ipv4_route_targets = AAZListArg(
            options=["export-ipv4-route-targets"],
            help="Route Targets to be applied for outgoing routes into CE.",
        )
        route_targets.export_ipv6_route_targets = AAZListArg(
            options=["export-ipv6-route-targets"],
            help="Route Targets to be applied for outgoing routes from CE.",
        )
        route_targets.import_ipv4_route_targets = AAZListArg(
            options=["import-ipv4-route-targets"],
            help="Route Targets to be applied for incoming routes into CE.",
        )
        route_targets.import_ipv6_route_targets = AAZListArg(
            options=["import-ipv6-route-targets"],
            help="Route Targets to be applied for incoming routes from CE.",
        )

        export_ipv4_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.route_targets.export_ipv4_route_targets
        export_ipv4_route_targets.Element = AAZStrArg()

        export_ipv6_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.route_targets.export_ipv6_route_targets
        export_ipv6_route_targets.Element = AAZStrArg()

        import_ipv4_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.route_targets.import_ipv4_route_targets
        import_ipv4_route_targets.Element = AAZStrArg()

        import_ipv6_route_targets = cls._args_vpn_configuration_properties_create.option_b_properties.route_targets.import_ipv6_route_targets
        import_ipv6_route_targets.Element = AAZStrArg()

        _schema.network_to_network_interconnect_id = cls._args_vpn_configuration_properties_create.network_to_network_interconnect_id
        _schema.option_a_properties = cls._args_vpn_configuration_properties_create.option_a_properties
        _schema.option_b_properties = cls._args_vpn_configuration_properties_create.option_b_properties
        _schema.peering_option = cls._args_vpn_configuration_properties_create.peering_option

    def _execute_operations(self):
        self.pre_operations()
        yield self.NetworkFabricsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NetworkFabricsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetworkFabric/networkFabrics/{networkFabricName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "networkFabricName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("annotation", AAZStrType, ".annotation")
                properties.set_prop("controlPlaneAcls", AAZListType, ".control_plane_acls")
                properties.set_prop("fabricASN", AAZIntType, ".fabric_asn", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("fabricVersion", AAZStrType, ".fabric_version")
                properties.set_prop("hardwareAlertThreshold", AAZIntType, ".hardware_alert_threshold")
                properties.set_prop("ipv4Prefix", AAZStrType, ".ipv4_prefix", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("ipv6Prefix", AAZStrType, ".ipv6_prefix")
                properties.set_prop("managementNetworkConfiguration", AAZObjectType, ".management_network_configuration", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkFabricControllerId", AAZStrType, ".network_fabric_controller_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkFabricSku", AAZStrType, ".network_fabric_sku", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("rackCount", AAZIntType, ".rack_count")
                properties.set_prop("serverCountPerRack", AAZIntType, ".server_count_per_rack", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("storageAccountConfiguration", AAZObjectType, ".storage_account_configuration")
                properties.set_prop("storageArrayCount", AAZIntType, ".storage_array_count")
                properties.set_prop("terminalServerConfiguration", AAZObjectType, ".terminal_server_configuration", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("trustedIpPrefixes", AAZListType, ".trusted_ip_prefixes")
                properties.set_prop("uniqueRdConfiguration", AAZObjectType, ".unique_rd_configuration")

            control_plane_acls = _builder.get(".properties.controlPlaneAcls")
            if control_plane_acls is not None:
                control_plane_acls.set_elements(AAZStrType, ".")

            management_network_configuration = _builder.get(".properties.managementNetworkConfiguration")
            if management_network_configuration is not None:
                _CreateHelper._build_schema_vpn_configuration_properties_create(management_network_configuration.set_prop("infrastructureVpnConfiguration", AAZObjectType, ".infrastructure_vpn_configuration", typ_kwargs={"flags": {"required": True}}))
                _CreateHelper._build_schema_vpn_configuration_properties_create(management_network_configuration.set_prop("workloadVpnConfiguration", AAZObjectType, ".workload_vpn_configuration", typ_kwargs={"flags": {"required": True}}))

            storage_account_configuration = _builder.get(".properties.storageAccountConfiguration")
            if storage_account_configuration is not None:
                storage_account_configuration.set_prop("storageAccountId", AAZStrType, ".storage_account_id")
                storage_account_configuration.set_prop("storageAccountIdentity", AAZObjectType, ".storage_account_identity")

            storage_account_identity = _builder.get(".properties.storageAccountConfiguration.storageAccountIdentity")
            if storage_account_identity is not None:
                storage_account_identity.set_prop("identityType", AAZStrType, ".identity_type", typ_kwargs={"flags": {"required": True}})
                storage_account_identity.set_prop("userAssignedIdentityResourceId", AAZStrType, ".user_assigned_identity_resource_id")

            terminal_server_configuration = _builder.get(".properties.terminalServerConfiguration")
            if terminal_server_configuration is not None:
                terminal_server_configuration.set_prop("password", AAZStrType, ".password", typ_kwargs={"flags": {"secret": True}})
                terminal_server_configuration.set_prop("primaryIpv4Prefix", AAZStrType, ".primary_ipv4_prefix", typ_kwargs={"flags": {"required": True}})
                terminal_server_configuration.set_prop("primaryIpv6Prefix", AAZStrType, ".primary_ipv6_prefix")
                terminal_server_configuration.set_prop("secondaryIpv4Prefix", AAZStrType, ".secondary_ipv4_prefix", typ_kwargs={"flags": {"required": True}})
                terminal_server_configuration.set_prop("secondaryIpv6Prefix", AAZStrType, ".secondary_ipv6_prefix")
                terminal_server_configuration.set_prop("serialNumber", AAZStrType, ".serial_number")
                terminal_server_configuration.set_prop("username", AAZStrType, ".username", typ_kwargs={"flags": {"required": True}})

            trusted_ip_prefixes = _builder.get(".properties.trustedIpPrefixes")
            if trusted_ip_prefixes is not None:
                trusted_ip_prefixes.set_elements(AAZStrType, ".")

            unique_rd_configuration = _builder.get(".properties.uniqueRdConfiguration")
            if unique_rd_configuration is not None:
                unique_rd_configuration.set_prop("nniDerivedUniqueRdConfigurationState", AAZStrType, ".nni_derived_unique_rd_configuration_state")
                unique_rd_configuration.set_prop("uniqueRdConfigurationState", AAZStrType, ".unique_rd_configuration_state")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZIdentityObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType(
                nullable=True,
            )

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.active_commit_batches = AAZListType(
                serialized_name="activeCommitBatches",
                flags={"read_only": True},
            )
            properties.administrative_state = AAZStrType(
                serialized_name="administrativeState",
                flags={"read_only": True},
            )
            properties.annotation = AAZStrType()
            properties.configuration_state = AAZStrType(
                serialized_name="configurationState",
                flags={"read_only": True},
            )
            properties.control_plane_acls = AAZListType(
                serialized_name="controlPlaneAcls",
            )
            properties.fabric_asn = AAZIntType(
                serialized_name="fabricASN",
                flags={"required": True},
            )
            properties.fabric_locks = AAZListType(
                serialized_name="fabricLocks",
                flags={"read_only": True},
            )
            properties.fabric_version = AAZStrType(
                serialized_name="fabricVersion",
            )
            properties.feature_flags = AAZListType(
                serialized_name="featureFlags",
                flags={"read_only": True},
            )
            properties.hardware_alert_threshold = AAZIntType(
                serialized_name="hardwareAlertThreshold",
            )
            properties.ipv4_prefix = AAZStrType(
                serialized_name="ipv4Prefix",
                flags={"required": True},
            )
            properties.ipv6_prefix = AAZStrType(
                serialized_name="ipv6Prefix",
            )
            properties.l2_isolation_domains = AAZListType(
                serialized_name="l2IsolationDomains",
                flags={"read_only": True},
            )
            properties.l3_isolation_domains = AAZListType(
                serialized_name="l3IsolationDomains",
                flags={"read_only": True},
            )
            properties.last_operation = AAZObjectType(
                serialized_name="lastOperation",
                flags={"read_only": True},
            )
            properties.management_network_configuration = AAZObjectType(
                serialized_name="managementNetworkConfiguration",
                flags={"required": True},
            )
            properties.network_fabric_controller_id = AAZStrType(
                serialized_name="networkFabricControllerId",
                flags={"required": True},
            )
            properties.network_fabric_sku = AAZStrType(
                serialized_name="networkFabricSku",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.rack_count = AAZIntType(
                serialized_name="rackCount",
            )
            properties.racks = AAZListType(
                flags={"read_only": True},
            )
            properties.router_ids = AAZListType(
                serialized_name="routerIds",
                flags={"read_only": True},
            )
            properties.server_count_per_rack = AAZIntType(
                serialized_name="serverCountPerRack",
                flags={"required": True},
            )
            properties.storage_account_configuration = AAZObjectType(
                serialized_name="storageAccountConfiguration",
            )
            properties.storage_array_count = AAZIntType(
                serialized_name="storageArrayCount",
            )
            properties.terminal_server_configuration = AAZObjectType(
                serialized_name="terminalServerConfiguration",
                flags={"required": True},
            )
            properties.trusted_ip_prefixes = AAZListType(
                serialized_name="trustedIpPrefixes",
            )
            properties.unique_rd_configuration = AAZObjectType(
                serialized_name="uniqueRdConfiguration",
            )

            active_commit_batches = cls._schema_on_200_201.properties.active_commit_batches
            active_commit_batches.Element = AAZStrType()

            control_plane_acls = cls._schema_on_200_201.properties.control_plane_acls
            control_plane_acls.Element = AAZStrType()

            fabric_locks = cls._schema_on_200_201.properties.fabric_locks
            fabric_locks.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.fabric_locks.Element
            _element.lock_state = AAZStrType(
                serialized_name="lockState",
            )
            _element.lock_type = AAZStrType(
                serialized_name="lockType",
            )

            feature_flags = cls._schema_on_200_201.properties.feature_flags
            feature_flags.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.feature_flags.Element
            _element.feature_flag_name = AAZStrType(
                serialized_name="featureFlagName",
            )
            _element.feature_flag_value = AAZStrType(
                serialized_name="featureFlagValue",
            )

            l2_isolation_domains = cls._schema_on_200_201.properties.l2_isolation_domains
            l2_isolation_domains.Element = AAZStrType()

            l3_isolation_domains = cls._schema_on_200_201.properties.l3_isolation_domains
            l3_isolation_domains.Element = AAZStrType()

            last_operation = cls._schema_on_200_201.properties.last_operation
            last_operation.details = AAZStrType(
                flags={"read_only": True},
            )

            management_network_configuration = cls._schema_on_200_201.properties.management_network_configuration
            management_network_configuration.infrastructure_vpn_configuration = AAZObjectType(
                serialized_name="infrastructureVpnConfiguration",
                flags={"required": True},
            )
            _CreateHelper._build_schema_vpn_configuration_properties_read(management_network_configuration.infrastructure_vpn_configuration)
            management_network_configuration.workload_vpn_configuration = AAZObjectType(
                serialized_name="workloadVpnConfiguration",
                flags={"required": True},
            )
            _CreateHelper._build_schema_vpn_configuration_properties_read(management_network_configuration.workload_vpn_configuration)

            racks = cls._schema_on_200_201.properties.racks
            racks.Element = AAZStrType()

            router_ids = cls._schema_on_200_201.properties.router_ids
            router_ids.Element = AAZStrType()

            storage_account_configuration = cls._schema_on_200_201.properties.storage_account_configuration
            storage_account_configuration.storage_account_id = AAZStrType(
                serialized_name="storageAccountId",
            )
            storage_account_configuration.storage_account_identity = AAZObjectType(
                serialized_name="storageAccountIdentity",
            )

            storage_account_identity = cls._schema_on_200_201.properties.storage_account_configuration.storage_account_identity
            storage_account_identity.identity_type = AAZStrType(
                serialized_name="identityType",
                flags={"required": True},
            )
            storage_account_identity.user_assigned_identity_resource_id = AAZStrType(
                serialized_name="userAssignedIdentityResourceId",
            )

            terminal_server_configuration = cls._schema_on_200_201.properties.terminal_server_configuration
            terminal_server_configuration.network_device_id = AAZStrType(
                serialized_name="networkDeviceId",
                flags={"read_only": True},
            )
            terminal_server_configuration.password = AAZStrType(
                flags={"secret": True},
            )
            terminal_server_configuration.primary_ipv4_prefix = AAZStrType(
                serialized_name="primaryIpv4Prefix",
                flags={"required": True},
            )
            terminal_server_configuration.primary_ipv6_prefix = AAZStrType(
                serialized_name="primaryIpv6Prefix",
            )
            terminal_server_configuration.secondary_ipv4_prefix = AAZStrType(
                serialized_name="secondaryIpv4Prefix",
                flags={"required": True},
            )
            terminal_server_configuration.secondary_ipv6_prefix = AAZStrType(
                serialized_name="secondaryIpv6Prefix",
            )
            terminal_server_configuration.serial_number = AAZStrType(
                serialized_name="serialNumber",
            )
            terminal_server_configuration.username = AAZStrType(
                flags={"required": True},
            )

            trusted_ip_prefixes = cls._schema_on_200_201.properties.trusted_ip_prefixes
            trusted_ip_prefixes.Element = AAZStrType()

            unique_rd_configuration = cls._schema_on_200_201.properties.unique_rd_configuration
            unique_rd_configuration.nni_derived_unique_rd_configuration_state = AAZStrType(
                serialized_name="nniDerivedUniqueRdConfigurationState",
            )
            unique_rd_configuration.unique_rd_configuration_state = AAZStrType(
                serialized_name="uniqueRdConfigurationState",
            )
            unique_rd_configuration.unique_rds = AAZListType(
                serialized_name="uniqueRds",
                flags={"read_only": True},
            )

            unique_rds = cls._schema_on_200_201.properties.unique_rd_configuration.unique_rds
            unique_rds.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_vpn_configuration_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("networkToNetworkInterconnectId", AAZStrType, ".network_to_network_interconnect_id")
        _builder.set_prop("optionAProperties", AAZObjectType, ".option_a_properties")
        _builder.set_prop("optionBProperties", AAZObjectType, ".option_b_properties")
        _builder.set_prop("peeringOption", AAZStrType, ".peering_option", typ_kwargs={"flags": {"required": True}})

        option_a_properties = _builder.get(".optionAProperties")
        if option_a_properties is not None:
            option_a_properties.set_prop("bfdConfiguration", AAZObjectType, ".bfd_configuration")
            option_a_properties.set_prop("mtu", AAZIntType, ".mtu")
            option_a_properties.set_prop("peerASN", AAZIntType, ".peer_asn", typ_kwargs={"flags": {"required": True}})
            option_a_properties.set_prop("primaryIpv4Prefix", AAZStrType, ".primary_ipv4_prefix")
            option_a_properties.set_prop("primaryIpv6Prefix", AAZStrType, ".primary_ipv6_prefix")
            option_a_properties.set_prop("secondaryIpv4Prefix", AAZStrType, ".secondary_ipv4_prefix")
            option_a_properties.set_prop("secondaryIpv6Prefix", AAZStrType, ".secondary_ipv6_prefix")
            option_a_properties.set_prop("vlanId", AAZIntType, ".vlan_id", typ_kwargs={"flags": {"required": True}})

        bfd_configuration = _builder.get(".optionAProperties.bfdConfiguration")
        if bfd_configuration is not None:
            bfd_configuration.set_prop("intervalInMilliSeconds", AAZIntType, ".interval_in_milli_seconds")
            bfd_configuration.set_prop("multiplier", AAZIntType, ".multiplier")

        option_b_properties = _builder.get(".optionBProperties")
        if option_b_properties is not None:
            option_b_properties.set_prop("exportRouteTargets", AAZListType, ".export_route_targets")
            option_b_properties.set_prop("importRouteTargets", AAZListType, ".import_route_targets")
            option_b_properties.set_prop("routeTargets", AAZObjectType, ".route_targets")

        export_route_targets = _builder.get(".optionBProperties.exportRouteTargets")
        if export_route_targets is not None:
            export_route_targets.set_elements(AAZStrType, ".")

        import_route_targets = _builder.get(".optionBProperties.importRouteTargets")
        if import_route_targets is not None:
            import_route_targets.set_elements(AAZStrType, ".")

        route_targets = _builder.get(".optionBProperties.routeTargets")
        if route_targets is not None:
            route_targets.set_prop("exportIpv4RouteTargets", AAZListType, ".export_ipv4_route_targets")
            route_targets.set_prop("exportIpv6RouteTargets", AAZListType, ".export_ipv6_route_targets")
            route_targets.set_prop("importIpv4RouteTargets", AAZListType, ".import_ipv4_route_targets")
            route_targets.set_prop("importIpv6RouteTargets", AAZListType, ".import_ipv6_route_targets")

        export_ipv4_route_targets = _builder.get(".optionBProperties.routeTargets.exportIpv4RouteTargets")
        if export_ipv4_route_targets is not None:
            export_ipv4_route_targets.set_elements(AAZStrType, ".")

        export_ipv6_route_targets = _builder.get(".optionBProperties.routeTargets.exportIpv6RouteTargets")
        if export_ipv6_route_targets is not None:
            export_ipv6_route_targets.set_elements(AAZStrType, ".")

        import_ipv4_route_targets = _builder.get(".optionBProperties.routeTargets.importIpv4RouteTargets")
        if import_ipv4_route_targets is not None:
            import_ipv4_route_targets.set_elements(AAZStrType, ".")

        import_ipv6_route_targets = _builder.get(".optionBProperties.routeTargets.importIpv6RouteTargets")
        if import_ipv6_route_targets is not None:
            import_ipv6_route_targets.set_elements(AAZStrType, ".")

    _schema_vpn_configuration_properties_read = None

    @classmethod
    def _build_schema_vpn_configuration_properties_read(cls, _schema):
        if cls._schema_vpn_configuration_properties_read is not None:
            _schema.administrative_state = cls._schema_vpn_configuration_properties_read.administrative_state
            _schema.network_to_network_interconnect_id = cls._schema_vpn_configuration_properties_read.network_to_network_interconnect_id
            _schema.option_a_properties = cls._schema_vpn_configuration_properties_read.option_a_properties
            _schema.option_b_properties = cls._schema_vpn_configuration_properties_read.option_b_properties
            _schema.peering_option = cls._schema_vpn_configuration_properties_read.peering_option
            return

        cls._schema_vpn_configuration_properties_read = _schema_vpn_configuration_properties_read = AAZObjectType()

        vpn_configuration_properties_read = _schema_vpn_configuration_properties_read
        vpn_configuration_properties_read.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        vpn_configuration_properties_read.network_to_network_interconnect_id = AAZStrType(
            serialized_name="networkToNetworkInterconnectId",
        )
        vpn_configuration_properties_read.option_a_properties = AAZObjectType(
            serialized_name="optionAProperties",
        )
        vpn_configuration_properties_read.option_b_properties = AAZObjectType(
            serialized_name="optionBProperties",
        )
        vpn_configuration_properties_read.peering_option = AAZStrType(
            serialized_name="peeringOption",
            flags={"required": True},
        )

        option_a_properties = _schema_vpn_configuration_properties_read.option_a_properties
        option_a_properties.bfd_configuration = AAZObjectType(
            serialized_name="bfdConfiguration",
        )
        option_a_properties.mtu = AAZIntType()
        option_a_properties.peer_asn = AAZIntType(
            serialized_name="peerASN",
            flags={"required": True},
        )
        option_a_properties.primary_ipv4_prefix = AAZStrType(
            serialized_name="primaryIpv4Prefix",
        )
        option_a_properties.primary_ipv6_prefix = AAZStrType(
            serialized_name="primaryIpv6Prefix",
        )
        option_a_properties.secondary_ipv4_prefix = AAZStrType(
            serialized_name="secondaryIpv4Prefix",
        )
        option_a_properties.secondary_ipv6_prefix = AAZStrType(
            serialized_name="secondaryIpv6Prefix",
        )
        option_a_properties.vlan_id = AAZIntType(
            serialized_name="vlanId",
            flags={"required": True},
        )

        bfd_configuration = _schema_vpn_configuration_properties_read.option_a_properties.bfd_configuration
        bfd_configuration.administrative_state = AAZStrType(
            serialized_name="administrativeState",
            flags={"read_only": True},
        )
        bfd_configuration.interval_in_milli_seconds = AAZIntType(
            serialized_name="intervalInMilliSeconds",
        )
        bfd_configuration.multiplier = AAZIntType()

        option_b_properties = _schema_vpn_configuration_properties_read.option_b_properties
        option_b_properties.export_route_targets = AAZListType(
            serialized_name="exportRouteTargets",
        )
        option_b_properties.import_route_targets = AAZListType(
            serialized_name="importRouteTargets",
        )
        option_b_properties.route_targets = AAZObjectType(
            serialized_name="routeTargets",
        )

        export_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.export_route_targets
        export_route_targets.Element = AAZStrType()

        import_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.import_route_targets
        import_route_targets.Element = AAZStrType()

        route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets
        route_targets.export_ipv4_route_targets = AAZListType(
            serialized_name="exportIpv4RouteTargets",
        )
        route_targets.export_ipv6_route_targets = AAZListType(
            serialized_name="exportIpv6RouteTargets",
        )
        route_targets.import_ipv4_route_targets = AAZListType(
            serialized_name="importIpv4RouteTargets",
        )
        route_targets.import_ipv6_route_targets = AAZListType(
            serialized_name="importIpv6RouteTargets",
        )

        export_ipv4_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.export_ipv4_route_targets
        export_ipv4_route_targets.Element = AAZStrType()

        export_ipv6_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.export_ipv6_route_targets
        export_ipv6_route_targets.Element = AAZStrType()

        import_ipv4_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.import_ipv4_route_targets
        import_ipv4_route_targets.Element = AAZStrType()

        import_ipv6_route_targets = _schema_vpn_configuration_properties_read.option_b_properties.route_targets.import_ipv6_route_targets
        import_ipv6_route_targets.Element = AAZStrType()

        _schema.administrative_state = cls._schema_vpn_configuration_properties_read.administrative_state
        _schema.network_to_network_interconnect_id = cls._schema_vpn_configuration_properties_read.network_to_network_interconnect_id
        _schema.option_a_properties = cls._schema_vpn_configuration_properties_read.option_a_properties
        _schema.option_b_properties = cls._schema_vpn_configuration_properties_read.option_b_properties
        _schema.peering_option = cls._schema_vpn_configuration_properties_read.peering_option


__all__ = ["Create"]
