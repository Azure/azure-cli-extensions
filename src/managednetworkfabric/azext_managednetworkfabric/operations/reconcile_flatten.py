# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Custom code that is added in addition to auto-generated by aaz-dev code.
# --------------------------------------------------------------------------------------------
# pylint: disable=too-many-lines,no-member,inconsistent-return-statements
# pylint: disable=too-many-statements,too-few-public-methods

"""
Helper class for all POST commands that return extra properties back to the customer
"""

from azure.cli.core.aaz import (
    has_value,
)
from knack.log import get_logger

logger = get_logger(__name__)


class ReconcileFlatten:
    """Helper class to flatten properties with conflicting keys"""

    # Custom response transform
    @staticmethod
    def _output_internet_gateway_show(
        parent_cmd, *args, **kwargs
    ):  # pylint: disable=unused-argument
        op_response = parent_cmd.ctx.vars.instance.to_serialized_data()

        return ReconcileFlatten.remap_gateway(op_response)

    # Custom response transform
    @staticmethod
    def _output_internet_gateway_list(
        parent_cmd, *args, **kwargs
    ):  # pylint: disable=unused-argument
        flattened_list = []
        if has_value(parent_cmd.ctx.vars.instance.value):
            values = parent_cmd.ctx.vars.instance.value.to_serialized_data()
            for item in values:
                flattened_list.append(ReconcileFlatten.remap_gateway(item))

        return (
            flattened_list,
            parent_cmd.ctx.vars.instance.next_link.to_serialized_data(),
        )

    @staticmethod
    def remap_gateway(resource_json):
        if has_value(resource_json["properties"]["type"]):
            resource_json["properties"]["gatewayType"] = resource_json["properties"][
                "type"
            ]
            del resource_json["properties"]["type"]

        return ReconcileFlatten.flatten_json(resource_json)

    @staticmethod
    def flatten_json(nested_json, parent_key=""):
        flat_dict = {}
        for key, value in nested_json.items():
            new_key = f"{key}" if parent_key else key
            if isinstance(value, dict):
                flat_dict.update(ReconcileFlatten.flatten_json(value, new_key))
            else:
                flat_dict[new_key] = value

        return flat_dict
