# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group


def load_arguments(self, _):

    with self.argument_context('purview account list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skip_token', type=str, help='The skip token.')

    with self.argument_context('purview account show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.', id_part='name')

    with self.argument_context('purview account create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.')
        c.argument('location', arg_type=get_location_type(self.cli_ctx), required=False,
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('managed_resource_group_name', type=str, help='Gets or sets the managed resource group name')
        c.argument('public_network_access', arg_type=get_enum_type(['NotSpecified', 'Enabled', 'Disabled']),
                   help='Gets or sets the public network access.')

    with self.argument_context('purview account update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('managed_resource_group_name', type=str, help='Gets or sets the managed resource group name')
        c.argument('public_network_access', arg_type=get_enum_type(['NotSpecified', 'Enabled', 'Disabled']),
                   help='Gets or sets the public network access.')

    with self.argument_context('purview account delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.', id_part='name')

    with self.argument_context('purview account add-root-collection-admin') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.', id_part='name')
        c.argument('object_id', type=str, help='Gets or sets the object identifier of the admin.')

    with self.argument_context('purview account list-key') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.')

    with self.argument_context('purview account wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str, help='The name of the '
                   'account.', id_part='name')

    with self.argument_context('purview default-account show') as c:
        c.argument('scope_tenant_id', help='The tenant ID.')
        c.argument('scope_type', arg_type=get_enum_type(['Tenant', 'Subscription']), help='The scope for the default '
                   'account.')
        c.argument('scope', type=str, help='The Id of the scope object, for example if the scope is "Subscription" '
                   'then it is the ID of that subscription.')

    with self.argument_context('purview default-account remove') as c:
        c.argument('scope_tenant_id', help='The tenant ID.')
        c.argument('scope_type', arg_type=get_enum_type(['Tenant', 'Subscription']), help='The scope for the default '
                   'account.')
        c.argument('scope', type=str, help='The Id of the scope object, for example if the scope is "Subscription" '
                   'then it is the ID of that subscription.')

    with self.argument_context('purview default-account set') as c:
        c.argument('account_name', options_list=['--name', '-n', '--account-name'], type=str,
                   help='The name of the account that is set as the default.')
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('scope', type=str, help='The scope object ID. For example, sub ID or tenant ID.')
        c.argument('scope_tenant_id', type=str, help='The scope tenant in which the default account is set.')
        c.argument('scope_type', arg_type=get_enum_type(['Tenant', 'Subscription']), help='The scope where the default '
                   'account is set.')
        c.argument('subscription_id', type=str, help='The subscription ID of the account that is set as the default.')

    with self.argument_context('purview connect-endpoint list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.')
        c.argument('skip_token', type=str, help='The skip token.')

    with self.argument_context('purview connect-endpoint show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.', id_part='name')
        c.argument('endpoint_name', options_list=['--name', '-n', '--endpoint-name'],
                   type=str, help='Name of the private endpoint connection.', id_part='child_name_1')

    with self.argument_context('purview connect-endpoint create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.')
        c.argument('endpoint_name', options_list=['--name', '-n', '--endpoint-name'],
                   type=str, help='Name of the private '
                   'endpoint connection.')
        c.argument('required_actions', help='The required actions.')
        c.argument('description', help='The description.')
        c.argument('status', arg_type=get_enum_type(['Unknown', 'Pending', 'Approved', 'Rejected', 'Disconnected']),
                   help='The status. Possible values include: Unknown, Pending, Approved, Rejected, Disconnected.')
        c.argument('id_', options_list=['--id'], type=str, help='The private endpoint identifier.', arg_group='Private '
                   'Endpoint')

    with self.argument_context('purview connect-endpoint update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.', id_part='name')
        c.argument('endpoint_name', options_list=['--name', '-n', '--endpoint-name'], type=str,
                   help='Name of the private endpoint connection.', id_part='child_name_1')
        c.argument('required_actions', help='The required actions.')
        c.argument('description', help='The description.')
        c.argument('status', arg_type=get_enum_type(['Unknown', 'Pending', 'Approved', 'Rejected', 'Disconnected']),
                   help='The status. Possible values include: Unknown, Pending, Approved, Rejected, Disconnected.')
        c.argument('id_', options_list=['--id'], type=str, help='The private endpoint identifier.', arg_group='Private '
                   'Endpoint')
        c.ignore('request')

    with self.argument_context('purview connect-endpoint delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.', id_part='name')
        c.argument('endpoint_name', options_list=['--name', '-n', '--endpoint-name'],
                   type=str, help='Name of the private '
                   'endpoint connection.', id_part='child_name_1')

    with self.argument_context('purview connect-endpoint wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.', id_part='name')
        c.argument('endpoint_name', options_list=['--name', '-n', '--endpoint-name'], type=str,
                   help='Name of the private endpoint connection.', id_part='child_name_1')

    with self.argument_context('purview private-link-resource list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.')

    with self.argument_context('purview private-link-resource show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('account_name', type=str, help='The name of the account.', id_part='name')
        c.argument('group_id', type=str, help='The group identifier.', id_part='child_name_1')
