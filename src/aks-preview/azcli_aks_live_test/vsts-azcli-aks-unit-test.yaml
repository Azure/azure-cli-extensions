name: $(Date:yyyyMMdd)$(Rev:.r)_Python$(PYTHON_VERSION)_Coverage-$(COVERAGE)_Mode-$(TEST_MODE)_Branch-$(Build.SourceBranchName)

trigger: none

pr:
  branches:
    include:
    - main
  paths:
    include:
    - src/aks-preview/

variables:
  - group: azcli-aks-tool
  - name: ContainerName
    value: "azcli-aks-unit-test"
  - name: LIVE_TEST_BASE_DIR
    value: "azure-cli-extensions/src/aks-preview/azcli_aks_live_test"

jobs:
- job: UnitTest
  pool:
    vmImage: 'ubuntu-18.04'
  timeoutInMinutes: 360
  displayName: "Unit Test with Python"
  steps:
    - bash: |
        pwd
        ls -alh
        mkdir azure-cli-extensions
        shopt -s extglob dotglob
        mv !(azure-cli-extensions) azure-cli-extensions
        shopt -u extglob dotglob
        ls -alh
      displayName: "Move All Checkout Files to the Newly Created 'azure-cli-extensions' Directory"
    - bash: |
        $(LIVE_TEST_BASE_DIR)/scripts/clone_repo.sh
      condition: succeeded()
      displayName: "Clone GitHub Repo and Move Test Related Files"
    - bash: |
        ./scripts/prepare_image.sh
      condition: succeeded()
      displayName: "Prepare Test Image"
    - bash: |
        ./scripts/start_container.sh $(ContainerName)
      env:
        MAPPED_AZCLI_ALT_CLIENT_SECRET: $(AZCLI_ALT_CLIENT_SECRET)
        BUILD_REASON: $(Build.Reason)
        SYSTEM_PULLREQUEST_TARGETBRANCH: $(System.PullRequest.TargetBranch)
      condition: succeeded()
      displayName: "Start Container"
    - bash: |
        docker exec $(ContainerName) /opt/scripts/setup_venv.sh setup-tool y
        docker exec $(ContainerName) /opt/scripts/setup_venv.sh setup-az n azure-cli/ azure-cli-extensions/
      condition: succeeded()
      displayName: "Set up Virtual Environment"
    - bash: |
        docker exec $(ContainerName) /opt/scripts/test_cli_unit.sh
      condition: and(succeeded(), in(variables['COVERAGE'], 'cli', 'all'))
      displayName: Perform Unit Test for CLI
    - bash: |
        docker exec $(ContainerName) /opt/scripts/test_ext_unit.sh
      condition: and(succeededOrFailed(), in(variables['COVERAGE'], 'ext', 'all'))
      displayName: Perform Unit Test for EXT
    - task: CopyFiles@2
      inputs:
        contents: 'reports/**'
        flattenFolders: true
        targetFolder: $(Build.ArtifactStagingDirectory)
      condition: succeededOrFailed()
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        artifactName: 'unit test reports'
      condition: succeededOrFailed()
