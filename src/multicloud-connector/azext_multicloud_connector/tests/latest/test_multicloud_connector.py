# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------
import os

from azure.cli.testsdk import *


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class MulticloudConnectorScenario(ScenarioTest):

    @ResourceGroupPreparer()
    def test_public_cloud_connector(self, resource_group):
        sub = self.get_subscription_id()
        connector_name = "testConnector"
        am_sc_name = "testAssetManagement"
        afs_sc_name = "testArcOnboarding"
        self.kwargs.update({
            'name': f'{connector_name}',
            'rg': resource_group,
            'sub': f'{sub}',
            'loc': 'eastus',
        })

        # test public-cloud-connector create
        self.cmd(
            'arc-multicloud public-cloud-connector create '
            '--name {name} '
            '--resource-group {rg} '
            '--subscription {sub} '
            '--host-type AWS '
            '--aws-cloud-profile accountId=471112500375 isOrganizationalAccount=false '
            '--location {loc}',
            checks=[self.check('name', 'testConnector'),
                    self.check('type', 'microsoft.hybridconnectivity/publiccloudconnectors')]
        )

        self.kwargs.update({
            'cid': f'subscriptions/{sub}/resourceGroups/{resource_group}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{connector_name}',
            'am_sc_name': am_sc_name,
            'type': 'Microsoft.AssetManagement',
            'settings': 'periodicSync="true" cloudProviderServiceTypes="ec2,s3" awsGlobalReadOnly="true" cloudProviderRegions="us-east-1,us-east-2" periodicSyncTime="1"'
        })

        # create solution-configuration which is required for other API test
        self.cmd(
            'arc-multicloud solution-configuration create '
            '--connector-id {cid} '
            '--name {am_sc_name} '
            '--solution-settings {settings} '
            '--solution-type {type}',
            checks=[self.check('name', 'testAssetManagement'),
                    self.check('type', 'microsoft.hybridconnectivity/solutionconfigurations')]
        )

        # test public-cloud-connector update
        self.cmd(
            'arc-multicloud public-cloud-connector update '
            '--name {name} '
            '--resource-group {rg} '
            '--subscription {sub} '
            '--aws-cloud-profile excluded-accounts=["123456789123"] '
            '--tag testTag=test',
            checks=[self.check('name', 'testConnector')]
        )

        # test public-cloud-connector test-permission
        self.cmd(
            'arc-multicloud public-cloud-connector test-permission '
            '--name {name} '
            '--resource-group {rg} '
            '--subscription {sub} '
        )

        # test public-cloud-connector list
        self.cmd(
            'arc-multicloud public-cloud-connector list '
            '--resource-group {rg} '
            '--subscription {sub}',
            checks=[self.check('[0].name', 'testConnector'),
                    self.check('[0].type', 'microsoft.hybridconnectivity/publiccloudconnectors')]

        )

        # test public-cloud-connector show
        self.cmd(
            'arc-multicloud public-cloud-connector show '
            '--name {name} '
            '--resource-group {rg} '
            '--subscription {sub}',
            checks=[self.check('name', 'testConnector'),
                    self.check('type', 'microsoft.hybridconnectivity/publiccloudconnectors')]
        )

        # test public-cloud-connector delete
        self.cmd(
            'arc-multicloud public-cloud-connector delete '
            '--name {name} '
            '--resource-group {rg} '
            '-y'
        )

    @ResourceGroupPreparer()
    def test_solution_configuration(self, resource_group):
        sub = self.get_subscription_id()
        connector_name = "testConnector"
        am_sc_name = "testAssetManagement"
        afs_sc_name = "testArcOnboarding"

        # First, create public-cloud-connector
        self.cmd(
            'arc-multicloud public-cloud-connector create '
            f'--name {connector_name} '
            f'--resource-group {resource_group} '
            f'--subscription {sub} '
            '--host-type AWS '
            '--aws-cloud-profile accountId=471112500375 '
            '--location eastus'
        )

        self.kwargs.update({
            'cid': f'subscriptions/{sub}/resourceGroups/{resource_group}/providers/Microsoft.HybridConnectivity/publicCloudConnectors/{connector_name}',
            'name': am_sc_name,
            'type': 'Microsoft.AssetManagement',
            'settings': 'periodicSync="true" cloudProviderServiceTypes="ec2,s3" awsGlobalReadOnly="true" cloudProviderRegions="us-east-1,us-east-2" periodicSyncTime="1"'
        })

        # test solution-configuration create
        self.cmd(
            'arc-multicloud solution-configuration create '
            '--connector-id {cid} '
            '--name {name} '
            '--solution-settings {settings} '
            '--solution-type {type}',
            checks=[self.check('name', 'testAssetManagement'),
                    self.check('type', 'microsoft.hybridconnectivity/solutionconfigurations')]
        )

        # test solution-configuration list
        self.cmd(
            'arc-multicloud solution-configuration list '
            '--connector-id {cid}',
            checks = [self.check('[0].name', 'testAssetManagement'),
                      self.check('[0].type', 'microsoft.hybridconnectivity/solutionconfigurations')]
        )

        # test solution-configuration show
        self.cmd(
            'arc-multicloud solution-configuration show '
            '--connector-id {cid} '
            '--name {name}',
            checks=[self.check('name', 'testAssetManagement'),
                    self.check('type', 'microsoft.hybridconnectivity/solutionconfigurations')]
        )

        # test solution-configuration update
        self.kwargs.update({
            'settings': 'periodicSync="true" periodicSyncTime="2"'
        })
        self.cmd(
            'arc-multicloud solution-configuration update '
            '--connector-id {cid} '
            '--name {name} '
            '--solution-settings {settings} '
            '--solution-type {type}',
            checks=[self.check('properties.solutionSettings.periodicSyncTime', 2)]
        )

        # test solution-configuration delete
        self.cmd(
            'arc-multicloud solution-configuration delete '
            '--connector-id {cid} '
            '--name {name} '
            '-y'
        )

    @ResourceGroupPreparer()
    def test_solution_types(self, resource_group):
        sub = self.get_subscription_id()
        self.kwargs.update({
            'rg': resource_group,
            'sub': f'{sub}',
            'name': 'Microsoft.AssetManagement'
        })

        # test solution-type show
        self.cmd(
            'arc-multicloud solution-type show '
            '--name {name} '
            '--resource-group {rg} '
            '--subscription {sub}',
            checks=[self.check('properties.solutionType', '{name}')]
        )

        # test solution-type list
        self.cmd(
            'arc-multicloud solution-type list '
            '--resource-group {rg} '
            '--subscription {sub}',
            checks=[self.check('length(@)', 2)]
        )