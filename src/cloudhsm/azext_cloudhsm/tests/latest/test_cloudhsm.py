# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from builtins import len, print
from azure.cli.testsdk import ScenarioTest, ResourceGroupPreparer
import operator as op

class CloudhsmScenario(ScenarioTest):
    # TODO: add tests here
    @ResourceGroupPreparer(name_prefix='cli', location='ukwest', parameter_name = 'group_name')
    def test_create_list_and_get_cloudHsm(self, group_name):
        chsm_name = self.create_random_name(prefix='cli', length=8)
        self.kwargs.update({
          "chsm_name":chsm_name,
          "gr_name": group_name
        })

        #Create
        cloud_hsm = self.cmd('az cloudhsm create --name {chsm_name} --resource-group {gr_name} --location ukwest --tags UseMockHfc=True MockHfcDelayInMs=1 --domain-name-label-scope "TenantReuse" --mi-user-assigned /subscriptions/75e96d09-a291-40e1-a5e6-cda78233d867/resourceGroups/cli-test/providers/Microsoft.ManagedIdentity/userAssignedIdentities/cli-test-identity').get_output_in_json()
        assert cloud_hsm['name'] == chsm_name
        assert cloud_hsm['location'] == "ukwest"
        assert cloud_hsm['provisioningState'] == "Succeeded"
        assert cloud_hsm['sku']['name'] == "Standard_B1"
        assert len(cloud_hsm['tags']) ==2

        #List --resource-group 
        cloud_hsm = self.cmd('az cloudhsm list --resource-group {gr_name}').get_output_in_json()
        assert cloud_hsm[0]['name'] == chsm_name
        assert cloud_hsm[0]['location'] == "ukwest"
        assert cloud_hsm[0]['provisioningState'] == "Succeeded"
        assert cloud_hsm[0]['sku']['name'] == "Standard_B1" 
        assert len(cloud_hsm[0]['tags']) ==2

        #List -- cannot be tested because we have multiple resources in the sub and cannot acticipate the result. 
        # cloud_hsm = self.cmd('az cloudhsm list').get_output_in_json()
        # print('emmeleia', cloud_hsm)
        # assert cloud_hsm[0]['name'] == chsm_name
        # assert cloud_hsm[0]['location'] == "ukwest"
        # assert cloud_hsm[0]['provisioningState'] == "Succeeded"
        # assert cloud_hsm[0]['sku']['name'] == "Standard_B1" 
        # assert len(cloud_hsm[0]['tags']) ==2
        
        #Show --name --resource_group
        cloud_hsm = self.cmd('az cloudhsm show --name {chsm_name} --resource-group {gr_name}').get_output_in_json()
        assert cloud_hsm['name'] == chsm_name
        assert cloud_hsm['location'] == "ukwest"
        assert cloud_hsm['provisioningState'] == "Succeeded"
        assert cloud_hsm['sku']['name'] == "Standard_B1" 
        assert len(cloud_hsm['tags']) ==2

        #Update  --tags
        cloud_hsm = self.cmd('az cloudhsm update --name {chsm_name} --resource-group {gr_name} --tags UseMockHfc=true MockHfcDelayInMs=1 UpdatedResource=yes').get_output_in_json()
        assert cloud_hsm['name'] == chsm_name
        assert cloud_hsm['location'] == "ukwest"
        assert cloud_hsm['provisioningState'] == "Succeeded"
        assert cloud_hsm['sku']['name'] == "Standard_B1" 
        assert len(cloud_hsm['tags']) ==3
    
    def test_backup_restore(self):
        #Backup 
        # We cannot do it on a random generated chsm becuase the device must be activate before we can run this command
        # Will run this tests locally, generate the recordings and comment out the test case.
        cloud_hsm_backup = self.cmd('az cloudhsm backup start --cluster-name myhsm --resource-group cli-test --blob-container-uri https://clitestbackup.blob.core.windows.net/testbackup ').get_output_in_json()


        assert op.contains(cloud_hsm_backup['backupId'], "cloudhsm-")
        assert cloud_hsm_backup['jobId'] != ""
        assert cloud_hsm_backup['status'] == "Succeeded"
        backup_id = cloud_hsm_backup['backupId']
        
        self.kwargs.update({
          "backup_id":backup_id,
        })

        cloud_hsm_restore = self.cmd('az cloudhsm restore start --cluster-name myrestoredhsm --resource-group cli-test --backup-id {backup_id} --blob-container-uri https://clitestbackup.blob.core.windows.net/testbackup').get_output_in_json()
