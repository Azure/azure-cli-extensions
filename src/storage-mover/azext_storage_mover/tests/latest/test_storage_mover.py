# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
import time
from azure.cli.testsdk.scenario_tests import AllowLargeResponse


class StorageMoverScenario(ScenarioTest):
    @ResourceGroupPreparer(location='eastus2euap')
    def test_storage_mover_scenarios(self, resource_group):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24)
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2euap '
                 '--tags {{key1:value1}} --description ExampleDesc')
        self.cmd('az storage-mover show -g {rg} -n {mover_name}',
                 checks=[JMESPathCheck('name', self.kwargs.get('mover_name', '')),
                         JMESPathCheck('location', "eastus2euap"),
                         JMESPathCheck('tags', {"key1":"value1"}),
                         JMESPathCheck('description', "ExampleDesc")])
        self.cmd('az storage-mover list -g {rg}', checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover update -g {rg} -n {mover_name} '
                 '--tags {{key2:value2}} --description ExampleDesc2',
                 checks=[JMESPathCheck('tags', {"key2":"value2"}),
                         JMESPathCheck('description', "ExampleDesc2")])
        self.cmd('az storage-mover delete -g {rg} -n {mover_name} -y')
        self.cmd('az storage-mover list -g {rg}', checks=[JMESPathCheck('length(@)', 0)])

    @record_only()
    # need to manually register agent, first create the rg and the storagemover
    # az group create -n test-storagemover-rg2 -l eastus2euap
    # az storage-mover create -n teststoragemover2 -g test-storagemover-rg2
    # https://www.microsoft.com/en-us/download/details.aspx?id=104590
    # https://learn.microsoft.com/en-us/azure/storage-mover/agent-deploy?tabs=xdmshell
    def test_storage_mover_agent_scenarios(self):
        self.kwargs.update({
            "rg": "test-storagemover-rg2",
            "mover_name": "teststoragemover2",
            "agent_name": "agent2"
        })
        self.cmd('az storage-mover agent show -g {rg} -n {agent_name} --storage-mover-name {mover_name}')
        self.cmd('az storage-mover agent list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover agent update -g {rg} -n {agent_name} --storage-mover-name {mover_name} '
                 '--description 123')
        self.cmd('az storage-mover agent unregister -g {rg} -n {agent_name} --storage-mover-name {mover_name} -y')
        self.cmd('az storage-mover agent list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 0)])

    @ResourceGroupPreparer(location='eastus2euap')
    @StorageAccountPreparer()
    @AllowLargeResponse()
    def test_storage_mover_endpoint_scenarios(self, resource_group, storage_account):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24),
            "container_name": self.create_random_name('container', 24),
            "account_name": storage_account,
            "account_key": self.cmd('az storage account keys list -n {} -g {} --query "[0].value" '
                                    '-otsv'.format(storage_account, resource_group)).output,
            "account_id": self.cmd('az storage account show -n {} -g {} --query id '
                                   '-otsv'.format(storage_account, resource_group)).output.strip(),
            "endpoint_container": self.create_random_name('endpoint_container', 32),
            "endpoint_file_share": self.create_random_name('endpoint_file_share', 32),
            "endpoint_nfs": self.create_random_name('endpoint_nfs', 32),
            "endpoint_smb": self.create_random_name('endpoint_smb', 32),
            "vm_nfs_name": self.create_random_name('vm', 24),
            "vm_smb_name": self.create_random_name('vm', 24),
            "file_share_name": self.create_random_name('fileshare', 24),
            "smb_share_name": self.create_random_name('smbshare', 24),
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2euap '
                 '--tags {{key1:value1}} --description MoverDesc')

        # create for storage container
        self.cmd('az storage container create -n {container_name} --account-name {account_name} '
                 '--account-key {account_key}')
        self.cmd('az storage-mover endpoint create-for-storage-container -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_container} --container-name {container_name} --storage-account-id {account_id} '
                 '--description endpointDesc')
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_container}',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_container', '')),
                         JMESPathCheck('properties.blobContainerName', self.kwargs.get('container_name', '')),
                         JMESPathCheck('properties.endpointType', "AzureStorageBlobContainer"),
                         JMESPathCheck('properties.storageAccountResourceId', self.kwargs.get('account_id', '')),
                         JMESPathCheck('properties.description', "endpointDesc"),
                         ])

        # update for storage container
        self.cmd('az storage-mover endpoint update-for-storage-container -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_container} --description endpointDescUpdate',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_container', '')),
                         JMESPathCheck('properties.description', "endpointDescUpdate")])

        # create for storage smb file share
        self.cmd('az storage share create -n {file_share_name} --account-name {account_name} '
                 '--account-key {account_key}')
        self.cmd('az storage-mover endpoint create-for-storage-smb-file-share -g {rg} '
                 '--storage-mover-name {mover_name} '
                 '-n {endpoint_file_share} --file-share-name {file_share_name} --storage-account-id {account_id} '
                 '--description endpointFileShareDesc')
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_file_share}',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_file_share', '')),
                         JMESPathCheck('properties.fileShareName', self.kwargs.get('file_share_name', '')),
                         JMESPathCheck('properties.endpointType', "AzureStorageSmbFileShare"),
                         JMESPathCheck('properties.storageAccountResourceId', self.kwargs.get('account_id', '')),
                         JMESPathCheck('properties.description', "endpointFileShareDesc"),
                         ])

        # update for storage smb file share
        self.cmd('az storage-mover endpoint update-for-storage-smb-file-share -g {rg} '
                 '--storage-mover-name {mover_name} '
                 '-n {endpoint_file_share} --description endpointFileShareDescUpdate',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_file_share', '')),
                         JMESPathCheck('properties.description', "endpointFileShareDescUpdate")])

        # create for nfs mount
        vm_ip = self.cmd('az vm create -n {vm_nfs_name} -g {rg} --image Ubuntu2204 --size Standard_D4s_v3 --nsg-rule '
                         'NONE --admin-username ubuntuuser --generate-ssh-keys').get_output_in_json()["publicIpAddress"]
        self.cmd('az storage-mover endpoint create-for-nfs -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_nfs} --description endpointDesc --export exportfolder --nfs-version NFSv4 --host '+vm_ip)
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_nfs}',
                       checks=[JMESPathCheck('name', self.kwargs.get('endpoint_nfs', '')),
                               JMESPathCheck('properties.export', "exportfolder"),
                               JMESPathCheck('properties.endpointType', "NfsMount"),
                               JMESPathCheck('properties.host', vm_ip),
                               JMESPathCheck('properties.nfsVersion', "NFSv4"),
                               JMESPathCheck('properties.description', "endpointDesc")])

        # update for nfs mount
        self.cmd('az storage-mover endpoint update-for-nfs -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_nfs} --description endpointDescUpdate',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_nfs', '')),
                         JMESPathCheck('properties.description', "endpointDescUpdate")])

        # create for smb mount
        vm_smb_ip = self.cmd('az vm create -n {vm_smb_name} -g {rg} --image Ubuntu2204 --size Standard_D4s_v3 '
                             '--nsg-rule NONE --admin-username ubuntuuser '
                             '--generate-ssh-keys').get_output_in_json()["publicIpAddress"]
        self.cmd('az storage-mover endpoint create-for-smb -g {rg} --storage-mover-name {mover_name} -n {endpoint_smb}'
                 ' --description endpointSmbDesc --share-name {smb_share_name} '
                 '--username-uri "https://smb-demo-kv.vault.azure.net/secrets/username" '
                 '--password-uri "https://smb-demo-kv.vault.azure.net/secrets/password" --host '+vm_smb_ip)
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_smb}',
                       checks=[JMESPathCheck('name', self.kwargs.get('endpoint_smb', '')),
                               JMESPathCheck('properties.endpointType', "SmbMount"),
                               JMESPathCheck('properties.host', vm_smb_ip),
                               JMESPathCheck('properties.shareName', self.kwargs.get('smb_share_name', '')),
                               JMESPathCheck('properties.description', "endpointSmbDesc"),
                               JMESPathCheck('properties.credentials.passwordUri',
                                             "https://smb-demo-kv.vault.azure.net/secrets/password"),
                               JMESPathCheck('properties.credentials.usernameUri',
                                             "https://smb-demo-kv.vault.azure.net/secrets/username")])

        # update for smb mount
        self.cmd('az storage-mover endpoint update-for-smb -g {rg} '
                 '--storage-mover-name {mover_name} '
                 '-n {endpoint_smb} --username-uri "" --password-uri "" --description endpointSmbDescUpdate',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_smb', '')),
                         JMESPathCheck('properties.description', "endpointSmbDescUpdate"),
                         JMESPathCheck('properties.credentials.passwordUri', None),
                         JMESPathCheck('properties.credentials.usernameUri', None)])

        self.cmd('az storage-mover endpoint list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 4)])
        self.cmd('az storage-mover endpoint delete -g {rg} --storage-mover-name {mover_name} -n {endpoint_nfs} -y')
        self.cmd('az storage-mover endpoint list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 3)])

    @record_only()
    # need to manually register agent, first create the rg and the storagemover
    # az group create -n test-storagemover-rg2 -l eastus2euap
    # az storage-mover create -n teststoragemover2 -g test-storagemover-rg2
    @AllowLargeResponse()
    def test_storage_mover_job_definition_scenarios(self):
        self.kwargs.update({
            "rg": "test-storagemover-rg2",
            "mover_name": "teststoragemover2",
            "agent_name": "agent2",
            "project_name": "testproject",
            "job_definition": "testdefinition",
            "account_name": "testjobdefinitionsa2",
            "source_vm": "sourcevm",
            "target_container": "targetcontainer",
            "source_endpoint": "sourceendpoint",
            "target_endpoint": "targetendpoint"
        })
        self.cmd('az storage-mover project create -g {rg} --storage-mover-name {mover_name} -n {project_name} '
                 '--description ProjectDesc')
        self.cmd('az storage account create -n {account_name} -g {rg}')
        account_key = self.cmd('az storage account keys list -n {account_name} -g {rg} --query "[0].value" '
                               '-otsv').output.strip()
        account_id = self.cmd('az storage account show -n {account_name} -g {rg} --query id -otsv').output.strip()
        self.kwargs.update({
            "account_key": account_key,
            "account_id": account_id
        })
        self.cmd('az storage container create -n {target_container} --account-name {account_name} '
                 '--account-key {account_key}')
        vm_ip = self.cmd('az vm create -n {source_vm} -g {rg} --image Ubuntu2204 --size Standard_D4s_v3 --nsg-rule '
                         'NONE --admin-username ubuntuuser --generate-ssh-keys').get_output_in_json()["publicIpAddress"]
        self.cmd('az storage-mover endpoint create-for-nfs -g {rg} --storage-mover-name {mover_name} '
                 '-n {source_endpoint} --description srcendpointDesc --export exportfolder --nfs-version NFSv4 '
                 '--host ' + vm_ip)
        self.cmd('az storage-mover endpoint create-for-storage-container -g {rg} --storage-mover-name {mover_name} '
                 '-n {target_endpoint} --container-name {target_container} --storage-account-id {account_id} '
                 '--description tgtendpointDesc')
        self.cmd('az storage-mover job-definition create -g {rg} -n {job_definition} --project-name {project_name} '
                 '--storage-mover-name {mover_name} --copy-mode Additive --source-name {source_endpoint} '
                 '--target-name {target_endpoint} --agent-name {agent_name} --description JobDefinitionDescription '
                 '--source-subpath path1 --target-subpath path2')
        self.cmd('az storage-mover job-definition show -g {rg} -n {job_definition} --project-name {project_name} '
                 '--storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('copyMode', 'Additive'),
                         JMESPathCheck('description ', "JobDefinitionDescription"),
                         JMESPathCheck('sourceName', self.kwargs.get('source_endpoint')),
                         JMESPathCheck('targetName', self.kwargs.get('target_endpoint')),
                         JMESPathCheck('sourceSubpath', "path1"),
                         JMESPathCheck('targetSubpath', "path2")])
        self.cmd('az storage-mover job-definition update -g {rg} -n {job_definition} --project-name {project_name} '
                 '--storage-mover-name {mover_name} --copy-mode Mirror '
                 '--agent-name {agent_name} --description JobDefinitionDescription2',
                 checks=[JMESPathCheck('copyMode', 'Mirror'),
                         JMESPathCheck('description ', "JobDefinitionDescription2")])
        self.cmd('az storage-mover job-definition list -g {rg} --project-name {project_name} '
                 '--storage-mover-name {mover_name}', checks=[JMESPathCheck('length(@)', 1)])

        # # job run
        self.cmd('az storage-mover job-definition start-job -g {rg} --job-definition-name {job_definition} '
                 '--project-name {project_name} --storage-mover-name {mover_name}')
        job_runs = self.cmd('az storage-mover job-run list -g {rg} --job-definition-name {job_definition} '
                            '--project-name {project_name} --storage-mover-name {mover_name}').get_output_in_json()
        self.kwargs.update({"job_name": job_runs[0]["name"]})
        self.cmd('az storage-mover job-definition stop-job -g {rg} --job-definition-name {job_definition} '
                 '--project-name {project_name} --storage-mover-name {mover_name}')
        self.cmd('az storage-mover job-run show -n {job_name} -g {rg} --job-definition-name {job_definition} '
                 '--project-name {project_name} --storage-mover-name {mover_name}')

        self.cmd('az storage-mover job-definition delete -g {rg} -n {job_definition} --project-name {project_name} '
                 '--storage-mover-name {mover_name} -y')
        self.cmd('az storage-mover job-definition list -g {rg} --project-name {project_name} '
                 '--storage-mover-name {mover_name}', checks=[JMESPathCheck('length(@)', 0)])


    @ResourceGroupPreparer(location='eastus2euap')
    def test_storage_mover_project_scenarios(self, resource_group):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24),
            "project_name": self.create_random_name('project', 24)
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2euap '
                 '--tags {{key1:value1}} --description MoverDesc')
        self.cmd('az storage-mover project create -g {rg} --storage-mover-name {mover_name} -n {project_name} '
                 '--description ProjectDesc')
        self.cmd('az storage-mover project show -g {rg} --storage-mover-name {mover_name} -n {project_name}',
                 checks=[JMESPathCheck('name', self.kwargs.get('project_name', '')),
                        JMESPathCheck('description', "ProjectDesc")]
                 )
        self.cmd('az storage-mover project list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover project update -g {rg} --storage-mover-name {mover_name} -n {project_name} '
                 '--description ProjectDesc2',
                 checks=[JMESPathCheck('description', "ProjectDesc2")])
        self.cmd('az storage-mover project delete -g {rg} --storage-mover-name {mover_name} -n {project_name} -y')
        self.cmd('az storage-mover project list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 0)])
