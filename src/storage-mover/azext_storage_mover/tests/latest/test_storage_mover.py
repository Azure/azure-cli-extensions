# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
import time
from azure.cli.testsdk.scenario_tests import AllowLargeResponse


class StorageMoverScenario(ScenarioTest):
    @ResourceGroupPreparer(location='eastus2')
    def test_storage_mover_scenarios(self, resource_group):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24)
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2 '
                 '--tags {{key1:value1}} --description ExampleDesc')
        self.cmd('az storage-mover show -g {rg} -n {mover_name}',
                 checks=[JMESPathCheck('name', self.kwargs.get('mover_name', '')),
                         JMESPathCheck('location', "eastus2"),
                         JMESPathCheck('tags', {"key1":"value1"}),
                         JMESPathCheck('description', "ExampleDesc")])
        self.cmd('az storage-mover list -g {rg}', checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover update -g {rg} -n {mover_name} -l eastus2 '
                 '--tags {{key2:value2}} --description ExampleDesc2',
                 checks=[JMESPathCheck('tags', {"key2":"value2"}),
                         JMESPathCheck('description', "ExampleDesc2")])
        self.cmd('az storage-mover delete -g {rg} -n {mover_name} -y')
        self.cmd('az storage-mover list -g {rg}', checks=[JMESPathCheck('length(@)', 0)])

    @record_only()
    # need to manually register agent, first create the rg and the storagemover
    # az group create -n test-storagemover-rg-2 -l eastus2
    # az storage-mover create -n teststoragemover -g test-storagemover-rg-2
    def test_storage_mover_agent_scenarios(self):
        self.kwargs.update({
            "rg": "test-storagemover-rg-2",
            "mover_name": "teststoragemover",
            "agent_name": "testagent"
        })
        self.cmd('az storage-mover agent show -g {rg} -n {agent_name} --storage-mover-name {mover_name}')
        self.cmd('az storage-mover agent list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover agent update -g {rg} -n {agent_name} --storage-mover-name {mover_name} '
                 '--description 123')
        self.cmd('az storage-mover agent unregister -g {rg} -n {agent_name} --storage-mover-name {mover_name} -y')
        self.cmd('az storage-mover agent list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 0)])

    @ResourceGroupPreparer(location='eastus2')
    @StorageAccountPreparer()
    @AllowLargeResponse()
    def test_storage_mover_endpoint_scenarios(self, resource_group, storage_account):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24),
            "container_name": self.create_random_name('container', 24),
            "account_name": storage_account,
            "account_key": self.cmd('az storage account keys list -n {} -g {} --query "[0].value" '
                                    '-otsv'.format(storage_account, resource_group)).output,
            "account_id": self.cmd('az storage account show -n {} -g {} --query id '
                                   '-otsv'.format(storage_account, resource_group)).output.strip(),
            "endpoint_container": self.create_random_name('endpoint_container', 32),
            "endpoint_nfs": self.create_random_name('endpoint_nfs', 32),
            "vm_name": self.create_random_name('vm', 24),
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2 '
                 '--tags {{key1:value1}} --description MoverDesc')
        # create for storage container
        self.cmd('az storage container create -n {container_name} --account-name {account_name} '
                 '--account-key {account_key}')
        self.cmd('az storage-mover endpoint create-for-storage-container -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_container} --container-name {container_name} --storage-account-id {account_id} '
                 '--description endpointDesc')
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_container}',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_container', '')),
                         JMESPathCheck('properties.blobContainerName', self.kwargs.get('container_name', '')),
                         JMESPathCheck('properties.endpointType', "AzureStorageBlobContainer"),
                         JMESPathCheck('properties.storageAccountResourceId', self.kwargs.get('account_id', '')),
                         JMESPathCheck('properties.description', "endpointDesc"),
                         ])
        # create for nfs
        vm_ip = self.cmd('az vm create -n {vm_name} -g {rg} --image UbuntuLTS --size Standard_D4s_v3 --nsg-rule '
                 'NONE --admin-username ubuntuuser').get_output_in_json()["publicIpAddress"]
        self.cmd('az storage-mover endpoint create-for-nfs -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_nfs} --description endpointDesc --export exportfolder --nfs-version NFSv4 --host '+vm_ip)
        self.cmd('az storage-mover endpoint show -g {rg} --storage-mover-name {mover_name} -n {endpoint_nfs}',
                       checks=[JMESPathCheck('name', self.kwargs.get('endpoint_nfs', '')),
                               JMESPathCheck('properties.export', "exportfolder"),
                               JMESPathCheck('properties.endpointType', "NfsMount"),
                               JMESPathCheck('properties.host', vm_ip),
                               JMESPathCheck('properties.nfsVersion', "NFSv4"),
                               JMESPathCheck('properties.description', "endpointDesc")])
        self.cmd('az storage-mover endpoint list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 2)])

        # update for storage container
        self.cmd('az storage-mover endpoint update-for-storage-container -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_container} --description endpointDescUpdate '
                 '--container-name {container_name} --storage-account-id {account_id}',
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_container', '')),
                         JMESPathCheck('properties.description', "endpointDescUpdate")])

        # update for nfs
        self.cmd('az storage-mover endpoint update-for-nfs -g {rg} --storage-mover-name {mover_name} '
                 '-n {endpoint_nfs} --description endpointDescUpdate '
                 '--export exportfolder --nfs-version NFSv4 --host ' + vm_ip,
                 checks=[JMESPathCheck('name', self.kwargs.get('endpoint_nfs', '')),
                         JMESPathCheck('properties.description', "endpointDescUpdate")])

        self.cmd('az storage-mover endpoint delete -g {rg} --storage-mover-name {mover_name} -n {endpoint_nfs} -y')
        self.cmd('az storage-mover endpoint list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 1)])

    @ResourceGroupPreparer(location='eastus2')
    def test_storage_mover_project_scenarios(self, resource_group):
        self.kwargs.update({
            "mover_name": self.create_random_name('storage-mover', 24),
            "project_name": self.create_random_name('project', 24)
        })
        self.cmd('az storage-mover create -g {rg} -n {mover_name} -l eastus2 '
                 '--tags {{key1:value1}} --description MoverDesc')
        self.cmd('az storage-mover project create -g {rg} --storage-mover-name {mover_name} -n {project_name} '
                 '--description ProjectDesc')
        self.cmd('az storage-mover project show -g {rg} --storage-mover-name {mover_name} -n {project_name}',
                 checks=[JMESPathCheck('name', self.kwargs.get('project_name', '')),
                        JMESPathCheck('description', "ProjectDesc")]
                 )
        self.cmd('az storage-mover project list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 1)])
        self.cmd('az storage-mover project update -g {rg} --storage-mover-name {mover_name} -n {project_name} '
                 '--description ProjectDesc2',
                 checks=[JMESPathCheck('description', "ProjectDesc2")])
        self.cmd('az storage-mover project delete -g {rg} --storage-mover-name {mover_name} -n {project_name} -y')
        self.cmd('az storage-mover project list -g {rg} --storage-mover-name {mover_name}',
                 checks=[JMESPathCheck('length(@)', 0)])
