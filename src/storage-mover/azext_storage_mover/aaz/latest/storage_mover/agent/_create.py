# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Creates an Agent resource, which references a hybrid compute machine that can run jobs.
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storagemover/storagemovers/{}/agents/{}", "2024-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.agent_name = AAZStrArg(
            options=["-n", "--name", "--agent-name"],
            help="The name of the Agent resource.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_mover_name = AAZStrArg(
            options=["--storage-mover-name"],
            help="The name of the Storage Mover resource.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.arc_resource_id = AAZStrArg(
            options=["--arc-resource-id"],
            arg_group="Properties",
            help="The fully qualified resource ID of the Hybrid Compute resource for the Agent.",
            required=True,
        )
        _args_schema.arc_vm_uuid = AAZStrArg(
            options=["--arc-vm-uuid"],
            arg_group="Properties",
            help="The VM UUID of the Hybrid Compute resource for the Agent.",
            required=True,
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="A description for the Agent.",
        )
        _args_schema.upload_limit_schedule = AAZObjectArg(
            options=["--upload-limit-schedule"],
            arg_group="Properties",
            help="The WAN-link upload limit schedule that applies to any Job Run the agent executes. Data plane operations (migrating files) are affected. Control plane operations ensure seamless migration functionality and are not limited by this schedule. The schedule is interpreted with the agent's local time.",
        )

        upload_limit_schedule = cls._args_schema.upload_limit_schedule
        upload_limit_schedule.weekly_recurrences = AAZListArg(
            options=["weekly-recurrences"],
            help="The set of weekly repeating recurrences of the WAN-link upload limit schedule.",
        )

        weekly_recurrences = cls._args_schema.upload_limit_schedule.weekly_recurrences
        weekly_recurrences.Element = AAZObjectArg()

        _element = cls._args_schema.upload_limit_schedule.weekly_recurrences.Element
        _element.days = AAZListArg(
            options=["days"],
            help="The set of days of week for the schedule recurrence. A day must not be specified more than once in a recurrence.",
            required=True,
        )
        _element.end_time = AAZObjectArg(
            options=["end-time"],
            help="The end time of the schedule recurrence. Full hour and 30-minute intervals are supported.",
            required=True,
        )
        cls._build_args_time_create(_element.end_time)
        _element.limit_in_mbps = AAZIntArg(
            options=["limit-in-mbps"],
            help="The WAN-link upload bandwidth (maximum data transfer rate) in megabits per second. Value of 0 indicates no throughput is allowed and any running migration job is effectively paused for the duration of this recurrence. Only data plane operations are governed by this limit. Control plane operations ensure seamless functionality. The agent may exceed this limit with control messages, if necessary.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=2147483647,
                minimum=0,
            ),
        )
        _element.start_time = AAZObjectArg(
            options=["start-time"],
            help="The start time of the schedule recurrence. Full hour and 30-minute intervals are supported.",
            required=True,
        )
        cls._build_args_time_create(_element.start_time)

        days = cls._args_schema.upload_limit_schedule.weekly_recurrences.Element.days
        days.Element = AAZStrArg(
            enum={"Friday": "Friday", "Monday": "Monday", "Saturday": "Saturday", "Sunday": "Sunday", "Thursday": "Thursday", "Tuesday": "Tuesday", "Wednesday": "Wednesday"},
        )
        return cls._args_schema

    _args_time_create = None

    @classmethod
    def _build_args_time_create(cls, _schema):
        if cls._args_time_create is not None:
            _schema.hour = cls._args_time_create.hour
            _schema.minute = cls._args_time_create.minute
            return

        cls._args_time_create = AAZObjectArg()

        time_create = cls._args_time_create
        time_create.hour = AAZIntArg(
            options=["hour"],
            help="The hour element of the time. Allowed values range from 0 (start of the selected day) to 24 (end of the selected day). Hour value 24 cannot be combined with any other minute value but 0.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=24,
                minimum=0,
            ),
        )
        time_create.minute = AAZIntArg(
            options=["minute"],
            help="The minute element of the time. Allowed values are 0 and 30. If not specified, its value defaults to 0.",
            default=0,
            enum={"0": 0, "30": 30},
        )

        _schema.hour = cls._args_time_create.hour
        _schema.minute = cls._args_time_create.minute

    def _execute_operations(self):
        self.pre_operations()
        self.AgentsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AgentsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/agents/{agentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "agentName", self.ctx.args.agent_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageMoverName", self.ctx.args.storage_mover_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("arcResourceId", AAZStrType, ".arc_resource_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("arcVmUuid", AAZStrType, ".arc_vm_uuid", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("uploadLimitSchedule", AAZObjectType, ".upload_limit_schedule")

            upload_limit_schedule = _builder.get(".properties.uploadLimitSchedule")
            if upload_limit_schedule is not None:
                upload_limit_schedule.set_prop("weeklyRecurrences", AAZListType, ".weekly_recurrences")

            weekly_recurrences = _builder.get(".properties.uploadLimitSchedule.weeklyRecurrences")
            if weekly_recurrences is not None:
                weekly_recurrences.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.uploadLimitSchedule.weeklyRecurrences[]")
            if _elements is not None:
                _elements.set_prop("days", AAZListType, ".days", typ_kwargs={"flags": {"required": True}})
                _CreateHelper._build_schema_time_create(_elements.set_prop("endTime", AAZObjectType, ".end_time", typ_kwargs={"flags": {"required": True}}))
                _elements.set_prop("limitInMbps", AAZIntType, ".limit_in_mbps", typ_kwargs={"flags": {"required": True}})
                _CreateHelper._build_schema_time_create(_elements.set_prop("startTime", AAZObjectType, ".start_time", typ_kwargs={"flags": {"required": True}}))

            days = _builder.get(".properties.uploadLimitSchedule.weeklyRecurrences[].days")
            if days is not None:
                days.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.agent_status = AAZStrType(
                serialized_name="agentStatus",
                flags={"read_only": True},
            )
            properties.agent_version = AAZStrType(
                serialized_name="agentVersion",
                flags={"read_only": True},
            )
            properties.arc_resource_id = AAZStrType(
                serialized_name="arcResourceId",
                flags={"required": True},
            )
            properties.arc_vm_uuid = AAZStrType(
                serialized_name="arcVmUuid",
                flags={"required": True},
            )
            properties.description = AAZStrType()
            properties.error_details = AAZObjectType(
                serialized_name="errorDetails",
                flags={"read_only": True},
            )
            properties.last_status_update = AAZStrType(
                serialized_name="lastStatusUpdate",
                flags={"read_only": True},
            )
            properties.local_ip_address = AAZStrType(
                serialized_name="localIPAddress",
                flags={"read_only": True},
            )
            properties.memory_in_mb = AAZIntType(
                serialized_name="memoryInMB",
                flags={"read_only": True},
            )
            properties.number_of_cores = AAZIntType(
                serialized_name="numberOfCores",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.time_zone = AAZStrType(
                serialized_name="timeZone",
                flags={"read_only": True},
            )
            properties.upload_limit_schedule = AAZObjectType(
                serialized_name="uploadLimitSchedule",
            )
            properties.uptime_in_seconds = AAZIntType(
                serialized_name="uptimeInSeconds",
                flags={"read_only": True},
            )

            error_details = cls._schema_on_200.properties.error_details
            error_details.code = AAZStrType()
            error_details.message = AAZStrType()

            upload_limit_schedule = cls._schema_on_200.properties.upload_limit_schedule
            upload_limit_schedule.weekly_recurrences = AAZListType(
                serialized_name="weeklyRecurrences",
            )

            weekly_recurrences = cls._schema_on_200.properties.upload_limit_schedule.weekly_recurrences
            weekly_recurrences.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.upload_limit_schedule.weekly_recurrences.Element
            _element.days = AAZListType(
                flags={"required": True},
            )
            _element.end_time = AAZObjectType(
                serialized_name="endTime",
                flags={"required": True},
            )
            _CreateHelper._build_schema_time_read(_element.end_time)
            _element.limit_in_mbps = AAZIntType(
                serialized_name="limitInMbps",
                flags={"required": True},
            )
            _element.start_time = AAZObjectType(
                serialized_name="startTime",
                flags={"required": True},
            )
            _CreateHelper._build_schema_time_read(_element.start_time)

            days = cls._schema_on_200.properties.upload_limit_schedule.weekly_recurrences.Element.days
            days.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_time_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("hour", AAZIntType, ".hour", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("minute", AAZIntType, ".minute")

    _schema_time_read = None

    @classmethod
    def _build_schema_time_read(cls, _schema):
        if cls._schema_time_read is not None:
            _schema.hour = cls._schema_time_read.hour
            _schema.minute = cls._schema_time_read.minute
            return

        cls._schema_time_read = _schema_time_read = AAZObjectType()

        time_read = _schema_time_read
        time_read.hour = AAZIntType(
            flags={"required": True},
        )
        time_read.minute = AAZIntType()

        _schema.hour = cls._schema_time_read.hour
        _schema.minute = cls._schema_time_read.minute


__all__ = ["Create"]
