# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "storage-mover job-definition create",
    is_preview=True,
)
class Create(AAZCommand):
    """Creates a job definition resource, which contains configuration for a single unit of managed data transfer.
    """

    _aaz_info = {
        "version": "2022-07-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storagemover/storagemovers/{}/projects/{}/jobdefinitions/{}", "2022-07-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.job_definition_name = AAZStrArg(
            options=["--job-definition-name", "--name", "-n"],
            help="The name of the job definition resource.",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.project_name = AAZStrArg(
            options=["--project-name"],
            help="The name of the project resource.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_mover_name = AAZStrArg(
            options=["--storage-mover-name"],
            help="The name of the Storage Mover resource.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.agent_name = AAZStrArg(
            options=["--agent-name"],
            arg_group="Properties",
            help="Name of the agent to assign for new job runs of this definition.",
        )
        _args_schema.copy_mode = AAZStrArg(
            options=["--copy-mode"],
            arg_group="Properties",
            help="Strategy to use for copy.",
            enum={"Additive": "Additive", "Default": "Default", "Mirror": "Mirror"},
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="A description for the job definition.",
        )
        _args_schema.source_name = AAZStrArg(
            options=["--source-name"],
            arg_group="Properties",
            help="The name of the source endpoint.",
        )
        _args_schema.source_subpath = AAZStrArg(
            options=["--source-subpath"],
            arg_group="Properties",
            help="The subpath to use when reading from the source Endpoint.",
        )
        _args_schema.target_name = AAZStrArg(
            options=["--target-name"],
            arg_group="Properties",
            help="The name of the target endpoint.",
        )
        _args_schema.target_subpath = AAZStrArg(
            options=["--target-subpath"],
            arg_group="Properties",
            help="The subpath to use when writing to the target Endpoint.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.JobDefinitionsCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class JobDefinitionsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "jobDefinitionName", self.ctx.args.job_definition_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "projectName", self.ctx.args.project_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageMoverName", self.ctx.args.storage_mover_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("agentName", AAZStrType, ".agent_name")
                properties.set_prop("copyMode", AAZStrType, ".copy_mode")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("sourceName", AAZStrType, ".source_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("sourceSubpath", AAZStrType, ".source_subpath")
                properties.set_prop("targetName", AAZStrType, ".target_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("targetSubpath", AAZStrType, ".target_subpath")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.agent_name = AAZStrType(
                serialized_name="agentName",
            )
            properties.agent_resource_id = AAZStrType(
                serialized_name="agentResourceId",
                flags={"read_only": True},
            )
            properties.copy_mode = AAZStrType(
                serialized_name="copyMode",
            )
            properties.description = AAZStrType()
            properties.latest_job_run_name = AAZStrType(
                serialized_name="latestJobRunName",
                flags={"read_only": True},
            )
            properties.latest_job_run_resource_id = AAZStrType(
                serialized_name="latestJobRunResourceId",
                flags={"read_only": True},
            )
            properties.latest_job_run_status = AAZStrType(
                serialized_name="latestJobRunStatus",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.source_name = AAZStrType(
                serialized_name="sourceName",
                flags={"required": True},
            )
            properties.source_resource_id = AAZStrType(
                serialized_name="sourceResourceId",
                flags={"read_only": True},
            )
            properties.source_subpath = AAZStrType(
                serialized_name="sourceSubpath",
            )
            properties.target_name = AAZStrType(
                serialized_name="targetName",
                flags={"required": True},
            )
            properties.target_resource_id = AAZStrType(
                serialized_name="targetResourceId",
                flags={"read_only": True},
            )
            properties.target_subpath = AAZStrType(
                serialized_name="targetSubpath",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            return cls._schema_on_200


__all__ = ["Create"]
