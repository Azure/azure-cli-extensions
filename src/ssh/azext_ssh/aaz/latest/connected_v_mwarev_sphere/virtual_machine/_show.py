# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Show(AAZCommand):
    """Get virtual machine GET method.
    """

    _aaz_info = {
        "version": "2022-07-15-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.connectedvmwarevsphere/virtualmachines/{}", "2022-07-15-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.virtual_machine_name = AAZStrArg(
            options=["-n", "--name", "--virtual-machine-name"],
            help="Name of the virtual machine resource.",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.VirtualMachinesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class VirtualMachinesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachines/{virtualMachineName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "virtualMachineName", self.ctx.args.virtual_machine_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-07-15-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.extended_location = AAZObjectType(
                serialized_name="extendedLocation",
            )
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.identity = AAZObjectType()
            _schema_on_200.kind = AAZStrType()
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            extended_location = cls._schema_on_200.extended_location
            extended_location.name = AAZStrType()
            extended_location.type = AAZStrType()

            identity = cls._schema_on_200.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )

            properties = cls._schema_on_200.properties
            properties.custom_resource_name = AAZStrType(
                serialized_name="customResourceName",
                flags={"read_only": True},
            )
            properties.firmware_type = AAZStrType(
                serialized_name="firmwareType",
            )
            properties.folder_path = AAZStrType(
                serialized_name="folderPath",
                flags={"read_only": True},
            )
            properties.guest_agent_profile = AAZObjectType(
                serialized_name="guestAgentProfile",
            )
            properties.hardware_profile = AAZObjectType(
                serialized_name="hardwareProfile",
            )
            properties.instance_uuid = AAZStrType(
                serialized_name="instanceUuid",
                flags={"read_only": True},
            )
            properties.inventory_item_id = AAZStrType(
                serialized_name="inventoryItemId",
            )
            properties.mo_name = AAZStrType(
                serialized_name="moName",
                flags={"read_only": True},
            )
            properties.mo_ref_id = AAZStrType(
                serialized_name="moRefId",
            )
            properties.network_profile = AAZObjectType(
                serialized_name="networkProfile",
            )
            properties.os_profile = AAZObjectType(
                serialized_name="osProfile",
            )
            properties.placement_profile = AAZObjectType(
                serialized_name="placementProfile",
            )
            properties.power_state = AAZStrType(
                serialized_name="powerState",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.resource_pool_id = AAZStrType(
                serialized_name="resourcePoolId",
            )
            properties.security_profile = AAZObjectType(
                serialized_name="securityProfile",
            )
            properties.smbios_uuid = AAZStrType(
                serialized_name="smbiosUuid",
            )
            properties.statuses = AAZListType(
                flags={"read_only": True},
            )
            properties.storage_profile = AAZObjectType(
                serialized_name="storageProfile",
            )
            properties.template_id = AAZStrType(
                serialized_name="templateId",
            )
            properties.uuid = AAZStrType(
                flags={"read_only": True},
            )
            properties.v_center_id = AAZStrType(
                serialized_name="vCenterId",
            )
            properties.vm_id = AAZStrType(
                serialized_name="vmId",
                flags={"read_only": True},
            )

            guest_agent_profile = cls._schema_on_200.properties.guest_agent_profile
            guest_agent_profile.agent_version = AAZStrType(
                serialized_name="agentVersion",
                flags={"read_only": True},
            )
            guest_agent_profile.client_public_key = AAZStrType(
                serialized_name="clientPublicKey",
            )
            guest_agent_profile.error_details = AAZListType(
                serialized_name="errorDetails",
                flags={"read_only": True},
            )
            guest_agent_profile.last_status_change = AAZStrType(
                serialized_name="lastStatusChange",
                flags={"read_only": True},
            )
            guest_agent_profile.mssql_discovered = AAZStrType(
                serialized_name="mssqlDiscovered",
                flags={"read_only": True},
            )
            guest_agent_profile.status = AAZStrType(
                flags={"read_only": True},
            )
            guest_agent_profile.vm_uuid = AAZStrType(
                serialized_name="vmUuid",
                flags={"read_only": True},
            )

            error_details = cls._schema_on_200.properties.guest_agent_profile.error_details
            error_details.Element = AAZObjectType()
            _ShowHelper._build_schema_error_detail_read(error_details.Element)

            hardware_profile = cls._schema_on_200.properties.hardware_profile
            hardware_profile.cpu_hot_add_enabled = AAZBoolType(
                serialized_name="cpuHotAddEnabled",
                flags={"read_only": True},
            )
            hardware_profile.cpu_hot_remove_enabled = AAZBoolType(
                serialized_name="cpuHotRemoveEnabled",
                flags={"read_only": True},
            )
            hardware_profile.memory_hot_add_enabled = AAZBoolType(
                serialized_name="memoryHotAddEnabled",
                flags={"read_only": True},
            )
            hardware_profile.memory_size_mb = AAZIntType(
                serialized_name="memorySizeMB",
            )
            hardware_profile.num_cp_us = AAZIntType(
                serialized_name="numCPUs",
            )
            hardware_profile.num_cores_per_socket = AAZIntType(
                serialized_name="numCoresPerSocket",
            )

            network_profile = cls._schema_on_200.properties.network_profile
            network_profile.network_interfaces = AAZListType(
                serialized_name="networkInterfaces",
            )

            network_interfaces = cls._schema_on_200.properties.network_profile.network_interfaces
            network_interfaces.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.network_profile.network_interfaces.Element
            _element.device_key = AAZIntType(
                serialized_name="deviceKey",
            )
            _element.ip_addresses = AAZListType(
                serialized_name="ipAddresses",
                flags={"read_only": True},
            )
            _element.ip_settings = AAZObjectType(
                serialized_name="ipSettings",
            )
            _element.label = AAZStrType(
                flags={"read_only": True},
            )
            _element.mac_address = AAZStrType(
                serialized_name="macAddress",
                flags={"read_only": True},
            )
            _element.name = AAZStrType()
            _element.network_id = AAZStrType(
                serialized_name="networkId",
            )
            _element.network_mo_name = AAZStrType(
                serialized_name="networkMoName",
                flags={"read_only": True},
            )
            _element.network_mo_ref_id = AAZStrType(
                serialized_name="networkMoRefId",
                flags={"read_only": True},
            )
            _element.nic_type = AAZStrType(
                serialized_name="nicType",
            )
            _element.power_on_boot = AAZStrType(
                serialized_name="powerOnBoot",
            )

            ip_addresses = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_addresses
            ip_addresses.Element = AAZStrType()

            ip_settings = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_settings
            ip_settings.allocation_method = AAZStrType(
                serialized_name="allocationMethod",
            )
            ip_settings.dns_servers = AAZListType(
                serialized_name="dnsServers",
            )
            ip_settings.gateway = AAZListType()
            ip_settings.ip_address = AAZStrType(
                serialized_name="ipAddress",
            )
            ip_settings.ip_address_info = AAZListType(
                serialized_name="ipAddressInfo",
                flags={"read_only": True},
            )
            ip_settings.primary_wins_server = AAZStrType(
                serialized_name="primaryWinsServer",
                flags={"read_only": True},
            )
            ip_settings.secondary_wins_server = AAZStrType(
                serialized_name="secondaryWinsServer",
                flags={"read_only": True},
            )
            ip_settings.subnet_mask = AAZStrType(
                serialized_name="subnetMask",
            )

            dns_servers = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_settings.dns_servers
            dns_servers.Element = AAZStrType()

            gateway = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_settings.gateway
            gateway.Element = AAZStrType()

            ip_address_info = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_settings.ip_address_info
            ip_address_info.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.network_profile.network_interfaces.Element.ip_settings.ip_address_info.Element
            _element.allocation_method = AAZStrType(
                serialized_name="allocationMethod",
                flags={"read_only": True},
            )
            _element.ip_address = AAZStrType(
                serialized_name="ipAddress",
                flags={"read_only": True},
            )
            _element.subnet_mask = AAZStrType(
                serialized_name="subnetMask",
                flags={"read_only": True},
            )

            os_profile = cls._schema_on_200.properties.os_profile
            os_profile.admin_username = AAZStrType(
                serialized_name="adminUsername",
            )
            os_profile.allow_extension_operations = AAZBoolType(
                serialized_name="allowExtensionOperations",
                flags={"read_only": True},
            )
            os_profile.computer_name = AAZStrType(
                serialized_name="computerName",
            )
            os_profile.guest_id = AAZStrType(
                serialized_name="guestId",
            )
            os_profile.linux_configuration = AAZObjectType(
                serialized_name="linuxConfiguration",
            )
            os_profile.os_name = AAZStrType(
                serialized_name="osName",
                flags={"read_only": True},
            )
            os_profile.os_type = AAZStrType(
                serialized_name="osType",
            )
            os_profile.tools_running_status = AAZStrType(
                serialized_name="toolsRunningStatus",
                flags={"read_only": True},
            )
            os_profile.tools_version = AAZStrType(
                serialized_name="toolsVersion",
                flags={"read_only": True},
            )
            os_profile.tools_version_status = AAZStrType(
                serialized_name="toolsVersionStatus",
                flags={"read_only": True},
            )
            os_profile.windows_configuration = AAZObjectType(
                serialized_name="windowsConfiguration",
            )

            linux_configuration = cls._schema_on_200.properties.os_profile.linux_configuration
            linux_configuration.patch_settings = AAZObjectType(
                serialized_name="patchSettings",
                flags={"client_flatten": True},
            )
            _ShowHelper._build_schema_patch_settings_read(linux_configuration.patch_settings)

            windows_configuration = cls._schema_on_200.properties.os_profile.windows_configuration
            windows_configuration.patch_settings = AAZObjectType(
                serialized_name="patchSettings",
                flags={"client_flatten": True},
            )
            _ShowHelper._build_schema_patch_settings_read(windows_configuration.patch_settings)

            placement_profile = cls._schema_on_200.properties.placement_profile
            placement_profile.cluster_id = AAZStrType(
                serialized_name="clusterId",
            )
            placement_profile.datastore_id = AAZStrType(
                serialized_name="datastoreId",
            )
            placement_profile.host_id = AAZStrType(
                serialized_name="hostId",
            )
            placement_profile.resource_pool_id = AAZStrType(
                serialized_name="resourcePoolId",
            )

            security_profile = cls._schema_on_200.properties.security_profile
            security_profile.uefi_settings = AAZObjectType(
                serialized_name="uefiSettings",
            )

            uefi_settings = cls._schema_on_200.properties.security_profile.uefi_settings
            uefi_settings.secure_boot_enabled = AAZBoolType(
                serialized_name="secureBootEnabled",
            )

            statuses = cls._schema_on_200.properties.statuses
            statuses.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.statuses.Element
            _element.last_updated_at = AAZStrType(
                serialized_name="lastUpdatedAt",
                flags={"read_only": True},
            )
            _element.message = AAZStrType(
                flags={"read_only": True},
            )
            _element.reason = AAZStrType(
                flags={"read_only": True},
            )
            _element.severity = AAZStrType(
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            storage_profile = cls._schema_on_200.properties.storage_profile
            storage_profile.disks = AAZListType()
            storage_profile.scsi_controllers = AAZListType(
                serialized_name="scsiControllers",
                flags={"read_only": True},
            )

            disks = cls._schema_on_200.properties.storage_profile.disks
            disks.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.storage_profile.disks.Element
            _element.controller_key = AAZIntType(
                serialized_name="controllerKey",
            )
            _element.device_key = AAZIntType(
                serialized_name="deviceKey",
            )
            _element.device_name = AAZStrType(
                serialized_name="deviceName",
            )
            _element.disk_mode = AAZStrType(
                serialized_name="diskMode",
            )
            _element.disk_object_id = AAZStrType(
                serialized_name="diskObjectId",
                flags={"read_only": True},
            )
            _element.disk_size_gb = AAZIntType(
                serialized_name="diskSizeGB",
            )
            _element.disk_type = AAZStrType(
                serialized_name="diskType",
            )
            _element.label = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType()
            _element.unit_number = AAZIntType(
                serialized_name="unitNumber",
            )

            scsi_controllers = cls._schema_on_200.properties.storage_profile.scsi_controllers
            scsi_controllers.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.storage_profile.scsi_controllers.Element
            _element.bus_number = AAZIntType(
                serialized_name="busNumber",
            )
            _element.controller_key = AAZIntType(
                serialized_name="controllerKey",
            )
            _element.scsi_ctlr_unit_number = AAZIntType(
                serialized_name="scsiCtlrUnitNumber",
            )
            _element.sharing = AAZStrType()
            _element.type = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType()

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target

    _schema_patch_settings_read = None

    @classmethod
    def _build_schema_patch_settings_read(cls, _schema):
        if cls._schema_patch_settings_read is not None:
            _schema.assessment_mode = cls._schema_patch_settings_read.assessment_mode
            _schema.patch_mode = cls._schema_patch_settings_read.patch_mode
            return

        cls._schema_patch_settings_read = _schema_patch_settings_read = AAZObjectType()

        patch_settings_read = _schema_patch_settings_read
        patch_settings_read.assessment_mode = AAZStrType(
            serialized_name="assessmentMode",
        )
        patch_settings_read.patch_mode = AAZStrType(
            serialized_name="patchMode",
        )

        _schema.assessment_mode = cls._schema_patch_settings_read.assessment_mode
        _schema.patch_mode = cls._schema_patch_settings_read.patch_mode


__all__ = ["Show"]
