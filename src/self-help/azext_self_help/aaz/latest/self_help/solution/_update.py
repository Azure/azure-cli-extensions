# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "self-help solution update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update a solution for the specific Azure resource or subscription using the triggering criteria from discovery solutions.

    :example: Update Solution at Resource Level
        az self-help solution update --solution-name solution-name --trigger-criteria [{name:ReplacementKey,value:<!--56ee7509-92e1-4b9e-97c2-dda53065294c-->}] --parameters {SearchText:CanNotRDP,SymptomId:KeyVaultVaultNotFoundInsight} --scope  'subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read'
    """

    _aaz_info = {
        "version": "2023-09-01-preview",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.help/solutions/{}", "2023-09-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="This is an extension resource provider and only resource level extension is supported at the moment.",
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["--solution-name"],
            help="Solution resource Name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9-+@()_]+$",
                max_length=100,
                min_length=1,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.content = AAZStrArg(
            options=["--content"],
            arg_group="Properties",
            help="The HTML content that needs to be rendered and shown to customer.",
            nullable=True,
        )
        _args_schema.parameters = AAZDictArg(
            options=["--parameters"],
            arg_group="Properties",
            help="Client input parameters to run Solution",
            nullable=True,
        )
        _args_schema.provisioning_state = AAZStrArg(
            options=["--provisioning-state"],
            arg_group="Properties",
            help="Status of solution provisioning.",
            nullable=True,
            enum={"Canceled": "Canceled", "Failed": "Failed", "Succeeded": "Succeeded"},
        )
        _args_schema.replacement_maps = AAZObjectArg(
            options=["--replacement-maps"],
            arg_group="Properties",
            help="Solution replacement maps.",
            nullable=True,
        )
        cls._build_args_replacement_maps_update(_args_schema.replacement_maps)
        _args_schema.sections = AAZListArg(
            options=["--sections"],
            arg_group="Properties",
            help="List of section object.",
            nullable=True,
        )
        _args_schema.solution_id = AAZStrArg(
            options=["--solution-id"],
            arg_group="Properties",
            help="Solution Id to identify single solution.",
            nullable=True,
        )
        _args_schema.title = AAZStrArg(
            options=["--title"],
            arg_group="Properties",
            help="The title.",
            nullable=True,
        )
        _args_schema.trigger_criteria = AAZListArg(
            options=["--trigger-criteria"],
            arg_group="Properties",
            help="Solution request trigger criteria",
            nullable=True,
        )

        parameters = cls._args_schema.parameters
        parameters.Element = AAZStrArg(
            nullable=True,
        )

        sections = cls._args_schema.sections
        sections.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.sections.Element
        _element.content = AAZStrArg(
            options=["content"],
            help="Solution sections content.",
            nullable=True,
        )
        _element.replacement_maps = AAZObjectArg(
            options=["replacement-maps"],
            nullable=True,
        )
        cls._build_args_replacement_maps_update(_element.replacement_maps)
        _element.title = AAZStrArg(
            options=["title"],
            help="Solution sections title.",
            nullable=True,
        )

        trigger_criteria = cls._args_schema.trigger_criteria
        trigger_criteria.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.trigger_criteria.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Trigger criterion name.",
            nullable=True,
            enum={"ProblemClassificationId": "ProblemClassificationId", "ReplacementKey": "ReplacementKey", "SolutionId": "SolutionId"},
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="Trigger criterion value.",
            nullable=True,
        )
        return cls._args_schema

    _args_replacement_maps_update = None

    @classmethod
    def _build_args_replacement_maps_update(cls, _schema):
        if cls._args_replacement_maps_update is not None:
            _schema.diagnostics = cls._args_replacement_maps_update.diagnostics
            _schema.metrics_based_charts = cls._args_replacement_maps_update.metrics_based_charts
            _schema.troubleshooters = cls._args_replacement_maps_update.troubleshooters
            _schema.video_groups = cls._args_replacement_maps_update.video_groups
            _schema.videos = cls._args_replacement_maps_update.videos
            _schema.web_results = cls._args_replacement_maps_update.web_results
            return

        cls._args_replacement_maps_update = AAZObjectArg(
            nullable=True,
        )

        replacement_maps_update = cls._args_replacement_maps_update
        replacement_maps_update.diagnostics = AAZListArg(
            options=["diagnostics"],
            help="Solution diagnostics results.",
            nullable=True,
        )
        replacement_maps_update.metrics_based_charts = AAZListArg(
            options=["metrics-based-charts"],
            help="Solution metrics based charts",
            nullable=True,
        )
        replacement_maps_update.troubleshooters = AAZListArg(
            options=["troubleshooters"],
            help="Solutions Troubleshooters",
            nullable=True,
        )
        replacement_maps_update.video_groups = AAZListArg(
            options=["video-groups"],
            help="Group of Videos",
            nullable=True,
        )
        replacement_maps_update.videos = AAZListArg(
            options=["videos"],
            help="Video solutions, which have the power to engage the customer by stimulating their senses",
            nullable=True,
        )
        replacement_maps_update.web_results = AAZListArg(
            options=["web-results"],
            help="Solution AzureKB results",
            nullable=True,
        )

        diagnostics = cls._args_replacement_maps_update.diagnostics
        diagnostics.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.diagnostics.Element
        _element.insights = AAZListArg(
            options=["insights"],
            help="Diagnostic insights",
            nullable=True,
        )
        _element.replacement_key = AAZStrArg(
            options=["replacement-key"],
            help="Place holder used in HTML Content replace control with the content",
            nullable=True,
        )
        _element.required_parameters = AAZListArg(
            options=["required-parameters"],
            help="Required parameters of this item",
            nullable=True,
        )
        _element.solution_id = AAZStrArg(
            options=["solution-id"],
            help="Solution Id to identify single Solutions Diagnostic",
            nullable=True,
        )
        _element.status = AAZStrArg(
            options=["status"],
            help="The status of the resource.",
            nullable=True,
            enum={"Failed": "Failed", "MissingInputs": "MissingInputs", "Running": "Running", "Succeeded": "Succeeded", "Timeout": "Timeout"},
        )
        _element.status_details = AAZStrArg(
            options=["status-details"],
            help="Details of the status",
            nullable=True,
        )

        insights = cls._args_replacement_maps_update.diagnostics.Element.insights
        insights.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.diagnostics.Element.insights.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Article id.",
            nullable=True,
        )
        _element.importance_level = AAZStrArg(
            options=["importance-level"],
            help="Importance level of the insight.",
            nullable=True,
            enum={"Critical": "Critical", "Information": "Information", "Warning": "Warning"},
        )
        _element.results = AAZStrArg(
            options=["results"],
            help="Detailed result content.",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="This insight's title.",
            nullable=True,
        )

        required_parameters = cls._args_replacement_maps_update.diagnostics.Element.required_parameters
        required_parameters.Element = AAZStrArg(
            nullable=True,
        )

        metrics_based_charts = cls._args_replacement_maps_update.metrics_based_charts
        metrics_based_charts.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.metrics_based_charts.Element
        _element.aggregation_type = AAZStrArg(
            options=["aggregation-type"],
            help="Allowed values are Sum, Avg, Count, Min, Max. Default is Sum",
            nullable=True,
            enum={"Avg": "Avg", "Count": "Count", "Max": "Max", "Min": "Min", "Sum": "Sum"},
        )
        _element.filter_group = AAZObjectArg(
            options=["filter-group"],
            help="Filter group",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Chart name",
            nullable=True,
        )
        _element.replacement_key = AAZStrArg(
            options=["replacement-key"],
            help="Place holder used in HTML Content replace control with the content",
            nullable=True,
        )
        _element.time_span_duration = AAZStrArg(
            options=["time-span-duration"],
            help="Time span duration",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="Chart title",
            nullable=True,
        )

        filter_group = cls._args_replacement_maps_update.metrics_based_charts.Element.filter_group
        filter_group.filter = AAZListArg(
            options=["filter"],
            help="List of filters",
            nullable=True,
        )

        filter = cls._args_replacement_maps_update.metrics_based_charts.Element.filter_group.filter
        filter.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.metrics_based_charts.Element.filter_group.filter.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Filter name",
            nullable=True,
        )
        _element.operator = AAZStrArg(
            options=["operator"],
            help="Filter operator",
            nullable=True,
        )
        _element.values = AAZStrArg(
            options=["values"],
            help="Filter values",
            nullable=True,
        )

        troubleshooters = cls._args_replacement_maps_update.troubleshooters
        troubleshooters.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.troubleshooters.Element
        _element.solution_id = AAZStrArg(
            options=["solution-id"],
            help="Solution Id to identify single Solutions Troubleshooter",
            nullable=True,
        )
        _element.summary = AAZStrArg(
            options=["summary"],
            help="Troubleshooter summary",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="Troubleshooter title",
            nullable=True,
        )

        video_groups = cls._args_replacement_maps_update.video_groups
        video_groups.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.video_groups.Element
        _element.replacement_key = AAZStrArg(
            options=["replacement-key"],
            help="Place holder used in HTML Content replace control with the insight content",
            nullable=True,
        )
        _element.videos = AAZListArg(
            options=["videos"],
            help="List of videos will be shown to customers",
            nullable=True,
        )

        videos = cls._args_replacement_maps_update.video_groups.Element.videos
        videos.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.video_groups.Element.videos.Element
        _element.src = AAZStrArg(
            options=["src"],
            help="Link to the video",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="Title of the video",
            nullable=True,
        )

        videos = cls._args_replacement_maps_update.videos
        videos.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.videos.Element
        _element.replacement_key = AAZStrArg(
            options=["replacement-key"],
            help="Place holder used in HTML Content replace control with the insight content",
            nullable=True,
        )
        _element.src = AAZStrArg(
            options=["src"],
            help="Link to the video",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="Title of the video",
            nullable=True,
        )

        web_results = cls._args_replacement_maps_update.web_results
        web_results.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.web_results.Element
        _element.replacement_key = AAZStrArg(
            options=["replacement-key"],
            help="Place holder used in HTML Content replace control with the content",
            nullable=True,
        )
        _element.search_results = AAZListArg(
            options=["search-results"],
            help="AzureKB search results",
            nullable=True,
        )

        search_results = cls._args_replacement_maps_update.web_results.Element.search_results
        search_results.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_replacement_maps_update.web_results.Element.search_results.Element
        _element.confidence = AAZStrArg(
            options=["confidence"],
            help="Confidence of the search result.",
            nullable=True,
            enum={"High": "High", "Low": "Low", "Medium": "Medium"},
        )
        _element.content = AAZStrArg(
            options=["content"],
            help="Content of the search result.",
            nullable=True,
        )
        _element.link = AAZStrArg(
            options=["link"],
            help="Link to the document.",
            nullable=True,
        )
        _element.rank = AAZIntArg(
            options=["rank"],
            help="rank of the search result",
            nullable=True,
        )
        _element.result_type = AAZStrArg(
            options=["result-type"],
            help="Result type of the search result.",
            nullable=True,
            enum={"Community": "Community", "Documentation": "Documentation"},
        )
        _element.solution_id = AAZStrArg(
            options=["solution-id"],
            help="Unique id of the result.",
            nullable=True,
        )
        _element.source = AAZStrArg(
            options=["source"],
            help="Source of the search result.",
            nullable=True,
        )
        _element.title = AAZStrArg(
            options=["title"],
            help="Title of the search result.",
            nullable=True,
        )

        _schema.diagnostics = cls._args_replacement_maps_update.diagnostics
        _schema.metrics_based_charts = cls._args_replacement_maps_update.metrics_based_charts
        _schema.troubleshooters = cls._args_replacement_maps_update.troubleshooters
        _schema.video_groups = cls._args_replacement_maps_update.video_groups
        _schema.videos = cls._args_replacement_maps_update.videos
        _schema.web_results = cls._args_replacement_maps_update.web_results

    def _execute_operations(self):
        self.pre_operations()
        self.SolutionGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.SolutionUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SolutionGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionResourceName", self.ctx.args.solution_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_solution_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class SolutionUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PATCH"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionResourceName", self.ctx.args.solution_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_solution_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("content", AAZStrType, ".content")
                properties.set_prop("parameters", AAZDictType, ".parameters")
                properties.set_prop("provisioningState", AAZStrType, ".provisioning_state")
                _UpdateHelper._build_schema_replacement_maps_update(properties.set_prop("replacementMaps", AAZObjectType, ".replacement_maps"))
                properties.set_prop("sections", AAZListType, ".sections")
                properties.set_prop("solutionId", AAZStrType, ".solution_id")
                properties.set_prop("title", AAZStrType, ".title")
                properties.set_prop("triggerCriteria", AAZListType, ".trigger_criteria")

            parameters = _builder.get(".properties.parameters")
            if parameters is not None:
                parameters.set_elements(AAZStrType, ".")

            sections = _builder.get(".properties.sections")
            if sections is not None:
                sections.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.sections[]")
            if _elements is not None:
                _elements.set_prop("content", AAZStrType, ".content")
                _UpdateHelper._build_schema_replacement_maps_update(_elements.set_prop("replacementMaps", AAZObjectType, ".replacement_maps"))
                _elements.set_prop("title", AAZStrType, ".title")

            trigger_criteria = _builder.get(".properties.triggerCriteria")
            if trigger_criteria is not None:
                trigger_criteria.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.triggerCriteria[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("value", AAZStrType, ".value")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_replacement_maps_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("diagnostics", AAZListType, ".diagnostics")
        _builder.set_prop("metricsBasedCharts", AAZListType, ".metrics_based_charts")
        _builder.set_prop("troubleshooters", AAZListType, ".troubleshooters")
        _builder.set_prop("videoGroups", AAZListType, ".video_groups")
        _builder.set_prop("videos", AAZListType, ".videos")
        _builder.set_prop("webResults", AAZListType, ".web_results")

        diagnostics = _builder.get(".diagnostics")
        if diagnostics is not None:
            diagnostics.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".diagnostics[]")
        if _elements is not None:
            _elements.set_prop("insights", AAZListType, ".insights")
            _elements.set_prop("replacementKey", AAZStrType, ".replacement_key")
            _elements.set_prop("requiredParameters", AAZListType, ".required_parameters")
            _elements.set_prop("solutionId", AAZStrType, ".solution_id")
            _elements.set_prop("status", AAZStrType, ".status")
            _elements.set_prop("statusDetails", AAZStrType, ".status_details")

        insights = _builder.get(".diagnostics[].insights")
        if insights is not None:
            insights.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".diagnostics[].insights[]")
        if _elements is not None:
            _elements.set_prop("id", AAZStrType, ".id")
            _elements.set_prop("importanceLevel", AAZStrType, ".importance_level")
            _elements.set_prop("results", AAZStrType, ".results")
            _elements.set_prop("title", AAZStrType, ".title")

        required_parameters = _builder.get(".diagnostics[].requiredParameters")
        if required_parameters is not None:
            required_parameters.set_elements(AAZStrType, ".")

        metrics_based_charts = _builder.get(".metricsBasedCharts")
        if metrics_based_charts is not None:
            metrics_based_charts.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".metricsBasedCharts[]")
        if _elements is not None:
            _elements.set_prop("aggregationType", AAZStrType, ".aggregation_type")
            _elements.set_prop("filterGroup", AAZObjectType, ".filter_group")
            _elements.set_prop("name", AAZStrType, ".name")
            _elements.set_prop("replacementKey", AAZStrType, ".replacement_key")
            _elements.set_prop("timeSpanDuration", AAZStrType, ".time_span_duration")
            _elements.set_prop("title", AAZStrType, ".title")

        filter_group = _builder.get(".metricsBasedCharts[].filterGroup")
        if filter_group is not None:
            filter_group.set_prop("filter", AAZListType, ".filter")

        filter = _builder.get(".metricsBasedCharts[].filterGroup.filter")
        if filter is not None:
            filter.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".metricsBasedCharts[].filterGroup.filter[]")
        if _elements is not None:
            _elements.set_prop("name", AAZStrType, ".name")
            _elements.set_prop("operator", AAZStrType, ".operator")
            _elements.set_prop("values", AAZStrType, ".values")

        troubleshooters = _builder.get(".troubleshooters")
        if troubleshooters is not None:
            troubleshooters.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".troubleshooters[]")
        if _elements is not None:
            _elements.set_prop("solutionId", AAZStrType, ".solution_id")
            _elements.set_prop("summary", AAZStrType, ".summary")
            _elements.set_prop("title", AAZStrType, ".title")

        video_groups = _builder.get(".videoGroups")
        if video_groups is not None:
            video_groups.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".videoGroups[]")
        if _elements is not None:
            _elements.set_prop("replacementKey", AAZStrType, ".replacement_key")
            _elements.set_prop("videos", AAZListType, ".videos")

        videos = _builder.get(".videoGroups[].videos")
        if videos is not None:
            videos.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".videoGroups[].videos[]")
        if _elements is not None:
            _elements.set_prop("src", AAZStrType, ".src")
            _elements.set_prop("title", AAZStrType, ".title")

        videos = _builder.get(".videos")
        if videos is not None:
            videos.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".videos[]")
        if _elements is not None:
            _elements.set_prop("replacementKey", AAZStrType, ".replacement_key")
            _elements.set_prop("src", AAZStrType, ".src")
            _elements.set_prop("title", AAZStrType, ".title")

        web_results = _builder.get(".webResults")
        if web_results is not None:
            web_results.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".webResults[]")
        if _elements is not None:
            _elements.set_prop("replacementKey", AAZStrType, ".replacement_key")
            _elements.set_prop("searchResults", AAZListType, ".search_results")

        search_results = _builder.get(".webResults[].searchResults")
        if search_results is not None:
            search_results.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".webResults[].searchResults[]")
        if _elements is not None:
            _elements.set_prop("confidence", AAZStrType, ".confidence")
            _elements.set_prop("content", AAZStrType, ".content")
            _elements.set_prop("link", AAZStrType, ".link")
            _elements.set_prop("rank", AAZIntType, ".rank")
            _elements.set_prop("resultType", AAZStrType, ".result_type")
            _elements.set_prop("solutionId", AAZStrType, ".solution_id")
            _elements.set_prop("source", AAZStrType, ".source")
            _elements.set_prop("title", AAZStrType, ".title")

    _schema_replacement_maps_read = None

    @classmethod
    def _build_schema_replacement_maps_read(cls, _schema):
        if cls._schema_replacement_maps_read is not None:
            _schema.diagnostics = cls._schema_replacement_maps_read.diagnostics
            _schema.metrics_based_charts = cls._schema_replacement_maps_read.metrics_based_charts
            _schema.troubleshooters = cls._schema_replacement_maps_read.troubleshooters
            _schema.video_groups = cls._schema_replacement_maps_read.video_groups
            _schema.videos = cls._schema_replacement_maps_read.videos
            _schema.web_results = cls._schema_replacement_maps_read.web_results
            return

        cls._schema_replacement_maps_read = _schema_replacement_maps_read = AAZObjectType()

        replacement_maps_read = _schema_replacement_maps_read
        replacement_maps_read.diagnostics = AAZListType()
        replacement_maps_read.metrics_based_charts = AAZListType(
            serialized_name="metricsBasedCharts",
        )
        replacement_maps_read.troubleshooters = AAZListType()
        replacement_maps_read.video_groups = AAZListType(
            serialized_name="videoGroups",
        )
        replacement_maps_read.videos = AAZListType()
        replacement_maps_read.web_results = AAZListType(
            serialized_name="webResults",
        )

        diagnostics = _schema_replacement_maps_read.diagnostics
        diagnostics.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.diagnostics.Element
        _element.insights = AAZListType()
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.required_parameters = AAZListType(
            serialized_name="requiredParameters",
        )
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.status = AAZStrType()
        _element.status_details = AAZStrType(
            serialized_name="statusDetails",
        )

        insights = _schema_replacement_maps_read.diagnostics.Element.insights
        insights.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.diagnostics.Element.insights.Element
        _element.id = AAZStrType()
        _element.importance_level = AAZStrType(
            serialized_name="importanceLevel",
        )
        _element.results = AAZStrType()
        _element.title = AAZStrType()

        required_parameters = _schema_replacement_maps_read.diagnostics.Element.required_parameters
        required_parameters.Element = AAZStrType()

        metrics_based_charts = _schema_replacement_maps_read.metrics_based_charts
        metrics_based_charts.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.metrics_based_charts.Element
        _element.aggregation_type = AAZStrType(
            serialized_name="aggregationType",
        )
        _element.filter_group = AAZObjectType(
            serialized_name="filterGroup",
        )
        _element.name = AAZStrType()
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.time_span_duration = AAZStrType(
            serialized_name="timeSpanDuration",
        )
        _element.title = AAZStrType()

        filter_group = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group
        filter_group.filter = AAZListType()

        filter = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group.filter
        filter.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group.filter.Element
        _element.name = AAZStrType()
        _element.operator = AAZStrType()
        _element.values = AAZStrType()

        troubleshooters = _schema_replacement_maps_read.troubleshooters
        troubleshooters.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.troubleshooters.Element
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.summary = AAZStrType()
        _element.title = AAZStrType()

        video_groups = _schema_replacement_maps_read.video_groups
        video_groups.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.video_groups.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.videos = AAZListType()

        videos = _schema_replacement_maps_read.video_groups.Element.videos
        videos.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.video_groups.Element.videos.Element
        _element.src = AAZStrType()
        _element.title = AAZStrType()

        videos = _schema_replacement_maps_read.videos
        videos.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.videos.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.src = AAZStrType()
        _element.title = AAZStrType()

        web_results = _schema_replacement_maps_read.web_results
        web_results.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.web_results.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.search_results = AAZListType(
            serialized_name="searchResults",
        )

        search_results = _schema_replacement_maps_read.web_results.Element.search_results
        search_results.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.web_results.Element.search_results.Element
        _element.confidence = AAZStrType()
        _element.content = AAZStrType()
        _element.link = AAZStrType()
        _element.rank = AAZIntType()
        _element.result_type = AAZStrType(
            serialized_name="resultType",
        )
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.source = AAZStrType()
        _element.title = AAZStrType()

        _schema.diagnostics = cls._schema_replacement_maps_read.diagnostics
        _schema.metrics_based_charts = cls._schema_replacement_maps_read.metrics_based_charts
        _schema.troubleshooters = cls._schema_replacement_maps_read.troubleshooters
        _schema.video_groups = cls._schema_replacement_maps_read.video_groups
        _schema.videos = cls._schema_replacement_maps_read.videos
        _schema.web_results = cls._schema_replacement_maps_read.web_results

    _schema_solution_resource_read = None

    @classmethod
    def _build_schema_solution_resource_read(cls, _schema):
        if cls._schema_solution_resource_read is not None:
            _schema.id = cls._schema_solution_resource_read.id
            _schema.name = cls._schema_solution_resource_read.name
            _schema.properties = cls._schema_solution_resource_read.properties
            _schema.type = cls._schema_solution_resource_read.type
            return

        cls._schema_solution_resource_read = _schema_solution_resource_read = AAZObjectType()

        solution_resource_read = _schema_solution_resource_read
        solution_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        solution_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        solution_resource_read.properties = AAZObjectType()
        solution_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_solution_resource_read.properties
        properties.content = AAZStrType()
        properties.parameters = AAZDictType()
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
        )
        properties.replacement_maps = AAZObjectType(
            serialized_name="replacementMaps",
        )
        cls._build_schema_replacement_maps_read(properties.replacement_maps)
        properties.sections = AAZListType()
        properties.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        properties.title = AAZStrType()
        properties.trigger_criteria = AAZListType(
            serialized_name="triggerCriteria",
        )

        parameters = _schema_solution_resource_read.properties.parameters
        parameters.Element = AAZStrType()

        sections = _schema_solution_resource_read.properties.sections
        sections.Element = AAZObjectType()

        _element = _schema_solution_resource_read.properties.sections.Element
        _element.content = AAZStrType()
        _element.replacement_maps = AAZObjectType(
            serialized_name="replacementMaps",
        )
        cls._build_schema_replacement_maps_read(_element.replacement_maps)
        _element.title = AAZStrType()

        trigger_criteria = _schema_solution_resource_read.properties.trigger_criteria
        trigger_criteria.Element = AAZObjectType()

        _element = _schema_solution_resource_read.properties.trigger_criteria.Element
        _element.name = AAZStrType()
        _element.value = AAZStrType()

        _schema.id = cls._schema_solution_resource_read.id
        _schema.name = cls._schema_solution_resource_read.name
        _schema.properties = cls._schema_solution_resource_read.properties
        _schema.type = cls._schema_solution_resource_read.type


__all__ = ["Update"]
