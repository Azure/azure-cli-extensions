# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "self-help solution wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.help/solutions/{}", "2023-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="This is an extension resource provider and only resource level extension is supported at the moment.",
            required=True,
        )
        _args_schema.solution_name = AAZStrArg(
            options=["--solution-name"],
            help="Solution resource Name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[A-Za-z0-9-+@()_]+$",
                max_length=100,
                min_length=1,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SolutionGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class SolutionGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "solutionResourceName", self.ctx.args.solution_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.content = AAZStrType()
            properties.parameters = AAZDictType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
            )
            properties.replacement_maps = AAZObjectType(
                serialized_name="replacementMaps",
            )
            _WaitHelper._build_schema_replacement_maps_read(properties.replacement_maps)
            properties.sections = AAZListType()
            properties.solution_id = AAZStrType(
                serialized_name="solutionId",
            )
            properties.title = AAZStrType()
            properties.trigger_criteria = AAZListType(
                serialized_name="triggerCriteria",
            )

            parameters = cls._schema_on_200.properties.parameters
            parameters.Element = AAZStrType()

            sections = cls._schema_on_200.properties.sections
            sections.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.sections.Element
            _element.content = AAZStrType()
            _element.replacement_maps = AAZObjectType(
                serialized_name="replacementMaps",
            )
            _WaitHelper._build_schema_replacement_maps_read(_element.replacement_maps)
            _element.title = AAZStrType()

            trigger_criteria = cls._schema_on_200.properties.trigger_criteria
            trigger_criteria.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.trigger_criteria.Element
            _element.name = AAZStrType()
            _element.value = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_replacement_maps_read = None

    @classmethod
    def _build_schema_replacement_maps_read(cls, _schema):
        if cls._schema_replacement_maps_read is not None:
            _schema.diagnostics = cls._schema_replacement_maps_read.diagnostics
            _schema.metrics_based_charts = cls._schema_replacement_maps_read.metrics_based_charts
            _schema.troubleshooters = cls._schema_replacement_maps_read.troubleshooters
            _schema.video_groups = cls._schema_replacement_maps_read.video_groups
            _schema.videos = cls._schema_replacement_maps_read.videos
            _schema.web_results = cls._schema_replacement_maps_read.web_results
            return

        cls._schema_replacement_maps_read = _schema_replacement_maps_read = AAZObjectType()

        replacement_maps_read = _schema_replacement_maps_read
        replacement_maps_read.diagnostics = AAZListType()
        replacement_maps_read.metrics_based_charts = AAZListType(
            serialized_name="metricsBasedCharts",
        )
        replacement_maps_read.troubleshooters = AAZListType()
        replacement_maps_read.video_groups = AAZListType(
            serialized_name="videoGroups",
        )
        replacement_maps_read.videos = AAZListType()
        replacement_maps_read.web_results = AAZListType(
            serialized_name="webResults",
        )

        diagnostics = _schema_replacement_maps_read.diagnostics
        diagnostics.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.diagnostics.Element
        _element.insights = AAZListType()
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.required_parameters = AAZListType(
            serialized_name="requiredParameters",
        )
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.status = AAZStrType()
        _element.status_details = AAZStrType(
            serialized_name="statusDetails",
        )

        insights = _schema_replacement_maps_read.diagnostics.Element.insights
        insights.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.diagnostics.Element.insights.Element
        _element.id = AAZStrType()
        _element.importance_level = AAZStrType(
            serialized_name="importanceLevel",
        )
        _element.results = AAZStrType()
        _element.title = AAZStrType()

        required_parameters = _schema_replacement_maps_read.diagnostics.Element.required_parameters
        required_parameters.Element = AAZStrType()

        metrics_based_charts = _schema_replacement_maps_read.metrics_based_charts
        metrics_based_charts.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.metrics_based_charts.Element
        _element.aggregation_type = AAZStrType(
            serialized_name="aggregationType",
        )
        _element.filter_group = AAZObjectType(
            serialized_name="filterGroup",
        )
        _element.name = AAZStrType()
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.time_span_duration = AAZStrType(
            serialized_name="timeSpanDuration",
        )
        _element.title = AAZStrType()

        filter_group = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group
        filter_group.filter = AAZListType()

        filter = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group.filter
        filter.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.metrics_based_charts.Element.filter_group.filter.Element
        _element.name = AAZStrType()
        _element.operator = AAZStrType()
        _element.values = AAZStrType()

        troubleshooters = _schema_replacement_maps_read.troubleshooters
        troubleshooters.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.troubleshooters.Element
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.summary = AAZStrType()
        _element.title = AAZStrType()

        video_groups = _schema_replacement_maps_read.video_groups
        video_groups.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.video_groups.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.videos = AAZListType()

        videos = _schema_replacement_maps_read.video_groups.Element.videos
        videos.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.video_groups.Element.videos.Element
        _element.src = AAZStrType()
        _element.title = AAZStrType()

        videos = _schema_replacement_maps_read.videos
        videos.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.videos.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.src = AAZStrType()
        _element.title = AAZStrType()

        web_results = _schema_replacement_maps_read.web_results
        web_results.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.web_results.Element
        _element.replacement_key = AAZStrType(
            serialized_name="replacementKey",
        )
        _element.search_results = AAZListType(
            serialized_name="searchResults",
        )

        search_results = _schema_replacement_maps_read.web_results.Element.search_results
        search_results.Element = AAZObjectType()

        _element = _schema_replacement_maps_read.web_results.Element.search_results.Element
        _element.confidence = AAZStrType()
        _element.content = AAZStrType()
        _element.link = AAZStrType()
        _element.rank = AAZIntType()
        _element.result_type = AAZStrType(
            serialized_name="resultType",
        )
        _element.solution_id = AAZStrType(
            serialized_name="solutionId",
        )
        _element.source = AAZStrType()
        _element.title = AAZStrType()

        _schema.diagnostics = cls._schema_replacement_maps_read.diagnostics
        _schema.metrics_based_charts = cls._schema_replacement_maps_read.metrics_based_charts
        _schema.troubleshooters = cls._schema_replacement_maps_read.troubleshooters
        _schema.video_groups = cls._schema_replacement_maps_read.video_groups
        _schema.videos = cls._schema_replacement_maps_read.videos
        _schema.web_results = cls._schema_replacement_maps_read.web_results


__all__ = ["Wait"]
