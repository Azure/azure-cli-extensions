# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "self-help discovery-solution list-nlp",
    is_preview=True,
)
class List_NLP(AAZCommand):
    """List the relevant Azure diagnostics and solutions using issue summary.

    :example: List DiscoverySolution results for a resource
        az self-help discovery-solution list-nlp --resource-id resource-id --issue-summary issue-summary
        --service-id service-id additional-context additional-context" 
    """

    _aaz_info = {
        "version": "2024-03-01-preview",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.help/discoversolutions", "2024-03-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.scope = AAZStrArg(
            options=["--resource-id"],
            help="Resource Id",
            required=False,
        )
        _args_schema.issue_summary = AAZStrArg(
            options=["--issue-summary"],
            help="Issue Summary",
            required=False,
        )
        _args_schema.service_id = AAZStrArg(
            options=["--service-id"],
            help="Service Id",
            required=False,
        )
        _args_schema.additional_context = AAZStrArg(
            options=["--additional-context"],
            help="Additional Context",
            required=False,
        )

        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DiscoverSolutionList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)

        return result

    class DiscoverSolutionList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Help/discoverSolutions",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("IssueSummary", AAZStrType, ".issue_summary")
            _builder.set_prop("ResourceId", AAZStrType, ".resource_id")
            _builder.set_prop("AdditionalContext", AAZStrType, ".additional_context")
            _builder.set_prop("ServiceId", AAZStrType, ".service_id")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _schema_on_200 = cls._schema_on_200         
            _schema_on_200.value = AAZListType()
           
            value = cls._schema_on_200.value
            value.Element = AAZObjectType()
            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.type = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()

            properties = _element.properties
            properties.problemClassificationId = AAZStrType()
            properties.problemDescription = AAZStrType()
            properties.problemTitle = AAZStrType()
            properties.serviceId = AAZStrType()
            properties.solutions = AAZListType()

            solutions = properties.solutions
            solutions.Element = AAZObjectType()
            solution = solutions.Element
            solution.solutionId = AAZStrType()
            solution.solutionType = AAZStrType()
            solution.description = AAZStrType()
            solution.requiredInputs = AAZListType()

            requiredInputs = solution.requiredInputs
            requiredInputs.Element = AAZStrType()

            return cls._schema_on_200
            
__all__ = ["List_NLP"]
