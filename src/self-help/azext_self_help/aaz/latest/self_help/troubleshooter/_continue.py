# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "self-help troubleshooter continue",
    is_preview=True,
)
class Continue(AAZCommand):
    """Uses stepId and responses as the trigger to continue the troubleshooting steps for the respective troubleshooter resource name.

    :example: Continue Troubleshooter at Resource Level
        az self-help troubleshooter continue --troubleshooter-name 12345678-BBBb-cCCCC-0000-123456789012 --step-id step-id --responses [] --scope 'subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read'
    """

    _aaz_info = {
        "version": "2023-09-01-preview",
        "resources": [
            ["mgmt-plane", "/{scope}/providers/microsoft.help/troubleshooters/{}/continue", "2023-09-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.scope = AAZStrArg(
            options=["--scope"],
            help="This is an extension resource provider and only resource level extension is supported at the moment.",
            required=True,
        )
        _args_schema.troubleshooter_name = AAZStrArg(
            options=["--troubleshooter-name"],
            help="Troubleshooter resource Name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="([A-Za-z0-9]+(-[A-Za-z0-9]+)+)",
                max_length=100,
                min_length=1,
            ),
        )

        # define Arg Group "ContinueRequestBody"

        _args_schema = cls._args_schema
        _args_schema.responses = AAZListArg(
            options=["--responses"],
            arg_group="ContinueRequestBody",
        )
        _args_schema.step_id = AAZStrArg(
            options=["--step-id"],
            arg_group="ContinueRequestBody",
            help="Unique id of the result.",
        )

        responses = cls._args_schema.responses
        responses.Element = AAZObjectArg()

        _element = cls._args_schema.responses.Element
        _element.question_id = AAZStrArg(
            options=["question-id"],
            help="id of the question.",
        )
        _element.question_type = AAZStrArg(
            options=["question-type"],
            help="Text Input. Will be a single line input.",
            enum={"Dropdown": "Dropdown", "MultiLineInfoBox": "MultiLineInfoBox", "RadioButton": "RadioButton", "TextInput": "TextInput"},
        )
        _element.response = AAZStrArg(
            options=["response"],
            help="Response key for SingleInput. For Multi-line test/open ended question it is free form text",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.TroubleshootersContinue(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class TroubleshootersContinue(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [204]:
                return self.on_204(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/continue",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "scope", self.ctx.args.scope,
                    skip_quote=True,
                    required=True,
                ),
                **self.serialize_url_param(
                    "troubleshooterName", self.ctx.args.troubleshooter_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("responses", AAZListType, ".responses")
            _builder.set_prop("stepId", AAZStrType, ".step_id")

            responses = _builder.get(".responses")
            if responses is not None:
                responses.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".responses[]")
            if _elements is not None:
                _elements.set_prop("questionId", AAZStrType, ".question_id")
                _elements.set_prop("questionType", AAZStrType, ".question_type")
                _elements.set_prop("response", AAZStrType, ".response")

            return self.serialize_content(_content_value)

        def on_204(self, session):
            pass


class _ContinueHelper:
    """Helper class for Continue"""


__all__ = ["Continue"]
