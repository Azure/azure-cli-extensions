// Params
param workloadProfileName string
param workloadProfileType string
param minNodes int
param maxNodes int

{%- if data.isVnet == true %}
param vnetSubnetId string
{%- endif %}
{%- for app in data.apps %}
param {{app.containerAppImageName}} string
param {{app.targetPort}} int
{%- endfor %}

module containerAppEnv 'environment.bicep' = { 
  name: 'containerAppEnvDeployment'
  params: {
    workloadProfileName: workloadProfileName
    workloadProfileType: workloadProfileType
    minNodes: minNodes
    maxNodes: maxNodes
    {%- if data.isVnet == true %}
    vnetSubnetId: vnetSubnetId
    {%- endif %}
  }
}

{%- for item in data.certs %}
module {{ item.moduleName }} '{{ item.templateName }}' = {
  name: 'Cert{{ item.certName }}-Deployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    managedEnvironments_aca_env_name: containerAppEnv.outputs.containerAppEnvName
  }
}
{%- endfor %}

{%- for item in data.apps %}
module {{ item.moduleName }} '{{ item.templateName }}' = {
  name: '{{ item.appName }}-Deployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    containerAppEnvId: containerAppEnv.outputs.containerAppEnvId
    workloadProfileName: workloadProfileName
    {{item.containerAppImageName}}: {{item.containerAppImageName}}
    {{item.targetPort}}: {{item.targetPort}}
  }
}
{%- endfor %}

{%- if data.gateway == true %}
module managedGateway 'gateway.bicep' = {
  name: 'gatewayDeployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    managedEnvironments_aca_env_name: containerAppEnv.outputs.containerAppEnvName
  }
}
{%- endif %}

{%- if data.config == true %}
module managedConfig 'config_server.bicep' = {
  name: 'configServerDeployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    managedEnvironments_aca_env_name: containerAppEnv.outputs.containerAppEnvName
  }
}
{%- endif %}

{%- if data.eureka == true %}
module managedEureka 'eureka.bicep' = {
  name: 'eurekaDeployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    managedEnvironments_aca_env_name: containerAppEnv.outputs.containerAppEnvName
  }
}
{%- endif %}

{%- if data.sba == true %}
module managedSpringBootAdmin 'spring_boot_admin.bicep' = {
  name: 'springBootAdminDeployment'
  dependsOn: [
    containerAppEnv
  ]
  params: {
    managedEnvironments_aca_env_name: containerAppEnv.outputs.containerAppEnvName
  }
}
{%- endif %}
