# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def kusto_cluster_list(client,
                       resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def kusto_cluster_show(client,
                       resource_group_name,
                       cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def kusto_cluster_create(client,
                         resource_group_name,
                         cluster_name,
                         location,
                         sku,
                         if_match=None,
                         if_none_match=None,
                         tags=None,
                         zones=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         enable_double_encryption=None,
                         engine_type=None,
                         type_=None,
                         user_assigned_identities=None,
                         no_wait=False):
    if enable_disk_encryption is None:
        enable_disk_encryption = False
    if enable_streaming_ingest is None:
        enable_streaming_ingest = False
    if enable_purge is None:
        enable_purge = False
    if enable_double_encryption is None:
        enable_double_encryption = False
    if engine_type is None:
        engine_type = "V3"
    parameters = {}
    parameters['tags'] = tags
    parameters['location'] = location
    parameters['sku'] = sku
    parameters['zones'] = zones
    parameters['trusted_external_tenants'] = trusted_external_tenants
    parameters['optimized_autoscale'] = optimized_autoscale
    parameters['enable_disk_encryption'] = False if enable_disk_encryption is None else enable_disk_encryption
    parameters['enable_streaming_ingest'] = False if enable_streaming_ingest is None else enable_streaming_ingest
    parameters['virtual_network_configuration'] = virtual_network_configuration
    parameters['key_vault_properties'] = key_vault_properties
    parameters['enable_purge'] = False if enable_purge is None else enable_purge
    parameters['enable_double_encryption'] = False if enable_double_encryption is None else enable_double_encryption
    parameters['engine_type'] = "V3" if engine_type is None else engine_type
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       if_match=if_match,
                       if_none_match=if_none_match,
                       parameters=parameters)


def kusto_cluster_update(client,
                         resource_group_name,
                         cluster_name,
                         if_match=None,
                         tags=None,
                         location=None,
                         sku=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         enable_double_encryption=None,
                         engine_type=None,
                         type_=None,
                         user_assigned_identities=None,
                         no_wait=False):
    if enable_disk_encryption is None:
        enable_disk_encryption = False
    if enable_streaming_ingest is None:
        enable_streaming_ingest = False
    if enable_purge is None:
        enable_purge = False
    if enable_double_encryption is None:
        enable_double_encryption = False
    if engine_type is None:
        engine_type = "V3"
    parameters = {}
    parameters['tags'] = tags
    parameters['location'] = location
    parameters['sku'] = sku
    parameters['trusted_external_tenants'] = trusted_external_tenants
    parameters['optimized_autoscale'] = optimized_autoscale
    parameters['enable_disk_encryption'] = False if enable_disk_encryption is None else enable_disk_encryption
    parameters['enable_streaming_ingest'] = False if enable_streaming_ingest is None else enable_streaming_ingest
    parameters['virtual_network_configuration'] = virtual_network_configuration
    parameters['key_vault_properties'] = key_vault_properties
    parameters['enable_purge'] = False if enable_purge is None else enable_purge
    parameters['enable_double_encryption'] = False if enable_double_encryption is None else enable_double_encryption
    parameters['engine_type'] = "V3" if engine_type is None else engine_type
    parameters['identity'] = {}
    parameters['identity']['type'] = type_
    parameters['identity']['user_assigned_identities'] = user_assigned_identities
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       if_match=if_match,
                       parameters=parameters)


def kusto_cluster_delete(client,
                         resource_group_name,
                         cluster_name,
                         no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_add_language_extension(client,
                                         resource_group_name,
                                         cluster_name,
                                         value=None,
                                         no_wait=False):
    language_extensions_to_add = {}
    language_extensions_to_add['value'] = value
    return sdk_no_wait(no_wait,
                       client.begin_add_language_extensions,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       language_extensions_to_add=language_extensions_to_add)


def kusto_cluster_detach_follower_database(client,
                                           resource_group_name,
                                           cluster_name,
                                           cluster_resource_id,
                                           attached_database_configuration_name,
                                           no_wait=False):
    follower_database_to_remove = {}
    follower_database_to_remove['cluster_resource_id'] = cluster_resource_id
    follower_database_to_remove['attached_database_configuration_name'] = attached_database_configuration_name
    return sdk_no_wait(no_wait,
                       client.begin_detach_follower_databases,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       follower_database_to_remove=follower_database_to_remove)


def kusto_cluster_diagnose_virtual_network(client,
                                           resource_group_name,
                                           cluster_name,
                                           no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_diagnose_virtual_network,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_list_follower_database(client,
                                         resource_group_name,
                                         cluster_name):
    return client.list_follower_databases(resource_group_name=resource_group_name,
                                          cluster_name=cluster_name)


def kusto_cluster_list_language_extension(client,
                                          resource_group_name,
                                          cluster_name):
    return client.list_language_extensions(resource_group_name=resource_group_name,
                                           cluster_name=cluster_name)


def kusto_cluster_list_sku(client,
                           resource_group_name=None,
                           cluster_name=None):
    if resource_group_name and cluster_name is not None:
        return client.list_skus_by_resource(resource_group_name=resource_group_name,
                                            cluster_name=cluster_name)
    return client.list_skus()


def kusto_cluster_remove_language_extension(client,
                                            resource_group_name,
                                            cluster_name,
                                            value=None,
                                            no_wait=False):
    language_extensions_to_remove = {}
    language_extensions_to_remove['value'] = value
    return sdk_no_wait(no_wait,
                       client.begin_remove_language_extensions,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       language_extensions_to_remove=language_extensions_to_remove)


def kusto_cluster_start(client,
                        resource_group_name,
                        cluster_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_start,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_stop(client,
                       resource_group_name,
                       cluster_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_stop,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_principal_assignment_list(client,
                                            resource_group_name,
                                            cluster_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_principal_assignment_show(client,
                                            resource_group_name,
                                            cluster_name,
                                            principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_cluster_principal_assignment_create(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None,
                                              no_wait=False):
    parameters = {}
    parameters['principal_id'] = principal_id
    parameters['role'] = role
    parameters['tenant_id'] = tenant_id
    parameters['principal_type'] = principal_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       principal_assignment_name=principal_assignment_name,
                       parameters=parameters)


def kusto_cluster_principal_assignment_update(instance,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None,
                                              no_wait=False):
    if principal_id is not None:
        instance.principal_id = principal_id
    if role is not None:
        instance.role = role
    if tenant_id is not None:
        instance.tenant_id = tenant_id
    if principal_type is not None:
        instance.principal_type = principal_type
    return instance


def kusto_cluster_principal_assignment_delete(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       principal_assignment_name=principal_assignment_name)


def kusto_database_list(client,
                        resource_group_name,
                        cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_database_show(client,
                        resource_group_name,
                        cluster_name,
                        database_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name)


def kusto_database_create(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None,
                          no_wait=False):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is '
                       'provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_database_update(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None,
                          no_wait=False):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is '
                       'provided!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_database_delete(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name)


def kusto_database_add_principal(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 value=None):
    database_principals_to_add = {}
    database_principals_to_add['value'] = value
    return client.add_principals(resource_group_name=resource_group_name,
                                 cluster_name=cluster_name,
                                 database_name=database_name,
                                 database_principals_to_add=database_principals_to_add)


def kusto_database_list_principal(client,
                                  resource_group_name,
                                  cluster_name,
                                  database_name):
    return client.list_principals(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name,
                                  database_name=database_name)


def kusto_database_remove_principal(client,
                                    resource_group_name,
                                    cluster_name,
                                    database_name,
                                    value=None):
    database_principals_to_remove = {}
    database_principals_to_remove['value'] = value
    return client.remove_principals(resource_group_name=resource_group_name,
                                    cluster_name=cluster_name,
                                    database_name=database_name,
                                    database_principals_to_remove=database_principals_to_remove)


def kusto_database_principal_assignment_list(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name)


def kusto_database_principal_assignment_show(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name,
                                             principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_database_principal_assignment_create(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None,
                                               no_wait=False):
    parameters = {}
    parameters['principal_id'] = principal_id
    parameters['role'] = role
    parameters['tenant_id'] = tenant_id
    parameters['principal_type'] = principal_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       principal_assignment_name=principal_assignment_name,
                       parameters=parameters)


def kusto_database_principal_assignment_update(instance,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None,
                                               no_wait=False):
    if principal_id is not None:
        instance.principal_id = principal_id
    if role is not None:
        instance.role = role
    if tenant_id is not None:
        instance.tenant_id = tenant_id
    if principal_type is not None:
        instance.principal_type = principal_type
    return instance


def kusto_database_principal_assignment_delete(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       principal_assignment_name=principal_assignment_name)


def kusto_script_list(client,
                      resource_group_name,
                      cluster_name,
                      database_name):
    return client.list_by_database(resource_group_name=resource_group_name,
                                   cluster_name=cluster_name,
                                   database_name=database_name)


def kusto_script_show(client,
                      resource_group_name,
                      cluster_name,
                      database_name,
                      script_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      script_name=script_name)


def kusto_script_create(client,
                        resource_group_name,
                        cluster_name,
                        database_name,
                        script_name,
                        script_url=None,
                        script_url_sas_token=None,
                        force_update_tag=None,
                        continue_on_errors=None,
                        no_wait=False):
    if continue_on_errors is None:
        continue_on_errors = False
    parameters = {}
    parameters['script_url'] = script_url
    parameters['script_url_sas_token'] = script_url_sas_token
    parameters['force_update_tag'] = force_update_tag
    parameters['continue_on_errors'] = False if continue_on_errors is None else continue_on_errors
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       script_name=script_name,
                       parameters=parameters)


def kusto_script_update(client,
                        resource_group_name,
                        cluster_name,
                        database_name,
                        script_name,
                        script_url=None,
                        script_url_sas_token=None,
                        force_update_tag=None,
                        continue_on_errors=None,
                        no_wait=False):
    if continue_on_errors is None:
        continue_on_errors = False
    parameters = {}
    parameters['script_url'] = script_url
    parameters['script_url_sas_token'] = script_url_sas_token
    parameters['force_update_tag'] = force_update_tag
    parameters['continue_on_errors'] = False if continue_on_errors is None else continue_on_errors
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       script_name=script_name,
                       parameters=parameters)


def kusto_script_delete(client,
                        resource_group_name,
                        cluster_name,
                        database_name,
                        script_name,
                        no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       script_name=script_name)


def kusto_attached_database_configuration_list(client,
                                               resource_group_name,
                                               cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_attached_database_configuration_show(client,
                                               resource_group_name,
                                               cluster_name,
                                               attached_database_configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      attached_database_configuration_name=attached_database_configuration_name)


def kusto_attached_database_configuration_create(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None,
                                                 table_level_sharing_properties=None,
                                                 no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['database_name'] = database_name
    parameters['cluster_resource_id'] = cluster_resource_id
    parameters['default_principals_modification_kind'] = default_principals_modification_kind
    parameters['table_level_sharing_properties'] = table_level_sharing_properties
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       attached_database_configuration_name=attached_database_configuration_name,
                       parameters=parameters)


def kusto_attached_database_configuration_update(instance,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None,
                                                 table_level_sharing_properties=None,
                                                 no_wait=False):
    if location is not None:
        instance.location = location
    if database_name is not None:
        instance.database_name = database_name
    if cluster_resource_id is not None:
        instance.cluster_resource_id = cluster_resource_id
    if default_principals_modification_kind is not None:
        instance.default_principals_modification_kind = default_principals_modification_kind
    if table_level_sharing_properties is not None:
        instance.table_level_sharing_properties = table_level_sharing_properties
    return instance


def kusto_attached_database_configuration_delete(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       attached_database_configuration_name=attached_database_configuration_name)


def kusto_data_connection_list(client,
                               resource_group_name,
                               cluster_name,
                               database_name):
    return client.list_by_database(resource_group_name=resource_group_name,
                                   cluster_name=cluster_name,
                                   database_name=database_name)


def kusto_data_connection_show(client,
                               resource_group_name,
                               cluster_name,
                               database_name,
                               data_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      data_connection_name=data_connection_name)


def kusto_data_connection_event_grid_create(client,
                                            resource_group_name,
                                            cluster_name,
                                            database_name,
                                            data_connection_name,
                                            location=None,
                                            storage_account_resource_id=None,
                                            event_hub_resource_id=None,
                                            consumer_group=None,
                                            table_name=None,
                                            mapping_rule_name=None,
                                            data_format=None,
                                            ignore_first_record=None,
                                            blob_storage_event_type=None,
                                            no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventGrid'
    parameters['storage_account_resource_id'] = storage_account_resource_id
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['ignore_first_record'] = ignore_first_record
    parameters['blob_storage_event_type'] = blob_storage_event_type
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_event_hub_create(client,
                                           resource_group_name,
                                           cluster_name,
                                           database_name,
                                           data_connection_name,
                                           location=None,
                                           event_hub_resource_id=None,
                                           consumer_group=None,
                                           table_name=None,
                                           mapping_rule_name=None,
                                           data_format=None,
                                           event_system_properties=None,
                                           compression=None,
                                           managed_identity_resource_id=None,
                                           no_wait=False):
    if compression is None:
        compression = "None"
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventHub'
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['compression'] = "None" if compression is None else compression
    parameters['managed_identity_resource_id'] = managed_identity_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_iot_hub_create(client,
                                         resource_group_name,
                                         cluster_name,
                                         database_name,
                                         data_connection_name,
                                         location=None,
                                         iot_hub_resource_id=None,
                                         consumer_group=None,
                                         table_name=None,
                                         mapping_rule_name=None,
                                         data_format=None,
                                         event_system_properties=None,
                                         shared_access_policy_name=None,
                                         no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'IotHub'
    parameters['iot_hub_resource_id'] = iot_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['shared_access_policy_name'] = shared_access_policy_name
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_event_grid_update(client,
                                            resource_group_name,
                                            cluster_name,
                                            database_name,
                                            data_connection_name,
                                            location=None,
                                            storage_account_resource_id=None,
                                            event_hub_resource_id=None,
                                            consumer_group=None,
                                            table_name=None,
                                            mapping_rule_name=None,
                                            data_format=None,
                                            ignore_first_record=None,
                                            blob_storage_event_type=None,
                                            no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventGrid'
    parameters['storage_account_resource_id'] = storage_account_resource_id
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['ignore_first_record'] = ignore_first_record
    parameters['blob_storage_event_type'] = blob_storage_event_type
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_event_hub_update(client,
                                           resource_group_name,
                                           cluster_name,
                                           database_name,
                                           data_connection_name,
                                           location=None,
                                           event_hub_resource_id=None,
                                           consumer_group=None,
                                           table_name=None,
                                           mapping_rule_name=None,
                                           data_format=None,
                                           event_system_properties=None,
                                           compression=None,
                                           managed_identity_resource_id=None,
                                           no_wait=False):
    if compression is None:
        compression = "None"
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventHub'
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['compression'] = "None" if compression is None else compression
    parameters['managed_identity_resource_id'] = managed_identity_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_iot_hub_update(client,
                                         resource_group_name,
                                         cluster_name,
                                         database_name,
                                         data_connection_name,
                                         location=None,
                                         iot_hub_resource_id=None,
                                         consumer_group=None,
                                         table_name=None,
                                         mapping_rule_name=None,
                                         data_format=None,
                                         event_system_properties=None,
                                         shared_access_policy_name=None,
                                         no_wait=False):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'IotHub'
    parameters['iot_hub_resource_id'] = iot_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['shared_access_policy_name'] = shared_access_policy_name
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name,
                       parameters=parameters)


def kusto_data_connection_delete(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 data_connection_name,
                                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       data_connection_name=data_connection_name)


def kusto_data_connection_event_grid_data_connection_validation(client,
                                                                resource_group_name,
                                                                cluster_name,
                                                                database_name,
                                                                data_connection_name=None,
                                                                location=None,
                                                                storage_account_resource_id=None,
                                                                event_hub_resource_id=None,
                                                                consumer_group=None,
                                                                table_name=None,
                                                                mapping_rule_name=None,
                                                                data_format=None,
                                                                ignore_first_record=None,
                                                                blob_storage_event_type=None,
                                                                no_wait=False):
    parameters = {}
    parameters['data_connection_name'] = data_connection_name
    parameters['properties'] = {}
    parameters['properties']['location'] = location
    parameters['properties']['kind'] = 'EventGrid'
    parameters['properties']['storage_account_resource_id'] = storage_account_resource_id
    parameters['properties']['event_hub_resource_id'] = event_hub_resource_id
    parameters['properties']['consumer_group'] = consumer_group
    parameters['properties']['table_name'] = table_name
    parameters['properties']['mapping_rule_name'] = mapping_rule_name
    parameters['properties']['data_format'] = data_format
    parameters['properties']['ignore_first_record'] = ignore_first_record
    parameters['properties']['blob_storage_event_type'] = blob_storage_event_type
    return sdk_no_wait(no_wait,
                       client.begin_data_connection_validation,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_data_connection_event_hub_data_connection_validation(client,
                                                               resource_group_name,
                                                               cluster_name,
                                                               database_name,
                                                               data_connection_name=None,
                                                               location=None,
                                                               event_hub_resource_id=None,
                                                               consumer_group=None,
                                                               table_name=None,
                                                               mapping_rule_name=None,
                                                               data_format=None,
                                                               event_system_properties=None,
                                                               compression=None,
                                                               managed_identity_resource_id=None,
                                                               no_wait=False):
    if compression is None:
        compression = "None"
    parameters = {}
    parameters['data_connection_name'] = data_connection_name
    parameters['properties'] = {}
    parameters['properties']['location'] = location
    parameters['properties']['kind'] = 'EventHub'
    parameters['properties']['event_hub_resource_id'] = event_hub_resource_id
    parameters['properties']['consumer_group'] = consumer_group
    parameters['properties']['table_name'] = table_name
    parameters['properties']['mapping_rule_name'] = mapping_rule_name
    parameters['properties']['data_format'] = data_format
    parameters['properties']['event_system_properties'] = event_system_properties
    parameters['properties']['compression'] = "None" if compression is None else compression
    parameters['properties']['managed_identity_resource_id'] = managed_identity_resource_id
    return sdk_no_wait(no_wait,
                       client.begin_data_connection_validation,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_data_connection_iot_hub_data_connection_validation(client,
                                                             resource_group_name,
                                                             cluster_name,
                                                             database_name,
                                                             data_connection_name=None,
                                                             location=None,
                                                             iot_hub_resource_id=None,
                                                             consumer_group=None,
                                                             table_name=None,
                                                             mapping_rule_name=None,
                                                             data_format=None,
                                                             event_system_properties=None,
                                                             shared_access_policy_name=None,
                                                             no_wait=False):
    parameters = {}
    parameters['data_connection_name'] = data_connection_name
    parameters['properties'] = {}
    parameters['properties']['location'] = location
    parameters['properties']['kind'] = 'IotHub'
    parameters['properties']['iot_hub_resource_id'] = iot_hub_resource_id
    parameters['properties']['consumer_group'] = consumer_group
    parameters['properties']['table_name'] = table_name
    parameters['properties']['mapping_rule_name'] = mapping_rule_name
    parameters['properties']['data_format'] = data_format
    parameters['properties']['event_system_properties'] = event_system_properties
    parameters['properties']['shared_access_policy_name'] = shared_access_policy_name
    return sdk_no_wait(no_wait,
                       client.begin_data_connection_validation,
                       resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name,
                       parameters=parameters)


def kusto_operation_result_show(client,
                                location,
                                operation_id):
    return client.get(location=location,
                      operation_id=operation_id)
