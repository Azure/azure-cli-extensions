# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines

import json
from knack.util import CLIError


def kusto_cluster_list(client,
                       resource_group_name=None):
    if resource_group_name is not None:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def kusto_cluster_show(client,
                       resource_group_name,
                       cluster_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name)


def kusto_cluster_create(client,
                         resource_group_name,
                         cluster_name,
                         location,
                         sku,
                         tags=None,
                         zones=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         language_extensions_value=None,
                         identity_type=None,
                         identity_user_assigned_identities=None):
    if isinstance(zones, str):
        zones = json.loads(zones)
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         tags=tags,
                                         location=location,
                                         sku=sku,
                                         zones=zones,
                                         trusted_external_tenants=trusted_external_tenants,
                                         optimized_autoscale=optimized_autoscale,
                                         enable_disk_encryption=enable_disk_encryption,
                                         enable_streaming_ingest=enable_streaming_ingest,
                                         virtual_network_configuration=virtual_network_configuration,
                                         key_vault_properties=key_vault_properties,
                                         enable_purge=enable_purge,
                                         value=language_extensions_value,
                                         type=identity_type,
                                         user_assigned_identities=identity_user_assigned_identities)


def kusto_cluster_update(client,
                         resource_group_name,
                         cluster_name,
                         tags=None,
                         location=None,
                         sku=None,
                         trusted_external_tenants=None,
                         optimized_autoscale=None,
                         enable_disk_encryption=None,
                         enable_streaming_ingest=None,
                         virtual_network_configuration=None,
                         key_vault_properties=None,
                         enable_purge=None,
                         language_extensions_value=None,
                         identity_type=None,
                         identity_user_assigned_identities=None):
    if isinstance(identity_user_assigned_identities, str):
        identity_user_assigned_identities = json.loads(identity_user_assigned_identities)
    return client.begin_update(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               tags=tags,
                               location=location,
                               sku=sku,
                               trusted_external_tenants=trusted_external_tenants,
                               optimized_autoscale=optimized_autoscale,
                               enable_disk_encryption=enable_disk_encryption,
                               enable_streaming_ingest=enable_streaming_ingest,
                               virtual_network_configuration=virtual_network_configuration,
                               key_vault_properties=key_vault_properties,
                               enable_purge=enable_purge,
                               value=language_extensions_value,
                               type=identity_type,
                               user_assigned_identities=identity_user_assigned_identities)


def kusto_cluster_delete(client,
                         resource_group_name,
                         cluster_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name)


def kusto_cluster_add_language_extension(client,
                                         resource_group_name,
                                         cluster_name,
                                         value=None):
    return client.begin_add_language_extension(resource_group_name=resource_group_name,
                                               cluster_name=cluster_name,
                                               value=value)


def kusto_cluster_detach_follower_database(client,
                                           resource_group_name,
                                           cluster_name,
                                           cluster_resource_id,
                                           attached_database_configuration_name):
    return client.begin_detach_follower_database(resource_group_name=resource_group_name,
                                                 cluster_name=cluster_name,
                                                 cluster_resource_id=cluster_resource_id,
                                                 attached_database_configuration_name=attached_database_configuration_name)


def kusto_cluster_diagnose_virtual_network(client,
                                           resource_group_name,
                                           cluster_name):
    return client.begin_diagnose_virtual_network(resource_group_name=resource_group_name,
                                                 cluster_name=cluster_name)


def kusto_cluster_list_follower_database(client,
                                         resource_group_name,
                                         cluster_name):
    return client.list_follower_database(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name)


def kusto_cluster_list_language_extension(client,
                                          resource_group_name,
                                          cluster_name):
    return client.list_language_extension(resource_group_name=resource_group_name,
                                          cluster_name=cluster_name)


def kusto_cluster_list_sku(client,
                           resource_group_name=None,
                           cluster_name=None):
    if resource_group_name is not None and cluster_name is not None:
        return client.list_sku_by_resource(resource_group_name=resource_group_name,
                                           cluster_name=cluster_name)
    return client.list_sku()


def kusto_cluster_remove_language_extension(client,
                                            resource_group_name,
                                            cluster_name,
                                            value=None):
    return client.begin_remove_language_extension(resource_group_name=resource_group_name,
                                                  cluster_name=cluster_name,
                                                  value=value)


def kusto_cluster_start(client,
                        resource_group_name,
                        cluster_name):
    return client.begin_start(resource_group_name=resource_group_name,
                              cluster_name=cluster_name)


def kusto_cluster_stop(client,
                       resource_group_name,
                       cluster_name):
    return client.begin_stop(resource_group_name=resource_group_name,
                             cluster_name=cluster_name)


def kusto_cluster_principal_assignment_list(client,
                                            resource_group_name,
                                            cluster_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name)


def kusto_cluster_principal_assignment_show(client,
                                            resource_group_name,
                                            cluster_name,
                                            principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_cluster_principal_assignment_create(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         principal_assignment_name=principal_assignment_name,
                                         principal_id=principal_id,
                                         role=role,
                                         tenant_id=tenant_id,
                                         principal_type=principal_type)


def kusto_cluster_principal_assignment_update(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name,
                                              principal_id=None,
                                              role=None,
                                              tenant_id=None,
                                              principal_type=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         principal_assignment_name=principal_assignment_name,
                                         principal_id=principal_id,
                                         role=role,
                                         tenant_id=tenant_id,
                                         principal_type=principal_type)


def kusto_cluster_principal_assignment_delete(client,
                                              resource_group_name,
                                              cluster_name,
                                              principal_assignment_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               principal_assignment_name=principal_assignment_name)


def kusto_database_list(client,
                        resource_group_name,
                        cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_database_show(client,
                        resource_group_name,
                        cluster_name,
                        database_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name)


def kusto_database_create(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is provid'
                       'ed!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         parameters=parameters)


def kusto_database_update(client,
                          resource_group_name,
                          cluster_name,
                          database_name,
                          read_write_database=None,
                          read_only_following_database=None):
    all_parameters = []
    if read_write_database is not None:
        all_parameters.append(read_write_database)
    if read_only_following_database is not None:
        all_parameters.append(read_only_following_database)
    if len(all_parameters) > 1:
        raise CLIError('at most one of  read_write_database, read_only_following_database is needed for parameters!')
    if len(all_parameters) != 1:
        raise CLIError('parameters is required. but none of read_write_database, read_only_following_database is provid'
                       'ed!')
    parameters = all_parameters[0] if len(all_parameters) == 1 else None
    return client.begin_update(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               parameters=parameters)


def kusto_database_delete(client,
                          resource_group_name,
                          cluster_name,
                          database_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name)


def kusto_database_add_principal(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 value=None):
    return client.add_principal(resource_group_name=resource_group_name,
                                cluster_name=cluster_name,
                                database_name=database_name,
                                value=value)


def kusto_database_list_principal(client,
                                  resource_group_name,
                                  cluster_name,
                                  database_name):
    return client.list_principal(resource_group_name=resource_group_name,
                                 cluster_name=cluster_name,
                                 database_name=database_name)


def kusto_database_remove_principal(client,
                                    resource_group_name,
                                    cluster_name,
                                    database_name,
                                    value=None):
    return client.remove_principal(resource_group_name=resource_group_name,
                                   cluster_name=cluster_name,
                                   database_name=database_name,
                                   value=value)


def kusto_database_principal_assignment_list(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name):
    return client.list(resource_group_name=resource_group_name,
                       cluster_name=cluster_name,
                       database_name=database_name)


def kusto_database_principal_assignment_show(client,
                                             resource_group_name,
                                             cluster_name,
                                             database_name,
                                             principal_assignment_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      principal_assignment_name=principal_assignment_name)


def kusto_database_principal_assignment_create(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         principal_assignment_name=principal_assignment_name,
                                         principal_id=principal_id,
                                         role=role,
                                         tenant_id=tenant_id,
                                         principal_type=principal_type)


def kusto_database_principal_assignment_update(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name,
                                               principal_id=None,
                                               role=None,
                                               tenant_id=None,
                                               principal_type=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         principal_assignment_name=principal_assignment_name,
                                         principal_id=principal_id,
                                         role=role,
                                         tenant_id=tenant_id,
                                         principal_type=principal_type)


def kusto_database_principal_assignment_delete(client,
                                               resource_group_name,
                                               cluster_name,
                                               database_name,
                                               principal_assignment_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               principal_assignment_name=principal_assignment_name)


def kusto_attached_database_configuration_list(client,
                                               resource_group_name,
                                               cluster_name):
    return client.list_by_cluster(resource_group_name=resource_group_name,
                                  cluster_name=cluster_name)


def kusto_attached_database_configuration_show(client,
                                               resource_group_name,
                                               cluster_name,
                                               attached_database_configuration_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      attached_database_configuration_name=attached_database_configuration_name)


def kusto_attached_database_configuration_create(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         attached_database_configuration_name=attached_database_configuration_name,
                                         location=location,
                                         database_name=database_name,
                                         cluster_resource_id=cluster_resource_id,
                                         default_principals_modification_kind=default_principals_modification_kind)


def kusto_attached_database_configuration_update(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name,
                                                 location=None,
                                                 database_name=None,
                                                 cluster_resource_id=None,
                                                 default_principals_modification_kind=None):
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         attached_database_configuration_name=attached_database_configuration_name,
                                         location=location,
                                         database_name=database_name,
                                         cluster_resource_id=cluster_resource_id,
                                         default_principals_modification_kind=default_principals_modification_kind)


def kusto_attached_database_configuration_delete(client,
                                                 resource_group_name,
                                                 cluster_name,
                                                 attached_database_configuration_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               attached_database_configuration_name=attached_database_configuration_name)


def kusto_data_connection_list(client,
                               resource_group_name,
                               cluster_name,
                               database_name):
    return client.list_by_database(resource_group_name=resource_group_name,
                                   cluster_name=cluster_name,
                                   database_name=database_name)


def kusto_data_connection_show(client,
                               resource_group_name,
                               cluster_name,
                               database_name,
                               data_connection_name):
    return client.get(resource_group_name=resource_group_name,
                      cluster_name=cluster_name,
                      database_name=database_name,
                      data_connection_name=data_connection_name)


def kusto_data_connection_event_grid_create(client,
                                            resource_group_name,
                                            cluster_name,
                                            database_name,
                                            data_connection_name,
                                            location=None,
                                            storage_account_resource_id=None,
                                            event_hub_resource_id=None,
                                            consumer_group=None,
                                            table_name=None,
                                            mapping_rule_name=None,
                                            data_format=None):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventGrid'
    parameters['storage_account_resource_id'] = storage_account_resource_id
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         data_connection_name=data_connection_name,
                                         parameters=parameters)


def kusto_data_connection_event_hub_create(client,
                                           resource_group_name,
                                           cluster_name,
                                           database_name,
                                           data_connection_name,
                                           location=None,
                                           event_hub_resource_id=None,
                                           consumer_group=None,
                                           table_name=None,
                                           mapping_rule_name=None,
                                           data_format=None,
                                           event_system_properties=None,
                                           compression=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventHub'
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['compression'] = compression
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         data_connection_name=data_connection_name,
                                         parameters=parameters)


def kusto_data_connection_iot_hub_create(client,
                                         resource_group_name,
                                         cluster_name,
                                         database_name,
                                         data_connection_name,
                                         location=None,
                                         iot_hub_resource_id=None,
                                         consumer_group=None,
                                         table_name=None,
                                         mapping_rule_name=None,
                                         data_format=None,
                                         event_system_properties=None,
                                         shared_access_policy_name=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'IotHub'
    parameters['iot_hub_resource_id'] = iot_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['shared_access_policy_name'] = shared_access_policy_name
    return client.begin_create_or_update(resource_group_name=resource_group_name,
                                         cluster_name=cluster_name,
                                         database_name=database_name,
                                         data_connection_name=data_connection_name,
                                         parameters=parameters)


def kusto_data_connection_event_grid_update(client,
                                            resource_group_name,
                                            cluster_name,
                                            database_name,
                                            data_connection_name,
                                            location=None,
                                            storage_account_resource_id=None,
                                            event_hub_resource_id=None,
                                            consumer_group=None,
                                            table_name=None,
                                            mapping_rule_name=None,
                                            data_format=None):
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventGrid'
    parameters['storage_account_resource_id'] = storage_account_resource_id
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    return client.begin_update(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               data_connection_name=data_connection_name,
                               parameters=parameters)


def kusto_data_connection_event_hub_update(client,
                                           resource_group_name,
                                           cluster_name,
                                           database_name,
                                           data_connection_name,
                                           location=None,
                                           event_hub_resource_id=None,
                                           consumer_group=None,
                                           table_name=None,
                                           mapping_rule_name=None,
                                           data_format=None,
                                           event_system_properties=None,
                                           compression=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'EventHub'
    parameters['event_hub_resource_id'] = event_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['compression'] = compression
    return client.begin_update(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               data_connection_name=data_connection_name,
                               parameters=parameters)


def kusto_data_connection_iot_hub_update(client,
                                         resource_group_name,
                                         cluster_name,
                                         database_name,
                                         data_connection_name,
                                         location=None,
                                         iot_hub_resource_id=None,
                                         consumer_group=None,
                                         table_name=None,
                                         mapping_rule_name=None,
                                         data_format=None,
                                         event_system_properties=None,
                                         shared_access_policy_name=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    parameters = {}
    parameters['location'] = location
    parameters['kind'] = 'IotHub'
    parameters['iot_hub_resource_id'] = iot_hub_resource_id
    parameters['consumer_group'] = consumer_group
    parameters['table_name'] = table_name
    parameters['mapping_rule_name'] = mapping_rule_name
    parameters['data_format'] = data_format
    parameters['event_system_properties'] = event_system_properties
    parameters['shared_access_policy_name'] = shared_access_policy_name
    return client.begin_update(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               data_connection_name=data_connection_name,
                               parameters=parameters)


def kusto_data_connection_delete(client,
                                 resource_group_name,
                                 cluster_name,
                                 database_name,
                                 data_connection_name):
    return client.begin_delete(resource_group_name=resource_group_name,
                               cluster_name=cluster_name,
                               database_name=database_name,
                               data_connection_name=data_connection_name)


def kusto_data_connection_event_grid_data_connection_validation(client,
                                                                resource_group_name,
                                                                cluster_name,
                                                                database_name,
                                                                data_connection_name=None,
                                                                location=None,
                                                                storage_account_resource_id=None,
                                                                event_hub_resource_id=None,
                                                                consumer_group=None,
                                                                table_name=None,
                                                                mapping_rule_name=None,
                                                                data_format=None):
    properties = {}
    properties['location'] = location
    properties['kind'] = 'EventGrid'
    properties['storage_account_resource_id'] = storage_account_resource_id
    properties['event_hub_resource_id'] = event_hub_resource_id
    properties['consumer_group'] = consumer_group
    properties['table_name'] = table_name
    properties['mapping_rule_name'] = mapping_rule_name
    properties['data_format'] = data_format
    return client.data_connection_validation(resource_group_name=resource_group_name,
                                             cluster_name=cluster_name,
                                             database_name=database_name,
                                             data_connection_name=data_connection_name,
                                             properties=properties)


def kusto_data_connection_event_hub_data_connection_validation(client,
                                                               resource_group_name,
                                                               cluster_name,
                                                               database_name,
                                                               data_connection_name=None,
                                                               location=None,
                                                               event_hub_resource_id=None,
                                                               consumer_group=None,
                                                               table_name=None,
                                                               mapping_rule_name=None,
                                                               data_format=None,
                                                               event_system_properties=None,
                                                               compression=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    properties = {}
    properties['location'] = location
    properties['kind'] = 'EventHub'
    properties['event_hub_resource_id'] = event_hub_resource_id
    properties['consumer_group'] = consumer_group
    properties['table_name'] = table_name
    properties['mapping_rule_name'] = mapping_rule_name
    properties['data_format'] = data_format
    properties['event_system_properties'] = event_system_properties
    properties['compression'] = compression
    return client.data_connection_validation(resource_group_name=resource_group_name,
                                             cluster_name=cluster_name,
                                             database_name=database_name,
                                             data_connection_name=data_connection_name,
                                             properties=properties)


def kusto_data_connection_iot_hub_data_connection_validation(client,
                                                             resource_group_name,
                                                             cluster_name,
                                                             database_name,
                                                             data_connection_name=None,
                                                             location=None,
                                                             iot_hub_resource_id=None,
                                                             consumer_group=None,
                                                             table_name=None,
                                                             mapping_rule_name=None,
                                                             data_format=None,
                                                             event_system_properties=None,
                                                             shared_access_policy_name=None):
    if isinstance(event_system_properties, str):
        event_system_properties = json.loads(event_system_properties)
    properties = {}
    properties['location'] = location
    properties['kind'] = 'IotHub'
    properties['iot_hub_resource_id'] = iot_hub_resource_id
    properties['consumer_group'] = consumer_group
    properties['table_name'] = table_name
    properties['mapping_rule_name'] = mapping_rule_name
    properties['data_format'] = data_format
    properties['event_system_properties'] = event_system_properties
    properties['shared_access_policy_name'] = shared_access_policy_name
    return client.data_connection_validation(resource_group_name=resource_group_name,
                                             cluster_name=cluster_name,
                                             database_name=database_name,
                                             data_connection_name=data_connection_name,
                                             properties=properties)
