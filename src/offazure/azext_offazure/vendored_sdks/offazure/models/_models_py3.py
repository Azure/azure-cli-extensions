# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

import msrest.serialization

from ._azure_migrate_v2_enums import *


class AgentConfiguration(msrest.serialization.Model):
    """AgentConfiguration.

    :param agent_id:
    :type agent_id: str
    :param dependency_agent_id:
    :type dependency_agent_id: str
    :param dependency_agent_version:
    :type dependency_agent_version: str
    :param dependency_agent_revision:
    :type dependency_agent_revision: str
    :param reboot_status:  Possible values include: "unknown", "rebooted", "notRebooted".
    :type reboot_status: str or ~azure_migrate_v2.models.AgentConfigurationRebootStatus
    :param clock_granularity:
    :type clock_granularity: int
    """

    _attribute_map = {
        'agent_id': {'key': 'agentId', 'type': 'str'},
        'dependency_agent_id': {'key': 'dependencyAgentId', 'type': 'str'},
        'dependency_agent_version': {'key': 'dependencyAgentVersion', 'type': 'str'},
        'dependency_agent_revision': {'key': 'dependencyAgentRevision', 'type': 'str'},
        'reboot_status': {'key': 'rebootStatus', 'type': 'str'},
        'clock_granularity': {'key': 'clockGranularity', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        agent_id: Optional[str] = None,
        dependency_agent_id: Optional[str] = None,
        dependency_agent_version: Optional[str] = None,
        dependency_agent_revision: Optional[str] = None,
        reboot_status: Optional[Union[str, "AgentConfigurationRebootStatus"]] = None,
        clock_granularity: Optional[int] = None,
        **kwargs
    ):
        super(AgentConfiguration, self).__init__(**kwargs)
        self.agent_id = agent_id
        self.dependency_agent_id = dependency_agent_id
        self.dependency_agent_version = dependency_agent_version
        self.dependency_agent_revision = dependency_agent_revision
        self.reboot_status = reboot_status
        self.clock_granularity = clock_granularity


class Application(msrest.serialization.Model):
    """Application in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the Application.
    :vartype name: str
    :ivar version: Version of the Application.
    :vartype version: str
    :ivar provider: Provider of the Application.
    :vartype provider: str
    """

    _validation = {
        'name': {'readonly': True},
        'version': {'readonly': True},
        'provider': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Application, self).__init__(**kwargs)
        self.name = None
        self.version = None
        self.provider = None


class AppsAndRoles(msrest.serialization.Model):
    """AppsAndRoles in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar applications: Applications of the AppsAndRoles.
    :vartype applications: list[~azure_migrate_v2.models.Application]
    :ivar web_applications: WebApplications of the AppsAndRoles.
    :vartype web_applications: list[~azure_migrate_v2.models.WebApplication]
    :ivar features: Features of the AppsAndRoles.
    :vartype features: list[~azure_migrate_v2.models.Feature]
    :ivar sql_servers: SQLServers of the AppsAndRoles.
    :vartype sql_servers: list[~azure_migrate_v2.models.SqlServer]
    :ivar share_point_servers: SharePointServers of the AppsAndRoles.
    :vartype share_point_servers: list[~azure_migrate_v2.models.SharePointServer]
    :ivar system_centers: SystemCenters of the AppsAndRoles.
    :vartype system_centers: list[~azure_migrate_v2.models.SystemCenter]
    :ivar biz_talk_servers: BizTalkServers of the AppsAndRoles.
    :vartype biz_talk_servers: list[~azure_migrate_v2.models.BizTalkServer]
    :ivar exchange_servers: ExchangeServers of the AppsAndRoles.
    :vartype exchange_servers: list[~azure_migrate_v2.models.ExchangeServer]
    :ivar other_databases: OtherDatabaseServers of the AppsAndRoles.
    :vartype other_databases: list[~azure_migrate_v2.models.OtherDatabase]
    """

    _validation = {
        'applications': {'readonly': True},
        'web_applications': {'readonly': True},
        'features': {'readonly': True},
        'sql_servers': {'readonly': True},
        'share_point_servers': {'readonly': True},
        'system_centers': {'readonly': True},
        'biz_talk_servers': {'readonly': True},
        'exchange_servers': {'readonly': True},
        'other_databases': {'readonly': True},
    }

    _attribute_map = {
        'applications': {'key': 'applications', 'type': '[Application]'},
        'web_applications': {'key': 'webApplications', 'type': '[WebApplication]'},
        'features': {'key': 'features', 'type': '[Feature]'},
        'sql_servers': {'key': 'sqlServers', 'type': '[SqlServer]'},
        'share_point_servers': {'key': 'sharePointServers', 'type': '[SharePointServer]'},
        'system_centers': {'key': 'systemCenters', 'type': '[SystemCenter]'},
        'biz_talk_servers': {'key': 'bizTalkServers', 'type': '[BizTalkServer]'},
        'exchange_servers': {'key': 'exchangeServers', 'type': '[ExchangeServer]'},
        'other_databases': {'key': 'otherDatabases', 'type': '[OtherDatabase]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(AppsAndRoles, self).__init__(**kwargs)
        self.applications = None
        self.web_applications = None
        self.features = None
        self.sql_servers = None
        self.share_point_servers = None
        self.system_centers = None
        self.biz_talk_servers = None
        self.exchange_servers = None
        self.other_databases = None


class BizTalkServer(msrest.serialization.Model):
    """BizTalkServer in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar product_name: ProductName of the BizTalkServer.
    :vartype product_name: str
    :ivar status: Status of the BizTalkServer.
    :vartype status: str
    """

    _validation = {
        'product_name': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'product_name': {'key': 'productName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(BizTalkServer, self).__init__(**kwargs)
        self.product_name = None
        self.status = None


class ErrorDetails(msrest.serialization.Model):
    """Error contract returned when some exception occurs in Rest API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar possible_causes: Possible causes of error.
    :vartype possible_causes: str
    :ivar recommended_action: Recommended action to resolve error.
    :vartype recommended_action: str
    :ivar severity: Error severity.
    :vartype severity: str
    :ivar is_agent_reported_error: Value indicating whether the error originated from a agent or
     not.
    :vartype is_agent_reported_error: bool
    :ivar agent_error_code: Agent error code.
    :vartype agent_error_code: str
    :ivar agent_error_message: Error message from the agent.
    :vartype agent_error_message: str
    :ivar agent_error_possible_causes: Possible causes for the agent error.
    :vartype agent_error_possible_causes: str
    :ivar agent_error_recommended_action: Recommended action for the agent error.
    :vartype agent_error_recommended_action: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'possible_causes': {'readonly': True},
        'recommended_action': {'readonly': True},
        'severity': {'readonly': True},
        'is_agent_reported_error': {'readonly': True},
        'agent_error_code': {'readonly': True},
        'agent_error_message': {'readonly': True},
        'agent_error_possible_causes': {'readonly': True},
        'agent_error_recommended_action': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'possible_causes': {'key': 'possibleCauses', 'type': 'str'},
        'recommended_action': {'key': 'recommendedAction', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'is_agent_reported_error': {'key': 'isAgentReportedError', 'type': 'bool'},
        'agent_error_code': {'key': 'agentErrorCode', 'type': 'str'},
        'agent_error_message': {'key': 'agentErrorMessage', 'type': 'str'},
        'agent_error_possible_causes': {'key': 'agentErrorPossibleCauses', 'type': 'str'},
        'agent_error_recommended_action': {'key': 'agentErrorRecommendedAction', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorDetails, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.possible_causes = None
        self.recommended_action = None
        self.severity = None
        self.is_agent_reported_error = None
        self.agent_error_code = None
        self.agent_error_message = None
        self.agent_error_possible_causes = None
        self.agent_error_recommended_action = None


class ExchangeServer(msrest.serialization.Model):
    """ExchangeServer in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar product_name: ProductName of the ExchangeServer.
    :vartype product_name: str
    :ivar edition: Edition of the ExchangeServer.
    :vartype edition: str
    :ivar roles: Roles of the ExchangeServer.
    :vartype roles: str
    :ivar service_pack: ServicePack of the ExchangeServer.
    :vartype service_pack: str
    :ivar version: Version of the ExchangeServer.
    :vartype version: str
    """

    _validation = {
        'product_name': {'readonly': True},
        'edition': {'readonly': True},
        'roles': {'readonly': True},
        'service_pack': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'product_name': {'key': 'productName', 'type': 'str'},
        'edition': {'key': 'edition', 'type': 'str'},
        'roles': {'key': 'roles', 'type': 'str'},
        'service_pack': {'key': 'servicePack', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ExchangeServer, self).__init__(**kwargs)
        self.product_name = None
        self.edition = None
        self.roles = None
        self.service_pack = None
        self.version = None


class Feature(msrest.serialization.Model):
    """Feature in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the Feature.
    :vartype name: str
    :ivar feature_type: FeatureType of the Feature.
    :vartype feature_type: str
    :ivar parent: Parent of the Feature.
    :vartype parent: str
    :ivar status: Status of the Feature.
    :vartype status: str
    """

    _validation = {
        'name': {'readonly': True},
        'feature_type': {'readonly': True},
        'parent': {'readonly': True},
        'status': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'feature_type': {'key': 'featureType', 'type': 'str'},
        'parent': {'key': 'parent', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Feature, self).__init__(**kwargs)
        self.name = None
        self.feature_type = None
        self.parent = None
        self.status = None


class GuestOsDetails(msrest.serialization.Model):
    """Data related to a machine's operating system. Serialized and stored as part of Machine Rest object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param os_type: Type of the operating system.
    :type os_type: str
    :ivar os_name: Name of the operating system.
    :vartype os_name: str
    :ivar os_version: Version of the operating system.
    :vartype os_version: str
    """

    _validation = {
        'os_name': {'readonly': True},
        'os_version': {'readonly': True},
    }

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        os_type: Optional[str] = None,
        **kwargs
    ):
        super(GuestOsDetails, self).__init__(**kwargs)
        self.os_type = os_type
        self.os_name = None
        self.os_version = None


class HealthErrorDetails(msrest.serialization.Model):
    """Error contract returned when some exception occurs in Rest API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Error ID.
    :vartype id: long
    :ivar code: Error name.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    :ivar possible_causes: Possible causes of error.
    :vartype possible_causes: str
    :ivar recommended_action: Recommended action to resolve error.
    :vartype recommended_action: str
    :ivar severity: Error severity.
    :vartype severity: str
    :ivar summary_message: Error summary message.
    :vartype summary_message: str
    :ivar source: Error source.
    :vartype source: str
    :ivar message_parameters: Message parameters.
    :vartype message_parameters: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'code': {'readonly': True},
        'message': {'readonly': True},
        'possible_causes': {'readonly': True},
        'recommended_action': {'readonly': True},
        'severity': {'readonly': True},
        'summary_message': {'readonly': True},
        'source': {'readonly': True},
        'message_parameters': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'long'},
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'possible_causes': {'key': 'possibleCauses', 'type': 'str'},
        'recommended_action': {'key': 'recommendedAction', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'summary_message': {'key': 'summaryMessage', 'type': 'str'},
        'source': {'key': 'source', 'type': 'str'},
        'message_parameters': {'key': 'messageParameters', 'type': '{str}'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HealthErrorDetails, self).__init__(**kwargs)
        self.id = None
        self.code = None
        self.message = None
        self.possible_causes = None
        self.recommended_action = None
        self.severity = None
        self.summary_message = None
        self.source = None
        self.message_parameters = None


class HostingConfiguration(msrest.serialization.Model):
    """HostingConfiguration.

    :param provider:
    :type provider: str
    """

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: Optional[str] = None,
        **kwargs
    ):
        super(HostingConfiguration, self).__init__(**kwargs)
        self.provider = provider


class HyperVCluster(msrest.serialization.Model):
    """Cluster REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :param name: Name of the cluster.
    :type name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/hyperVSites/clusters.
    :vartype type: str
    :param properties: Nested properties of the cluster.
    :type properties: ~azure_migrate_v2.models.HyperVClusterProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'HyperVClusterProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["HyperVClusterProperties"] = None,
        **kwargs
    ):
        super(HyperVCluster, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.properties = properties


class HyperVClusterCollection(msrest.serialization.Model):
    """Collection of Hyper-V clusters.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of clusters.
    :vartype value: list[~azure_migrate_v2.models.HyperVCluster]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HyperVCluster]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVClusterCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class HyperVClusterProperties(msrest.serialization.Model):
    """Class for cluster properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_timestamp: Timestamp marking Hyper-V cluster creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the Hyper-V cluster.
    :vartype updated_timestamp: str
    :param fqdn: FQDN/IPAddress of the Hyper-V cluster.
    :type fqdn: str
    :ivar functional_level: Functional level of the Hyper-V cluster.
    :vartype functional_level: int
    :ivar status: Status of the Hyper-V cluster.
    :vartype status: str
    :param run_as_account_id: Run as account ID of the Hyper-V cluster.
    :type run_as_account_id: str
    :param host_fqdn_list: List of hosts (FQDN) currently being tracked by the cluster.
    :type host_fqdn_list: list[str]
    :ivar errors: Errors for Hyper-V clusters.
    :vartype errors: list[~azure_migrate_v2.models.HealthErrorDetails]
    """

    _validation = {
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'functional_level': {'readonly': True},
        'status': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'functional_level': {'key': 'functionalLevel', 'type': 'int'},
        'status': {'key': 'status', 'type': 'str'},
        'run_as_account_id': {'key': 'runAsAccountId', 'type': 'str'},
        'host_fqdn_list': {'key': 'hostFqdnList', 'type': '[str]'},
        'errors': {'key': 'errors', 'type': '[HealthErrorDetails]'},
    }

    def __init__(
        self,
        *,
        fqdn: Optional[str] = None,
        run_as_account_id: Optional[str] = None,
        host_fqdn_list: Optional[List[str]] = None,
        **kwargs
    ):
        super(HyperVClusterProperties, self).__init__(**kwargs)
        self.created_timestamp = None
        self.updated_timestamp = None
        self.fqdn = fqdn
        self.functional_level = None
        self.status = None
        self.run_as_account_id = run_as_account_id
        self.host_fqdn_list = host_fqdn_list
        self.errors = None


class HyperVDisk(msrest.serialization.Model):
    """Second level object returned as part of Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar instance_id: Id of the disk.
    :vartype instance_id: str
    :ivar vhd_id: VHD Id of the disk.
    :vartype vhd_id: str
    :ivar max_size_in_bytes: Bytes allocated for the disk.
    :vartype max_size_in_bytes: long
    :ivar name: Name of the disk.
    :vartype name: str
    :ivar disk_type: Type of the disk.
    :vartype disk_type: str
    :ivar lun: LUN of the disk.
    :vartype lun: int
    :ivar path: Path of the disk.
    :vartype path: str
    """

    _validation = {
        'instance_id': {'readonly': True},
        'vhd_id': {'readonly': True},
        'max_size_in_bytes': {'readonly': True},
        'name': {'readonly': True},
        'disk_type': {'readonly': True},
        'lun': {'readonly': True},
        'path': {'readonly': True},
    }

    _attribute_map = {
        'instance_id': {'key': 'instanceId', 'type': 'str'},
        'vhd_id': {'key': 'vhdId', 'type': 'str'},
        'max_size_in_bytes': {'key': 'maxSizeInBytes', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'disk_type': {'key': 'diskType', 'type': 'str'},
        'lun': {'key': 'lun', 'type': 'int'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVDisk, self).__init__(**kwargs)
        self.instance_id = None
        self.vhd_id = None
        self.max_size_in_bytes = None
        self.name = None
        self.disk_type = None
        self.lun = None
        self.path = None


class HyperVHost(msrest.serialization.Model):
    """Host REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :param name: Name of the host.
    :type name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/hyperVSites/hosts.
    :vartype type: str
    :param properties: Nested properties.
    :type properties: ~azure_migrate_v2.models.HyperVHostProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'HyperVHostProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["HyperVHostProperties"] = None,
        **kwargs
    ):
        super(HyperVHost, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.properties = properties


class HyperVHostCollection(msrest.serialization.Model):
    """Collection of Hyper-V hosts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of hosts.
    :vartype value: list[~azure_migrate_v2.models.HyperVHost]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HyperVHost]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVHostCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class HyperVHostProperties(msrest.serialization.Model):
    """Class for host properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_timestamp: Timestamp marking Hyper-V host creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the Hyper-V host.
    :vartype updated_timestamp: str
    :param fqdn: FQDN/IPAddress of the Hyper-V host.
    :type fqdn: str
    :param run_as_account_id: Run as account ID of the Hyper-V host.
    :type run_as_account_id: str
    :ivar version: Version of the Hyper-V host.
    :vartype version: str
    :ivar errors: Errors for Hyper-V hosts.
    :vartype errors: list[~azure_migrate_v2.models.HealthErrorDetails]
    """

    _validation = {
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'version': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'run_as_account_id': {'key': 'runAsAccountId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[HealthErrorDetails]'},
    }

    def __init__(
        self,
        *,
        fqdn: Optional[str] = None,
        run_as_account_id: Optional[str] = None,
        **kwargs
    ):
        super(HyperVHostProperties, self).__init__(**kwargs)
        self.created_timestamp = None
        self.updated_timestamp = None
        self.fqdn = fqdn
        self.run_as_account_id = run_as_account_id
        self.version = None
        self.errors = None


class HypervisorConfiguration(msrest.serialization.Model):
    """HypervisorConfiguration.

    :param hypervisor_type:  Possible values include: "unknown", "hyperv".
    :type hypervisor_type: str or ~azure_migrate_v2.models.HypervisorConfigurationHypervisorType
    :param native_host_machine_id:
    :type native_host_machine_id: str
    """

    _attribute_map = {
        'hypervisor_type': {'key': 'hypervisorType', 'type': 'str'},
        'native_host_machine_id': {'key': 'nativeHostMachineId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        hypervisor_type: Optional[Union[str, "HypervisorConfigurationHypervisorType"]] = None,
        native_host_machine_id: Optional[str] = None,
        **kwargs
    ):
        super(HypervisorConfiguration, self).__init__(**kwargs)
        self.hypervisor_type = hypervisor_type
        self.native_host_machine_id = native_host_machine_id


class HyperVJob(msrest.serialization.Model):
    """Job REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the Job.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/HyperVSites/Jobs.
    :vartype type: str
    :ivar properties: nested properties of Hyper-V job.
    :vartype properties: ~azure_migrate_v2.models.JobProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'JobProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVJob, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class HyperVJobCollection(msrest.serialization.Model):
    """Collection of Hyper-V jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of jobs.
    :vartype value: list[~azure_migrate_v2.models.HyperVJob]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HyperVJob]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVJobCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class HyperVMachine(msrest.serialization.Model):
    """Machine REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the Sites.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/HyperVSites/Machines.
    :vartype type: str
    :ivar properties: Nested properties.
    :vartype properties: ~azure_migrate_v2.models.HyperVMachineProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'HyperVMachineProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVMachine, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class HyperVMachineCollection(msrest.serialization.Model):
    """Collection of Hyper-V machines.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of machines.
    :vartype value: list[~azure_migrate_v2.models.HyperVMachine]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HyperVMachine]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVMachineCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class HyperVMachineProperties(msrest.serialization.Model):
    """Class for machine properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar host_fqdn: Host FQDN/IPAddress.
    :vartype host_fqdn: str
    :ivar host_id: Host ARM ID.
    :vartype host_id: str
    :ivar cluster_fqdn: Cluster FQDN/IPAddress.
    :vartype cluster_fqdn: str
    :ivar cluster_id: Cluster ARM ID.
    :vartype cluster_id: str
    :ivar management_server_type: Management server type of the machine. It is either Host or
     Cluster.
    :vartype management_server_type: str
    :ivar generation: Generation of the virtual machine.
    :vartype generation: int
    :ivar version: VM version.
    :vartype version: str
    :ivar high_availability: Value indicating whether the VM is highly available. Possible values
     include: "Unknown", "No", "Yes".
    :vartype high_availability: str or ~azure_migrate_v2.models.HighlyAvailable
    :ivar max_memory_mb: Max memory of the virtual machine in MB.
    :vartype max_memory_mb: int
    :ivar firmware: Firmware of the machine.
    :vartype firmware: str
    :ivar is_dynamic_memory_enabled: Value indicating whether dynamic memory is enabled for the VM.
    :vartype is_dynamic_memory_enabled: bool
    :ivar disks: Disks attached to the machine.
    :vartype disks: list[~azure_migrate_v2.models.HyperVDisk]
    :ivar apps_and_roles: Apps and Roles of the VM.
    :vartype apps_and_roles: ~azure_migrate_v2.models.AppsAndRoles
    :ivar network_adapters: Network adapters attached to the machine.
    :vartype network_adapters: list[~azure_migrate_v2.models.HyperVNetworkAdapter]
    :ivar display_name: Display name of the machine.
    :vartype display_name: str
    :ivar number_of_processor_core: Number of Processor Cores allocated for the machine.
    :vartype number_of_processor_core: int
    :ivar allocated_memory_in_mb: Allocated Memory in MB.
    :vartype allocated_memory_in_mb: float
    :ivar vm_configuration_file_location: Root location of the VM configuration file.
    :vartype vm_configuration_file_location: str
    :ivar operating_system_details: Operating System Details installed on the machine.
    :vartype operating_system_details: ~azure_migrate_v2.models.OperatingSystem
    :ivar guest_os_details: Operating System Details extracted from the guest by executing script
     inside the guest VM.
    :vartype guest_os_details: ~azure_migrate_v2.models.GuestOsDetails
    :ivar number_of_applications: Number of applications installed in the guest VM.
    :vartype number_of_applications: int
    :ivar guest_details_discovery_timestamp: The last time at which the Guest Details of machine
     was discovered.
    :vartype guest_details_discovery_timestamp: ~datetime.datetime
    :ivar is_guest_details_discovery_in_progress: Whether Refresh Fabric Layout Guest Details has
     been completed once. Portal will show discovery in progress, if this value is true.
    :vartype is_guest_details_discovery_in_progress: bool
    :ivar created_timestamp: Timestamp marking machine creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the machine.
    :vartype updated_timestamp: str
    :ivar instance_uuid: On-premise Instance UUID of the machine.
    :vartype instance_uuid: str
    :ivar power_status: Machine power status.
    :vartype power_status: str
    :ivar bios_serial_number: Machine BIOS serial number.
    :vartype bios_serial_number: str
    :ivar bios_guid: Machine BIOS GUID.
    :vartype bios_guid: str
    :ivar vm_fqdn: Machine FQDN.
    :vartype vm_fqdn: str
    :ivar is_deleted: Value indicating whether VM is deleted.
    :vartype is_deleted: bool
    :ivar errors: Errors for machine.
    :vartype errors: list[~azure_migrate_v2.models.HealthErrorDetails]
    """

    _validation = {
        'host_fqdn': {'readonly': True},
        'host_id': {'readonly': True},
        'cluster_fqdn': {'readonly': True},
        'cluster_id': {'readonly': True},
        'management_server_type': {'readonly': True},
        'generation': {'readonly': True},
        'version': {'readonly': True},
        'high_availability': {'readonly': True},
        'max_memory_mb': {'readonly': True},
        'firmware': {'readonly': True},
        'is_dynamic_memory_enabled': {'readonly': True},
        'disks': {'readonly': True},
        'apps_and_roles': {'readonly': True},
        'network_adapters': {'readonly': True},
        'display_name': {'readonly': True},
        'number_of_processor_core': {'readonly': True},
        'allocated_memory_in_mb': {'readonly': True},
        'vm_configuration_file_location': {'readonly': True},
        'operating_system_details': {'readonly': True},
        'guest_os_details': {'readonly': True},
        'number_of_applications': {'readonly': True},
        'guest_details_discovery_timestamp': {'readonly': True},
        'is_guest_details_discovery_in_progress': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'instance_uuid': {'readonly': True},
        'power_status': {'readonly': True},
        'bios_serial_number': {'readonly': True},
        'bios_guid': {'readonly': True},
        'vm_fqdn': {'readonly': True},
        'is_deleted': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'host_fqdn': {'key': 'hostFqdn', 'type': 'str'},
        'host_id': {'key': 'hostId', 'type': 'str'},
        'cluster_fqdn': {'key': 'clusterFqdn', 'type': 'str'},
        'cluster_id': {'key': 'clusterId', 'type': 'str'},
        'management_server_type': {'key': 'managementServerType', 'type': 'str'},
        'generation': {'key': 'generation', 'type': 'int'},
        'version': {'key': 'version', 'type': 'str'},
        'high_availability': {'key': 'highAvailability', 'type': 'str'},
        'max_memory_mb': {'key': 'maxMemoryMB', 'type': 'int'},
        'firmware': {'key': 'firmware', 'type': 'str'},
        'is_dynamic_memory_enabled': {'key': 'isDynamicMemoryEnabled', 'type': 'bool'},
        'disks': {'key': 'disks', 'type': '[HyperVDisk]'},
        'apps_and_roles': {'key': 'appsAndRoles', 'type': 'AppsAndRoles'},
        'network_adapters': {'key': 'networkAdapters', 'type': '[HyperVNetworkAdapter]'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'number_of_processor_core': {'key': 'numberOfProcessorCore', 'type': 'int'},
        'allocated_memory_in_mb': {'key': 'allocatedMemoryInMB', 'type': 'float'},
        'vm_configuration_file_location': {'key': 'vmConfigurationFileLocation', 'type': 'str'},
        'operating_system_details': {'key': 'operatingSystemDetails', 'type': 'OperatingSystem'},
        'guest_os_details': {'key': 'guestOSDetails', 'type': 'GuestOsDetails'},
        'number_of_applications': {'key': 'numberOfApplications', 'type': 'int'},
        'guest_details_discovery_timestamp': {'key': 'guestDetailsDiscoveryTimestamp', 'type': 'iso-8601'},
        'is_guest_details_discovery_in_progress': {'key': 'isGuestDetailsDiscoveryInProgress', 'type': 'bool'},
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
        'instance_uuid': {'key': 'instanceUuid', 'type': 'str'},
        'power_status': {'key': 'powerStatus', 'type': 'str'},
        'bios_serial_number': {'key': 'biosSerialNumber', 'type': 'str'},
        'bios_guid': {'key': 'biosGuid', 'type': 'str'},
        'vm_fqdn': {'key': 'vmFqdn', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'errors': {'key': 'errors', 'type': '[HealthErrorDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVMachineProperties, self).__init__(**kwargs)
        self.host_fqdn = None
        self.host_id = None
        self.cluster_fqdn = None
        self.cluster_id = None
        self.management_server_type = None
        self.generation = None
        self.version = None
        self.high_availability = None
        self.max_memory_mb = None
        self.firmware = None
        self.is_dynamic_memory_enabled = None
        self.disks = None
        self.apps_and_roles = None
        self.network_adapters = None
        self.display_name = None
        self.number_of_processor_core = None
        self.allocated_memory_in_mb = None
        self.vm_configuration_file_location = None
        self.operating_system_details = None
        self.guest_os_details = None
        self.number_of_applications = None
        self.guest_details_discovery_timestamp = None
        self.is_guest_details_discovery_in_progress = None
        self.created_timestamp = None
        self.updated_timestamp = None
        self.instance_uuid = None
        self.power_status = None
        self.bios_serial_number = None
        self.bios_guid = None
        self.vm_fqdn = None
        self.is_deleted = None
        self.errors = None


class HyperVNetworkAdapter(msrest.serialization.Model):
    """Second level object represented in responses as part of Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar network_id: Network Id.
    :vartype network_id: str
    :ivar subnet_name: Name of the VM subnet within the virtual network the NIC is attached to.
    :vartype subnet_name: str
    :ivar static_ip_address: Static IP address.
    :vartype static_ip_address: str
    :ivar nic_type: Mac address of the NIC.
    :vartype nic_type: str
    :ivar nic_id: NIC Id.
    :vartype nic_id: str
    :ivar mac_address: Mac address of the NIC.
    :vartype mac_address: str
    :ivar ip_address_list: IP addresses for the machine.
    :vartype ip_address_list: list[str]
    :ivar network_name: Network Name.
    :vartype network_name: str
    :ivar ip_address_type: Type of the IP address.
    :vartype ip_address_type: str
    """

    _validation = {
        'network_id': {'readonly': True},
        'subnet_name': {'readonly': True},
        'static_ip_address': {'readonly': True},
        'nic_type': {'readonly': True},
        'nic_id': {'readonly': True},
        'mac_address': {'readonly': True},
        'ip_address_list': {'readonly': True},
        'network_name': {'readonly': True},
        'ip_address_type': {'readonly': True},
    }

    _attribute_map = {
        'network_id': {'key': 'networkId', 'type': 'str'},
        'subnet_name': {'key': 'subnetName', 'type': 'str'},
        'static_ip_address': {'key': 'staticIpAddress', 'type': 'str'},
        'nic_type': {'key': 'nicType', 'type': 'str'},
        'nic_id': {'key': 'nicId', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'ip_address_list': {'key': 'ipAddressList', 'type': '[str]'},
        'network_name': {'key': 'networkName', 'type': 'str'},
        'ip_address_type': {'key': 'ipAddressType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVNetworkAdapter, self).__init__(**kwargs)
        self.network_id = None
        self.subnet_name = None
        self.static_ip_address = None
        self.nic_type = None
        self.nic_id = None
        self.mac_address = None
        self.ip_address_list = None
        self.network_name = None
        self.ip_address_type = None


class HyperVRunAsAccount(msrest.serialization.Model):
    """Run as account REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the Sites.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/HyperVSites/RunAsAccounts.
    :vartype type: str
    :ivar properties: Nested properties of run as account.
    :vartype properties: ~azure_migrate_v2.models.RunAsAccountProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'RunAsAccountProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVRunAsAccount, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class HyperVRunAsAccountCollection(msrest.serialization.Model):
    """Collection of Hyper-V run as accounts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of run as accounts.
    :vartype value: list[~azure_migrate_v2.models.HyperVRunAsAccount]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[HyperVRunAsAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(HyperVRunAsAccountCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class HyperVSite(msrest.serialization.Model):
    """Site REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :param name: Name of the Hyper-V site.
    :type name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/HyperVSites.
    :vartype type: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param e_tag: eTag for concurrency control.
    :type e_tag: str
    :param location: Azure location in which Sites is created.
    :type location: str
    :param properties: Nested properties of Hyper-V site.
    :type properties: ~azure_migrate_v2.models.SiteProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SiteProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        e_tag: Optional[str] = None,
        location: Optional[str] = None,
        properties: Optional["SiteProperties"] = None,
        **kwargs
    ):
        super(HyperVSite, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.tags = tags
        self.e_tag = e_tag
        self.location = location
        self.properties = properties


class HyperVSiteUsage(msrest.serialization.Model):
    """Hyper-V site usage.

    :param machine_count: Number of machines discovered in the site.
    :type machine_count: int
    :param run_as_account_count: Number of run as accounts in the site.
    :type run_as_account_count: int
    :param host_count: Number of hosts part of the site.
    :type host_count: int
    :param cluster_count: Number of clusters part of the site.
    :type cluster_count: int
    """

    _attribute_map = {
        'machine_count': {'key': 'machineCount', 'type': 'int'},
        'run_as_account_count': {'key': 'runAsAccountCount', 'type': 'int'},
        'host_count': {'key': 'hostCount', 'type': 'int'},
        'cluster_count': {'key': 'clusterCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        machine_count: Optional[int] = None,
        run_as_account_count: Optional[int] = None,
        host_count: Optional[int] = None,
        cluster_count: Optional[int] = None,
        **kwargs
    ):
        super(HyperVSiteUsage, self).__init__(**kwargs)
        self.machine_count = machine_count
        self.run_as_account_count = run_as_account_count
        self.host_count = host_count
        self.cluster_count = cluster_count


class Ipv4NetworkInterface(msrest.serialization.Model):
    """Ipv4NetworkInterface.

    :param ip_address:
    :type ip_address: str
    :param subnet_mask:
    :type subnet_mask: str
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'subnet_mask': {'key': 'subnetMask', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        subnet_mask: Optional[str] = None,
        **kwargs
    ):
        super(Ipv4NetworkInterface, self).__init__(**kwargs)
        self.ip_address = ip_address
        self.subnet_mask = subnet_mask


class Ipv6NetworkInterface(msrest.serialization.Model):
    """Ipv6NetworkInterface.

    :param ip_address:
    :type ip_address: str
    """

    _attribute_map = {
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        ip_address: Optional[str] = None,
        **kwargs
    ):
        super(Ipv6NetworkInterface, self).__init__(**kwargs)
        self.ip_address = ip_address


class JobProperties(msrest.serialization.Model):
    """Class for machine properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: Operation status.
    :vartype status: str
    :ivar start_time: Operation start time.
    :vartype start_time: str
    :ivar end_time: Operation end time.
    :vartype end_time: str
    :ivar display_name: Display name of the Job.
    :vartype display_name: str
    :ivar client_request_id: Client request Id used in the operation execution context.
    :vartype client_request_id: str
    :ivar activity_id: Activity Id used in the operation execution context.
    :vartype activity_id: str
    :ivar errors: Errors.
    :vartype errors: list[~azure_migrate_v2.models.ErrorDetails]
    """

    _validation = {
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'display_name': {'readonly': True},
        'client_request_id': {'readonly': True},
        'activity_id': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'client_request_id': {'key': 'clientRequestId', 'type': 'str'},
        'activity_id': {'key': 'activityId', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[ErrorDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(JobProperties, self).__init__(**kwargs)
        self.status = None
        self.start_time = None
        self.end_time = None
        self.display_name = None
        self.client_request_id = None
        self.activity_id = None
        self.errors = None


class Machine(msrest.serialization.Model):
    """Machine.

    :param properties_timestamp:
    :type properties_timestamp: ~datetime.datetime
    :param properties_monitoring_state:  Possible values include: "monitored", "discovered".
    :type properties_monitoring_state: str or
     ~azure_migrate_v2.models.MachinePropertiesMonitoringState
    :param properties_virtualization_state:  Possible values include: "unknown", "physical",
     "virtual", "hypervisor".
    :type properties_virtualization_state: str or
     ~azure_migrate_v2.models.MachinePropertiesVirtualizationState
    :param properties_display_name:
    :type properties_display_name: str
    :param properties_computer_name:
    :type properties_computer_name: str
    :param properties_fully_qualified_domain_name:
    :type properties_fully_qualified_domain_name: str
    :param properties_boot_time:
    :type properties_boot_time: ~datetime.datetime
    :param properties_timezone:
    :type properties_timezone: ~azure_migrate_v2.models.Timezone
    :param properties_agent:
    :type properties_agent: ~azure_migrate_v2.models.AgentConfiguration
    :param properties_resources:
    :type properties_resources: ~azure_migrate_v2.models.MachineResourcesConfiguration
    :param properties_networking:
    :type properties_networking: ~azure_migrate_v2.models.NetworkConfiguration
    :param properties_operating_system:
    :type properties_operating_system: ~azure_migrate_v2.models.OperatingSystemConfiguration
    :param properties_virtual_machine:
    :type properties_virtual_machine: ~azure_migrate_v2.models.VirtualMachineConfiguration
    :param properties_hypervisor:
    :type properties_hypervisor: ~azure_migrate_v2.models.HypervisorConfiguration
    :param properties_hosting:
    :type properties_hosting: ~azure_migrate_v2.models.HostingConfiguration
    :param etag:
    :type etag: str
    :param id:
    :type id: str
    :param type:
    :type type: str
    :param name:
    :type name: str
    """

    _attribute_map = {
        'properties_timestamp': {'key': 'properties\\.timestamp', 'type': 'iso-8601'},
        'properties_monitoring_state': {'key': 'properties\\.monitoringState', 'type': 'str'},
        'properties_virtualization_state': {'key': 'properties\\.virtualizationState', 'type': 'str'},
        'properties_display_name': {'key': 'properties\\.displayName', 'type': 'str'},
        'properties_computer_name': {'key': 'properties\\.computerName', 'type': 'str'},
        'properties_fully_qualified_domain_name': {'key': 'properties\\.fullyQualifiedDomainName', 'type': 'str'},
        'properties_boot_time': {'key': 'properties\\.bootTime', 'type': 'iso-8601'},
        'properties_timezone': {'key': 'properties\\.timezone', 'type': 'Timezone'},
        'properties_agent': {'key': 'properties\\.agent', 'type': 'AgentConfiguration'},
        'properties_resources': {'key': 'properties\\.resources', 'type': 'MachineResourcesConfiguration'},
        'properties_networking': {'key': 'properties\\.networking', 'type': 'NetworkConfiguration'},
        'properties_operating_system': {'key': 'properties\\.operatingSystem', 'type': 'OperatingSystemConfiguration'},
        'properties_virtual_machine': {'key': 'properties\\.virtualMachine', 'type': 'VirtualMachineConfiguration'},
        'properties_hypervisor': {'key': 'properties\\.hypervisor', 'type': 'HypervisorConfiguration'},
        'properties_hosting': {'key': 'properties\\.hosting', 'type': 'HostingConfiguration'},
        'etag': {'key': 'etag', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        properties_timestamp: Optional[datetime.datetime] = None,
        properties_monitoring_state: Optional[Union[str, "MachinePropertiesMonitoringState"]] = None,
        properties_virtualization_state: Optional[Union[str, "MachinePropertiesVirtualizationState"]] = None,
        properties_display_name: Optional[str] = None,
        properties_computer_name: Optional[str] = None,
        properties_fully_qualified_domain_name: Optional[str] = None,
        properties_boot_time: Optional[datetime.datetime] = None,
        properties_timezone: Optional["Timezone"] = None,
        properties_agent: Optional["AgentConfiguration"] = None,
        properties_resources: Optional["MachineResourcesConfiguration"] = None,
        properties_networking: Optional["NetworkConfiguration"] = None,
        properties_operating_system: Optional["OperatingSystemConfiguration"] = None,
        properties_virtual_machine: Optional["VirtualMachineConfiguration"] = None,
        properties_hypervisor: Optional["HypervisorConfiguration"] = None,
        properties_hosting: Optional["HostingConfiguration"] = None,
        etag: Optional[str] = None,
        id: Optional[str] = None,
        type: Optional[str] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(Machine, self).__init__(**kwargs)
        self.properties_timestamp = properties_timestamp
        self.properties_monitoring_state = properties_monitoring_state
        self.properties_virtualization_state = properties_virtualization_state
        self.properties_display_name = properties_display_name
        self.properties_computer_name = properties_computer_name
        self.properties_fully_qualified_domain_name = properties_fully_qualified_domain_name
        self.properties_boot_time = properties_boot_time
        self.properties_timezone = properties_timezone
        self.properties_agent = properties_agent
        self.properties_resources = properties_resources
        self.properties_networking = properties_networking
        self.properties_operating_system = properties_operating_system
        self.properties_virtual_machine = properties_virtual_machine
        self.properties_hypervisor = properties_hypervisor
        self.properties_hosting = properties_hosting
        self.etag = etag
        self.id = id
        self.type = type
        self.name = name


class MachineResourcesConfiguration(msrest.serialization.Model):
    """MachineResourcesConfiguration.

    :param physical_memory:
    :type physical_memory: int
    :param cpus:
    :type cpus: int
    :param cpu_speed:
    :type cpu_speed: int
    :param cpu_speed_accuracy:  Possible values include: "actual", "estimated".
    :type cpu_speed_accuracy: str or
     ~azure_migrate_v2.models.MachineResourcesConfigurationCpuSpeedAccuracy
    """

    _attribute_map = {
        'physical_memory': {'key': 'physicalMemory', 'type': 'int'},
        'cpus': {'key': 'cpus', 'type': 'int'},
        'cpu_speed': {'key': 'cpuSpeed', 'type': 'int'},
        'cpu_speed_accuracy': {'key': 'cpuSpeedAccuracy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        physical_memory: Optional[int] = None,
        cpus: Optional[int] = None,
        cpu_speed: Optional[int] = None,
        cpu_speed_accuracy: Optional[Union[str, "MachineResourcesConfigurationCpuSpeedAccuracy"]] = None,
        **kwargs
    ):
        super(MachineResourcesConfiguration, self).__init__(**kwargs)
        self.physical_memory = physical_memory
        self.cpus = cpus
        self.cpu_speed = cpu_speed
        self.cpu_speed_accuracy = cpu_speed_accuracy


class NetworkConfiguration(msrest.serialization.Model):
    """NetworkConfiguration.

    :param ipv4_interfaces:
    :type ipv4_interfaces: list[~azure_migrate_v2.models.Ipv4NetworkInterface]
    :param ipv6_interfaces:
    :type ipv6_interfaces: list[~azure_migrate_v2.models.Ipv6NetworkInterface]
    :param default_ipv4_gateways:
    :type default_ipv4_gateways: list[str]
    :param mac_addresses:
    :type mac_addresses: list[str]
    :param dns_names:
    :type dns_names: list[str]
    :param dns_questions:
    :type dns_questions: list[str]
    :param dns_canonical_names:
    :type dns_canonical_names: list[str]
    """

    _attribute_map = {
        'ipv4_interfaces': {'key': 'ipv4Interfaces', 'type': '[Ipv4NetworkInterface]'},
        'ipv6_interfaces': {'key': 'ipv6Interfaces', 'type': '[Ipv6NetworkInterface]'},
        'default_ipv4_gateways': {'key': 'defaultIpv4Gateways', 'type': '[str]'},
        'mac_addresses': {'key': 'macAddresses', 'type': '[str]'},
        'dns_names': {'key': 'dnsNames', 'type': '[str]'},
        'dns_questions': {'key': 'dnsQuestions', 'type': '[str]'},
        'dns_canonical_names': {'key': 'dnsCanonicalNames', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        ipv4_interfaces: Optional[List["Ipv4NetworkInterface"]] = None,
        ipv6_interfaces: Optional[List["Ipv6NetworkInterface"]] = None,
        default_ipv4_gateways: Optional[List[str]] = None,
        mac_addresses: Optional[List[str]] = None,
        dns_names: Optional[List[str]] = None,
        dns_questions: Optional[List[str]] = None,
        dns_canonical_names: Optional[List[str]] = None,
        **kwargs
    ):
        super(NetworkConfiguration, self).__init__(**kwargs)
        self.ipv4_interfaces = ipv4_interfaces
        self.ipv6_interfaces = ipv6_interfaces
        self.default_ipv4_gateways = default_ipv4_gateways
        self.mac_addresses = mac_addresses
        self.dns_names = dns_names
        self.dns_questions = dns_questions
        self.dns_canonical_names = dns_canonical_names


class OperatingSystem(msrest.serialization.Model):
    """Second level object returned as part of Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar os_type: Type of the operating system.
    :vartype os_type: str
    :ivar os_name: Name of the operating system.
    :vartype os_name: str
    :ivar os_version: Version of the operating system.
    :vartype os_version: str
    """

    _validation = {
        'os_type': {'readonly': True},
        'os_name': {'readonly': True},
        'os_version': {'readonly': True},
    }

    _attribute_map = {
        'os_type': {'key': 'osType', 'type': 'str'},
        'os_name': {'key': 'osName', 'type': 'str'},
        'os_version': {'key': 'osVersion', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperatingSystem, self).__init__(**kwargs)
        self.os_type = None
        self.os_name = None
        self.os_version = None


class OperatingSystemConfiguration(msrest.serialization.Model):
    """OperatingSystemConfiguration.

    :param family:  Possible values include: "unknown", "windows", "linux", "solaris", "aix".
    :type family: str or ~azure_migrate_v2.models.OperatingSystemConfigurationFamily
    :param full_name:
    :type full_name: str
    :param bitness:  Possible values include: "32bit", "64bit".
    :type bitness: str or ~azure_migrate_v2.models.OperatingSystemConfigurationBitness
    """

    _attribute_map = {
        'family': {'key': 'family', 'type': 'str'},
        'full_name': {'key': 'fullName', 'type': 'str'},
        'bitness': {'key': 'bitness', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        family: Optional[Union[str, "OperatingSystemConfigurationFamily"]] = None,
        full_name: Optional[str] = None,
        bitness: Optional[Union[str, "OperatingSystemConfigurationBitness"]] = None,
        **kwargs
    ):
        super(OperatingSystemConfiguration, self).__init__(**kwargs)
        self.family = family
        self.full_name = full_name
        self.bitness = bitness


class Operation(msrest.serialization.Model):
    """A REST API operation supported by the provider.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the operation.
    :vartype name: str
    :ivar display: Displayable properties of the operation.
    :vartype display: ~azure_migrate_v2.models.OperationDisplay
    :ivar origin: Origin of the operation.
    :vartype origin: str
    """

    _validation = {
        'name': {'readonly': True},
        'display': {'readonly': True},
        'origin': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'origin': {'key': 'origin', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.name = None
        self.display = None
        self.origin = None


class OperationDisplay(msrest.serialization.Model):
    """Displayable properties of the operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: Provider of the operation.
    :vartype provider: str
    :ivar resource: Resource operated on by the operation.
    :vartype resource: str
    :ivar operation: Operation Type.
    :vartype operation: str
    :ivar description: Description of the operation.
    :vartype description: str
    """

    _validation = {
        'provider': {'readonly': True},
        'resource': {'readonly': True},
        'operation': {'readonly': True},
        'description': {'readonly': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.provider = None
        self.resource = None
        self.operation = None
        self.description = None


class OperationResultList(msrest.serialization.Model):
    """List of API operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations.
    :vartype value: list[~azure_migrate_v2.models.Operation]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[Operation]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationResultList, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class OperationStatus(msrest.serialization.Model):
    """Operation status REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Operation name.
    :vartype name: str
    :ivar status: Status of the operation. ARM expects the terminal status to be one of Succeeded/
     Failed/ Canceled. All other values imply that the operation is still running.
    :vartype status: str
    :ivar start_time: Start time.
    :vartype start_time: str
    :ivar end_time: End time.
    :vartype end_time: str
    :ivar error: Error stating all error details for the operation.
    :vartype error: ~azure_migrate_v2.models.OperationStatusError
    :ivar properties: Custom data.
    :vartype properties: ~azure_migrate_v2.models.OperationStatusProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'status': {'readonly': True},
        'start_time': {'readonly': True},
        'end_time': {'readonly': True},
        'error': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'start_time': {'key': 'startTime', 'type': 'str'},
        'end_time': {'key': 'endTime', 'type': 'str'},
        'error': {'key': 'error', 'type': 'OperationStatusError'},
        'properties': {'key': 'properties', 'type': 'OperationStatusProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationStatus, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.status = None
        self.start_time = None
        self.end_time = None
        self.error = None
        self.properties = None


class OperationStatusError(msrest.serialization.Model):
    """Class for operation status errors.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Error code.
    :vartype code: str
    :ivar message: Error message.
    :vartype message: str
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OperationStatusError, self).__init__(**kwargs)
        self.code = None
        self.message = None


class OperationStatusProperties(msrest.serialization.Model):
    """Class for operation result properties.

    :param result: Result or output of the workflow.
    :type result: str
    """

    _attribute_map = {
        'result': {'key': 'result', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        result: Optional[str] = None,
        **kwargs
    ):
        super(OperationStatusProperties, self).__init__(**kwargs)
        self.result = result


class OtherDatabase(msrest.serialization.Model):
    """OtherDatabase in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar database_type: DatabaseType of the OtherDatabase.
    :vartype database_type: str
    :ivar instance: Instance of the OtherDatabase.
    :vartype instance: str
    :ivar version: Version of the OtherDatabase.
    :vartype version: str
    """

    _validation = {
        'database_type': {'readonly': True},
        'instance': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'database_type': {'key': 'databaseType', 'type': 'str'},
        'instance': {'key': 'instance', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(OtherDatabase, self).__init__(**kwargs)
        self.database_type = None
        self.instance = None
        self.version = None


class RunAsAccountProperties(msrest.serialization.Model):
    """Class for run as account properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar display_name: Display name of the run as account.
    :vartype display_name: str
    :ivar credential_type: Credential type of the run as account. Possible values include:
     "VMwareFabric", "HyperVFabric", "LinuxGuest", "WindowsGuest", "LinuxServer", "WindowsServer".
    :vartype credential_type: str or ~azure_migrate_v2.models.CredentialType
    :ivar created_timestamp: Timestamp marking run as account creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the run as account.
    :vartype updated_timestamp: str
    """

    _validation = {
        'display_name': {'readonly': True},
        'credential_type': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
    }

    _attribute_map = {
        'display_name': {'key': 'displayName', 'type': 'str'},
        'credential_type': {'key': 'credentialType', 'type': 'str'},
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(RunAsAccountProperties, self).__init__(**kwargs)
        self.display_name = None
        self.credential_type = None
        self.created_timestamp = None
        self.updated_timestamp = None


class SharePointServer(msrest.serialization.Model):
    """SharePointServer in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar product_name: ProductName of the SharePointServer.
    :vartype product_name: str
    :ivar is_enterprise: Value indicating whether the SharePointServer is Enterprise.
    :vartype is_enterprise: bool
    :ivar status: Status of the SharePointServer.
    :vartype status: str
    :ivar version: Version of the SharePointServer.
    :vartype version: str
    """

    _validation = {
        'product_name': {'readonly': True},
        'is_enterprise': {'readonly': True},
        'status': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'product_name': {'key': 'productName', 'type': 'str'},
        'is_enterprise': {'key': 'isEnterprise', 'type': 'bool'},
        'status': {'key': 'status', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SharePointServer, self).__init__(**kwargs)
        self.product_name = None
        self.is_enterprise = None
        self.status = None
        self.version = None


class SiteAgentProperties(msrest.serialization.Model):
    """Class for site agent properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: ID of the agent.
    :vartype id: str
    :ivar version: Version of the agent.
    :vartype version: str
    :ivar last_heart_beat_utc: Last heartbeat time of the agent in UTC.
    :vartype last_heart_beat_utc: ~datetime.datetime
    :param key_vault_uri: Key vault URI.
    :type key_vault_uri: str
    :param key_vault_id: Key vault ARM Id.
    :type key_vault_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'version': {'readonly': True},
        'last_heart_beat_utc': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'last_heart_beat_utc': {'key': 'lastHeartBeatUtc', 'type': 'iso-8601'},
        'key_vault_uri': {'key': 'keyVaultUri', 'type': 'str'},
        'key_vault_id': {'key': 'keyVaultId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        key_vault_uri: Optional[str] = None,
        key_vault_id: Optional[str] = None,
        **kwargs
    ):
        super(SiteAgentProperties, self).__init__(**kwargs)
        self.id = None
        self.version = None
        self.last_heart_beat_utc = None
        self.key_vault_uri = key_vault_uri
        self.key_vault_id = key_vault_id


class SiteHealthSummary(msrest.serialization.Model):
    """Site health summary model.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar appliance_name: Appliance name.
    :vartype appliance_name: str
    :ivar error_message: Error message.
    :vartype error_message: str
    :ivar summary_message: Summary message.
    :vartype summary_message: str
    :ivar error_id: Error Id.
    :vartype error_id: long
    :ivar error_code: Error code.
    :vartype error_code: str
    :param affected_objects_count: Count of affected objects.
    :type affected_objects_count: long
    :param hit_count: Hit count of the error.
    :type hit_count: long
    :ivar severity: Severity of error.
    :vartype severity: str
    :ivar remediation_guidance: Remediation guidance.
    :vartype remediation_guidance: str
    :ivar affected_resource_type: Affected resource type.
    :vartype affected_resource_type: str
    :param affected_resources: Affected resources.
    :type affected_resources: list[str]
    """

    _validation = {
        'appliance_name': {'readonly': True},
        'error_message': {'readonly': True},
        'summary_message': {'readonly': True},
        'error_id': {'readonly': True},
        'error_code': {'readonly': True},
        'severity': {'readonly': True},
        'remediation_guidance': {'readonly': True},
        'affected_resource_type': {'readonly': True},
    }

    _attribute_map = {
        'appliance_name': {'key': 'applianceName', 'type': 'str'},
        'error_message': {'key': 'errorMessage', 'type': 'str'},
        'summary_message': {'key': 'summaryMessage', 'type': 'str'},
        'error_id': {'key': 'errorId', 'type': 'long'},
        'error_code': {'key': 'errorCode', 'type': 'str'},
        'affected_objects_count': {'key': 'affectedObjectsCount', 'type': 'long'},
        'hit_count': {'key': 'hitCount', 'type': 'long'},
        'severity': {'key': 'severity', 'type': 'str'},
        'remediation_guidance': {'key': 'remediationGuidance', 'type': 'str'},
        'affected_resource_type': {'key': 'affectedResourceType', 'type': 'str'},
        'affected_resources': {'key': 'affectedResources', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        affected_objects_count: Optional[int] = None,
        hit_count: Optional[int] = None,
        affected_resources: Optional[List[str]] = None,
        **kwargs
    ):
        super(SiteHealthSummary, self).__init__(**kwargs)
        self.appliance_name = None
        self.error_message = None
        self.summary_message = None
        self.error_id = None
        self.error_code = None
        self.affected_objects_count = affected_objects_count
        self.hit_count = hit_count
        self.severity = None
        self.remediation_guidance = None
        self.affected_resource_type = None
        self.affected_resources = affected_resources


class SiteHealthSummaryCollection(msrest.serialization.Model):
    """Collection of SiteHealthSummary.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of SiteHealthSummary.
    :vartype value: list[~azure_migrate_v2.models.SiteHealthSummary]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SiteHealthSummary]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SiteHealthSummaryCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class SiteProperties(msrest.serialization.Model):
    """Class for site properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param service_principal_identity_details: Service principal identity details used by agent for
     communication to the service.
    :type service_principal_identity_details: ~azure_migrate_v2.models.SiteSpnProperties
    :param agent_details: On-premises agent details.
    :type agent_details: ~azure_migrate_v2.models.SiteAgentProperties
    :ivar service_endpoint: Service endpoint.
    :vartype service_endpoint: str
    :param discovery_solution_id: ARM ID of migration hub solution for SDS.
    :type discovery_solution_id: str
    :param appliance_name: Appliance Name.
    :type appliance_name: str
    """

    _validation = {
        'service_endpoint': {'readonly': True},
    }

    _attribute_map = {
        'service_principal_identity_details': {'key': 'servicePrincipalIdentityDetails', 'type': 'SiteSpnProperties'},
        'agent_details': {'key': 'agentDetails', 'type': 'SiteAgentProperties'},
        'service_endpoint': {'key': 'serviceEndpoint', 'type': 'str'},
        'discovery_solution_id': {'key': 'discoverySolutionId', 'type': 'str'},
        'appliance_name': {'key': 'applianceName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        service_principal_identity_details: Optional["SiteSpnProperties"] = None,
        agent_details: Optional["SiteAgentProperties"] = None,
        discovery_solution_id: Optional[str] = None,
        appliance_name: Optional[str] = None,
        **kwargs
    ):
        super(SiteProperties, self).__init__(**kwargs)
        self.service_principal_identity_details = service_principal_identity_details
        self.agent_details = agent_details
        self.service_endpoint = None
        self.discovery_solution_id = discovery_solution_id
        self.appliance_name = appliance_name


class SiteSpnProperties(msrest.serialization.Model):
    """Class for site properties.

    :param tenant_id: Tenant Id for the service principal with which the on-premise management/data
     plane components would communicate with our Azure services.
    :type tenant_id: str
    :param application_id: Application/client Id for the service principal with which the on-
     premise management/data plane components would communicate with our Azure services.
    :type application_id: str
    :param object_id: Object Id of the service principal with which the on-premise management/data
     plane components would communicate with our Azure services.
    :type object_id: str
    :param audience: Intended audience for the service principal.
    :type audience: str
    :param aad_authority: AAD Authority URL which was used to request the token for the service
     principal.
    :type aad_authority: str
    :param raw_cert_data: Raw certificate data for building certificate expiry flows.
    :type raw_cert_data: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
        'audience': {'key': 'audience', 'type': 'str'},
        'aad_authority': {'key': 'aadAuthority', 'type': 'str'},
        'raw_cert_data': {'key': 'rawCertData', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        application_id: Optional[str] = None,
        object_id: Optional[str] = None,
        audience: Optional[str] = None,
        aad_authority: Optional[str] = None,
        raw_cert_data: Optional[str] = None,
        **kwargs
    ):
        super(SiteSpnProperties, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.application_id = application_id
        self.object_id = object_id
        self.audience = audience
        self.aad_authority = aad_authority
        self.raw_cert_data = raw_cert_data


class SqlServer(msrest.serialization.Model):
    """SQLServer in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the SQLServer.
    :vartype name: str
    :ivar edition: Edition of the SQLServer.
    :vartype edition: str
    :ivar service_pack: ServicePack of the SQLServer.
    :vartype service_pack: str
    :ivar version: Version of the SQLServer.
    :vartype version: str
    :ivar clustered: Clustered of the SQLServer.
    :vartype clustered: str
    :ivar cluster_name: ClusterName of the SQLServer.
    :vartype cluster_name: str
    """

    _validation = {
        'name': {'readonly': True},
        'edition': {'readonly': True},
        'service_pack': {'readonly': True},
        'version': {'readonly': True},
        'clustered': {'readonly': True},
        'cluster_name': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'edition': {'key': 'edition', 'type': 'str'},
        'service_pack': {'key': 'servicePack', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'clustered': {'key': 'clustered', 'type': 'str'},
        'cluster_name': {'key': 'clusterName', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SqlServer, self).__init__(**kwargs)
        self.name = None
        self.edition = None
        self.service_pack = None
        self.version = None
        self.clustered = None
        self.cluster_name = None


class SystemCenter(msrest.serialization.Model):
    """SystemCenter in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar product_name: ProductName of the SystemCenter.
    :vartype product_name: str
    :ivar status: Status of the SystemCenter.
    :vartype status: str
    :ivar version: Version of the SystemCenter.
    :vartype version: str
    """

    _validation = {
        'product_name': {'readonly': True},
        'status': {'readonly': True},
        'version': {'readonly': True},
    }

    _attribute_map = {
        'product_name': {'key': 'productName', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(SystemCenter, self).__init__(**kwargs)
        self.product_name = None
        self.status = None
        self.version = None


class Timezone(msrest.serialization.Model):
    """Timezone.

    :param full_name:
    :type full_name: str
    """

    _attribute_map = {
        'full_name': {'key': 'fullName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        full_name: Optional[str] = None,
        **kwargs
    ):
        super(Timezone, self).__init__(**kwargs)
        self.full_name = full_name


class VCenter(msrest.serialization.Model):
    """VCenter REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :param name: Name of the vCenter.
    :type name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/VMWareSites/VCenters.
    :vartype type: str
    :param properties: vCenter nested properties.
    :type properties: ~azure_migrate_v2.models.VCenterProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VCenterProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        properties: Optional["VCenterProperties"] = None,
        **kwargs
    ):
        super(VCenter, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.properties = properties


class VCenterCollection(msrest.serialization.Model):
    """Collection of vCenter.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of vCenter.
    :vartype value: list[~azure_migrate_v2.models.VCenter]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VCenter]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VCenterCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class VCenterProperties(msrest.serialization.Model):
    """Class for vCenter properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar created_timestamp: Timestamp marking vCenter creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the vCenter.
    :vartype updated_timestamp: str
    :param fqdn: FQDN/IPAddress of the vCenter.
    :type fqdn: str
    :param port: Port of the vCenter.
    :type port: str
    :param run_as_account_id: Run as account ID of the vCenter.
    :type run_as_account_id: str
    :ivar version: Version of the vCenter.
    :vartype version: str
    :ivar perf_statistics_level: Performance statistics enabled on the vCenter.
    :vartype perf_statistics_level: str
    :ivar instance_uuid: Instance UUID of the vCenter.
    :vartype instance_uuid: str
    :ivar errors: Error details.
    :vartype errors: list[~azure_migrate_v2.models.HealthErrorDetails]
    """

    _validation = {
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'version': {'readonly': True},
        'perf_statistics_level': {'readonly': True},
        'instance_uuid': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
        'fqdn': {'key': 'fqdn', 'type': 'str'},
        'port': {'key': 'port', 'type': 'str'},
        'run_as_account_id': {'key': 'runAsAccountId', 'type': 'str'},
        'version': {'key': 'version', 'type': 'str'},
        'perf_statistics_level': {'key': 'perfStatisticsLevel', 'type': 'str'},
        'instance_uuid': {'key': 'instanceUuid', 'type': 'str'},
        'errors': {'key': 'errors', 'type': '[HealthErrorDetails]'},
    }

    def __init__(
        self,
        *,
        fqdn: Optional[str] = None,
        port: Optional[str] = None,
        run_as_account_id: Optional[str] = None,
        **kwargs
    ):
        super(VCenterProperties, self).__init__(**kwargs)
        self.created_timestamp = None
        self.updated_timestamp = None
        self.fqdn = fqdn
        self.port = port
        self.run_as_account_id = run_as_account_id
        self.version = None
        self.perf_statistics_level = None
        self.instance_uuid = None
        self.errors = None


class VirtualMachineConfiguration(msrest.serialization.Model):
    """VirtualMachineConfiguration.

    :param virtual_machine_type:  Possible values include: "unknown", "hyperv", "ldom", "lpar",
     "vmware", "virtualPc", "xen".
    :type virtual_machine_type: str or
     ~azure_migrate_v2.models.VirtualMachineConfigurationVirtualMachineType
    :param native_machine_id:
    :type native_machine_id: str
    :param virtual_machine_name:
    :type virtual_machine_name: str
    :param native_host_machine_id:
    :type native_host_machine_id: str
    """

    _attribute_map = {
        'virtual_machine_type': {'key': 'virtualMachineType', 'type': 'str'},
        'native_machine_id': {'key': 'nativeMachineId', 'type': 'str'},
        'virtual_machine_name': {'key': 'virtualMachineName', 'type': 'str'},
        'native_host_machine_id': {'key': 'nativeHostMachineId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        virtual_machine_type: Optional[Union[str, "VirtualMachineConfigurationVirtualMachineType"]] = None,
        native_machine_id: Optional[str] = None,
        virtual_machine_name: Optional[str] = None,
        native_host_machine_id: Optional[str] = None,
        **kwargs
    ):
        super(VirtualMachineConfiguration, self).__init__(**kwargs)
        self.virtual_machine_type = virtual_machine_type
        self.native_machine_id = native_machine_id
        self.virtual_machine_name = virtual_machine_name
        self.native_host_machine_id = native_host_machine_id


class VMwareDisk(msrest.serialization.Model):
    """Second level object returned as part of Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar uuid: Disk UUID.
    :vartype uuid: str
    :ivar label: Label of the disk.
    :vartype label: str
    :ivar disk_provisioning_policy: The provisioning policy of the disk. It is Thin or Thick or
     Unknown for the VMWare.
    :vartype disk_provisioning_policy: str
    :ivar disk_scrubbing_policy: The scrubbing policy of disks which can be eagerly zeroed or
     lazily zeroed.
    :vartype disk_scrubbing_policy: str
    :ivar disk_mode: Disk mode property used for identifying independent disks. Possible values
     include: "persistent", "independent_persistent", "independent_nonpersistent", "nonpersistent",
     "undoable", "append".
    :vartype disk_mode: str or ~azure_migrate_v2.models.VirtualDiskMode
    :ivar max_size_in_bytes: Bytes allocated for the disk.
    :vartype max_size_in_bytes: long
    :ivar name: Name of the disk.
    :vartype name: str
    :ivar disk_type: Type of the disk.
    :vartype disk_type: str
    :ivar lun: LUN of the disk.
    :vartype lun: int
    :ivar path: Path of the disk.
    :vartype path: str
    """

    _validation = {
        'uuid': {'readonly': True},
        'label': {'readonly': True},
        'disk_provisioning_policy': {'readonly': True},
        'disk_scrubbing_policy': {'readonly': True},
        'disk_mode': {'readonly': True},
        'max_size_in_bytes': {'readonly': True},
        'name': {'readonly': True},
        'disk_type': {'readonly': True},
        'lun': {'readonly': True},
        'path': {'readonly': True},
    }

    _attribute_map = {
        'uuid': {'key': 'uuid', 'type': 'str'},
        'label': {'key': 'label', 'type': 'str'},
        'disk_provisioning_policy': {'key': 'diskProvisioningPolicy', 'type': 'str'},
        'disk_scrubbing_policy': {'key': 'diskScrubbingPolicy', 'type': 'str'},
        'disk_mode': {'key': 'diskMode', 'type': 'str'},
        'max_size_in_bytes': {'key': 'maxSizeInBytes', 'type': 'long'},
        'name': {'key': 'name', 'type': 'str'},
        'disk_type': {'key': 'diskType', 'type': 'str'},
        'lun': {'key': 'lun', 'type': 'int'},
        'path': {'key': 'path', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareDisk, self).__init__(**kwargs)
        self.uuid = None
        self.label = None
        self.disk_provisioning_policy = None
        self.disk_scrubbing_policy = None
        self.disk_mode = None
        self.max_size_in_bytes = None
        self.name = None
        self.disk_type = None
        self.lun = None
        self.path = None


class VMwareJob(msrest.serialization.Model):
    """Job REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the job.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/VMWareSites/Jobs.
    :vartype type: str
    :ivar properties: Nested properties of job.
    :vartype properties: ~azure_migrate_v2.models.JobProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'JobProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareJob, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class VMwareJobCollection(msrest.serialization.Model):
    """Collection of VMware jobs.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of jobs.
    :vartype value: list[~azure_migrate_v2.models.VMwareJob]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VMwareJob]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareJobCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class VMwareMachine(msrest.serialization.Model):
    """Machine REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the Sites.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/VMWareSites/Machines.
    :vartype type: str
    :ivar properties: Nested properties.
    :vartype properties: ~azure_migrate_v2.models.VMwareMachineProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'VMwareMachineProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareMachine, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class VMwareMachineCollection(msrest.serialization.Model):
    """Collection of VMware machines.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of machines.
    :vartype value: list[~azure_migrate_v2.models.VMwareMachine]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VMwareMachine]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareMachineCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class VMwareMachineProperties(msrest.serialization.Model):
    """Class for machine properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar data_center_scope: Scope of the data center.
    :vartype data_center_scope: str
    :ivar firmware: Firmware of the machine.
    :vartype firmware: str
    :ivar description: User description of the machine.
    :vartype description: str
    :ivar v_center_fqdn: VCenter FQDN/IPAddress.
    :vartype v_center_fqdn: str
    :ivar v_center_id: VCenter ARM ID.
    :vartype v_center_id: str
    :ivar v_mware_tools_status: VMware tools status.
    :vartype v_mware_tools_status: str
    :ivar change_tracking_supported: Value indicating whether change tracking is supported.
    :vartype change_tracking_supported: bool
    :ivar change_tracking_enabled: Value indicating whether change tracking is enabled.
    :vartype change_tracking_enabled: bool
    :ivar max_snapshots: Maximum number of snapshots for the VM. Default value is -1.
    :vartype max_snapshots: int
    :ivar disks: Disks attached to the machine.
    :vartype disks: list[~azure_migrate_v2.models.VMwareDisk]
    :ivar apps_and_roles: Apps And Roles of the VM.
    :vartype apps_and_roles: ~azure_migrate_v2.models.AppsAndRoles
    :ivar host_in_maintenance_mode: Indicates whether the host is in maintenance mode.
    :vartype host_in_maintenance_mode: bool
    :ivar host_name: The host name.
    :vartype host_name: str
    :ivar host_power_state: The host power state.
    :vartype host_power_state: str
    :ivar host_version: The host version.
    :vartype host_version: str
    :ivar network_adapters: Network adapters attached to the machine.
    :vartype network_adapters: list[~azure_migrate_v2.models.VMwareNetworkAdapter]
    :ivar dependency_mapping: If dependency mapping feature is enabled or not for the VM.
    :vartype dependency_mapping: str
    :ivar dependency_mapping_start_time: When dependency mapping collection is last started.
    :vartype dependency_mapping_start_time: ~datetime.datetime
    :ivar display_name: Display name of the machine.
    :vartype display_name: str
    :ivar number_of_processor_core: Number of Processor Cores allocated for the machine.
    :vartype number_of_processor_core: int
    :ivar allocated_memory_in_mb: Allocated Memory in MB.
    :vartype allocated_memory_in_mb: float
    :ivar vm_configuration_file_location: Root location of the VM configuration file.
    :vartype vm_configuration_file_location: str
    :ivar operating_system_details: Operating System Details installed on the machine.
    :vartype operating_system_details: ~azure_migrate_v2.models.OperatingSystem
    :ivar guest_os_details: Operating System Details extracted from the guest bu executing script
     inside the guest VM.
    :vartype guest_os_details: ~azure_migrate_v2.models.GuestOsDetails
    :ivar number_of_applications: Number of applications installed in the guest VM.
    :vartype number_of_applications: int
    :ivar guest_details_discovery_timestamp: The last time at which the Guest Details was
     discovered or the error while discovering guest details based discovery of the machine.
    :vartype guest_details_discovery_timestamp: ~datetime.datetime
    :ivar is_guest_details_discovery_in_progress: Whether Refresh Fabric Layout Guest Details has
     been completed once. Portal will show discovery in progress, if this value is true.
    :vartype is_guest_details_discovery_in_progress: bool
    :ivar created_timestamp: Timestamp marking machine creation.
    :vartype created_timestamp: str
    :ivar updated_timestamp: Timestamp marking last updated on the machine.
    :vartype updated_timestamp: str
    :ivar instance_uuid: On-premise Instance UUID of the machine.
    :vartype instance_uuid: str
    :ivar power_status: Machine power status.
    :vartype power_status: str
    :ivar bios_serial_number: Machine BIOS serial number.
    :vartype bios_serial_number: str
    :ivar bios_guid: BIOS GUID.
    :vartype bios_guid: str
    :ivar vm_fqdn: Machine FQDN.
    :vartype vm_fqdn: str
    :ivar is_deleted: Value indicating whether VM is deleted.
    :vartype is_deleted: bool
    :ivar errors: Errors for machine.
    :vartype errors: list[~azure_migrate_v2.models.HealthErrorDetails]
    """

    _validation = {
        'data_center_scope': {'readonly': True},
        'firmware': {'readonly': True},
        'description': {'readonly': True},
        'v_center_fqdn': {'readonly': True},
        'v_center_id': {'readonly': True},
        'v_mware_tools_status': {'readonly': True},
        'change_tracking_supported': {'readonly': True},
        'change_tracking_enabled': {'readonly': True},
        'max_snapshots': {'readonly': True},
        'disks': {'readonly': True},
        'apps_and_roles': {'readonly': True},
        'host_in_maintenance_mode': {'readonly': True},
        'host_name': {'readonly': True},
        'host_power_state': {'readonly': True},
        'host_version': {'readonly': True},
        'network_adapters': {'readonly': True},
        'dependency_mapping': {'readonly': True},
        'dependency_mapping_start_time': {'readonly': True},
        'display_name': {'readonly': True},
        'number_of_processor_core': {'readonly': True},
        'allocated_memory_in_mb': {'readonly': True},
        'vm_configuration_file_location': {'readonly': True},
        'operating_system_details': {'readonly': True},
        'guest_os_details': {'readonly': True},
        'number_of_applications': {'readonly': True},
        'guest_details_discovery_timestamp': {'readonly': True},
        'is_guest_details_discovery_in_progress': {'readonly': True},
        'created_timestamp': {'readonly': True},
        'updated_timestamp': {'readonly': True},
        'instance_uuid': {'readonly': True},
        'power_status': {'readonly': True},
        'bios_serial_number': {'readonly': True},
        'bios_guid': {'readonly': True},
        'vm_fqdn': {'readonly': True},
        'is_deleted': {'readonly': True},
        'errors': {'readonly': True},
    }

    _attribute_map = {
        'data_center_scope': {'key': 'dataCenterScope', 'type': 'str'},
        'firmware': {'key': 'firmware', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'v_center_fqdn': {'key': 'vCenterFQDN', 'type': 'str'},
        'v_center_id': {'key': 'vCenterId', 'type': 'str'},
        'v_mware_tools_status': {'key': 'vMwareToolsStatus', 'type': 'str'},
        'change_tracking_supported': {'key': 'changeTrackingSupported', 'type': 'bool'},
        'change_tracking_enabled': {'key': 'changeTrackingEnabled', 'type': 'bool'},
        'max_snapshots': {'key': 'maxSnapshots', 'type': 'int'},
        'disks': {'key': 'disks', 'type': '[VMwareDisk]'},
        'apps_and_roles': {'key': 'appsAndRoles', 'type': 'AppsAndRoles'},
        'host_in_maintenance_mode': {'key': 'hostInMaintenanceMode', 'type': 'bool'},
        'host_name': {'key': 'hostName', 'type': 'str'},
        'host_power_state': {'key': 'hostPowerState', 'type': 'str'},
        'host_version': {'key': 'hostVersion', 'type': 'str'},
        'network_adapters': {'key': 'networkAdapters', 'type': '[VMwareNetworkAdapter]'},
        'dependency_mapping': {'key': 'dependencyMapping', 'type': 'str'},
        'dependency_mapping_start_time': {'key': 'dependencyMappingStartTime', 'type': 'iso-8601'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'number_of_processor_core': {'key': 'numberOfProcessorCore', 'type': 'int'},
        'allocated_memory_in_mb': {'key': 'allocatedMemoryInMB', 'type': 'float'},
        'vm_configuration_file_location': {'key': 'vmConfigurationFileLocation', 'type': 'str'},
        'operating_system_details': {'key': 'operatingSystemDetails', 'type': 'OperatingSystem'},
        'guest_os_details': {'key': 'guestOSDetails', 'type': 'GuestOsDetails'},
        'number_of_applications': {'key': 'numberOfApplications', 'type': 'int'},
        'guest_details_discovery_timestamp': {'key': 'guestDetailsDiscoveryTimestamp', 'type': 'iso-8601'},
        'is_guest_details_discovery_in_progress': {'key': 'isGuestDetailsDiscoveryInProgress', 'type': 'bool'},
        'created_timestamp': {'key': 'createdTimestamp', 'type': 'str'},
        'updated_timestamp': {'key': 'updatedTimestamp', 'type': 'str'},
        'instance_uuid': {'key': 'instanceUuid', 'type': 'str'},
        'power_status': {'key': 'powerStatus', 'type': 'str'},
        'bios_serial_number': {'key': 'biosSerialNumber', 'type': 'str'},
        'bios_guid': {'key': 'biosGuid', 'type': 'str'},
        'vm_fqdn': {'key': 'vmFqdn', 'type': 'str'},
        'is_deleted': {'key': 'isDeleted', 'type': 'bool'},
        'errors': {'key': 'errors', 'type': '[HealthErrorDetails]'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareMachineProperties, self).__init__(**kwargs)
        self.data_center_scope = None
        self.firmware = None
        self.description = None
        self.v_center_fqdn = None
        self.v_center_id = None
        self.v_mware_tools_status = None
        self.change_tracking_supported = None
        self.change_tracking_enabled = None
        self.max_snapshots = None
        self.disks = None
        self.apps_and_roles = None
        self.host_in_maintenance_mode = None
        self.host_name = None
        self.host_power_state = None
        self.host_version = None
        self.network_adapters = None
        self.dependency_mapping = None
        self.dependency_mapping_start_time = None
        self.display_name = None
        self.number_of_processor_core = None
        self.allocated_memory_in_mb = None
        self.vm_configuration_file_location = None
        self.operating_system_details = None
        self.guest_os_details = None
        self.number_of_applications = None
        self.guest_details_discovery_timestamp = None
        self.is_guest_details_discovery_in_progress = None
        self.created_timestamp = None
        self.updated_timestamp = None
        self.instance_uuid = None
        self.power_status = None
        self.bios_serial_number = None
        self.bios_guid = None
        self.vm_fqdn = None
        self.is_deleted = None
        self.errors = None


class VMwareNetworkAdapter(msrest.serialization.Model):
    """Second level object represented in responses as part of Machine REST resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar label: Label of the NIC.
    :vartype label: str
    :ivar nic_id: NIC Id.
    :vartype nic_id: str
    :ivar mac_address: Mac address of the NIC.
    :vartype mac_address: str
    :ivar ip_address_list: IP addresses for the machine.
    :vartype ip_address_list: list[str]
    :ivar network_name: Network Name.
    :vartype network_name: str
    :ivar ip_address_type: Type of the IP address.
    :vartype ip_address_type: str
    """

    _validation = {
        'label': {'readonly': True},
        'nic_id': {'readonly': True},
        'mac_address': {'readonly': True},
        'ip_address_list': {'readonly': True},
        'network_name': {'readonly': True},
        'ip_address_type': {'readonly': True},
    }

    _attribute_map = {
        'label': {'key': 'label', 'type': 'str'},
        'nic_id': {'key': 'nicId', 'type': 'str'},
        'mac_address': {'key': 'macAddress', 'type': 'str'},
        'ip_address_list': {'key': 'ipAddressList', 'type': '[str]'},
        'network_name': {'key': 'networkName', 'type': 'str'},
        'ip_address_type': {'key': 'ipAddressType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareNetworkAdapter, self).__init__(**kwargs)
        self.label = None
        self.nic_id = None
        self.mac_address = None
        self.ip_address_list = None
        self.network_name = None
        self.ip_address_type = None


class VMwareRunAsAccount(msrest.serialization.Model):
    """Run as account REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :ivar name: Name of the Run as account.
    :vartype name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/VMWareSites/RunAsAccounts.
    :vartype type: str
    :ivar properties: Nested properties of Run as account.
    :vartype properties: ~azure_migrate_v2.models.RunAsAccountProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'RunAsAccountProperties'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareRunAsAccount, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.properties = None


class VMwareRunAsAccountCollection(msrest.serialization.Model):
    """Collection of VMware run as accounts.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of run as accounts.
    :vartype value: list[~azure_migrate_v2.models.VMwareRunAsAccount]
    :ivar next_link: Value of next link.
    :vartype next_link: str
    """

    _validation = {
        'value': {'readonly': True},
        'next_link': {'readonly': True},
    }

    _attribute_map = {
        'value': {'key': 'value', 'type': '[VMwareRunAsAccount]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(VMwareRunAsAccountCollection, self).__init__(**kwargs)
        self.value = None
        self.next_link = None


class VMwareSite(msrest.serialization.Model):
    """Site REST Resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Resource Id.
    :vartype id: str
    :param name: Name of the VMware site.
    :type name: str
    :ivar type: Type of resource. Type = Microsoft.OffAzure/VMWareSites.
    :vartype type: str
    :param tags: A set of tags. Dictionary of :code:`<string>`.
    :type tags: dict[str, str]
    :param e_tag: eTag for concurrency control.
    :type e_tag: str
    :param location: Azure location in which Sites is created.
    :type location: str
    :param properties: Nested properties of VMWare site.
    :type properties: ~azure_migrate_v2.models.SiteProperties
    """

    _validation = {
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'e_tag': {'key': 'eTag', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'SiteProperties'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        tags: Optional[Dict[str, str]] = None,
        e_tag: Optional[str] = None,
        location: Optional[str] = None,
        properties: Optional["SiteProperties"] = None,
        **kwargs
    ):
        super(VMwareSite, self).__init__(**kwargs)
        self.id = None
        self.name = name
        self.type = None
        self.tags = tags
        self.e_tag = e_tag
        self.location = location
        self.properties = properties


class VMwareSiteUsage(msrest.serialization.Model):
    """VMware site usage.

    :param machine_count: Number of machines discovered in the site.
    :type machine_count: int
    :param run_as_account_count: Number of run as accounts in the site.
    :type run_as_account_count: int
    :param v_center_count: Number of vCenters part of the site.
    :type v_center_count: int
    """

    _attribute_map = {
        'machine_count': {'key': 'machineCount', 'type': 'int'},
        'run_as_account_count': {'key': 'runAsAccountCount', 'type': 'int'},
        'v_center_count': {'key': 'vCenterCount', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        machine_count: Optional[int] = None,
        run_as_account_count: Optional[int] = None,
        v_center_count: Optional[int] = None,
        **kwargs
    ):
        super(VMwareSiteUsage, self).__init__(**kwargs)
        self.machine_count = machine_count
        self.run_as_account_count = run_as_account_count
        self.v_center_count = v_center_count


class WebApplication(msrest.serialization.Model):
    """WebApplication in the guest virtual machine.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: Name of the WebApplication.
    :vartype name: str
    :ivar status: Status of the WebApplication.
    :vartype status: str
    :ivar platform: Platform of the WebApplication.
    :vartype platform: str
    :ivar group_name: GroupName of the WebApplication.
    :vartype group_name: str
    :ivar web_server: WebServer of the WebApplication.
    :vartype web_server: str
    :ivar application_pool: ApplicationPool of the WebApplication.
    :vartype application_pool: str
    """

    _validation = {
        'name': {'readonly': True},
        'status': {'readonly': True},
        'platform': {'readonly': True},
        'group_name': {'readonly': True},
        'web_server': {'readonly': True},
        'application_pool': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'platform': {'key': 'platform', 'type': 'str'},
        'group_name': {'key': 'groupName', 'type': 'str'},
        'web_server': {'key': 'webServer', 'type': 'str'},
        'application_pool': {'key': 'applicationPool', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(WebApplication, self).__init__(**kwargs)
        self.name = None
        self.status = None
        self.platform = None
        self.group_name = None
        self.web_server = None
        self.application_pool = None
