# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from typing import Any, Optional, TYPE_CHECKING

from azure.mgmt.core import AsyncARMPipelineClient
from msrest import Deserializer, Serializer

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from azure.core.credentials_async import AsyncTokenCredential

from ._configuration import AzureMigrateV2Configuration
from .operations import HyperVClusterOperations
from .operations import HyperVHostOperations
from .operations import HyperVJobsOperations
from .operations import HyperVMachinesOperations
from .operations import HyperVOperationsStatusOperations
from .operations import HyperVRunAsAccountsOperations
from .operations import HyperVSitesOperations
from .operations import JobsOperations
from .operations import MachinesOperations
from .operations import RunAsAccountsOperations
from .operations import SitesOperations
from .operations import VCenterOperations
from .operations import VMwareOperationsStatusOperations
from .operations import Operations
from .. import models


class AzureMigrateV2(object):
    """Discover your workloads for Azure.

    :ivar hyper_vcluster: HyperVClusterOperations operations
    :vartype hyper_vcluster: azure_migrate_v2.aio.operations.HyperVClusterOperations
    :ivar hyper_vhost: HyperVHostOperations operations
    :vartype hyper_vhost: azure_migrate_v2.aio.operations.HyperVHostOperations
    :ivar hyper_vjobs: HyperVJobsOperations operations
    :vartype hyper_vjobs: azure_migrate_v2.aio.operations.HyperVJobsOperations
    :ivar hyper_vmachines: HyperVMachinesOperations operations
    :vartype hyper_vmachines: azure_migrate_v2.aio.operations.HyperVMachinesOperations
    :ivar hyper_voperations_status: HyperVOperationsStatusOperations operations
    :vartype hyper_voperations_status: azure_migrate_v2.aio.operations.HyperVOperationsStatusOperations
    :ivar hyper_vrun_as_accounts: HyperVRunAsAccountsOperations operations
    :vartype hyper_vrun_as_accounts: azure_migrate_v2.aio.operations.HyperVRunAsAccountsOperations
    :ivar hyper_vsites: HyperVSitesOperations operations
    :vartype hyper_vsites: azure_migrate_v2.aio.operations.HyperVSitesOperations
    :ivar jobs: JobsOperations operations
    :vartype jobs: azure_migrate_v2.aio.operations.JobsOperations
    :ivar machines: MachinesOperations operations
    :vartype machines: azure_migrate_v2.aio.operations.MachinesOperations
    :ivar run_as_accounts: RunAsAccountsOperations operations
    :vartype run_as_accounts: azure_migrate_v2.aio.operations.RunAsAccountsOperations
    :ivar sites: SitesOperations operations
    :vartype sites: azure_migrate_v2.aio.operations.SitesOperations
    :ivar vcenter: VCenterOperations operations
    :vartype vcenter: azure_migrate_v2.aio.operations.VCenterOperations
    :ivar vmware_operations_status: VMwareOperationsStatusOperations operations
    :vartype vmware_operations_status: azure_migrate_v2.aio.operations.VMwareOperationsStatusOperations
    :ivar operations: Operations operations
    :vartype operations: azure_migrate_v2.aio.operations.Operations
    :param credential: Credential needed for the client to connect to Azure.
    :type credential: ~azure.core.credentials_async.AsyncTokenCredential
    :param str base_url: Service URL
    """

    def __init__(
        self,
        credential: "AsyncTokenCredential",
        base_url: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        if not base_url:
            base_url = 'https://management.azure.com'
        self._config = AzureMigrateV2Configuration(credential, **kwargs)
        self._client = AsyncARMPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._serialize.client_side_validation = False
        self._deserialize = Deserializer(client_models)

        self.hyper_vcluster = HyperVClusterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_vhost = HyperVHostOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_vjobs = HyperVJobsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_vmachines = HyperVMachinesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_voperations_status = HyperVOperationsStatusOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_vrun_as_accounts = HyperVRunAsAccountsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.hyper_vsites = HyperVSitesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.jobs = JobsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.machines = MachinesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.run_as_accounts = RunAsAccountsOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.sites = SitesOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.vcenter = VCenterOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.vmware_operations_status = VMwareOperationsStatusOperations(
            self._client, self._config, self._serialize, self._deserialize)
        self.operations = Operations(
            self._client, self._config, self._serialize, self._deserialize)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "AzureMigrateV2":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
