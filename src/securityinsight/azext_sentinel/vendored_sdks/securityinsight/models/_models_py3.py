# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import List, Optional, Union

import msrest.serialization


class DataConnectorKind(msrest.serialization.Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        **kwargs
    ):
        super(DataConnectorKind, self).__init__(**kwargs)
        self.kind = kind


class DataConnector(DataConnectorKind):
    """Data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        **kwargs
    ):
        super(DataConnector, self).__init__(kind=kind, **kwargs)


class AadDataConnector(DataConnector):
    """Represents AAD (Azure Active Directory) data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(AadDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class DataConnectorWithAlertsProperties(msrest.serialization.Model):
    """Data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(DataConnectorWithAlertsProperties, self).__init__(**kwargs)
        self.data_types = data_types


class AadDataConnectorProperties(DataConnectorWithAlertsProperties):
    """AAD (Azure Active Directory) data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(AadDataConnectorProperties, self).__init__(data_types=data_types, **kwargs)


class AatpDataConnector(DataConnector):
    """Represents AATP (Azure Advanced Threat Protection) data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(AatpDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class AatpDataConnectorProperties(DataConnectorWithAlertsProperties):
    """AATP (Azure Advanced Threat Protection) data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(AatpDataConnectorProperties, self).__init__(data_types=data_types, **kwargs)


class ActionPropertiesBase(msrest.serialization.Model):
    """Action property bag base.

    All required parameters must be populated in order to send to Azure.

    :param logic_app_resource_id: Required. Logic App Resource Id,
     providers/Microsoft.Logic/workflows/{WorkflowID}.
    :type logic_app_resource_id: str
    """

    _validation = {
        'logic_app_resource_id': {'required': True},
    }

    _attribute_map = {
        'logic_app_resource_id': {'key': 'logicAppResourceId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        logic_app_resource_id: str,
        **kwargs
    ):
        super(ActionPropertiesBase, self).__init__(**kwargs)
        self.logic_app_resource_id = logic_app_resource_id


class ResourceWithEtag(msrest.serialization.Model):
    """An azure resource object with an Etag property.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :param etag: Etag of the azure resource.
    :type etag: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        **kwargs
    ):
        super(ResourceWithEtag, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None
        self.etag = etag


class ActionRequest(ResourceWithEtag):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :param etag: Etag of the azure resource.
    :type etag: str
    :param logic_app_resource_id: Logic App Resource Id,
     providers/Microsoft.Logic/workflows/{WorkflowID}.
    :type logic_app_resource_id: str
    :param trigger_uri: Logic App Callback URL for this specific workflow.
    :type trigger_uri: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'logic_app_resource_id': {'key': 'properties.logicAppResourceId', 'type': 'str'},
        'trigger_uri': {'key': 'properties.triggerUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        logic_app_resource_id: Optional[str] = None,
        trigger_uri: Optional[str] = None,
        **kwargs
    ):
        super(ActionRequest, self).__init__(etag=etag, **kwargs)
        self.logic_app_resource_id = logic_app_resource_id
        self.trigger_uri = trigger_uri


class ActionRequestProperties(ActionPropertiesBase):
    """Action property bag.

    All required parameters must be populated in order to send to Azure.

    :param logic_app_resource_id: Required. Logic App Resource Id,
     providers/Microsoft.Logic/workflows/{WorkflowID}.
    :type logic_app_resource_id: str
    :param trigger_uri: Logic App Callback URL for this specific workflow.
    :type trigger_uri: str
    """

    _validation = {
        'logic_app_resource_id': {'required': True},
    }

    _attribute_map = {
        'logic_app_resource_id': {'key': 'logicAppResourceId', 'type': 'str'},
        'trigger_uri': {'key': 'triggerUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        logic_app_resource_id: str,
        trigger_uri: Optional[str] = None,
        **kwargs
    ):
        super(ActionRequestProperties, self).__init__(logic_app_resource_id=logic_app_resource_id, **kwargs)
        self.trigger_uri = trigger_uri


class Resource(msrest.serialization.Model):
    """An azure resource object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ActionResponse(Resource):
    """Action for alert rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :param etag: Etag of the action.
    :type etag: str
    :param logic_app_resource_id: Logic App Resource Id,
     providers/Microsoft.Logic/workflows/{WorkflowID}.
    :type logic_app_resource_id: str
    :param workflow_id: The name of the logic app's workflow.
    :type workflow_id: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'etag': {'key': 'etag', 'type': 'str'},
        'logic_app_resource_id': {'key': 'properties.logicAppResourceId', 'type': 'str'},
        'workflow_id': {'key': 'properties.workflowId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        etag: Optional[str] = None,
        logic_app_resource_id: Optional[str] = None,
        workflow_id: Optional[str] = None,
        **kwargs
    ):
        super(ActionResponse, self).__init__(**kwargs)
        self.etag = etag
        self.logic_app_resource_id = logic_app_resource_id
        self.workflow_id = workflow_id


class ActionResponseProperties(ActionPropertiesBase):
    """Action property bag.

    All required parameters must be populated in order to send to Azure.

    :param logic_app_resource_id: Required. Logic App Resource Id,
     providers/Microsoft.Logic/workflows/{WorkflowID}.
    :type logic_app_resource_id: str
    :param workflow_id: The name of the logic app's workflow.
    :type workflow_id: str
    """

    _validation = {
        'logic_app_resource_id': {'required': True},
    }

    _attribute_map = {
        'logic_app_resource_id': {'key': 'logicAppResourceId', 'type': 'str'},
        'workflow_id': {'key': 'workflowId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        logic_app_resource_id: str,
        workflow_id: Optional[str] = None,
        **kwargs
    ):
        super(ActionResponseProperties, self).__init__(logic_app_resource_id=logic_app_resource_id, **kwargs)
        self.workflow_id = workflow_id


class ActionsList(msrest.serialization.Model):
    """List all the actions.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: URL to fetch the next set of actions.
    :vartype next_link: str
    :param value: Required. Array of actions.
    :type value: list[~azure.mgmt.securityinsight.models.ActionResponse]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[ActionResponse]'},
    }

    def __init__(
        self,
        *,
        value: List["ActionResponse"],
        **kwargs
    ):
        super(ActionsList, self).__init__(**kwargs)
        self.next_link = None
        self.value = value


class AlertRuleKind(msrest.serialization.Model):
    """Describes an Azure resource with kind.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        **kwargs
    ):
        super(AlertRuleKind, self).__init__(**kwargs)
        self.kind = kind


class AlertRule(AlertRuleKind):
    """Alert rule.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        **kwargs
    ):
        super(AlertRule, self).__init__(kind=kind, **kwargs)


class AlertRulesList(msrest.serialization.Model):
    """List all the alert rules.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: URL to fetch the next set of alert rules.
    :vartype next_link: str
    :param value: Required. Array of alert rules.
    :type value: list[~azure.mgmt.securityinsight.models.AlertRule]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[AlertRule]'},
    }

    def __init__(
        self,
        *,
        value: List["AlertRule"],
        **kwargs
    ):
        super(AlertRulesList, self).__init__(**kwargs)
        self.next_link = None
        self.value = value


class AlertRuleTemplate(AlertRuleKind):
    """Alert rule template.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    """

    _validation = {
        'kind': {'required': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        **kwargs
    ):
        super(AlertRuleTemplate, self).__init__(kind=kind, **kwargs)


class AlertRuleTemplateDataSource(msrest.serialization.Model):
    """alert rule template data sources.

    :param connector_id: The connector id that provides the following data types.
    :type connector_id: str
    :param data_types: The data types used by the alert rule template.
    :type data_types: list[str]
    """

    _attribute_map = {
        'connector_id': {'key': 'connectorId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        connector_id: Optional[str] = None,
        data_types: Optional[List[str]] = None,
        **kwargs
    ):
        super(AlertRuleTemplateDataSource, self).__init__(**kwargs)
        self.connector_id = connector_id
        self.data_types = data_types


class AlertRuleTemplatePropertiesBase(msrest.serialization.Model):
    """Base alert rule template property bag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param alert_rules_created_by_template_count: the number of alert rules that were created by
     this template.
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been added.
    :vartype created_date_utc: ~datetime.datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this template.
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include: "Installed",
     "Available", "NotAvailable".
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    """

    _validation = {
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'alert_rules_created_by_template_count': {'key': 'alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'status', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        alert_rules_created_by_template_count: Optional[int] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        required_data_connectors: Optional[List["AlertRuleTemplateDataSource"]] = None,
        status: Optional[Union[str, "TemplateStatus"]] = None,
        **kwargs
    ):
        super(AlertRuleTemplatePropertiesBase, self).__init__(**kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status


class AlertsDataTypeOfDataConnector(msrest.serialization.Model):
    """Alerts data type for data connectors.

    :param alerts: Alerts data type connection.
    :type alerts: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
    }

    def __init__(
        self,
        *,
        alerts: Optional["AlertsDataTypeOfDataConnectorAlerts"] = None,
        **kwargs
    ):
        super(AlertsDataTypeOfDataConnector, self).__init__(**kwargs)
        self.alerts = alerts


class DataConnectorDataTypeCommon(msrest.serialization.Model):
    """Common field for data type in data connectors.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(DataConnectorDataTypeCommon, self).__init__(**kwargs)
        self.state = state


class AlertsDataTypeOfDataConnectorAlerts(DataConnectorDataTypeCommon):
    """Alerts data type connection.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(AlertsDataTypeOfDataConnectorAlerts, self).__init__(state=state, **kwargs)


class AscDataConnector(DataConnector):
    """Represents ASC (Azure Security Center) data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    :param subscription_id: The subscription id to connect to, and get the data from.
    :type subscription_id: str
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
        'subscription_id': {'key': 'properties.subscriptionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        subscription_id: Optional[str] = None,
        **kwargs
    ):
        super(AscDataConnector, self).__init__(kind=kind, **kwargs)
        self.data_types = data_types
        self.subscription_id = subscription_id


class AscDataConnectorProperties(DataConnectorWithAlertsProperties):
    """ASC (Azure Security Center) data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    :param subscription_id: The subscription id to connect to, and get the data from.
    :type subscription_id: str
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
        'subscription_id': {'key': 'subscriptionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        subscription_id: Optional[str] = None,
        **kwargs
    ):
        super(AscDataConnectorProperties, self).__init__(data_types=data_types, **kwargs)
        self.subscription_id = subscription_id


class AwsCloudTrailDataConnector(DataConnector):
    """Represents Amazon Web Services CloudTrail data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param aws_role_arn: The Aws Role Arn (with CloudTrailReadOnly policy) that is used to access
     the Aws account.
    :type aws_role_arn: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypes
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'aws_role_arn': {'key': 'properties.awsRoleArn', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AwsCloudTrailDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        aws_role_arn: Optional[str] = None,
        data_types: Optional["AwsCloudTrailDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(AwsCloudTrailDataConnector, self).__init__(kind=kind, **kwargs)
        self.aws_role_arn = aws_role_arn
        self.data_types = data_types


class AwsCloudTrailDataConnectorDataTypes(msrest.serialization.Model):
    """The available data types for Amazon Web Services CloudTrail data connector.

    :param logs: Logs data type.
    :type logs: ~azure.mgmt.securityinsight.models.AwsCloudTrailDataConnectorDataTypesLogs
    """

    _attribute_map = {
        'logs': {'key': 'logs', 'type': 'AwsCloudTrailDataConnectorDataTypesLogs'},
    }

    def __init__(
        self,
        *,
        logs: Optional["AwsCloudTrailDataConnectorDataTypesLogs"] = None,
        **kwargs
    ):
        super(AwsCloudTrailDataConnectorDataTypes, self).__init__(**kwargs)
        self.logs = logs


class AwsCloudTrailDataConnectorDataTypesLogs(DataConnectorDataTypeCommon):
    """Logs data type.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(AwsCloudTrailDataConnectorDataTypesLogs, self).__init__(state=state, **kwargs)


class DataConnectorList(msrest.serialization.Model):
    """List all the data connectors.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: URL to fetch the next set of data connectors.
    :vartype next_link: str
    :param value: Required. Array of data connectors.
    :type value: list[~azure.mgmt.securityinsight.models.DataConnector]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[DataConnector]'},
    }

    def __init__(
        self,
        *,
        value: List["DataConnector"],
        **kwargs
    ):
        super(DataConnectorList, self).__init__(**kwargs)
        self.next_link = None
        self.value = value


class DataConnectorTenantId(msrest.serialization.Model):
    """Properties data connector on tenant level.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        **kwargs
    ):
        super(DataConnectorTenantId, self).__init__(**kwargs)
        self.tenant_id = tenant_id


class FusionAlertRule(AlertRule):
    """Represents Fusion alert rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param alert_rule_template_name: The Name of the alert rule template used to create this rule.
    :type alert_rule_template_name: str
    :ivar description: The description of the alert rule.
    :vartype description: str
    :ivar display_name: The display name for alerts created by this alert rule.
    :vartype display_name: str
    :param enabled: Determines whether this alert rule is enabled or disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: ~datetime.datetime
    :ivar severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :vartype severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :ivar tactics: The tactics of the alert rule.
    :vartype tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'kind': {'required': True},
        'description': {'readonly': True},
        'display_name': {'readonly': True},
        'last_modified_utc': {'readonly': True},
        'severity': {'readonly': True},
        'tactics': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        alert_rule_template_name: Optional[str] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        super(FusionAlertRule, self).__init__(kind=kind, **kwargs)
        self.alert_rule_template_name = alert_rule_template_name
        self.description = None
        self.display_name = None
        self.enabled = enabled
        self.last_modified_utc = None
        self.severity = None
        self.tactics = None


class FusionAlertRuleTemplate(AlertRuleTemplate):
    """Represents Fusion alert rule template.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param alert_rules_created_by_template_count: the number of alert rules that were created by
     this template.
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been added.
    :vartype created_date_utc: ~datetime.datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this template.
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include: "Installed",
     "Available", "NotAvailable".
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param tactics: The tactics of the alert rule template.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'kind': {'required': True},
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        alert_rules_created_by_template_count: Optional[int] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        required_data_connectors: Optional[List["AlertRuleTemplateDataSource"]] = None,
        status: Optional[Union[str, "TemplateStatus"]] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(FusionAlertRuleTemplate, self).__init__(kind=kind, **kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.severity = severity
        self.tactics = tactics


class FusionAlertRuleTemplateProperties(AlertRuleTemplatePropertiesBase):
    """Fusion alert rule template properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param alert_rules_created_by_template_count: the number of alert rules that were created by
     this template.
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been added.
    :vartype created_date_utc: ~datetime.datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this template.
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include: "Installed",
     "Available", "NotAvailable".
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param severity: Required. The severity for alerts created by this alert rule. Possible values
     include: "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param tactics: The tactics of the alert rule template.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'created_date_utc': {'readonly': True},
        'severity': {'required': True},
    }

    _attribute_map = {
        'alert_rules_created_by_template_count': {'key': 'alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'status', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'tactics': {'key': 'tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        severity: Union[str, "AlertSeverity"],
        alert_rules_created_by_template_count: Optional[int] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        required_data_connectors: Optional[List["AlertRuleTemplateDataSource"]] = None,
        status: Optional[Union[str, "TemplateStatus"]] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(FusionAlertRuleTemplateProperties, self).__init__(alert_rules_created_by_template_count=alert_rules_created_by_template_count, description=description, display_name=display_name, required_data_connectors=required_data_connectors, status=status, **kwargs)
        self.severity = severity
        self.tactics = tactics


class IncidentInfo(msrest.serialization.Model):
    """Describes related incident information for the bookmark.

    All required parameters must be populated in order to send to Azure.

    :param incident_id: Required. Incident Id.
    :type incident_id: str
    :param severity: Required. The severity of the incident. Possible values include: "Critical",
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.IncidentSeverity
    :param title: Required. The title of the incident.
    :type title: str
    :param relation_name: Required. Relation Name.
    :type relation_name: str
    """

    _validation = {
        'incident_id': {'required': True},
        'severity': {'required': True},
        'title': {'required': True},
        'relation_name': {'required': True},
    }

    _attribute_map = {
        'incident_id': {'key': 'incidentId', 'type': 'str'},
        'severity': {'key': 'severity', 'type': 'str'},
        'title': {'key': 'title', 'type': 'str'},
        'relation_name': {'key': 'relationName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        incident_id: str,
        severity: Union[str, "IncidentSeverity"],
        title: str,
        relation_name: str,
        **kwargs
    ):
        super(IncidentInfo, self).__init__(**kwargs)
        self.incident_id = incident_id
        self.severity = severity
        self.title = title
        self.relation_name = relation_name


class McasDataConnector(DataConnector):
    """Represents MCAS (Microsoft Cloud App Security) data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.McasDataConnectorDataTypes
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'McasDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["McasDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(McasDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class McasDataConnectorDataTypes(AlertsDataTypeOfDataConnector):
    """The available data types for MCAS (Microsoft Cloud App Security) data connector.

    :param alerts: Alerts data type connection.
    :type alerts: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnectorAlerts
    :param discovery_logs: Discovery log data type connection.
    :type discovery_logs:
     ~azure.mgmt.securityinsight.models.McasDataConnectorDataTypesDiscoveryLogs
    """

    _attribute_map = {
        'alerts': {'key': 'alerts', 'type': 'AlertsDataTypeOfDataConnectorAlerts'},
        'discovery_logs': {'key': 'discoveryLogs', 'type': 'McasDataConnectorDataTypesDiscoveryLogs'},
    }

    def __init__(
        self,
        *,
        alerts: Optional["AlertsDataTypeOfDataConnectorAlerts"] = None,
        discovery_logs: Optional["McasDataConnectorDataTypesDiscoveryLogs"] = None,
        **kwargs
    ):
        super(McasDataConnectorDataTypes, self).__init__(alerts=alerts, **kwargs)
        self.discovery_logs = discovery_logs


class McasDataConnectorDataTypesDiscoveryLogs(DataConnectorDataTypeCommon):
    """Discovery log data type connection.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(McasDataConnectorDataTypesDiscoveryLogs, self).__init__(state=state, **kwargs)


class McasDataConnectorProperties(DataConnectorTenantId):
    """MCAS (Microsoft Cloud App Security) data connector properties.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.McasDataConnectorDataTypes
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': 'McasDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        data_types: Optional["McasDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(McasDataConnectorProperties, self).__init__(tenant_id=tenant_id, **kwargs)
        self.data_types = data_types


class MdatpDataConnector(DataConnector):
    """Represents MDATP (Microsoft Defender Advanced Threat Protection) data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(MdatpDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class MdatpDataConnectorProperties(DataConnectorWithAlertsProperties):
    """MDATP (Microsoft Defender Advanced Threat Protection) data connector properties.

    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.AlertsDataTypeOfDataConnector
    """

    _attribute_map = {
        'data_types': {'key': 'dataTypes', 'type': 'AlertsDataTypeOfDataConnector'},
    }

    def __init__(
        self,
        *,
        data_types: Optional["AlertsDataTypeOfDataConnector"] = None,
        **kwargs
    ):
        super(MdatpDataConnectorProperties, self).__init__(data_types=data_types, **kwargs)


class MicrosoftSecurityIncidentCreationAlertRule(AlertRule):
    """Represents MicrosoftSecurityIncidentCreation rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param display_names_filter: the alerts' displayNames on which the cases will be generated.
    :type display_names_filter: list[str]
    :param product_filter: The alerts' productName on which the cases will be generated. Possible
     values include: "Microsoft Cloud App Security", "Azure Security Center", "Azure Advanced Threat
     Protection", "Azure Active Directory Identity Protection", "Azure Security Center for IoT".
    :type product_filter: str or ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will be generated.
    :type severities_filter: list[str or ~azure.mgmt.securityinsight.models.AlertSeverity]
    :param alert_rule_template_name: The Name of the alert rule template used to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: The display name for alerts created by this alert rule.
    :type display_name: str
    :param enabled: Determines whether this alert rule is enabled or disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: ~datetime.datetime
    """

    _validation = {
        'kind': {'required': True},
        'last_modified_utc': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        display_names_filter: Optional[List[str]] = None,
        product_filter: Optional[Union[str, "MicrosoftSecurityProductName"]] = None,
        severities_filter: Optional[List[Union[str, "AlertSeverity"]]] = None,
        alert_rule_template_name: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        enabled: Optional[bool] = None,
        **kwargs
    ):
        super(MicrosoftSecurityIncidentCreationAlertRule, self).__init__(kind=kind, **kwargs)
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None


class MicrosoftSecurityIncidentCreationAlertRuleCommonProperties(msrest.serialization.Model):
    """MicrosoftSecurityIncidentCreation rule common property bag.

    All required parameters must be populated in order to send to Azure.

    :param display_names_filter: the alerts' displayNames on which the cases will be generated.
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the cases will be generated.
     Possible values include: "Microsoft Cloud App Security", "Azure Security Center", "Azure
     Advanced Threat Protection", "Azure Active Directory Identity Protection", "Azure Security
     Center for IoT".
    :type product_filter: str or ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will be generated.
    :type severities_filter: list[str or ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'display_names_filter': {'key': 'displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'productFilter', 'type': 'str'},
        'severities_filter': {'key': 'severitiesFilter', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        product_filter: Union[str, "MicrosoftSecurityProductName"],
        display_names_filter: Optional[List[str]] = None,
        severities_filter: Optional[List[Union[str, "AlertSeverity"]]] = None,
        **kwargs
    ):
        super(MicrosoftSecurityIncidentCreationAlertRuleCommonProperties, self).__init__(**kwargs)
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter


class MicrosoftSecurityIncidentCreationAlertRuleProperties(MicrosoftSecurityIncidentCreationAlertRuleCommonProperties):
    """MicrosoftSecurityIncidentCreation rule property bag.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param display_names_filter: the alerts' displayNames on which the cases will be generated.
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the cases will be generated.
     Possible values include: "Microsoft Cloud App Security", "Azure Security Center", "Azure
     Advanced Threat Protection", "Azure Active Directory Identity Protection", "Azure Security
     Center for IoT".
    :type product_filter: str or ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will be generated.
    :type severities_filter: list[str or ~azure.mgmt.securityinsight.models.AlertSeverity]
    :param alert_rule_template_name: The Name of the alert rule template used to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert has been modified.
    :vartype last_modified_utc: ~datetime.datetime
    """

    _validation = {
        'product_filter': {'required': True},
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
    }

    _attribute_map = {
        'display_names_filter': {'key': 'displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'productFilter', 'type': 'str'},
        'severities_filter': {'key': 'severitiesFilter', 'type': '[str]'},
        'alert_rule_template_name': {'key': 'alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'lastModifiedUtc', 'type': 'iso-8601'},
    }

    def __init__(
        self,
        *,
        product_filter: Union[str, "MicrosoftSecurityProductName"],
        display_name: str,
        enabled: bool,
        display_names_filter: Optional[List[str]] = None,
        severities_filter: Optional[List[Union[str, "AlertSeverity"]]] = None,
        alert_rule_template_name: Optional[str] = None,
        description: Optional[str] = None,
        **kwargs
    ):
        super(MicrosoftSecurityIncidentCreationAlertRuleProperties, self).__init__(display_names_filter=display_names_filter, product_filter=product_filter, severities_filter=severities_filter, **kwargs)
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None


class MicrosoftSecurityIncidentCreationAlertRuleTemplate(AlertRuleTemplate):
    """Represents MicrosoftSecurityIncidentCreation rule template.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param alert_rules_created_by_template_count: the number of alert rules that were created by
     this template.
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been added.
    :vartype created_date_utc: ~datetime.datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this template.
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include: "Installed",
     "Available", "NotAvailable".
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param display_names_filter: the alerts' displayNames on which the cases will be generated.
    :type display_names_filter: list[str]
    :param product_filter: The alerts' productName on which the cases will be generated. Possible
     values include: "Microsoft Cloud App Security", "Azure Security Center", "Azure Advanced Threat
     Protection", "Azure Active Directory Identity Protection", "Azure Security Center for IoT".
    :type product_filter: str or ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will be generated.
    :type severities_filter: list[str or ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'kind': {'required': True},
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'display_names_filter': {'key': 'properties.displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'properties.productFilter', 'type': 'str'},
        'severities_filter': {'key': 'properties.severitiesFilter', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        alert_rules_created_by_template_count: Optional[int] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        required_data_connectors: Optional[List["AlertRuleTemplateDataSource"]] = None,
        status: Optional[Union[str, "TemplateStatus"]] = None,
        display_names_filter: Optional[List[str]] = None,
        product_filter: Optional[Union[str, "MicrosoftSecurityProductName"]] = None,
        severities_filter: Optional[List[Union[str, "AlertSeverity"]]] = None,
        **kwargs
    ):
        super(MicrosoftSecurityIncidentCreationAlertRuleTemplate, self).__init__(kind=kind, **kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.display_names_filter = display_names_filter
        self.product_filter = product_filter
        self.severities_filter = severities_filter


class MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties(MicrosoftSecurityIncidentCreationAlertRuleCommonProperties):
    """MicrosoftSecurityIncidentCreation rule template properties.

    All required parameters must be populated in order to send to Azure.

    :param display_names_filter: the alerts' displayNames on which the cases will be generated.
    :type display_names_filter: list[str]
    :param product_filter: Required. The alerts' productName on which the cases will be generated.
     Possible values include: "Microsoft Cloud App Security", "Azure Security Center", "Azure
     Advanced Threat Protection", "Azure Active Directory Identity Protection", "Azure Security
     Center for IoT".
    :type product_filter: str or ~azure.mgmt.securityinsight.models.MicrosoftSecurityProductName
    :param severities_filter: the alerts' severities on which the cases will be generated.
    :type severities_filter: list[str or ~azure.mgmt.securityinsight.models.AlertSeverity]
    """

    _validation = {
        'product_filter': {'required': True},
    }

    _attribute_map = {
        'display_names_filter': {'key': 'displayNamesFilter', 'type': '[str]'},
        'product_filter': {'key': 'productFilter', 'type': 'str'},
        'severities_filter': {'key': 'severitiesFilter', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        product_filter: Union[str, "MicrosoftSecurityProductName"],
        display_names_filter: Optional[List[str]] = None,
        severities_filter: Optional[List[Union[str, "AlertSeverity"]]] = None,
        **kwargs
    ):
        super(MicrosoftSecurityIncidentCreationAlertRuleTemplateProperties, self).__init__(display_names_filter=display_names_filter, product_filter=product_filter, severities_filter=severities_filter, **kwargs)


class OfficeConsent(Resource):
    """Consent for Office365 tenant that already made.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Azure resource Id.
    :vartype id: str
    :ivar name: Azure resource name.
    :vartype name: str
    :ivar type: Azure resource type.
    :vartype type: str
    :param tenant_id: The tenantId of the Office365 with the consent.
    :type tenant_id: str
    :ivar tenant_name: The tenant name of the Office365 with the consent.
    :vartype tenant_name: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'tenant_name': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'tenant_name': {'key': 'properties.tenantName', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        **kwargs
    ):
        super(OfficeConsent, self).__init__(**kwargs)
        self.tenant_id = tenant_id
        self.tenant_name = None


class OfficeConsentList(msrest.serialization.Model):
    """List of all the office365 consents.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar next_link: URL to fetch the next set of office consents.
    :vartype next_link: str
    :param value: Required. Array of the consents.
    :type value: list[~azure.mgmt.securityinsight.models.OfficeConsent]
    """

    _validation = {
        'next_link': {'readonly': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[OfficeConsent]'},
    }

    def __init__(
        self,
        *,
        value: List["OfficeConsent"],
        **kwargs
    ):
        super(OfficeConsentList, self).__init__(**kwargs)
        self.next_link = None
        self.value = value


class OfficeDataConnector(DataConnector):
    """Represents office data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypes
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'OfficeDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["OfficeDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(OfficeDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class OfficeDataConnectorDataTypes(msrest.serialization.Model):
    """The available data types for office data connector.

    :param exchange: Exchange data type connection.
    :type exchange: ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesExchange
    :param share_point: SharePoint data type connection.
    :type share_point: ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypesSharePoint
    """

    _attribute_map = {
        'exchange': {'key': 'exchange', 'type': 'OfficeDataConnectorDataTypesExchange'},
        'share_point': {'key': 'sharePoint', 'type': 'OfficeDataConnectorDataTypesSharePoint'},
    }

    def __init__(
        self,
        *,
        exchange: Optional["OfficeDataConnectorDataTypesExchange"] = None,
        share_point: Optional["OfficeDataConnectorDataTypesSharePoint"] = None,
        **kwargs
    ):
        super(OfficeDataConnectorDataTypes, self).__init__(**kwargs)
        self.exchange = exchange
        self.share_point = share_point


class OfficeDataConnectorDataTypesExchange(DataConnectorDataTypeCommon):
    """Exchange data type connection.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(OfficeDataConnectorDataTypesExchange, self).__init__(state=state, **kwargs)


class OfficeDataConnectorDataTypesSharePoint(DataConnectorDataTypeCommon):
    """SharePoint data type connection.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(OfficeDataConnectorDataTypesSharePoint, self).__init__(state=state, **kwargs)


class OfficeDataConnectorProperties(DataConnectorTenantId):
    """Office data connector properties.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.OfficeDataConnectorDataTypes
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': 'OfficeDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        data_types: Optional["OfficeDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(OfficeDataConnectorProperties, self).__init__(tenant_id=tenant_id, **kwargs)
        self.data_types = data_types


class Operation(msrest.serialization.Model):
    """Operation provided by provider.

    :param display: Properties of the operation.
    :type display: ~azure.mgmt.securityinsight.models.OperationDisplay
    :param name: Name of the operation.
    :type name: str
    """

    _attribute_map = {
        'display': {'key': 'display', 'type': 'OperationDisplay'},
        'name': {'key': 'name', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        display: Optional["OperationDisplay"] = None,
        name: Optional[str] = None,
        **kwargs
    ):
        super(Operation, self).__init__(**kwargs)
        self.display = display
        self.name = name


class OperationDisplay(msrest.serialization.Model):
    """Properties of the operation.

    :param description: Description of the operation.
    :type description: str
    :param operation: Operation name.
    :type operation: str
    :param provider: Provider name.
    :type provider: str
    :param resource: Resource name.
    :type resource: str
    """

    _attribute_map = {
        'description': {'key': 'description', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        description: Optional[str] = None,
        operation: Optional[str] = None,
        provider: Optional[str] = None,
        resource: Optional[str] = None,
        **kwargs
    ):
        super(OperationDisplay, self).__init__(**kwargs)
        self.description = description
        self.operation = operation
        self.provider = provider
        self.resource = resource


class OperationsList(msrest.serialization.Model):
    """Lists the operations available in the SecurityInsights RP.

    All required parameters must be populated in order to send to Azure.

    :param next_link: URL to fetch the next set of operations.
    :type next_link: str
    :param value: Required. Array of operations.
    :type value: list[~azure.mgmt.securityinsight.models.Operation]
    """

    _validation = {
        'value': {'required': True},
    }

    _attribute_map = {
        'next_link': {'key': 'nextLink', 'type': 'str'},
        'value': {'key': 'value', 'type': '[Operation]'},
    }

    def __init__(
        self,
        *,
        value: List["Operation"],
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OperationsList, self).__init__(**kwargs)
        self.next_link = next_link
        self.value = value


class ScheduledAlertRule(AlertRule):
    """Represents scheduled alert rule.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for this alert rule to run.
    :type query_frequency: ~datetime.timedelta
    :param query_period: The period (in ISO 8601 duration format) that this alert rule looks at.
    :type query_period: ~datetime.timedelta
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers alert rule. Possible
     values include: "GreaterThan", "LessThan", "Equal", "NotEqual".
    :type trigger_operator: str or ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param alert_rule_template_name: The Name of the alert rule template used to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: The display name for alerts created by this alert rule.
    :type display_name: str
    :param enabled: Determines whether this alert rule is enabled or disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert rule has been modified.
    :vartype last_modified_utc: ~datetime.datetime
    :param suppression_duration: The suppression (in ISO 8601 duration format) to wait since last
     time this alert rule been triggered.
    :type suppression_duration: ~datetime.timedelta
    :param suppression_enabled: Determines whether the suppression for this alert rule is enabled
     or disabled.
    :type suppression_enabled: bool
    :param tactics: The tactics of the alert rule.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'kind': {'required': True},
        'last_modified_utc': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'str'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'alert_rule_template_name': {'key': 'properties.alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'enabled': {'key': 'properties.enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'properties.lastModifiedUtc', 'type': 'iso-8601'},
        'suppression_duration': {'key': 'properties.suppressionDuration', 'type': 'duration'},
        'suppression_enabled': {'key': 'properties.suppressionEnabled', 'type': 'bool'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        query: Optional[str] = None,
        query_frequency: Optional[datetime.timedelta] = None,
        query_period: Optional[datetime.timedelta] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        trigger_operator: Optional[Union[str, "TriggerOperator"]] = None,
        trigger_threshold: Optional[int] = None,
        alert_rule_template_name: Optional[str] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        enabled: Optional[bool] = None,
        suppression_duration: Optional[datetime.timedelta] = None,
        suppression_enabled: Optional[bool] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(ScheduledAlertRule, self).__init__(kind=kind, **kwargs)
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None
        self.suppression_duration = suppression_duration
        self.suppression_enabled = suppression_enabled
        self.tactics = tactics


class ScheduledAlertRuleCommonProperties(msrest.serialization.Model):
    """Schedule alert rule template property bag.

    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for this alert rule to run.
    :type query_frequency: ~datetime.timedelta
    :param query_period: The period (in ISO 8601 duration format) that this alert rule looks at.
    :type query_period: ~datetime.timedelta
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers alert rule. Possible
     values include: "GreaterThan", "LessThan", "Equal", "NotEqual".
    :type trigger_operator: str or ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_frequency': {'key': 'queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'queryPeriod', 'type': 'duration'},
        'severity': {'key': 'severity', 'type': 'str'},
        'trigger_operator': {'key': 'triggerOperator', 'type': 'str'},
        'trigger_threshold': {'key': 'triggerThreshold', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        query: Optional[str] = None,
        query_frequency: Optional[datetime.timedelta] = None,
        query_period: Optional[datetime.timedelta] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        trigger_operator: Optional[Union[str, "TriggerOperator"]] = None,
        trigger_threshold: Optional[int] = None,
        **kwargs
    ):
        super(ScheduledAlertRuleCommonProperties, self).__init__(**kwargs)
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold


class ScheduledAlertRuleProperties(ScheduledAlertRuleCommonProperties):
    """Scheduled alert rule base property bag.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for this alert rule to run.
    :type query_frequency: ~datetime.timedelta
    :param query_period: The period (in ISO 8601 duration format) that this alert rule looks at.
    :type query_period: ~datetime.timedelta
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers alert rule. Possible
     values include: "GreaterThan", "LessThan", "Equal", "NotEqual".
    :type trigger_operator: str or ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param alert_rule_template_name: The Name of the alert rule template used to create this rule.
    :type alert_rule_template_name: str
    :param description: The description of the alert rule.
    :type description: str
    :param display_name: Required. The display name for alerts created by this alert rule.
    :type display_name: str
    :param enabled: Required. Determines whether this alert rule is enabled or disabled.
    :type enabled: bool
    :ivar last_modified_utc: The last time that this alert rule has been modified.
    :vartype last_modified_utc: ~datetime.datetime
    :param suppression_duration: Required. The suppression (in ISO 8601 duration format) to wait
     since last time this alert rule been triggered.
    :type suppression_duration: ~datetime.timedelta
    :param suppression_enabled: Required. Determines whether the suppression for this alert rule is
     enabled or disabled.
    :type suppression_enabled: bool
    :param tactics: The tactics of the alert rule.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'display_name': {'required': True},
        'enabled': {'required': True},
        'last_modified_utc': {'readonly': True},
        'suppression_duration': {'required': True},
        'suppression_enabled': {'required': True},
    }

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_frequency': {'key': 'queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'queryPeriod', 'type': 'duration'},
        'severity': {'key': 'severity', 'type': 'str'},
        'trigger_operator': {'key': 'triggerOperator', 'type': 'str'},
        'trigger_threshold': {'key': 'triggerThreshold', 'type': 'int'},
        'alert_rule_template_name': {'key': 'alertRuleTemplateName', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'display_name': {'key': 'displayName', 'type': 'str'},
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'last_modified_utc': {'key': 'lastModifiedUtc', 'type': 'iso-8601'},
        'suppression_duration': {'key': 'suppressionDuration', 'type': 'duration'},
        'suppression_enabled': {'key': 'suppressionEnabled', 'type': 'bool'},
        'tactics': {'key': 'tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        display_name: str,
        enabled: bool,
        suppression_duration: datetime.timedelta,
        suppression_enabled: bool,
        query: Optional[str] = None,
        query_frequency: Optional[datetime.timedelta] = None,
        query_period: Optional[datetime.timedelta] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        trigger_operator: Optional[Union[str, "TriggerOperator"]] = None,
        trigger_threshold: Optional[int] = None,
        alert_rule_template_name: Optional[str] = None,
        description: Optional[str] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(ScheduledAlertRuleProperties, self).__init__(query=query, query_frequency=query_frequency, query_period=query_period, severity=severity, trigger_operator=trigger_operator, trigger_threshold=trigger_threshold, **kwargs)
        self.alert_rule_template_name = alert_rule_template_name
        self.description = description
        self.display_name = display_name
        self.enabled = enabled
        self.last_modified_utc = None
        self.suppression_duration = suppression_duration
        self.suppression_enabled = suppression_enabled
        self.tactics = tactics


class ScheduledAlertRuleTemplate(AlertRuleTemplate):
    """Represents scheduled alert rule template.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param kind: Required. The kind of the alert rule. Possible values include: "Scheduled",
     "MicrosoftSecurityIncidentCreation", "Fusion".
    :type kind: str or ~azure.mgmt.securityinsight.models.AlertRuleKindEnum
    :param alert_rules_created_by_template_count: the number of alert rules that were created by
     this template.
    :type alert_rules_created_by_template_count: int
    :ivar created_date_utc: The time that this alert rule template has been added.
    :vartype created_date_utc: ~datetime.datetime
    :param description: The description of the alert rule template.
    :type description: str
    :param display_name: The display name for alert rule template.
    :type display_name: str
    :param required_data_connectors: The required data connectors for this template.
    :type required_data_connectors:
     list[~azure.mgmt.securityinsight.models.AlertRuleTemplateDataSource]
    :param status: The alert rule template status. Possible values include: "Installed",
     "Available", "NotAvailable".
    :type status: str or ~azure.mgmt.securityinsight.models.TemplateStatus
    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for this alert rule to run.
    :type query_frequency: ~datetime.timedelta
    :param query_period: The period (in ISO 8601 duration format) that this alert rule looks at.
    :type query_period: ~datetime.timedelta
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers alert rule. Possible
     values include: "GreaterThan", "LessThan", "Equal", "NotEqual".
    :type trigger_operator: str or ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param tactics: The tactics of the alert rule template.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _validation = {
        'kind': {'required': True},
        'created_date_utc': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'alert_rules_created_by_template_count': {'key': 'properties.alertRulesCreatedByTemplateCount', 'type': 'int'},
        'created_date_utc': {'key': 'properties.createdDateUTC', 'type': 'iso-8601'},
        'description': {'key': 'properties.description', 'type': 'str'},
        'display_name': {'key': 'properties.displayName', 'type': 'str'},
        'required_data_connectors': {'key': 'properties.requiredDataConnectors', 'type': '[AlertRuleTemplateDataSource]'},
        'status': {'key': 'properties.status', 'type': 'str'},
        'query': {'key': 'properties.query', 'type': 'str'},
        'query_frequency': {'key': 'properties.queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'properties.queryPeriod', 'type': 'duration'},
        'severity': {'key': 'properties.severity', 'type': 'str'},
        'trigger_operator': {'key': 'properties.triggerOperator', 'type': 'str'},
        'trigger_threshold': {'key': 'properties.triggerThreshold', 'type': 'int'},
        'tactics': {'key': 'properties.tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        kind: Union[str, "AlertRuleKindEnum"],
        alert_rules_created_by_template_count: Optional[int] = None,
        description: Optional[str] = None,
        display_name: Optional[str] = None,
        required_data_connectors: Optional[List["AlertRuleTemplateDataSource"]] = None,
        status: Optional[Union[str, "TemplateStatus"]] = None,
        query: Optional[str] = None,
        query_frequency: Optional[datetime.timedelta] = None,
        query_period: Optional[datetime.timedelta] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        trigger_operator: Optional[Union[str, "TriggerOperator"]] = None,
        trigger_threshold: Optional[int] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(ScheduledAlertRuleTemplate, self).__init__(kind=kind, **kwargs)
        self.alert_rules_created_by_template_count = alert_rules_created_by_template_count
        self.created_date_utc = None
        self.description = description
        self.display_name = display_name
        self.required_data_connectors = required_data_connectors
        self.status = status
        self.query = query
        self.query_frequency = query_frequency
        self.query_period = query_period
        self.severity = severity
        self.trigger_operator = trigger_operator
        self.trigger_threshold = trigger_threshold
        self.tactics = tactics


class ScheduledAlertRuleTemplateProperties(ScheduledAlertRuleCommonProperties):
    """Scheduled alert rule template properties.

    :param query: The query that creates alerts for this rule.
    :type query: str
    :param query_frequency: The frequency (in ISO 8601 duration format) for this alert rule to run.
    :type query_frequency: ~datetime.timedelta
    :param query_period: The period (in ISO 8601 duration format) that this alert rule looks at.
    :type query_period: ~datetime.timedelta
    :param severity: The severity for alerts created by this alert rule. Possible values include:
     "High", "Medium", "Low", "Informational".
    :type severity: str or ~azure.mgmt.securityinsight.models.AlertSeverity
    :param trigger_operator: The operation against the threshold that triggers alert rule. Possible
     values include: "GreaterThan", "LessThan", "Equal", "NotEqual".
    :type trigger_operator: str or ~azure.mgmt.securityinsight.models.TriggerOperator
    :param trigger_threshold: The threshold triggers this alert rule.
    :type trigger_threshold: int
    :param tactics: The tactics of the alert rule template.
    :type tactics: list[str or ~azure.mgmt.securityinsight.models.AttackTactic]
    """

    _attribute_map = {
        'query': {'key': 'query', 'type': 'str'},
        'query_frequency': {'key': 'queryFrequency', 'type': 'duration'},
        'query_period': {'key': 'queryPeriod', 'type': 'duration'},
        'severity': {'key': 'severity', 'type': 'str'},
        'trigger_operator': {'key': 'triggerOperator', 'type': 'str'},
        'trigger_threshold': {'key': 'triggerThreshold', 'type': 'int'},
        'tactics': {'key': 'tactics', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        query: Optional[str] = None,
        query_frequency: Optional[datetime.timedelta] = None,
        query_period: Optional[datetime.timedelta] = None,
        severity: Optional[Union[str, "AlertSeverity"]] = None,
        trigger_operator: Optional[Union[str, "TriggerOperator"]] = None,
        trigger_threshold: Optional[int] = None,
        tactics: Optional[List[Union[str, "AttackTactic"]]] = None,
        **kwargs
    ):
        super(ScheduledAlertRuleTemplateProperties, self).__init__(query=query, query_frequency=query_frequency, query_period=query_period, severity=severity, trigger_operator=trigger_operator, trigger_threshold=trigger_threshold, **kwargs)
        self.tactics = tactics


class SettingsKind(msrest.serialization.Model):
    """Describes an Azure resource with kind.

    :param kind: The kind of the setting. Possible values include: "UebaSettings",
     "ToggleSettings".
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "SettingKind"]] = None,
        **kwargs
    ):
        super(SettingsKind, self).__init__(**kwargs)
        self.kind = kind


class Settings(SettingsKind):
    """The Setting.

    :param kind: The kind of the setting. Possible values include: "UebaSettings",
     "ToggleSettings".
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "SettingKind"]] = None,
        **kwargs
    ):
        super(Settings, self).__init__(kind=kind, **kwargs)


class ThreatIntelligence(msrest.serialization.Model):
    """ThreatIntelligence property bag.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar confidence: Confidence (must be between 0 and 1).
    :vartype confidence: float
    :ivar provider_name: Name of the provider from whom this Threat Intelligence information was
     received.
    :vartype provider_name: str
    :ivar report_link: Report link.
    :vartype report_link: str
    :ivar threat_description: Threat description (free text).
    :vartype threat_description: str
    :ivar threat_name: Threat name (e.g. "Jedobot malware").
    :vartype threat_name: str
    :ivar threat_type: Threat type (e.g. "Botnet").
    :vartype threat_type: str
    """

    _validation = {
        'confidence': {'readonly': True},
        'provider_name': {'readonly': True},
        'report_link': {'readonly': True},
        'threat_description': {'readonly': True},
        'threat_name': {'readonly': True},
        'threat_type': {'readonly': True},
    }

    _attribute_map = {
        'confidence': {'key': 'confidence', 'type': 'float'},
        'provider_name': {'key': 'providerName', 'type': 'str'},
        'report_link': {'key': 'reportLink', 'type': 'str'},
        'threat_description': {'key': 'threatDescription', 'type': 'str'},
        'threat_name': {'key': 'threatName', 'type': 'str'},
        'threat_type': {'key': 'threatType', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ThreatIntelligence, self).__init__(**kwargs)
        self.confidence = None
        self.provider_name = None
        self.report_link = None
        self.threat_description = None
        self.threat_name = None
        self.threat_type = None


class TiDataConnector(DataConnector):
    """Represents threat intelligence data connector.

    :param kind: The kind of the data connector. Possible values include: "AzureActiveDirectory",
     "AzureSecurityCenter", "MicrosoftCloudAppSecurity", "ThreatIntelligence", "Office365",
     "AmazonWebServicesCloudTrail", "AzureAdvancedThreatProtection",
     "MicrosoftDefenderAdvancedThreatProtection".
    :type kind: str or ~azure.mgmt.securityinsight.models.DataConnectorKindEnum
    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.TiDataConnectorDataTypes
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'tenant_id': {'key': 'properties.tenantId', 'type': 'str'},
        'data_types': {'key': 'properties.dataTypes', 'type': 'TiDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "DataConnectorKindEnum"]] = None,
        tenant_id: Optional[str] = None,
        data_types: Optional["TiDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(TiDataConnector, self).__init__(kind=kind, **kwargs)
        self.tenant_id = tenant_id
        self.data_types = data_types


class TiDataConnectorDataTypes(msrest.serialization.Model):
    """The available data types for TI (Threat Intelligence) data connector.

    :param indicators: Data type for indicators connection.
    :type indicators: ~azure.mgmt.securityinsight.models.TiDataConnectorDataTypesIndicators
    """

    _attribute_map = {
        'indicators': {'key': 'indicators', 'type': 'TiDataConnectorDataTypesIndicators'},
    }

    def __init__(
        self,
        *,
        indicators: Optional["TiDataConnectorDataTypesIndicators"] = None,
        **kwargs
    ):
        super(TiDataConnectorDataTypes, self).__init__(**kwargs)
        self.indicators = indicators


class TiDataConnectorDataTypesIndicators(DataConnectorDataTypeCommon):
    """Data type for indicators connection.

    :param state: Describe whether this data type connection is enabled or not. Possible values
     include: "Enabled", "Disabled".
    :type state: str or ~azure.mgmt.securityinsight.models.DataTypeState
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "DataTypeState"]] = None,
        **kwargs
    ):
        super(TiDataConnectorDataTypesIndicators, self).__init__(state=state, **kwargs)


class TiDataConnectorProperties(DataConnectorTenantId):
    """TI (Threat Intelligence) data connector properties.

    :param tenant_id: The tenant id to connect to, and get the data from.
    :type tenant_id: str
    :param data_types: The available data types for the connector.
    :type data_types: ~azure.mgmt.securityinsight.models.TiDataConnectorDataTypes
    """

    _attribute_map = {
        'tenant_id': {'key': 'tenantId', 'type': 'str'},
        'data_types': {'key': 'dataTypes', 'type': 'TiDataConnectorDataTypes'},
    }

    def __init__(
        self,
        *,
        tenant_id: Optional[str] = None,
        data_types: Optional["TiDataConnectorDataTypes"] = None,
        **kwargs
    ):
        super(TiDataConnectorProperties, self).__init__(tenant_id=tenant_id, **kwargs)
        self.data_types = data_types


class ToggleSettings(Settings):
    """Settings with single toggle.

    :param kind: The kind of the setting. Possible values include: "UebaSettings",
     "ToggleSettings".
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    :param is_enabled: Determines whether the setting is enable or disabled.
    :type is_enabled: bool
    """

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "SettingKind"]] = None,
        is_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(ToggleSettings, self).__init__(kind=kind, **kwargs)
        self.is_enabled = is_enabled


class UebaSettings(Settings):
    """Represents settings for User and Entity Behavior Analytics enablement.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param kind: The kind of the setting. Possible values include: "UebaSettings",
     "ToggleSettings".
    :type kind: str or ~azure.mgmt.securityinsight.models.SettingKind
    :ivar atp_license_status: Determines whether the tenant has ATP (Advanced Threat Protection)
     license. Possible values include: "Enabled", "Disabled".
    :vartype atp_license_status: str or ~azure.mgmt.securityinsight.models.LicenseStatus
    :param is_enabled: Determines whether User and Entity Behavior Analytics is enabled for this
     workspace.
    :type is_enabled: bool
    :ivar status_in_mcas: Determines whether User and Entity Behavior Analytics is enabled from
     MCAS (Microsoft Cloud App Security). Possible values include: "Enabled", "Disabled".
    :vartype status_in_mcas: str or ~azure.mgmt.securityinsight.models.StatusInMcas
    """

    _validation = {
        'atp_license_status': {'readonly': True},
        'status_in_mcas': {'readonly': True},
    }

    _attribute_map = {
        'kind': {'key': 'kind', 'type': 'str'},
        'atp_license_status': {'key': 'properties.atpLicenseStatus', 'type': 'str'},
        'is_enabled': {'key': 'properties.isEnabled', 'type': 'bool'},
        'status_in_mcas': {'key': 'properties.statusInMcas', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        kind: Optional[Union[str, "SettingKind"]] = None,
        is_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(UebaSettings, self).__init__(kind=kind, **kwargs)
        self.atp_license_status = None
        self.is_enabled = is_enabled
        self.status_in_mcas = None


class UserInfo(msrest.serialization.Model):
    """User information that made some action.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar email: The email of the user.
    :vartype email: str
    :ivar name: The name of the user.
    :vartype name: str
    :param object_id: Required. The object id of the user.
    :type object_id: str
    """

    _validation = {
        'email': {'readonly': True},
        'name': {'readonly': True},
        'object_id': {'required': True},
    }

    _attribute_map = {
        'email': {'key': 'email', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'object_id': {'key': 'objectId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        object_id: str,
        **kwargs
    ):
        super(UserInfo, self).__init__(**kwargs)
        self.email = None
        self.name = None
        self.object_id = object_id
