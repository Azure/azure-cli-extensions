# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel data-connector connect",
    is_experimental=True,
)
class Connect(AAZCommand):
    """Connect a data connector.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/dataconnectors/{}/connect", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.data_connector_id = AAZStrArg(
            options=["--data-connector-id"],
            help="Connector ID",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
        )

        # define Arg Group "ConnectBody"

        _args_schema = cls._args_schema
        _args_schema.api_key = AAZStrArg(
            options=["--api-key"],
            arg_group="ConnectBody",
            help="The API key of the audit server.",
        )
        _args_schema.authorization_code = AAZStrArg(
            options=["--authorization-code"],
            arg_group="ConnectBody",
            help="The authorization code used in OAuth 2.0 code flow to issue a token.",
        )
        _args_schema.client_id = AAZStrArg(
            options=["--client-id"],
            arg_group="ConnectBody",
            help="The client id of the OAuth 2.0 application.",
        )
        _args_schema.client_secret = AAZStrArg(
            options=["--client-secret"],
            arg_group="ConnectBody",
            help="The client secret of the OAuth 2.0 application.",
        )
        _args_schema.endpoint = AAZStrArg(
            options=["--endpoint"],
            arg_group="ConnectBody",
            help="Used in v2 logs connector. Represents the data collection ingestion endpoint in log analytics.",
        )
        _args_schema.rule_immutable_id = AAZStrArg(
            options=["--rule-immutable-id"],
            arg_group="ConnectBody",
            help="Used in v2 logs connector. The data collection rule immutable id, the rule defines the transformation and data destination.",
        )
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            arg_group="ConnectBody",
            help="The authentication kind used to poll the data",
            enum={"APIKey": "APIKey", "Basic": "Basic", "OAuth2": "OAuth2"},
        )
        _args_schema.output_stream = AAZStrArg(
            options=["--output-stream"],
            arg_group="ConnectBody",
            help="Used in v2 logs connector. The stream we are sending the data to, this is the name of the streamDeclarations defined in the DCR.",
        )
        _args_schema.password = AAZStrArg(
            options=["--password"],
            arg_group="ConnectBody",
            help="The user password in the audit log server.",
        )
        _args_schema.user_name = AAZStrArg(
            options=["--user-name"],
            arg_group="ConnectBody",
            help="The user name in the audit log server.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.DataConnectorsConnect(ctx=self.ctx)()

    class DataConnectorsConnect(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/dataConnectors/{dataConnectorId}/connect",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "dataConnectorId", self.ctx.args.data_connector_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("apiKey", AAZStrType, ".api_key")
            _builder.set_prop("authorizationCode", AAZStrType, ".authorization_code")
            _builder.set_prop("clientId", AAZStrType, ".client_id")
            _builder.set_prop("clientSecret", AAZStrType, ".client_secret")
            _builder.set_prop("dataCollectionEndpoint", AAZStrType, ".endpoint")
            _builder.set_prop("dataCollectionRuleImmutableId", AAZStrType, ".rule_immutable_id")
            _builder.set_prop("kind", AAZStrType, ".kind")
            _builder.set_prop("outputStream", AAZStrType, ".output_stream")
            _builder.set_prop("password", AAZStrType, ".password")
            _builder.set_prop("userName", AAZStrType, ".user_name")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            pass


__all__ = ["Connect"]
