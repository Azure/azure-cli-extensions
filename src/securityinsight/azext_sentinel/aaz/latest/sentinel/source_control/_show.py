# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel source-control show",
    is_experimental=True,
)
class Show(AAZCommand):
    """Get a source control by its identifier.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/sourcecontrols/{}", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.source_control_id = AAZStrArg(
            options=["-n", "--name", "--source-control-id"],
            help="Source control Id",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.SourceControlsGet(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SourceControlsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/sourcecontrols/{sourceControlId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sourceControlId", self.ctx.args.source_control_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.content_types = AAZListType(
                serialized_name="contentTypes",
                flags={"required": True},
            )
            properties.description = AAZStrType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            properties.id = AAZStrType()
            properties.last_deployment_info = AAZObjectType(
                serialized_name="lastDeploymentInfo",
            )
            properties.repo_type = AAZStrType(
                serialized_name="repoType",
                flags={"required": True},
            )
            properties.repository = AAZObjectType(
                flags={"required": True},
            )
            properties.repository_resource_info = AAZObjectType(
                serialized_name="repositoryResourceInfo",
            )
            properties.version = AAZStrType()

            content_types = cls._schema_on_200.properties.content_types
            content_types.Element = AAZStrType()

            last_deployment_info = cls._schema_on_200.properties.last_deployment_info
            last_deployment_info.deployment = AAZObjectType()
            last_deployment_info.deployment_fetch_status = AAZStrType(
                serialized_name="deploymentFetchStatus",
            )
            last_deployment_info.message = AAZStrType()

            deployment = cls._schema_on_200.properties.last_deployment_info.deployment
            deployment.deployment_id = AAZStrType(
                serialized_name="deploymentId",
            )
            deployment.deployment_logs_url = AAZStrType(
                serialized_name="deploymentLogsUrl",
            )
            deployment.deployment_result = AAZStrType(
                serialized_name="deploymentResult",
            )
            deployment.deployment_state = AAZStrType(
                serialized_name="deploymentState",
            )
            deployment.deployment_time = AAZStrType(
                serialized_name="deploymentTime",
            )

            repository = cls._schema_on_200.properties.repository
            repository.branch = AAZStrType()
            repository.deployment_logs_url = AAZStrType(
                serialized_name="deploymentLogsUrl",
            )
            repository.display_url = AAZStrType(
                serialized_name="displayUrl",
            )
            repository.path_mapping = AAZListType(
                serialized_name="pathMapping",
            )
            repository.url = AAZStrType()

            path_mapping = cls._schema_on_200.properties.repository.path_mapping
            path_mapping.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.repository.path_mapping.Element
            _element.content_type = AAZStrType(
                serialized_name="contentType",
            )
            _element.path = AAZStrType()

            repository_resource_info = cls._schema_on_200.properties.repository_resource_info
            repository_resource_info.azure_dev_ops_resource_info = AAZObjectType(
                serialized_name="azureDevOpsResourceInfo",
            )
            repository_resource_info.git_hub_resource_info = AAZObjectType(
                serialized_name="gitHubResourceInfo",
            )
            repository_resource_info.webhook = AAZObjectType()

            azure_dev_ops_resource_info = cls._schema_on_200.properties.repository_resource_info.azure_dev_ops_resource_info
            azure_dev_ops_resource_info.pipeline_id = AAZStrType(
                serialized_name="pipelineId",
            )
            azure_dev_ops_resource_info.service_connection_id = AAZStrType(
                serialized_name="serviceConnectionId",
            )

            git_hub_resource_info = cls._schema_on_200.properties.repository_resource_info.git_hub_resource_info
            git_hub_resource_info.app_installation_id = AAZStrType(
                serialized_name="appInstallationId",
            )

            webhook = cls._schema_on_200.properties.repository_resource_info.webhook
            webhook.rotate_webhook_secret = AAZBoolType(
                serialized_name="rotateWebhookSecret",
            )
            webhook.webhook_id = AAZStrType(
                serialized_name="webhookId",
            )
            webhook.webhook_secret_update_time = AAZStrType(
                serialized_name="webhookSecretUpdateTime",
            )
            webhook.webhook_url = AAZStrType(
                serialized_name="webhookUrl",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            return cls._schema_on_200


__all__ = ["Show"]
