# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel bookmark create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Create the bookmark.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/bookmarks/{}", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.bookmark_id = AAZStrArg(
            options=["-n", "--name", "--bookmark-id"],
            help="ID of bookmark.",
            required=True,
            is_experimental=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
            id_part="name",
        )

        # define Arg Group "Bookmark"

        _args_schema = cls._args_schema
        _args_schema.etag = AAZStrArg(
            options=["--etag"],
            arg_group="Bookmark",
            help="Etag of the azure resource",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.created = AAZStrArg(
            options=["--created"],
            arg_group="Properties",
            help="The time the bookmark was created",
        )
        _args_schema.created_by = AAZObjectArg(
            options=["--created-by"],
            arg_group="Properties",
            help="Describes a user that created the bookmark",
        )
        cls._build_args_user_info_create(_args_schema.created_by)
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The display name of the bookmark",
        )
        _args_schema.entity_mappings = AAZListArg(
            options=["--entity-mappings"],
            arg_group="Properties",
            help="Describes the entity mappings of the bookmark",
        )
        _args_schema.event_time = AAZStrArg(
            options=["--event-time"],
            arg_group="Properties",
            help="The bookmark event time",
        )
        _args_schema.incident_info = AAZObjectArg(
            options=["--incident-info"],
            arg_group="Properties",
            help="Describes an incident that relates to bookmark",
        )
        _args_schema.labels = AAZListArg(
            options=["--labels"],
            arg_group="Properties",
            help="List of labels relevant to this bookmark",
        )
        _args_schema.notes = AAZStrArg(
            options=["--notes"],
            arg_group="Properties",
            help="The notes of the bookmark",
        )
        _args_schema.query_content = AAZStrArg(
            options=["--query-content"],
            arg_group="Properties",
            help="The query of the bookmark.",
            is_experimental=True,
        )
        _args_schema.query_end_time = AAZStrArg(
            options=["--query-end-time"],
            arg_group="Properties",
            help="The end time for the query",
        )
        _args_schema.query_result = AAZStrArg(
            options=["--query-result"],
            arg_group="Properties",
            help="The query result of the bookmark.",
        )
        _args_schema.query_start_time = AAZStrArg(
            options=["--query-start-time"],
            arg_group="Properties",
            help="The start time for the query",
        )
        _args_schema.tactics = AAZListArg(
            options=["--tactics"],
            arg_group="Properties",
            help="A list of relevant mitre attacks",
        )
        _args_schema.techniques = AAZListArg(
            options=["--techniques"],
            arg_group="Properties",
            help="A list of relevant mitre techniques",
        )
        _args_schema.updated = AAZStrArg(
            options=["--updated"],
            arg_group="Properties",
            help="The last time the bookmark was updated",
        )
        _args_schema.updated_by = AAZObjectArg(
            options=["--updated-by"],
            arg_group="Properties",
            help="Describes a user that updated the bookmark",
        )
        cls._build_args_user_info_create(_args_schema.updated_by)

        entity_mappings = cls._args_schema.entity_mappings
        entity_mappings.Element = AAZObjectArg()

        _element = cls._args_schema.entity_mappings.Element
        _element.entity_type = AAZStrArg(
            options=["entity-type"],
            help="The entity type",
        )
        _element.field_mappings = AAZListArg(
            options=["field-mappings"],
            help="Array of fields mapping for that entity type",
        )

        field_mappings = cls._args_schema.entity_mappings.Element.field_mappings
        field_mappings.Element = AAZObjectArg()

        _element = cls._args_schema.entity_mappings.Element.field_mappings.Element
        _element.identifier = AAZStrArg(
            options=["identifier"],
            help="Alert V3 identifier",
        )
        _element.value = AAZStrArg(
            options=["value"],
            help="The value of the identifier",
        )

        incident_info = cls._args_schema.incident_info
        incident_info.incident_id = AAZStrArg(
            options=["incident-id"],
            help="Incident Id",
        )
        incident_info.relation_name = AAZStrArg(
            options=["relation-name"],
            help="Relation Name",
        )
        incident_info.severity = AAZStrArg(
            options=["severity"],
            help="The severity of the incident",
            enum={"High": "High", "Informational": "Informational", "Low": "Low", "Medium": "Medium"},
        )
        incident_info.title = AAZStrArg(
            options=["title"],
            help="The title of the incident",
        )

        labels = cls._args_schema.labels
        labels.Element = AAZStrArg()

        tactics = cls._args_schema.tactics
        tactics.Element = AAZStrArg(
            enum={"Collection": "Collection", "CommandAndControl": "CommandAndControl", "CredentialAccess": "CredentialAccess", "DefenseEvasion": "DefenseEvasion", "Discovery": "Discovery", "Execution": "Execution", "Exfiltration": "Exfiltration", "Impact": "Impact", "ImpairProcessControl": "ImpairProcessControl", "InhibitResponseFunction": "InhibitResponseFunction", "InitialAccess": "InitialAccess", "LateralMovement": "LateralMovement", "Persistence": "Persistence", "PreAttack": "PreAttack", "PrivilegeEscalation": "PrivilegeEscalation", "Reconnaissance": "Reconnaissance", "ResourceDevelopment": "ResourceDevelopment"},
        )

        techniques = cls._args_schema.techniques
        techniques.Element = AAZStrArg()
        return cls._args_schema

    _args_user_info_create = None

    @classmethod
    def _build_args_user_info_create(cls, _schema):
        if cls._args_user_info_create is not None:
            _schema.object_id = cls._args_user_info_create.object_id
            return

        cls._args_user_info_create = AAZObjectArg()

        user_info_create = cls._args_user_info_create
        user_info_create.object_id = AAZStrArg(
            options=["object-id"],
            help="The object id of the user.",
            nullable=True,
        )

        _schema.object_id = cls._args_user_info_create.object_id

    def _execute_operations(self):
        self.BookmarksCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class BookmarksCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/bookmarks/{bookmarkId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "bookmarkId", self.ctx.args.bookmark_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("etag", AAZStrType, ".etag")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("created", AAZStrType, ".created")
                _build_schema_user_info_create(properties.set_prop("createdBy", AAZObjectType, ".created_by"))
                properties.set_prop("displayName", AAZStrType, ".display_name", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("entityMappings", AAZListType, ".entity_mappings")
                properties.set_prop("eventTime", AAZStrType, ".event_time")
                properties.set_prop("incidentInfo", AAZObjectType, ".incident_info")
                properties.set_prop("labels", AAZListType, ".labels")
                properties.set_prop("notes", AAZStrType, ".notes")
                properties.set_prop("query", AAZStrType, ".query_content", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("queryEndTime", AAZStrType, ".query_end_time")
                properties.set_prop("queryResult", AAZStrType, ".query_result")
                properties.set_prop("queryStartTime", AAZStrType, ".query_start_time")
                properties.set_prop("tactics", AAZListType, ".tactics")
                properties.set_prop("techniques", AAZListType, ".techniques")
                properties.set_prop("updated", AAZStrType, ".updated")
                _build_schema_user_info_create(properties.set_prop("updatedBy", AAZObjectType, ".updated_by"))

            entity_mappings = _builder.get(".properties.entityMappings")
            if entity_mappings is not None:
                entity_mappings.set_elements(AAZObjectType)

            _elements = _builder.get(".properties.entityMappings[]")
            if _elements is not None:
                _elements.set_prop("entityType", AAZStrType, ".entity_type")
                _elements.set_prop("fieldMappings", AAZListType, ".field_mappings")

            field_mappings = _builder.get(".properties.entityMappings[].fieldMappings")
            if field_mappings is not None:
                field_mappings.set_elements(AAZObjectType)

            _elements = _builder.get(".properties.entityMappings[].fieldMappings[]")
            if _elements is not None:
                _elements.set_prop("identifier", AAZStrType, ".identifier")
                _elements.set_prop("value", AAZStrType, ".value")

            incident_info = _builder.get(".properties.incidentInfo")
            if incident_info is not None:
                incident_info.set_prop("incidentId", AAZStrType, ".incident_id")
                incident_info.set_prop("relationName", AAZStrType, ".relation_name")
                incident_info.set_prop("severity", AAZStrType, ".severity")
                incident_info.set_prop("title", AAZStrType, ".title")

            labels = _builder.get(".properties.labels")
            if labels is not None:
                labels.set_elements(AAZStrType, ".")

            tactics = _builder.get(".properties.tactics")
            if tactics is not None:
                tactics.set_elements(AAZStrType, ".")

            techniques = _builder.get(".properties.techniques")
            if techniques is not None:
                techniques.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType()
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.created = AAZStrType()
            properties.created_by = AAZObjectType(
                serialized_name="createdBy",
            )
            _build_schema_user_info_read(properties.created_by)
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            properties.entity_mappings = AAZListType(
                serialized_name="entityMappings",
            )
            properties.event_time = AAZStrType(
                serialized_name="eventTime",
            )
            properties.incident_info = AAZObjectType(
                serialized_name="incidentInfo",
            )
            properties.labels = AAZListType()
            properties.notes = AAZStrType()
            properties.query = AAZStrType(
                flags={"required": True},
            )
            properties.query_end_time = AAZStrType(
                serialized_name="queryEndTime",
            )
            properties.query_result = AAZStrType(
                serialized_name="queryResult",
            )
            properties.query_start_time = AAZStrType(
                serialized_name="queryStartTime",
            )
            properties.tactics = AAZListType()
            properties.techniques = AAZListType()
            properties.updated = AAZStrType()
            properties.updated_by = AAZObjectType(
                serialized_name="updatedBy",
            )
            _build_schema_user_info_read(properties.updated_by)

            entity_mappings = cls._schema_on_200_201.properties.entity_mappings
            entity_mappings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.entity_mappings.Element
            _element.entity_type = AAZStrType(
                serialized_name="entityType",
            )
            _element.field_mappings = AAZListType(
                serialized_name="fieldMappings",
            )

            field_mappings = cls._schema_on_200_201.properties.entity_mappings.Element.field_mappings
            field_mappings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.entity_mappings.Element.field_mappings.Element
            _element.identifier = AAZStrType()
            _element.value = AAZStrType()

            incident_info = cls._schema_on_200_201.properties.incident_info
            incident_info.incident_id = AAZStrType(
                serialized_name="incidentId",
            )
            incident_info.relation_name = AAZStrType(
                serialized_name="relationName",
            )
            incident_info.severity = AAZStrType()
            incident_info.title = AAZStrType()

            labels = cls._schema_on_200_201.properties.labels
            labels.Element = AAZStrType()

            tactics = cls._schema_on_200_201.properties.tactics
            tactics.Element = AAZStrType()

            techniques = cls._schema_on_200_201.properties.techniques
            techniques.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            return cls._schema_on_200_201


def _build_schema_user_info_create(_builder):
    if _builder is None:
        return
    _builder.set_prop("objectId", AAZStrType, ".object_id", typ_kwargs={"nullable": True})


_schema_user_info_read = None


def _build_schema_user_info_read(_schema):
    global _schema_user_info_read
    if _schema_user_info_read is not None:
        _schema.email = _schema_user_info_read.email
        _schema.name = _schema_user_info_read.name
        _schema.object_id = _schema_user_info_read.object_id
        return

    _schema_user_info_read = AAZObjectType()

    user_info_read = _schema_user_info_read
    user_info_read.email = AAZStrType(
        flags={"read_only": True},
    )
    user_info_read.name = AAZStrType(
        flags={"read_only": True},
    )
    user_info_read.object_id = AAZStrType(
        serialized_name="objectId",
        nullable=True,
    )

    _schema.email = _schema_user_info_read.email
    _schema.name = _schema_user_info_read.name
    _schema.object_id = _schema_user_info_read.object_id


__all__ = ["Create"]
