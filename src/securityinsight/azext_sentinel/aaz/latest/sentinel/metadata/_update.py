# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel metadata update",
    is_experimental=True,
)
class Update(AAZCommand):
    """Update a Metadata.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/metadata/{}", "2022-06-01-preview"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.metadata_name = AAZStrArg(
            options=["-n", "--name", "--metadata-name"],
            help="The Metadata name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
            id_part="name",
        )

        # define Arg Group "Metadata"

        _args_schema = cls._args_schema
        _args_schema.etag = AAZStrArg(
            options=["--etag"],
            arg_group="Metadata",
            help="Etag of the azure resource",
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.author = AAZObjectArg(
            options=["--author"],
            arg_group="Properties",
            help="The creator of the content item.",
            nullable=True,
        )
        _args_schema.categories = AAZObjectArg(
            options=["--categories"],
            arg_group="Properties",
            help="Categories for the solution content item",
            nullable=True,
        )
        _args_schema.content_id = AAZStrArg(
            options=["--content-id"],
            arg_group="Properties",
            help="Static ID for the content.  Used to identify dependencies and content from solutions or community.  Hard-coded/static for out of the box content and solutions. Dynamic for user-created.  This is the resource name",
            nullable=True,
        )
        _args_schema.content_schema_version = AAZStrArg(
            options=["--content-schema-version"],
            arg_group="Properties",
            help="Schema version of the content. Can be used to distinguish between different flow based on the schema version",
            nullable=True,
        )
        _args_schema.custom_version = AAZStrArg(
            options=["--custom-version"],
            arg_group="Properties",
            help="The custom version of the content. A optional free text",
            nullable=True,
        )
        _args_schema.dependencies = AAZObjectArg(
            options=["--dependencies"],
            arg_group="Properties",
            help="Dependencies for the content item, what other content items it requires to work.  Can describe more complex dependencies using a recursive/nested structure. For a single dependency an id/kind/version can be supplied or operator/criteria for complex formats.",
            nullable=True,
        )
        cls._build_args_metadata_dependencies_update(_args_schema.dependencies)
        _args_schema.first_publish_date = AAZStrArg(
            options=["--first-publish-date"],
            arg_group="Properties",
            help="first publish date solution content item",
            nullable=True,
        )
        _args_schema.icon = AAZStrArg(
            options=["--icon"],
            arg_group="Properties",
            help="the icon identifier. this id can later be fetched from the solution template",
            nullable=True,
        )
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            arg_group="Properties",
            help="The kind of content the metadata is for.",
            enum={"AnalyticsRule": "AnalyticsRule", "AnalyticsRuleTemplate": "AnalyticsRuleTemplate", "AutomationRule": "AutomationRule", "AzureFunction": "AzureFunction", "DataConnector": "DataConnector", "DataType": "DataType", "HuntingQuery": "HuntingQuery", "InvestigationQuery": "InvestigationQuery", "LogicAppsCustomConnector": "LogicAppsCustomConnector", "Parser": "Parser", "Playbook": "Playbook", "PlaybookTemplate": "PlaybookTemplate", "Solution": "Solution", "Watchlist": "Watchlist", "WatchlistTemplate": "WatchlistTemplate", "Workbook": "Workbook", "WorkbookTemplate": "WorkbookTemplate"},
        )
        _args_schema.last_publish_date = AAZStrArg(
            options=["--last-publish-date"],
            arg_group="Properties",
            help="last publish date for the solution content item",
            nullable=True,
        )
        _args_schema.parent_id = AAZStrArg(
            options=["--parent-id"],
            arg_group="Properties",
            help="Full parent resource ID of the content item the metadata is for.  This is the full resource ID including the scope (subscription and resource group)",
        )
        _args_schema.preview_images = AAZListArg(
            options=["--preview-images"],
            arg_group="Properties",
            help="preview image file names. These will be taken from the solution artifacts",
            nullable=True,
        )
        _args_schema.preview_images_dark = AAZListArg(
            options=["--preview-images-dark"],
            arg_group="Properties",
            help="preview image file names. These will be taken from the solution artifacts. used for dark theme support",
            nullable=True,
        )
        _args_schema.providers = AAZListArg(
            options=["--providers"],
            arg_group="Properties",
            help="Providers for the solution content item",
            nullable=True,
        )
        _args_schema.source = AAZObjectArg(
            options=["--source"],
            arg_group="Properties",
            help="Source of the content.  This is where/how it was created.",
            nullable=True,
        )
        _args_schema.support = AAZObjectArg(
            options=["--support"],
            arg_group="Properties",
            help="Support information for the metadata - type, name, contact information",
            nullable=True,
        )
        _args_schema.threat_tactics = AAZListArg(
            options=["--threat-tactics"],
            arg_group="Properties",
            help="the tactics the resource covers",
            nullable=True,
        )
        _args_schema.threat_techniques = AAZListArg(
            options=["--threat-techniques"],
            arg_group="Properties",
            help="the techniques the resource covers, these have to be aligned with the tactics being used",
            nullable=True,
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="Version of the content.  Default and recommended format is numeric (e.g. 1, 1.0, 1.0.0, 1.0.0.0), following ARM template best practices.  Can also be any string, but then we cannot guarantee any version checks",
            nullable=True,
        )

        author = cls._args_schema.author
        author.email = AAZStrArg(
            options=["email"],
            help="Email of author contact",
            nullable=True,
        )
        author.link = AAZStrArg(
            options=["link"],
            help="Link for author/vendor page",
            nullable=True,
        )
        author.name = AAZStrArg(
            options=["name"],
            help="Name of the author. Company or person.",
            nullable=True,
        )

        categories = cls._args_schema.categories
        categories.domains = AAZListArg(
            options=["domains"],
            help="domain for the solution content item",
            nullable=True,
        )
        categories.verticals = AAZListArg(
            options=["verticals"],
            help="Industry verticals for the solution content item",
            nullable=True,
        )

        domains = cls._args_schema.categories.domains
        domains.Element = AAZStrArg()

        verticals = cls._args_schema.categories.verticals
        verticals.Element = AAZStrArg()

        preview_images = cls._args_schema.preview_images
        preview_images.Element = AAZStrArg()

        preview_images_dark = cls._args_schema.preview_images_dark
        preview_images_dark.Element = AAZStrArg()

        providers = cls._args_schema.providers
        providers.Element = AAZStrArg()

        source = cls._args_schema.source
        source.kind = AAZStrArg(
            options=["kind"],
            help="Source type of the content",
            enum={"Community": "Community", "LocalWorkspace": "LocalWorkspace", "Solution": "Solution", "SourceRepository": "SourceRepository"},
        )
        source.name = AAZStrArg(
            options=["name"],
            help="Name of the content source.  The repo name, solution name, LA workspace name etc.",
            nullable=True,
        )
        source.source_id = AAZStrArg(
            options=["source-id"],
            help="ID of the content source.  The solution ID, workspace ID, etc",
            nullable=True,
        )

        support = cls._args_schema.support
        support.email = AAZStrArg(
            options=["email"],
            help="Email of support contact",
            nullable=True,
        )
        support.link = AAZStrArg(
            options=["link"],
            help="Link for support help, like to support page to open a ticket etc.",
            nullable=True,
        )
        support.name = AAZStrArg(
            options=["name"],
            help="Name of the support contact. Company or person.",
            nullable=True,
        )
        support.tier = AAZStrArg(
            options=["tier"],
            help="Type of support for content item",
            enum={"Community": "Community", "Microsoft": "Microsoft", "Partner": "Partner"},
        )

        threat_tactics = cls._args_schema.threat_tactics
        threat_tactics.Element = AAZStrArg()

        threat_techniques = cls._args_schema.threat_techniques
        threat_techniques.Element = AAZStrArg()
        return cls._args_schema

    _args_metadata_dependencies_update = None

    @classmethod
    def _build_args_metadata_dependencies_update(cls, _schema):
        if cls._args_metadata_dependencies_update is not None:
            _schema.content_id = cls._args_metadata_dependencies_update.content_id
            _schema.criteria = cls._args_metadata_dependencies_update.criteria
            _schema.kind = cls._args_metadata_dependencies_update.kind
            _schema.name = cls._args_metadata_dependencies_update.name
            _schema.operator = cls._args_metadata_dependencies_update.operator
            _schema.version = cls._args_metadata_dependencies_update.version
            return

        cls._args_metadata_dependencies_update = AAZObjectArg(
            nullable=True,
        )

        metadata_dependencies_update = cls._args_metadata_dependencies_update
        metadata_dependencies_update.content_id = AAZStrArg(
            options=["content-id"],
            help="Id of the content item we depend on",
            nullable=True,
        )
        metadata_dependencies_update.criteria = AAZListArg(
            options=["criteria"],
            help="This is the list of dependencies we must fulfill, according to the AND/OR operator",
            nullable=True,
        )
        metadata_dependencies_update.kind = AAZStrArg(
            options=["kind"],
            help="Type of the content item we depend on",
            nullable=True,
            enum={"AnalyticsRule": "AnalyticsRule", "AnalyticsRuleTemplate": "AnalyticsRuleTemplate", "AutomationRule": "AutomationRule", "AzureFunction": "AzureFunction", "DataConnector": "DataConnector", "DataType": "DataType", "HuntingQuery": "HuntingQuery", "InvestigationQuery": "InvestigationQuery", "LogicAppsCustomConnector": "LogicAppsCustomConnector", "Parser": "Parser", "Playbook": "Playbook", "PlaybookTemplate": "PlaybookTemplate", "Solution": "Solution", "Watchlist": "Watchlist", "WatchlistTemplate": "WatchlistTemplate", "Workbook": "Workbook", "WorkbookTemplate": "WorkbookTemplate"},
        )
        metadata_dependencies_update.name = AAZStrArg(
            options=["name"],
            help="Name of the content item",
            nullable=True,
        )
        metadata_dependencies_update.operator = AAZStrArg(
            options=["operator"],
            help="Operator used for list of dependencies in criteria array.",
            nullable=True,
            enum={"AND": "AND", "OR": "OR"},
        )
        metadata_dependencies_update.version = AAZStrArg(
            options=["version"],
            help="Version of the the content item we depend on.  Can be blank, * or missing to indicate any version fulfills the dependency.  If version does not match our defined numeric format then an exact match is required.",
            nullable=True,
        )

        criteria = cls._args_metadata_dependencies_update.criteria
        criteria.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_metadata_dependencies_update(criteria.Element)

        _schema.content_id = cls._args_metadata_dependencies_update.content_id
        _schema.criteria = cls._args_metadata_dependencies_update.criteria
        _schema.kind = cls._args_metadata_dependencies_update.kind
        _schema.name = cls._args_metadata_dependencies_update.name
        _schema.operator = cls._args_metadata_dependencies_update.operator
        _schema.version = cls._args_metadata_dependencies_update.version

    def _execute_operations(self):
        self.MetadataGet(ctx=self.ctx)()
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.MetadataCreate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MetadataGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "metadataName", self.ctx.args.metadata_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_metadata_model_read(cls._schema_on_200)

            return cls._schema_on_200

    class MetadataCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/metadata/{metadataName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "metadataName", self.ctx.args.metadata_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _build_schema_metadata_model_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("etag", AAZStrType, ".etag")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("author", AAZObjectType, ".author")
                properties.set_prop("categories", AAZObjectType, ".categories")
                properties.set_prop("contentId", AAZStrType, ".content_id")
                properties.set_prop("contentSchemaVersion", AAZStrType, ".content_schema_version")
                properties.set_prop("customVersion", AAZStrType, ".custom_version")
                _build_schema_metadata_dependencies_update(properties.set_prop("dependencies", AAZObjectType, ".dependencies"))
                properties.set_prop("firstPublishDate", AAZStrType, ".first_publish_date")
                properties.set_prop("icon", AAZStrType, ".icon")
                properties.set_prop("kind", AAZStrType, ".kind", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("lastPublishDate", AAZStrType, ".last_publish_date")
                properties.set_prop("parentId", AAZStrType, ".parent_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("previewImages", AAZListType, ".preview_images")
                properties.set_prop("previewImagesDark", AAZListType, ".preview_images_dark")
                properties.set_prop("providers", AAZListType, ".providers")
                properties.set_prop("source", AAZObjectType, ".source")
                properties.set_prop("support", AAZObjectType, ".support")
                properties.set_prop("threatAnalysisTactics", AAZListType, ".threat_tactics")
                properties.set_prop("threatAnalysisTechniques", AAZListType, ".threat_techniques")
                properties.set_prop("version", AAZStrType, ".version")

            author = _builder.get(".properties.author")
            if author is not None:
                author.set_prop("email", AAZStrType, ".email")
                author.set_prop("link", AAZStrType, ".link")
                author.set_prop("name", AAZStrType, ".name")

            categories = _builder.get(".properties.categories")
            if categories is not None:
                categories.set_prop("domains", AAZListType, ".domains")
                categories.set_prop("verticals", AAZListType, ".verticals")

            domains = _builder.get(".properties.categories.domains")
            if domains is not None:
                domains.set_elements(AAZStrType, ".")

            verticals = _builder.get(".properties.categories.verticals")
            if verticals is not None:
                verticals.set_elements(AAZStrType, ".")

            preview_images = _builder.get(".properties.previewImages")
            if preview_images is not None:
                preview_images.set_elements(AAZStrType, ".")

            preview_images_dark = _builder.get(".properties.previewImagesDark")
            if preview_images_dark is not None:
                preview_images_dark.set_elements(AAZStrType, ".")

            providers = _builder.get(".properties.providers")
            if providers is not None:
                providers.set_elements(AAZStrType, ".")

            source = _builder.get(".properties.source")
            if source is not None:
                source.set_prop("kind", AAZStrType, ".kind", typ_kwargs={"flags": {"required": True}})
                source.set_prop("name", AAZStrType, ".name")
                source.set_prop("sourceId", AAZStrType, ".source_id")

            support = _builder.get(".properties.support")
            if support is not None:
                support.set_prop("email", AAZStrType, ".email")
                support.set_prop("link", AAZStrType, ".link")
                support.set_prop("name", AAZStrType, ".name")
                support.set_prop("tier", AAZStrType, ".tier", typ_kwargs={"flags": {"required": True}})

            threat_analysis_tactics = _builder.get(".properties.threatAnalysisTactics")
            if threat_analysis_tactics is not None:
                threat_analysis_tactics.set_elements(AAZStrType, ".")

            threat_analysis_techniques = _builder.get(".properties.threatAnalysisTechniques")
            if threat_analysis_techniques is not None:
                threat_analysis_techniques.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


def _build_schema_metadata_dependencies_update(_builder):
    if _builder is None:
        return
    _builder.set_prop("contentId", AAZStrType, ".content_id")
    _builder.set_prop("criteria", AAZListType, ".criteria")
    _builder.set_prop("kind", AAZStrType, ".kind")
    _builder.set_prop("name", AAZStrType, ".name")
    _builder.set_prop("operator", AAZStrType, ".operator")
    _builder.set_prop("version", AAZStrType, ".version")

    criteria = _builder.get(".criteria")
    if criteria is not None:
        _build_schema_metadata_dependencies_update(criteria.set_elements(AAZObjectType, "."))


_schema_metadata_dependencies_read = None


def _build_schema_metadata_dependencies_read(_schema):
    global _schema_metadata_dependencies_read
    if _schema_metadata_dependencies_read is not None:
        _schema.content_id = _schema_metadata_dependencies_read.content_id
        _schema.criteria = _schema_metadata_dependencies_read.criteria
        _schema.kind = _schema_metadata_dependencies_read.kind
        _schema.name = _schema_metadata_dependencies_read.name
        _schema.operator = _schema_metadata_dependencies_read.operator
        _schema.version = _schema_metadata_dependencies_read.version
        return

    _schema_metadata_dependencies_read = AAZObjectType()

    metadata_dependencies_read = _schema_metadata_dependencies_read
    metadata_dependencies_read.content_id = AAZStrType(
        serialized_name="contentId",
    )
    metadata_dependencies_read.criteria = AAZListType()
    metadata_dependencies_read.kind = AAZStrType()
    metadata_dependencies_read.name = AAZStrType()
    metadata_dependencies_read.operator = AAZStrType()
    metadata_dependencies_read.version = AAZStrType()

    criteria = _schema_metadata_dependencies_read.criteria
    criteria.Element = AAZObjectType()
    _build_schema_metadata_dependencies_read(criteria.Element)

    _schema.content_id = _schema_metadata_dependencies_read.content_id
    _schema.criteria = _schema_metadata_dependencies_read.criteria
    _schema.kind = _schema_metadata_dependencies_read.kind
    _schema.name = _schema_metadata_dependencies_read.name
    _schema.operator = _schema_metadata_dependencies_read.operator
    _schema.version = _schema_metadata_dependencies_read.version


_schema_metadata_model_read = None


def _build_schema_metadata_model_read(_schema):
    global _schema_metadata_model_read
    if _schema_metadata_model_read is not None:
        _schema.etag = _schema_metadata_model_read.etag
        _schema.id = _schema_metadata_model_read.id
        _schema.name = _schema_metadata_model_read.name
        _schema.properties = _schema_metadata_model_read.properties
        _schema.system_data = _schema_metadata_model_read.system_data
        _schema.type = _schema_metadata_model_read.type
        return

    _schema_metadata_model_read = AAZObjectType()

    metadata_model_read = _schema_metadata_model_read
    metadata_model_read.etag = AAZStrType()
    metadata_model_read.id = AAZStrType(
        flags={"read_only": True},
    )
    metadata_model_read.name = AAZStrType(
        flags={"read_only": True},
    )
    metadata_model_read.properties = AAZObjectType(
        flags={"client_flatten": True},
    )
    metadata_model_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"read_only": True},
    )
    metadata_model_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_metadata_model_read.properties
    properties.author = AAZObjectType()
    properties.categories = AAZObjectType()
    properties.content_id = AAZStrType(
        serialized_name="contentId",
    )
    properties.content_schema_version = AAZStrType(
        serialized_name="contentSchemaVersion",
    )
    properties.custom_version = AAZStrType(
        serialized_name="customVersion",
    )
    properties.dependencies = AAZObjectType()
    _build_schema_metadata_dependencies_read(properties.dependencies)
    properties.first_publish_date = AAZStrType(
        serialized_name="firstPublishDate",
    )
    properties.icon = AAZStrType()
    properties.kind = AAZStrType(
        flags={"required": True},
    )
    properties.last_publish_date = AAZStrType(
        serialized_name="lastPublishDate",
    )
    properties.parent_id = AAZStrType(
        serialized_name="parentId",
        flags={"required": True},
    )
    properties.preview_images = AAZListType(
        serialized_name="previewImages",
    )
    properties.preview_images_dark = AAZListType(
        serialized_name="previewImagesDark",
    )
    properties.providers = AAZListType()
    properties.source = AAZObjectType()
    properties.support = AAZObjectType()
    properties.threat_analysis_tactics = AAZListType(
        serialized_name="threatAnalysisTactics",
    )
    properties.threat_analysis_techniques = AAZListType(
        serialized_name="threatAnalysisTechniques",
    )
    properties.version = AAZStrType()

    author = _schema_metadata_model_read.properties.author
    author.email = AAZStrType()
    author.link = AAZStrType()
    author.name = AAZStrType()

    categories = _schema_metadata_model_read.properties.categories
    categories.domains = AAZListType()
    categories.verticals = AAZListType()

    domains = _schema_metadata_model_read.properties.categories.domains
    domains.Element = AAZStrType()

    verticals = _schema_metadata_model_read.properties.categories.verticals
    verticals.Element = AAZStrType()

    preview_images = _schema_metadata_model_read.properties.preview_images
    preview_images.Element = AAZStrType()

    preview_images_dark = _schema_metadata_model_read.properties.preview_images_dark
    preview_images_dark.Element = AAZStrType()

    providers = _schema_metadata_model_read.properties.providers
    providers.Element = AAZStrType()

    source = _schema_metadata_model_read.properties.source
    source.kind = AAZStrType(
        flags={"required": True},
    )
    source.name = AAZStrType()
    source.source_id = AAZStrType(
        serialized_name="sourceId",
    )

    support = _schema_metadata_model_read.properties.support
    support.email = AAZStrType()
    support.link = AAZStrType()
    support.name = AAZStrType()
    support.tier = AAZStrType(
        flags={"required": True},
    )

    threat_analysis_tactics = _schema_metadata_model_read.properties.threat_analysis_tactics
    threat_analysis_tactics.Element = AAZStrType()

    threat_analysis_techniques = _schema_metadata_model_read.properties.threat_analysis_techniques
    threat_analysis_techniques.Element = AAZStrType()

    system_data = _schema_metadata_model_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
        flags={"read_only": True},
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
        flags={"read_only": True},
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
        flags={"read_only": True},
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
        flags={"read_only": True},
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
        flags={"read_only": True},
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
        flags={"read_only": True},
    )

    _schema.etag = _schema_metadata_model_read.etag
    _schema.id = _schema_metadata_model_read.id
    _schema.name = _schema_metadata_model_read.name
    _schema.properties = _schema_metadata_model_read.properties
    _schema.system_data = _schema_metadata_model_read.system_data
    _schema.type = _schema_metadata_model_read.type


__all__ = ["Update"]
