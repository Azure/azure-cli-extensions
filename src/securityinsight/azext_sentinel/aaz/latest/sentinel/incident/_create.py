# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel incident create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Create the incident.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/incidents/{}", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.incident_id = AAZStrArg(
            options=["-n", "--name", "--incident-id"],
            help="Incident ID",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
            id_part="name",
        )

        # define Arg Group "Incident"

        _args_schema = cls._args_schema
        _args_schema.etag = AAZStrArg(
            options=["--etag"],
            arg_group="Incident",
            help="Etag of the azure resource",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.classification = AAZStrArg(
            options=["--classification"],
            arg_group="Properties",
            help="The reason the incident was closed",
            enum={"BenignPositive": "BenignPositive", "FalsePositive": "FalsePositive", "TruePositive": "TruePositive", "Undetermined": "Undetermined"},
        )
        _args_schema.classification_comment = AAZStrArg(
            options=["--classification-comment"],
            arg_group="Properties",
            help="Describes the reason the incident was closed",
        )
        _args_schema.classification_reason = AAZStrArg(
            options=["--classification-reason"],
            arg_group="Properties",
            help="The classification reason the incident was closed with",
            enum={"InaccurateData": "InaccurateData", "IncorrectAlertLogic": "IncorrectAlertLogic", "SuspiciousActivity": "SuspiciousActivity", "SuspiciousButExpected": "SuspiciousButExpected"},
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="The description of the incident",
        )
        _args_schema.first_activity_time_utc = AAZStrArg(
            options=["--first-activity-time-utc"],
            arg_group="Properties",
            help="The time of the first activity in the incident",
        )
        _args_schema.labels = AAZListArg(
            options=["--labels"],
            arg_group="Properties",
            help="List of labels relevant to this incident",
        )
        _args_schema.last_activity_time_utc = AAZStrArg(
            options=["--last-activity-time-utc"],
            arg_group="Properties",
            help="The time of the last activity in the incident",
        )
        _args_schema.owner = AAZObjectArg(
            options=["--owner"],
            arg_group="Properties",
            help="Describes a user that the incident is assigned to",
        )
        _args_schema.provider_incident_id = AAZStrArg(
            options=["--provider-incident-id"],
            arg_group="Properties",
            help="The incident ID assigned by the incident provider",
        )
        _args_schema.provider_name = AAZStrArg(
            options=["--provider-name"],
            arg_group="Properties",
            help="The name of the source provider that generated the incident",
        )
        _args_schema.severity = AAZStrArg(
            options=["--severity"],
            arg_group="Properties",
            help="The severity of the incident",
            enum={"High": "High", "Informational": "Informational", "Low": "Low", "Medium": "Medium"},
        )
        _args_schema.status = AAZStrArg(
            options=["--status"],
            arg_group="Properties",
            help="The status of the incident",
            enum={"Active": "Active", "Closed": "Closed", "New": "New"},
        )
        _args_schema.title = AAZStrArg(
            options=["--title"],
            arg_group="Properties",
            help="The title of the incident",
        )

        labels = cls._args_schema.labels
        labels.Element = AAZObjectArg()

        _element = cls._args_schema.labels.Element
        _element.label_name = AAZStrArg(
            options=["label-name"],
            help="The name of the label",
            required=True,
        )

        owner = cls._args_schema.owner
        owner.assigned_to = AAZStrArg(
            options=["assigned-to"],
            help="The name of the user the incident is assigned to.",
        )
        owner.email = AAZStrArg(
            options=["email"],
            help="The email of the user the incident is assigned to.",
        )
        owner.object_id = AAZStrArg(
            options=["object-id"],
            help="The object id of the user the incident is assigned to.",
        )
        owner.owner_type = AAZStrArg(
            options=["owner-type"],
            help="The type of the owner the incident is assigned to.",
            enum={"Group": "Group", "Unknown": "Unknown", "User": "User"},
        )
        owner.user_principal_name = AAZStrArg(
            options=["user-principal-name"],
            help="The user principal name of the user the incident is assigned to.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.IncidentsCreateOrUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class IncidentsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/incidents/{incidentId}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "incidentId", self.ctx.args.incident_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("etag", AAZStrType, ".etag")
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("classification", AAZStrType, ".classification")
                properties.set_prop("classificationComment", AAZStrType, ".classification_comment")
                properties.set_prop("classificationReason", AAZStrType, ".classification_reason")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("firstActivityTimeUtc", AAZStrType, ".first_activity_time_utc")
                properties.set_prop("labels", AAZListType, ".labels")
                properties.set_prop("lastActivityTimeUtc", AAZStrType, ".last_activity_time_utc")
                properties.set_prop("owner", AAZObjectType, ".owner")
                properties.set_prop("providerIncidentId", AAZStrType, ".provider_incident_id")
                properties.set_prop("providerName", AAZStrType, ".provider_name")
                properties.set_prop("severity", AAZStrType, ".severity", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("status", AAZStrType, ".status", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("title", AAZStrType, ".title", typ_kwargs={"flags": {"required": True}})

            labels = _builder.get(".properties.labels")
            if labels is not None:
                labels.set_elements(AAZObjectType)

            _elements = _builder.get(".properties.labels[]")
            if _elements is not None:
                _elements.set_prop("labelName", AAZStrType, ".label_name", typ_kwargs={"flags": {"required": True}})

            owner = _builder.get(".properties.owner")
            if owner is not None:
                owner.set_prop("assignedTo", AAZStrType, ".assigned_to")
                owner.set_prop("email", AAZStrType, ".email")
                owner.set_prop("objectId", AAZStrType, ".object_id")
                owner.set_prop("ownerType", AAZStrType, ".owner_type")
                owner.set_prop("userPrincipalName", AAZStrType, ".user_principal_name")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType()
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.additional_data = AAZObjectType(
                serialized_name="additionalData",
                flags={"read_only": True},
            )
            properties.classification = AAZStrType()
            properties.classification_comment = AAZStrType(
                serialized_name="classificationComment",
            )
            properties.classification_reason = AAZStrType(
                serialized_name="classificationReason",
            )
            properties.created_time_utc = AAZStrType(
                serialized_name="createdTimeUtc",
                flags={"read_only": True},
            )
            properties.description = AAZStrType()
            properties.first_activity_time_utc = AAZStrType(
                serialized_name="firstActivityTimeUtc",
            )
            properties.incident_number = AAZIntType(
                serialized_name="incidentNumber",
                flags={"read_only": True},
            )
            properties.incident_url = AAZStrType(
                serialized_name="incidentUrl",
                flags={"read_only": True},
            )
            properties.labels = AAZListType()
            properties.last_activity_time_utc = AAZStrType(
                serialized_name="lastActivityTimeUtc",
            )
            properties.last_modified_time_utc = AAZStrType(
                serialized_name="lastModifiedTimeUtc",
                flags={"read_only": True},
            )
            properties.owner = AAZObjectType()
            properties.provider_incident_id = AAZStrType(
                serialized_name="providerIncidentId",
            )
            properties.provider_name = AAZStrType(
                serialized_name="providerName",
            )
            properties.related_analytic_rule_ids = AAZListType(
                serialized_name="relatedAnalyticRuleIds",
                flags={"read_only": True},
            )
            properties.severity = AAZStrType(
                flags={"required": True},
            )
            properties.status = AAZStrType(
                flags={"required": True},
            )
            properties.team_information = AAZObjectType(
                serialized_name="teamInformation",
            )
            properties.title = AAZStrType(
                flags={"required": True},
            )

            additional_data = cls._schema_on_200_201.properties.additional_data
            additional_data.alert_product_names = AAZListType(
                serialized_name="alertProductNames",
                flags={"read_only": True},
            )
            additional_data.alerts_count = AAZIntType(
                serialized_name="alertsCount",
                flags={"read_only": True},
            )
            additional_data.bookmarks_count = AAZIntType(
                serialized_name="bookmarksCount",
                flags={"read_only": True},
            )
            additional_data.comments_count = AAZIntType(
                serialized_name="commentsCount",
                flags={"read_only": True},
            )
            additional_data.provider_incident_url = AAZStrType(
                serialized_name="providerIncidentUrl",
                flags={"read_only": True},
            )
            additional_data.tactics = AAZListType(
                flags={"read_only": True},
            )
            additional_data.techniques = AAZListType(
                flags={"read_only": True},
            )

            alert_product_names = cls._schema_on_200_201.properties.additional_data.alert_product_names
            alert_product_names.Element = AAZStrType(
                flags={"read_only": True},
            )

            tactics = cls._schema_on_200_201.properties.additional_data.tactics
            tactics.Element = AAZStrType(
                flags={"read_only": True},
            )

            techniques = cls._schema_on_200_201.properties.additional_data.techniques
            techniques.Element = AAZStrType(
                flags={"read_only": True},
            )

            labels = cls._schema_on_200_201.properties.labels
            labels.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.labels.Element
            _element.label_name = AAZStrType(
                serialized_name="labelName",
                flags={"required": True},
            )
            _element.label_type = AAZStrType(
                serialized_name="labelType",
                flags={"read_only": True},
            )

            owner = cls._schema_on_200_201.properties.owner
            owner.assigned_to = AAZStrType(
                serialized_name="assignedTo",
            )
            owner.email = AAZStrType()
            owner.object_id = AAZStrType(
                serialized_name="objectId",
            )
            owner.owner_type = AAZStrType(
                serialized_name="ownerType",
            )
            owner.user_principal_name = AAZStrType(
                serialized_name="userPrincipalName",
            )

            related_analytic_rule_ids = cls._schema_on_200_201.properties.related_analytic_rule_ids
            related_analytic_rule_ids.Element = AAZStrType(
                flags={"read_only": True},
            )

            team_information = cls._schema_on_200_201.properties.team_information
            team_information.description = AAZStrType(
                flags={"read_only": True},
            )
            team_information.name = AAZStrType(
                flags={"read_only": True},
            )
            team_information.primary_channel_url = AAZStrType(
                serialized_name="primaryChannelUrl",
                flags={"read_only": True},
            )
            team_information.team_creation_time_utc = AAZStrType(
                serialized_name="teamCreationTimeUtc",
                flags={"read_only": True},
            )
            team_information.team_id = AAZStrType(
                serialized_name="teamId",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            return cls._schema_on_200_201


__all__ = ["Create"]
