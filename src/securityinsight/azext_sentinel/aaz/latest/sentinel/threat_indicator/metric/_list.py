# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel threat-indicator metric list",
)
class List(AAZCommand):
    """Get threat intelligence indicators metrics (Indicators counts by Type, Threat Type, Source).
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/threatintelligence/main/metrics", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.ThreatIntelligenceIndicatorMetricsList(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ThreatIntelligenceIndicatorMetricsList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/threatIntelligence/main/metrics",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.properties = AAZObjectType()

            properties = cls._schema_on_200.value.Element.properties
            properties.last_updated_time_utc = AAZStrType(
                serialized_name="lastUpdatedTimeUtc",
            )
            properties.pattern_type_metrics = AAZListType(
                serialized_name="patternTypeMetrics",
            )
            properties.source_metrics = AAZListType(
                serialized_name="sourceMetrics",
            )
            properties.threat_type_metrics = AAZListType(
                serialized_name="threatTypeMetrics",
            )

            pattern_type_metrics = cls._schema_on_200.value.Element.properties.pattern_type_metrics
            pattern_type_metrics.Element = AAZObjectType()
            _build_schema_threat_intelligence_metric_entity_read(pattern_type_metrics.Element)

            source_metrics = cls._schema_on_200.value.Element.properties.source_metrics
            source_metrics.Element = AAZObjectType()
            _build_schema_threat_intelligence_metric_entity_read(source_metrics.Element)

            threat_type_metrics = cls._schema_on_200.value.Element.properties.threat_type_metrics
            threat_type_metrics.Element = AAZObjectType()
            _build_schema_threat_intelligence_metric_entity_read(threat_type_metrics.Element)

            return cls._schema_on_200


_schema_threat_intelligence_metric_entity_read = None


def _build_schema_threat_intelligence_metric_entity_read(_schema):
    global _schema_threat_intelligence_metric_entity_read
    if _schema_threat_intelligence_metric_entity_read is not None:
        _schema.metric_name = _schema_threat_intelligence_metric_entity_read.metric_name
        _schema.metric_value = _schema_threat_intelligence_metric_entity_read.metric_value
        return

    _schema_threat_intelligence_metric_entity_read = AAZObjectType()

    threat_intelligence_metric_entity_read = _schema_threat_intelligence_metric_entity_read
    threat_intelligence_metric_entity_read.metric_name = AAZStrType(
        serialized_name="metricName",
    )
    threat_intelligence_metric_entity_read.metric_value = AAZIntType(
        serialized_name="metricValue",
    )

    _schema.metric_name = _schema_threat_intelligence_metric_entity_read.metric_name
    _schema.metric_value = _schema_threat_intelligence_metric_entity_read.metric_value


__all__ = ["List"]
