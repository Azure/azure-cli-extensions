# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "sentinel setting create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Create setting.
    """

    _aaz_info = {
        "version": "2022-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.operationalinsights/workspaces/{}/providers/microsoft.securityinsights/settings/{}", "2022-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.settings_name = AAZStrArg(
            options=["-n", "--name", "--settings-name"],
            help="The setting name. Supports - Anomalies, EyesOn, EntityAnalytics, Ueba",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["-w", "--workspace-name"],
            help="The name of the workspace.",
            required=True,
            is_experimental=True,
            id_part="name",
        )

        # define Arg Group "Settings"

        _args_schema = cls._args_schema
        _args_schema.entity_analytics = AAZObjectArg(
            options=["--entity-analytics"],
            arg_group="Settings",
        )
        _args_schema.ueba = AAZObjectArg(
            options=["--ueba"],
            arg_group="Settings",
        )
        _args_schema.etag = AAZStrArg(
            options=["--etag"],
            arg_group="Settings",
            help="Etag of the azure resource",
        )

        entity_analytics = cls._args_schema.entity_analytics
        entity_analytics.entity_providers = AAZListArg(
            options=["entity-providers"],
            help="The relevant entity providers that are synced",
        )

        entity_providers = cls._args_schema.entity_analytics.entity_providers
        entity_providers.Element = AAZStrArg(
            enum={"ActiveDirectory": "ActiveDirectory", "AzureActiveDirectory": "AzureActiveDirectory"},
        )

        ueba = cls._args_schema.ueba
        ueba.data_sources = AAZListArg(
            options=["data-sources"],
            help="The relevant data sources that enriched by ueba",
        )

        data_sources = cls._args_schema.ueba.data_sources
        data_sources.Element = AAZStrArg(
            enum={"AuditLogs": "AuditLogs", "AzureActivity": "AzureActivity", "SecurityEvent": "SecurityEvent", "SigninLogs": "SigninLogs"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.ProductSettingsUpdate(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ProductSettingsUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OperationalInsights/workspaces/{workspaceName}/providers/Microsoft.SecurityInsights/settings/{settingsName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "settingsName", self.ctx.args.settings_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("etag", AAZStrType, ".etag")
            _builder.set_const("kind", "EntityAnalytics", AAZStrType, ".entity_analytics", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("kind", "Ueba", AAZStrType, ".ueba", typ_kwargs={"flags": {"required": True}})
            _builder.discriminate_by("kind", "EntityAnalytics")
            _builder.discriminate_by("kind", "Ueba")

            disc_entity_analytics = _builder.get("{kind:EntityAnalytics}")
            if disc_entity_analytics is not None:
                disc_entity_analytics.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get("{kind:EntityAnalytics}.properties")
            if properties is not None:
                properties.set_prop("entityProviders", AAZListType, ".entity_analytics.entity_providers")

            entity_providers = _builder.get("{kind:EntityAnalytics}.properties.entityProviders")
            if entity_providers is not None:
                entity_providers.set_elements(AAZStrType, ".")

            disc_ueba = _builder.get("{kind:Ueba}")
            if disc_ueba is not None:
                disc_ueba.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get("{kind:Ueba}.properties")
            if properties is not None:
                properties.set_prop("dataSources", AAZListType, ".ueba.data_sources")

            data_sources = _builder.get("{kind:Ueba}.properties.dataSources")
            if data_sources is not None:
                data_sources.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.etag = AAZStrType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.kind = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
                flags={"read_only": True},
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
                flags={"read_only": True},
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
                flags={"read_only": True},
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
                flags={"read_only": True},
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
                flags={"read_only": True},
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
                flags={"read_only": True},
            )

            disc_anomalies = cls._schema_on_200.discriminate_by("kind", "Anomalies")
            disc_anomalies.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "Anomalies").properties
            properties.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
                flags={"read_only": True},
            )

            disc_entity_analytics = cls._schema_on_200.discriminate_by("kind", "EntityAnalytics")
            disc_entity_analytics.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "EntityAnalytics").properties
            properties.entity_providers = AAZListType(
                serialized_name="entityProviders",
            )

            entity_providers = cls._schema_on_200.discriminate_by("kind", "EntityAnalytics").properties.entity_providers
            entity_providers.Element = AAZStrType()

            disc_eyes_on = cls._schema_on_200.discriminate_by("kind", "EyesOn")
            disc_eyes_on.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "EyesOn").properties
            properties.is_enabled = AAZBoolType(
                serialized_name="isEnabled",
                flags={"read_only": True},
            )

            disc_ueba = cls._schema_on_200.discriminate_by("kind", "Ueba")
            disc_ueba.properties = AAZObjectType(
                flags={"client_flatten": True},
            )

            properties = cls._schema_on_200.discriminate_by("kind", "Ueba").properties
            properties.data_sources = AAZListType(
                serialized_name="dataSources",
            )

            data_sources = cls._schema_on_200.discriminate_by("kind", "Ueba").properties.data_sources
            data_sources.Element = AAZStrType()

            return cls._schema_on_200


__all__ = ["Create"]
