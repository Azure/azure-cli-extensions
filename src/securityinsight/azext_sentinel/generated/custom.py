# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines


def sentinel_alert_rule_list(cmd, client,
                             resource_group_name,
                             workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_alert_rule_show(cmd, client,
                             resource_group_name,
                             workspace_name,
                             rule_id,
                             action_id=None):
    if resource_group_name is not None and workspace_name is not None and rule_id is not None and action_id is not None:
        return client.get_action(resource_group_name=resource_group_name,
                                 workspace_name=workspace_name,
                                 rule_id=rule_id,
                                 action_id=action_id)
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      rule_id=rule_id)


def sentinel_alert_rule_create(cmd, client,
                               resource_group_name,
                               workspace_name,
                               rule_id,
                               action_id=None,
                               etag=None,
                               logic_app_resource_id=None,
                               trigger_uri=None,
                               kind=None):
    if resource_group_name is not None and workspace_name is not None and rule_id is not None and action_id is not None and _action is not None:
        return client.create_or_update_action(resource_group_name=resource_group_name,
                                              workspace_name=workspace_name,
                                              rule_id=rule_id,
                                              action_id=action_id,
                                              etag=etag,
                                              logic_app_resource_id=logic_app_resource_id,
                                              trigger_uri=trigger_uri)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   rule_id=rule_id,
                                   etag=etag,
                                   kind=kind)


def sentinel_alert_rule_delete(cmd, client,
                               resource_group_name,
                               workspace_name,
                               rule_id,
                               action_id=None):
    if resource_group_name is not None and workspace_name is not None and rule_id is not None and action_id is not None:
        return client.delete_action(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    rule_id=rule_id,
                                    action_id=action_id)
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         rule_id=rule_id)


def sentinel_action_list(cmd, client,
                         resource_group_name,
                         workspace_name,
                         rule_id):
    return client.list_by_alert_rule(resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     rule_id=rule_id)


def sentinel_data_connector_list(cmd, client,
                                 resource_group_name,
                                 workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_data_connector_show(cmd, client,
                                 resource_group_name,
                                 workspace_name,
                                 data_connector_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_connector_id=data_connector_id)


def sentinel_data_connector_create(cmd, client,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id,
                                   etag=None,
                                   kind=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_connector_id=data_connector_id,
                                   etag=etag,
                                   kind=kind)


def sentinel_data_connector_update(cmd, client,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id,
                                   etag=None,
                                   kind=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_connector_id=data_connector_id,
                                   etag=etag,
                                   kind=kind)


def sentinel_data_connector_delete(cmd, client,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         data_connector_id=data_connector_id)
