# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=unused-argument

from knack.util import CLIError


def sentinel_alert_rule_list(client,
                             resource_group_name,
                             workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_alert_rule_show(client,
                             resource_group_name,
                             workspace_name,
                             rule_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      rule_id=rule_id)


def sentinel_alert_rule_create(client,
                               resource_group_name,
                               workspace_name,
                               rule_id,
                               action_id=None,
                               etag=None,
                               logic_app_resource_id=None,
                               trigger_uri=None,
                               fusion_alert_rule=None,
                               microsoft_security_incident_creation_alert_rule=None,
                               scheduled_alert_rule=None):
    all_alert_rule = []
    if fusion_alert_rule is not None:
        all_alert_rule.append(fusion_alert_rule)
    if microsoft_security_incident_creation_alert_rule is not None:
        all_alert_rule.append(microsoft_security_incident_creation_alert_rule)
    if scheduled_alert_rule is not None:
        all_alert_rule.append(scheduled_alert_rule)
    if len(all_alert_rule) > 1:
        raise CLIError('at most one of  fusion_alert_rule, microsoft_security_incident_creation_alert_rule, '
                       'scheduled_alert_rule is needed for alert_rule!')
    alert_rule = all_alert_rule[0] if len(all_alert_rule) == 1 else None
    if resource_group_name and workspace_name is not None and rule_id is not None and action_id is not None:
        return client.create_or_update_action(resource_group_name=resource_group_name,
                                              workspace_name=workspace_name,
                                              rule_id=rule_id,
                                              action_id=action_id,
                                              etag=etag,
                                              logic_app_resource_id=logic_app_resource_id,
                                              trigger_uri=trigger_uri)
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   rule_id=rule_id,
                                   alert_rule=alert_rule)


def sentinel_alert_rule_update(instance,
                               resource_group_name,
                               workspace_name,
                               rule_id,
                               fusion_alert_rule=None,
                               microsoft_security_incident_creation_alert_rule=None,
                               scheduled_alert_rule=None):
    return instance


def sentinel_alert_rule_delete(client,
                               resource_group_name,
                               workspace_name,
                               rule_id,
                               action_id=None):
    if resource_group_name and workspace_name is not None and rule_id is not None and action_id is not None:
        return client.delete_action(resource_group_name=resource_group_name,
                                    workspace_name=workspace_name,
                                    rule_id=rule_id,
                                    action_id=action_id)
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         rule_id=rule_id)


def sentinel_alert_rule_get_action(client,
                                   resource_group_name,
                                   workspace_name,
                                   rule_id,
                                   action_id):
    return client.get_action(resource_group_name=resource_group_name,
                             workspace_name=workspace_name,
                             rule_id=rule_id,
                             action_id=action_id)


def sentinel_action_list(client,
                         resource_group_name,
                         workspace_name,
                         rule_id):
    return client.list_by_alert_rule(resource_group_name=resource_group_name,
                                     workspace_name=workspace_name,
                                     rule_id=rule_id)


def sentinel_alert_rule_template_list(client,
                                      resource_group_name,
                                      workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_alert_rule_template_show(client,
                                      resource_group_name,
                                      workspace_name,
                                      alert_rule_template_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      alert_rule_template_id=alert_rule_template_id)


def sentinel_bookmark_list(client,
                           resource_group_name,
                           workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_bookmark_show(client,
                           resource_group_name,
                           workspace_name,
                           bookmark_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      bookmark_id=bookmark_id)


def sentinel_bookmark_create(client,
                             resource_group_name,
                             workspace_name,
                             bookmark_id,
                             etag=None,
                             created=None,
                             display_name=None,
                             labels=None,
                             notes=None,
                             query=None,
                             query_result=None,
                             updated=None,
                             incident_info=None,
                             updated_by_object_id=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   bookmark_id=bookmark_id,
                                   etag=etag,
                                   created=created,
                                   display_name=display_name,
                                   labels=labels,
                                   notes=notes,
                                   query=query,
                                   query_result=query_result,
                                   updated=updated,
                                   incident_info=incident_info,
                                   object_id=updated_by_object_id)


def sentinel_bookmark_update(client,
                             resource_group_name,
                             workspace_name,
                             bookmark_id,
                             etag=None,
                             created=None,
                             display_name=None,
                             labels=None,
                             notes=None,
                             query=None,
                             query_result=None,
                             updated=None,
                             incident_info=None,
                             updated_by_object_id=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   bookmark_id=bookmark_id,
                                   etag=etag,
                                   created=created,
                                   display_name=display_name,
                                   labels=labels,
                                   notes=notes,
                                   query=query,
                                   query_result=query_result,
                                   updated=updated,
                                   incident_info=incident_info,
                                   object_id=updated_by_object_id)


def sentinel_bookmark_delete(client,
                             resource_group_name,
                             workspace_name,
                             bookmark_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         bookmark_id=bookmark_id)


def sentinel_data_connector_list(client,
                                 resource_group_name,
                                 workspace_name):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name)


def sentinel_data_connector_show(client,
                                 resource_group_name,
                                 workspace_name,
                                 data_connector_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      data_connector_id=data_connector_id)


def sentinel_data_connector_create(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id,
                                   aad_data_connector=None,
                                   aatp_data_connector=None,
                                   asc_data_connector=None,
                                   aws_cloud_trail_data_connector=None,
                                   mcas_data_connector=None,
                                   mdatp_data_connector=None,
                                   office_data_connector=None,
                                   ti_data_connector=None):
    all_data_connector = []
    if aad_data_connector is not None:
        all_data_connector.append(aad_data_connector)
    if aatp_data_connector is not None:
        all_data_connector.append(aatp_data_connector)
    if asc_data_connector is not None:
        all_data_connector.append(asc_data_connector)
    if aws_cloud_trail_data_connector is not None:
        all_data_connector.append(aws_cloud_trail_data_connector)
    if mcas_data_connector is not None:
        all_data_connector.append(mcas_data_connector)
    if mdatp_data_connector is not None:
        all_data_connector.append(mdatp_data_connector)
    if office_data_connector is not None:
        all_data_connector.append(office_data_connector)
    if ti_data_connector is not None:
        all_data_connector.append(ti_data_connector)
    if len(all_data_connector) > 1:
        raise CLIError('at most one of  aad_data_connector, aatp_data_connector, asc_data_connector, '
                       'aws_cloud_trail_data_connector, mcas_data_connector, mdatp_data_connector, '
                       'office_data_connector, ti_data_connector is needed for data_connector!')
    if len(all_data_connector) != 1:
        raise CLIError('data_connector is required. but none of aad_data_connector, aatp_data_connector, '
                       'asc_data_connector, aws_cloud_trail_data_connector, mcas_data_connector, mdatp_data_connector, '
                       'office_data_connector, ti_data_connector is provided!')
    data_connector = all_data_connector[0] if len(all_data_connector) == 1 else None
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   data_connector_id=data_connector_id,
                                   data_connector=data_connector)


def sentinel_data_connector_update(instance,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id,
                                   aad_data_connector=None,
                                   aatp_data_connector=None,
                                   asc_data_connector=None,
                                   aws_cloud_trail_data_connector=None,
                                   mcas_data_connector=None,
                                   mdatp_data_connector=None,
                                   office_data_connector=None,
                                   ti_data_connector=None):
    return instance


def sentinel_data_connector_delete(client,
                                   resource_group_name,
                                   workspace_name,
                                   data_connector_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         data_connector_id=data_connector_id)


def sentinel_incident_list(client,
                           resource_group_name,
                           workspace_name,
                           filter_=None,
                           orderby=None,
                           top=None,
                           skip_token=None):
    return client.list(resource_group_name=resource_group_name,
                       workspace_name=workspace_name,
                       filter=filter_,
                       orderby=orderby,
                       top=top,
                       skip_token=skip_token)


def sentinel_incident_show(client,
                           resource_group_name,
                           workspace_name,
                           incident_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      incident_id=incident_id)


def sentinel_incident_create(client,
                             resource_group_name,
                             workspace_name,
                             incident_id,
                             etag=None,
                             classification=None,
                             classification_comment=None,
                             classification_reason=None,
                             description=None,
                             first_activity_time_utc=None,
                             labels=None,
                             last_activity_time_utc=None,
                             owner=None,
                             severity=None,
                             status=None,
                             title=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   incident_id=incident_id,
                                   etag=etag,
                                   classification=classification,
                                   classification_comment=classification_comment,
                                   classification_reason=classification_reason,
                                   description=description,
                                   first_activity_time_utc=first_activity_time_utc,
                                   labels=labels,
                                   last_activity_time_utc=last_activity_time_utc,
                                   owner=owner,
                                   severity=severity,
                                   status=status,
                                   title=title)


def sentinel_incident_update(client,
                             resource_group_name,
                             workspace_name,
                             incident_id,
                             etag=None,
                             classification=None,
                             classification_comment=None,
                             classification_reason=None,
                             description=None,
                             first_activity_time_utc=None,
                             labels=None,
                             last_activity_time_utc=None,
                             owner=None,
                             severity=None,
                             status=None,
                             title=None):
    return client.create_or_update(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   incident_id=incident_id,
                                   etag=etag,
                                   classification=classification,
                                   classification_comment=classification_comment,
                                   classification_reason=classification_reason,
                                   description=description,
                                   first_activity_time_utc=first_activity_time_utc,
                                   labels=labels,
                                   last_activity_time_utc=last_activity_time_utc,
                                   owner=owner,
                                   severity=severity,
                                   status=status,
                                   title=title)


def sentinel_incident_delete(client,
                             resource_group_name,
                             workspace_name,
                             incident_id):
    return client.delete(resource_group_name=resource_group_name,
                         workspace_name=workspace_name,
                         incident_id=incident_id)


def sentinel_incident_comment_list(client,
                                   resource_group_name,
                                   workspace_name,
                                   incident_id,
                                   filter_=None,
                                   orderby=None,
                                   top=None,
                                   skip_token=None):
    return client.list_by_incident(resource_group_name=resource_group_name,
                                   workspace_name=workspace_name,
                                   incident_id=incident_id,
                                   filter=filter_,
                                   orderby=orderby,
                                   top=top,
                                   skip_token=skip_token)


def sentinel_incident_comment_show(client,
                                   resource_group_name,
                                   workspace_name,
                                   incident_id,
                                   incident_comment_id):
    return client.get(resource_group_name=resource_group_name,
                      workspace_name=workspace_name,
                      incident_id=incident_id,
                      incident_comment_id=incident_comment_id)


def sentinel_incident_comment_create(client,
                                     resource_group_name,
                                     workspace_name,
                                     incident_id,
                                     incident_comment_id,
                                     message=None):
    return client.create_comment(resource_group_name=resource_group_name,
                                 workspace_name=workspace_name,
                                 incident_id=incident_id,
                                 incident_comment_id=incident_comment_id,
                                 message=message)
