# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import datetime
from typing import TYPE_CHECKING
import warnings

from azure.core.exceptions import HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpRequest, HttpResponse
from azure.mgmt.core.exceptions import ARMErrorFormat

from .. import models

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Generic, Iterable, Optional, TypeVar, Union

    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

class MeasurementEndpointOperations(object):
    """MeasurementEndpointOperations operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~footprint_monitoring_management_client.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer):
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    def list_by_profile(
        self,
        resource_group_name,  # type: str
        profile_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["models.MeasurementEndpointList"]
        """Get all measurement endpoints under a Footprint profile.

        Retrieves the information about all measurement endpoints under a Footprint profile.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param profile_name: Name of the Footprint profile resource.
        :type profile_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either MeasurementEndpointList or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~footprint_monitoring_management_client.models.MeasurementEndpointList]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MeasurementEndpointList"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-02-01-preview"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = 'application/json'

            if not next_link:
                # Construct URL
                url = self.list_by_profile.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
                    'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
                    'profileName': self._serialize.url("profile_name", profile_name, 'str', max_length=64, min_length=3, pattern=r'^[a-zA-Z0-9]'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize('MeasurementEndpointList', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.DefaultErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return ItemPaged(
            get_next, extract_data
        )
    list_by_profile.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FootprintMonitoring/profiles/{profileName}/measurementEndpoints'}  # type: ignore

    def get(
        self,
        resource_group_name,  # type: str
        profile_name,  # type: str
        measurement_endpoint_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MeasurementEndpoint"
        """Get a measurement endpoint under a Footprint profile resource.

        Retrieves the information about a single measurement endpoint under a Footprint profile.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param profile_name: Name of the Footprint profile resource.
        :type profile_name: str
        :param measurement_endpoint_name: Name of the Footprint measurement endpoint resource.
        :type measurement_endpoint_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementEndpoint, or the result of cls(response)
        :rtype: ~footprint_monitoring_management_client.models.MeasurementEndpoint
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MeasurementEndpoint"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-02-01-preview"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
            'profileName': self._serialize.url("profile_name", profile_name, 'str', max_length=64, min_length=3, pattern=r'^[a-zA-Z0-9]'),
            'measurementEndpointName': self._serialize.url("measurement_endpoint_name", measurement_endpoint_name, 'str', max_length=64, min_length=5, pattern=r'^[a-zA-Z0-9]'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = 'application/json'

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.DefaultErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('MeasurementEndpoint', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FootprintMonitoring/profiles/{profileName}/measurementEndpoints/{measurementEndpointName}'}  # type: ignore

    def create_or_update(
        self,
        resource_group_name,  # type: str
        profile_name,  # type: str
        measurement_endpoint_name,  # type: str
        endpoint,  # type: str
        measurement_type,  # type: int
        weight,  # type: int
        description=None,  # type: Optional[str]
        experiment_id=None,  # type: Optional[str]
        object_path=None,  # type: Optional[str]
        start_time_utc=None,  # type: Optional[datetime.datetime]
        end_time_utc=None,  # type: Optional[datetime.datetime]
        hot_path_sampling_percentage_rate=None,  # type: Optional[float]
        warm_path_sampling_percentage_rate=None,  # type: Optional[float]
        cold_path_sampling_percentage_rate_override=None,  # type: Optional[float]
        metadata=None,  # type: Optional[str]
        **kwargs  # type: Any
    ):
        # type: (...) -> "models.MeasurementEndpoint"
        """Creates or updates a single measurement endpoint under a Footprint profile resource.

        Creates or updates a single measurement endpoint under a Footprint profile with the specified
        properties.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param profile_name: Name of the Footprint profile resource.
        :type profile_name: str
        :param measurement_endpoint_name: Name of the Footprint measurement endpoint resource.
        :type measurement_endpoint_name: str
        :param endpoint: The value of a measurement endpoint.
        :type endpoint: str
        :param measurement_type: The type of a measurement endpoint.
        :type measurement_type: int
        :param weight: The weight of a measurement endpoint, higher weight means higher priority.
        :type weight: int
        :param description: The description of a measurement endpoint.
        :type description: str
        :param experiment_id: The id of an experiment that a measurement endpoint is part of.
        :type experiment_id: str
        :param object_path: The path of the object that a measurement endpoint points to.
        :type object_path: str
        :param start_time_utc: The start time that a measurement endpoint should be served.
        :type start_time_utc: ~datetime.datetime
        :param end_time_utc: The end time that a measurement endpoint should be served.
        :type end_time_utc: ~datetime.datetime
        :param hot_path_sampling_percentage_rate: The percentual sampling rate for the hot path logging
         of a measurement endpoint.
        :type hot_path_sampling_percentage_rate: float
        :param warm_path_sampling_percentage_rate: The percentual sampling rate for the warm path
         logging of a measurement endpoint.
        :type warm_path_sampling_percentage_rate: float
        :param cold_path_sampling_percentage_rate_override: The percentual sampling rate for the cold
         path logging of a measurement endpoint.
        :type cold_path_sampling_percentage_rate_override: float
        :param metadata: The metadata of a measurement endpoint.
        :type metadata: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: MeasurementEndpoint, or the result of cls(response)
        :rtype: ~footprint_monitoring_management_client.models.MeasurementEndpoint
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.MeasurementEndpoint"]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))

        _parameters = models.MeasurementEndpoint(description=description, endpoint=endpoint, measurement_type=measurement_type, weight=weight, experiment_id=experiment_id, object_path=object_path, start_time_utc=start_time_utc, end_time_utc=end_time_utc, hot_path_sampling_percentage_rate=hot_path_sampling_percentage_rate, warm_path_sampling_percentage_rate=warm_path_sampling_percentage_rate, cold_path_sampling_percentage_rate_override=cold_path_sampling_percentage_rate_override, metadata=metadata)
        api_version = "2020-02-01-preview"
        content_type = kwargs.pop("content_type", "application/json")

        # Construct URL
        url = self.create_or_update.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
            'profileName': self._serialize.url("profile_name", profile_name, 'str', max_length=64, min_length=3, pattern=r'^[a-zA-Z0-9]'),
            'measurementEndpointName': self._serialize.url("measurement_endpoint_name", measurement_endpoint_name, 'str', max_length=64, min_length=5, pattern=r'^[a-zA-Z0-9]'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = 'application/json'

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(_parameters, 'MeasurementEndpoint')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)

        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.DefaultErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if response.status_code == 200:
            deserialized = self._deserialize('MeasurementEndpoint', pipeline_response)

        if response.status_code == 201:
            deserialized = self._deserialize('MeasurementEndpoint', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FootprintMonitoring/profiles/{profileName}/measurementEndpoints/{measurementEndpointName}'}  # type: ignore

    def delete(
        self,
        resource_group_name,  # type: str
        profile_name,  # type: str
        measurement_endpoint_name,  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Deletes a measurement endpoint under a Footprint profile resource.

        Deletes an existing measurement endpoint under a Footprint profile.

        :param resource_group_name: The name of the resource group.
        :type resource_group_name: str
        :param profile_name: Name of the Footprint profile resource.
        :type profile_name: str
        :param measurement_endpoint_name: Name of the Footprint measurement endpoint resource.
        :type measurement_endpoint_name: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {404: ResourceNotFoundError, 409: ResourceExistsError}
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-02-01-preview"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str'),
            'resourceGroupName': self._serialize.url("resource_group_name", resource_group_name, 'str', max_length=90, min_length=1),
            'profileName': self._serialize.url("profile_name", profile_name, 'str', max_length=64, min_length=3, pattern=r'^[a-zA-Z0-9]'),
            'measurementEndpointName': self._serialize.url("measurement_endpoint_name", measurement_endpoint_name, 'str', max_length=64, min_length=5, pattern=r'^[a-zA-Z0-9]'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.DefaultErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.FootprintMonitoring/profiles/{profileName}/measurementEndpoints/{measurementEndpointName}'}  # type: ignore
