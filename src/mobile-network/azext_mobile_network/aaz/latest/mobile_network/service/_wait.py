# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network service wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/mobilenetworks/{}/services/{}", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.mobile_network_name = AAZStrArg(
            options=["--mobile-network-name"],
            help="The name of the mobile network.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.service_name = AAZStrArg(
            options=["-n", "--name", "--service-name"],
            help="The name of the service. You must not use any of the following reserved strings - `default`, `requested` or `service`",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^(?!(default|requested|service)$)[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ServicesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ServicesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/services/{serviceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "mobileNetworkName", self.ctx.args.mobile_network_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serviceName", self.ctx.args.service_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.pcc_rules = AAZListType(
                serialized_name="pccRules",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.service_precedence = AAZIntType(
                serialized_name="servicePrecedence",
                flags={"required": True},
            )
            properties.service_qos_policy = AAZObjectType(
                serialized_name="serviceQosPolicy",
            )

            pcc_rules = cls._schema_on_200.properties.pcc_rules
            pcc_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.pcc_rules.Element
            _element.rule_name = AAZStrType(
                serialized_name="ruleName",
                flags={"required": True},
            )
            _element.rule_precedence = AAZIntType(
                serialized_name="rulePrecedence",
                flags={"required": True},
            )
            _element.rule_qos_policy = AAZObjectType(
                serialized_name="ruleQosPolicy",
            )
            _element.service_data_flow_templates = AAZListType(
                serialized_name="serviceDataFlowTemplates",
                flags={"required": True},
            )
            _element.traffic_control = AAZStrType(
                serialized_name="trafficControl",
            )

            rule_qos_policy = cls._schema_on_200.properties.pcc_rules.Element.rule_qos_policy
            rule_qos_policy["5qi"] = AAZIntType()
            rule_qos_policy.allocation_and_retention_priority_level = AAZIntType(
                serialized_name="allocationAndRetentionPriorityLevel",
            )
            rule_qos_policy.guaranteed_bit_rate = AAZObjectType(
                serialized_name="guaranteedBitRate",
            )
            _WaitHelper._build_schema_ambr_read(rule_qos_policy.guaranteed_bit_rate)
            rule_qos_policy.maximum_bit_rate = AAZObjectType(
                serialized_name="maximumBitRate",
                flags={"required": True},
            )
            _WaitHelper._build_schema_ambr_read(rule_qos_policy.maximum_bit_rate)
            rule_qos_policy.preemption_capability = AAZStrType(
                serialized_name="preemptionCapability",
            )
            rule_qos_policy.preemption_vulnerability = AAZStrType(
                serialized_name="preemptionVulnerability",
            )

            service_data_flow_templates = cls._schema_on_200.properties.pcc_rules.Element.service_data_flow_templates
            service_data_flow_templates.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.pcc_rules.Element.service_data_flow_templates.Element
            _element.direction = AAZStrType(
                flags={"required": True},
            )
            _element.ports = AAZListType()
            _element.protocol = AAZListType(
                flags={"required": True},
            )
            _element.remote_ip_list = AAZListType(
                serialized_name="remoteIpList",
                flags={"required": True},
            )
            _element.template_name = AAZStrType(
                serialized_name="templateName",
                flags={"required": True},
            )

            ports = cls._schema_on_200.properties.pcc_rules.Element.service_data_flow_templates.Element.ports
            ports.Element = AAZStrType()

            protocol = cls._schema_on_200.properties.pcc_rules.Element.service_data_flow_templates.Element.protocol
            protocol.Element = AAZStrType()

            remote_ip_list = cls._schema_on_200.properties.pcc_rules.Element.service_data_flow_templates.Element.remote_ip_list
            remote_ip_list.Element = AAZStrType()

            service_qos_policy = cls._schema_on_200.properties.service_qos_policy
            service_qos_policy["5qi"] = AAZIntType()
            service_qos_policy.allocation_and_retention_priority_level = AAZIntType(
                serialized_name="allocationAndRetentionPriorityLevel",
            )
            service_qos_policy.maximum_bit_rate = AAZObjectType(
                serialized_name="maximumBitRate",
                flags={"required": True},
            )
            _WaitHelper._build_schema_ambr_read(service_qos_policy.maximum_bit_rate)
            service_qos_policy.preemption_capability = AAZStrType(
                serialized_name="preemptionCapability",
            )
            service_qos_policy.preemption_vulnerability = AAZStrType(
                serialized_name="preemptionVulnerability",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_ambr_read = None

    @classmethod
    def _build_schema_ambr_read(cls, _schema):
        if cls._schema_ambr_read is not None:
            _schema.downlink = cls._schema_ambr_read.downlink
            _schema.uplink = cls._schema_ambr_read.uplink
            return

        cls._schema_ambr_read = _schema_ambr_read = AAZObjectType()

        ambr_read = _schema_ambr_read
        ambr_read.downlink = AAZStrType(
            flags={"required": True},
        )
        ambr_read.uplink = AAZStrType(
            flags={"required": True},
        )

        _schema.downlink = cls._schema_ambr_read.downlink
        _schema.uplink = cls._schema_ambr_read.uplink


__all__ = ["Wait"]
