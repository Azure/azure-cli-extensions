# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network sim group bulk-upload-sims",
)
class BulkUploadSims(AAZCommand):
    """Bulk upload SIMs to a SIM group.

    :example: Uploading multiple sims with to a sim group
        az mobile-network sim group bulk-upload-sims -g rg --sim-group-name SimGroup --sims "[{name:bulk-upload-sim-01,authentication-key:00000000000000000000000000000000,operator-key-code:00000000000000000000000000000000,international-msi:0000000000},{name:bulk-upload-sim-02,authentication-key:00000000000000000000000000000001,operator-key-code:00000000000000000000000000000001,international-msi:0000000001}]"
        az mobile-network sim group bulk-upload-sims -g rg --sim-group-name SimGroup --sims "[{name:bulk-upload-sim-01,authentication-key:00000000000000000000000000000000,operator-key-code:00000000000000000000000000000000,international-msi:0000000000,icc-id:00000000000000000000,device-type:camera,sim-policy:{id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MobileNetwork/mobileNetworks/mobile-network/simPolicies/policy01},static-ip-configuration:[{attached-data-network:{id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/pccp01/packetCoreDataPlanes/pccp01/attachedDataNetworks/internet1},slice:{id:/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg/providers/Microsoft.MobileNetwork/mobileNetworks/mobile-network/slices/slice01},static-ip:{ipv4-address:2.4.0.10}}]}]"
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/simgroups/{}/uploadsims", "2022-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.sim_group_name = AAZStrArg(
            options=["--sim-group-name"],
            help="The name of the SIM Group.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.sims = AAZListArg(
            options=["--sims"],
            arg_group="Parameters",
            help="A list of SIMs to upload.",
            required=True,
        )

        sims = cls._args_schema.sims
        sims.Element = AAZObjectArg()

        _element = cls._args_schema.sims.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="The name of the SIM.",
            required=True,
        )
        _element.authentication_key = AAZStrArg(
            options=["authentication-key"],
            help="The Ki value for the SIM.",
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-fA-F]{32}$",
            ),
        )
        _element.device_type = AAZStrArg(
            options=["device-type"],
            help="An optional free-form text field that can be used to record the device type this SIM is associated with, for example 'Video camera'. The Azure portal allows SIMs to be grouped and filtered based on this value.",
        )
        _element.icc_id = AAZStrArg(
            options=["icc-id"],
            help="The integrated circuit card ID (ICCID) for the SIM.",
            fmt=AAZStrArgFormat(
                pattern="^[0-9]{10,20}$",
            ),
        )
        _element.international_msi = AAZStrArg(
            options=["international-msi"],
            help="The international mobile subscriber identity (IMSI) for the SIM.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9]{5,15}$",
            ),
        )
        _element.operator_key_code = AAZStrArg(
            options=["operator-key-code"],
            help="The Opc value for the SIM.",
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-fA-F]{32}$",
            ),
        )
        _element.sim_policy = AAZObjectArg(
            options=["sim-policy"],
            help="The SIM policy used by this SIM. The SIM policy must be in the same location as the SIM.",
        )
        _element.static_ip_configuration = AAZListArg(
            options=["static-ip-configuration"],
            help="A list of static IP addresses assigned to this SIM. Each address is assigned at a defined network scope, made up of {attached data network, slice}.",
            fmt=AAZListArgFormat(
                unique=True,
            ),
        )

        sim_policy = cls._args_schema.sims.Element.sim_policy
        sim_policy.id = AAZStrArg(
            options=["id"],
            help="SIM policy resource ID.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]/[^/?#]+/[sS][iI][mM][pP][oO][lL][iI][cC][iI][eE][sS]/[^/?#]+$",
            ),
        )

        static_ip_configuration = cls._args_schema.sims.Element.static_ip_configuration
        static_ip_configuration.Element = AAZObjectArg()

        _element = cls._args_schema.sims.Element.static_ip_configuration.Element
        _element.attached_data_network = AAZObjectArg(
            options=["attached-data-network"],
            help="The attached data network on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The attached data network must be in the same location as the SIM.",
        )
        _element.slice = AAZObjectArg(
            options=["slice"],
            help="The network slice on which the static IP address will be used. The combination of attached data network and slice defines the network scope of the IP address. The slice must be in the same location as the SIM.",
        )
        _element.static_ip = AAZObjectArg(
            options=["static-ip"],
            help="The static IP configuration for the SIM to use at the defined network scope.",
        )

        attached_data_network = cls._args_schema.sims.Element.static_ip_configuration.Element.attached_data_network
        attached_data_network.id = AAZStrArg(
            options=["id"],
            help="Attached data network resource ID.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]/[pP][aA][cC][kK][eE][tT][cC][oO][rR][eE][cC][oO][nN][tT][rR][oO][lL][pP][lL][aA][nN][eE][sS]/[^/?#]+/[pP][aA][cC][kK][eE][tT][cC][oO][rR][eE][dD][aA][tT][aA][pP][lL][aA][nN][eE][sS]/[^/?#]+/[aA][tT][tT][aA][cC][hH][eE][dD][dD][aA][tT][aA][nN][eE][tT][wW][oO][rR][kK][sS]/[^/?#]+$",
            ),
        )

        slice = cls._args_schema.sims.Element.static_ip_configuration.Element.slice
        slice.id = AAZStrArg(
            options=["id"],
            help="Slice resource ID.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]/[^/?#]+/[sS][lL][iI][cC][eE][sS]/[^/?#]+$",
            ),
        )

        static_ip = cls._args_schema.sims.Element.static_ip_configuration.Element.static_ip
        static_ip.ipv4_address = AAZStrArg(
            options=["ipv4-address"],
            help="The IPv4 address assigned to the SIM at this network scope. This address must be in the userEquipmentStaticAddressPoolPrefix defined in the attached data network.",
            fmt=AAZStrArgFormat(
                pattern="^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SimsBulkUpload(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SimsBulkUpload(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/uploadSims",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "simGroupName", self.ctx.args.sim_group_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("sims", AAZListType, ".sims", typ_kwargs={"flags": {"required": True}})

            sims = _builder.get(".sims")
            if sims is not None:
                sims.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".sims[]")
            if _elements is not None:
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})

            properties = _builder.get(".sims[].properties")
            if properties is not None:
                properties.set_prop("authenticationKey", AAZStrType, ".authentication_key", typ_kwargs={"flags": {"secret": True}})
                properties.set_prop("deviceType", AAZStrType, ".device_type")
                properties.set_prop("integratedCircuitCardIdentifier", AAZStrType, ".icc_id")
                properties.set_prop("internationalMobileSubscriberIdentity", AAZStrType, ".international_msi", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("operatorKeyCode", AAZStrType, ".operator_key_code", typ_kwargs={"flags": {"secret": True}})
                properties.set_prop("simPolicy", AAZObjectType, ".sim_policy")
                properties.set_prop("staticIpConfiguration", AAZListType, ".static_ip_configuration")

            sim_policy = _builder.get(".sims[].properties.simPolicy")
            if sim_policy is not None:
                sim_policy.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            static_ip_configuration = _builder.get(".sims[].properties.staticIpConfiguration")
            if static_ip_configuration is not None:
                static_ip_configuration.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".sims[].properties.staticIpConfiguration[]")
            if _elements is not None:
                _elements.set_prop("attachedDataNetwork", AAZObjectType, ".attached_data_network")
                _elements.set_prop("slice", AAZObjectType, ".slice")
                _elements.set_prop("staticIp", AAZObjectType, ".static_ip")

            attached_data_network = _builder.get(".sims[].properties.staticIpConfiguration[].attachedDataNetwork")
            if attached_data_network is not None:
                attached_data_network.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            slice = _builder.get(".sims[].properties.staticIpConfiguration[].slice")
            if slice is not None:
                slice.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            static_ip = _builder.get(".sims[].properties.staticIpConfiguration[].staticIp")
            if static_ip is not None:
                static_ip.set_prop("ipv4Address", AAZStrType, ".ipv4_address")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.end_time = AAZStrType(
                serialized_name="endTime",
            )
            _schema_on_200.error = AAZObjectType()
            _BulkUploadSimsHelper._build_schema_error_detail_read(_schema_on_200.error)
            _schema_on_200.id = AAZStrType()
            _schema_on_200.name = AAZStrType()
            _schema_on_200.percent_complete = AAZFloatType(
                serialized_name="percentComplete",
            )
            _schema_on_200.resource_id = AAZStrType(
                serialized_name="resourceId",
            )
            _schema_on_200.start_time = AAZStrType(
                serialized_name="startTime",
            )
            _schema_on_200.status = AAZStrType(
                flags={"required": True},
            )

            return cls._schema_on_200


class _BulkUploadSimsHelper:
    """Helper class for BulkUploadSims"""

    _schema_error_detail_read = None

    @classmethod
    def _build_schema_error_detail_read(cls, _schema):
        if cls._schema_error_detail_read is not None:
            _schema.additional_info = cls._schema_error_detail_read.additional_info
            _schema.code = cls._schema_error_detail_read.code
            _schema.details = cls._schema_error_detail_read.details
            _schema.message = cls._schema_error_detail_read.message
            _schema.target = cls._schema_error_detail_read.target
            return

        cls._schema_error_detail_read = _schema_error_detail_read = AAZObjectType()

        error_detail_read = _schema_error_detail_read
        error_detail_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
            flags={"read_only": True},
        )
        error_detail_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_detail_read.message = AAZStrType(
            flags={"read_only": True},
        )
        error_detail_read.target = AAZStrType(
            flags={"read_only": True},
        )

        additional_info = _schema_error_detail_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_error_detail_read.additional_info.Element
        _element.type = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_detail_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_detail_read(details.Element)

        _schema.additional_info = cls._schema_error_detail_read.additional_info
        _schema.code = cls._schema_error_detail_read.code
        _schema.details = cls._schema_error_detail_read.details
        _schema.message = cls._schema_error_detail_read.message
        _schema.target = cls._schema_error_detail_read.target


__all__ = ["BulkUploadSims"]
