# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network sim policy show",
)
class Show(AAZCommand):
    """Get information about the specified SIM policy.

    :example: Show sim policy
        az mobile-network sim policy show -g rg -n sim-policy-name --mobile-network-name mobile-network-name
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/mobilenetworks/{}/simpolicies/{}", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.mobile_network_name = AAZStrArg(
            options=["--mobile-network-name"],
            help="The name of the mobile network.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.sim_policy_name = AAZStrArg(
            options=["-n", "--name", "--sim-policy-name"],
            help="The name of the SIM policy.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SimPoliciesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SimPoliciesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/mobileNetworks/{mobileNetworkName}/simPolicies/{simPolicyName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "mobileNetworkName", self.ctx.args.mobile_network_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "simPolicyName", self.ctx.args.sim_policy_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.default_slice = AAZObjectType(
                serialized_name="defaultSlice",
                flags={"required": True},
            )
            _ShowHelper._build_schema_slice_resource_id_read(properties.default_slice)
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.registration_timer = AAZIntType(
                serialized_name="registrationTimer",
            )
            properties.rfsp_index = AAZIntType(
                serialized_name="rfspIndex",
            )
            properties.site_provisioning_state = AAZDictType(
                serialized_name="siteProvisioningState",
                flags={"read_only": True},
            )
            properties.slice_configurations = AAZListType(
                serialized_name="sliceConfigurations",
                flags={"required": True},
            )
            properties.ue_ambr = AAZObjectType(
                serialized_name="ueAmbr",
                flags={"required": True},
            )
            _ShowHelper._build_schema_ambr_read(properties.ue_ambr)

            site_provisioning_state = cls._schema_on_200.properties.site_provisioning_state
            site_provisioning_state.Element = AAZStrType(
                flags={"read_only": True},
            )

            slice_configurations = cls._schema_on_200.properties.slice_configurations
            slice_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.slice_configurations.Element
            _element.data_network_configurations = AAZListType(
                serialized_name="dataNetworkConfigurations",
                flags={"required": True},
            )
            _element.default_data_network = AAZObjectType(
                serialized_name="defaultDataNetwork",
                flags={"required": True},
            )
            _ShowHelper._build_schema_data_network_resource_id_read(_element.default_data_network)
            _element.slice = AAZObjectType(
                flags={"required": True},
            )
            _ShowHelper._build_schema_slice_resource_id_read(_element.slice)

            data_network_configurations = cls._schema_on_200.properties.slice_configurations.Element.data_network_configurations
            data_network_configurations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.slice_configurations.Element.data_network_configurations.Element
            _element["5qi"] = AAZIntType()
            _element.additional_allowed_session_types = AAZListType(
                serialized_name="additionalAllowedSessionTypes",
            )
            _element.allocation_and_retention_priority_level = AAZIntType(
                serialized_name="allocationAndRetentionPriorityLevel",
            )
            _element.allowed_services = AAZListType(
                serialized_name="allowedServices",
                flags={"required": True},
            )
            _element.data_network = AAZObjectType(
                serialized_name="dataNetwork",
                flags={"required": True},
            )
            _ShowHelper._build_schema_data_network_resource_id_read(_element.data_network)
            _element.default_session_type = AAZStrType(
                serialized_name="defaultSessionType",
            )
            _element.maximum_number_of_buffered_packets = AAZIntType(
                serialized_name="maximumNumberOfBufferedPackets",
            )
            _element.preemption_capability = AAZStrType(
                serialized_name="preemptionCapability",
            )
            _element.preemption_vulnerability = AAZStrType(
                serialized_name="preemptionVulnerability",
            )
            _element.session_ambr = AAZObjectType(
                serialized_name="sessionAmbr",
                flags={"required": True},
            )
            _ShowHelper._build_schema_ambr_read(_element.session_ambr)

            additional_allowed_session_types = cls._schema_on_200.properties.slice_configurations.Element.data_network_configurations.Element.additional_allowed_session_types
            additional_allowed_session_types.Element = AAZStrType()

            allowed_services = cls._schema_on_200.properties.slice_configurations.Element.data_network_configurations.Element.allowed_services
            allowed_services.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.slice_configurations.Element.data_network_configurations.Element.allowed_services.Element
            _element.id = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_ambr_read = None

    @classmethod
    def _build_schema_ambr_read(cls, _schema):
        if cls._schema_ambr_read is not None:
            _schema.downlink = cls._schema_ambr_read.downlink
            _schema.uplink = cls._schema_ambr_read.uplink
            return

        cls._schema_ambr_read = _schema_ambr_read = AAZObjectType()

        ambr_read = _schema_ambr_read
        ambr_read.downlink = AAZStrType(
            flags={"required": True},
        )
        ambr_read.uplink = AAZStrType(
            flags={"required": True},
        )

        _schema.downlink = cls._schema_ambr_read.downlink
        _schema.uplink = cls._schema_ambr_read.uplink

    _schema_data_network_resource_id_read = None

    @classmethod
    def _build_schema_data_network_resource_id_read(cls, _schema):
        if cls._schema_data_network_resource_id_read is not None:
            _schema.id = cls._schema_data_network_resource_id_read.id
            return

        cls._schema_data_network_resource_id_read = _schema_data_network_resource_id_read = AAZObjectType()

        data_network_resource_id_read = _schema_data_network_resource_id_read
        data_network_resource_id_read.id = AAZStrType(
            flags={"required": True},
        )

        _schema.id = cls._schema_data_network_resource_id_read.id

    _schema_slice_resource_id_read = None

    @classmethod
    def _build_schema_slice_resource_id_read(cls, _schema):
        if cls._schema_slice_resource_id_read is not None:
            _schema.id = cls._schema_slice_resource_id_read.id
            return

        cls._schema_slice_resource_id_read = _schema_slice_resource_id_read = AAZObjectType()

        slice_resource_id_read = _schema_slice_resource_id_read
        slice_resource_id_read.id = AAZStrType(
            flags={"required": True},
        )

        _schema.id = cls._schema_slice_resource_id_read.id


__all__ = ["Show"]
