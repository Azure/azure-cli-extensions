# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network sim activate",
)
class Activate(AAZCommand):
    """Activates the specified sim.
    """

    _aaz_info = {
        "version": "2021-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/sims/{}/activate", "2021-04-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.sim_name = AAZStrArg(
            options=["--sim-name"],
            help="The name of the SIM.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.SimsActivate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SimsActivate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/sims/{simName}/activate",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "simName", self.ctx.args.sim_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _build_schema_sim_read(cls._schema_on_200)

            return cls._schema_on_200


_schema_sim_read = None


def _build_schema_sim_read(_schema):
    global _schema_sim_read
    if _schema_sim_read is not None:
        _schema.id = _schema_sim_read.id
        _schema.location = _schema_sim_read.location
        _schema.name = _schema_sim_read.name
        _schema.properties = _schema_sim_read.properties
        _schema.system_data = _schema_sim_read.system_data
        _schema.tags = _schema_sim_read.tags
        _schema.type = _schema_sim_read.type
        return

    _schema_sim_read = AAZObjectType()

    sim_read = _schema_sim_read
    sim_read.id = AAZStrType(
        flags={"read_only": True},
    )
    sim_read.location = AAZStrType(
        flags={"required": True},
    )
    sim_read.name = AAZStrType(
        flags={"read_only": True},
    )
    sim_read.properties = AAZObjectType(
        flags={"required": True, "client_flatten": True},
    )
    sim_read.system_data = AAZObjectType(
        serialized_name="systemData",
        flags={"client_flatten": True, "read_only": True},
    )
    sim_read.tags = AAZDictType()
    sim_read.type = AAZStrType(
        flags={"read_only": True},
    )

    properties = _schema_sim_read.properties
    properties.activation_state = AAZStrType(
        serialized_name="activationState",
        flags={"read_only": True},
    )
    properties.device_type = AAZStrType(
        serialized_name="deviceType",
    )
    properties.integrated_circuit_card_identifier = AAZStrType(
        serialized_name="integratedCircuitCardIdentifier",
    )
    properties.international_mobile_subscriber_identity = AAZStrType(
        serialized_name="internationalMobileSubscriberIdentity",
        flags={"required": True},
    )
    properties.mobile_network = AAZObjectType(
        serialized_name="mobileNetwork",
    )
    properties.provisioning_state = AAZStrType(
        serialized_name="provisioningState",
        flags={"read_only": True},
    )
    properties.sim_policy = AAZObjectType(
        serialized_name="simPolicy",
    )
    properties.sim_state = AAZStrType(
        serialized_name="simState",
        flags={"read_only": True},
    )
    properties.static_ip_configuration = AAZListType(
        serialized_name="staticIpConfiguration",
    )

    mobile_network = _schema_sim_read.properties.mobile_network
    mobile_network.id = AAZStrType(
        flags={"required": True},
    )

    sim_policy = _schema_sim_read.properties.sim_policy
    sim_policy.id = AAZStrType(
        flags={"required": True},
    )

    static_ip_configuration = _schema_sim_read.properties.static_ip_configuration
    static_ip_configuration.Element = AAZObjectType()

    _element = _schema_sim_read.properties.static_ip_configuration.Element
    _element.attached_data_network = AAZObjectType(
        serialized_name="attachedDataNetwork",
    )
    _element.slice = AAZObjectType()
    _element.static_ip = AAZObjectType(
        serialized_name="staticIp",
    )

    attached_data_network = _schema_sim_read.properties.static_ip_configuration.Element.attached_data_network
    attached_data_network.id = AAZStrType(
        flags={"required": True},
    )

    slice = _schema_sim_read.properties.static_ip_configuration.Element.slice
    slice.id = AAZStrType(
        flags={"required": True},
    )

    static_ip = _schema_sim_read.properties.static_ip_configuration.Element.static_ip
    static_ip.ipv4_address = AAZStrType(
        serialized_name="ipv4Address",
    )

    system_data = _schema_sim_read.system_data
    system_data.created_at = AAZStrType(
        serialized_name="createdAt",
    )
    system_data.created_by = AAZStrType(
        serialized_name="createdBy",
    )
    system_data.created_by_type = AAZStrType(
        serialized_name="createdByType",
    )
    system_data.last_modified_at = AAZStrType(
        serialized_name="lastModifiedAt",
    )
    system_data.last_modified_by = AAZStrType(
        serialized_name="lastModifiedBy",
    )
    system_data.last_modified_by_type = AAZStrType(
        serialized_name="lastModifiedByType",
    )

    tags = _schema_sim_read.tags
    tags.Element = AAZStrType()

    _schema.id = _schema_sim_read.id
    _schema.location = _schema_sim_read.location
    _schema.name = _schema_sim_read.name
    _schema.properties = _schema_sim_read.properties
    _schema.system_data = _schema_sim_read.system_data
    _schema.tags = _schema_sim_read.tags
    _schema.type = _schema_sim_read.type


__all__ = ["Activate"]
