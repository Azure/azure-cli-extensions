# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network sim wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/simgroups/{}/sims/{}", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.sim_group_name = AAZStrArg(
            options=["--sim-group-name"],
            help="The name of the SIM Group.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        _args_schema.sim_name = AAZStrArg(
            options=["-n", "--name", "--sim-name"],
            help="The name of the SIM.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.SimsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class SimsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/simGroups/{simGroupName}/sims/{simName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "simGroupName", self.ctx.args.sim_group_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "simName", self.ctx.args.sim_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.device_type = AAZStrType(
                serialized_name="deviceType",
            )
            properties.integrated_circuit_card_identifier = AAZStrType(
                serialized_name="integratedCircuitCardIdentifier",
            )
            properties.international_mobile_subscriber_identity = AAZStrType(
                serialized_name="internationalMobileSubscriberIdentity",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.sim_policy = AAZObjectType(
                serialized_name="simPolicy",
            )
            properties.sim_state = AAZStrType(
                serialized_name="simState",
                flags={"read_only": True},
            )
            properties.site_provisioning_state = AAZDictType(
                serialized_name="siteProvisioningState",
                flags={"read_only": True},
            )
            properties.static_ip_configuration = AAZListType(
                serialized_name="staticIpConfiguration",
            )
            properties.vendor_key_fingerprint = AAZStrType(
                serialized_name="vendorKeyFingerprint",
                flags={"read_only": True},
            )
            properties.vendor_name = AAZStrType(
                serialized_name="vendorName",
                flags={"read_only": True},
            )

            sim_policy = cls._schema_on_200.properties.sim_policy
            sim_policy.id = AAZStrType(
                flags={"required": True},
            )

            site_provisioning_state = cls._schema_on_200.properties.site_provisioning_state
            site_provisioning_state.Element = AAZStrType(
                flags={"read_only": True},
            )

            static_ip_configuration = cls._schema_on_200.properties.static_ip_configuration
            static_ip_configuration.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.static_ip_configuration.Element
            _element.attached_data_network = AAZObjectType(
                serialized_name="attachedDataNetwork",
            )
            _element.slice = AAZObjectType()
            _element.static_ip = AAZObjectType(
                serialized_name="staticIp",
            )

            attached_data_network = cls._schema_on_200.properties.static_ip_configuration.Element.attached_data_network
            attached_data_network.id = AAZStrType(
                flags={"required": True},
            )

            slice = cls._schema_on_200.properties.static_ip_configuration.Element.slice
            slice.id = AAZStrType(
                flags={"required": True},
            )

            static_ip = cls._schema_on_200.properties.static_ip_configuration.Element.static_ip
            static_ip.ipv4_address = AAZStrType(
                serialized_name="ipv4Address",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""


__all__ = ["Wait"]
