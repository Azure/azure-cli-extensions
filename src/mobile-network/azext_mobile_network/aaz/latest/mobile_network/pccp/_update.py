# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "mobile-network pccp update",
)
class Update(AAZCommand):
    """Update a packet core control plane.

    :example: Update Packet Core Control Plane tags
        az mobile-network pccp update -n pccp-name -g rg --ue-mtu 1500 --tags "{tag:test,tag2:test2}"
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.mobilenetwork/packetcorecontrolplanes/{}", "2022-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.pccp_name = AAZStrArg(
            options=["-n", "--name", "--pccp-name"],
            help="The name of the packet core control plane.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9][a-zA-Z0-9_-]*$",
                max_length=64,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Parameters"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Parameters",
            help="The identity used to retrieve the ingress certificate from Azure key vault.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Parameters",
            help="Resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
            enum={"None": "None", "SystemAssigned": "SystemAssigned", "SystemAssigned,UserAssigned": "SystemAssigned,UserAssigned", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.access_interface = AAZObjectArg(
            options=["--access-interface"],
            arg_group="Properties",
            help="The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is the S1-MME interface.",
        )
        _args_schema.core_network_tec = AAZStrArg(
            options=["--core-network-tec"],
            arg_group="Properties",
            help="The core network technology generation (5G core or EPC / 4G core).",
            nullable=True,
            enum={"5GC": "5GC", "EPC": "EPC"},
        )
        _args_schema.local_diagnostics = AAZObjectArg(
            options=["--local-diagnostics"],
            arg_group="Properties",
            help="The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.",
        )
        _args_schema.platform = AAZObjectArg(
            options=["--platform"],
            arg_group="Properties",
            help="The platform where the packet core is deployed.",
        )
        _args_schema.sites = AAZListArg(
            options=["--sites"],
            arg_group="Properties",
            help="Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane.",
            fmt=AAZListArgFormat(
                unique=True,
            ),
        )
        _args_schema.sku = AAZStrArg(
            options=["--sku"],
            arg_group="Properties",
            help="The SKU defining the throughput and SIM allowances for this packet core control plane deployment.",
            enum={"G0": "G0", "G1": "G1", "G10": "G10", "G2": "G2", "G3": "G3", "G4": "G4", "G5": "G5"},
        )
        _args_schema.ue_mtu = AAZIntArg(
            options=["--ue-mtu"],
            arg_group="Properties",
            help="The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.",
            nullable=True,
            fmt=AAZIntArgFormat(
                maximum=1930,
                minimum=1280,
            ),
        )
        _args_schema.version = AAZStrArg(
            options=["--version"],
            arg_group="Properties",
            help="The version of the packet core software that is deployed.",
            nullable=True,
        )

        access_interface = cls._args_schema.access_interface
        access_interface.ipv4_address = AAZStrArg(
            options=["ipv4-address"],
            help="The IPv4 address.",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$",
            ),
        )
        access_interface.ipv4_gateway = AAZStrArg(
            options=["ipv4-gateway"],
            help="The default IPv4 gateway (router).",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$",
            ),
        )
        access_interface.ipv4_subnet = AAZStrArg(
            options=["ipv4-subnet"],
            help="The IPv4 subnet.",
            nullable=True,
            fmt=AAZStrArgFormat(
                pattern="^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$",
            ),
        )
        access_interface.name = AAZStrArg(
            options=["name"],
            help="The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.",
            nullable=True,
        )

        local_diagnostics = cls._args_schema.local_diagnostics
        local_diagnostics.authentication_type = AAZStrArg(
            options=["authentication-type"],
            help="How to authenticate users who access local diagnostics APIs.",
            enum={"AAD": "AAD", "Password": "Password"},
        )
        local_diagnostics.https_server_certificate = AAZObjectArg(
            options=["https-server-certificate"],
            help="The HTTPS server TLS certificate used to secure local access to diagnostics.",
            nullable=True,
        )

        https_server_certificate = cls._args_schema.local_diagnostics.https_server_certificate
        https_server_certificate.certificate_url = AAZStrArg(
            options=["certificate-url"],
            help="The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.",
        )

        platform = cls._args_schema.platform
        platform.azure_stack_edge_device = AAZObjectArg(
            options=["azure-stack-edge-device"],
            help="The Azure Stack Edge device where where the packet core is deployed. If the device is part of a fault tolerant pair, either device in the pair can be specified.",
            nullable=True,
        )
        platform.azure_stack_hci_cluster = AAZObjectArg(
            options=["azure-stack-hci-cluster"],
            help="The Azure Stack HCI cluster where the packet core is deployed.",
            nullable=True,
        )
        platform.connected_cluster = AAZObjectArg(
            options=["connected-cluster"],
            help="Azure Arc connected cluster where the packet core is deployed.",
            nullable=True,
        )
        platform.custom_location = AAZObjectArg(
            options=["custom-location"],
            help="Azure Arc custom location where the packet core is deployed.",
            nullable=True,
        )
        platform.type = AAZStrArg(
            options=["type"],
            help="The platform type where packet core is deployed.",
            enum={"3P-AZURE-STACK-HCI": "3P-AZURE-STACK-HCI", "AKS-HCI": "AKS-HCI"},
        )

        azure_stack_edge_device = cls._args_schema.platform.azure_stack_edge_device
        azure_stack_edge_device.id = AAZStrArg(
            options=["id"],
            help="Azure Stack Edge device resource ID.",
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[dD][aA][tT][aA][bB][oO][xX][eE][dD][gG][eE]/[dD][aA][tT][aA][bB][oO][xX][eE][dD][gG][eE][dD][eE][vV][iI][cC][eE][sS]/[^/?#]+$",
            ),
        )

        azure_stack_hci_cluster = cls._args_schema.platform.azure_stack_hci_cluster
        azure_stack_hci_cluster.id = AAZStrArg(
            options=["id"],
            help="Azure Stack HCI cluster resource ID.",
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[aA][zZ][uU][rR][eE][sS][tT][aA][cC][kK][hH][cC][iI]/[cC][lL][uU][sS][tT][eE][rR][sS]/[^/?#]+$",
            ),
        )

        connected_cluster = cls._args_schema.platform.connected_cluster
        connected_cluster.id = AAZStrArg(
            options=["id"],
            help="Azure Arc connected cluster resource ID.",
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[kK][uU][bB][eE][rR][nN][eE][tT][eE][sS]/[cC][oO][nN][nN][eE][cC][tT][eE][dD][cC][lL][uU][sS][tT][eE][rR][sS]/[^/?#]+$",
            ),
        )

        custom_location = cls._args_schema.platform.custom_location
        custom_location.id = AAZStrArg(
            options=["id"],
            help="Azure Arc custom location resource ID.",
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[eE][xX][tT][eE][nN][dD][eE][dD][lL][oO][cC][aA][tT][iI][oO][nN]/[cC][uU][sS][tT][oO][mM][lL][oO][cC][aA][tT][iI][oO][nN][sS]/[^/?#]+$",
            ),
        )

        sites = cls._args_schema.sites
        sites.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.sites.Element
        _element.id = AAZStrArg(
            options=["id"],
            help="Site resource ID.",
            fmt=AAZStrArgFormat(
                pattern="^/[sS][uU][bB][sS][cC][rR][iI][pP][tT][iI][oO][nN][sS]/[^/?#]+/[rR][eE][sS][oO][uU][rR][cC][eE][gG][rR][oO][uU][pP][sS]/[^/?#]+/[pP][rR][oO][vV][iI][dD][eE][rR][sS]/[mM][iI][cC][rR][oO][sS][oO][fF][tT]\.[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK]/[mM][oO][bB][iI][lL][eE][nN][eE][tT][wW][oO][rR][kK][sS]/[^/?#]+/[sS][iI][tT][eE][sS]/[^/?#]+$",
            ),
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.PacketCoreControlPlanesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.PacketCoreControlPlanesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class PacketCoreControlPlanesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "packetCoreControlPlaneName", self.ctx.args.pccp_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_packet_core_control_plane_read(cls._schema_on_200)

            return cls._schema_on_200

    class PacketCoreControlPlanesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.MobileNetwork/packetCoreControlPlanes/{packetCoreControlPlaneName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "packetCoreControlPlaneName", self.ctx.args.pccp_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_packet_core_control_plane_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("controlPlaneAccessInterface", AAZObjectType, ".access_interface", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("coreNetworkTechnology", AAZStrType, ".core_network_tec")
                properties.set_prop("localDiagnosticsAccess", AAZObjectType, ".local_diagnostics", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("platform", AAZObjectType, ".platform", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("sites", AAZListType, ".sites", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("sku", AAZStrType, ".sku", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("ueMtu", AAZIntType, ".ue_mtu")
                properties.set_prop("version", AAZStrType, ".version")

            control_plane_access_interface = _builder.get(".properties.controlPlaneAccessInterface")
            if control_plane_access_interface is not None:
                control_plane_access_interface.set_prop("ipv4Address", AAZStrType, ".ipv4_address")
                control_plane_access_interface.set_prop("ipv4Gateway", AAZStrType, ".ipv4_gateway")
                control_plane_access_interface.set_prop("ipv4Subnet", AAZStrType, ".ipv4_subnet")
                control_plane_access_interface.set_prop("name", AAZStrType, ".name")

            local_diagnostics_access = _builder.get(".properties.localDiagnosticsAccess")
            if local_diagnostics_access is not None:
                local_diagnostics_access.set_prop("authenticationType", AAZStrType, ".authentication_type", typ_kwargs={"flags": {"required": True}})
                local_diagnostics_access.set_prop("httpsServerCertificate", AAZObjectType, ".https_server_certificate")

            https_server_certificate = _builder.get(".properties.localDiagnosticsAccess.httpsServerCertificate")
            if https_server_certificate is not None:
                https_server_certificate.set_prop("certificateUrl", AAZStrType, ".certificate_url", typ_kwargs={"flags": {"required": True}})

            platform = _builder.get(".properties.platform")
            if platform is not None:
                platform.set_prop("azureStackEdgeDevice", AAZObjectType, ".azure_stack_edge_device")
                platform.set_prop("azureStackHciCluster", AAZObjectType, ".azure_stack_hci_cluster")
                platform.set_prop("connectedCluster", AAZObjectType, ".connected_cluster")
                platform.set_prop("customLocation", AAZObjectType, ".custom_location")
                platform.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            azure_stack_edge_device = _builder.get(".properties.platform.azureStackEdgeDevice")
            if azure_stack_edge_device is not None:
                azure_stack_edge_device.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            azure_stack_hci_cluster = _builder.get(".properties.platform.azureStackHciCluster")
            if azure_stack_hci_cluster is not None:
                azure_stack_hci_cluster.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            connected_cluster = _builder.get(".properties.platform.connectedCluster")
            if connected_cluster is not None:
                connected_cluster.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            custom_location = _builder.get(".properties.platform.customLocation")
            if custom_location is not None:
                custom_location.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            sites = _builder.get(".properties.sites")
            if sites is not None:
                sites.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.sites[]")
            if _elements is not None:
                _elements.set_prop("id", AAZStrType, ".id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_azure_stack_edge_device_resource_id_read = None

    @classmethod
    def _build_schema_azure_stack_edge_device_resource_id_read(cls, _schema):
        if cls._schema_azure_stack_edge_device_resource_id_read is not None:
            _schema.id = cls._schema_azure_stack_edge_device_resource_id_read.id
            return

        cls._schema_azure_stack_edge_device_resource_id_read = _schema_azure_stack_edge_device_resource_id_read = AAZObjectType()

        azure_stack_edge_device_resource_id_read = _schema_azure_stack_edge_device_resource_id_read
        azure_stack_edge_device_resource_id_read.id = AAZStrType(
            flags={"required": True},
        )

        _schema.id = cls._schema_azure_stack_edge_device_resource_id_read.id

    _schema_packet_core_control_plane_read = None

    @classmethod
    def _build_schema_packet_core_control_plane_read(cls, _schema):
        if cls._schema_packet_core_control_plane_read is not None:
            _schema.id = cls._schema_packet_core_control_plane_read.id
            _schema.identity = cls._schema_packet_core_control_plane_read.identity
            _schema.location = cls._schema_packet_core_control_plane_read.location
            _schema.name = cls._schema_packet_core_control_plane_read.name
            _schema.properties = cls._schema_packet_core_control_plane_read.properties
            _schema.system_data = cls._schema_packet_core_control_plane_read.system_data
            _schema.tags = cls._schema_packet_core_control_plane_read.tags
            _schema.type = cls._schema_packet_core_control_plane_read.type
            return

        cls._schema_packet_core_control_plane_read = _schema_packet_core_control_plane_read = AAZObjectType()

        packet_core_control_plane_read = _schema_packet_core_control_plane_read
        packet_core_control_plane_read.id = AAZStrType(
            flags={"read_only": True},
        )
        packet_core_control_plane_read.identity = AAZObjectType()
        packet_core_control_plane_read.location = AAZStrType(
            flags={"required": True},
        )
        packet_core_control_plane_read.name = AAZStrType(
            flags={"read_only": True},
        )
        packet_core_control_plane_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        packet_core_control_plane_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        packet_core_control_plane_read.tags = AAZDictType()
        packet_core_control_plane_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_packet_core_control_plane_read.identity
        identity.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )
        identity.tenant_id = AAZStrType(
            serialized_name="tenantId",
            flags={"read_only": True},
        )
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_packet_core_control_plane_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_packet_core_control_plane_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_packet_core_control_plane_read.properties
        properties.control_plane_access_interface = AAZObjectType(
            serialized_name="controlPlaneAccessInterface",
            flags={"required": True},
        )
        properties.core_network_technology = AAZStrType(
            serialized_name="coreNetworkTechnology",
        )
        properties.installation = AAZObjectType()
        properties.local_diagnostics_access = AAZObjectType(
            serialized_name="localDiagnosticsAccess",
            flags={"required": True},
        )
        properties.platform = AAZObjectType(
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.rollback_version = AAZStrType(
            serialized_name="rollbackVersion",
            flags={"read_only": True},
        )
        properties.sites = AAZListType(
            flags={"required": True},
        )
        properties.sku = AAZStrType(
            flags={"required": True},
        )
        properties.ue_mtu = AAZIntType(
            serialized_name="ueMtu",
        )
        properties.version = AAZStrType()

        control_plane_access_interface = _schema_packet_core_control_plane_read.properties.control_plane_access_interface
        control_plane_access_interface.ipv4_address = AAZStrType(
            serialized_name="ipv4Address",
        )
        control_plane_access_interface.ipv4_gateway = AAZStrType(
            serialized_name="ipv4Gateway",
        )
        control_plane_access_interface.ipv4_subnet = AAZStrType(
            serialized_name="ipv4Subnet",
        )
        control_plane_access_interface.name = AAZStrType()

        installation = _schema_packet_core_control_plane_read.properties.installation
        installation.operation = AAZObjectType()
        installation.state = AAZStrType()

        operation = _schema_packet_core_control_plane_read.properties.installation.operation
        operation.id = AAZStrType(
            flags={"required": True},
        )

        local_diagnostics_access = _schema_packet_core_control_plane_read.properties.local_diagnostics_access
        local_diagnostics_access.authentication_type = AAZStrType(
            serialized_name="authenticationType",
            flags={"required": True},
        )
        local_diagnostics_access.https_server_certificate = AAZObjectType(
            serialized_name="httpsServerCertificate",
        )

        https_server_certificate = _schema_packet_core_control_plane_read.properties.local_diagnostics_access.https_server_certificate
        https_server_certificate.certificate_url = AAZStrType(
            serialized_name="certificateUrl",
            flags={"required": True},
        )
        https_server_certificate.provisioning = AAZObjectType()

        provisioning = _schema_packet_core_control_plane_read.properties.local_diagnostics_access.https_server_certificate.provisioning
        provisioning.reason = AAZStrType(
            flags={"read_only": True},
        )
        provisioning.state = AAZStrType(
            flags={"read_only": True},
        )

        platform = _schema_packet_core_control_plane_read.properties.platform
        platform.azure_stack_edge_device = AAZObjectType(
            serialized_name="azureStackEdgeDevice",
        )
        cls._build_schema_azure_stack_edge_device_resource_id_read(platform.azure_stack_edge_device)
        platform.azure_stack_edge_devices = AAZListType(
            serialized_name="azureStackEdgeDevices",
            flags={"read_only": True},
        )
        platform.azure_stack_hci_cluster = AAZObjectType(
            serialized_name="azureStackHciCluster",
        )
        platform.connected_cluster = AAZObjectType(
            serialized_name="connectedCluster",
        )
        platform.custom_location = AAZObjectType(
            serialized_name="customLocation",
        )
        platform.type = AAZStrType(
            flags={"required": True},
        )

        azure_stack_edge_devices = _schema_packet_core_control_plane_read.properties.platform.azure_stack_edge_devices
        azure_stack_edge_devices.Element = AAZObjectType()
        cls._build_schema_azure_stack_edge_device_resource_id_read(azure_stack_edge_devices.Element)

        azure_stack_hci_cluster = _schema_packet_core_control_plane_read.properties.platform.azure_stack_hci_cluster
        azure_stack_hci_cluster.id = AAZStrType(
            flags={"required": True},
        )

        connected_cluster = _schema_packet_core_control_plane_read.properties.platform.connected_cluster
        connected_cluster.id = AAZStrType(
            flags={"required": True},
        )

        custom_location = _schema_packet_core_control_plane_read.properties.platform.custom_location
        custom_location.id = AAZStrType(
            flags={"required": True},
        )

        sites = _schema_packet_core_control_plane_read.properties.sites
        sites.Element = AAZObjectType()

        _element = _schema_packet_core_control_plane_read.properties.sites.Element
        _element.id = AAZStrType(
            flags={"required": True},
        )

        system_data = _schema_packet_core_control_plane_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_packet_core_control_plane_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_packet_core_control_plane_read.id
        _schema.identity = cls._schema_packet_core_control_plane_read.identity
        _schema.location = cls._schema_packet_core_control_plane_read.location
        _schema.name = cls._schema_packet_core_control_plane_read.name
        _schema.properties = cls._schema_packet_core_control_plane_read.properties
        _schema.system_data = cls._schema_packet_core_control_plane_read.system_data
        _schema.tags = cls._schema_packet_core_control_plane_read.tags
        _schema.type = cls._schema_packet_core_control_plane_read.type


__all__ = ["Update"]
