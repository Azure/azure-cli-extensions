# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "databasewatcher create",
)
class Create(AAZCommand):
    """Create a Watcher
    """

    _aaz_info = {
        "version": "2025-01-02",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.databasewatcher/watchers/{}", "2025-01-02"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.watcher_name = AAZStrArg(
            options=["-n", "--name", "--watcher-name"],
            help="The database watcher name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9]{1}[a-zA-Z0-9-_]{3,60}$",
            ),
        )

        # define Arg Group "Identity"

        _args_schema = cls._args_schema
        _args_schema.mi_system_assigned = AAZStrArg(
            options=["--system-assigned", "--mi-system-assigned"],
            arg_group="Identity",
            help="Set the system managed identity.",
            blank="True",
        )
        _args_schema.mi_user_assigned = AAZListArg(
            options=["--user-assigned", "--mi-user-assigned"],
            arg_group="Identity",
            help="Set the user managed identities.",
            blank=[],
        )

        mi_user_assigned = cls._args_schema.mi_user_assigned
        mi_user_assigned.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.datastore = AAZObjectArg(
            options=["--datastore"],
            arg_group="Properties",
            help="The data store for collected monitoring data.",
        )
        _args_schema.default_alert_rule_identity_resource_id = AAZResourceIdArg(
            options=["--default-alert-rule-identity-resource-id"],
            arg_group="Properties",
            help="The resource ID of a user-assigned managed identity that will be assigned to a new alert rule.",
        )

        datastore = cls._args_schema.datastore
        datastore.adx_cluster_resource_id = AAZResourceIdArg(
            options=["adx-cluster-resource-id"],
            help="The Azure resource ID of an Azure Data Explorer cluster. Value required if kusto-offering-type is adx. Do not pass value if kusto-offering-type is fabric or free.",
        )
        datastore.kusto_cluster_display_name = AAZStrArg(
            options=["kusto-cluster-display-name"],
            help="The Kusto cluster display name. Value required if kusto-offering-type is adx or free. Do not pass value if kusto-offering-type is fabric.",
        )
        datastore.kusto_cluster_uri = AAZStrArg(
            options=["kusto-cluster-uri"],
            help="The Kusto cluster URI.",
            required=True,
        )
        datastore.kusto_data_ingestion_uri = AAZStrArg(
            options=["kusto-data-ingestion-uri"],
            help="The Kusto data ingestion URI.",
            required=True,
        )
        datastore.kusto_database_name = AAZStrArg(
            options=["kusto-database-name"],
            help="The name of a Kusto database.",
            required=True,
        )
        datastore.kusto_management_url = AAZStrArg(
            options=["kusto-management-url"],
            help="The Kusto management URL.",
            required=True,
        )
        datastore.kusto_offering_type = AAZStrArg(
            options=["kusto-offering-type"],
            help="The type of a Kusto offering.",
            required=True,
            enum={"adx": "adx", "fabric": "fabric", "free": "free"},
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.WatchersCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class WatchersCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "watcherName", self.ctx.args.watcher_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-01-02",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("identity", AAZIdentityObjectType)
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("userAssigned", AAZListType, ".mi_user_assigned", typ_kwargs={"flags": {"action": "create"}})
                identity.set_prop("systemAssigned", AAZStrType, ".mi_system_assigned", typ_kwargs={"flags": {"action": "create"}})

            user_assigned = _builder.get(".identity.userAssigned")
            if user_assigned is not None:
                user_assigned.set_elements(AAZStrType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("datastore", AAZObjectType, ".datastore")
                properties.set_prop("defaultAlertRuleIdentityResourceId", AAZStrType, ".default_alert_rule_identity_resource_id")

            datastore = _builder.get(".properties.datastore")
            if datastore is not None:
                datastore.set_prop("adxClusterResourceId", AAZStrType, ".adx_cluster_resource_id")
                datastore.set_prop("kustoClusterDisplayName", AAZStrType, ".kusto_cluster_display_name")
                datastore.set_prop("kustoClusterUri", AAZStrType, ".kusto_cluster_uri", typ_kwargs={"flags": {"required": True}})
                datastore.set_prop("kustoDataIngestionUri", AAZStrType, ".kusto_data_ingestion_uri", typ_kwargs={"flags": {"required": True}})
                datastore.set_prop("kustoDatabaseName", AAZStrType, ".kusto_database_name", typ_kwargs={"flags": {"required": True}})
                datastore.set_prop("kustoManagementUrl", AAZStrType, ".kusto_management_url", typ_kwargs={"flags": {"required": True}})
                datastore.set_prop("kustoOfferingType", AAZStrType, ".kusto_offering_type", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZIdentityObjectType()
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType(
                flags={"required": True},
            )
            identity.user_assigned_identities = AAZDictType(
                serialized_name="userAssignedIdentities",
            )

            user_assigned_identities = cls._schema_on_200_201.identity.user_assigned_identities
            user_assigned_identities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.identity.user_assigned_identities.Element
            _element.client_id = AAZStrType(
                serialized_name="clientId",
                flags={"read_only": True},
            )
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.datastore = AAZObjectType()
            properties.default_alert_rule_identity_resource_id = AAZStrType(
                serialized_name="defaultAlertRuleIdentityResourceId",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZStrType(
                flags={"read_only": True},
            )

            datastore = cls._schema_on_200_201.properties.datastore
            datastore.adx_cluster_resource_id = AAZStrType(
                serialized_name="adxClusterResourceId",
            )
            datastore.kusto_cluster_display_name = AAZStrType(
                serialized_name="kustoClusterDisplayName",
            )
            datastore.kusto_cluster_uri = AAZStrType(
                serialized_name="kustoClusterUri",
                flags={"required": True},
            )
            datastore.kusto_data_ingestion_uri = AAZStrType(
                serialized_name="kustoDataIngestionUri",
                flags={"required": True},
            )
            datastore.kusto_database_name = AAZStrType(
                serialized_name="kustoDatabaseName",
                flags={"required": True},
            )
            datastore.kusto_management_url = AAZStrType(
                serialized_name="kustoManagementUrl",
                flags={"required": True},
            )
            datastore.kusto_offering_type = AAZStrType(
                serialized_name="kustoOfferingType",
                flags={"required": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
