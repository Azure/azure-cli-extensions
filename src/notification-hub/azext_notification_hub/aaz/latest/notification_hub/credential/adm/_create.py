# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Update credential for Amazon(ADM).
    """

    _aaz_info = {
        "version": "2017-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.notificationhubs/namespaces/{}/notificationhubs/{}", "2017-04-01", "properties.admCredential"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self.SubresourceSelector(ctx=self.ctx, name="subresource")
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.namespace_name = AAZStrArg(
            options=["--namespace-name"],
            help="The namespace name.",
            required=True,
        )
        _args_schema.notification_hub_name = AAZStrArg(
            options=["-n", "--name", "--notification-hub-name"],
            help="The notification hub name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.client_id = AAZStrArg(
            options=["--client-id"],
            arg_group="Properties",
            help="The client identifier.",
        )
        _args_schema.client_secret = AAZStrArg(
            options=["--client-secret"],
            arg_group="Properties",
            help="The credential secret access key.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NotificationHubsGet(ctx=self.ctx)()
        self.pre_instance_create()
        self.InstanceCreateByJson(ctx=self.ctx)()
        self.post_instance_create(self.ctx.selectors.subresource.required())
        self.NotificationHubsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_create(self):
        pass

    @register_callback
    def post_instance_create(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.selectors.subresource.required(), client_flatten=True)
        return result

    class SubresourceSelector(AAZJsonSelector):

        def _get(self):
            result = self.ctx.vars.instance
            return result.properties.admCredential

        def _set(self, value):
            result = self.ctx.vars.instance
            result.properties.admCredential = value
            return

    class NotificationHubsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "notificationHubName", self.ctx.args.notification_hub_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _CreateHelper._build_schema_notification_hub_resource_read(cls._schema_on_200)

            return cls._schema_on_200

    class NotificationHubsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/notificationHubs/{notificationHubName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "namespaceName", self.ctx.args.namespace_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "notificationHubName", self.ctx.args.notification_hub_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2017-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _CreateHelper._build_schema_notification_hub_resource_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceCreateByJson(AAZJsonInstanceCreateOperation):

        def __call__(self, *args, **kwargs):
            self.ctx.selectors.subresource.set(self._create_instance())

        def _create_instance(self):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("clientId", AAZStrType, ".client_id")
                properties.set_prop("clientSecret", AAZStrType, ".client_secret")

            return _instance_value


class _CreateHelper:
    """Helper class for Create"""

    _schema_notification_hub_resource_read = None

    @classmethod
    def _build_schema_notification_hub_resource_read(cls, _schema):
        if cls._schema_notification_hub_resource_read is not None:
            _schema.id = cls._schema_notification_hub_resource_read.id
            _schema.location = cls._schema_notification_hub_resource_read.location
            _schema.name = cls._schema_notification_hub_resource_read.name
            _schema.properties = cls._schema_notification_hub_resource_read.properties
            _schema.sku = cls._schema_notification_hub_resource_read.sku
            _schema.tags = cls._schema_notification_hub_resource_read.tags
            _schema.type = cls._schema_notification_hub_resource_read.type
            return

        cls._schema_notification_hub_resource_read = _schema_notification_hub_resource_read = AAZObjectType()

        notification_hub_resource_read = _schema_notification_hub_resource_read
        notification_hub_resource_read.id = AAZStrType(
            flags={"read_only": True},
        )
        notification_hub_resource_read.location = AAZStrType()
        notification_hub_resource_read.name = AAZStrType(
            flags={"read_only": True},
        )
        notification_hub_resource_read.properties = AAZObjectType(
            flags={"client_flatten": True},
        )
        notification_hub_resource_read.sku = AAZObjectType()
        notification_hub_resource_read.tags = AAZDictType()
        notification_hub_resource_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_notification_hub_resource_read.properties
        properties.adm_credential = AAZObjectType(
            serialized_name="admCredential",
        )
        properties.apns_credential = AAZObjectType(
            serialized_name="apnsCredential",
        )
        properties.authorization_rules = AAZListType(
            serialized_name="authorizationRules",
        )
        properties.baidu_credential = AAZObjectType(
            serialized_name="baiduCredential",
        )
        properties.gcm_credential = AAZObjectType(
            serialized_name="gcmCredential",
        )
        properties.mpns_credential = AAZObjectType(
            serialized_name="mpnsCredential",
        )
        properties.name = AAZStrType()
        properties.registration_ttl = AAZStrType(
            serialized_name="registrationTtl",
        )
        properties.wns_credential = AAZObjectType(
            serialized_name="wnsCredential",
        )

        adm_credential = _schema_notification_hub_resource_read.properties.adm_credential
        adm_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.adm_credential.properties
        properties.auth_token_url = AAZStrType(
            serialized_name="authTokenUrl",
        )
        properties.client_id = AAZStrType(
            serialized_name="clientId",
        )
        properties.client_secret = AAZStrType(
            serialized_name="clientSecret",
        )

        apns_credential = _schema_notification_hub_resource_read.properties.apns_credential
        apns_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.apns_credential.properties
        properties.apns_certificate = AAZStrType(
            serialized_name="apnsCertificate",
        )
        properties.app_id = AAZStrType(
            serialized_name="appId",
        )
        properties.app_name = AAZStrType(
            serialized_name="appName",
        )
        properties.certificate_key = AAZStrType(
            serialized_name="certificateKey",
        )
        properties.endpoint = AAZStrType()
        properties.key_id = AAZStrType(
            serialized_name="keyId",
        )
        properties.thumbprint = AAZStrType()
        properties.token = AAZStrType()

        authorization_rules = _schema_notification_hub_resource_read.properties.authorization_rules
        authorization_rules.Element = AAZObjectType()

        _element = _schema_notification_hub_resource_read.properties.authorization_rules.Element
        _element.claim_type = AAZStrType(
            serialized_name="claimType",
            flags={"read_only": True},
        )
        _element.claim_value = AAZStrType(
            serialized_name="claimValue",
            flags={"read_only": True},
        )
        _element.created_time = AAZStrType(
            serialized_name="createdTime",
            flags={"read_only": True},
        )
        _element.key_name = AAZStrType(
            serialized_name="keyName",
            flags={"read_only": True},
        )
        _element.modified_time = AAZStrType(
            serialized_name="modifiedTime",
            flags={"read_only": True},
        )
        _element.primary_key = AAZStrType(
            serialized_name="primaryKey",
            flags={"read_only": True},
        )
        _element.revision = AAZIntType(
            flags={"read_only": True},
        )
        _element.rights = AAZListType()
        _element.secondary_key = AAZStrType(
            serialized_name="secondaryKey",
            flags={"read_only": True},
        )

        rights = _schema_notification_hub_resource_read.properties.authorization_rules.Element.rights
        rights.Element = AAZStrType()

        baidu_credential = _schema_notification_hub_resource_read.properties.baidu_credential
        baidu_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.baidu_credential.properties
        properties.baidu_api_key = AAZStrType(
            serialized_name="baiduApiKey",
        )
        properties.baidu_end_point = AAZStrType(
            serialized_name="baiduEndPoint",
        )
        properties.baidu_secret_key = AAZStrType(
            serialized_name="baiduSecretKey",
        )

        gcm_credential = _schema_notification_hub_resource_read.properties.gcm_credential
        gcm_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.gcm_credential.properties
        properties.gcm_endpoint = AAZStrType(
            serialized_name="gcmEndpoint",
        )
        properties.google_api_key = AAZStrType(
            serialized_name="googleApiKey",
        )

        mpns_credential = _schema_notification_hub_resource_read.properties.mpns_credential
        mpns_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.mpns_credential.properties
        properties.certificate_key = AAZStrType(
            serialized_name="certificateKey",
        )
        properties.mpns_certificate = AAZStrType(
            serialized_name="mpnsCertificate",
        )
        properties.thumbprint = AAZStrType()

        wns_credential = _schema_notification_hub_resource_read.properties.wns_credential
        wns_credential.properties = AAZObjectType(
            flags={"client_flatten": True},
        )

        properties = _schema_notification_hub_resource_read.properties.wns_credential.properties
        properties.package_sid = AAZStrType(
            serialized_name="packageSid",
        )
        properties.secret_key = AAZStrType(
            serialized_name="secretKey",
        )
        properties.windows_live_endpoint = AAZStrType(
            serialized_name="windowsLiveEndpoint",
        )

        sku = _schema_notification_hub_resource_read.sku
        sku.capacity = AAZIntType()
        sku.family = AAZStrType()
        sku.name = AAZStrType(
            flags={"required": True},
        )
        sku.size = AAZStrType()
        sku.tier = AAZStrType()

        tags = _schema_notification_hub_resource_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_notification_hub_resource_read.id
        _schema.location = cls._schema_notification_hub_resource_read.location
        _schema.name = cls._schema_notification_hub_resource_read.name
        _schema.properties = cls._schema_notification_hub_resource_read.properties
        _schema.sku = cls._schema_notification_hub_resource_read.sku
        _schema.tags = cls._schema_notification_hub_resource_read.tags
        _schema.type = cls._schema_notification_hub_resource_read.type


__all__ = ["Create"]
