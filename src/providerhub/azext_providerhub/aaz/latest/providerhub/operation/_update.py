# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub operation update",
)
class Update(AAZCommand):
    """Update the operation supported by the given provider.

    :example: operation update
        az providerhub operation update --contents "[{{\\"name\\":\\"Private.VPTest/Employees/Read\\",\\"display\\":{{\\"default\\":{{\\"description\\":\\"Read employees\\",\\"operation\\":\\"Gets/List employee resources\\",\\"provider\\":\\"Private.VPTest\\",\\"resource\\":\\"Employees\\"}}}}}}]" --provider-namespace "{providerNamespace}"
    """

    _aaz_info = {
        "version": "2024-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}/operations/default", "2024-04-01-preview"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_namespace = AAZStrArg(
            options=["--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.contents = AAZListArg(
            options=["--contents"],
            arg_group="Properties",
            help="Operations content.",
            nullable=True,
        )

        contents = cls._args_schema.contents
        contents.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.contents.Element
        _element.action_type = AAZStrArg(
            options=["action-type"],
            nullable=True,
            enum={"Internal": "Internal", "NotSpecified": "NotSpecified"},
        )
        _element.display = AAZObjectArg(
            options=["display"],
            help="Display information of the operation.",
        )
        _element.is_data_action = AAZBoolArg(
            options=["is-data-action"],
            help="Indicates whether the operation applies to data-plane.",
            nullable=True,
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of the operation.",
        )
        _element.origin = AAZStrArg(
            options=["origin"],
            nullable=True,
            enum={"NotSpecified": "NotSpecified", "System": "System", "User": "User"},
        )

        display = cls._args_schema.contents.Element.display
        display.cs = AAZObjectArg(
            options=["cs"],
            help="Display information of the operation for cs locale.",
            nullable=True,
        )
        display.de = AAZObjectArg(
            options=["de"],
            help="Display information of the operation for de locale.",
            nullable=True,
        )
        display.default = AAZObjectArg(
            options=["default"],
            help="Display information of the operation.",
        )
        display.en = AAZObjectArg(
            options=["en"],
            help="Display information of the operation for en locale.",
            nullable=True,
        )
        display.es = AAZObjectArg(
            options=["es"],
            help="Display information of the operation for es locale.",
            nullable=True,
        )
        display.fr = AAZObjectArg(
            options=["fr"],
            help="Display information of the operation for fr locale.",
            nullable=True,
        )
        display.hu = AAZObjectArg(
            options=["hu"],
            help="Display information of the operation for hu locale.",
            nullable=True,
        )
        display.it = AAZObjectArg(
            options=["it"],
            help="Display information of the operation for it locale.",
            nullable=True,
        )
        display.ja = AAZObjectArg(
            options=["ja"],
            help="Display information of the operation for ja locale.",
            nullable=True,
        )
        display.ko = AAZObjectArg(
            options=["ko"],
            help="Display information of the operation for ko locale.",
            nullable=True,
        )
        display.nl = AAZObjectArg(
            options=["nl"],
            help="Display information of the operation for nl locale.",
            nullable=True,
        )
        display.pl = AAZObjectArg(
            options=["pl"],
            help="Display information of the operation for pl locale.",
            nullable=True,
        )
        display.pt_br = AAZObjectArg(
            options=["pt-br"],
            help="Display information of the operation for pt-BR locale.",
            nullable=True,
        )
        display.pt_pt = AAZObjectArg(
            options=["pt-pt"],
            help="Display information of the operation for pt-PT locale.",
            nullable=True,
        )
        display.ru = AAZObjectArg(
            options=["ru"],
            help="Display information of the operation for ru locale.",
            nullable=True,
        )
        display.sv = AAZObjectArg(
            options=["sv"],
            help="Display information of the operation for sv locale.",
            nullable=True,
        )
        display.zh_hans = AAZObjectArg(
            options=["zh-hans"],
            help="Display information of the operation for zh-Hans locale.",
            nullable=True,
        )
        display.zh_hant = AAZObjectArg(
            options=["zh-hant"],
            help="Display information of the operation for zh-Hant locale.",
            nullable=True,
        )

        cs = cls._args_schema.contents.Element.display.cs
        cs.description = AAZStrArg(
            options=["description"],
        )
        cs.operation = AAZStrArg(
            options=["operation"],
        )
        cs.provider = AAZStrArg(
            options=["provider"],
        )
        cs.resource = AAZStrArg(
            options=["resource"],
        )

        de = cls._args_schema.contents.Element.display.de
        de.description = AAZStrArg(
            options=["description"],
        )
        de.operation = AAZStrArg(
            options=["operation"],
        )
        de.provider = AAZStrArg(
            options=["provider"],
        )
        de.resource = AAZStrArg(
            options=["resource"],
        )

        default = cls._args_schema.contents.Element.display.default
        default.description = AAZStrArg(
            options=["description"],
        )
        default.operation = AAZStrArg(
            options=["operation"],
        )
        default.provider = AAZStrArg(
            options=["provider"],
        )
        default.resource = AAZStrArg(
            options=["resource"],
        )

        en = cls._args_schema.contents.Element.display.en
        en.description = AAZStrArg(
            options=["description"],
        )
        en.operation = AAZStrArg(
            options=["operation"],
        )
        en.provider = AAZStrArg(
            options=["provider"],
        )
        en.resource = AAZStrArg(
            options=["resource"],
        )

        es = cls._args_schema.contents.Element.display.es
        es.description = AAZStrArg(
            options=["description"],
        )
        es.operation = AAZStrArg(
            options=["operation"],
        )
        es.provider = AAZStrArg(
            options=["provider"],
        )
        es.resource = AAZStrArg(
            options=["resource"],
        )

        fr = cls._args_schema.contents.Element.display.fr
        fr.description = AAZStrArg(
            options=["description"],
        )
        fr.operation = AAZStrArg(
            options=["operation"],
        )
        fr.provider = AAZStrArg(
            options=["provider"],
        )
        fr.resource = AAZStrArg(
            options=["resource"],
        )

        hu = cls._args_schema.contents.Element.display.hu
        hu.description = AAZStrArg(
            options=["description"],
        )
        hu.operation = AAZStrArg(
            options=["operation"],
        )
        hu.provider = AAZStrArg(
            options=["provider"],
        )
        hu.resource = AAZStrArg(
            options=["resource"],
        )

        it = cls._args_schema.contents.Element.display.it
        it.description = AAZStrArg(
            options=["description"],
        )
        it.operation = AAZStrArg(
            options=["operation"],
        )
        it.provider = AAZStrArg(
            options=["provider"],
        )
        it.resource = AAZStrArg(
            options=["resource"],
        )

        ja = cls._args_schema.contents.Element.display.ja
        ja.description = AAZStrArg(
            options=["description"],
        )
        ja.operation = AAZStrArg(
            options=["operation"],
        )
        ja.provider = AAZStrArg(
            options=["provider"],
        )
        ja.resource = AAZStrArg(
            options=["resource"],
        )

        ko = cls._args_schema.contents.Element.display.ko
        ko.description = AAZStrArg(
            options=["description"],
        )
        ko.operation = AAZStrArg(
            options=["operation"],
        )
        ko.provider = AAZStrArg(
            options=["provider"],
        )
        ko.resource = AAZStrArg(
            options=["resource"],
        )

        nl = cls._args_schema.contents.Element.display.nl
        nl.description = AAZStrArg(
            options=["description"],
        )
        nl.operation = AAZStrArg(
            options=["operation"],
        )
        nl.provider = AAZStrArg(
            options=["provider"],
        )
        nl.resource = AAZStrArg(
            options=["resource"],
        )

        pl = cls._args_schema.contents.Element.display.pl
        pl.description = AAZStrArg(
            options=["description"],
        )
        pl.operation = AAZStrArg(
            options=["operation"],
        )
        pl.provider = AAZStrArg(
            options=["provider"],
        )
        pl.resource = AAZStrArg(
            options=["resource"],
        )

        pt_br = cls._args_schema.contents.Element.display.pt_br
        pt_br.description = AAZStrArg(
            options=["description"],
        )
        pt_br.operation = AAZStrArg(
            options=["operation"],
        )
        pt_br.provider = AAZStrArg(
            options=["provider"],
        )
        pt_br.resource = AAZStrArg(
            options=["resource"],
        )

        pt_pt = cls._args_schema.contents.Element.display.pt_pt
        pt_pt.description = AAZStrArg(
            options=["description"],
        )
        pt_pt.operation = AAZStrArg(
            options=["operation"],
        )
        pt_pt.provider = AAZStrArg(
            options=["provider"],
        )
        pt_pt.resource = AAZStrArg(
            options=["resource"],
        )

        ru = cls._args_schema.contents.Element.display.ru
        ru.description = AAZStrArg(
            options=["description"],
        )
        ru.operation = AAZStrArg(
            options=["operation"],
        )
        ru.provider = AAZStrArg(
            options=["provider"],
        )
        ru.resource = AAZStrArg(
            options=["resource"],
        )

        sv = cls._args_schema.contents.Element.display.sv
        sv.description = AAZStrArg(
            options=["description"],
        )
        sv.operation = AAZStrArg(
            options=["operation"],
        )
        sv.provider = AAZStrArg(
            options=["provider"],
        )
        sv.resource = AAZStrArg(
            options=["resource"],
        )

        zh_hans = cls._args_schema.contents.Element.display.zh_hans
        zh_hans.description = AAZStrArg(
            options=["description"],
        )
        zh_hans.operation = AAZStrArg(
            options=["operation"],
        )
        zh_hans.provider = AAZStrArg(
            options=["provider"],
        )
        zh_hans.resource = AAZStrArg(
            options=["resource"],
        )

        zh_hant = cls._args_schema.contents.Element.display.zh_hant
        zh_hant.description = AAZStrArg(
            options=["description"],
        )
        zh_hant.operation = AAZStrArg(
            options=["operation"],
        )
        zh_hant.provider = AAZStrArg(
            options=["provider"],
        )
        zh_hant.resource = AAZStrArg(
            options=["resource"],
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.OperationsListByProviderRegistration(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.OperationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class OperationsListByProviderRegistration(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/operations/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.contents = AAZListType()
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            contents = cls._schema_on_200.contents
            contents.Element = AAZObjectType()

            _element = cls._schema_on_200.contents.Element
            _element.action_type = AAZStrType(
                serialized_name="actionType",
            )
            _element.display = AAZObjectType(
                flags={"required": True},
            )
            _element.is_data_action = AAZBoolType(
                serialized_name="isDataAction",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.origin = AAZStrType()

            display = cls._schema_on_200.contents.Element.display
            display.description = AAZStrType(
                flags={"required": True},
            )
            display.operation = AAZStrType(
                flags={"required": True},
            )
            display.provider = AAZStrType(
                flags={"required": True},
            )
            display.resource = AAZStrType(
                flags={"required": True},
            )

            return cls._schema_on_200

    class OperationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/operations/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.contents = AAZListType()

            contents = cls._schema_on_200.properties.contents
            contents.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.contents.Element
            _element.action_type = AAZStrType(
                serialized_name="actionType",
            )
            _element.display = AAZObjectType(
                flags={"required": True},
            )
            _element.is_data_action = AAZBoolType(
                serialized_name="isDataAction",
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.origin = AAZStrType()

            display = cls._schema_on_200.properties.contents.Element.display
            display.cs = AAZObjectType()
            display.de = AAZObjectType()
            display.default = AAZObjectType(
                flags={"required": True},
            )
            display.en = AAZObjectType()
            display.es = AAZObjectType()
            display.fr = AAZObjectType()
            display.hu = AAZObjectType()
            display.it = AAZObjectType()
            display.ja = AAZObjectType()
            display.ko = AAZObjectType()
            display.nl = AAZObjectType()
            display.pl = AAZObjectType()
            display.pt_br = AAZObjectType(
                serialized_name="ptBR",
            )
            display.pt_pt = AAZObjectType(
                serialized_name="ptPT",
            )
            display.ru = AAZObjectType()
            display.sv = AAZObjectType()
            display.zh_hans = AAZObjectType(
                serialized_name="zhHans",
            )
            display.zh_hant = AAZObjectType(
                serialized_name="zhHant",
            )

            cs = cls._schema_on_200.properties.contents.Element.display.cs
            cs.description = AAZStrType(
                flags={"required": True},
            )
            cs.operation = AAZStrType(
                flags={"required": True},
            )
            cs.provider = AAZStrType(
                flags={"required": True},
            )
            cs.resource = AAZStrType(
                flags={"required": True},
            )

            de = cls._schema_on_200.properties.contents.Element.display.de
            de.description = AAZStrType(
                flags={"required": True},
            )
            de.operation = AAZStrType(
                flags={"required": True},
            )
            de.provider = AAZStrType(
                flags={"required": True},
            )
            de.resource = AAZStrType(
                flags={"required": True},
            )

            default = cls._schema_on_200.properties.contents.Element.display.default
            default.description = AAZStrType(
                flags={"required": True},
            )
            default.operation = AAZStrType(
                flags={"required": True},
            )
            default.provider = AAZStrType(
                flags={"required": True},
            )
            default.resource = AAZStrType(
                flags={"required": True},
            )

            en = cls._schema_on_200.properties.contents.Element.display.en
            en.description = AAZStrType(
                flags={"required": True},
            )
            en.operation = AAZStrType(
                flags={"required": True},
            )
            en.provider = AAZStrType(
                flags={"required": True},
            )
            en.resource = AAZStrType(
                flags={"required": True},
            )

            es = cls._schema_on_200.properties.contents.Element.display.es
            es.description = AAZStrType(
                flags={"required": True},
            )
            es.operation = AAZStrType(
                flags={"required": True},
            )
            es.provider = AAZStrType(
                flags={"required": True},
            )
            es.resource = AAZStrType(
                flags={"required": True},
            )

            fr = cls._schema_on_200.properties.contents.Element.display.fr
            fr.description = AAZStrType(
                flags={"required": True},
            )
            fr.operation = AAZStrType(
                flags={"required": True},
            )
            fr.provider = AAZStrType(
                flags={"required": True},
            )
            fr.resource = AAZStrType(
                flags={"required": True},
            )

            hu = cls._schema_on_200.properties.contents.Element.display.hu
            hu.description = AAZStrType(
                flags={"required": True},
            )
            hu.operation = AAZStrType(
                flags={"required": True},
            )
            hu.provider = AAZStrType(
                flags={"required": True},
            )
            hu.resource = AAZStrType(
                flags={"required": True},
            )

            it = cls._schema_on_200.properties.contents.Element.display.it
            it.description = AAZStrType(
                flags={"required": True},
            )
            it.operation = AAZStrType(
                flags={"required": True},
            )
            it.provider = AAZStrType(
                flags={"required": True},
            )
            it.resource = AAZStrType(
                flags={"required": True},
            )

            ja = cls._schema_on_200.properties.contents.Element.display.ja
            ja.description = AAZStrType(
                flags={"required": True},
            )
            ja.operation = AAZStrType(
                flags={"required": True},
            )
            ja.provider = AAZStrType(
                flags={"required": True},
            )
            ja.resource = AAZStrType(
                flags={"required": True},
            )

            ko = cls._schema_on_200.properties.contents.Element.display.ko
            ko.description = AAZStrType(
                flags={"required": True},
            )
            ko.operation = AAZStrType(
                flags={"required": True},
            )
            ko.provider = AAZStrType(
                flags={"required": True},
            )
            ko.resource = AAZStrType(
                flags={"required": True},
            )

            nl = cls._schema_on_200.properties.contents.Element.display.nl
            nl.description = AAZStrType(
                flags={"required": True},
            )
            nl.operation = AAZStrType(
                flags={"required": True},
            )
            nl.provider = AAZStrType(
                flags={"required": True},
            )
            nl.resource = AAZStrType(
                flags={"required": True},
            )

            pl = cls._schema_on_200.properties.contents.Element.display.pl
            pl.description = AAZStrType(
                flags={"required": True},
            )
            pl.operation = AAZStrType(
                flags={"required": True},
            )
            pl.provider = AAZStrType(
                flags={"required": True},
            )
            pl.resource = AAZStrType(
                flags={"required": True},
            )

            pt_br = cls._schema_on_200.properties.contents.Element.display.pt_br
            pt_br.description = AAZStrType(
                flags={"required": True},
            )
            pt_br.operation = AAZStrType(
                flags={"required": True},
            )
            pt_br.provider = AAZStrType(
                flags={"required": True},
            )
            pt_br.resource = AAZStrType(
                flags={"required": True},
            )

            pt_pt = cls._schema_on_200.properties.contents.Element.display.pt_pt
            pt_pt.description = AAZStrType(
                flags={"required": True},
            )
            pt_pt.operation = AAZStrType(
                flags={"required": True},
            )
            pt_pt.provider = AAZStrType(
                flags={"required": True},
            )
            pt_pt.resource = AAZStrType(
                flags={"required": True},
            )

            ru = cls._schema_on_200.properties.contents.Element.display.ru
            ru.description = AAZStrType(
                flags={"required": True},
            )
            ru.operation = AAZStrType(
                flags={"required": True},
            )
            ru.provider = AAZStrType(
                flags={"required": True},
            )
            ru.resource = AAZStrType(
                flags={"required": True},
            )

            sv = cls._schema_on_200.properties.contents.Element.display.sv
            sv.description = AAZStrType(
                flags={"required": True},
            )
            sv.operation = AAZStrType(
                flags={"required": True},
            )
            sv.provider = AAZStrType(
                flags={"required": True},
            )
            sv.resource = AAZStrType(
                flags={"required": True},
            )

            zh_hans = cls._schema_on_200.properties.contents.Element.display.zh_hans
            zh_hans.description = AAZStrType(
                flags={"required": True},
            )
            zh_hans.operation = AAZStrType(
                flags={"required": True},
            )
            zh_hans.provider = AAZStrType(
                flags={"required": True},
            )
            zh_hans.resource = AAZStrType(
                flags={"required": True},
            )

            zh_hant = cls._schema_on_200.properties.contents.Element.display.zh_hant
            zh_hant.description = AAZStrType(
                flags={"required": True},
            )
            zh_hant.operation = AAZStrType(
                flags={"required": True},
            )
            zh_hant.provider = AAZStrType(
                flags={"required": True},
            )
            zh_hant.resource = AAZStrType(
                flags={"required": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("contents", AAZListType, ".contents")

            contents = _builder.get(".properties.contents")
            if contents is not None:
                contents.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.contents[]")
            if _elements is not None:
                _elements.set_prop("actionType", AAZStrType, ".action_type")
                _elements.set_prop("display", AAZObjectType, ".display", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("isDataAction", AAZBoolType, ".is_data_action")
                _elements.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("origin", AAZStrType, ".origin")

            display = _builder.get(".properties.contents[].display")
            if display is not None:
                display.set_prop("cs", AAZObjectType, ".cs")
                display.set_prop("de", AAZObjectType, ".de")
                display.set_prop("default", AAZObjectType, ".default", typ_kwargs={"flags": {"required": True}})
                display.set_prop("en", AAZObjectType, ".en")
                display.set_prop("es", AAZObjectType, ".es")
                display.set_prop("fr", AAZObjectType, ".fr")
                display.set_prop("hu", AAZObjectType, ".hu")
                display.set_prop("it", AAZObjectType, ".it")
                display.set_prop("ja", AAZObjectType, ".ja")
                display.set_prop("ko", AAZObjectType, ".ko")
                display.set_prop("nl", AAZObjectType, ".nl")
                display.set_prop("pl", AAZObjectType, ".pl")
                display.set_prop("ptBR", AAZObjectType, ".pt_br")
                display.set_prop("ptPT", AAZObjectType, ".pt_pt")
                display.set_prop("ru", AAZObjectType, ".ru")
                display.set_prop("sv", AAZObjectType, ".sv")
                display.set_prop("zhHans", AAZObjectType, ".zh_hans")
                display.set_prop("zhHant", AAZObjectType, ".zh_hant")

            cs = _builder.get(".properties.contents[].display.cs")
            if cs is not None:
                cs.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                cs.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                cs.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                cs.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            de = _builder.get(".properties.contents[].display.de")
            if de is not None:
                de.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                de.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                de.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                de.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            default = _builder.get(".properties.contents[].display.default")
            if default is not None:
                default.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                default.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                default.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                default.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            en = _builder.get(".properties.contents[].display.en")
            if en is not None:
                en.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                en.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                en.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                en.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            es = _builder.get(".properties.contents[].display.es")
            if es is not None:
                es.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                es.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                es.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                es.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            fr = _builder.get(".properties.contents[].display.fr")
            if fr is not None:
                fr.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                fr.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                fr.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                fr.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            hu = _builder.get(".properties.contents[].display.hu")
            if hu is not None:
                hu.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                hu.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                hu.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                hu.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            it = _builder.get(".properties.contents[].display.it")
            if it is not None:
                it.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                it.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                it.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                it.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            ja = _builder.get(".properties.contents[].display.ja")
            if ja is not None:
                ja.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                ja.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                ja.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                ja.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            ko = _builder.get(".properties.contents[].display.ko")
            if ko is not None:
                ko.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                ko.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                ko.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                ko.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            nl = _builder.get(".properties.contents[].display.nl")
            if nl is not None:
                nl.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                nl.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                nl.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                nl.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            pl = _builder.get(".properties.contents[].display.pl")
            if pl is not None:
                pl.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                pl.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                pl.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                pl.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            pt_br = _builder.get(".properties.contents[].display.ptBR")
            if pt_br is not None:
                pt_br.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                pt_br.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                pt_br.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                pt_br.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            pt_pt = _builder.get(".properties.contents[].display.ptPT")
            if pt_pt is not None:
                pt_pt.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                pt_pt.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                pt_pt.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                pt_pt.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            ru = _builder.get(".properties.contents[].display.ru")
            if ru is not None:
                ru.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                ru.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                ru.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                ru.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            sv = _builder.get(".properties.contents[].display.sv")
            if sv is not None:
                sv.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                sv.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                sv.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                sv.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            zh_hans = _builder.get(".properties.contents[].display.zhHans")
            if zh_hans is not None:
                zh_hans.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                zh_hans.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                zh_hans.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                zh_hans.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            zh_hant = _builder.get(".properties.contents[].display.zhHant")
            if zh_hant is not None:
                zh_hant.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                zh_hant.set_prop("operation", AAZStrType, ".operation", typ_kwargs={"flags": {"required": True}})
                zh_hant.set_prop("provider", AAZStrType, ".provider", typ_kwargs={"flags": {"required": True}})
                zh_hant.set_prop("resource", AAZStrType, ".resource", typ_kwargs={"flags": {"required": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""


__all__ = ["Update"]
