# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub provider-registration create",
)
class Create(AAZCommand):
    """Create the provider registration.

    :example: provider-registration create
        az providerhub provider-registration create --token-auth-configuration authentication-scheme="PoP" signed-request-scope="ResourceUri" --service-tree-infos service-id="d1b7d8ba-05e2-48e6-90d6-d781b99c6e69" component-id="d1b7d8ba-05e2-48e6-90d6-d781b99c6e69" --capabilities effect="Allow" quota-id="CSP_2015-05-01" --capabilities effect="Allow" quota-id="CSP_MG_2017-12-01" --manifest-owners "SPARTA-PlatformServiceAdministrator" --incident-contact-email "rpaascore@microsoft.com" --incident-routing-service "Resource Provider Service as a Service" --incident-routing-team "RPaaS" --provider-version "2.0" --provider-namespace "{providerNamespace}" --metadata "BypassManifestValidation":true
    """

    _aaz_info = {
        "version": "2024-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}", "2024-04-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_namespace = AAZStrArg(
            options=["-n", "--name", "--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
        )

        # define Arg Group "FeaturesRule"

        _args_schema = cls._args_schema
        _args_schema.required_features_policy = AAZStrArg(
            options=["--req-features-policy", "--required-features-policy"],
            arg_group="FeaturesRule",
            help="The accepted values are \"Any\" or \"All\".",
            enum={"All": "All", "Any": "Any"},
        )

        # define Arg Group "Management"

        _args_schema = cls._args_schema
        _args_schema.authorization_owners = AAZListArg(
            options=["--authorization-owners"],
            arg_group="Management",
            help="The authorization owners.",
        )
        _args_schema.canary_manifest_owners = AAZListArg(
            options=["--canary-manifest-owners"],
            arg_group="Management",
            help="List of manifest owners for canary",
        )
        _args_schema.error_response_message_options = AAZObjectArg(
            options=["--message-options", "--error-response-message-options"],
            arg_group="Management",
            help="Options for error response messages.",
        )
        _args_schema.expedited_rollout_metadata = AAZObjectArg(
            options=["--rollout-metadata", "--expedited-rollout-metadata"],
            arg_group="Management",
            help="Metadata for expedited rollout.",
        )
        _args_schema.expedited_rollout_submitters = AAZListArg(
            options=["--rollout-submitters", "--expedited-rollout-submitters"],
            arg_group="Management",
            help="List of expedited rollout submitters.",
        )
        _args_schema.incident_contact_email = AAZStrArg(
            options=["--incident-contact-email"],
            arg_group="Management",
            help="The email address of contacts for incidents related to the RP.",
        )
        _args_schema.incident_routing_service = AAZStrArg(
            options=["--incident-service", "--incident-routing-service"],
            arg_group="Management",
            help="The service in IcM when creating or transferring incidents to the RP.",
        )
        _args_schema.incident_routing_team = AAZStrArg(
            options=["--incident-team", "--incident-routing-team"],
            arg_group="Management",
            help="The team in IcM when creating or transferring incidents to the RP.",
        )
        _args_schema.manifest_owners = AAZListArg(
            options=["--manifest-owners"],
            singular_options=["--manifest-owner"],
            arg_group="Management",
            help="Specifies an array of required ACIS claims to modify the resource provider's manifest content via ACIS.",
        )
        _args_schema.pc_code = AAZStrArg(
            options=["--pc-code"],
            arg_group="Management",
            help="The profit center code for the subscription.",
        )
        _args_schema.profit_center_program_id = AAZStrArg(
            options=["--pc-program-id", "--profit-center-program-id"],
            arg_group="Management",
            help="The profit center program id for the subscription.",
        )
        _args_schema.resource_access_policy = AAZStrArg(
            options=["--resource-access-policy"],
            arg_group="Management",
            help="The resource access policy.",
            enum={"AcisActionAllowed": "AcisActionAllowed", "AcisReadAllowed": "AcisReadAllowed", "NotSpecified": "NotSpecified"},
        )
        _args_schema.resource_access_roles = AAZListArg(
            options=["--resource-access-roles"],
            arg_group="Management",
            help="The resource access roles.",
        )
        _args_schema.schema_owners = AAZListArg(
            options=["--schema-owners"],
            singular_options=["--schema-owner", "--schema-owners"],
            arg_group="Management",
            help="Specifies an array of needed ACIS claims to modify the resource provider schema via ACIS.",
        )
        _args_schema.service_tree_infos = AAZListArg(
            options=["--service-tree-infos"],
            singular_options=["--service-tree-info", "--service-tree-infos"],
            arg_group="Management",
            help="The ServiceTree information for the resource provider.",
        )

        authorization_owners = cls._args_schema.authorization_owners
        authorization_owners.Element = AAZStrArg()

        canary_manifest_owners = cls._args_schema.canary_manifest_owners
        canary_manifest_owners.Element = AAZStrArg()

        error_response_message_options = cls._args_schema.error_response_message_options
        error_response_message_options.server_failure_response_message_type = AAZStrArg(
            options=["server-failure-response-message-type"],
            help="Type of server failure response message.",
            enum={"NotSpecified": "NotSpecified", "OutageReporting": "OutageReporting"},
        )

        expedited_rollout_metadata = cls._args_schema.expedited_rollout_metadata
        expedited_rollout_metadata.enabled = AAZBoolArg(
            options=["enabled"],
            help="Expedited rollout enabled?",
        )
        expedited_rollout_metadata.expedited_rollout_intent = AAZStrArg(
            options=["expedited-rollout-intent"],
            help="Expedited rollout intent.",
            enum={"Hotfix": "Hotfix", "NotSpecified": "NotSpecified"},
        )

        expedited_rollout_submitters = cls._args_schema.expedited_rollout_submitters
        expedited_rollout_submitters.Element = AAZStrArg()

        manifest_owners = cls._args_schema.manifest_owners
        manifest_owners.Element = AAZStrArg()

        resource_access_roles = cls._args_schema.resource_access_roles
        resource_access_roles.Element = AAZObjectArg()

        _element = cls._args_schema.resource_access_roles.Element
        _element.actions = AAZListArg(
            options=["actions"],
        )
        _element.allowed_group_claims = AAZListArg(
            options=["allowed-group-claims"],
        )

        actions = cls._args_schema.resource_access_roles.Element.actions
        actions.Element = AAZStrArg()

        allowed_group_claims = cls._args_schema.resource_access_roles.Element.allowed_group_claims
        allowed_group_claims.Element = AAZStrArg()

        schema_owners = cls._args_schema.schema_owners
        schema_owners.Element = AAZStrArg()

        service_tree_infos = cls._args_schema.service_tree_infos
        service_tree_infos.Element = AAZObjectArg()

        _element = cls._args_schema.service_tree_infos.Element
        _element.component_id = AAZStrArg(
            options=["component-id"],
        )
        _element.readiness = AAZStrArg(
            options=["readiness"],
            enum={"ClosingDown": "ClosingDown", "Deprecated": "Deprecated", "GA": "GA", "InDevelopment": "InDevelopment", "InternalOnly": "InternalOnly", "PrivatePreview": "PrivatePreview", "PublicPreview": "PublicPreview", "RemovedFromARM": "RemovedFromARM", "Retired": "Retired"},
        )
        _element.service_id = AAZStrArg(
            options=["service-id"],
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.kind = AAZStrArg(
            options=["--kind"],
            arg_group="Properties",
            help="Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.",
            default="Managed",
            enum={"Direct": "Direct", "Hybrid": "Hybrid", "Managed": "Managed"},
        )
        _args_schema.capabilities = AAZListArg(
            options=["--capabilities"],
            singular_options=["--capability", "--capabilities"],
            arg_group="Properties",
            help="This allows a restrictive subscription type to have access to register and use the Resource Provider.",
        )
        _args_schema.cross_tenant_token_validation = AAZStrArg(
            options=["--token-validation", "--cross-tenant-token-validation"],
            arg_group="Properties",
            help="The cross tenant token validation.",
            enum={"EnsureSecureValidation": "EnsureSecureValidation", "PassthroughInsecureToken": "PassthroughInsecureToken"},
        )
        _args_schema.custom_manifest_version = AAZStrArg(
            options=["--custom-manifest-vers", "--custom-manifest-version"],
            arg_group="Properties",
            help="Custom manifest version.",
        )
        _args_schema.dsts_configuration = AAZObjectArg(
            options=["--dsts-configuration"],
            arg_group="Properties",
            help="The DSTS configuration.",
        )
        _args_schema.enable_tenant_linked_notification = AAZBoolArg(
            options=["--enable-linked-notif", "--enable-tenant-linked-notification"],
            arg_group="Properties",
            help="The enable tenant linked notification.",
            nullable=True,
        )
        _args_schema.global_notification_endpoints = AAZListArg(
            options=["--global-notif-endpoints", "--global-notification-endpoints"],
            arg_group="Properties",
            help="The global notification endpoints.",
        )
        _args_schema.legacy_namespace = AAZStrArg(
            options=["--legacy-namespace"],
            arg_group="Properties",
            help="Legacy namespace.",
        )
        _args_schema.legacy_registrations = AAZListArg(
            options=["--legacy-registrations"],
            arg_group="Properties",
            help="Legacy registrations.",
        )
        _args_schema.linked_notification_rules = AAZListArg(
            options=["--linked-notif-rules", "--linked-notification-rules"],
            arg_group="Properties",
            help="The linked notification rules.",
        )
        _args_schema.management_group_global_notification_endpoints = AAZListArg(
            options=["--mg-notif-endpoints", "--management-group-global-notification-endpoints"],
            arg_group="Properties",
            help="Management groups global notification endpoints.",
        )
        _args_schema.metadata = AAZFreeFormDictArg(
            options=["--metadata"],
            arg_group="Properties",
            help="The metadata.",
            blank={},
        )
        _args_schema.namespace = AAZStrArg(
            options=["--namespace"],
            arg_group="Properties",
            help="The name of the resource provider hosted within ProviderHub.",
        )
        _args_schema.notification_options = AAZStrArg(
            options=["--notification-options"],
            arg_group="Properties",
            help="Notification options.",
            enum={"EmitSpendingLimit": "EmitSpendingLimit", "None": "None", "NotSpecified": "NotSpecified"},
        )
        _args_schema.notification_settings = AAZObjectArg(
            options=["--notification-settings"],
            arg_group="Properties",
            help="Notification settings.",
        )
        _args_schema.notifications = AAZListArg(
            options=["--notifications"],
            arg_group="Properties",
            help="The notifications object.",
        )
        _args_schema.optional_features = AAZListArg(
            options=["--optional-features"],
            arg_group="Properties",
            help="Optional features.",
        )
        _args_schema.private_resource_provider_configuration = AAZObjectArg(
            options=["--private-rp-config", "--private-resource-provider-configuration"],
            arg_group="Properties",
            help="The private resource provider configuration.",
        )
        _args_schema.provider_authentication = AAZObjectArg(
            options=["--provider-authn", "--provider-authentication"],
            arg_group="Properties",
            help="Used to set alternative audiences or resources that ARM should accept from the token while authenticating requests for the provider.",
        )
        _args_schema.provider_authorizations = AAZListArg(
            options=["--provider-authorizations"],
            singular_options=["--provider-auth", "--provider-authz", "--provider-authorizations"],
            arg_group="Properties",
            help="The resource provider authorizations.",
        )
        _args_schema.provider_hub_metadata = AAZObjectArg(
            options=["--provider-hub-metadata"],
            arg_group="Properties",
            help="The ProviderHub metadata.",
        )
        _args_schema.provider_type = AAZStrArg(
            options=["--provider-type"],
            arg_group="Properties",
            help="The provider type.",
            enum={"AuthorizationFree": "AuthorizationFree", "External": "External", "Hidden": "Hidden", "Internal": "Internal", "LegacyRegistrationRequired": "LegacyRegistrationRequired", "NotSpecified": "NotSpecified", "RegistrationFree": "RegistrationFree", "TenantOnly": "TenantOnly"},
        )
        _args_schema.provider_version = AAZStrArg(
            options=["--provider-version"],
            arg_group="Properties",
            help="The provider version.",
        )
        _args_schema.required_features = AAZListArg(
            options=["--required-features"],
            arg_group="Properties",
            help="The required features.",
        )
        _args_schema.resource_group_lock_option_during_move = AAZObjectArg(
            options=["--rg-lock-option", "--resource-group-lock-option-during-move"],
            arg_group="Properties",
            help="Resource group lock option during move.",
        )
        _args_schema.resource_hydration_accounts = AAZListArg(
            options=["--resc-hydration-accts", "--resource-hydration-accounts"],
            arg_group="Properties",
            help="resource hydration accounts",
        )
        _args_schema.resource_provider_authorization_rules = AAZObjectArg(
            options=["--rp-auth-rules", "--resource-provider-authorization-rules"],
            arg_group="Properties",
            help="The resource provider authorization rules.",
        )
        _args_schema.response_options = AAZObjectArg(
            options=["--response-options"],
            arg_group="Properties",
            help="Response options.",
        )
        _args_schema.service_name = AAZStrArg(
            options=["--service-name"],
            arg_group="Properties",
            help="The service name.",
        )
        _args_schema.services = AAZListArg(
            options=["--services"],
            arg_group="Properties",
            help="The services.",
        )
        _args_schema.template_deployment_options = AAZObjectArg(
            options=["--tmplt-deploy-opt", "--template-deployment-options"],
            arg_group="Properties",
            help="The template deployment options.",
        )
        _args_schema.token_auth_configuration = AAZObjectArg(
            options=["--token-auth-config", "--token-auth-configuration"],
            arg_group="Properties",
            help="The token auth configuration.",
        )
        cls._build_args_token_auth_configuration_create(_args_schema.token_auth_configuration)

        capabilities = cls._args_schema.capabilities
        capabilities.Element = AAZObjectArg()

        _element = cls._args_schema.capabilities.Element
        _element.effect = AAZStrArg(
            options=["effect"],
            required=True,
            enum={"Allow": "Allow", "Disallow": "Disallow", "NotSpecified": "NotSpecified"},
        )
        _element.quota_id = AAZStrArg(
            options=["quota-id"],
            required=True,
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
        )

        required_features = cls._args_schema.capabilities.Element.required_features
        required_features.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        global_notification_endpoints = cls._args_schema.global_notification_endpoints
        global_notification_endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(global_notification_endpoints.Element)

        legacy_registrations = cls._args_schema.legacy_registrations
        legacy_registrations.Element = AAZStrArg()

        linked_notification_rules = cls._args_schema.linked_notification_rules
        linked_notification_rules.Element = AAZObjectArg()

        _element = cls._args_schema.linked_notification_rules.Element
        _element.actions = AAZListArg(
            options=["actions"],
        )
        _element.dsts_configuration = AAZObjectArg(
            options=["dsts-configuration"],
        )
        _element.endpoints = AAZListArg(
            options=["endpoints"],
        )
        _element.token_auth_configuration = AAZObjectArg(
            options=["token-auth-configuration"],
        )
        cls._build_args_token_auth_configuration_create(_element.token_auth_configuration)

        actions = cls._args_schema.linked_notification_rules.Element.actions
        actions.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.linked_notification_rules.Element.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        endpoints = cls._args_schema.linked_notification_rules.Element.endpoints
        endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(endpoints.Element)

        management_group_global_notification_endpoints = cls._args_schema.management_group_global_notification_endpoints
        management_group_global_notification_endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(management_group_global_notification_endpoints.Element)

        notification_settings = cls._args_schema.notification_settings
        notification_settings.subscriber_settings = AAZListArg(
            options=["subscriber-settings"],
        )

        subscriber_settings = cls._args_schema.notification_settings.subscriber_settings
        subscriber_settings.Element = AAZObjectArg()

        _element = cls._args_schema.notification_settings.subscriber_settings.Element
        _element.filter_rules = AAZListArg(
            options=["filter-rules"],
        )

        filter_rules = cls._args_schema.notification_settings.subscriber_settings.Element.filter_rules
        filter_rules.Element = AAZObjectArg()

        _element = cls._args_schema.notification_settings.subscriber_settings.Element.filter_rules.Element
        _element.endpoint_information = AAZListArg(
            options=["endpoint-information"],
        )
        _element.filter_query = AAZStrArg(
            options=["filter-query"],
        )

        endpoint_information = cls._args_schema.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information
        endpoint_information.Element = AAZObjectArg()

        _element = cls._args_schema.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information.Element
        _element.endpoint = AAZStrArg(
            options=["endpoint"],
        )
        _element.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            enum={"Eventhub": "Eventhub", "Webhook": "Webhook"},
        )
        _element.schema_version = AAZStrArg(
            options=["schema-version"],
        )

        notifications = cls._args_schema.notifications
        notifications.Element = AAZObjectArg()

        _element = cls._args_schema.notifications.Element
        _element.notification_type = AAZStrArg(
            options=["notification-type"],
            enum={"SubscriptionNotification": "SubscriptionNotification", "Unspecified": "Unspecified"},
        )
        _element.skip_notifications = AAZStrArg(
            options=["skip-notifications"],
            enum={"Disabled": "Disabled", "Enabled": "Enabled", "Unspecified": "Unspecified"},
        )

        optional_features = cls._args_schema.optional_features
        optional_features.Element = AAZStrArg()

        private_resource_provider_configuration = cls._args_schema.private_resource_provider_configuration
        private_resource_provider_configuration.allowed_subscriptions = AAZListArg(
            options=["allowed-subscriptions"],
        )

        allowed_subscriptions = cls._args_schema.private_resource_provider_configuration.allowed_subscriptions
        allowed_subscriptions.Element = AAZStrArg()

        provider_authentication = cls._args_schema.provider_authentication
        provider_authentication.allowed_audiences = AAZListArg(
            options=["allowed-audiences"],
            required=True,
        )

        allowed_audiences = cls._args_schema.provider_authentication.allowed_audiences
        allowed_audiences.Element = AAZStrArg()

        provider_authorizations = cls._args_schema.provider_authorizations
        provider_authorizations.Element = AAZObjectArg()
        cls._build_args_resource_provider_authorization_create(provider_authorizations.Element)

        provider_hub_metadata = cls._args_schema.provider_hub_metadata
        provider_hub_metadata.direct_rp_role_definition_id = AAZStrArg(
            options=["direct-rp-role-definition-id"],
        )
        provider_hub_metadata.global_async_operation_resource_type_name = AAZStrArg(
            options=["global-async-operation-resource-type-name"],
        )
        provider_hub_metadata.providerhub_metadata_authentication = AAZObjectArg(
            options=["metadata-authn", "provider-authentication", "providerhub-metadata-authentication"],
            help="The ProviderHub metadata authorizations.",
        )
        provider_hub_metadata.providerhub_metadata_authorizations = AAZListArg(
            options=["metadata-authz", "provider-authorizations", "providerhub-metadata-authorizations"],
            singular_options=["providerhub-metadata-authorization", "providerhub-metadata-authorizations"],
            help="The ProviderHub metadata authorizations.",
        )
        provider_hub_metadata.regional_async_operation_resource_type_name = AAZStrArg(
            options=["regional-async-operation-resource-type-name"],
        )
        provider_hub_metadata.lighthouse_authorizations = AAZListArg(
            options=["authorizations", "lighthouse-auth", "lighthouse-authorizations"],
            help="The lighthouse authorizations.",
        )
        provider_hub_metadata.managed_by_tenant_id = AAZStrArg(
            options=["managed-by-tenant-id"],
            help="The managed by tenant ID.",
        )

        providerhub_metadata_authentication = cls._args_schema.provider_hub_metadata.providerhub_metadata_authentication
        providerhub_metadata_authentication.allowed_audiences = AAZListArg(
            options=["allowed-audiences"],
            required=True,
        )

        allowed_audiences = cls._args_schema.provider_hub_metadata.providerhub_metadata_authentication.allowed_audiences
        allowed_audiences.Element = AAZStrArg()

        providerhub_metadata_authorizations = cls._args_schema.provider_hub_metadata.providerhub_metadata_authorizations
        providerhub_metadata_authorizations.Element = AAZObjectArg()
        cls._build_args_resource_provider_authorization_create(providerhub_metadata_authorizations.Element)

        lighthouse_authorizations = cls._args_schema.provider_hub_metadata.lighthouse_authorizations
        lighthouse_authorizations.Element = AAZObjectArg()

        _element = cls._args_schema.provider_hub_metadata.lighthouse_authorizations.Element
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            required=True,
        )
        _element.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
            required=True,
        )

        required_features = cls._args_schema.required_features
        required_features.Element = AAZStrArg()

        resource_group_lock_option_during_move = cls._args_schema.resource_group_lock_option_during_move
        resource_group_lock_option_during_move.block_action_verb = AAZStrArg(
            options=["block-action-verb"],
            help="The action verb that will be blocked when the resource group is locked during move.",
            enum={"Action": "Action", "Delete": "Delete", "NotSpecified": "NotSpecified", "Read": "Read", "Unrecognized": "Unrecognized", "Write": "Write"},
        )

        resource_hydration_accounts = cls._args_schema.resource_hydration_accounts
        resource_hydration_accounts.Element = AAZObjectArg()

        _element = cls._args_schema.resource_hydration_accounts.Element
        _element.account_name = AAZStrArg(
            options=["account-name"],
        )
        _element.encrypted_key = AAZStrArg(
            options=["encrypted-key"],
        )
        _element.max_child_resource_consistency_job_limit = AAZIntArg(
            options=["max-child-resource-consistency-job-limit"],
        )
        _element.subscription_id = AAZStrArg(
            options=["subscription-id"],
        )

        resource_provider_authorization_rules = cls._args_schema.resource_provider_authorization_rules
        resource_provider_authorization_rules.async_operation_polling_rules = AAZObjectArg(
            options=["async-operation-polling-rules"],
        )

        async_operation_polling_rules = cls._args_schema.resource_provider_authorization_rules.async_operation_polling_rules
        async_operation_polling_rules.additional_options = AAZStrArg(
            options=["additional-options"],
            enum={"ProtectedAsyncOperationPolling": "ProtectedAsyncOperationPolling", "ProtectedAsyncOperationPollingAuditOnly": "ProtectedAsyncOperationPollingAuditOnly"},
        )
        async_operation_polling_rules.authorization_actions = AAZListArg(
            options=["authorization-actions"],
        )

        authorization_actions = cls._args_schema.resource_provider_authorization_rules.async_operation_polling_rules.authorization_actions
        authorization_actions.Element = AAZStrArg()

        response_options = cls._args_schema.response_options
        response_options.service_client_options_type = AAZStrArg(
            options=["service-client-options-type"],
            enum={"DisableAutomaticDecompression": "DisableAutomaticDecompression", "NotSpecified": "NotSpecified"},
        )

        services = cls._args_schema.services
        services.Element = AAZObjectArg()

        _element = cls._args_schema.services.Element
        _element.service_name = AAZStrArg(
            options=["service-name"],
            help="The service name.",
        )
        _element.status = AAZStrArg(
            options=["status"],
            enum={"Active": "Active", "Inactive": "Inactive"},
        )

        template_deployment_options = cls._args_schema.template_deployment_options
        template_deployment_options.preflight_options = AAZListArg(
            options=["preflight-options"],
        )
        template_deployment_options.preflight_supported = AAZBoolArg(
            options=["preflight-supported"],
        )

        preflight_options = cls._args_schema.template_deployment_options.preflight_options
        preflight_options.Element = AAZStrArg(
            enum={"ContinueDeploymentOnFailure": "ContinueDeploymentOnFailure", "DefaultValidationOnly": "DefaultValidationOnly", "None": "None"},
        )

        # define Arg Group "RequestHeaderOptions"

        _args_schema = cls._args_schema
        _args_schema.opt_in_headers = AAZStrArg(
            options=["--opt-in-headers"],
            arg_group="RequestHeaderOptions",
            help="The opt-in headers.",
            enum={"ClientGroupMembership": "ClientGroupMembership", "ClientPrincipalNameEncoded": "ClientPrincipalNameEncoded", "MSIResourceIdEncoded": "MSIResourceIdEncoded", "ManagementGroupAncestorsEncoded": "ManagementGroupAncestorsEncoded", "NotSpecified": "NotSpecified", "PrivateLinkId": "PrivateLinkId", "PrivateLinkResourceId": "PrivateLinkResourceId", "PrivateLinkVnetTrafficTag": "PrivateLinkVnetTrafficTag", "ResourceGroupLocation": "ResourceGroupLocation", "SignedAuxiliaryTokens": "SignedAuxiliaryTokens", "SignedUserToken": "SignedUserToken", "UnboundedClientGroupMembership": "UnboundedClientGroupMembership"},
        )
        _args_schema.opt_out_headers = AAZStrArg(
            options=["--opt-out-headers"],
            arg_group="RequestHeaderOptions",
            help="The opt-out headers.",
            enum={"NotSpecified": "NotSpecified", "SystemDataCreatedByLastModifiedBy": "SystemDataCreatedByLastModifiedBy"},
        )

        # define Arg Group "SubscriptionLifecycleNotificationSpecifications"

        _args_schema = cls._args_schema
        _args_schema.soft_delete_ttl = AAZDurationArg(
            options=["--soft-delete-ttl"],
            arg_group="SubscriptionLifecycleNotificationSpecifications",
            help="The soft delete time to live.",
        )
        _args_schema.subscription_state_override_actions = AAZListArg(
            options=["--override-actions", "--subscription-state-override-actions"],
            arg_group="SubscriptionLifecycleNotificationSpecifications",
            help="The subscription state override actions.",
        )

        subscription_state_override_actions = cls._args_schema.subscription_state_override_actions
        subscription_state_override_actions.Element = AAZObjectArg()

        _element = cls._args_schema.subscription_state_override_actions.Element
        _element.action = AAZStrArg(
            options=["action"],
            required=True,
            enum={"BillingCancellation": "BillingCancellation", "DeleteAllResources": "DeleteAllResources", "NoOp": "NoOp", "NotDefined": "NotDefined", "SoftDeleteAllResources": "SoftDeleteAllResources", "UndoSoftDelete": "UndoSoftDelete"},
        )
        _element.state = AAZStrArg(
            options=["state"],
            required=True,
            enum={"Deleted": "Deleted", "Registered": "Registered", "Suspended": "Suspended", "SuspendedToDeleted": "SuspendedToDeleted", "SuspendedToRegistered": "SuspendedToRegistered", "SuspendedToUnregistered": "SuspendedToUnregistered", "SuspendedToWarned": "SuspendedToWarned", "Unregistered": "Unregistered", "Warned": "Warned", "WarnedToDeleted": "WarnedToDeleted", "WarnedToRegistered": "WarnedToRegistered", "WarnedToSuspended": "WarnedToSuspended", "WarnedToUnregistered": "WarnedToUnregistered"},
        )
        return cls._args_schema

    _args_resource_provider_authorization_create = None

    @classmethod
    def _build_args_resource_provider_authorization_create(cls, _schema):
        if cls._args_resource_provider_authorization_create is not None:
            _schema.allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
            _schema.application_id = cls._args_resource_provider_authorization_create.application_id
            _schema.grouping_tag = cls._args_resource_provider_authorization_create.grouping_tag
            _schema.managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
            _schema.managed_by_role_definition_id = cls._args_resource_provider_authorization_create.managed_by_role_definition_id
            _schema.role_definition_id = cls._args_resource_provider_authorization_create.role_definition_id
            return

        cls._args_resource_provider_authorization_create = AAZObjectArg()

        resource_provider_authorization_create = cls._args_resource_provider_authorization_create
        resource_provider_authorization_create.allowed_third_party_extensions = AAZListArg(
            options=["allowed-third-party-extensions"],
        )
        resource_provider_authorization_create.application_id = AAZStrArg(
            options=["application-id"],
        )
        resource_provider_authorization_create.grouping_tag = AAZStrArg(
            options=["grouping-tag"],
        )
        resource_provider_authorization_create.managed_by_authorization = AAZObjectArg(
            options=["managed-by-authorization"],
            help="Managed by authorization.",
        )
        resource_provider_authorization_create.managed_by_role_definition_id = AAZStrArg(
            options=["managed-by-role-definition-id"],
        )
        resource_provider_authorization_create.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
        )

        allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
        allowed_third_party_extensions.Element = AAZObjectArg()

        _element = cls._args_resource_provider_authorization_create.allowed_third_party_extensions.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of third party extension.",
        )

        managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
        managed_by_authorization.additional_authorizations = AAZListArg(
            options=["additional-authorizations"],
        )
        managed_by_authorization.allow_managed_by_inheritance = AAZBoolArg(
            options=["allow-managed-by-inheritance"],
            help="Indicates whether the managed by resource role definition ID should be inherited.",
        )
        managed_by_authorization.managed_by_resource_role_definition_id = AAZStrArg(
            options=["managed-by-resource-role-definition-id"],
            help="The managed by resource role definition ID for the application.",
        )

        additional_authorizations = cls._args_resource_provider_authorization_create.managed_by_authorization.additional_authorizations
        additional_authorizations.Element = AAZObjectArg()

        _element = cls._args_resource_provider_authorization_create.managed_by_authorization.additional_authorizations.Element
        _element.application_id = AAZStrArg(
            options=["application-id"],
        )
        _element.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
        )

        _schema.allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
        _schema.application_id = cls._args_resource_provider_authorization_create.application_id
        _schema.grouping_tag = cls._args_resource_provider_authorization_create.grouping_tag
        _schema.managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
        _schema.managed_by_role_definition_id = cls._args_resource_provider_authorization_create.managed_by_role_definition_id
        _schema.role_definition_id = cls._args_resource_provider_authorization_create.role_definition_id

    _args_resource_provider_endpoint_create = None

    @classmethod
    def _build_args_resource_provider_endpoint_create(cls, _schema):
        if cls._args_resource_provider_endpoint_create is not None:
            _schema.api_versions = cls._args_resource_provider_endpoint_create.api_versions
            _schema.enabled = cls._args_resource_provider_endpoint_create.enabled
            _schema.endpoint_type = cls._args_resource_provider_endpoint_create.endpoint_type
            _schema.endpoint_uri = cls._args_resource_provider_endpoint_create.endpoint_uri
            _schema.features_rule = cls._args_resource_provider_endpoint_create.features_rule
            _schema.locations = cls._args_resource_provider_endpoint_create.locations
            _schema.required_features = cls._args_resource_provider_endpoint_create.required_features
            _schema.sku_link = cls._args_resource_provider_endpoint_create.sku_link
            _schema.timeout = cls._args_resource_provider_endpoint_create.timeout
            return

        cls._args_resource_provider_endpoint_create = AAZObjectArg()

        resource_provider_endpoint_create = cls._args_resource_provider_endpoint_create
        resource_provider_endpoint_create.api_versions = AAZListArg(
            options=["api-versions"],
        )
        resource_provider_endpoint_create.enabled = AAZBoolArg(
            options=["enabled"],
        )
        resource_provider_endpoint_create.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            enum={"Canary": "Canary", "NotSpecified": "NotSpecified", "Production": "Production", "TestInProduction": "TestInProduction"},
        )
        resource_provider_endpoint_create.endpoint_uri = AAZStrArg(
            options=["endpoint-uri"],
        )
        resource_provider_endpoint_create.features_rule = AAZObjectArg(
            options=["features-rule"],
        )
        resource_provider_endpoint_create.locations = AAZListArg(
            options=["locations"],
        )
        resource_provider_endpoint_create.required_features = AAZListArg(
            options=["required-features"],
        )
        resource_provider_endpoint_create.sku_link = AAZStrArg(
            options=["sku-link"],
        )
        resource_provider_endpoint_create.timeout = AAZDurationArg(
            options=["timeout"],
        )

        api_versions = cls._args_resource_provider_endpoint_create.api_versions
        api_versions.Element = AAZStrArg()

        features_rule = cls._args_resource_provider_endpoint_create.features_rule
        features_rule.required_features_policy = AAZStrArg(
            options=["required-features-policy"],
            required=True,
            enum={"All": "All", "Any": "Any"},
        )

        locations = cls._args_resource_provider_endpoint_create.locations
        locations.Element = AAZStrArg()

        required_features = cls._args_resource_provider_endpoint_create.required_features
        required_features.Element = AAZStrArg()

        _schema.api_versions = cls._args_resource_provider_endpoint_create.api_versions
        _schema.enabled = cls._args_resource_provider_endpoint_create.enabled
        _schema.endpoint_type = cls._args_resource_provider_endpoint_create.endpoint_type
        _schema.endpoint_uri = cls._args_resource_provider_endpoint_create.endpoint_uri
        _schema.features_rule = cls._args_resource_provider_endpoint_create.features_rule
        _schema.locations = cls._args_resource_provider_endpoint_create.locations
        _schema.required_features = cls._args_resource_provider_endpoint_create.required_features
        _schema.sku_link = cls._args_resource_provider_endpoint_create.sku_link
        _schema.timeout = cls._args_resource_provider_endpoint_create.timeout

    _args_token_auth_configuration_create = None

    @classmethod
    def _build_args_token_auth_configuration_create(cls, _schema):
        if cls._args_token_auth_configuration_create is not None:
            _schema.authentication_scheme = cls._args_token_auth_configuration_create.authentication_scheme
            _schema.disable_certificate_authentication_fallback = cls._args_token_auth_configuration_create.disable_certificate_authentication_fallback
            _schema.signed_request_scope = cls._args_token_auth_configuration_create.signed_request_scope
            return

        cls._args_token_auth_configuration_create = AAZObjectArg()

        token_auth_configuration_create = cls._args_token_auth_configuration_create
        token_auth_configuration_create.authentication_scheme = AAZStrArg(
            options=["authentication-scheme"],
            enum={"Bearer": "Bearer", "PoP": "PoP"},
        )
        token_auth_configuration_create.disable_certificate_authentication_fallback = AAZBoolArg(
            options=["disable-certificate-authentication-fallback"],
        )
        token_auth_configuration_create.signed_request_scope = AAZStrArg(
            options=["signed-request-scope"],
            enum={"Endpoint": "Endpoint", "ResourceUri": "ResourceUri"},
        )

        _schema.authentication_scheme = cls._args_token_auth_configuration_create.authentication_scheme
        _schema.disable_certificate_authentication_fallback = cls._args_token_auth_configuration_create.disable_certificate_authentication_fallback
        _schema.signed_request_scope = cls._args_token_auth_configuration_create.signed_request_scope

    def _execute_operations(self):
        self.pre_operations()
        yield self.ProviderRegistrationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ProviderRegistrationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("kind", AAZStrType, ".kind")
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("capabilities", AAZListType, ".capabilities")
                properties.set_prop("crossTenantTokenValidation", AAZStrType, ".cross_tenant_token_validation")
                properties.set_prop("customManifestVersion", AAZStrType, ".custom_manifest_version")
                properties.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                properties.set_prop("enableTenantLinkedNotification", AAZBoolType, ".enable_tenant_linked_notification", typ_kwargs={"nullable": True})
                properties.set_prop("featuresRule", AAZObjectType)
                properties.set_prop("globalNotificationEndpoints", AAZListType, ".global_notification_endpoints")
                properties.set_prop("legacyNamespace", AAZStrType, ".legacy_namespace")
                properties.set_prop("legacyRegistrations", AAZListType, ".legacy_registrations")
                properties.set_prop("linkedNotificationRules", AAZListType, ".linked_notification_rules")
                properties.set_prop("management", AAZObjectType)
                properties.set_prop("managementGroupGlobalNotificationEndpoints", AAZListType, ".management_group_global_notification_endpoints")
                properties.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                properties.set_prop("namespace", AAZStrType, ".namespace")
                properties.set_prop("notificationOptions", AAZStrType, ".notification_options")
                properties.set_prop("notificationSettings", AAZObjectType, ".notification_settings")
                properties.set_prop("notifications", AAZListType, ".notifications")
                properties.set_prop("optionalFeatures", AAZListType, ".optional_features")
                properties.set_prop("privateResourceProviderConfiguration", AAZObjectType, ".private_resource_provider_configuration")
                properties.set_prop("providerAuthentication", AAZObjectType, ".provider_authentication")
                properties.set_prop("providerAuthorizations", AAZListType, ".provider_authorizations")
                properties.set_prop("providerHubMetadata", AAZObjectType, ".provider_hub_metadata")
                properties.set_prop("providerType", AAZStrType, ".provider_type")
                properties.set_prop("providerVersion", AAZStrType, ".provider_version")
                properties.set_prop("requestHeaderOptions", AAZObjectType)
                properties.set_prop("requiredFeatures", AAZListType, ".required_features")
                properties.set_prop("resourceGroupLockOptionDuringMove", AAZObjectType, ".resource_group_lock_option_during_move")
                properties.set_prop("resourceHydrationAccounts", AAZListType, ".resource_hydration_accounts")
                properties.set_prop("resourceProviderAuthorizationRules", AAZObjectType, ".resource_provider_authorization_rules")
                properties.set_prop("responseOptions", AAZObjectType, ".response_options")
                properties.set_prop("serviceName", AAZStrType, ".service_name")
                properties.set_prop("services", AAZListType, ".services")
                properties.set_prop("subscriptionLifecycleNotificationSpecifications", AAZObjectType)
                properties.set_prop("templateDeploymentOptions", AAZObjectType, ".template_deployment_options")
                _CreateHelper._build_schema_token_auth_configuration_create(properties.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))

            capabilities = _builder.get(".properties.capabilities")
            if capabilities is not None:
                capabilities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.capabilities[]")
            if _elements is not None:
                _elements.set_prop("effect", AAZStrType, ".effect", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("quotaId", AAZStrType, ".quota_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("requiredFeatures", AAZListType, ".required_features")

            required_features = _builder.get(".properties.capabilities[].requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            features_rule = _builder.get(".properties.featuresRule")
            if features_rule is not None:
                features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

            global_notification_endpoints = _builder.get(".properties.globalNotificationEndpoints")
            if global_notification_endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(global_notification_endpoints.set_elements(AAZObjectType, "."))

            legacy_registrations = _builder.get(".properties.legacyRegistrations")
            if legacy_registrations is not None:
                legacy_registrations.set_elements(AAZStrType, ".")

            linked_notification_rules = _builder.get(".properties.linkedNotificationRules")
            if linked_notification_rules is not None:
                linked_notification_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.linkedNotificationRules[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                _elements.set_prop("endpoints", AAZListType, ".endpoints")
                _CreateHelper._build_schema_token_auth_configuration_create(_elements.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))

            actions = _builder.get(".properties.linkedNotificationRules[].actions")
            if actions is not None:
                actions.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.linkedNotificationRules[].dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            endpoints = _builder.get(".properties.linkedNotificationRules[].endpoints")
            if endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(endpoints.set_elements(AAZObjectType, "."))

            management = _builder.get(".properties.management")
            if management is not None:
                management.set_prop("authorizationOwners", AAZListType, ".authorization_owners")
                management.set_prop("canaryManifestOwners", AAZListType, ".canary_manifest_owners")
                management.set_prop("errorResponseMessageOptions", AAZObjectType, ".error_response_message_options")
                management.set_prop("expeditedRolloutMetadata", AAZObjectType, ".expedited_rollout_metadata")
                management.set_prop("expeditedRolloutSubmitters", AAZListType, ".expedited_rollout_submitters")
                management.set_prop("incidentContactEmail", AAZStrType, ".incident_contact_email")
                management.set_prop("incidentRoutingService", AAZStrType, ".incident_routing_service")
                management.set_prop("incidentRoutingTeam", AAZStrType, ".incident_routing_team")
                management.set_prop("manifestOwners", AAZListType, ".manifest_owners")
                management.set_prop("pcCode", AAZStrType, ".pc_code")
                management.set_prop("profitCenterProgramId", AAZStrType, ".profit_center_program_id")
                management.set_prop("resourceAccessPolicy", AAZStrType, ".resource_access_policy")
                management.set_prop("resourceAccessRoles", AAZListType, ".resource_access_roles")
                management.set_prop("schemaOwners", AAZListType, ".schema_owners")
                management.set_prop("serviceTreeInfos", AAZListType, ".service_tree_infos")

            authorization_owners = _builder.get(".properties.management.authorizationOwners")
            if authorization_owners is not None:
                authorization_owners.set_elements(AAZStrType, ".")

            canary_manifest_owners = _builder.get(".properties.management.canaryManifestOwners")
            if canary_manifest_owners is not None:
                canary_manifest_owners.set_elements(AAZStrType, ".")

            error_response_message_options = _builder.get(".properties.management.errorResponseMessageOptions")
            if error_response_message_options is not None:
                error_response_message_options.set_prop("serverFailureResponseMessageType", AAZStrType, ".server_failure_response_message_type")

            expedited_rollout_metadata = _builder.get(".properties.management.expeditedRolloutMetadata")
            if expedited_rollout_metadata is not None:
                expedited_rollout_metadata.set_prop("enabled", AAZBoolType, ".enabled")
                expedited_rollout_metadata.set_prop("expeditedRolloutIntent", AAZStrType, ".expedited_rollout_intent")

            expedited_rollout_submitters = _builder.get(".properties.management.expeditedRolloutSubmitters")
            if expedited_rollout_submitters is not None:
                expedited_rollout_submitters.set_elements(AAZStrType, ".")

            manifest_owners = _builder.get(".properties.management.manifestOwners")
            if manifest_owners is not None:
                manifest_owners.set_elements(AAZStrType, ".")

            resource_access_roles = _builder.get(".properties.management.resourceAccessRoles")
            if resource_access_roles is not None:
                resource_access_roles.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.management.resourceAccessRoles[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("allowedGroupClaims", AAZListType, ".allowed_group_claims")

            actions = _builder.get(".properties.management.resourceAccessRoles[].actions")
            if actions is not None:
                actions.set_elements(AAZStrType, ".")

            allowed_group_claims = _builder.get(".properties.management.resourceAccessRoles[].allowedGroupClaims")
            if allowed_group_claims is not None:
                allowed_group_claims.set_elements(AAZStrType, ".")

            schema_owners = _builder.get(".properties.management.schemaOwners")
            if schema_owners is not None:
                schema_owners.set_elements(AAZStrType, ".")

            service_tree_infos = _builder.get(".properties.management.serviceTreeInfos")
            if service_tree_infos is not None:
                service_tree_infos.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.management.serviceTreeInfos[]")
            if _elements is not None:
                _elements.set_prop("componentId", AAZStrType, ".component_id")
                _elements.set_prop("readiness", AAZStrType, ".readiness")
                _elements.set_prop("serviceId", AAZStrType, ".service_id")

            management_group_global_notification_endpoints = _builder.get(".properties.managementGroupGlobalNotificationEndpoints")
            if management_group_global_notification_endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(management_group_global_notification_endpoints.set_elements(AAZObjectType, "."))

            metadata = _builder.get(".properties.metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            notification_settings = _builder.get(".properties.notificationSettings")
            if notification_settings is not None:
                notification_settings.set_prop("subscriberSettings", AAZListType, ".subscriber_settings")

            subscriber_settings = _builder.get(".properties.notificationSettings.subscriberSettings")
            if subscriber_settings is not None:
                subscriber_settings.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.notificationSettings.subscriberSettings[]")
            if _elements is not None:
                _elements.set_prop("filterRules", AAZListType, ".filter_rules")

            filter_rules = _builder.get(".properties.notificationSettings.subscriberSettings[].filterRules")
            if filter_rules is not None:
                filter_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.notificationSettings.subscriberSettings[].filterRules[]")
            if _elements is not None:
                _elements.set_prop("endpointInformation", AAZListType, ".endpoint_information")
                _elements.set_prop("filterQuery", AAZStrType, ".filter_query")

            endpoint_information = _builder.get(".properties.notificationSettings.subscriberSettings[].filterRules[].endpointInformation")
            if endpoint_information is not None:
                endpoint_information.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.notificationSettings.subscriberSettings[].filterRules[].endpointInformation[]")
            if _elements is not None:
                _elements.set_prop("endpoint", AAZStrType, ".endpoint")
                _elements.set_prop("endpointType", AAZStrType, ".endpoint_type")
                _elements.set_prop("schemaVersion", AAZStrType, ".schema_version")

            notifications = _builder.get(".properties.notifications")
            if notifications is not None:
                notifications.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.notifications[]")
            if _elements is not None:
                _elements.set_prop("notificationType", AAZStrType, ".notification_type")
                _elements.set_prop("skipNotifications", AAZStrType, ".skip_notifications")

            optional_features = _builder.get(".properties.optionalFeatures")
            if optional_features is not None:
                optional_features.set_elements(AAZStrType, ".")

            private_resource_provider_configuration = _builder.get(".properties.privateResourceProviderConfiguration")
            if private_resource_provider_configuration is not None:
                private_resource_provider_configuration.set_prop("allowedSubscriptions", AAZListType, ".allowed_subscriptions")

            allowed_subscriptions = _builder.get(".properties.privateResourceProviderConfiguration.allowedSubscriptions")
            if allowed_subscriptions is not None:
                allowed_subscriptions.set_elements(AAZStrType, ".")

            provider_authentication = _builder.get(".properties.providerAuthentication")
            if provider_authentication is not None:
                provider_authentication.set_prop("allowedAudiences", AAZListType, ".allowed_audiences", typ_kwargs={"flags": {"required": True}})

            allowed_audiences = _builder.get(".properties.providerAuthentication.allowedAudiences")
            if allowed_audiences is not None:
                allowed_audiences.set_elements(AAZStrType, ".")

            provider_authorizations = _builder.get(".properties.providerAuthorizations")
            if provider_authorizations is not None:
                _CreateHelper._build_schema_resource_provider_authorization_create(provider_authorizations.set_elements(AAZObjectType, "."))

            provider_hub_metadata = _builder.get(".properties.providerHubMetadata")
            if provider_hub_metadata is not None:
                provider_hub_metadata.set_prop("directRpRoleDefinitionId", AAZStrType, ".direct_rp_role_definition_id")
                provider_hub_metadata.set_prop("globalAsyncOperationResourceTypeName", AAZStrType, ".global_async_operation_resource_type_name")
                provider_hub_metadata.set_prop("providerAuthentication", AAZObjectType, ".providerhub_metadata_authentication")
                provider_hub_metadata.set_prop("providerAuthorizations", AAZListType, ".providerhub_metadata_authorizations")
                provider_hub_metadata.set_prop("regionalAsyncOperationResourceTypeName", AAZStrType, ".regional_async_operation_resource_type_name")
                provider_hub_metadata.set_prop("thirdPartyProviderAuthorization", AAZObjectType)

            provider_authentication = _builder.get(".properties.providerHubMetadata.providerAuthentication")
            if provider_authentication is not None:
                provider_authentication.set_prop("allowedAudiences", AAZListType, ".allowed_audiences", typ_kwargs={"flags": {"required": True}})

            allowed_audiences = _builder.get(".properties.providerHubMetadata.providerAuthentication.allowedAudiences")
            if allowed_audiences is not None:
                allowed_audiences.set_elements(AAZStrType, ".")

            provider_authorizations = _builder.get(".properties.providerHubMetadata.providerAuthorizations")
            if provider_authorizations is not None:
                _CreateHelper._build_schema_resource_provider_authorization_create(provider_authorizations.set_elements(AAZObjectType, "."))

            third_party_provider_authorization = _builder.get(".properties.providerHubMetadata.thirdPartyProviderAuthorization")
            if third_party_provider_authorization is not None:
                third_party_provider_authorization.set_prop("authorizations", AAZListType, ".lighthouse_authorizations")
                third_party_provider_authorization.set_prop("managedByTenantId", AAZStrType, ".managed_by_tenant_id")

            authorizations = _builder.get(".properties.providerHubMetadata.thirdPartyProviderAuthorization.authorizations")
            if authorizations is not None:
                authorizations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.providerHubMetadata.thirdPartyProviderAuthorization.authorizations[]")
            if _elements is not None:
                _elements.set_prop("principalId", AAZStrType, ".principal_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id", typ_kwargs={"flags": {"required": True}})

            request_header_options = _builder.get(".properties.requestHeaderOptions")
            if request_header_options is not None:
                request_header_options.set_prop("optInHeaders", AAZStrType, ".opt_in_headers")
                request_header_options.set_prop("optOutHeaders", AAZStrType, ".opt_out_headers")

            required_features = _builder.get(".properties.requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            resource_group_lock_option_during_move = _builder.get(".properties.resourceGroupLockOptionDuringMove")
            if resource_group_lock_option_during_move is not None:
                resource_group_lock_option_during_move.set_prop("blockActionVerb", AAZStrType, ".block_action_verb")

            resource_hydration_accounts = _builder.get(".properties.resourceHydrationAccounts")
            if resource_hydration_accounts is not None:
                resource_hydration_accounts.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.resourceHydrationAccounts[]")
            if _elements is not None:
                _elements.set_prop("accountName", AAZStrType, ".account_name")
                _elements.set_prop("encryptedKey", AAZStrType, ".encrypted_key")
                _elements.set_prop("maxChildResourceConsistencyJobLimit", AAZIntType, ".max_child_resource_consistency_job_limit")
                _elements.set_prop("subscriptionId", AAZStrType, ".subscription_id")

            resource_provider_authorization_rules = _builder.get(".properties.resourceProviderAuthorizationRules")
            if resource_provider_authorization_rules is not None:
                resource_provider_authorization_rules.set_prop("asyncOperationPollingRules", AAZObjectType, ".async_operation_polling_rules")

            async_operation_polling_rules = _builder.get(".properties.resourceProviderAuthorizationRules.asyncOperationPollingRules")
            if async_operation_polling_rules is not None:
                async_operation_polling_rules.set_prop("additionalOptions", AAZStrType, ".additional_options")
                async_operation_polling_rules.set_prop("authorizationActions", AAZListType, ".authorization_actions")

            authorization_actions = _builder.get(".properties.resourceProviderAuthorizationRules.asyncOperationPollingRules.authorizationActions")
            if authorization_actions is not None:
                authorization_actions.set_elements(AAZStrType, ".")

            response_options = _builder.get(".properties.responseOptions")
            if response_options is not None:
                response_options.set_prop("serviceClientOptionsType", AAZStrType, ".service_client_options_type")

            services = _builder.get(".properties.services")
            if services is not None:
                services.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.services[]")
            if _elements is not None:
                _elements.set_prop("serviceName", AAZStrType, ".service_name")
                _elements.set_prop("status", AAZStrType, ".status")

            subscription_lifecycle_notification_specifications = _builder.get(".properties.subscriptionLifecycleNotificationSpecifications")
            if subscription_lifecycle_notification_specifications is not None:
                subscription_lifecycle_notification_specifications.set_prop("softDeleteTTL", AAZStrType, ".soft_delete_ttl")
                subscription_lifecycle_notification_specifications.set_prop("subscriptionStateOverrideActions", AAZListType, ".subscription_state_override_actions")

            subscription_state_override_actions = _builder.get(".properties.subscriptionLifecycleNotificationSpecifications.subscriptionStateOverrideActions")
            if subscription_state_override_actions is not None:
                subscription_state_override_actions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.subscriptionLifecycleNotificationSpecifications.subscriptionStateOverrideActions[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("state", AAZStrType, ".state", typ_kwargs={"flags": {"required": True}})

            template_deployment_options = _builder.get(".properties.templateDeploymentOptions")
            if template_deployment_options is not None:
                template_deployment_options.set_prop("preflightOptions", AAZListType, ".preflight_options")
                template_deployment_options.set_prop("preflightSupported", AAZBoolType, ".preflight_supported")

            preflight_options = _builder.get(".properties.templateDeploymentOptions.preflightOptions")
            if preflight_options is not None:
                preflight_options.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.kind = AAZStrType()
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType()
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.capabilities = AAZListType()
            properties.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            properties.custom_manifest_version = AAZStrType(
                serialized_name="customManifestVersion",
            )
            properties.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            properties.enable_tenant_linked_notification = AAZBoolType(
                serialized_name="enableTenantLinkedNotification",
                nullable=True,
            )
            properties.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            properties.global_notification_endpoints = AAZListType(
                serialized_name="globalNotificationEndpoints",
            )
            properties.legacy_namespace = AAZStrType(
                serialized_name="legacyNamespace",
            )
            properties.legacy_registrations = AAZListType(
                serialized_name="legacyRegistrations",
            )
            properties.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            properties.management = AAZObjectType()
            properties.management_group_global_notification_endpoints = AAZListType(
                serialized_name="managementGroupGlobalNotificationEndpoints",
            )
            properties.metadata = AAZFreeFormDictType()
            properties.namespace = AAZStrType()
            properties.notification_options = AAZStrType(
                serialized_name="notificationOptions",
            )
            properties.notification_settings = AAZObjectType(
                serialized_name="notificationSettings",
            )
            properties.notifications = AAZListType()
            properties.optional_features = AAZListType(
                serialized_name="optionalFeatures",
            )
            properties.private_resource_provider_configuration = AAZObjectType(
                serialized_name="privateResourceProviderConfiguration",
            )
            properties.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            properties.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            properties.provider_hub_metadata = AAZObjectType(
                serialized_name="providerHubMetadata",
            )
            properties.provider_type = AAZStrType(
                serialized_name="providerType",
            )
            properties.provider_version = AAZStrType(
                serialized_name="providerVersion",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            properties.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            properties.resource_group_lock_option_during_move = AAZObjectType(
                serialized_name="resourceGroupLockOptionDuringMove",
            )
            properties.resource_hydration_accounts = AAZListType(
                serialized_name="resourceHydrationAccounts",
            )
            properties.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            properties.response_options = AAZObjectType(
                serialized_name="responseOptions",
            )
            properties.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            properties.services = AAZListType()
            properties.subscription_lifecycle_notification_specifications = AAZObjectType(
                serialized_name="subscriptionLifecycleNotificationSpecifications",
            )
            properties.template_deployment_options = AAZObjectType(
                serialized_name="templateDeploymentOptions",
            )
            properties.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(properties.token_auth_configuration)

            capabilities = cls._schema_on_200_201.properties.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.capabilities.Element
            _element.effect = AAZStrType(
                flags={"required": True},
            )
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            required_features = cls._schema_on_200_201.properties.capabilities.Element.required_features
            required_features.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            features_rule = cls._schema_on_200_201.properties.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            global_notification_endpoints = cls._schema_on_200_201.properties.global_notification_endpoints
            global_notification_endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(global_notification_endpoints.Element)

            legacy_registrations = cls._schema_on_200_201.properties.legacy_registrations
            legacy_registrations.Element = AAZStrType()

            linked_notification_rules = cls._schema_on_200_201.properties.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            _element.endpoints = AAZListType()
            _element.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(_element.token_auth_configuration)

            actions = cls._schema_on_200_201.properties.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.linked_notification_rules.Element.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200_201.properties.linked_notification_rules.Element.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(endpoints.Element)

            management = cls._schema_on_200_201.properties.management
            management.authorization_owners = AAZListType(
                serialized_name="authorizationOwners",
            )
            management.canary_manifest_owners = AAZListType(
                serialized_name="canaryManifestOwners",
            )
            management.error_response_message_options = AAZObjectType(
                serialized_name="errorResponseMessageOptions",
            )
            management.expedited_rollout_metadata = AAZObjectType(
                serialized_name="expeditedRolloutMetadata",
            )
            management.expedited_rollout_submitters = AAZListType(
                serialized_name="expeditedRolloutSubmitters",
            )
            management.incident_contact_email = AAZStrType(
                serialized_name="incidentContactEmail",
            )
            management.incident_routing_service = AAZStrType(
                serialized_name="incidentRoutingService",
            )
            management.incident_routing_team = AAZStrType(
                serialized_name="incidentRoutingTeam",
            )
            management.manifest_owners = AAZListType(
                serialized_name="manifestOwners",
            )
            management.pc_code = AAZStrType(
                serialized_name="pcCode",
            )
            management.profit_center_program_id = AAZStrType(
                serialized_name="profitCenterProgramId",
            )
            management.resource_access_policy = AAZStrType(
                serialized_name="resourceAccessPolicy",
            )
            management.resource_access_roles = AAZListType(
                serialized_name="resourceAccessRoles",
            )
            management.schema_owners = AAZListType(
                serialized_name="schemaOwners",
            )
            management.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )

            authorization_owners = cls._schema_on_200_201.properties.management.authorization_owners
            authorization_owners.Element = AAZStrType()

            canary_manifest_owners = cls._schema_on_200_201.properties.management.canary_manifest_owners
            canary_manifest_owners.Element = AAZStrType()

            error_response_message_options = cls._schema_on_200_201.properties.management.error_response_message_options
            error_response_message_options.server_failure_response_message_type = AAZStrType(
                serialized_name="serverFailureResponseMessageType",
            )

            expedited_rollout_metadata = cls._schema_on_200_201.properties.management.expedited_rollout_metadata
            expedited_rollout_metadata.enabled = AAZBoolType()
            expedited_rollout_metadata.expedited_rollout_intent = AAZStrType(
                serialized_name="expeditedRolloutIntent",
            )

            expedited_rollout_submitters = cls._schema_on_200_201.properties.management.expedited_rollout_submitters
            expedited_rollout_submitters.Element = AAZStrType()

            manifest_owners = cls._schema_on_200_201.properties.management.manifest_owners
            manifest_owners.Element = AAZStrType()

            resource_access_roles = cls._schema_on_200_201.properties.management.resource_access_roles
            resource_access_roles.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.management.resource_access_roles.Element
            _element.actions = AAZListType()
            _element.allowed_group_claims = AAZListType(
                serialized_name="allowedGroupClaims",
            )

            actions = cls._schema_on_200_201.properties.management.resource_access_roles.Element.actions
            actions.Element = AAZStrType()

            allowed_group_claims = cls._schema_on_200_201.properties.management.resource_access_roles.Element.allowed_group_claims
            allowed_group_claims.Element = AAZStrType()

            schema_owners = cls._schema_on_200_201.properties.management.schema_owners
            schema_owners.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200_201.properties.management.service_tree_infos
            service_tree_infos.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.management.service_tree_infos.Element
            _element.component_id = AAZStrType(
                serialized_name="componentId",
            )
            _element.readiness = AAZStrType()
            _element.service_id = AAZStrType(
                serialized_name="serviceId",
            )

            management_group_global_notification_endpoints = cls._schema_on_200_201.properties.management_group_global_notification_endpoints
            management_group_global_notification_endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(management_group_global_notification_endpoints.Element)

            notification_settings = cls._schema_on_200_201.properties.notification_settings
            notification_settings.subscriber_settings = AAZListType(
                serialized_name="subscriberSettings",
            )

            subscriber_settings = cls._schema_on_200_201.properties.notification_settings.subscriber_settings
            subscriber_settings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.notification_settings.subscriber_settings.Element
            _element.filter_rules = AAZListType(
                serialized_name="filterRules",
            )

            filter_rules = cls._schema_on_200_201.properties.notification_settings.subscriber_settings.Element.filter_rules
            filter_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.notification_settings.subscriber_settings.Element.filter_rules.Element
            _element.endpoint_information = AAZListType(
                serialized_name="endpointInformation",
            )
            _element.filter_query = AAZStrType(
                serialized_name="filterQuery",
            )

            endpoint_information = cls._schema_on_200_201.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information
            endpoint_information.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information.Element
            _element.endpoint = AAZStrType()
            _element.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            _element.schema_version = AAZStrType(
                serialized_name="schemaVersion",
            )

            notifications = cls._schema_on_200_201.properties.notifications
            notifications.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.notifications.Element
            _element.notification_type = AAZStrType(
                serialized_name="notificationType",
            )
            _element.skip_notifications = AAZStrType(
                serialized_name="skipNotifications",
            )

            optional_features = cls._schema_on_200_201.properties.optional_features
            optional_features.Element = AAZStrType()

            private_resource_provider_configuration = cls._schema_on_200_201.properties.private_resource_provider_configuration
            private_resource_provider_configuration.allowed_subscriptions = AAZListType(
                serialized_name="allowedSubscriptions",
            )

            allowed_subscriptions = cls._schema_on_200_201.properties.private_resource_provider_configuration.allowed_subscriptions
            allowed_subscriptions.Element = AAZStrType()

            provider_authentication = cls._schema_on_200_201.properties.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200_201.properties.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200_201.properties.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            provider_hub_metadata = cls._schema_on_200_201.properties.provider_hub_metadata
            provider_hub_metadata.direct_rp_role_definition_id = AAZStrType(
                serialized_name="directRpRoleDefinitionId",
            )
            provider_hub_metadata.global_async_operation_resource_type_name = AAZStrType(
                serialized_name="globalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            provider_hub_metadata.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            provider_hub_metadata.regional_async_operation_resource_type_name = AAZStrType(
                serialized_name="regionalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.third_party_provider_authorization = AAZObjectType(
                serialized_name="thirdPartyProviderAuthorization",
            )

            provider_authentication = cls._schema_on_200_201.properties.provider_hub_metadata.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200_201.properties.provider_hub_metadata.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200_201.properties.provider_hub_metadata.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            third_party_provider_authorization = cls._schema_on_200_201.properties.provider_hub_metadata.third_party_provider_authorization
            third_party_provider_authorization.authorizations = AAZListType()
            third_party_provider_authorization.managed_by_tenant_id = AAZStrType(
                serialized_name="managedByTenantId",
            )

            authorizations = cls._schema_on_200_201.properties.provider_hub_metadata.third_party_provider_authorization.authorizations
            authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.provider_hub_metadata.third_party_provider_authorization.authorizations.Element
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
                flags={"required": True},
            )

            request_header_options = cls._schema_on_200_201.properties.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200_201.properties.required_features
            required_features.Element = AAZStrType()

            resource_group_lock_option_during_move = cls._schema_on_200_201.properties.resource_group_lock_option_during_move
            resource_group_lock_option_during_move.block_action_verb = AAZStrType(
                serialized_name="blockActionVerb",
            )

            resource_hydration_accounts = cls._schema_on_200_201.properties.resource_hydration_accounts
            resource_hydration_accounts.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.resource_hydration_accounts.Element
            _element.account_name = AAZStrType(
                serialized_name="accountName",
            )
            _element.encrypted_key = AAZStrType(
                serialized_name="encryptedKey",
            )
            _element.max_child_resource_consistency_job_limit = AAZIntType(
                serialized_name="maxChildResourceConsistencyJobLimit",
            )
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )

            resource_provider_authorization_rules = cls._schema_on_200_201.properties.resource_provider_authorization_rules
            resource_provider_authorization_rules.async_operation_polling_rules = AAZObjectType(
                serialized_name="asyncOperationPollingRules",
            )

            async_operation_polling_rules = cls._schema_on_200_201.properties.resource_provider_authorization_rules.async_operation_polling_rules
            async_operation_polling_rules.additional_options = AAZStrType(
                serialized_name="additionalOptions",
            )
            async_operation_polling_rules.authorization_actions = AAZListType(
                serialized_name="authorizationActions",
            )

            authorization_actions = cls._schema_on_200_201.properties.resource_provider_authorization_rules.async_operation_polling_rules.authorization_actions
            authorization_actions.Element = AAZStrType()

            response_options = cls._schema_on_200_201.properties.response_options
            response_options.service_client_options_type = AAZStrType(
                serialized_name="serviceClientOptionsType",
            )

            services = cls._schema_on_200_201.properties.services
            services.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.services.Element
            _element.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            _element.status = AAZStrType()

            subscription_lifecycle_notification_specifications = cls._schema_on_200_201.properties.subscription_lifecycle_notification_specifications
            subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZStrType(
                serialized_name="softDeleteTTL",
            )
            subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListType(
                serialized_name="subscriptionStateOverrideActions",
            )

            subscription_state_override_actions = cls._schema_on_200_201.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions
            subscription_state_override_actions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.state = AAZStrType(
                flags={"required": True},
            )

            template_deployment_options = cls._schema_on_200_201.properties.template_deployment_options
            template_deployment_options.preflight_options = AAZListType(
                serialized_name="preflightOptions",
            )
            template_deployment_options.preflight_supported = AAZBoolType(
                serialized_name="preflightSupported",
            )

            preflight_options = cls._schema_on_200_201.properties.template_deployment_options.preflight_options
            preflight_options.Element = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_resource_provider_authorization_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("allowedThirdPartyExtensions", AAZListType, ".allowed_third_party_extensions")
        _builder.set_prop("applicationId", AAZStrType, ".application_id")
        _builder.set_prop("groupingTag", AAZStrType, ".grouping_tag")
        _builder.set_prop("managedByAuthorization", AAZObjectType, ".managed_by_authorization")
        _builder.set_prop("managedByRoleDefinitionId", AAZStrType, ".managed_by_role_definition_id")
        _builder.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id")

        allowed_third_party_extensions = _builder.get(".allowedThirdPartyExtensions")
        if allowed_third_party_extensions is not None:
            allowed_third_party_extensions.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".allowedThirdPartyExtensions[]")
        if _elements is not None:
            _elements.set_prop("name", AAZStrType, ".name")

        managed_by_authorization = _builder.get(".managedByAuthorization")
        if managed_by_authorization is not None:
            managed_by_authorization.set_prop("additionalAuthorizations", AAZListType, ".additional_authorizations")
            managed_by_authorization.set_prop("allowManagedByInheritance", AAZBoolType, ".allow_managed_by_inheritance")
            managed_by_authorization.set_prop("managedByResourceRoleDefinitionId", AAZStrType, ".managed_by_resource_role_definition_id")

        additional_authorizations = _builder.get(".managedByAuthorization.additionalAuthorizations")
        if additional_authorizations is not None:
            additional_authorizations.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".managedByAuthorization.additionalAuthorizations[]")
        if _elements is not None:
            _elements.set_prop("applicationId", AAZStrType, ".application_id")
            _elements.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id")

    @classmethod
    def _build_schema_resource_provider_endpoint_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("apiVersions", AAZListType, ".api_versions")
        _builder.set_prop("enabled", AAZBoolType, ".enabled")
        _builder.set_prop("endpointType", AAZStrType, ".endpoint_type")
        _builder.set_prop("endpointUri", AAZStrType, ".endpoint_uri")
        _builder.set_prop("featuresRule", AAZObjectType, ".features_rule")
        _builder.set_prop("locations", AAZListType, ".locations")
        _builder.set_prop("requiredFeatures", AAZListType, ".required_features")
        _builder.set_prop("skuLink", AAZStrType, ".sku_link")
        _builder.set_prop("timeout", AAZStrType, ".timeout")

        api_versions = _builder.get(".apiVersions")
        if api_versions is not None:
            api_versions.set_elements(AAZStrType, ".")

        features_rule = _builder.get(".featuresRule")
        if features_rule is not None:
            features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

        locations = _builder.get(".locations")
        if locations is not None:
            locations.set_elements(AAZStrType, ".")

        required_features = _builder.get(".requiredFeatures")
        if required_features is not None:
            required_features.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_token_auth_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("authenticationScheme", AAZStrType, ".authentication_scheme")
        _builder.set_prop("disableCertificateAuthenticationFallback", AAZBoolType, ".disable_certificate_authentication_fallback")
        _builder.set_prop("signedRequestScope", AAZStrType, ".signed_request_scope")

    _schema_resource_provider_authorization_read = None

    @classmethod
    def _build_schema_resource_provider_authorization_read(cls, _schema):
        if cls._schema_resource_provider_authorization_read is not None:
            _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
            _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
            _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
            _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
            _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
            _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id
            return

        cls._schema_resource_provider_authorization_read = _schema_resource_provider_authorization_read = AAZObjectType()

        resource_provider_authorization_read = _schema_resource_provider_authorization_read
        resource_provider_authorization_read.allowed_third_party_extensions = AAZListType(
            serialized_name="allowedThirdPartyExtensions",
        )
        resource_provider_authorization_read.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        resource_provider_authorization_read.grouping_tag = AAZStrType(
            serialized_name="groupingTag",
        )
        resource_provider_authorization_read.managed_by_authorization = AAZObjectType(
            serialized_name="managedByAuthorization",
        )
        resource_provider_authorization_read.managed_by_role_definition_id = AAZStrType(
            serialized_name="managedByRoleDefinitionId",
        )
        resource_provider_authorization_read.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        allowed_third_party_extensions = _schema_resource_provider_authorization_read.allowed_third_party_extensions
        allowed_third_party_extensions.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.allowed_third_party_extensions.Element
        _element.name = AAZStrType()

        managed_by_authorization = _schema_resource_provider_authorization_read.managed_by_authorization
        managed_by_authorization.additional_authorizations = AAZListType(
            serialized_name="additionalAuthorizations",
        )
        managed_by_authorization.allow_managed_by_inheritance = AAZBoolType(
            serialized_name="allowManagedByInheritance",
        )
        managed_by_authorization.managed_by_resource_role_definition_id = AAZStrType(
            serialized_name="managedByResourceRoleDefinitionId",
        )

        additional_authorizations = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations
        additional_authorizations.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations.Element
        _element.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        _element.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
        _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
        _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
        _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
        _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
        _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id

    _schema_resource_provider_endpoint_read = None

    @classmethod
    def _build_schema_resource_provider_endpoint_read(cls, _schema):
        if cls._schema_resource_provider_endpoint_read is not None:
            _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
            _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
            _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
            _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
            _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
            _schema.locations = cls._schema_resource_provider_endpoint_read.locations
            _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
            _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
            _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout
            return

        cls._schema_resource_provider_endpoint_read = _schema_resource_provider_endpoint_read = AAZObjectType()

        resource_provider_endpoint_read = _schema_resource_provider_endpoint_read
        resource_provider_endpoint_read.api_versions = AAZListType(
            serialized_name="apiVersions",
        )
        resource_provider_endpoint_read.enabled = AAZBoolType()
        resource_provider_endpoint_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        resource_provider_endpoint_read.endpoint_uri = AAZStrType(
            serialized_name="endpointUri",
        )
        resource_provider_endpoint_read.features_rule = AAZObjectType(
            serialized_name="featuresRule",
        )
        resource_provider_endpoint_read.locations = AAZListType()
        resource_provider_endpoint_read.required_features = AAZListType(
            serialized_name="requiredFeatures",
        )
        resource_provider_endpoint_read.sku_link = AAZStrType(
            serialized_name="skuLink",
        )
        resource_provider_endpoint_read.timeout = AAZStrType()

        api_versions = _schema_resource_provider_endpoint_read.api_versions
        api_versions.Element = AAZStrType()

        features_rule = _schema_resource_provider_endpoint_read.features_rule
        features_rule.required_features_policy = AAZStrType(
            serialized_name="requiredFeaturesPolicy",
            flags={"required": True},
        )

        locations = _schema_resource_provider_endpoint_read.locations
        locations.Element = AAZStrType()

        required_features = _schema_resource_provider_endpoint_read.required_features
        required_features.Element = AAZStrType()

        _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
        _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
        _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
        _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
        _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
        _schema.locations = cls._schema_resource_provider_endpoint_read.locations
        _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
        _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
        _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout

    _schema_token_auth_configuration_read = None

    @classmethod
    def _build_schema_token_auth_configuration_read(cls, _schema):
        if cls._schema_token_auth_configuration_read is not None:
            _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
            _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
            _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope
            return

        cls._schema_token_auth_configuration_read = _schema_token_auth_configuration_read = AAZObjectType()

        token_auth_configuration_read = _schema_token_auth_configuration_read
        token_auth_configuration_read.authentication_scheme = AAZStrType(
            serialized_name="authenticationScheme",
        )
        token_auth_configuration_read.disable_certificate_authentication_fallback = AAZBoolType(
            serialized_name="disableCertificateAuthenticationFallback",
        )
        token_auth_configuration_read.signed_request_scope = AAZStrType(
            serialized_name="signedRequestScope",
        )

        _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
        _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
        _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope


__all__ = ["Create"]
