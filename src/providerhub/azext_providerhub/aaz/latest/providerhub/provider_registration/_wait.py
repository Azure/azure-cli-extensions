# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub provider-registration wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}", "2024-04-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_namespace = AAZStrArg(
            options=["-n", "--name", "--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ProviderRegistrationsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ProviderRegistrationsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.kind = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.capabilities = AAZListType()
            properties.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            properties.custom_manifest_version = AAZStrType(
                serialized_name="customManifestVersion",
            )
            properties.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            properties.enable_tenant_linked_notification = AAZBoolType(
                serialized_name="enableTenantLinkedNotification",
                nullable=True,
            )
            properties.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            properties.global_notification_endpoints = AAZListType(
                serialized_name="globalNotificationEndpoints",
            )
            properties.legacy_namespace = AAZStrType(
                serialized_name="legacyNamespace",
            )
            properties.legacy_registrations = AAZListType(
                serialized_name="legacyRegistrations",
            )
            properties.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            properties.management = AAZObjectType()
            properties.management_group_global_notification_endpoints = AAZListType(
                serialized_name="managementGroupGlobalNotificationEndpoints",
            )
            properties.metadata = AAZFreeFormDictType()
            properties.namespace = AAZStrType()
            properties.notification_options = AAZStrType(
                serialized_name="notificationOptions",
            )
            properties.notification_settings = AAZObjectType(
                serialized_name="notificationSettings",
            )
            properties.notifications = AAZListType()
            properties.optional_features = AAZListType(
                serialized_name="optionalFeatures",
            )
            properties.private_resource_provider_configuration = AAZObjectType(
                serialized_name="privateResourceProviderConfiguration",
            )
            properties.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            properties.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            properties.provider_hub_metadata = AAZObjectType(
                serialized_name="providerHubMetadata",
            )
            properties.provider_type = AAZStrType(
                serialized_name="providerType",
            )
            properties.provider_version = AAZStrType(
                serialized_name="providerVersion",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            properties.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            properties.resource_group_lock_option_during_move = AAZObjectType(
                serialized_name="resourceGroupLockOptionDuringMove",
            )
            properties.resource_hydration_accounts = AAZListType(
                serialized_name="resourceHydrationAccounts",
            )
            properties.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            properties.response_options = AAZObjectType(
                serialized_name="responseOptions",
            )
            properties.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            properties.services = AAZListType()
            properties.subscription_lifecycle_notification_specifications = AAZObjectType(
                serialized_name="subscriptionLifecycleNotificationSpecifications",
            )
            properties.template_deployment_options = AAZObjectType(
                serialized_name="templateDeploymentOptions",
            )
            properties.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _WaitHelper._build_schema_token_auth_configuration_read(properties.token_auth_configuration)

            capabilities = cls._schema_on_200.properties.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.capabilities.Element
            _element.effect = AAZStrType(
                flags={"required": True},
            )
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            required_features = cls._schema_on_200.properties.capabilities.Element.required_features
            required_features.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200.properties.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            features_rule = cls._schema_on_200.properties.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            global_notification_endpoints = cls._schema_on_200.properties.global_notification_endpoints
            global_notification_endpoints.Element = AAZObjectType()
            _WaitHelper._build_schema_resource_provider_endpoint_read(global_notification_endpoints.Element)

            legacy_registrations = cls._schema_on_200.properties.legacy_registrations
            legacy_registrations.Element = AAZStrType()

            linked_notification_rules = cls._schema_on_200.properties.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            _element.endpoints = AAZListType()
            _element.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _WaitHelper._build_schema_token_auth_configuration_read(_element.token_auth_configuration)

            actions = cls._schema_on_200.properties.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200.properties.linked_notification_rules.Element.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200.properties.linked_notification_rules.Element.endpoints
            endpoints.Element = AAZObjectType()
            _WaitHelper._build_schema_resource_provider_endpoint_read(endpoints.Element)

            management = cls._schema_on_200.properties.management
            management.authorization_owners = AAZListType(
                serialized_name="authorizationOwners",
            )
            management.canary_manifest_owners = AAZListType(
                serialized_name="canaryManifestOwners",
            )
            management.error_response_message_options = AAZObjectType(
                serialized_name="errorResponseMessageOptions",
            )
            management.expedited_rollout_metadata = AAZObjectType(
                serialized_name="expeditedRolloutMetadata",
            )
            management.expedited_rollout_submitters = AAZListType(
                serialized_name="expeditedRolloutSubmitters",
            )
            management.incident_contact_email = AAZStrType(
                serialized_name="incidentContactEmail",
            )
            management.incident_routing_service = AAZStrType(
                serialized_name="incidentRoutingService",
            )
            management.incident_routing_team = AAZStrType(
                serialized_name="incidentRoutingTeam",
            )
            management.manifest_owners = AAZListType(
                serialized_name="manifestOwners",
            )
            management.pc_code = AAZStrType(
                serialized_name="pcCode",
            )
            management.profit_center_program_id = AAZStrType(
                serialized_name="profitCenterProgramId",
            )
            management.resource_access_policy = AAZStrType(
                serialized_name="resourceAccessPolicy",
            )
            management.resource_access_roles = AAZListType(
                serialized_name="resourceAccessRoles",
            )
            management.schema_owners = AAZListType(
                serialized_name="schemaOwners",
            )
            management.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )

            authorization_owners = cls._schema_on_200.properties.management.authorization_owners
            authorization_owners.Element = AAZStrType()

            canary_manifest_owners = cls._schema_on_200.properties.management.canary_manifest_owners
            canary_manifest_owners.Element = AAZStrType()

            error_response_message_options = cls._schema_on_200.properties.management.error_response_message_options
            error_response_message_options.server_failure_response_message_type = AAZStrType(
                serialized_name="serverFailureResponseMessageType",
            )

            expedited_rollout_metadata = cls._schema_on_200.properties.management.expedited_rollout_metadata
            expedited_rollout_metadata.enabled = AAZBoolType()
            expedited_rollout_metadata.expedited_rollout_intent = AAZStrType(
                serialized_name="expeditedRolloutIntent",
            )

            expedited_rollout_submitters = cls._schema_on_200.properties.management.expedited_rollout_submitters
            expedited_rollout_submitters.Element = AAZStrType()

            manifest_owners = cls._schema_on_200.properties.management.manifest_owners
            manifest_owners.Element = AAZStrType()

            resource_access_roles = cls._schema_on_200.properties.management.resource_access_roles
            resource_access_roles.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.management.resource_access_roles.Element
            _element.actions = AAZListType()
            _element.allowed_group_claims = AAZListType(
                serialized_name="allowedGroupClaims",
            )

            actions = cls._schema_on_200.properties.management.resource_access_roles.Element.actions
            actions.Element = AAZStrType()

            allowed_group_claims = cls._schema_on_200.properties.management.resource_access_roles.Element.allowed_group_claims
            allowed_group_claims.Element = AAZStrType()

            schema_owners = cls._schema_on_200.properties.management.schema_owners
            schema_owners.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200.properties.management.service_tree_infos
            service_tree_infos.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.management.service_tree_infos.Element
            _element.component_id = AAZStrType(
                serialized_name="componentId",
            )
            _element.readiness = AAZStrType()
            _element.service_id = AAZStrType(
                serialized_name="serviceId",
            )

            management_group_global_notification_endpoints = cls._schema_on_200.properties.management_group_global_notification_endpoints
            management_group_global_notification_endpoints.Element = AAZObjectType()
            _WaitHelper._build_schema_resource_provider_endpoint_read(management_group_global_notification_endpoints.Element)

            notification_settings = cls._schema_on_200.properties.notification_settings
            notification_settings.subscriber_settings = AAZListType(
                serialized_name="subscriberSettings",
            )

            subscriber_settings = cls._schema_on_200.properties.notification_settings.subscriber_settings
            subscriber_settings.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.notification_settings.subscriber_settings.Element
            _element.filter_rules = AAZListType(
                serialized_name="filterRules",
            )

            filter_rules = cls._schema_on_200.properties.notification_settings.subscriber_settings.Element.filter_rules
            filter_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.notification_settings.subscriber_settings.Element.filter_rules.Element
            _element.endpoint_information = AAZListType(
                serialized_name="endpointInformation",
            )
            _element.filter_query = AAZStrType(
                serialized_name="filterQuery",
            )

            endpoint_information = cls._schema_on_200.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information
            endpoint_information.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information.Element
            _element.endpoint = AAZStrType()
            _element.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            _element.schema_version = AAZStrType(
                serialized_name="schemaVersion",
            )

            notifications = cls._schema_on_200.properties.notifications
            notifications.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.notifications.Element
            _element.notification_type = AAZStrType(
                serialized_name="notificationType",
            )
            _element.skip_notifications = AAZStrType(
                serialized_name="skipNotifications",
            )

            optional_features = cls._schema_on_200.properties.optional_features
            optional_features.Element = AAZStrType()

            private_resource_provider_configuration = cls._schema_on_200.properties.private_resource_provider_configuration
            private_resource_provider_configuration.allowed_subscriptions = AAZListType(
                serialized_name="allowedSubscriptions",
            )

            allowed_subscriptions = cls._schema_on_200.properties.private_resource_provider_configuration.allowed_subscriptions
            allowed_subscriptions.Element = AAZStrType()

            provider_authentication = cls._schema_on_200.properties.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200.properties.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200.properties.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _WaitHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            provider_hub_metadata = cls._schema_on_200.properties.provider_hub_metadata
            provider_hub_metadata.direct_rp_role_definition_id = AAZStrType(
                serialized_name="directRpRoleDefinitionId",
            )
            provider_hub_metadata.global_async_operation_resource_type_name = AAZStrType(
                serialized_name="globalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            provider_hub_metadata.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            provider_hub_metadata.regional_async_operation_resource_type_name = AAZStrType(
                serialized_name="regionalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.third_party_provider_authorization = AAZObjectType(
                serialized_name="thirdPartyProviderAuthorization",
            )

            provider_authentication = cls._schema_on_200.properties.provider_hub_metadata.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200.properties.provider_hub_metadata.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200.properties.provider_hub_metadata.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _WaitHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            third_party_provider_authorization = cls._schema_on_200.properties.provider_hub_metadata.third_party_provider_authorization
            third_party_provider_authorization.authorizations = AAZListType()
            third_party_provider_authorization.managed_by_tenant_id = AAZStrType(
                serialized_name="managedByTenantId",
            )

            authorizations = cls._schema_on_200.properties.provider_hub_metadata.third_party_provider_authorization.authorizations
            authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_hub_metadata.third_party_provider_authorization.authorizations.Element
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
                flags={"required": True},
            )

            request_header_options = cls._schema_on_200.properties.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200.properties.required_features
            required_features.Element = AAZStrType()

            resource_group_lock_option_during_move = cls._schema_on_200.properties.resource_group_lock_option_during_move
            resource_group_lock_option_during_move.block_action_verb = AAZStrType(
                serialized_name="blockActionVerb",
            )

            resource_hydration_accounts = cls._schema_on_200.properties.resource_hydration_accounts
            resource_hydration_accounts.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.resource_hydration_accounts.Element
            _element.account_name = AAZStrType(
                serialized_name="accountName",
            )
            _element.encrypted_key = AAZStrType(
                serialized_name="encryptedKey",
            )
            _element.max_child_resource_consistency_job_limit = AAZIntType(
                serialized_name="maxChildResourceConsistencyJobLimit",
            )
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )

            resource_provider_authorization_rules = cls._schema_on_200.properties.resource_provider_authorization_rules
            resource_provider_authorization_rules.async_operation_polling_rules = AAZObjectType(
                serialized_name="asyncOperationPollingRules",
            )

            async_operation_polling_rules = cls._schema_on_200.properties.resource_provider_authorization_rules.async_operation_polling_rules
            async_operation_polling_rules.additional_options = AAZStrType(
                serialized_name="additionalOptions",
            )
            async_operation_polling_rules.authorization_actions = AAZListType(
                serialized_name="authorizationActions",
            )

            authorization_actions = cls._schema_on_200.properties.resource_provider_authorization_rules.async_operation_polling_rules.authorization_actions
            authorization_actions.Element = AAZStrType()

            response_options = cls._schema_on_200.properties.response_options
            response_options.service_client_options_type = AAZStrType(
                serialized_name="serviceClientOptionsType",
            )

            services = cls._schema_on_200.properties.services
            services.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.services.Element
            _element.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            _element.status = AAZStrType()

            subscription_lifecycle_notification_specifications = cls._schema_on_200.properties.subscription_lifecycle_notification_specifications
            subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZStrType(
                serialized_name="softDeleteTTL",
            )
            subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListType(
                serialized_name="subscriptionStateOverrideActions",
            )

            subscription_state_override_actions = cls._schema_on_200.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions
            subscription_state_override_actions.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.state = AAZStrType(
                flags={"required": True},
            )

            template_deployment_options = cls._schema_on_200.properties.template_deployment_options
            template_deployment_options.preflight_options = AAZListType(
                serialized_name="preflightOptions",
            )
            template_deployment_options.preflight_supported = AAZBoolType(
                serialized_name="preflightSupported",
            )

            preflight_options = cls._schema_on_200.properties.template_deployment_options.preflight_options
            preflight_options.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""

    _schema_resource_provider_authorization_read = None

    @classmethod
    def _build_schema_resource_provider_authorization_read(cls, _schema):
        if cls._schema_resource_provider_authorization_read is not None:
            _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
            _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
            _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
            _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
            _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
            _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id
            return

        cls._schema_resource_provider_authorization_read = _schema_resource_provider_authorization_read = AAZObjectType()

        resource_provider_authorization_read = _schema_resource_provider_authorization_read
        resource_provider_authorization_read.allowed_third_party_extensions = AAZListType(
            serialized_name="allowedThirdPartyExtensions",
        )
        resource_provider_authorization_read.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        resource_provider_authorization_read.grouping_tag = AAZStrType(
            serialized_name="groupingTag",
        )
        resource_provider_authorization_read.managed_by_authorization = AAZObjectType(
            serialized_name="managedByAuthorization",
        )
        resource_provider_authorization_read.managed_by_role_definition_id = AAZStrType(
            serialized_name="managedByRoleDefinitionId",
        )
        resource_provider_authorization_read.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        allowed_third_party_extensions = _schema_resource_provider_authorization_read.allowed_third_party_extensions
        allowed_third_party_extensions.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.allowed_third_party_extensions.Element
        _element.name = AAZStrType()

        managed_by_authorization = _schema_resource_provider_authorization_read.managed_by_authorization
        managed_by_authorization.additional_authorizations = AAZListType(
            serialized_name="additionalAuthorizations",
        )
        managed_by_authorization.allow_managed_by_inheritance = AAZBoolType(
            serialized_name="allowManagedByInheritance",
        )
        managed_by_authorization.managed_by_resource_role_definition_id = AAZStrType(
            serialized_name="managedByResourceRoleDefinitionId",
        )

        additional_authorizations = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations
        additional_authorizations.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations.Element
        _element.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        _element.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
        _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
        _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
        _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
        _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
        _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id

    _schema_resource_provider_endpoint_read = None

    @classmethod
    def _build_schema_resource_provider_endpoint_read(cls, _schema):
        if cls._schema_resource_provider_endpoint_read is not None:
            _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
            _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
            _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
            _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
            _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
            _schema.locations = cls._schema_resource_provider_endpoint_read.locations
            _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
            _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
            _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout
            return

        cls._schema_resource_provider_endpoint_read = _schema_resource_provider_endpoint_read = AAZObjectType()

        resource_provider_endpoint_read = _schema_resource_provider_endpoint_read
        resource_provider_endpoint_read.api_versions = AAZListType(
            serialized_name="apiVersions",
        )
        resource_provider_endpoint_read.enabled = AAZBoolType()
        resource_provider_endpoint_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        resource_provider_endpoint_read.endpoint_uri = AAZStrType(
            serialized_name="endpointUri",
        )
        resource_provider_endpoint_read.features_rule = AAZObjectType(
            serialized_name="featuresRule",
        )
        resource_provider_endpoint_read.locations = AAZListType()
        resource_provider_endpoint_read.required_features = AAZListType(
            serialized_name="requiredFeatures",
        )
        resource_provider_endpoint_read.sku_link = AAZStrType(
            serialized_name="skuLink",
        )
        resource_provider_endpoint_read.timeout = AAZStrType()

        api_versions = _schema_resource_provider_endpoint_read.api_versions
        api_versions.Element = AAZStrType()

        features_rule = _schema_resource_provider_endpoint_read.features_rule
        features_rule.required_features_policy = AAZStrType(
            serialized_name="requiredFeaturesPolicy",
            flags={"required": True},
        )

        locations = _schema_resource_provider_endpoint_read.locations
        locations.Element = AAZStrType()

        required_features = _schema_resource_provider_endpoint_read.required_features
        required_features.Element = AAZStrType()

        _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
        _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
        _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
        _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
        _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
        _schema.locations = cls._schema_resource_provider_endpoint_read.locations
        _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
        _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
        _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout

    _schema_token_auth_configuration_read = None

    @classmethod
    def _build_schema_token_auth_configuration_read(cls, _schema):
        if cls._schema_token_auth_configuration_read is not None:
            _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
            _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
            _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope
            return

        cls._schema_token_auth_configuration_read = _schema_token_auth_configuration_read = AAZObjectType()

        token_auth_configuration_read = _schema_token_auth_configuration_read
        token_auth_configuration_read.authentication_scheme = AAZStrType(
            serialized_name="authenticationScheme",
        )
        token_auth_configuration_read.disable_certificate_authentication_fallback = AAZBoolType(
            serialized_name="disableCertificateAuthenticationFallback",
        )
        token_auth_configuration_read.signed_request_scope = AAZStrType(
            serialized_name="signedRequestScope",
        )

        _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
        _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
        _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope


__all__ = ["Wait"]
