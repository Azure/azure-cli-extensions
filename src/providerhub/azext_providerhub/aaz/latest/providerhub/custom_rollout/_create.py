# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub custom-rollout create",
)
class Create(AAZCommand):
    """Create the rollout details.

    :example: custom-rollout create
        az providerhub custom-rollout create --provider-namespace "{providerNamespace}" --rollout-name "{customRolloutName}" --canary region="EastUS2EUAP" region="centraluseuap"
    """

    _aaz_info = {
        "version": "2024-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}/customrollouts/{}", "2024-04-01-preview"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_namespace = AAZStrArg(
            options=["--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
        )
        _args_schema.rollout_name = AAZStrArg(
            options=["-n", "--name", "--rollout-name"],
            help="The rollout name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[-\w\._\(\)]+$",
                max_length=260,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.status = AAZObjectArg(
            options=["--status"],
            arg_group="Properties",
        )

        status = cls._args_schema.status
        status.completed_regions = AAZListArg(
            options=["completed-regions"],
        )
        status.failed_or_skipped_regions = AAZDictArg(
            options=["failed-or-skipped-regions"],
        )
        status.manifest_checkin_status = AAZObjectArg(
            options=["manifest-checkin-status"],
        )

        completed_regions = cls._args_schema.status.completed_regions
        completed_regions.Element = AAZStrArg()

        failed_or_skipped_regions = cls._args_schema.status.failed_or_skipped_regions
        failed_or_skipped_regions.Element = AAZObjectArg()
        cls._build_args_extended_error_info_create(failed_or_skipped_regions.Element)

        manifest_checkin_status = cls._args_schema.status.manifest_checkin_status
        manifest_checkin_status.commit_id = AAZStrArg(
            options=["commit-id"],
        )
        manifest_checkin_status.is_checked_in = AAZBoolArg(
            options=["is-checked-in"],
            required=True,
        )
        manifest_checkin_status.pull_request = AAZStrArg(
            options=["pull-request"],
        )
        manifest_checkin_status.status_message = AAZStrArg(
            options=["status-message"],
            required=True,
        )

        # define Arg Group "Specification"

        _args_schema = cls._args_schema
        _args_schema.auto_provision_config = AAZObjectArg(
            options=["--auto-provision-config"],
            arg_group="Specification",
        )
        _args_schema.canary = AAZObjectArg(
            options=["--canary"],
            arg_group="Specification",
            help="The canary regions to apply the manifest.",
        )
        _args_schema.manifest_checkin_specification = AAZObjectArg(
            options=["--manifest-checkin-spec", "--manifest-checkin-specification"],
            arg_group="Specification",
            help="The manifest checkin specification.",
        )
        _args_schema.provider_registration = AAZObjectArg(
            options=["--provider-registration"],
            arg_group="Specification",
        )
        _args_schema.refresh_subscription_registration = AAZBoolArg(
            options=["--refresh-sub-reg", "--refresh-subscription-registration"],
            arg_group="Specification",
            help="Determines if subscription registration should be refreshed.",
        )
        _args_schema.release_scopes = AAZListArg(
            options=["--release-scopes"],
            arg_group="Specification",
        )
        _args_schema.resource_type_registrations = AAZListArg(
            options=["--rt-regs", "--resource-type-registrations"],
            arg_group="Specification",
            help="The resource type registrations.",
        )
        _args_schema.skip_release_scope_validation = AAZBoolArg(
            options=["--skip-validation", "--skip-release-scope-validation"],
            arg_group="Specification",
            help="Determines if release scope validation should be skipped.",
        )

        auto_provision_config = cls._args_schema.auto_provision_config
        auto_provision_config.resource_graph = AAZBoolArg(
            options=["resource-graph"],
        )
        auto_provision_config.storage = AAZBoolArg(
            options=["storage"],
        )

        canary = cls._args_schema.canary
        canary.regions = AAZListArg(
            options=["regions"],
            singular_options=["region"],
            help="The canary regions to apply the manifest",
        )

        regions = cls._args_schema.canary.regions
        regions.Element = AAZStrArg()

        manifest_checkin_specification = cls._args_schema.manifest_checkin_specification
        manifest_checkin_specification.manifest_checkin_option = AAZStrArg(
            options=["checkin-option", "manifest-checkin-option"],
            help="The manifest checkin option.",
            default="DoNotAttemptAutomaticManifestCheckin",
            enum={"AttemptAutomaticManifestCheckin": "AttemptAutomaticManifestCheckin", "DoNotAttemptAutomaticManifestCheckin": "DoNotAttemptAutomaticManifestCheckin"},
        )
        manifest_checkin_specification.manifest_checkin_params = AAZObjectArg(
            options=["checkin-params", "manifest-checkin-params"],
            help="The manifest checkin params.",
        )

        manifest_checkin_params = cls._args_schema.manifest_checkin_specification.manifest_checkin_params
        manifest_checkin_params.baseline_arm_manifest_location = AAZStrArg(
            options=["baseline-arm-manifest-location"],
            help="The baseline ARM manifest location supplied to the checkin manifest operation.",
            required=True,
        )
        manifest_checkin_params.environment = AAZStrArg(
            options=["environment"],
            help="The environment supplied to the checkin manifest operation.",
            required=True,
        )

        provider_registration = cls._args_schema.provider_registration
        provider_registration.kind = AAZStrArg(
            options=["kind"],
            help="Provider registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.",
            default="Managed",
            enum={"Direct": "Direct", "Hybrid": "Hybrid", "Managed": "Managed"},
        )
        provider_registration.capabilities = AAZListArg(
            options=["capabilities"],
        )
        provider_registration.cross_tenant_token_validation = AAZStrArg(
            options=["cross-tenant-token-validation"],
            enum={"EnsureSecureValidation": "EnsureSecureValidation", "PassthroughInsecureToken": "PassthroughInsecureToken"},
        )
        provider_registration.custom_manifest_version = AAZStrArg(
            options=["custom-manifest-version"],
            help="Custom manifest version.",
        )
        provider_registration.dsts_configuration = AAZObjectArg(
            options=["dsts-configuration"],
        )
        provider_registration.enable_tenant_linked_notification = AAZBoolArg(
            options=["enable-tenant-linked-notification"],
            nullable=True,
        )
        provider_registration.features_rule = AAZObjectArg(
            options=["features-rule"],
        )
        provider_registration.global_notification_endpoints = AAZListArg(
            options=["global-notification-endpoints"],
        )
        provider_registration.legacy_namespace = AAZStrArg(
            options=["legacy-namespace"],
            help="Legacy namespace.",
        )
        provider_registration.legacy_registrations = AAZListArg(
            options=["legacy-registrations"],
            help="Legacy registrations.",
        )
        provider_registration.linked_notification_rules = AAZListArg(
            options=["linked-notification-rules"],
        )
        provider_registration.management = AAZObjectArg(
            options=["management"],
        )
        provider_registration.management_group_global_notification_endpoints = AAZListArg(
            options=["management-group-global-notification-endpoints"],
            help="Management groups global notification endpoints.",
        )
        provider_registration.metadata = AAZFreeFormDictArg(
            options=["metadata"],
        )
        provider_registration.namespace = AAZStrArg(
            options=["namespace"],
        )
        provider_registration.notification_options = AAZStrArg(
            options=["notification-options"],
            help="Notification options.",
            enum={"EmitSpendingLimit": "EmitSpendingLimit", "None": "None", "NotSpecified": "NotSpecified"},
        )
        provider_registration.notification_settings = AAZObjectArg(
            options=["notification-settings"],
            help="Notification settings.",
        )
        provider_registration.notifications = AAZListArg(
            options=["notifications"],
        )
        cls._build_args_notifications_create(provider_registration.notifications)
        provider_registration.optional_features = AAZListArg(
            options=["optional-features"],
            help="Optional features.",
        )
        provider_registration.private_resource_provider_configuration = AAZObjectArg(
            options=["private-resource-provider-configuration"],
        )
        provider_registration.provider_authentication = AAZObjectArg(
            options=["provider-authentication"],
        )
        provider_registration.provider_authorizations = AAZListArg(
            options=["provider-authorizations"],
        )
        provider_registration.provider_hub_metadata = AAZObjectArg(
            options=["provider-hub-metadata"],
        )
        provider_registration.provider_type = AAZStrArg(
            options=["provider-type"],
            enum={"AuthorizationFree": "AuthorizationFree", "External": "External", "Hidden": "Hidden", "Internal": "Internal", "LegacyRegistrationRequired": "LegacyRegistrationRequired", "NotSpecified": "NotSpecified", "RegistrationFree": "RegistrationFree", "TenantOnly": "TenantOnly"},
        )
        provider_registration.provider_version = AAZStrArg(
            options=["provider-version"],
        )
        provider_registration.request_header_options = AAZObjectArg(
            options=["request-header-options"],
        )
        provider_registration.required_features = AAZListArg(
            options=["required-features"],
        )
        provider_registration.resource_group_lock_option_during_move = AAZObjectArg(
            options=["resource-group-lock-option-during-move"],
            help="Resource group lock option during move.",
        )
        provider_registration.resource_hydration_accounts = AAZListArg(
            options=["resource-hydration-accounts"],
            help="resource hydration accounts",
        )
        provider_registration.resource_provider_authorization_rules = AAZObjectArg(
            options=["resource-provider-authorization-rules"],
        )
        cls._build_args_resource_provider_authorization_rules_create(provider_registration.resource_provider_authorization_rules)
        provider_registration.response_options = AAZObjectArg(
            options=["response-options"],
            help="Response options.",
        )
        provider_registration.service_name = AAZStrArg(
            options=["service-name"],
        )
        provider_registration.services = AAZListArg(
            options=["services"],
        )
        provider_registration.subscription_lifecycle_notification_specifications = AAZObjectArg(
            options=["subscription-lifecycle-notification-specifications"],
        )
        provider_registration.template_deployment_options = AAZObjectArg(
            options=["template-deployment-options"],
        )
        provider_registration.token_auth_configuration = AAZObjectArg(
            options=["token-auth-configuration"],
        )
        cls._build_args_token_auth_configuration_create(provider_registration.token_auth_configuration)

        capabilities = cls._args_schema.provider_registration.capabilities
        capabilities.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.capabilities.Element
        _element.effect = AAZStrArg(
            options=["effect"],
            required=True,
            enum={"Allow": "Allow", "Disallow": "Disallow", "NotSpecified": "NotSpecified"},
        )
        _element.quota_id = AAZStrArg(
            options=["quota-id"],
            required=True,
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
        )

        required_features = cls._args_schema.provider_registration.capabilities.Element.required_features
        required_features.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.provider_registration.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        features_rule = cls._args_schema.provider_registration.features_rule
        features_rule.required_features_policy = AAZStrArg(
            options=["required-features-policy"],
            required=True,
            enum={"All": "All", "Any": "Any"},
        )

        global_notification_endpoints = cls._args_schema.provider_registration.global_notification_endpoints
        global_notification_endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(global_notification_endpoints.Element)

        legacy_registrations = cls._args_schema.provider_registration.legacy_registrations
        legacy_registrations.Element = AAZStrArg()

        linked_notification_rules = cls._args_schema.provider_registration.linked_notification_rules
        linked_notification_rules.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.linked_notification_rules.Element
        _element.actions = AAZListArg(
            options=["actions"],
        )
        _element.dsts_configuration = AAZObjectArg(
            options=["dsts-configuration"],
        )
        _element.endpoints = AAZListArg(
            options=["endpoints"],
        )
        _element.token_auth_configuration = AAZObjectArg(
            options=["token-auth-configuration"],
        )
        cls._build_args_token_auth_configuration_create(_element.token_auth_configuration)

        actions = cls._args_schema.provider_registration.linked_notification_rules.Element.actions
        actions.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.provider_registration.linked_notification_rules.Element.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        endpoints = cls._args_schema.provider_registration.linked_notification_rules.Element.endpoints
        endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(endpoints.Element)

        management = cls._args_schema.provider_registration.management
        management.authorization_owners = AAZListArg(
            options=["authorization-owners"],
        )
        management.canary_manifest_owners = AAZListArg(
            options=["canary-manifest-owners"],
            help="List of manifest owners for canary.",
        )
        management.error_response_message_options = AAZObjectArg(
            options=["error-response-message-options"],
            help="Options for error response messages.",
        )
        management.expedited_rollout_metadata = AAZObjectArg(
            options=["expedited-rollout-metadata"],
            help="Metadata for expedited rollout.",
        )
        management.expedited_rollout_submitters = AAZListArg(
            options=["expedited-rollout-submitters"],
            help="List of expedited rollout submitters.",
        )
        management.incident_contact_email = AAZStrArg(
            options=["incident-contact-email"],
        )
        management.incident_routing_service = AAZStrArg(
            options=["incident-routing-service"],
        )
        management.incident_routing_team = AAZStrArg(
            options=["incident-routing-team"],
        )
        management.manifest_owners = AAZListArg(
            options=["manifest-owners"],
        )
        management.pc_code = AAZStrArg(
            options=["pc-code"],
            help="The profit center code for the subscription.",
        )
        management.profit_center_program_id = AAZStrArg(
            options=["profit-center-program-id"],
            help="The profit center program id for the subscription.",
        )
        management.resource_access_policy = AAZStrArg(
            options=["resource-access-policy"],
            enum={"AcisActionAllowed": "AcisActionAllowed", "AcisReadAllowed": "AcisReadAllowed", "NotSpecified": "NotSpecified"},
        )
        management.resource_access_roles = AAZListArg(
            options=["resource-access-roles"],
        )
        management.schema_owners = AAZListArg(
            options=["schema-owners"],
        )
        management.service_tree_infos = AAZListArg(
            options=["service-tree-infos"],
        )

        authorization_owners = cls._args_schema.provider_registration.management.authorization_owners
        authorization_owners.Element = AAZStrArg()

        canary_manifest_owners = cls._args_schema.provider_registration.management.canary_manifest_owners
        canary_manifest_owners.Element = AAZStrArg()

        error_response_message_options = cls._args_schema.provider_registration.management.error_response_message_options
        error_response_message_options.server_failure_response_message_type = AAZStrArg(
            options=["server-failure-response-message-type"],
            help="Type of server failure response message.",
            enum={"NotSpecified": "NotSpecified", "OutageReporting": "OutageReporting"},
        )

        expedited_rollout_metadata = cls._args_schema.provider_registration.management.expedited_rollout_metadata
        expedited_rollout_metadata.enabled = AAZBoolArg(
            options=["enabled"],
            help="Expedited rollout enabled?",
        )
        expedited_rollout_metadata.expedited_rollout_intent = AAZStrArg(
            options=["expedited-rollout-intent"],
            help="Expedited rollout intent.",
            enum={"Hotfix": "Hotfix", "NotSpecified": "NotSpecified"},
        )

        expedited_rollout_submitters = cls._args_schema.provider_registration.management.expedited_rollout_submitters
        expedited_rollout_submitters.Element = AAZStrArg()

        manifest_owners = cls._args_schema.provider_registration.management.manifest_owners
        manifest_owners.Element = AAZStrArg()

        resource_access_roles = cls._args_schema.provider_registration.management.resource_access_roles
        resource_access_roles.Element = AAZObjectArg()
        cls._build_args_resource_access_role_create(resource_access_roles.Element)

        schema_owners = cls._args_schema.provider_registration.management.schema_owners
        schema_owners.Element = AAZStrArg()

        service_tree_infos = cls._args_schema.provider_registration.management.service_tree_infos
        service_tree_infos.Element = AAZObjectArg()
        cls._build_args_service_tree_info_create(service_tree_infos.Element)

        management_group_global_notification_endpoints = cls._args_schema.provider_registration.management_group_global_notification_endpoints
        management_group_global_notification_endpoints.Element = AAZObjectArg()
        cls._build_args_resource_provider_endpoint_create(management_group_global_notification_endpoints.Element)

        notification_settings = cls._args_schema.provider_registration.notification_settings
        notification_settings.subscriber_settings = AAZListArg(
            options=["subscriber-settings"],
        )

        subscriber_settings = cls._args_schema.provider_registration.notification_settings.subscriber_settings
        subscriber_settings.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.notification_settings.subscriber_settings.Element
        _element.filter_rules = AAZListArg(
            options=["filter-rules"],
        )

        filter_rules = cls._args_schema.provider_registration.notification_settings.subscriber_settings.Element.filter_rules
        filter_rules.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.notification_settings.subscriber_settings.Element.filter_rules.Element
        _element.endpoint_information = AAZListArg(
            options=["endpoint-information"],
        )
        _element.filter_query = AAZStrArg(
            options=["filter-query"],
        )

        endpoint_information = cls._args_schema.provider_registration.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information
        endpoint_information.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information.Element
        _element.endpoint = AAZStrArg(
            options=["endpoint"],
        )
        _element.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            enum={"Eventhub": "Eventhub", "Webhook": "Webhook"},
        )
        _element.schema_version = AAZStrArg(
            options=["schema-version"],
        )

        optional_features = cls._args_schema.provider_registration.optional_features
        optional_features.Element = AAZStrArg()

        private_resource_provider_configuration = cls._args_schema.provider_registration.private_resource_provider_configuration
        private_resource_provider_configuration.allowed_subscriptions = AAZListArg(
            options=["allowed-subscriptions"],
        )

        allowed_subscriptions = cls._args_schema.provider_registration.private_resource_provider_configuration.allowed_subscriptions
        allowed_subscriptions.Element = AAZStrArg()

        provider_authentication = cls._args_schema.provider_registration.provider_authentication
        provider_authentication.allowed_audiences = AAZListArg(
            options=["allowed-audiences"],
            required=True,
        )

        allowed_audiences = cls._args_schema.provider_registration.provider_authentication.allowed_audiences
        allowed_audiences.Element = AAZStrArg()

        provider_authorizations = cls._args_schema.provider_registration.provider_authorizations
        provider_authorizations.Element = AAZObjectArg()
        cls._build_args_resource_provider_authorization_create(provider_authorizations.Element)

        provider_hub_metadata = cls._args_schema.provider_registration.provider_hub_metadata
        provider_hub_metadata.direct_rp_role_definition_id = AAZStrArg(
            options=["direct-rp-role-definition-id"],
        )
        provider_hub_metadata.global_async_operation_resource_type_name = AAZStrArg(
            options=["global-async-operation-resource-type-name"],
        )
        provider_hub_metadata.provider_authentication = AAZObjectArg(
            options=["provider-authentication"],
        )
        provider_hub_metadata.provider_authorizations = AAZListArg(
            options=["provider-authorizations"],
        )
        provider_hub_metadata.regional_async_operation_resource_type_name = AAZStrArg(
            options=["regional-async-operation-resource-type-name"],
        )
        provider_hub_metadata.third_party_provider_authorization = AAZObjectArg(
            options=["third-party-provider-authorization"],
        )

        provider_authentication = cls._args_schema.provider_registration.provider_hub_metadata.provider_authentication
        provider_authentication.allowed_audiences = AAZListArg(
            options=["allowed-audiences"],
            required=True,
        )

        allowed_audiences = cls._args_schema.provider_registration.provider_hub_metadata.provider_authentication.allowed_audiences
        allowed_audiences.Element = AAZStrArg()

        provider_authorizations = cls._args_schema.provider_registration.provider_hub_metadata.provider_authorizations
        provider_authorizations.Element = AAZObjectArg()
        cls._build_args_resource_provider_authorization_create(provider_authorizations.Element)

        third_party_provider_authorization = cls._args_schema.provider_registration.provider_hub_metadata.third_party_provider_authorization
        third_party_provider_authorization.authorizations = AAZListArg(
            options=["authorizations"],
        )
        third_party_provider_authorization.managed_by_tenant_id = AAZStrArg(
            options=["managed-by-tenant-id"],
        )

        authorizations = cls._args_schema.provider_registration.provider_hub_metadata.third_party_provider_authorization.authorizations
        authorizations.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.provider_hub_metadata.third_party_provider_authorization.authorizations.Element
        _element.principal_id = AAZStrArg(
            options=["principal-id"],
            required=True,
        )
        _element.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
            required=True,
        )

        request_header_options = cls._args_schema.provider_registration.request_header_options
        request_header_options.opt_in_headers = AAZStrArg(
            options=["opt-in-headers"],
            enum={"ClientGroupMembership": "ClientGroupMembership", "ClientPrincipalNameEncoded": "ClientPrincipalNameEncoded", "MSIResourceIdEncoded": "MSIResourceIdEncoded", "ManagementGroupAncestorsEncoded": "ManagementGroupAncestorsEncoded", "NotSpecified": "NotSpecified", "PrivateLinkId": "PrivateLinkId", "PrivateLinkResourceId": "PrivateLinkResourceId", "PrivateLinkVnetTrafficTag": "PrivateLinkVnetTrafficTag", "ResourceGroupLocation": "ResourceGroupLocation", "SignedAuxiliaryTokens": "SignedAuxiliaryTokens", "SignedUserToken": "SignedUserToken", "UnboundedClientGroupMembership": "UnboundedClientGroupMembership"},
        )
        request_header_options.opt_out_headers = AAZStrArg(
            options=["opt-out-headers"],
            enum={"NotSpecified": "NotSpecified", "SystemDataCreatedByLastModifiedBy": "SystemDataCreatedByLastModifiedBy"},
        )

        required_features = cls._args_schema.provider_registration.required_features
        required_features.Element = AAZStrArg()

        resource_group_lock_option_during_move = cls._args_schema.provider_registration.resource_group_lock_option_during_move
        resource_group_lock_option_during_move.block_action_verb = AAZStrArg(
            options=["block-action-verb"],
            help="The action verb that will be blocked when the resource group is locked during move.",
            enum={"Action": "Action", "Delete": "Delete", "NotSpecified": "NotSpecified", "Read": "Read", "Unrecognized": "Unrecognized", "Write": "Write"},
        )

        resource_hydration_accounts = cls._args_schema.provider_registration.resource_hydration_accounts
        resource_hydration_accounts.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.resource_hydration_accounts.Element
        _element.account_name = AAZStrArg(
            options=["account-name"],
        )
        _element.encrypted_key = AAZStrArg(
            options=["encrypted-key"],
        )
        _element.max_child_resource_consistency_job_limit = AAZIntArg(
            options=["max-child-resource-consistency-job-limit"],
        )
        _element.subscription_id = AAZStrArg(
            options=["subscription-id"],
        )

        response_options = cls._args_schema.provider_registration.response_options
        response_options.service_client_options_type = AAZStrArg(
            options=["service-client-options-type"],
            enum={"DisableAutomaticDecompression": "DisableAutomaticDecompression", "NotSpecified": "NotSpecified"},
        )

        services = cls._args_schema.provider_registration.services
        services.Element = AAZObjectArg()

        _element = cls._args_schema.provider_registration.services.Element
        _element.service_name = AAZStrArg(
            options=["service-name"],
        )
        _element.status = AAZStrArg(
            options=["status"],
            enum={"Active": "Active", "Inactive": "Inactive"},
        )

        subscription_lifecycle_notification_specifications = cls._args_schema.provider_registration.subscription_lifecycle_notification_specifications
        subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZDurationArg(
            options=["soft-delete-ttl"],
        )
        subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListArg(
            options=["subscription-state-override-actions"],
        )

        subscription_state_override_actions = cls._args_schema.provider_registration.subscription_lifecycle_notification_specifications.subscription_state_override_actions
        subscription_state_override_actions.Element = AAZObjectArg()
        cls._build_args_subscription_state_override_action_create(subscription_state_override_actions.Element)

        template_deployment_options = cls._args_schema.provider_registration.template_deployment_options
        template_deployment_options.preflight_options = AAZListArg(
            options=["preflight-options"],
        )
        template_deployment_options.preflight_supported = AAZBoolArg(
            options=["preflight-supported"],
        )

        preflight_options = cls._args_schema.provider_registration.template_deployment_options.preflight_options
        preflight_options.Element = AAZStrArg(
            enum={"ContinueDeploymentOnFailure": "ContinueDeploymentOnFailure", "DefaultValidationOnly": "DefaultValidationOnly", "None": "None"},
        )

        release_scopes = cls._args_schema.release_scopes
        release_scopes.Element = AAZStrArg()

        resource_type_registrations = cls._args_schema.resource_type_registrations
        resource_type_registrations.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element
        _element.kind = AAZStrArg(
            options=["kind"],
            help="Resource type registration kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.",
            default="Managed",
            enum={"Direct": "Direct", "Hybrid": "Hybrid", "Managed": "Managed"},
        )
        _element.add_resource_list_target_locations = AAZBoolArg(
            options=["add-resource-list-target-locations"],
            help="Add resource list target locations?",
        )
        _element.additional_options = AAZStrArg(
            options=["additional-options"],
            enum={"ProtectedAsyncOperationPolling": "ProtectedAsyncOperationPolling", "ProtectedAsyncOperationPollingAuditOnly": "ProtectedAsyncOperationPollingAuditOnly"},
        )
        _element.allow_empty_role_assignments = AAZBoolArg(
            options=["allow-empty-role-assignments"],
        )
        _element.allowed_resource_names = AAZListArg(
            options=["allowed-resource-names"],
        )
        _element.allowed_template_deployment_reference_actions = AAZListArg(
            options=["allowed-template-deployment-reference-actions"],
            help="Allowed template deployment reference actions.",
        )
        _element.allowed_unauthorized_actions = AAZListArg(
            options=["allowed-unauthorized-actions"],
        )
        _element.api_profiles = AAZListArg(
            options=["api-profiles"],
        )
        _element.async_operation_resource_type_name = AAZStrArg(
            options=["async-operation-resource-type-name"],
        )
        _element.async_timeout_rules = AAZListArg(
            options=["async-timeout-rules"],
            help="Async timeout rules",
        )
        _element.authorization_action_mappings = AAZListArg(
            options=["authorization-action-mappings"],
        )
        _element.availability_zone_rule = AAZObjectArg(
            options=["availability-zone-rule"],
        )
        _element.capacity_rule = AAZObjectArg(
            options=["capacity-rule"],
            help="Capacity rule.",
        )
        _element.category = AAZStrArg(
            options=["category"],
            enum={"FreeForm": "FreeForm", "Internal": "Internal", "None": "None", "PureProxy": "PureProxy"},
        )
        _element.check_name_availability_specifications = AAZObjectArg(
            options=["check-name-availability-specifications"],
        )
        _element.common_api_versions = AAZListArg(
            options=["common-api-versions"],
            help="Common API versions for the resource type.",
        )
        _element.cross_tenant_token_validation = AAZStrArg(
            options=["cross-tenant-token-validation"],
            enum={"EnsureSecureValidation": "EnsureSecureValidation", "PassthroughInsecureToken": "PassthroughInsecureToken"},
        )
        _element.default_api_version = AAZStrArg(
            options=["default-api-version"],
        )
        _element.disallowed_action_verbs = AAZListArg(
            options=["disallowed-action-verbs"],
        )
        _element.disallowed_end_user_operations = AAZListArg(
            options=["disallowed-end-user-operations"],
        )
        _element.dsts_configuration = AAZObjectArg(
            options=["dsts-configuration"],
        )
        _element.enable_async_operation = AAZBoolArg(
            options=["enable-async-operation"],
        )
        _element.enable_third_party_s2_s = AAZBoolArg(
            options=["enable-third-party-s2-s"],
        )
        _element.endpoints = AAZListArg(
            options=["endpoints"],
        )
        _element.extended_locations = AAZListArg(
            options=["extended-locations"],
        )
        _element.extension_options = AAZObjectArg(
            options=["extension-options"],
        )
        _element.features_rule = AAZObjectArg(
            options=["features-rule"],
        )
        _element.frontdoor_request_mode = AAZStrArg(
            options=["frontdoor-request-mode"],
            enum={"NotSpecified": "NotSpecified", "UseManifest": "UseManifest"},
        )
        _element.grouping_tag = AAZStrArg(
            options=["grouping-tag"],
            help="Grouping tag.",
        )
        _element.identity_management = AAZObjectArg(
            options=["identity-management"],
        )
        _element.is_pure_proxy = AAZBoolArg(
            options=["is-pure-proxy"],
        )
        _element.legacy_name = AAZStrArg(
            options=["legacy-name"],
        )
        _element.legacy_names = AAZListArg(
            options=["legacy-names"],
        )
        _element.legacy_policy = AAZObjectArg(
            options=["legacy-policy"],
        )
        _element.linked_access_checks = AAZListArg(
            options=["linked-access-checks"],
        )
        _element.linked_notification_rules = AAZListArg(
            options=["linked-notification-rules"],
        )
        _element.linked_operation_rules = AAZListArg(
            options=["linked-operation-rules"],
        )
        _element.logging_rules = AAZListArg(
            options=["logging-rules"],
        )
        _element.managed_resource_group_configuration = AAZObjectArg(
            options=["managed-resource-group-configuration"],
        )
        _element.management = AAZObjectArg(
            options=["management"],
        )
        _element.manifest_link = AAZStrArg(
            options=["manifest-link"],
            help="Manifest link.",
        )
        _element.marketplace_options = AAZObjectArg(
            options=["marketplace-options"],
            help="Marketplace options.",
        )
        _element.marketplace_type = AAZStrArg(
            options=["marketplace-type"],
            enum={"AddOn": "AddOn", "Bypass": "Bypass", "NotSpecified": "NotSpecified", "Store": "Store"},
        )
        _element.metadata = AAZDictArg(
            options=["metadata"],
        )
        _element.notifications = AAZListArg(
            options=["notifications"],
        )
        cls._build_args_notifications_create(_element.notifications)
        _element.on_behalf_of_tokens = AAZObjectArg(
            options=["on-behalf-of-tokens"],
        )
        _element.open_api_configuration = AAZObjectArg(
            options=["open-api-configuration"],
        )
        _element.policy_execution_type = AAZStrArg(
            options=["policy-execution-type"],
            enum={"BypassPolicies": "BypassPolicies", "ExecutePolicies": "ExecutePolicies", "ExpectPartialPutRequests": "ExpectPartialPutRequests", "NotSpecified": "NotSpecified"},
        )
        _element.private_endpoint_configuration = AAZObjectArg(
            options=["private-endpoint-configuration"],
        )
        _element.quota_rule = AAZObjectArg(
            options=["quota-rule"],
        )
        _element.regionality = AAZStrArg(
            options=["regionality"],
            enum={"Global": "Global", "NotSpecified": "NotSpecified", "Regional": "Regional"},
        )
        _element.request_header_options = AAZObjectArg(
            options=["request-header-options"],
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
        )
        _element.resource_cache = AAZObjectArg(
            options=["resource-cache"],
            help="Resource cache options.",
        )
        _element.resource_concurrency_control_options = AAZDictArg(
            options=["resource-concurrency-control-options"],
        )
        _element.resource_deletion_policy = AAZStrArg(
            options=["resource-deletion-policy"],
            enum={"CascadeDeleteAll": "CascadeDeleteAll", "CascadeDeleteProxyOnlyChildren": "CascadeDeleteProxyOnlyChildren", "NotSpecified": "NotSpecified"},
        )
        _element.resource_graph_configuration = AAZObjectArg(
            options=["resource-graph-configuration"],
        )
        _element.resource_management_options = AAZObjectArg(
            options=["resource-management-options"],
            help="Resource management options.",
        )
        _element.resource_move_policy = AAZObjectArg(
            options=["resource-move-policy"],
        )
        _element.resource_provider_authorization_rules = AAZObjectArg(
            options=["resource-provider-authorization-rules"],
        )
        cls._build_args_resource_provider_authorization_rules_create(_element.resource_provider_authorization_rules)
        _element.resource_query_management = AAZObjectArg(
            options=["resource-query-management"],
            help="Resource query management options.",
        )
        _element.resource_sub_type = AAZStrArg(
            options=["resource-sub-type"],
            enum={"AsyncOperation": "AsyncOperation", "NotSpecified": "NotSpecified"},
        )
        _element.resource_type_common_attribute_management = AAZObjectArg(
            options=["resource-type-common-attribute-management"],
            help="Resource type common attribute management.",
        )
        _element.resource_validation = AAZStrArg(
            options=["resource-validation"],
            enum={"NotSpecified": "NotSpecified", "ProfaneWords": "ProfaneWords", "ReservedWords": "ReservedWords"},
        )
        _element.routing_rule = AAZObjectArg(
            options=["routing-rule"],
            help="Routing rule.",
        )
        _element.routing_type = AAZStrArg(
            options=["routing-type"],
            enum={"CascadeExtension": "CascadeExtension", "Default": "Default", "Extension": "Extension", "Failover": "Failover", "Fanout": "Fanout", "HostBased": "HostBased", "LocationBased": "LocationBased", "ProxyOnly": "ProxyOnly", "Tenant": "Tenant"},
        )
        _element.service_tree_infos = AAZListArg(
            options=["service-tree-infos"],
        )
        _element.sku_link = AAZStrArg(
            options=["sku-link"],
        )
        _element.subscription_lifecycle_notification_specifications = AAZObjectArg(
            options=["subscription-lifecycle-notification-specifications"],
        )
        _element.subscription_state_rules = AAZListArg(
            options=["subscription-state-rules"],
        )
        _element.supports_tags = AAZBoolArg(
            options=["supports-tags"],
        )
        _element.swagger_specifications = AAZListArg(
            options=["swagger-specifications"],
        )
        _element.template_deployment_options = AAZObjectArg(
            options=["template-deployment-options"],
        )
        _element.template_deployment_policy = AAZObjectArg(
            options=["template-deployment-policy"],
        )
        _element.throttling_rules = AAZListArg(
            options=["throttling-rules"],
        )
        _element.token_auth_configuration = AAZObjectArg(
            options=["token-auth-configuration"],
        )
        cls._build_args_token_auth_configuration_create(_element.token_auth_configuration)

        allowed_resource_names = cls._args_schema.resource_type_registrations.Element.allowed_resource_names
        allowed_resource_names.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.allowed_resource_names.Element
        _element.get_action_verb = AAZStrArg(
            options=["get-action-verb"],
            help="Get action verb.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Resource name.",
        )

        allowed_template_deployment_reference_actions = cls._args_schema.resource_type_registrations.Element.allowed_template_deployment_reference_actions
        allowed_template_deployment_reference_actions.Element = AAZStrArg()

        allowed_unauthorized_actions = cls._args_schema.resource_type_registrations.Element.allowed_unauthorized_actions
        allowed_unauthorized_actions.Element = AAZStrArg()

        api_profiles = cls._args_schema.resource_type_registrations.Element.api_profiles
        api_profiles.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.api_profiles.Element
        _element.api_version = AAZStrArg(
            options=["api-version"],
            help="Api version.",
        )
        _element.profile_version = AAZStrArg(
            options=["profile-version"],
            help="Profile version.",
        )

        async_timeout_rules = cls._args_schema.resource_type_registrations.Element.async_timeout_rules
        async_timeout_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.async_timeout_rules.Element
        _element.action_name = AAZStrArg(
            options=["action-name"],
        )
        _element.timeout = AAZStrArg(
            options=["timeout"],
        )

        authorization_action_mappings = cls._args_schema.resource_type_registrations.Element.authorization_action_mappings
        authorization_action_mappings.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.authorization_action_mappings.Element
        _element.desired = AAZStrArg(
            options=["desired"],
        )
        _element.original = AAZStrArg(
            options=["original"],
        )

        availability_zone_rule = cls._args_schema.resource_type_registrations.Element.availability_zone_rule
        availability_zone_rule.availability_zone_policy = AAZStrArg(
            options=["availability-zone-policy"],
            enum={"MultiZoned": "MultiZoned", "NotSpecified": "NotSpecified", "SingleZoned": "SingleZoned"},
        )

        capacity_rule = cls._args_schema.resource_type_registrations.Element.capacity_rule
        capacity_rule.capacity_policy = AAZStrArg(
            options=["capacity-policy"],
            help="Capacity policy.",
            enum={"Default": "Default", "Restricted": "Restricted"},
        )
        capacity_rule.sku_alias = AAZStrArg(
            options=["sku-alias"],
            help="Sku alias",
        )

        check_name_availability_specifications = cls._args_schema.resource_type_registrations.Element.check_name_availability_specifications
        check_name_availability_specifications.enable_default_validation = AAZBoolArg(
            options=["enable-default-validation"],
        )
        check_name_availability_specifications.resource_types_with_custom_validation = AAZListArg(
            options=["resource-types-with-custom-validation"],
        )

        resource_types_with_custom_validation = cls._args_schema.resource_type_registrations.Element.check_name_availability_specifications.resource_types_with_custom_validation
        resource_types_with_custom_validation.Element = AAZStrArg()

        common_api_versions = cls._args_schema.resource_type_registrations.Element.common_api_versions
        common_api_versions.Element = AAZStrArg()

        disallowed_action_verbs = cls._args_schema.resource_type_registrations.Element.disallowed_action_verbs
        disallowed_action_verbs.Element = AAZStrArg()

        disallowed_end_user_operations = cls._args_schema.resource_type_registrations.Element.disallowed_end_user_operations
        disallowed_end_user_operations.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.resource_type_registrations.Element.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        endpoints = cls._args_schema.resource_type_registrations.Element.endpoints
        endpoints.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.endpoints.Element
        _element.api_version = AAZStrArg(
            options=["api-version"],
            help="Api version.",
        )
        _element.api_versions = AAZListArg(
            options=["api-versions"],
        )
        _element.data_boundary = AAZStrArg(
            options=["data-boundary"],
            enum={"EU": "EU", "Global": "Global", "NotDefined": "NotDefined", "US": "US"},
        )
        _element.dsts_configuration = AAZObjectArg(
            options=["dsts-configuration"],
        )
        _element.enabled = AAZBoolArg(
            options=["enabled"],
        )
        _element.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            enum={"Canary": "Canary", "NotSpecified": "NotSpecified", "Production": "Production", "TestInProduction": "TestInProduction"},
        )
        _element.endpoint_uri = AAZStrArg(
            options=["endpoint-uri"],
        )
        _element.extensions = AAZListArg(
            options=["extensions"],
        )
        _element.features_rule = AAZObjectArg(
            options=["features-rule"],
        )
        _element.kind = AAZStrArg(
            options=["kind"],
            help="Resource type endpoint kind. This Metadata is also used by portal/tooling/etc to render different UX experiences for resources of the same type.",
            default="Managed",
            enum={"Direct": "Direct", "Managed": "Managed"},
        )
        _element.locations = AAZListArg(
            options=["locations"],
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
        )
        _element.sku_link = AAZStrArg(
            options=["sku-link"],
        )
        _element.timeout = AAZDurationArg(
            options=["timeout"],
        )
        _element.token_auth_configuration = AAZObjectArg(
            options=["token-auth-configuration"],
        )
        cls._build_args_token_auth_configuration_create(_element.token_auth_configuration)
        _element.zones = AAZListArg(
            options=["zones"],
            help="List of zones.",
        )

        api_versions = cls._args_schema.resource_type_registrations.Element.endpoints.Element.api_versions
        api_versions.Element = AAZStrArg()

        dsts_configuration = cls._args_schema.resource_type_registrations.Element.endpoints.Element.dsts_configuration
        dsts_configuration.service_dns_name = AAZStrArg(
            options=["service-dns-name"],
        )
        dsts_configuration.service_name = AAZStrArg(
            options=["service-name"],
            required=True,
        )

        extensions = cls._args_schema.resource_type_registrations.Element.endpoints.Element.extensions
        extensions.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.endpoints.Element.extensions.Element
        _element.endpoint_uri = AAZStrArg(
            options=["endpoint-uri"],
        )
        _element.extension_categories = AAZListArg(
            options=["extension-categories"],
        )
        _element.timeout = AAZDurationArg(
            options=["timeout"],
        )

        extension_categories = cls._args_schema.resource_type_registrations.Element.endpoints.Element.extensions.Element.extension_categories
        extension_categories.Element = AAZStrArg(
            enum={"BestMatchOperationBegin": "BestMatchOperationBegin", "NotSpecified": "NotSpecified", "ResourceCreationBegin": "ResourceCreationBegin", "ResourceCreationCompleted": "ResourceCreationCompleted", "ResourceCreationValidate": "ResourceCreationValidate", "ResourceDeletionBegin": "ResourceDeletionBegin", "ResourceDeletionCompleted": "ResourceDeletionCompleted", "ResourceDeletionValidate": "ResourceDeletionValidate", "ResourceMoveBegin": "ResourceMoveBegin", "ResourceMoveCompleted": "ResourceMoveCompleted", "ResourcePatchBegin": "ResourcePatchBegin", "ResourcePatchCompleted": "ResourcePatchCompleted", "ResourcePatchValidate": "ResourcePatchValidate", "ResourcePostAction": "ResourcePostAction", "ResourceReadBegin": "ResourceReadBegin", "ResourceReadValidate": "ResourceReadValidate", "SubscriptionLifecycleNotification": "SubscriptionLifecycleNotification", "SubscriptionLifecycleNotificationDeletion": "SubscriptionLifecycleNotificationDeletion"},
        )

        features_rule = cls._args_schema.resource_type_registrations.Element.endpoints.Element.features_rule
        features_rule.required_features_policy = AAZStrArg(
            options=["required-features-policy"],
            required=True,
            enum={"All": "All", "Any": "Any"},
        )

        locations = cls._args_schema.resource_type_registrations.Element.endpoints.Element.locations
        locations.Element = AAZStrArg()

        required_features = cls._args_schema.resource_type_registrations.Element.endpoints.Element.required_features
        required_features.Element = AAZStrArg()

        zones = cls._args_schema.resource_type_registrations.Element.endpoints.Element.zones
        zones.Element = AAZStrArg()

        extended_locations = cls._args_schema.resource_type_registrations.Element.extended_locations
        extended_locations.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.extended_locations.Element
        _element.supported_policy = AAZStrArg(
            options=["supported-policy"],
        )
        _element.type = AAZStrArg(
            options=["type"],
        )

        extension_options = cls._args_schema.resource_type_registrations.Element.extension_options
        extension_options.resource_creation_begin = AAZObjectArg(
            options=["resource-creation-begin"],
        )

        resource_creation_begin = cls._args_schema.resource_type_registrations.Element.extension_options.resource_creation_begin
        resource_creation_begin.request = AAZListArg(
            options=["request"],
        )
        resource_creation_begin.response = AAZListArg(
            options=["response"],
        )

        request = cls._args_schema.resource_type_registrations.Element.extension_options.resource_creation_begin.request
        request.Element = AAZStrArg(
            enum={"DoNotMergeExistingReadOnlyAndSecretProperties": "DoNotMergeExistingReadOnlyAndSecretProperties", "IncludeInternalMetadata": "IncludeInternalMetadata", "NotSpecified": "NotSpecified"},
        )

        response = cls._args_schema.resource_type_registrations.Element.extension_options.resource_creation_begin.response
        response.Element = AAZStrArg(
            enum={"DoNotMergeExistingReadOnlyAndSecretProperties": "DoNotMergeExistingReadOnlyAndSecretProperties", "IncludeInternalMetadata": "IncludeInternalMetadata", "NotSpecified": "NotSpecified"},
        )

        features_rule = cls._args_schema.resource_type_registrations.Element.features_rule
        features_rule.required_features_policy = AAZStrArg(
            options=["required-features-policy"],
            required=True,
            enum={"All": "All", "Any": "Any"},
        )

        identity_management = cls._args_schema.resource_type_registrations.Element.identity_management
        identity_management.application_id = AAZStrArg(
            options=["application-id"],
        )
        identity_management.application_ids = AAZListArg(
            options=["application-ids"],
        )
        identity_management.delegation_app_ids = AAZListArg(
            options=["delegation-app-ids"],
        )
        identity_management.type = AAZStrArg(
            options=["type"],
            enum={"Actor": "Actor", "DelegatedResourceIdentity": "DelegatedResourceIdentity", "NotSpecified": "NotSpecified", "SystemAssigned": "SystemAssigned", "UserAssigned": "UserAssigned"},
        )

        application_ids = cls._args_schema.resource_type_registrations.Element.identity_management.application_ids
        application_ids.Element = AAZStrArg()

        delegation_app_ids = cls._args_schema.resource_type_registrations.Element.identity_management.delegation_app_ids
        delegation_app_ids.Element = AAZStrArg()

        legacy_names = cls._args_schema.resource_type_registrations.Element.legacy_names
        legacy_names.Element = AAZStrArg()

        legacy_policy = cls._args_schema.resource_type_registrations.Element.legacy_policy
        legacy_policy.disallowed_conditions = AAZListArg(
            options=["disallowed-conditions"],
        )
        legacy_policy.disallowed_legacy_operations = AAZListArg(
            options=["disallowed-legacy-operations"],
        )

        disallowed_conditions = cls._args_schema.resource_type_registrations.Element.legacy_policy.disallowed_conditions
        disallowed_conditions.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.legacy_policy.disallowed_conditions.Element
        _element.disallowed_legacy_operations = AAZListArg(
            options=["disallowed-legacy-operations"],
        )
        _element.feature = AAZStrArg(
            options=["feature"],
            help="Feature string.",
        )

        disallowed_legacy_operations = cls._args_schema.resource_type_registrations.Element.legacy_policy.disallowed_conditions.Element.disallowed_legacy_operations
        disallowed_legacy_operations.Element = AAZStrArg(
            enum={"Action": "Action", "AzureAsyncOperationWaiting": "AzureAsyncOperationWaiting", "Create": "Create", "Delete": "Delete", "DeploymentCleanup": "DeploymentCleanup", "EvaluateDeploymentOutput": "EvaluateDeploymentOutput", "NotSpecified": "NotSpecified", "Read": "Read", "ResourceCacheWaiting": "ResourceCacheWaiting", "Waiting": "Waiting"},
        )

        disallowed_legacy_operations = cls._args_schema.resource_type_registrations.Element.legacy_policy.disallowed_legacy_operations
        disallowed_legacy_operations.Element = AAZStrArg(
            enum={"Action": "Action", "AzureAsyncOperationWaiting": "AzureAsyncOperationWaiting", "Create": "Create", "Delete": "Delete", "DeploymentCleanup": "DeploymentCleanup", "EvaluateDeploymentOutput": "EvaluateDeploymentOutput", "NotSpecified": "NotSpecified", "Read": "Read", "ResourceCacheWaiting": "ResourceCacheWaiting", "Waiting": "Waiting"},
        )

        linked_access_checks = cls._args_schema.resource_type_registrations.Element.linked_access_checks
        linked_access_checks.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.linked_access_checks.Element
        _element.action_name = AAZStrArg(
            options=["action-name"],
        )
        _element.linked_action = AAZStrArg(
            options=["linked-action"],
        )
        _element.linked_action_verb = AAZStrArg(
            options=["linked-action-verb"],
        )
        _element.linked_property = AAZStrArg(
            options=["linked-property"],
        )
        _element.linked_type = AAZStrArg(
            options=["linked-type"],
        )

        linked_notification_rules = cls._args_schema.resource_type_registrations.Element.linked_notification_rules
        linked_notification_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.linked_notification_rules.Element
        _element.actions = AAZListArg(
            options=["actions"],
        )
        _element.actions_on_failed_operation = AAZListArg(
            options=["actions-on-failed-operation"],
        )
        _element.fast_path_actions = AAZListArg(
            options=["fast-path-actions"],
        )
        _element.fast_path_actions_on_failed_operation = AAZListArg(
            options=["fast-path-actions-on-failed-operation"],
        )
        _element.linked_notification_timeout = AAZDurationArg(
            options=["linked-notification-timeout"],
        )

        actions = cls._args_schema.resource_type_registrations.Element.linked_notification_rules.Element.actions
        actions.Element = AAZStrArg()

        actions_on_failed_operation = cls._args_schema.resource_type_registrations.Element.linked_notification_rules.Element.actions_on_failed_operation
        actions_on_failed_operation.Element = AAZStrArg()

        fast_path_actions = cls._args_schema.resource_type_registrations.Element.linked_notification_rules.Element.fast_path_actions
        fast_path_actions.Element = AAZStrArg()

        fast_path_actions_on_failed_operation = cls._args_schema.resource_type_registrations.Element.linked_notification_rules.Element.fast_path_actions_on_failed_operation
        fast_path_actions_on_failed_operation.Element = AAZStrArg()

        linked_operation_rules = cls._args_schema.resource_type_registrations.Element.linked_operation_rules
        linked_operation_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.linked_operation_rules.Element
        _element.depends_on_types = AAZListArg(
            options=["depends-on-types"],
            help="Depends on types.",
        )
        _element.linked_action = AAZStrArg(
            options=["linked-action"],
            required=True,
            enum={"Blocked": "Blocked", "Enabled": "Enabled", "NotSpecified": "NotSpecified", "Validate": "Validate"},
        )
        _element.linked_operation = AAZStrArg(
            options=["linked-operation"],
            required=True,
            enum={"CrossResourceGroupResourceMove": "CrossResourceGroupResourceMove", "CrossSubscriptionResourceMove": "CrossSubscriptionResourceMove", "None": "None"},
        )

        depends_on_types = cls._args_schema.resource_type_registrations.Element.linked_operation_rules.Element.depends_on_types
        depends_on_types.Element = AAZStrArg()

        logging_rules = cls._args_schema.resource_type_registrations.Element.logging_rules
        logging_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.logging_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            required=True,
        )
        _element.detail_level = AAZStrArg(
            options=["detail-level"],
            required=True,
            enum={"Body": "Body", "None": "None"},
        )
        _element.direction = AAZStrArg(
            options=["direction"],
            required=True,
            enum={"None": "None", "Request": "Request", "Response": "Response"},
        )
        _element.hidden_property_paths = AAZObjectArg(
            options=["hidden-property-paths"],
        )

        hidden_property_paths = cls._args_schema.resource_type_registrations.Element.logging_rules.Element.hidden_property_paths
        hidden_property_paths.hidden_paths_on_request = AAZListArg(
            options=["hidden-paths-on-request"],
        )
        hidden_property_paths.hidden_paths_on_response = AAZListArg(
            options=["hidden-paths-on-response"],
        )

        hidden_paths_on_request = cls._args_schema.resource_type_registrations.Element.logging_rules.Element.hidden_property_paths.hidden_paths_on_request
        hidden_paths_on_request.Element = AAZStrArg()

        hidden_paths_on_response = cls._args_schema.resource_type_registrations.Element.logging_rules.Element.hidden_property_paths.hidden_paths_on_response
        hidden_paths_on_response.Element = AAZStrArg()

        managed_resource_group_configuration = cls._args_schema.resource_type_registrations.Element.managed_resource_group_configuration
        managed_resource_group_configuration.application_ids = AAZListArg(
            options=["application-ids"],
        )
        managed_resource_group_configuration.deny_assignment_configuration = AAZObjectArg(
            options=["deny-assignment-configuration"],
        )
        managed_resource_group_configuration.enabled = AAZBoolArg(
            options=["enabled"],
        )
        managed_resource_group_configuration.resource_group_location_override = AAZStrArg(
            options=["resource-group-location-override"],
        )

        application_ids = cls._args_schema.resource_type_registrations.Element.managed_resource_group_configuration.application_ids
        application_ids.Element = AAZStrArg()

        deny_assignment_configuration = cls._args_schema.resource_type_registrations.Element.managed_resource_group_configuration.deny_assignment_configuration
        deny_assignment_configuration.enabled = AAZBoolArg(
            options=["enabled"],
        )
        deny_assignment_configuration.not_actions = AAZListArg(
            options=["not-actions"],
        )

        not_actions = cls._args_schema.resource_type_registrations.Element.managed_resource_group_configuration.deny_assignment_configuration.not_actions
        not_actions.Element = AAZStrArg()

        management = cls._args_schema.resource_type_registrations.Element.management
        management.authorization_owners = AAZListArg(
            options=["authorization-owners"],
        )
        management.canary_manifest_owners = AAZListArg(
            options=["canary-manifest-owners"],
            help="List of manifest owners for canary.",
        )
        management.error_response_message_options = AAZObjectArg(
            options=["error-response-message-options"],
            help="Options for error response messages.",
        )
        management.expedited_rollout_metadata = AAZObjectArg(
            options=["expedited-rollout-metadata"],
            help="Metadata for expedited rollout.",
        )
        management.expedited_rollout_submitters = AAZListArg(
            options=["expedited-rollout-submitters"],
            help="List of expedited rollout submitters.",
        )
        management.incident_contact_email = AAZStrArg(
            options=["incident-contact-email"],
        )
        management.incident_routing_service = AAZStrArg(
            options=["incident-routing-service"],
        )
        management.incident_routing_team = AAZStrArg(
            options=["incident-routing-team"],
        )
        management.manifest_owners = AAZListArg(
            options=["manifest-owners"],
        )
        management.pc_code = AAZStrArg(
            options=["pc-code"],
            help="The profit center code for the subscription.",
        )
        management.profit_center_program_id = AAZStrArg(
            options=["profit-center-program-id"],
            help="The profit center program id for the subscription.",
        )
        management.resource_access_policy = AAZStrArg(
            options=["resource-access-policy"],
            enum={"AcisActionAllowed": "AcisActionAllowed", "AcisReadAllowed": "AcisReadAllowed", "NotSpecified": "NotSpecified"},
        )
        management.resource_access_roles = AAZListArg(
            options=["resource-access-roles"],
        )
        management.schema_owners = AAZListArg(
            options=["schema-owners"],
        )
        management.service_tree_infos = AAZListArg(
            options=["service-tree-infos"],
        )

        authorization_owners = cls._args_schema.resource_type_registrations.Element.management.authorization_owners
        authorization_owners.Element = AAZStrArg()

        canary_manifest_owners = cls._args_schema.resource_type_registrations.Element.management.canary_manifest_owners
        canary_manifest_owners.Element = AAZStrArg()

        error_response_message_options = cls._args_schema.resource_type_registrations.Element.management.error_response_message_options
        error_response_message_options.server_failure_response_message_type = AAZStrArg(
            options=["server-failure-response-message-type"],
            help="Type of server failure response message.",
            enum={"NotSpecified": "NotSpecified", "OutageReporting": "OutageReporting"},
        )

        expedited_rollout_metadata = cls._args_schema.resource_type_registrations.Element.management.expedited_rollout_metadata
        expedited_rollout_metadata.enabled = AAZBoolArg(
            options=["enabled"],
            help="Expedited rollout enabled?",
        )
        expedited_rollout_metadata.expedited_rollout_intent = AAZStrArg(
            options=["expedited-rollout-intent"],
            help="Expedited rollout intent.",
            enum={"Hotfix": "Hotfix", "NotSpecified": "NotSpecified"},
        )

        expedited_rollout_submitters = cls._args_schema.resource_type_registrations.Element.management.expedited_rollout_submitters
        expedited_rollout_submitters.Element = AAZStrArg()

        manifest_owners = cls._args_schema.resource_type_registrations.Element.management.manifest_owners
        manifest_owners.Element = AAZStrArg()

        resource_access_roles = cls._args_schema.resource_type_registrations.Element.management.resource_access_roles
        resource_access_roles.Element = AAZObjectArg()
        cls._build_args_resource_access_role_create(resource_access_roles.Element)

        schema_owners = cls._args_schema.resource_type_registrations.Element.management.schema_owners
        schema_owners.Element = AAZStrArg()

        service_tree_infos = cls._args_schema.resource_type_registrations.Element.management.service_tree_infos
        service_tree_infos.Element = AAZObjectArg()
        cls._build_args_service_tree_info_create(service_tree_infos.Element)

        marketplace_options = cls._args_schema.resource_type_registrations.Element.marketplace_options
        marketplace_options.add_on_plan_conversion_allowed = AAZBoolArg(
            options=["add-on-plan-conversion-allowed"],
            help="Add-on plan conversion allowed.",
        )

        metadata = cls._args_schema.resource_type_registrations.Element.metadata
        metadata.Element = AAZFreeFormDictArg(
            blank={},
        )

        on_behalf_of_tokens = cls._args_schema.resource_type_registrations.Element.on_behalf_of_tokens
        on_behalf_of_tokens.action_name = AAZStrArg(
            options=["action-name"],
        )
        on_behalf_of_tokens.life_time = AAZStrArg(
            options=["life-time"],
        )

        open_api_configuration = cls._args_schema.resource_type_registrations.Element.open_api_configuration
        open_api_configuration.validation = AAZObjectArg(
            options=["validation"],
        )

        validation = cls._args_schema.resource_type_registrations.Element.open_api_configuration.validation
        validation.allow_noncompliant_collection_response = AAZBoolArg(
            options=["allow-noncompliant-collection-response"],
            help="Indicates whether a non compliance response is allowed for a LIST call",
        )

        private_endpoint_configuration = cls._args_schema.resource_type_registrations.Element.private_endpoint_configuration
        private_endpoint_configuration.group_connectivity_information = AAZListArg(
            options=["group-connectivity-information"],
            help="The list of group connectivity information.",
            required=True,
        )
        private_endpoint_configuration.min_api_version = AAZStrArg(
            options=["min-api-version"],
            help="The first api version that support private endpoint.",
            required=True,
        )

        group_connectivity_information = cls._args_schema.resource_type_registrations.Element.private_endpoint_configuration.group_connectivity_information
        group_connectivity_information.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.private_endpoint_configuration.group_connectivity_information.Element
        _element.group_id = AAZStrArg(
            options=["group-id"],
            help="The group id.",
            required=True,
        )
        _element.redirect_map_id = AAZStrArg(
            options=["redirect-map-id"],
            help="The redirect map id.",
        )
        _element.required_members = AAZListArg(
            options=["required-members"],
            help="List of required members for the group id.",
            required=True,
        )
        _element.required_zone_names = AAZListArg(
            options=["required-zone-names"],
            help="List of required zone names for the group id.",
            required=True,
        )

        required_members = cls._args_schema.resource_type_registrations.Element.private_endpoint_configuration.group_connectivity_information.Element.required_members
        required_members.Element = AAZStrArg()

        required_zone_names = cls._args_schema.resource_type_registrations.Element.private_endpoint_configuration.group_connectivity_information.Element.required_zone_names
        required_zone_names.Element = AAZStrArg()

        quota_rule = cls._args_schema.resource_type_registrations.Element.quota_rule
        quota_rule.location_rules = AAZListArg(
            options=["location-rules"],
        )
        quota_rule.quota_policy = AAZStrArg(
            options=["quota-policy"],
            help="Quota policy.",
            enum={"Default": "Default", "None": "None", "Restricted": "Restricted"},
        )
        quota_rule.required_features = AAZListArg(
            options=["required-features"],
        )

        location_rules = cls._args_schema.resource_type_registrations.Element.quota_rule.location_rules
        location_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.quota_rule.location_rules.Element
        _element.location = AAZStrArg(
            options=["location"],
        )
        _element.policy = AAZStrArg(
            options=["policy"],
            help="Quota policy.",
            enum={"Default": "Default", "None": "None", "Restricted": "Restricted"},
        )
        _element.quota_id = AAZStrArg(
            options=["quota-id"],
        )

        required_features = cls._args_schema.resource_type_registrations.Element.quota_rule.required_features
        required_features.Element = AAZStrArg()

        request_header_options = cls._args_schema.resource_type_registrations.Element.request_header_options
        request_header_options.opt_in_headers = AAZStrArg(
            options=["opt-in-headers"],
            enum={"ClientGroupMembership": "ClientGroupMembership", "ClientPrincipalNameEncoded": "ClientPrincipalNameEncoded", "MSIResourceIdEncoded": "MSIResourceIdEncoded", "ManagementGroupAncestorsEncoded": "ManagementGroupAncestorsEncoded", "NotSpecified": "NotSpecified", "PrivateLinkId": "PrivateLinkId", "PrivateLinkResourceId": "PrivateLinkResourceId", "PrivateLinkVnetTrafficTag": "PrivateLinkVnetTrafficTag", "ResourceGroupLocation": "ResourceGroupLocation", "SignedAuxiliaryTokens": "SignedAuxiliaryTokens", "SignedUserToken": "SignedUserToken", "UnboundedClientGroupMembership": "UnboundedClientGroupMembership"},
        )
        request_header_options.opt_out_headers = AAZStrArg(
            options=["opt-out-headers"],
            enum={"NotSpecified": "NotSpecified", "SystemDataCreatedByLastModifiedBy": "SystemDataCreatedByLastModifiedBy"},
        )

        required_features = cls._args_schema.resource_type_registrations.Element.required_features
        required_features.Element = AAZStrArg()

        resource_cache = cls._args_schema.resource_type_registrations.Element.resource_cache
        resource_cache.enable_resource_cache = AAZBoolArg(
            options=["enable-resource-cache"],
            help="Enable resource cache.",
        )
        resource_cache.resource_cache_expiration_timespan = AAZStrArg(
            options=["resource-cache-expiration-timespan"],
            help="Resource cache expiration timespan.",
        )

        resource_concurrency_control_options = cls._args_schema.resource_type_registrations.Element.resource_concurrency_control_options
        resource_concurrency_control_options.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.resource_concurrency_control_options.Element
        _element.policy = AAZStrArg(
            options=["policy"],
            enum={"NotSpecified": "NotSpecified", "SynchronizeBeginExtension": "SynchronizeBeginExtension"},
        )

        resource_graph_configuration = cls._args_schema.resource_type_registrations.Element.resource_graph_configuration
        resource_graph_configuration.api_version = AAZStrArg(
            options=["api-version"],
        )
        resource_graph_configuration.enabled = AAZBoolArg(
            options=["enabled"],
        )

        resource_management_options = cls._args_schema.resource_type_registrations.Element.resource_management_options
        resource_management_options.batch_provisioning_support = AAZObjectArg(
            options=["batch-provisioning-support"],
            help="Batch provisioning support.",
        )
        resource_management_options.delete_dependencies = AAZListArg(
            options=["delete-dependencies"],
            help="Delete dependencies.",
        )
        resource_management_options.nested_provisioning_support = AAZObjectArg(
            options=["nested-provisioning-support"],
            help="Nested provisioning support.",
        )

        batch_provisioning_support = cls._args_schema.resource_type_registrations.Element.resource_management_options.batch_provisioning_support
        batch_provisioning_support.supported_operations = AAZStrArg(
            options=["supported-operations"],
            help="Supported operations.",
            enum={"Delete": "Delete", "Get": "Get", "NotSpecified": "NotSpecified"},
        )

        delete_dependencies = cls._args_schema.resource_type_registrations.Element.resource_management_options.delete_dependencies
        delete_dependencies.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.resource_management_options.delete_dependencies.Element
        _element.linked_property = AAZStrArg(
            options=["linked-property"],
            help="Linked property.",
        )
        _element.linked_type = AAZStrArg(
            options=["linked-type"],
            help="Linked type.",
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
            help="Required features.",
        )

        required_features = cls._args_schema.resource_type_registrations.Element.resource_management_options.delete_dependencies.Element.required_features
        required_features.Element = AAZStrArg()

        nested_provisioning_support = cls._args_schema.resource_type_registrations.Element.resource_management_options.nested_provisioning_support
        nested_provisioning_support.minimum_api_version = AAZStrArg(
            options=["minimum-api-version"],
            help="Minimum API version.",
        )

        resource_move_policy = cls._args_schema.resource_type_registrations.Element.resource_move_policy
        resource_move_policy.cross_resource_group_move_enabled = AAZBoolArg(
            options=["cross-resource-group-move-enabled"],
        )
        resource_move_policy.cross_subscription_move_enabled = AAZBoolArg(
            options=["cross-subscription-move-enabled"],
        )
        resource_move_policy.validation_required = AAZBoolArg(
            options=["validation-required"],
        )

        resource_query_management = cls._args_schema.resource_type_registrations.Element.resource_query_management
        resource_query_management.filter_option = AAZStrArg(
            options=["filter-option"],
            help="Filter option.",
            enum={"EnableSubscriptionFilterOnTenant": "EnableSubscriptionFilterOnTenant", "NotSpecified": "NotSpecified"},
        )

        resource_type_common_attribute_management = cls._args_schema.resource_type_registrations.Element.resource_type_common_attribute_management
        resource_type_common_attribute_management.common_api_versions_merge_mode = AAZStrArg(
            options=["common-api-versions-merge-mode"],
            help="Common api versions merge mode.",
            enum={"Merge": "Merge", "Overwrite": "Overwrite"},
        )

        routing_rule = cls._args_schema.resource_type_registrations.Element.routing_rule
        routing_rule.host_resource_type = AAZStrArg(
            options=["host-resource-type"],
            help="Hosted resource type.",
        )

        service_tree_infos = cls._args_schema.resource_type_registrations.Element.service_tree_infos
        service_tree_infos.Element = AAZObjectArg()
        cls._build_args_service_tree_info_create(service_tree_infos.Element)

        subscription_lifecycle_notification_specifications = cls._args_schema.resource_type_registrations.Element.subscription_lifecycle_notification_specifications
        subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZDurationArg(
            options=["soft-delete-ttl"],
        )
        subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListArg(
            options=["subscription-state-override-actions"],
        )

        subscription_state_override_actions = cls._args_schema.resource_type_registrations.Element.subscription_lifecycle_notification_specifications.subscription_state_override_actions
        subscription_state_override_actions.Element = AAZObjectArg()
        cls._build_args_subscription_state_override_action_create(subscription_state_override_actions.Element)

        subscription_state_rules = cls._args_schema.resource_type_registrations.Element.subscription_state_rules
        subscription_state_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.subscription_state_rules.Element
        _element.allowed_actions = AAZListArg(
            options=["allowed-actions"],
        )
        _element.state = AAZStrArg(
            options=["state"],
            enum={"Deleted": "Deleted", "Disabled": "Disabled", "Enabled": "Enabled", "NotDefined": "NotDefined", "PastDue": "PastDue", "Warned": "Warned"},
        )

        allowed_actions = cls._args_schema.resource_type_registrations.Element.subscription_state_rules.Element.allowed_actions
        allowed_actions.Element = AAZStrArg()

        swagger_specifications = cls._args_schema.resource_type_registrations.Element.swagger_specifications
        swagger_specifications.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.swagger_specifications.Element
        _element.api_versions = AAZListArg(
            options=["api-versions"],
        )
        _element.swagger_spec_folder_uri = AAZStrArg(
            options=["swagger-spec-folder-uri"],
        )

        api_versions = cls._args_schema.resource_type_registrations.Element.swagger_specifications.Element.api_versions
        api_versions.Element = AAZStrArg()

        template_deployment_options = cls._args_schema.resource_type_registrations.Element.template_deployment_options
        template_deployment_options.preflight_options = AAZListArg(
            options=["preflight-options"],
        )
        template_deployment_options.preflight_supported = AAZBoolArg(
            options=["preflight-supported"],
        )

        preflight_options = cls._args_schema.resource_type_registrations.Element.template_deployment_options.preflight_options
        preflight_options.Element = AAZStrArg(
            enum={"ContinueDeploymentOnFailure": "ContinueDeploymentOnFailure", "DefaultValidationOnly": "DefaultValidationOnly", "None": "None"},
        )

        template_deployment_policy = cls._args_schema.resource_type_registrations.Element.template_deployment_policy
        template_deployment_policy.capabilities = AAZStrArg(
            options=["capabilities"],
            required=True,
            enum={"Default": "Default", "Preflight": "Preflight"},
        )
        template_deployment_policy.preflight_notifications = AAZStrArg(
            options=["preflight-notifications"],
            enum={"None": "None", "UnregisteredSubscriptions": "UnregisteredSubscriptions"},
        )
        template_deployment_policy.preflight_options = AAZStrArg(
            options=["preflight-options"],
            required=True,
            enum={"DeploymentRequests": "DeploymentRequests", "None": "None", "RegisteredOnly": "RegisteredOnly", "TestOnly": "TestOnly", "ValidationRequests": "ValidationRequests"},
        )

        throttling_rules = cls._args_schema.resource_type_registrations.Element.throttling_rules
        throttling_rules.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.throttling_rules.Element
        _element.action = AAZStrArg(
            options=["action"],
            required=True,
        )
        _element.application_id = AAZListArg(
            options=["application-id"],
        )
        _element.metrics = AAZListArg(
            options=["metrics"],
            required=True,
        )
        _element.required_features = AAZListArg(
            options=["required-features"],
        )

        application_id = cls._args_schema.resource_type_registrations.Element.throttling_rules.Element.application_id
        application_id.Element = AAZStrArg()

        metrics = cls._args_schema.resource_type_registrations.Element.throttling_rules.Element.metrics
        metrics.Element = AAZObjectArg()

        _element = cls._args_schema.resource_type_registrations.Element.throttling_rules.Element.metrics.Element
        _element.interval = AAZDurationArg(
            options=["interval"],
        )
        _element.limit = AAZIntArg(
            options=["limit"],
            required=True,
        )
        _element.type = AAZStrArg(
            options=["type"],
            required=True,
            enum={"NotSpecified": "NotSpecified", "NumberOfRequests": "NumberOfRequests", "NumberOfResources": "NumberOfResources"},
        )

        required_features = cls._args_schema.resource_type_registrations.Element.throttling_rules.Element.required_features
        required_features.Element = AAZStrArg()
        return cls._args_schema

    _args_extended_error_info_create = None

    @classmethod
    def _build_args_extended_error_info_create(cls, _schema):
        if cls._args_extended_error_info_create is not None:
            _schema.additional_info = cls._args_extended_error_info_create.additional_info
            _schema.code = cls._args_extended_error_info_create.code
            _schema.details = cls._args_extended_error_info_create.details
            _schema.message = cls._args_extended_error_info_create.message
            _schema.target = cls._args_extended_error_info_create.target
            return

        cls._args_extended_error_info_create = AAZObjectArg()

        extended_error_info_create = cls._args_extended_error_info_create
        extended_error_info_create.additional_info = AAZListArg(
            options=["additional-info"],
            help="The additional error information.",
        )
        extended_error_info_create.code = AAZStrArg(
            options=["code"],
            help="The error code.",
        )
        extended_error_info_create.details = AAZListArg(
            options=["details"],
            help="The error details.",
        )
        extended_error_info_create.message = AAZStrArg(
            options=["message"],
            help="The error message.",
        )
        extended_error_info_create.target = AAZStrArg(
            options=["target"],
            help="The target of the error.",
        )

        additional_info = cls._args_extended_error_info_create.additional_info
        additional_info.Element = AAZObjectArg()

        _element = cls._args_extended_error_info_create.additional_info.Element
        _element.type = AAZStrArg(
            options=["type"],
            help="The type of the error.",
            required=True,
        )

        details = cls._args_extended_error_info_create.details
        details.Element = AAZObjectArg()
        cls._build_args_extended_error_info_create(details.Element)

        _schema.additional_info = cls._args_extended_error_info_create.additional_info
        _schema.code = cls._args_extended_error_info_create.code
        _schema.details = cls._args_extended_error_info_create.details
        _schema.message = cls._args_extended_error_info_create.message
        _schema.target = cls._args_extended_error_info_create.target

    _args_notifications_create = None

    @classmethod
    def _build_args_notifications_create(cls, _schema):
        if cls._args_notifications_create is not None:
            _schema.Element = cls._args_notifications_create.Element
            return

        cls._args_notifications_create = AAZListArg()

        notifications_create = cls._args_notifications_create
        notifications_create.Element = AAZObjectArg()

        _element = cls._args_notifications_create.Element
        _element.notification_type = AAZStrArg(
            options=["notification-type"],
            enum={"SubscriptionNotification": "SubscriptionNotification", "Unspecified": "Unspecified"},
        )
        _element.skip_notifications = AAZStrArg(
            options=["skip-notifications"],
            enum={"Disabled": "Disabled", "Enabled": "Enabled", "Unspecified": "Unspecified"},
        )

        _schema.Element = cls._args_notifications_create.Element

    _args_resource_access_role_create = None

    @classmethod
    def _build_args_resource_access_role_create(cls, _schema):
        if cls._args_resource_access_role_create is not None:
            _schema.actions = cls._args_resource_access_role_create.actions
            _schema.allowed_group_claims = cls._args_resource_access_role_create.allowed_group_claims
            return

        cls._args_resource_access_role_create = AAZObjectArg()

        resource_access_role_create = cls._args_resource_access_role_create
        resource_access_role_create.actions = AAZListArg(
            options=["actions"],
        )
        resource_access_role_create.allowed_group_claims = AAZListArg(
            options=["allowed-group-claims"],
        )

        actions = cls._args_resource_access_role_create.actions
        actions.Element = AAZStrArg()

        allowed_group_claims = cls._args_resource_access_role_create.allowed_group_claims
        allowed_group_claims.Element = AAZStrArg()

        _schema.actions = cls._args_resource_access_role_create.actions
        _schema.allowed_group_claims = cls._args_resource_access_role_create.allowed_group_claims

    _args_resource_provider_authorization_rules_create = None

    @classmethod
    def _build_args_resource_provider_authorization_rules_create(cls, _schema):
        if cls._args_resource_provider_authorization_rules_create is not None:
            _schema.async_operation_polling_rules = cls._args_resource_provider_authorization_rules_create.async_operation_polling_rules
            return

        cls._args_resource_provider_authorization_rules_create = AAZObjectArg()

        resource_provider_authorization_rules_create = cls._args_resource_provider_authorization_rules_create
        resource_provider_authorization_rules_create.async_operation_polling_rules = AAZObjectArg(
            options=["async-operation-polling-rules"],
        )

        async_operation_polling_rules = cls._args_resource_provider_authorization_rules_create.async_operation_polling_rules
        async_operation_polling_rules.additional_options = AAZStrArg(
            options=["additional-options"],
            enum={"ProtectedAsyncOperationPolling": "ProtectedAsyncOperationPolling", "ProtectedAsyncOperationPollingAuditOnly": "ProtectedAsyncOperationPollingAuditOnly"},
        )
        async_operation_polling_rules.authorization_actions = AAZListArg(
            options=["authorization-actions"],
        )

        authorization_actions = cls._args_resource_provider_authorization_rules_create.async_operation_polling_rules.authorization_actions
        authorization_actions.Element = AAZStrArg()

        _schema.async_operation_polling_rules = cls._args_resource_provider_authorization_rules_create.async_operation_polling_rules

    _args_resource_provider_authorization_create = None

    @classmethod
    def _build_args_resource_provider_authorization_create(cls, _schema):
        if cls._args_resource_provider_authorization_create is not None:
            _schema.allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
            _schema.application_id = cls._args_resource_provider_authorization_create.application_id
            _schema.grouping_tag = cls._args_resource_provider_authorization_create.grouping_tag
            _schema.managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
            _schema.managed_by_role_definition_id = cls._args_resource_provider_authorization_create.managed_by_role_definition_id
            _schema.role_definition_id = cls._args_resource_provider_authorization_create.role_definition_id
            return

        cls._args_resource_provider_authorization_create = AAZObjectArg()

        resource_provider_authorization_create = cls._args_resource_provider_authorization_create
        resource_provider_authorization_create.allowed_third_party_extensions = AAZListArg(
            options=["allowed-third-party-extensions"],
        )
        resource_provider_authorization_create.application_id = AAZStrArg(
            options=["application-id"],
        )
        resource_provider_authorization_create.grouping_tag = AAZStrArg(
            options=["grouping-tag"],
        )
        resource_provider_authorization_create.managed_by_authorization = AAZObjectArg(
            options=["managed-by-authorization"],
            help="Managed by authorization.",
        )
        resource_provider_authorization_create.managed_by_role_definition_id = AAZStrArg(
            options=["managed-by-role-definition-id"],
        )
        resource_provider_authorization_create.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
        )

        allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
        allowed_third_party_extensions.Element = AAZObjectArg()

        _element = cls._args_resource_provider_authorization_create.allowed_third_party_extensions.Element
        _element.name = AAZStrArg(
            options=["name"],
            help="Name of third party extension.",
        )

        managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
        managed_by_authorization.additional_authorizations = AAZListArg(
            options=["additional-authorizations"],
        )
        managed_by_authorization.allow_managed_by_inheritance = AAZBoolArg(
            options=["allow-managed-by-inheritance"],
            help="Indicates whether the managed by resource role definition ID should be inherited.",
        )
        managed_by_authorization.managed_by_resource_role_definition_id = AAZStrArg(
            options=["managed-by-resource-role-definition-id"],
            help="The managed by resource role definition ID for the application.",
        )

        additional_authorizations = cls._args_resource_provider_authorization_create.managed_by_authorization.additional_authorizations
        additional_authorizations.Element = AAZObjectArg()

        _element = cls._args_resource_provider_authorization_create.managed_by_authorization.additional_authorizations.Element
        _element.application_id = AAZStrArg(
            options=["application-id"],
        )
        _element.role_definition_id = AAZStrArg(
            options=["role-definition-id"],
        )

        _schema.allowed_third_party_extensions = cls._args_resource_provider_authorization_create.allowed_third_party_extensions
        _schema.application_id = cls._args_resource_provider_authorization_create.application_id
        _schema.grouping_tag = cls._args_resource_provider_authorization_create.grouping_tag
        _schema.managed_by_authorization = cls._args_resource_provider_authorization_create.managed_by_authorization
        _schema.managed_by_role_definition_id = cls._args_resource_provider_authorization_create.managed_by_role_definition_id
        _schema.role_definition_id = cls._args_resource_provider_authorization_create.role_definition_id

    _args_resource_provider_endpoint_create = None

    @classmethod
    def _build_args_resource_provider_endpoint_create(cls, _schema):
        if cls._args_resource_provider_endpoint_create is not None:
            _schema.api_versions = cls._args_resource_provider_endpoint_create.api_versions
            _schema.enabled = cls._args_resource_provider_endpoint_create.enabled
            _schema.endpoint_type = cls._args_resource_provider_endpoint_create.endpoint_type
            _schema.endpoint_uri = cls._args_resource_provider_endpoint_create.endpoint_uri
            _schema.features_rule = cls._args_resource_provider_endpoint_create.features_rule
            _schema.locations = cls._args_resource_provider_endpoint_create.locations
            _schema.required_features = cls._args_resource_provider_endpoint_create.required_features
            _schema.sku_link = cls._args_resource_provider_endpoint_create.sku_link
            _schema.timeout = cls._args_resource_provider_endpoint_create.timeout
            return

        cls._args_resource_provider_endpoint_create = AAZObjectArg()

        resource_provider_endpoint_create = cls._args_resource_provider_endpoint_create
        resource_provider_endpoint_create.api_versions = AAZListArg(
            options=["api-versions"],
        )
        resource_provider_endpoint_create.enabled = AAZBoolArg(
            options=["enabled"],
        )
        resource_provider_endpoint_create.endpoint_type = AAZStrArg(
            options=["endpoint-type"],
            enum={"Canary": "Canary", "NotSpecified": "NotSpecified", "Production": "Production", "TestInProduction": "TestInProduction"},
        )
        resource_provider_endpoint_create.endpoint_uri = AAZStrArg(
            options=["endpoint-uri"],
        )
        resource_provider_endpoint_create.features_rule = AAZObjectArg(
            options=["features-rule"],
        )
        resource_provider_endpoint_create.locations = AAZListArg(
            options=["locations"],
        )
        resource_provider_endpoint_create.required_features = AAZListArg(
            options=["required-features"],
        )
        resource_provider_endpoint_create.sku_link = AAZStrArg(
            options=["sku-link"],
        )
        resource_provider_endpoint_create.timeout = AAZDurationArg(
            options=["timeout"],
        )

        api_versions = cls._args_resource_provider_endpoint_create.api_versions
        api_versions.Element = AAZStrArg()

        features_rule = cls._args_resource_provider_endpoint_create.features_rule
        features_rule.required_features_policy = AAZStrArg(
            options=["required-features-policy"],
            required=True,
            enum={"All": "All", "Any": "Any"},
        )

        locations = cls._args_resource_provider_endpoint_create.locations
        locations.Element = AAZStrArg()

        required_features = cls._args_resource_provider_endpoint_create.required_features
        required_features.Element = AAZStrArg()

        _schema.api_versions = cls._args_resource_provider_endpoint_create.api_versions
        _schema.enabled = cls._args_resource_provider_endpoint_create.enabled
        _schema.endpoint_type = cls._args_resource_provider_endpoint_create.endpoint_type
        _schema.endpoint_uri = cls._args_resource_provider_endpoint_create.endpoint_uri
        _schema.features_rule = cls._args_resource_provider_endpoint_create.features_rule
        _schema.locations = cls._args_resource_provider_endpoint_create.locations
        _schema.required_features = cls._args_resource_provider_endpoint_create.required_features
        _schema.sku_link = cls._args_resource_provider_endpoint_create.sku_link
        _schema.timeout = cls._args_resource_provider_endpoint_create.timeout

    _args_service_tree_info_create = None

    @classmethod
    def _build_args_service_tree_info_create(cls, _schema):
        if cls._args_service_tree_info_create is not None:
            _schema.component_id = cls._args_service_tree_info_create.component_id
            _schema.readiness = cls._args_service_tree_info_create.readiness
            _schema.service_id = cls._args_service_tree_info_create.service_id
            return

        cls._args_service_tree_info_create = AAZObjectArg()

        service_tree_info_create = cls._args_service_tree_info_create
        service_tree_info_create.component_id = AAZStrArg(
            options=["component-id"],
        )
        service_tree_info_create.readiness = AAZStrArg(
            options=["readiness"],
            enum={"ClosingDown": "ClosingDown", "Deprecated": "Deprecated", "GA": "GA", "InDevelopment": "InDevelopment", "InternalOnly": "InternalOnly", "PrivatePreview": "PrivatePreview", "PublicPreview": "PublicPreview", "RemovedFromARM": "RemovedFromARM", "Retired": "Retired"},
        )
        service_tree_info_create.service_id = AAZStrArg(
            options=["service-id"],
        )

        _schema.component_id = cls._args_service_tree_info_create.component_id
        _schema.readiness = cls._args_service_tree_info_create.readiness
        _schema.service_id = cls._args_service_tree_info_create.service_id

    _args_subscription_state_override_action_create = None

    @classmethod
    def _build_args_subscription_state_override_action_create(cls, _schema):
        if cls._args_subscription_state_override_action_create is not None:
            _schema.action = cls._args_subscription_state_override_action_create.action
            _schema.state = cls._args_subscription_state_override_action_create.state
            return

        cls._args_subscription_state_override_action_create = AAZObjectArg()

        subscription_state_override_action_create = cls._args_subscription_state_override_action_create
        subscription_state_override_action_create.action = AAZStrArg(
            options=["action"],
            required=True,
            enum={"BillingCancellation": "BillingCancellation", "DeleteAllResources": "DeleteAllResources", "NoOp": "NoOp", "NotDefined": "NotDefined", "SoftDeleteAllResources": "SoftDeleteAllResources", "UndoSoftDelete": "UndoSoftDelete"},
        )
        subscription_state_override_action_create.state = AAZStrArg(
            options=["state"],
            required=True,
            enum={"Deleted": "Deleted", "Registered": "Registered", "Suspended": "Suspended", "SuspendedToDeleted": "SuspendedToDeleted", "SuspendedToRegistered": "SuspendedToRegistered", "SuspendedToUnregistered": "SuspendedToUnregistered", "SuspendedToWarned": "SuspendedToWarned", "Unregistered": "Unregistered", "Warned": "Warned", "WarnedToDeleted": "WarnedToDeleted", "WarnedToRegistered": "WarnedToRegistered", "WarnedToSuspended": "WarnedToSuspended", "WarnedToUnregistered": "WarnedToUnregistered"},
        )

        _schema.action = cls._args_subscription_state_override_action_create.action
        _schema.state = cls._args_subscription_state_override_action_create.state

    _args_token_auth_configuration_create = None

    @classmethod
    def _build_args_token_auth_configuration_create(cls, _schema):
        if cls._args_token_auth_configuration_create is not None:
            _schema.authentication_scheme = cls._args_token_auth_configuration_create.authentication_scheme
            _schema.disable_certificate_authentication_fallback = cls._args_token_auth_configuration_create.disable_certificate_authentication_fallback
            _schema.signed_request_scope = cls._args_token_auth_configuration_create.signed_request_scope
            return

        cls._args_token_auth_configuration_create = AAZObjectArg()

        token_auth_configuration_create = cls._args_token_auth_configuration_create
        token_auth_configuration_create.authentication_scheme = AAZStrArg(
            options=["authentication-scheme"],
            enum={"Bearer": "Bearer", "PoP": "PoP"},
        )
        token_auth_configuration_create.disable_certificate_authentication_fallback = AAZBoolArg(
            options=["disable-certificate-authentication-fallback"],
        )
        token_auth_configuration_create.signed_request_scope = AAZStrArg(
            options=["signed-request-scope"],
            enum={"Endpoint": "Endpoint", "ResourceUri": "ResourceUri"},
        )

        _schema.authentication_scheme = cls._args_token_auth_configuration_create.authentication_scheme
        _schema.disable_certificate_authentication_fallback = cls._args_token_auth_configuration_create.disable_certificate_authentication_fallback
        _schema.signed_request_scope = cls._args_token_auth_configuration_create.signed_request_scope

    def _execute_operations(self):
        self.pre_operations()
        yield self.CustomRolloutsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CustomRolloutsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/customRollouts/{rolloutName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "rolloutName", self.ctx.args.rollout_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("specification", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("status", AAZObjectType, ".status")

            specification = _builder.get(".properties.specification")
            if specification is not None:
                specification.set_prop("autoProvisionConfig", AAZObjectType, ".auto_provision_config")
                specification.set_prop("canary", AAZObjectType, ".canary")
                specification.set_prop("manifestCheckinSpecification", AAZObjectType, ".manifest_checkin_specification")
                specification.set_prop("providerRegistration", AAZObjectType, ".provider_registration")
                specification.set_prop("refreshSubscriptionRegistration", AAZBoolType, ".refresh_subscription_registration")
                specification.set_prop("releaseScopes", AAZListType, ".release_scopes")
                specification.set_prop("resourceTypeRegistrations", AAZListType, ".resource_type_registrations")
                specification.set_prop("skipReleaseScopeValidation", AAZBoolType, ".skip_release_scope_validation")

            auto_provision_config = _builder.get(".properties.specification.autoProvisionConfig")
            if auto_provision_config is not None:
                auto_provision_config.set_prop("resourceGraph", AAZBoolType, ".resource_graph")
                auto_provision_config.set_prop("storage", AAZBoolType, ".storage")

            canary = _builder.get(".properties.specification.canary")
            if canary is not None:
                canary.set_prop("regions", AAZListType, ".regions")

            regions = _builder.get(".properties.specification.canary.regions")
            if regions is not None:
                regions.set_elements(AAZStrType, ".")

            manifest_checkin_specification = _builder.get(".properties.specification.manifestCheckinSpecification")
            if manifest_checkin_specification is not None:
                manifest_checkin_specification.set_prop("manifestCheckinOption", AAZStrType, ".manifest_checkin_option")
                manifest_checkin_specification.set_prop("manifestCheckinParams", AAZObjectType, ".manifest_checkin_params")

            manifest_checkin_params = _builder.get(".properties.specification.manifestCheckinSpecification.manifestCheckinParams")
            if manifest_checkin_params is not None:
                manifest_checkin_params.set_prop("baselineArmManifestLocation", AAZStrType, ".baseline_arm_manifest_location", typ_kwargs={"flags": {"required": True}})
                manifest_checkin_params.set_prop("environment", AAZStrType, ".environment", typ_kwargs={"flags": {"required": True}})

            provider_registration = _builder.get(".properties.specification.providerRegistration")
            if provider_registration is not None:
                provider_registration.set_prop("kind", AAZStrType, ".kind")
                provider_registration.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties.specification.providerRegistration.properties")
            if properties is not None:
                properties.set_prop("capabilities", AAZListType, ".capabilities")
                properties.set_prop("crossTenantTokenValidation", AAZStrType, ".cross_tenant_token_validation")
                properties.set_prop("customManifestVersion", AAZStrType, ".custom_manifest_version")
                properties.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                properties.set_prop("enableTenantLinkedNotification", AAZBoolType, ".enable_tenant_linked_notification", typ_kwargs={"nullable": True})
                properties.set_prop("featuresRule", AAZObjectType, ".features_rule")
                properties.set_prop("globalNotificationEndpoints", AAZListType, ".global_notification_endpoints")
                properties.set_prop("legacyNamespace", AAZStrType, ".legacy_namespace")
                properties.set_prop("legacyRegistrations", AAZListType, ".legacy_registrations")
                properties.set_prop("linkedNotificationRules", AAZListType, ".linked_notification_rules")
                properties.set_prop("management", AAZObjectType, ".management")
                properties.set_prop("managementGroupGlobalNotificationEndpoints", AAZListType, ".management_group_global_notification_endpoints")
                properties.set_prop("metadata", AAZFreeFormDictType, ".metadata")
                properties.set_prop("namespace", AAZStrType, ".namespace")
                properties.set_prop("notificationOptions", AAZStrType, ".notification_options")
                properties.set_prop("notificationSettings", AAZObjectType, ".notification_settings")
                _CreateHelper._build_schema_notifications_create(properties.set_prop("notifications", AAZListType, ".notifications"))
                properties.set_prop("optionalFeatures", AAZListType, ".optional_features")
                properties.set_prop("privateResourceProviderConfiguration", AAZObjectType, ".private_resource_provider_configuration")
                properties.set_prop("providerAuthentication", AAZObjectType, ".provider_authentication")
                properties.set_prop("providerAuthorizations", AAZListType, ".provider_authorizations")
                properties.set_prop("providerHubMetadata", AAZObjectType, ".provider_hub_metadata")
                properties.set_prop("providerType", AAZStrType, ".provider_type")
                properties.set_prop("providerVersion", AAZStrType, ".provider_version")
                properties.set_prop("requestHeaderOptions", AAZObjectType, ".request_header_options")
                properties.set_prop("requiredFeatures", AAZListType, ".required_features")
                properties.set_prop("resourceGroupLockOptionDuringMove", AAZObjectType, ".resource_group_lock_option_during_move")
                properties.set_prop("resourceHydrationAccounts", AAZListType, ".resource_hydration_accounts")
                _CreateHelper._build_schema_resource_provider_authorization_rules_create(properties.set_prop("resourceProviderAuthorizationRules", AAZObjectType, ".resource_provider_authorization_rules"))
                properties.set_prop("responseOptions", AAZObjectType, ".response_options")
                properties.set_prop("serviceName", AAZStrType, ".service_name")
                properties.set_prop("services", AAZListType, ".services")
                properties.set_prop("subscriptionLifecycleNotificationSpecifications", AAZObjectType, ".subscription_lifecycle_notification_specifications")
                properties.set_prop("templateDeploymentOptions", AAZObjectType, ".template_deployment_options")
                _CreateHelper._build_schema_token_auth_configuration_create(properties.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))

            capabilities = _builder.get(".properties.specification.providerRegistration.properties.capabilities")
            if capabilities is not None:
                capabilities.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.capabilities[]")
            if _elements is not None:
                _elements.set_prop("effect", AAZStrType, ".effect", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("quotaId", AAZStrType, ".quota_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("requiredFeatures", AAZListType, ".required_features")

            required_features = _builder.get(".properties.specification.providerRegistration.properties.capabilities[].requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.specification.providerRegistration.properties.dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            features_rule = _builder.get(".properties.specification.providerRegistration.properties.featuresRule")
            if features_rule is not None:
                features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

            global_notification_endpoints = _builder.get(".properties.specification.providerRegistration.properties.globalNotificationEndpoints")
            if global_notification_endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(global_notification_endpoints.set_elements(AAZObjectType, "."))

            legacy_registrations = _builder.get(".properties.specification.providerRegistration.properties.legacyRegistrations")
            if legacy_registrations is not None:
                legacy_registrations.set_elements(AAZStrType, ".")

            linked_notification_rules = _builder.get(".properties.specification.providerRegistration.properties.linkedNotificationRules")
            if linked_notification_rules is not None:
                linked_notification_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.linkedNotificationRules[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                _elements.set_prop("endpoints", AAZListType, ".endpoints")
                _CreateHelper._build_schema_token_auth_configuration_create(_elements.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))

            actions = _builder.get(".properties.specification.providerRegistration.properties.linkedNotificationRules[].actions")
            if actions is not None:
                actions.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.specification.providerRegistration.properties.linkedNotificationRules[].dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            endpoints = _builder.get(".properties.specification.providerRegistration.properties.linkedNotificationRules[].endpoints")
            if endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(endpoints.set_elements(AAZObjectType, "."))

            management = _builder.get(".properties.specification.providerRegistration.properties.management")
            if management is not None:
                management.set_prop("authorizationOwners", AAZListType, ".authorization_owners")
                management.set_prop("canaryManifestOwners", AAZListType, ".canary_manifest_owners")
                management.set_prop("errorResponseMessageOptions", AAZObjectType, ".error_response_message_options")
                management.set_prop("expeditedRolloutMetadata", AAZObjectType, ".expedited_rollout_metadata")
                management.set_prop("expeditedRolloutSubmitters", AAZListType, ".expedited_rollout_submitters")
                management.set_prop("incidentContactEmail", AAZStrType, ".incident_contact_email")
                management.set_prop("incidentRoutingService", AAZStrType, ".incident_routing_service")
                management.set_prop("incidentRoutingTeam", AAZStrType, ".incident_routing_team")
                management.set_prop("manifestOwners", AAZListType, ".manifest_owners")
                management.set_prop("pcCode", AAZStrType, ".pc_code")
                management.set_prop("profitCenterProgramId", AAZStrType, ".profit_center_program_id")
                management.set_prop("resourceAccessPolicy", AAZStrType, ".resource_access_policy")
                management.set_prop("resourceAccessRoles", AAZListType, ".resource_access_roles")
                management.set_prop("schemaOwners", AAZListType, ".schema_owners")
                management.set_prop("serviceTreeInfos", AAZListType, ".service_tree_infos")

            authorization_owners = _builder.get(".properties.specification.providerRegistration.properties.management.authorizationOwners")
            if authorization_owners is not None:
                authorization_owners.set_elements(AAZStrType, ".")

            canary_manifest_owners = _builder.get(".properties.specification.providerRegistration.properties.management.canaryManifestOwners")
            if canary_manifest_owners is not None:
                canary_manifest_owners.set_elements(AAZStrType, ".")

            error_response_message_options = _builder.get(".properties.specification.providerRegistration.properties.management.errorResponseMessageOptions")
            if error_response_message_options is not None:
                error_response_message_options.set_prop("serverFailureResponseMessageType", AAZStrType, ".server_failure_response_message_type")

            expedited_rollout_metadata = _builder.get(".properties.specification.providerRegistration.properties.management.expeditedRolloutMetadata")
            if expedited_rollout_metadata is not None:
                expedited_rollout_metadata.set_prop("enabled", AAZBoolType, ".enabled")
                expedited_rollout_metadata.set_prop("expeditedRolloutIntent", AAZStrType, ".expedited_rollout_intent")

            expedited_rollout_submitters = _builder.get(".properties.specification.providerRegistration.properties.management.expeditedRolloutSubmitters")
            if expedited_rollout_submitters is not None:
                expedited_rollout_submitters.set_elements(AAZStrType, ".")

            manifest_owners = _builder.get(".properties.specification.providerRegistration.properties.management.manifestOwners")
            if manifest_owners is not None:
                manifest_owners.set_elements(AAZStrType, ".")

            resource_access_roles = _builder.get(".properties.specification.providerRegistration.properties.management.resourceAccessRoles")
            if resource_access_roles is not None:
                _CreateHelper._build_schema_resource_access_role_create(resource_access_roles.set_elements(AAZObjectType, "."))

            schema_owners = _builder.get(".properties.specification.providerRegistration.properties.management.schemaOwners")
            if schema_owners is not None:
                schema_owners.set_elements(AAZStrType, ".")

            service_tree_infos = _builder.get(".properties.specification.providerRegistration.properties.management.serviceTreeInfos")
            if service_tree_infos is not None:
                _CreateHelper._build_schema_service_tree_info_create(service_tree_infos.set_elements(AAZObjectType, "."))

            management_group_global_notification_endpoints = _builder.get(".properties.specification.providerRegistration.properties.managementGroupGlobalNotificationEndpoints")
            if management_group_global_notification_endpoints is not None:
                _CreateHelper._build_schema_resource_provider_endpoint_create(management_group_global_notification_endpoints.set_elements(AAZObjectType, "."))

            metadata = _builder.get(".properties.specification.providerRegistration.properties.metadata")
            if metadata is not None:
                metadata.set_anytype_elements(".")

            notification_settings = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings")
            if notification_settings is not None:
                notification_settings.set_prop("subscriberSettings", AAZListType, ".subscriber_settings")

            subscriber_settings = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings")
            if subscriber_settings is not None:
                subscriber_settings.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings[]")
            if _elements is not None:
                _elements.set_prop("filterRules", AAZListType, ".filter_rules")

            filter_rules = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings[].filterRules")
            if filter_rules is not None:
                filter_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings[].filterRules[]")
            if _elements is not None:
                _elements.set_prop("endpointInformation", AAZListType, ".endpoint_information")
                _elements.set_prop("filterQuery", AAZStrType, ".filter_query")

            endpoint_information = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings[].filterRules[].endpointInformation")
            if endpoint_information is not None:
                endpoint_information.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.notificationSettings.subscriberSettings[].filterRules[].endpointInformation[]")
            if _elements is not None:
                _elements.set_prop("endpoint", AAZStrType, ".endpoint")
                _elements.set_prop("endpointType", AAZStrType, ".endpoint_type")
                _elements.set_prop("schemaVersion", AAZStrType, ".schema_version")

            optional_features = _builder.get(".properties.specification.providerRegistration.properties.optionalFeatures")
            if optional_features is not None:
                optional_features.set_elements(AAZStrType, ".")

            private_resource_provider_configuration = _builder.get(".properties.specification.providerRegistration.properties.privateResourceProviderConfiguration")
            if private_resource_provider_configuration is not None:
                private_resource_provider_configuration.set_prop("allowedSubscriptions", AAZListType, ".allowed_subscriptions")

            allowed_subscriptions = _builder.get(".properties.specification.providerRegistration.properties.privateResourceProviderConfiguration.allowedSubscriptions")
            if allowed_subscriptions is not None:
                allowed_subscriptions.set_elements(AAZStrType, ".")

            provider_authentication = _builder.get(".properties.specification.providerRegistration.properties.providerAuthentication")
            if provider_authentication is not None:
                provider_authentication.set_prop("allowedAudiences", AAZListType, ".allowed_audiences", typ_kwargs={"flags": {"required": True}})

            allowed_audiences = _builder.get(".properties.specification.providerRegistration.properties.providerAuthentication.allowedAudiences")
            if allowed_audiences is not None:
                allowed_audiences.set_elements(AAZStrType, ".")

            provider_authorizations = _builder.get(".properties.specification.providerRegistration.properties.providerAuthorizations")
            if provider_authorizations is not None:
                _CreateHelper._build_schema_resource_provider_authorization_create(provider_authorizations.set_elements(AAZObjectType, "."))

            provider_hub_metadata = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata")
            if provider_hub_metadata is not None:
                provider_hub_metadata.set_prop("directRpRoleDefinitionId", AAZStrType, ".direct_rp_role_definition_id")
                provider_hub_metadata.set_prop("globalAsyncOperationResourceTypeName", AAZStrType, ".global_async_operation_resource_type_name")
                provider_hub_metadata.set_prop("providerAuthentication", AAZObjectType, ".provider_authentication")
                provider_hub_metadata.set_prop("providerAuthorizations", AAZListType, ".provider_authorizations")
                provider_hub_metadata.set_prop("regionalAsyncOperationResourceTypeName", AAZStrType, ".regional_async_operation_resource_type_name")
                provider_hub_metadata.set_prop("thirdPartyProviderAuthorization", AAZObjectType, ".third_party_provider_authorization")

            provider_authentication = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.providerAuthentication")
            if provider_authentication is not None:
                provider_authentication.set_prop("allowedAudiences", AAZListType, ".allowed_audiences", typ_kwargs={"flags": {"required": True}})

            allowed_audiences = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.providerAuthentication.allowedAudiences")
            if allowed_audiences is not None:
                allowed_audiences.set_elements(AAZStrType, ".")

            provider_authorizations = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.providerAuthorizations")
            if provider_authorizations is not None:
                _CreateHelper._build_schema_resource_provider_authorization_create(provider_authorizations.set_elements(AAZObjectType, "."))

            third_party_provider_authorization = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.thirdPartyProviderAuthorization")
            if third_party_provider_authorization is not None:
                third_party_provider_authorization.set_prop("authorizations", AAZListType, ".authorizations")
                third_party_provider_authorization.set_prop("managedByTenantId", AAZStrType, ".managed_by_tenant_id")

            authorizations = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.thirdPartyProviderAuthorization.authorizations")
            if authorizations is not None:
                authorizations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.providerHubMetadata.thirdPartyProviderAuthorization.authorizations[]")
            if _elements is not None:
                _elements.set_prop("principalId", AAZStrType, ".principal_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id", typ_kwargs={"flags": {"required": True}})

            request_header_options = _builder.get(".properties.specification.providerRegistration.properties.requestHeaderOptions")
            if request_header_options is not None:
                request_header_options.set_prop("optInHeaders", AAZStrType, ".opt_in_headers")
                request_header_options.set_prop("optOutHeaders", AAZStrType, ".opt_out_headers")

            required_features = _builder.get(".properties.specification.providerRegistration.properties.requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            resource_group_lock_option_during_move = _builder.get(".properties.specification.providerRegistration.properties.resourceGroupLockOptionDuringMove")
            if resource_group_lock_option_during_move is not None:
                resource_group_lock_option_during_move.set_prop("blockActionVerb", AAZStrType, ".block_action_verb")

            resource_hydration_accounts = _builder.get(".properties.specification.providerRegistration.properties.resourceHydrationAccounts")
            if resource_hydration_accounts is not None:
                resource_hydration_accounts.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.resourceHydrationAccounts[]")
            if _elements is not None:
                _elements.set_prop("accountName", AAZStrType, ".account_name")
                _elements.set_prop("encryptedKey", AAZStrType, ".encrypted_key")
                _elements.set_prop("maxChildResourceConsistencyJobLimit", AAZIntType, ".max_child_resource_consistency_job_limit")
                _elements.set_prop("subscriptionId", AAZStrType, ".subscription_id")

            response_options = _builder.get(".properties.specification.providerRegistration.properties.responseOptions")
            if response_options is not None:
                response_options.set_prop("serviceClientOptionsType", AAZStrType, ".service_client_options_type")

            services = _builder.get(".properties.specification.providerRegistration.properties.services")
            if services is not None:
                services.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.providerRegistration.properties.services[]")
            if _elements is not None:
                _elements.set_prop("serviceName", AAZStrType, ".service_name")
                _elements.set_prop("status", AAZStrType, ".status")

            subscription_lifecycle_notification_specifications = _builder.get(".properties.specification.providerRegistration.properties.subscriptionLifecycleNotificationSpecifications")
            if subscription_lifecycle_notification_specifications is not None:
                subscription_lifecycle_notification_specifications.set_prop("softDeleteTTL", AAZStrType, ".soft_delete_ttl")
                subscription_lifecycle_notification_specifications.set_prop("subscriptionStateOverrideActions", AAZListType, ".subscription_state_override_actions")

            subscription_state_override_actions = _builder.get(".properties.specification.providerRegistration.properties.subscriptionLifecycleNotificationSpecifications.subscriptionStateOverrideActions")
            if subscription_state_override_actions is not None:
                _CreateHelper._build_schema_subscription_state_override_action_create(subscription_state_override_actions.set_elements(AAZObjectType, "."))

            template_deployment_options = _builder.get(".properties.specification.providerRegistration.properties.templateDeploymentOptions")
            if template_deployment_options is not None:
                template_deployment_options.set_prop("preflightOptions", AAZListType, ".preflight_options")
                template_deployment_options.set_prop("preflightSupported", AAZBoolType, ".preflight_supported")

            preflight_options = _builder.get(".properties.specification.providerRegistration.properties.templateDeploymentOptions.preflightOptions")
            if preflight_options is not None:
                preflight_options.set_elements(AAZStrType, ".")

            release_scopes = _builder.get(".properties.specification.releaseScopes")
            if release_scopes is not None:
                release_scopes.set_elements(AAZStrType, ".")

            resource_type_registrations = _builder.get(".properties.specification.resourceTypeRegistrations")
            if resource_type_registrations is not None:
                resource_type_registrations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[]")
            if _elements is not None:
                _elements.set_prop("kind", AAZStrType, ".kind")
                _elements.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties.specification.resourceTypeRegistrations[].properties")
            if properties is not None:
                properties.set_prop("addResourceListTargetLocations", AAZBoolType, ".add_resource_list_target_locations")
                properties.set_prop("additionalOptions", AAZStrType, ".additional_options")
                properties.set_prop("allowEmptyRoleAssignments", AAZBoolType, ".allow_empty_role_assignments")
                properties.set_prop("allowedResourceNames", AAZListType, ".allowed_resource_names")
                properties.set_prop("allowedTemplateDeploymentReferenceActions", AAZListType, ".allowed_template_deployment_reference_actions")
                properties.set_prop("allowedUnauthorizedActions", AAZListType, ".allowed_unauthorized_actions")
                properties.set_prop("apiProfiles", AAZListType, ".api_profiles")
                properties.set_prop("asyncOperationResourceTypeName", AAZStrType, ".async_operation_resource_type_name")
                properties.set_prop("asyncTimeoutRules", AAZListType, ".async_timeout_rules")
                properties.set_prop("authorizationActionMappings", AAZListType, ".authorization_action_mappings")
                properties.set_prop("availabilityZoneRule", AAZObjectType, ".availability_zone_rule")
                properties.set_prop("capacityRule", AAZObjectType, ".capacity_rule")
                properties.set_prop("category", AAZStrType, ".category")
                properties.set_prop("checkNameAvailabilitySpecifications", AAZObjectType, ".check_name_availability_specifications")
                properties.set_prop("commonApiVersions", AAZListType, ".common_api_versions")
                properties.set_prop("crossTenantTokenValidation", AAZStrType, ".cross_tenant_token_validation")
                properties.set_prop("defaultApiVersion", AAZStrType, ".default_api_version")
                properties.set_prop("disallowedActionVerbs", AAZListType, ".disallowed_action_verbs")
                properties.set_prop("disallowedEndUserOperations", AAZListType, ".disallowed_end_user_operations")
                properties.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                properties.set_prop("enableAsyncOperation", AAZBoolType, ".enable_async_operation")
                properties.set_prop("enableThirdPartyS2S", AAZBoolType, ".enable_third_party_s2_s")
                properties.set_prop("endpoints", AAZListType, ".endpoints")
                properties.set_prop("extendedLocations", AAZListType, ".extended_locations")
                properties.set_prop("extensionOptions", AAZObjectType, ".extension_options")
                properties.set_prop("featuresRule", AAZObjectType, ".features_rule")
                properties.set_prop("frontdoorRequestMode", AAZStrType, ".frontdoor_request_mode")
                properties.set_prop("groupingTag", AAZStrType, ".grouping_tag")
                properties.set_prop("identityManagement", AAZObjectType, ".identity_management")
                properties.set_prop("isPureProxy", AAZBoolType, ".is_pure_proxy")
                properties.set_prop("legacyName", AAZStrType, ".legacy_name")
                properties.set_prop("legacyNames", AAZListType, ".legacy_names")
                properties.set_prop("legacyPolicy", AAZObjectType, ".legacy_policy")
                properties.set_prop("linkedAccessChecks", AAZListType, ".linked_access_checks")
                properties.set_prop("linkedNotificationRules", AAZListType, ".linked_notification_rules")
                properties.set_prop("linkedOperationRules", AAZListType, ".linked_operation_rules")
                properties.set_prop("loggingRules", AAZListType, ".logging_rules")
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType, ".managed_resource_group_configuration")
                properties.set_prop("management", AAZObjectType, ".management")
                properties.set_prop("manifestLink", AAZStrType, ".manifest_link")
                properties.set_prop("marketplaceOptions", AAZObjectType, ".marketplace_options")
                properties.set_prop("marketplaceType", AAZStrType, ".marketplace_type")
                properties.set_prop("metadata", AAZDictType, ".metadata")
                _CreateHelper._build_schema_notifications_create(properties.set_prop("notifications", AAZListType, ".notifications"))
                properties.set_prop("onBehalfOfTokens", AAZObjectType, ".on_behalf_of_tokens")
                properties.set_prop("openApiConfiguration", AAZObjectType, ".open_api_configuration")
                properties.set_prop("policyExecutionType", AAZStrType, ".policy_execution_type")
                properties.set_prop("privateEndpointConfiguration", AAZObjectType, ".private_endpoint_configuration")
                properties.set_prop("quotaRule", AAZObjectType, ".quota_rule")
                properties.set_prop("regionality", AAZStrType, ".regionality")
                properties.set_prop("requestHeaderOptions", AAZObjectType, ".request_header_options")
                properties.set_prop("requiredFeatures", AAZListType, ".required_features")
                properties.set_prop("resourceCache", AAZObjectType, ".resource_cache")
                properties.set_prop("resourceConcurrencyControlOptions", AAZDictType, ".resource_concurrency_control_options")
                properties.set_prop("resourceDeletionPolicy", AAZStrType, ".resource_deletion_policy")
                properties.set_prop("resourceGraphConfiguration", AAZObjectType, ".resource_graph_configuration")
                properties.set_prop("resourceManagementOptions", AAZObjectType, ".resource_management_options")
                properties.set_prop("resourceMovePolicy", AAZObjectType, ".resource_move_policy")
                _CreateHelper._build_schema_resource_provider_authorization_rules_create(properties.set_prop("resourceProviderAuthorizationRules", AAZObjectType, ".resource_provider_authorization_rules"))
                properties.set_prop("resourceQueryManagement", AAZObjectType, ".resource_query_management")
                properties.set_prop("resourceSubType", AAZStrType, ".resource_sub_type")
                properties.set_prop("resourceTypeCommonAttributeManagement", AAZObjectType, ".resource_type_common_attribute_management")
                properties.set_prop("resourceValidation", AAZStrType, ".resource_validation")
                properties.set_prop("routingRule", AAZObjectType, ".routing_rule")
                properties.set_prop("routingType", AAZStrType, ".routing_type")
                properties.set_prop("serviceTreeInfos", AAZListType, ".service_tree_infos")
                properties.set_prop("skuLink", AAZStrType, ".sku_link")
                properties.set_prop("subscriptionLifecycleNotificationSpecifications", AAZObjectType, ".subscription_lifecycle_notification_specifications")
                properties.set_prop("subscriptionStateRules", AAZListType, ".subscription_state_rules")
                properties.set_prop("supportsTags", AAZBoolType, ".supports_tags")
                properties.set_prop("swaggerSpecifications", AAZListType, ".swagger_specifications")
                properties.set_prop("templateDeploymentOptions", AAZObjectType, ".template_deployment_options")
                properties.set_prop("templateDeploymentPolicy", AAZObjectType, ".template_deployment_policy")
                properties.set_prop("throttlingRules", AAZListType, ".throttling_rules")
                _CreateHelper._build_schema_token_auth_configuration_create(properties.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))

            allowed_resource_names = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.allowedResourceNames")
            if allowed_resource_names is not None:
                allowed_resource_names.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.allowedResourceNames[]")
            if _elements is not None:
                _elements.set_prop("getActionVerb", AAZStrType, ".get_action_verb")
                _elements.set_prop("name", AAZStrType, ".name")

            allowed_template_deployment_reference_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.allowedTemplateDeploymentReferenceActions")
            if allowed_template_deployment_reference_actions is not None:
                allowed_template_deployment_reference_actions.set_elements(AAZStrType, ".")

            allowed_unauthorized_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.allowedUnauthorizedActions")
            if allowed_unauthorized_actions is not None:
                allowed_unauthorized_actions.set_elements(AAZStrType, ".")

            api_profiles = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.apiProfiles")
            if api_profiles is not None:
                api_profiles.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.apiProfiles[]")
            if _elements is not None:
                _elements.set_prop("apiVersion", AAZStrType, ".api_version")
                _elements.set_prop("profileVersion", AAZStrType, ".profile_version")

            async_timeout_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.asyncTimeoutRules")
            if async_timeout_rules is not None:
                async_timeout_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.asyncTimeoutRules[]")
            if _elements is not None:
                _elements.set_prop("actionName", AAZStrType, ".action_name")
                _elements.set_prop("timeout", AAZStrType, ".timeout")

            authorization_action_mappings = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.authorizationActionMappings")
            if authorization_action_mappings is not None:
                authorization_action_mappings.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.authorizationActionMappings[]")
            if _elements is not None:
                _elements.set_prop("desired", AAZStrType, ".desired")
                _elements.set_prop("original", AAZStrType, ".original")

            availability_zone_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.availabilityZoneRule")
            if availability_zone_rule is not None:
                availability_zone_rule.set_prop("availabilityZonePolicy", AAZStrType, ".availability_zone_policy")

            capacity_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.capacityRule")
            if capacity_rule is not None:
                capacity_rule.set_prop("capacityPolicy", AAZStrType, ".capacity_policy")
                capacity_rule.set_prop("skuAlias", AAZStrType, ".sku_alias")

            check_name_availability_specifications = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.checkNameAvailabilitySpecifications")
            if check_name_availability_specifications is not None:
                check_name_availability_specifications.set_prop("enableDefaultValidation", AAZBoolType, ".enable_default_validation")
                check_name_availability_specifications.set_prop("resourceTypesWithCustomValidation", AAZListType, ".resource_types_with_custom_validation")

            resource_types_with_custom_validation = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.checkNameAvailabilitySpecifications.resourceTypesWithCustomValidation")
            if resource_types_with_custom_validation is not None:
                resource_types_with_custom_validation.set_elements(AAZStrType, ".")

            common_api_versions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.commonApiVersions")
            if common_api_versions is not None:
                common_api_versions.set_elements(AAZStrType, ".")

            disallowed_action_verbs = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.disallowedActionVerbs")
            if disallowed_action_verbs is not None:
                disallowed_action_verbs.set_elements(AAZStrType, ".")

            disallowed_end_user_operations = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.disallowedEndUserOperations")
            if disallowed_end_user_operations is not None:
                disallowed_end_user_operations.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            endpoints = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints")
            if endpoints is not None:
                endpoints.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[]")
            if _elements is not None:
                _elements.set_prop("apiVersion", AAZStrType, ".api_version")
                _elements.set_prop("apiVersions", AAZListType, ".api_versions")
                _elements.set_prop("dataBoundary", AAZStrType, ".data_boundary")
                _elements.set_prop("dstsConfiguration", AAZObjectType, ".dsts_configuration")
                _elements.set_prop("enabled", AAZBoolType, ".enabled")
                _elements.set_prop("endpointType", AAZStrType, ".endpoint_type")
                _elements.set_prop("endpointUri", AAZStrType, ".endpoint_uri")
                _elements.set_prop("extensions", AAZListType, ".extensions")
                _elements.set_prop("featuresRule", AAZObjectType, ".features_rule")
                _elements.set_prop("kind", AAZStrType, ".kind")
                _elements.set_prop("locations", AAZListType, ".locations")
                _elements.set_prop("requiredFeatures", AAZListType, ".required_features")
                _elements.set_prop("skuLink", AAZStrType, ".sku_link")
                _elements.set_prop("timeout", AAZStrType, ".timeout")
                _CreateHelper._build_schema_token_auth_configuration_create(_elements.set_prop("tokenAuthConfiguration", AAZObjectType, ".token_auth_configuration"))
                _elements.set_prop("zones", AAZListType, ".zones")

            api_versions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].apiVersions")
            if api_versions is not None:
                api_versions.set_elements(AAZStrType, ".")

            dsts_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].dstsConfiguration")
            if dsts_configuration is not None:
                dsts_configuration.set_prop("serviceDnsName", AAZStrType, ".service_dns_name")
                dsts_configuration.set_prop("serviceName", AAZStrType, ".service_name", typ_kwargs={"flags": {"required": True}})

            extensions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].extensions")
            if extensions is not None:
                extensions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].extensions[]")
            if _elements is not None:
                _elements.set_prop("endpointUri", AAZStrType, ".endpoint_uri")
                _elements.set_prop("extensionCategories", AAZListType, ".extension_categories")
                _elements.set_prop("timeout", AAZStrType, ".timeout")

            extension_categories = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].extensions[].extensionCategories")
            if extension_categories is not None:
                extension_categories.set_elements(AAZStrType, ".")

            features_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].featuresRule")
            if features_rule is not None:
                features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

            locations = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].locations")
            if locations is not None:
                locations.set_elements(AAZStrType, ".")

            required_features = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            zones = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.endpoints[].zones")
            if zones is not None:
                zones.set_elements(AAZStrType, ".")

            extended_locations = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extendedLocations")
            if extended_locations is not None:
                extended_locations.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extendedLocations[]")
            if _elements is not None:
                _elements.set_prop("supportedPolicy", AAZStrType, ".supported_policy")
                _elements.set_prop("type", AAZStrType, ".type")

            extension_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extensionOptions")
            if extension_options is not None:
                extension_options.set_prop("resourceCreationBegin", AAZObjectType, ".resource_creation_begin")

            resource_creation_begin = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extensionOptions.resourceCreationBegin")
            if resource_creation_begin is not None:
                resource_creation_begin.set_prop("request", AAZListType, ".request")
                resource_creation_begin.set_prop("response", AAZListType, ".response")

            request = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extensionOptions.resourceCreationBegin.request")
            if request is not None:
                request.set_elements(AAZStrType, ".")

            response = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.extensionOptions.resourceCreationBegin.response")
            if response is not None:
                response.set_elements(AAZStrType, ".")

            features_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.featuresRule")
            if features_rule is not None:
                features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

            identity_management = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.identityManagement")
            if identity_management is not None:
                identity_management.set_prop("applicationId", AAZStrType, ".application_id")
                identity_management.set_prop("applicationIds", AAZListType, ".application_ids")
                identity_management.set_prop("delegationAppIds", AAZListType, ".delegation_app_ids")
                identity_management.set_prop("type", AAZStrType, ".type")

            application_ids = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.identityManagement.applicationIds")
            if application_ids is not None:
                application_ids.set_elements(AAZStrType, ".")

            delegation_app_ids = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.identityManagement.delegationAppIds")
            if delegation_app_ids is not None:
                delegation_app_ids.set_elements(AAZStrType, ".")

            legacy_names = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyNames")
            if legacy_names is not None:
                legacy_names.set_elements(AAZStrType, ".")

            legacy_policy = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyPolicy")
            if legacy_policy is not None:
                legacy_policy.set_prop("disallowedConditions", AAZListType, ".disallowed_conditions")
                legacy_policy.set_prop("disallowedLegacyOperations", AAZListType, ".disallowed_legacy_operations")

            disallowed_conditions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyPolicy.disallowedConditions")
            if disallowed_conditions is not None:
                disallowed_conditions.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyPolicy.disallowedConditions[]")
            if _elements is not None:
                _elements.set_prop("disallowedLegacyOperations", AAZListType, ".disallowed_legacy_operations")
                _elements.set_prop("feature", AAZStrType, ".feature")

            disallowed_legacy_operations = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyPolicy.disallowedConditions[].disallowedLegacyOperations")
            if disallowed_legacy_operations is not None:
                disallowed_legacy_operations.set_elements(AAZStrType, ".")

            disallowed_legacy_operations = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.legacyPolicy.disallowedLegacyOperations")
            if disallowed_legacy_operations is not None:
                disallowed_legacy_operations.set_elements(AAZStrType, ".")

            linked_access_checks = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedAccessChecks")
            if linked_access_checks is not None:
                linked_access_checks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedAccessChecks[]")
            if _elements is not None:
                _elements.set_prop("actionName", AAZStrType, ".action_name")
                _elements.set_prop("linkedAction", AAZStrType, ".linked_action")
                _elements.set_prop("linkedActionVerb", AAZStrType, ".linked_action_verb")
                _elements.set_prop("linkedProperty", AAZStrType, ".linked_property")
                _elements.set_prop("linkedType", AAZStrType, ".linked_type")

            linked_notification_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules")
            if linked_notification_rules is not None:
                linked_notification_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules[]")
            if _elements is not None:
                _elements.set_prop("actions", AAZListType, ".actions")
                _elements.set_prop("actionsOnFailedOperation", AAZListType, ".actions_on_failed_operation")
                _elements.set_prop("fastPathActions", AAZListType, ".fast_path_actions")
                _elements.set_prop("fastPathActionsOnFailedOperation", AAZListType, ".fast_path_actions_on_failed_operation")
                _elements.set_prop("linkedNotificationTimeout", AAZStrType, ".linked_notification_timeout")

            actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules[].actions")
            if actions is not None:
                actions.set_elements(AAZStrType, ".")

            actions_on_failed_operation = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules[].actionsOnFailedOperation")
            if actions_on_failed_operation is not None:
                actions_on_failed_operation.set_elements(AAZStrType, ".")

            fast_path_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules[].fastPathActions")
            if fast_path_actions is not None:
                fast_path_actions.set_elements(AAZStrType, ".")

            fast_path_actions_on_failed_operation = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedNotificationRules[].fastPathActionsOnFailedOperation")
            if fast_path_actions_on_failed_operation is not None:
                fast_path_actions_on_failed_operation.set_elements(AAZStrType, ".")

            linked_operation_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedOperationRules")
            if linked_operation_rules is not None:
                linked_operation_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedOperationRules[]")
            if _elements is not None:
                _elements.set_prop("dependsOnTypes", AAZListType, ".depends_on_types")
                _elements.set_prop("linkedAction", AAZStrType, ".linked_action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("linkedOperation", AAZStrType, ".linked_operation", typ_kwargs={"flags": {"required": True}})

            depends_on_types = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.linkedOperationRules[].dependsOnTypes")
            if depends_on_types is not None:
                depends_on_types.set_elements(AAZStrType, ".")

            logging_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.loggingRules")
            if logging_rules is not None:
                logging_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.loggingRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("detailLevel", AAZStrType, ".detail_level", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("direction", AAZStrType, ".direction", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("hiddenPropertyPaths", AAZObjectType, ".hidden_property_paths")

            hidden_property_paths = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.loggingRules[].hiddenPropertyPaths")
            if hidden_property_paths is not None:
                hidden_property_paths.set_prop("hiddenPathsOnRequest", AAZListType, ".hidden_paths_on_request")
                hidden_property_paths.set_prop("hiddenPathsOnResponse", AAZListType, ".hidden_paths_on_response")

            hidden_paths_on_request = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.loggingRules[].hiddenPropertyPaths.hiddenPathsOnRequest")
            if hidden_paths_on_request is not None:
                hidden_paths_on_request.set_elements(AAZStrType, ".")

            hidden_paths_on_response = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.loggingRules[].hiddenPropertyPaths.hiddenPathsOnResponse")
            if hidden_paths_on_response is not None:
                hidden_paths_on_response.set_elements(AAZStrType, ".")

            managed_resource_group_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("applicationIds", AAZListType, ".application_ids")
                managed_resource_group_configuration.set_prop("denyAssignmentConfiguration", AAZObjectType, ".deny_assignment_configuration")
                managed_resource_group_configuration.set_prop("enabled", AAZBoolType, ".enabled")
                managed_resource_group_configuration.set_prop("resourceGroupLocationOverride", AAZStrType, ".resource_group_location_override")

            application_ids = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.managedResourceGroupConfiguration.applicationIds")
            if application_ids is not None:
                application_ids.set_elements(AAZStrType, ".")

            deny_assignment_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.managedResourceGroupConfiguration.denyAssignmentConfiguration")
            if deny_assignment_configuration is not None:
                deny_assignment_configuration.set_prop("enabled", AAZBoolType, ".enabled")
                deny_assignment_configuration.set_prop("notActions", AAZListType, ".not_actions")

            not_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.managedResourceGroupConfiguration.denyAssignmentConfiguration.notActions")
            if not_actions is not None:
                not_actions.set_elements(AAZStrType, ".")

            management = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management")
            if management is not None:
                management.set_prop("authorizationOwners", AAZListType, ".authorization_owners")
                management.set_prop("canaryManifestOwners", AAZListType, ".canary_manifest_owners")
                management.set_prop("errorResponseMessageOptions", AAZObjectType, ".error_response_message_options")
                management.set_prop("expeditedRolloutMetadata", AAZObjectType, ".expedited_rollout_metadata")
                management.set_prop("expeditedRolloutSubmitters", AAZListType, ".expedited_rollout_submitters")
                management.set_prop("incidentContactEmail", AAZStrType, ".incident_contact_email")
                management.set_prop("incidentRoutingService", AAZStrType, ".incident_routing_service")
                management.set_prop("incidentRoutingTeam", AAZStrType, ".incident_routing_team")
                management.set_prop("manifestOwners", AAZListType, ".manifest_owners")
                management.set_prop("pcCode", AAZStrType, ".pc_code")
                management.set_prop("profitCenterProgramId", AAZStrType, ".profit_center_program_id")
                management.set_prop("resourceAccessPolicy", AAZStrType, ".resource_access_policy")
                management.set_prop("resourceAccessRoles", AAZListType, ".resource_access_roles")
                management.set_prop("schemaOwners", AAZListType, ".schema_owners")
                management.set_prop("serviceTreeInfos", AAZListType, ".service_tree_infos")

            authorization_owners = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.authorizationOwners")
            if authorization_owners is not None:
                authorization_owners.set_elements(AAZStrType, ".")

            canary_manifest_owners = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.canaryManifestOwners")
            if canary_manifest_owners is not None:
                canary_manifest_owners.set_elements(AAZStrType, ".")

            error_response_message_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.errorResponseMessageOptions")
            if error_response_message_options is not None:
                error_response_message_options.set_prop("serverFailureResponseMessageType", AAZStrType, ".server_failure_response_message_type")

            expedited_rollout_metadata = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.expeditedRolloutMetadata")
            if expedited_rollout_metadata is not None:
                expedited_rollout_metadata.set_prop("enabled", AAZBoolType, ".enabled")
                expedited_rollout_metadata.set_prop("expeditedRolloutIntent", AAZStrType, ".expedited_rollout_intent")

            expedited_rollout_submitters = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.expeditedRolloutSubmitters")
            if expedited_rollout_submitters is not None:
                expedited_rollout_submitters.set_elements(AAZStrType, ".")

            manifest_owners = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.manifestOwners")
            if manifest_owners is not None:
                manifest_owners.set_elements(AAZStrType, ".")

            resource_access_roles = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.resourceAccessRoles")
            if resource_access_roles is not None:
                _CreateHelper._build_schema_resource_access_role_create(resource_access_roles.set_elements(AAZObjectType, "."))

            schema_owners = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.schemaOwners")
            if schema_owners is not None:
                schema_owners.set_elements(AAZStrType, ".")

            service_tree_infos = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.management.serviceTreeInfos")
            if service_tree_infos is not None:
                _CreateHelper._build_schema_service_tree_info_create(service_tree_infos.set_elements(AAZObjectType, "."))

            marketplace_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.marketplaceOptions")
            if marketplace_options is not None:
                marketplace_options.set_prop("addOnPlanConversionAllowed", AAZBoolType, ".add_on_plan_conversion_allowed")

            metadata = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.metadata")
            if metadata is not None:
                metadata.set_elements(AAZFreeFormDictType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.metadata{}")
            if _elements is not None:
                _elements.set_anytype_elements(".")

            on_behalf_of_tokens = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.onBehalfOfTokens")
            if on_behalf_of_tokens is not None:
                on_behalf_of_tokens.set_prop("actionName", AAZStrType, ".action_name")
                on_behalf_of_tokens.set_prop("lifeTime", AAZStrType, ".life_time")

            open_api_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.openApiConfiguration")
            if open_api_configuration is not None:
                open_api_configuration.set_prop("validation", AAZObjectType, ".validation")

            validation = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.openApiConfiguration.validation")
            if validation is not None:
                validation.set_prop("allowNoncompliantCollectionResponse", AAZBoolType, ".allow_noncompliant_collection_response")

            private_endpoint_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.privateEndpointConfiguration")
            if private_endpoint_configuration is not None:
                private_endpoint_configuration.set_prop("groupConnectivityInformation", AAZListType, ".group_connectivity_information", typ_kwargs={"flags": {"required": True}})
                private_endpoint_configuration.set_prop("minApiVersion", AAZStrType, ".min_api_version", typ_kwargs={"flags": {"required": True}})

            group_connectivity_information = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.privateEndpointConfiguration.groupConnectivityInformation")
            if group_connectivity_information is not None:
                group_connectivity_information.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.privateEndpointConfiguration.groupConnectivityInformation[]")
            if _elements is not None:
                _elements.set_prop("groupId", AAZStrType, ".group_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("redirectMapId", AAZStrType, ".redirect_map_id")
                _elements.set_prop("requiredMembers", AAZListType, ".required_members", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("requiredZoneNames", AAZListType, ".required_zone_names", typ_kwargs={"flags": {"required": True}})

            required_members = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.privateEndpointConfiguration.groupConnectivityInformation[].requiredMembers")
            if required_members is not None:
                required_members.set_elements(AAZStrType, ".")

            required_zone_names = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.privateEndpointConfiguration.groupConnectivityInformation[].requiredZoneNames")
            if required_zone_names is not None:
                required_zone_names.set_elements(AAZStrType, ".")

            quota_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.quotaRule")
            if quota_rule is not None:
                quota_rule.set_prop("locationRules", AAZListType, ".location_rules")
                quota_rule.set_prop("quotaPolicy", AAZStrType, ".quota_policy")
                quota_rule.set_prop("requiredFeatures", AAZListType, ".required_features")

            location_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.quotaRule.locationRules")
            if location_rules is not None:
                location_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.quotaRule.locationRules[]")
            if _elements is not None:
                _elements.set_prop("location", AAZStrType, ".location")
                _elements.set_prop("policy", AAZStrType, ".policy")
                _elements.set_prop("quotaId", AAZStrType, ".quota_id")

            required_features = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.quotaRule.requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            request_header_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.requestHeaderOptions")
            if request_header_options is not None:
                request_header_options.set_prop("optInHeaders", AAZStrType, ".opt_in_headers")
                request_header_options.set_prop("optOutHeaders", AAZStrType, ".opt_out_headers")

            required_features = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            resource_cache = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceCache")
            if resource_cache is not None:
                resource_cache.set_prop("enableResourceCache", AAZBoolType, ".enable_resource_cache")
                resource_cache.set_prop("resourceCacheExpirationTimespan", AAZStrType, ".resource_cache_expiration_timespan")

            resource_concurrency_control_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceConcurrencyControlOptions")
            if resource_concurrency_control_options is not None:
                resource_concurrency_control_options.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceConcurrencyControlOptions{}")
            if _elements is not None:
                _elements.set_prop("policy", AAZStrType, ".policy")

            resource_graph_configuration = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceGraphConfiguration")
            if resource_graph_configuration is not None:
                resource_graph_configuration.set_prop("apiVersion", AAZStrType, ".api_version")
                resource_graph_configuration.set_prop("enabled", AAZBoolType, ".enabled")

            resource_management_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions")
            if resource_management_options is not None:
                resource_management_options.set_prop("batchProvisioningSupport", AAZObjectType, ".batch_provisioning_support")
                resource_management_options.set_prop("deleteDependencies", AAZListType, ".delete_dependencies")
                resource_management_options.set_prop("nestedProvisioningSupport", AAZObjectType, ".nested_provisioning_support")

            batch_provisioning_support = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions.batchProvisioningSupport")
            if batch_provisioning_support is not None:
                batch_provisioning_support.set_prop("supportedOperations", AAZStrType, ".supported_operations")

            delete_dependencies = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions.deleteDependencies")
            if delete_dependencies is not None:
                delete_dependencies.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions.deleteDependencies[]")
            if _elements is not None:
                _elements.set_prop("linkedProperty", AAZStrType, ".linked_property")
                _elements.set_prop("linkedType", AAZStrType, ".linked_type")
                _elements.set_prop("requiredFeatures", AAZListType, ".required_features")

            required_features = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions.deleteDependencies[].requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            nested_provisioning_support = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceManagementOptions.nestedProvisioningSupport")
            if nested_provisioning_support is not None:
                nested_provisioning_support.set_prop("minimumApiVersion", AAZStrType, ".minimum_api_version")

            resource_move_policy = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceMovePolicy")
            if resource_move_policy is not None:
                resource_move_policy.set_prop("crossResourceGroupMoveEnabled", AAZBoolType, ".cross_resource_group_move_enabled")
                resource_move_policy.set_prop("crossSubscriptionMoveEnabled", AAZBoolType, ".cross_subscription_move_enabled")
                resource_move_policy.set_prop("validationRequired", AAZBoolType, ".validation_required")

            resource_query_management = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceQueryManagement")
            if resource_query_management is not None:
                resource_query_management.set_prop("filterOption", AAZStrType, ".filter_option")

            resource_type_common_attribute_management = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.resourceTypeCommonAttributeManagement")
            if resource_type_common_attribute_management is not None:
                resource_type_common_attribute_management.set_prop("commonApiVersionsMergeMode", AAZStrType, ".common_api_versions_merge_mode")

            routing_rule = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.routingRule")
            if routing_rule is not None:
                routing_rule.set_prop("hostResourceType", AAZStrType, ".host_resource_type")

            service_tree_infos = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.serviceTreeInfos")
            if service_tree_infos is not None:
                _CreateHelper._build_schema_service_tree_info_create(service_tree_infos.set_elements(AAZObjectType, "."))

            subscription_lifecycle_notification_specifications = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.subscriptionLifecycleNotificationSpecifications")
            if subscription_lifecycle_notification_specifications is not None:
                subscription_lifecycle_notification_specifications.set_prop("softDeleteTTL", AAZStrType, ".soft_delete_ttl")
                subscription_lifecycle_notification_specifications.set_prop("subscriptionStateOverrideActions", AAZListType, ".subscription_state_override_actions")

            subscription_state_override_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.subscriptionLifecycleNotificationSpecifications.subscriptionStateOverrideActions")
            if subscription_state_override_actions is not None:
                _CreateHelper._build_schema_subscription_state_override_action_create(subscription_state_override_actions.set_elements(AAZObjectType, "."))

            subscription_state_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.subscriptionStateRules")
            if subscription_state_rules is not None:
                subscription_state_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.subscriptionStateRules[]")
            if _elements is not None:
                _elements.set_prop("allowedActions", AAZListType, ".allowed_actions")
                _elements.set_prop("state", AAZStrType, ".state")

            allowed_actions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.subscriptionStateRules[].allowedActions")
            if allowed_actions is not None:
                allowed_actions.set_elements(AAZStrType, ".")

            swagger_specifications = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.swaggerSpecifications")
            if swagger_specifications is not None:
                swagger_specifications.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.swaggerSpecifications[]")
            if _elements is not None:
                _elements.set_prop("apiVersions", AAZListType, ".api_versions")
                _elements.set_prop("swaggerSpecFolderUri", AAZStrType, ".swagger_spec_folder_uri")

            api_versions = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.swaggerSpecifications[].apiVersions")
            if api_versions is not None:
                api_versions.set_elements(AAZStrType, ".")

            template_deployment_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.templateDeploymentOptions")
            if template_deployment_options is not None:
                template_deployment_options.set_prop("preflightOptions", AAZListType, ".preflight_options")
                template_deployment_options.set_prop("preflightSupported", AAZBoolType, ".preflight_supported")

            preflight_options = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.templateDeploymentOptions.preflightOptions")
            if preflight_options is not None:
                preflight_options.set_elements(AAZStrType, ".")

            template_deployment_policy = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.templateDeploymentPolicy")
            if template_deployment_policy is not None:
                template_deployment_policy.set_prop("capabilities", AAZStrType, ".capabilities", typ_kwargs={"flags": {"required": True}})
                template_deployment_policy.set_prop("preflightNotifications", AAZStrType, ".preflight_notifications")
                template_deployment_policy.set_prop("preflightOptions", AAZStrType, ".preflight_options", typ_kwargs={"flags": {"required": True}})

            throttling_rules = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules")
            if throttling_rules is not None:
                throttling_rules.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules[]")
            if _elements is not None:
                _elements.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("applicationId", AAZListType, ".application_id")
                _elements.set_prop("metrics", AAZListType, ".metrics", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("requiredFeatures", AAZListType, ".required_features")

            application_id = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules[].applicationId")
            if application_id is not None:
                application_id.set_elements(AAZStrType, ".")

            metrics = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules[].metrics")
            if metrics is not None:
                metrics.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules[].metrics[]")
            if _elements is not None:
                _elements.set_prop("interval", AAZStrType, ".interval")
                _elements.set_prop("limit", AAZIntType, ".limit", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            required_features = _builder.get(".properties.specification.resourceTypeRegistrations[].properties.throttlingRules[].requiredFeatures")
            if required_features is not None:
                required_features.set_elements(AAZStrType, ".")

            status = _builder.get(".properties.status")
            if status is not None:
                status.set_prop("completedRegions", AAZListType, ".completed_regions")
                status.set_prop("failedOrSkippedRegions", AAZDictType, ".failed_or_skipped_regions")
                status.set_prop("manifestCheckinStatus", AAZObjectType, ".manifest_checkin_status")

            completed_regions = _builder.get(".properties.status.completedRegions")
            if completed_regions is not None:
                completed_regions.set_elements(AAZStrType, ".")

            failed_or_skipped_regions = _builder.get(".properties.status.failedOrSkippedRegions")
            if failed_or_skipped_regions is not None:
                _CreateHelper._build_schema_extended_error_info_create(failed_or_skipped_regions.set_elements(AAZObjectType, "."))

            manifest_checkin_status = _builder.get(".properties.status.manifestCheckinStatus")
            if manifest_checkin_status is not None:
                manifest_checkin_status.set_prop("commitId", AAZStrType, ".commit_id")
                manifest_checkin_status.set_prop("isCheckedIn", AAZBoolType, ".is_checked_in", typ_kwargs={"flags": {"required": True}})
                manifest_checkin_status.set_prop("pullRequest", AAZStrType, ".pull_request")
                manifest_checkin_status.set_prop("statusMessage", AAZStrType, ".status_message", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_system_data_read(_schema_on_200_201.system_data)
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.specification = AAZObjectType(
                flags={"required": True},
            )
            properties.status = AAZObjectType()

            specification = cls._schema_on_200_201.properties.specification
            specification.auto_provision_config = AAZObjectType(
                serialized_name="autoProvisionConfig",
            )
            specification.canary = AAZObjectType()
            specification.manifest_checkin_specification = AAZObjectType(
                serialized_name="manifestCheckinSpecification",
            )
            specification.provider_registration = AAZObjectType(
                serialized_name="providerRegistration",
            )
            specification.refresh_subscription_registration = AAZBoolType(
                serialized_name="refreshSubscriptionRegistration",
            )
            specification.release_scopes = AAZListType(
                serialized_name="releaseScopes",
            )
            specification.resource_type_registrations = AAZListType(
                serialized_name="resourceTypeRegistrations",
            )
            specification.skip_release_scope_validation = AAZBoolType(
                serialized_name="skipReleaseScopeValidation",
            )

            auto_provision_config = cls._schema_on_200_201.properties.specification.auto_provision_config
            auto_provision_config.resource_graph = AAZBoolType(
                serialized_name="resourceGraph",
            )
            auto_provision_config.storage = AAZBoolType()

            canary = cls._schema_on_200_201.properties.specification.canary
            canary.regions = AAZListType()

            regions = cls._schema_on_200_201.properties.specification.canary.regions
            regions.Element = AAZStrType()

            manifest_checkin_specification = cls._schema_on_200_201.properties.specification.manifest_checkin_specification
            manifest_checkin_specification.manifest_checkin_option = AAZStrType(
                serialized_name="manifestCheckinOption",
            )
            manifest_checkin_specification.manifest_checkin_params = AAZObjectType(
                serialized_name="manifestCheckinParams",
            )

            manifest_checkin_params = cls._schema_on_200_201.properties.specification.manifest_checkin_specification.manifest_checkin_params
            manifest_checkin_params.baseline_arm_manifest_location = AAZStrType(
                serialized_name="baselineArmManifestLocation",
                flags={"required": True},
            )
            manifest_checkin_params.environment = AAZStrType(
                flags={"required": True},
            )

            provider_registration = cls._schema_on_200_201.properties.specification.provider_registration
            provider_registration.id = AAZStrType(
                flags={"read_only": True},
            )
            provider_registration.kind = AAZStrType()
            provider_registration.name = AAZStrType(
                flags={"read_only": True},
            )
            provider_registration.properties = AAZObjectType()
            provider_registration.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_system_data_read(provider_registration.system_data)
            provider_registration.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.specification.provider_registration.properties
            properties.capabilities = AAZListType()
            properties.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            properties.custom_manifest_version = AAZStrType(
                serialized_name="customManifestVersion",
            )
            properties.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            properties.enable_tenant_linked_notification = AAZBoolType(
                serialized_name="enableTenantLinkedNotification",
                nullable=True,
            )
            properties.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            properties.global_notification_endpoints = AAZListType(
                serialized_name="globalNotificationEndpoints",
            )
            properties.legacy_namespace = AAZStrType(
                serialized_name="legacyNamespace",
            )
            properties.legacy_registrations = AAZListType(
                serialized_name="legacyRegistrations",
            )
            properties.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            properties.management = AAZObjectType()
            properties.management_group_global_notification_endpoints = AAZListType(
                serialized_name="managementGroupGlobalNotificationEndpoints",
            )
            properties.metadata = AAZFreeFormDictType()
            properties.namespace = AAZStrType()
            properties.notification_options = AAZStrType(
                serialized_name="notificationOptions",
            )
            properties.notification_settings = AAZObjectType(
                serialized_name="notificationSettings",
            )
            properties.notifications = AAZListType()
            _CreateHelper._build_schema_notifications_read(properties.notifications)
            properties.optional_features = AAZListType(
                serialized_name="optionalFeatures",
            )
            properties.private_resource_provider_configuration = AAZObjectType(
                serialized_name="privateResourceProviderConfiguration",
            )
            properties.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            properties.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            properties.provider_hub_metadata = AAZObjectType(
                serialized_name="providerHubMetadata",
            )
            properties.provider_type = AAZStrType(
                serialized_name="providerType",
            )
            properties.provider_version = AAZStrType(
                serialized_name="providerVersion",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            properties.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            properties.resource_group_lock_option_during_move = AAZObjectType(
                serialized_name="resourceGroupLockOptionDuringMove",
            )
            properties.resource_hydration_accounts = AAZListType(
                serialized_name="resourceHydrationAccounts",
            )
            properties.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            _CreateHelper._build_schema_resource_provider_authorization_rules_read(properties.resource_provider_authorization_rules)
            properties.response_options = AAZObjectType(
                serialized_name="responseOptions",
            )
            properties.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            properties.services = AAZListType()
            properties.subscription_lifecycle_notification_specifications = AAZObjectType(
                serialized_name="subscriptionLifecycleNotificationSpecifications",
            )
            properties.template_deployment_options = AAZObjectType(
                serialized_name="templateDeploymentOptions",
            )
            properties.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(properties.token_auth_configuration)

            capabilities = cls._schema_on_200_201.properties.specification.provider_registration.properties.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.capabilities.Element
            _element.effect = AAZStrType(
                flags={"required": True},
            )
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            required_features = cls._schema_on_200_201.properties.specification.provider_registration.properties.capabilities.Element.required_features
            required_features.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.specification.provider_registration.properties.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            features_rule = cls._schema_on_200_201.properties.specification.provider_registration.properties.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            global_notification_endpoints = cls._schema_on_200_201.properties.specification.provider_registration.properties.global_notification_endpoints
            global_notification_endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(global_notification_endpoints.Element)

            legacy_registrations = cls._schema_on_200_201.properties.specification.provider_registration.properties.legacy_registrations
            legacy_registrations.Element = AAZStrType()

            linked_notification_rules = cls._schema_on_200_201.properties.specification.provider_registration.properties.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            _element.endpoints = AAZListType()
            _element.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(_element.token_auth_configuration)

            actions = cls._schema_on_200_201.properties.specification.provider_registration.properties.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.specification.provider_registration.properties.linked_notification_rules.Element.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200_201.properties.specification.provider_registration.properties.linked_notification_rules.Element.endpoints
            endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(endpoints.Element)

            management = cls._schema_on_200_201.properties.specification.provider_registration.properties.management
            management.authorization_owners = AAZListType(
                serialized_name="authorizationOwners",
            )
            management.canary_manifest_owners = AAZListType(
                serialized_name="canaryManifestOwners",
            )
            management.error_response_message_options = AAZObjectType(
                serialized_name="errorResponseMessageOptions",
            )
            management.expedited_rollout_metadata = AAZObjectType(
                serialized_name="expeditedRolloutMetadata",
            )
            management.expedited_rollout_submitters = AAZListType(
                serialized_name="expeditedRolloutSubmitters",
            )
            management.incident_contact_email = AAZStrType(
                serialized_name="incidentContactEmail",
            )
            management.incident_routing_service = AAZStrType(
                serialized_name="incidentRoutingService",
            )
            management.incident_routing_team = AAZStrType(
                serialized_name="incidentRoutingTeam",
            )
            management.manifest_owners = AAZListType(
                serialized_name="manifestOwners",
            )
            management.pc_code = AAZStrType(
                serialized_name="pcCode",
            )
            management.profit_center_program_id = AAZStrType(
                serialized_name="profitCenterProgramId",
            )
            management.resource_access_policy = AAZStrType(
                serialized_name="resourceAccessPolicy",
            )
            management.resource_access_roles = AAZListType(
                serialized_name="resourceAccessRoles",
            )
            management.schema_owners = AAZListType(
                serialized_name="schemaOwners",
            )
            management.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )

            authorization_owners = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.authorization_owners
            authorization_owners.Element = AAZStrType()

            canary_manifest_owners = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.canary_manifest_owners
            canary_manifest_owners.Element = AAZStrType()

            error_response_message_options = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.error_response_message_options
            error_response_message_options.server_failure_response_message_type = AAZStrType(
                serialized_name="serverFailureResponseMessageType",
            )

            expedited_rollout_metadata = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.expedited_rollout_metadata
            expedited_rollout_metadata.enabled = AAZBoolType()
            expedited_rollout_metadata.expedited_rollout_intent = AAZStrType(
                serialized_name="expeditedRolloutIntent",
            )

            expedited_rollout_submitters = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.expedited_rollout_submitters
            expedited_rollout_submitters.Element = AAZStrType()

            manifest_owners = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.manifest_owners
            manifest_owners.Element = AAZStrType()

            resource_access_roles = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.resource_access_roles
            resource_access_roles.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_access_role_read(resource_access_roles.Element)

            schema_owners = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.schema_owners
            schema_owners.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200_201.properties.specification.provider_registration.properties.management.service_tree_infos
            service_tree_infos.Element = AAZObjectType()
            _CreateHelper._build_schema_service_tree_info_read(service_tree_infos.Element)

            management_group_global_notification_endpoints = cls._schema_on_200_201.properties.specification.provider_registration.properties.management_group_global_notification_endpoints
            management_group_global_notification_endpoints.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_endpoint_read(management_group_global_notification_endpoints.Element)

            notification_settings = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings
            notification_settings.subscriber_settings = AAZListType(
                serialized_name="subscriberSettings",
            )

            subscriber_settings = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings
            subscriber_settings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings.Element
            _element.filter_rules = AAZListType(
                serialized_name="filterRules",
            )

            filter_rules = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings.Element.filter_rules
            filter_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings.Element.filter_rules.Element
            _element.endpoint_information = AAZListType(
                serialized_name="endpointInformation",
            )
            _element.filter_query = AAZStrType(
                serialized_name="filterQuery",
            )

            endpoint_information = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information
            endpoint_information.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.notification_settings.subscriber_settings.Element.filter_rules.Element.endpoint_information.Element
            _element.endpoint = AAZStrType()
            _element.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            _element.schema_version = AAZStrType(
                serialized_name="schemaVersion",
            )

            optional_features = cls._schema_on_200_201.properties.specification.provider_registration.properties.optional_features
            optional_features.Element = AAZStrType()

            private_resource_provider_configuration = cls._schema_on_200_201.properties.specification.provider_registration.properties.private_resource_provider_configuration
            private_resource_provider_configuration.allowed_subscriptions = AAZListType(
                serialized_name="allowedSubscriptions",
            )

            allowed_subscriptions = cls._schema_on_200_201.properties.specification.provider_registration.properties.private_resource_provider_configuration.allowed_subscriptions
            allowed_subscriptions.Element = AAZStrType()

            provider_authentication = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            provider_hub_metadata = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata
            provider_hub_metadata.direct_rp_role_definition_id = AAZStrType(
                serialized_name="directRpRoleDefinitionId",
            )
            provider_hub_metadata.global_async_operation_resource_type_name = AAZStrType(
                serialized_name="globalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            provider_hub_metadata.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            provider_hub_metadata.regional_async_operation_resource_type_name = AAZStrType(
                serialized_name="regionalAsyncOperationResourceTypeName",
            )
            provider_hub_metadata.third_party_provider_authorization = AAZObjectType(
                serialized_name="thirdPartyProviderAuthorization",
            )

            provider_authentication = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.provider_authorizations
            provider_authorizations.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_provider_authorization_read(provider_authorizations.Element)

            third_party_provider_authorization = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.third_party_provider_authorization
            third_party_provider_authorization.authorizations = AAZListType()
            third_party_provider_authorization.managed_by_tenant_id = AAZStrType(
                serialized_name="managedByTenantId",
            )

            authorizations = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.third_party_provider_authorization.authorizations
            authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.provider_hub_metadata.third_party_provider_authorization.authorizations.Element
            _element.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"required": True},
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
                flags={"required": True},
            )

            request_header_options = cls._schema_on_200_201.properties.specification.provider_registration.properties.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200_201.properties.specification.provider_registration.properties.required_features
            required_features.Element = AAZStrType()

            resource_group_lock_option_during_move = cls._schema_on_200_201.properties.specification.provider_registration.properties.resource_group_lock_option_during_move
            resource_group_lock_option_during_move.block_action_verb = AAZStrType(
                serialized_name="blockActionVerb",
            )

            resource_hydration_accounts = cls._schema_on_200_201.properties.specification.provider_registration.properties.resource_hydration_accounts
            resource_hydration_accounts.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.resource_hydration_accounts.Element
            _element.account_name = AAZStrType(
                serialized_name="accountName",
            )
            _element.encrypted_key = AAZStrType(
                serialized_name="encryptedKey",
            )
            _element.max_child_resource_consistency_job_limit = AAZIntType(
                serialized_name="maxChildResourceConsistencyJobLimit",
            )
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
            )

            response_options = cls._schema_on_200_201.properties.specification.provider_registration.properties.response_options
            response_options.service_client_options_type = AAZStrType(
                serialized_name="serviceClientOptionsType",
            )

            services = cls._schema_on_200_201.properties.specification.provider_registration.properties.services
            services.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.provider_registration.properties.services.Element
            _element.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            _element.status = AAZStrType()

            subscription_lifecycle_notification_specifications = cls._schema_on_200_201.properties.specification.provider_registration.properties.subscription_lifecycle_notification_specifications
            subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZStrType(
                serialized_name="softDeleteTTL",
            )
            subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListType(
                serialized_name="subscriptionStateOverrideActions",
            )

            subscription_state_override_actions = cls._schema_on_200_201.properties.specification.provider_registration.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions
            subscription_state_override_actions.Element = AAZObjectType()
            _CreateHelper._build_schema_subscription_state_override_action_read(subscription_state_override_actions.Element)

            template_deployment_options = cls._schema_on_200_201.properties.specification.provider_registration.properties.template_deployment_options
            template_deployment_options.preflight_options = AAZListType(
                serialized_name="preflightOptions",
            )
            template_deployment_options.preflight_supported = AAZBoolType(
                serialized_name="preflightSupported",
            )

            preflight_options = cls._schema_on_200_201.properties.specification.provider_registration.properties.template_deployment_options.preflight_options
            preflight_options.Element = AAZStrType()

            release_scopes = cls._schema_on_200_201.properties.specification.release_scopes
            release_scopes.Element = AAZStrType()

            resource_type_registrations = cls._schema_on_200_201.properties.specification.resource_type_registrations
            resource_type_registrations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.kind = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _CreateHelper._build_schema_system_data_read(_element.system_data)
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties
            properties.add_resource_list_target_locations = AAZBoolType(
                serialized_name="addResourceListTargetLocations",
            )
            properties.additional_options = AAZStrType(
                serialized_name="additionalOptions",
            )
            properties.allow_empty_role_assignments = AAZBoolType(
                serialized_name="allowEmptyRoleAssignments",
            )
            properties.allowed_resource_names = AAZListType(
                serialized_name="allowedResourceNames",
            )
            properties.allowed_template_deployment_reference_actions = AAZListType(
                serialized_name="allowedTemplateDeploymentReferenceActions",
            )
            properties.allowed_unauthorized_actions = AAZListType(
                serialized_name="allowedUnauthorizedActions",
            )
            properties.api_profiles = AAZListType(
                serialized_name="apiProfiles",
            )
            properties.async_operation_resource_type_name = AAZStrType(
                serialized_name="asyncOperationResourceTypeName",
            )
            properties.async_timeout_rules = AAZListType(
                serialized_name="asyncTimeoutRules",
            )
            properties.authorization_action_mappings = AAZListType(
                serialized_name="authorizationActionMappings",
            )
            properties.availability_zone_rule = AAZObjectType(
                serialized_name="availabilityZoneRule",
            )
            properties.capacity_rule = AAZObjectType(
                serialized_name="capacityRule",
            )
            properties.category = AAZStrType()
            properties.check_name_availability_specifications = AAZObjectType(
                serialized_name="checkNameAvailabilitySpecifications",
            )
            properties.common_api_versions = AAZListType(
                serialized_name="commonApiVersions",
            )
            properties.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            properties.default_api_version = AAZStrType(
                serialized_name="defaultApiVersion",
            )
            properties.disallowed_action_verbs = AAZListType(
                serialized_name="disallowedActionVerbs",
            )
            properties.disallowed_end_user_operations = AAZListType(
                serialized_name="disallowedEndUserOperations",
            )
            properties.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            properties.enable_async_operation = AAZBoolType(
                serialized_name="enableAsyncOperation",
            )
            properties.enable_third_party_s2_s = AAZBoolType(
                serialized_name="enableThirdPartyS2S",
            )
            properties.endpoints = AAZListType()
            properties.extended_locations = AAZListType(
                serialized_name="extendedLocations",
            )
            properties.extension_options = AAZObjectType(
                serialized_name="extensionOptions",
            )
            properties.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            properties.frontdoor_request_mode = AAZStrType(
                serialized_name="frontdoorRequestMode",
            )
            properties.grouping_tag = AAZStrType(
                serialized_name="groupingTag",
            )
            properties.identity_management = AAZObjectType(
                serialized_name="identityManagement",
            )
            properties.is_pure_proxy = AAZBoolType(
                serialized_name="isPureProxy",
            )
            properties.legacy_name = AAZStrType(
                serialized_name="legacyName",
            )
            properties.legacy_names = AAZListType(
                serialized_name="legacyNames",
            )
            properties.legacy_policy = AAZObjectType(
                serialized_name="legacyPolicy",
            )
            properties.linked_access_checks = AAZListType(
                serialized_name="linkedAccessChecks",
            )
            properties.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            properties.linked_operation_rules = AAZListType(
                serialized_name="linkedOperationRules",
            )
            properties.logging_rules = AAZListType(
                serialized_name="loggingRules",
            )
            properties.managed_resource_group_configuration = AAZObjectType(
                serialized_name="managedResourceGroupConfiguration",
            )
            properties.management = AAZObjectType()
            properties.manifest_link = AAZStrType(
                serialized_name="manifestLink",
            )
            properties.marketplace_options = AAZObjectType(
                serialized_name="marketplaceOptions",
            )
            properties.marketplace_type = AAZStrType(
                serialized_name="marketplaceType",
            )
            properties.metadata = AAZDictType()
            properties.notifications = AAZListType()
            _CreateHelper._build_schema_notifications_read(properties.notifications)
            properties.on_behalf_of_tokens = AAZObjectType(
                serialized_name="onBehalfOfTokens",
            )
            properties.open_api_configuration = AAZObjectType(
                serialized_name="openApiConfiguration",
            )
            properties.policy_execution_type = AAZStrType(
                serialized_name="policyExecutionType",
            )
            properties.private_endpoint_configuration = AAZObjectType(
                serialized_name="privateEndpointConfiguration",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.quota_rule = AAZObjectType(
                serialized_name="quotaRule",
            )
            properties.regionality = AAZStrType()
            properties.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            properties.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            properties.resource_cache = AAZObjectType(
                serialized_name="resourceCache",
            )
            properties.resource_concurrency_control_options = AAZDictType(
                serialized_name="resourceConcurrencyControlOptions",
            )
            properties.resource_deletion_policy = AAZStrType(
                serialized_name="resourceDeletionPolicy",
            )
            properties.resource_graph_configuration = AAZObjectType(
                serialized_name="resourceGraphConfiguration",
            )
            properties.resource_management_options = AAZObjectType(
                serialized_name="resourceManagementOptions",
            )
            properties.resource_move_policy = AAZObjectType(
                serialized_name="resourceMovePolicy",
            )
            properties.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            _CreateHelper._build_schema_resource_provider_authorization_rules_read(properties.resource_provider_authorization_rules)
            properties.resource_query_management = AAZObjectType(
                serialized_name="resourceQueryManagement",
            )
            properties.resource_sub_type = AAZStrType(
                serialized_name="resourceSubType",
            )
            properties.resource_type_common_attribute_management = AAZObjectType(
                serialized_name="resourceTypeCommonAttributeManagement",
            )
            properties.resource_validation = AAZStrType(
                serialized_name="resourceValidation",
            )
            properties.routing_rule = AAZObjectType(
                serialized_name="routingRule",
            )
            properties.routing_type = AAZStrType(
                serialized_name="routingType",
            )
            properties.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )
            properties.sku_link = AAZStrType(
                serialized_name="skuLink",
            )
            properties.subscription_lifecycle_notification_specifications = AAZObjectType(
                serialized_name="subscriptionLifecycleNotificationSpecifications",
            )
            properties.subscription_state_rules = AAZListType(
                serialized_name="subscriptionStateRules",
            )
            properties.supports_tags = AAZBoolType(
                serialized_name="supportsTags",
            )
            properties.swagger_specifications = AAZListType(
                serialized_name="swaggerSpecifications",
            )
            properties.template_deployment_options = AAZObjectType(
                serialized_name="templateDeploymentOptions",
            )
            properties.template_deployment_policy = AAZObjectType(
                serialized_name="templateDeploymentPolicy",
            )
            properties.throttling_rules = AAZListType(
                serialized_name="throttlingRules",
            )
            properties.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(properties.token_auth_configuration)

            allowed_resource_names = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.allowed_resource_names
            allowed_resource_names.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.allowed_resource_names.Element
            _element.get_action_verb = AAZStrType(
                serialized_name="getActionVerb",
            )
            _element.name = AAZStrType()

            allowed_template_deployment_reference_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.allowed_template_deployment_reference_actions
            allowed_template_deployment_reference_actions.Element = AAZStrType()

            allowed_unauthorized_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.allowed_unauthorized_actions
            allowed_unauthorized_actions.Element = AAZStrType()

            api_profiles = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.api_profiles
            api_profiles.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.api_profiles.Element
            _element.api_version = AAZStrType(
                serialized_name="apiVersion",
            )
            _element.profile_version = AAZStrType(
                serialized_name="profileVersion",
            )

            async_timeout_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.async_timeout_rules
            async_timeout_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.async_timeout_rules.Element
            _element.action_name = AAZStrType(
                serialized_name="actionName",
            )
            _element.timeout = AAZStrType()

            authorization_action_mappings = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.authorization_action_mappings
            authorization_action_mappings.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.authorization_action_mappings.Element
            _element.desired = AAZStrType()
            _element.original = AAZStrType()

            availability_zone_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.availability_zone_rule
            availability_zone_rule.availability_zone_policy = AAZStrType(
                serialized_name="availabilityZonePolicy",
            )

            capacity_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.capacity_rule
            capacity_rule.capacity_policy = AAZStrType(
                serialized_name="capacityPolicy",
            )
            capacity_rule.sku_alias = AAZStrType(
                serialized_name="skuAlias",
            )

            check_name_availability_specifications = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.check_name_availability_specifications
            check_name_availability_specifications.enable_default_validation = AAZBoolType(
                serialized_name="enableDefaultValidation",
            )
            check_name_availability_specifications.resource_types_with_custom_validation = AAZListType(
                serialized_name="resourceTypesWithCustomValidation",
            )

            resource_types_with_custom_validation = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.check_name_availability_specifications.resource_types_with_custom_validation
            resource_types_with_custom_validation.Element = AAZStrType()

            common_api_versions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.common_api_versions
            common_api_versions.Element = AAZStrType()

            disallowed_action_verbs = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.disallowed_action_verbs
            disallowed_action_verbs.Element = AAZStrType()

            disallowed_end_user_operations = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.disallowed_end_user_operations
            disallowed_end_user_operations.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints
            endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element
            _element.api_version = AAZStrType(
                serialized_name="apiVersion",
            )
            _element.api_versions = AAZListType(
                serialized_name="apiVersions",
            )
            _element.data_boundary = AAZStrType(
                serialized_name="dataBoundary",
            )
            _element.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            _element.enabled = AAZBoolType()
            _element.endpoint_type = AAZStrType(
                serialized_name="endpointType",
            )
            _element.endpoint_uri = AAZStrType(
                serialized_name="endpointUri",
            )
            _element.extensions = AAZListType()
            _element.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            _element.kind = AAZStrType()
            _element.locations = AAZListType()
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            _element.sku_link = AAZStrType(
                serialized_name="skuLink",
            )
            _element.timeout = AAZStrType()
            _element.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )
            _CreateHelper._build_schema_token_auth_configuration_read(_element.token_auth_configuration)
            _element.zones = AAZListType()

            api_versions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.api_versions
            api_versions.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            extensions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.extensions
            extensions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.extensions.Element
            _element.endpoint_uri = AAZStrType(
                serialized_name="endpointUri",
            )
            _element.extension_categories = AAZListType(
                serialized_name="extensionCategories",
            )
            _element.timeout = AAZStrType()

            extension_categories = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.extensions.Element.extension_categories
            extension_categories.Element = AAZStrType()

            features_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            locations = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.locations
            locations.Element = AAZStrType()

            required_features = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.required_features
            required_features.Element = AAZStrType()

            zones = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.endpoints.Element.zones
            zones.Element = AAZStrType()

            extended_locations = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extended_locations
            extended_locations.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extended_locations.Element
            _element.supported_policy = AAZStrType(
                serialized_name="supportedPolicy",
            )
            _element.type = AAZStrType()

            extension_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extension_options
            extension_options.resource_creation_begin = AAZObjectType(
                serialized_name="resourceCreationBegin",
            )

            resource_creation_begin = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extension_options.resource_creation_begin
            resource_creation_begin.request = AAZListType()
            resource_creation_begin.response = AAZListType()

            request = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extension_options.resource_creation_begin.request
            request.Element = AAZStrType()

            response = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.extension_options.resource_creation_begin.response
            response.Element = AAZStrType()

            features_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            identity_management = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.identity_management
            identity_management.application_id = AAZStrType(
                serialized_name="applicationId",
            )
            identity_management.application_ids = AAZListType(
                serialized_name="applicationIds",
            )
            identity_management.delegation_app_ids = AAZListType(
                serialized_name="delegationAppIds",
            )
            identity_management.type = AAZStrType()

            application_ids = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.identity_management.application_ids
            application_ids.Element = AAZStrType()

            delegation_app_ids = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.identity_management.delegation_app_ids
            delegation_app_ids.Element = AAZStrType()

            legacy_names = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_names
            legacy_names.Element = AAZStrType()

            legacy_policy = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_policy
            legacy_policy.disallowed_conditions = AAZListType(
                serialized_name="disallowedConditions",
            )
            legacy_policy.disallowed_legacy_operations = AAZListType(
                serialized_name="disallowedLegacyOperations",
            )

            disallowed_conditions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_policy.disallowed_conditions
            disallowed_conditions.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_policy.disallowed_conditions.Element
            _element.disallowed_legacy_operations = AAZListType(
                serialized_name="disallowedLegacyOperations",
            )
            _element.feature = AAZStrType()

            disallowed_legacy_operations = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_policy.disallowed_conditions.Element.disallowed_legacy_operations
            disallowed_legacy_operations.Element = AAZStrType()

            disallowed_legacy_operations = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.legacy_policy.disallowed_legacy_operations
            disallowed_legacy_operations.Element = AAZStrType()

            linked_access_checks = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_access_checks
            linked_access_checks.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_access_checks.Element
            _element.action_name = AAZStrType(
                serialized_name="actionName",
            )
            _element.linked_action = AAZStrType(
                serialized_name="linkedAction",
            )
            _element.linked_action_verb = AAZStrType(
                serialized_name="linkedActionVerb",
            )
            _element.linked_property = AAZStrType(
                serialized_name="linkedProperty",
            )
            _element.linked_type = AAZStrType(
                serialized_name="linkedType",
            )

            linked_notification_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.actions_on_failed_operation = AAZListType(
                serialized_name="actionsOnFailedOperation",
            )
            _element.fast_path_actions = AAZListType(
                serialized_name="fastPathActions",
            )
            _element.fast_path_actions_on_failed_operation = AAZListType(
                serialized_name="fastPathActionsOnFailedOperation",
            )
            _element.linked_notification_timeout = AAZStrType(
                serialized_name="linkedNotificationTimeout",
            )

            actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            actions_on_failed_operation = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules.Element.actions_on_failed_operation
            actions_on_failed_operation.Element = AAZStrType()

            fast_path_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules.Element.fast_path_actions
            fast_path_actions.Element = AAZStrType()

            fast_path_actions_on_failed_operation = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_notification_rules.Element.fast_path_actions_on_failed_operation
            fast_path_actions_on_failed_operation.Element = AAZStrType()

            linked_operation_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_operation_rules
            linked_operation_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_operation_rules.Element
            _element.depends_on_types = AAZListType(
                serialized_name="dependsOnTypes",
            )
            _element.linked_action = AAZStrType(
                serialized_name="linkedAction",
                flags={"required": True},
            )
            _element.linked_operation = AAZStrType(
                serialized_name="linkedOperation",
                flags={"required": True},
            )

            depends_on_types = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.linked_operation_rules.Element.depends_on_types
            depends_on_types.Element = AAZStrType()

            logging_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.logging_rules
            logging_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.logging_rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.detail_level = AAZStrType(
                serialized_name="detailLevel",
                flags={"required": True},
            )
            _element.direction = AAZStrType(
                flags={"required": True},
            )
            _element.hidden_property_paths = AAZObjectType(
                serialized_name="hiddenPropertyPaths",
            )

            hidden_property_paths = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.logging_rules.Element.hidden_property_paths
            hidden_property_paths.hidden_paths_on_request = AAZListType(
                serialized_name="hiddenPathsOnRequest",
            )
            hidden_property_paths.hidden_paths_on_response = AAZListType(
                serialized_name="hiddenPathsOnResponse",
            )

            hidden_paths_on_request = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.logging_rules.Element.hidden_property_paths.hidden_paths_on_request
            hidden_paths_on_request.Element = AAZStrType()

            hidden_paths_on_response = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.logging_rules.Element.hidden_property_paths.hidden_paths_on_response
            hidden_paths_on_response.Element = AAZStrType()

            managed_resource_group_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.managed_resource_group_configuration
            managed_resource_group_configuration.application_ids = AAZListType(
                serialized_name="applicationIds",
            )
            managed_resource_group_configuration.deny_assignment_configuration = AAZObjectType(
                serialized_name="denyAssignmentConfiguration",
            )
            managed_resource_group_configuration.enabled = AAZBoolType()
            managed_resource_group_configuration.resource_group_location_override = AAZStrType(
                serialized_name="resourceGroupLocationOverride",
            )

            application_ids = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.managed_resource_group_configuration.application_ids
            application_ids.Element = AAZStrType()

            deny_assignment_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.managed_resource_group_configuration.deny_assignment_configuration
            deny_assignment_configuration.enabled = AAZBoolType()
            deny_assignment_configuration.not_actions = AAZListType(
                serialized_name="notActions",
            )

            not_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.managed_resource_group_configuration.deny_assignment_configuration.not_actions
            not_actions.Element = AAZStrType()

            management = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management
            management.authorization_owners = AAZListType(
                serialized_name="authorizationOwners",
            )
            management.canary_manifest_owners = AAZListType(
                serialized_name="canaryManifestOwners",
            )
            management.error_response_message_options = AAZObjectType(
                serialized_name="errorResponseMessageOptions",
            )
            management.expedited_rollout_metadata = AAZObjectType(
                serialized_name="expeditedRolloutMetadata",
            )
            management.expedited_rollout_submitters = AAZListType(
                serialized_name="expeditedRolloutSubmitters",
            )
            management.incident_contact_email = AAZStrType(
                serialized_name="incidentContactEmail",
            )
            management.incident_routing_service = AAZStrType(
                serialized_name="incidentRoutingService",
            )
            management.incident_routing_team = AAZStrType(
                serialized_name="incidentRoutingTeam",
            )
            management.manifest_owners = AAZListType(
                serialized_name="manifestOwners",
            )
            management.pc_code = AAZStrType(
                serialized_name="pcCode",
            )
            management.profit_center_program_id = AAZStrType(
                serialized_name="profitCenterProgramId",
            )
            management.resource_access_policy = AAZStrType(
                serialized_name="resourceAccessPolicy",
            )
            management.resource_access_roles = AAZListType(
                serialized_name="resourceAccessRoles",
            )
            management.schema_owners = AAZListType(
                serialized_name="schemaOwners",
            )
            management.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )

            authorization_owners = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.authorization_owners
            authorization_owners.Element = AAZStrType()

            canary_manifest_owners = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.canary_manifest_owners
            canary_manifest_owners.Element = AAZStrType()

            error_response_message_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.error_response_message_options
            error_response_message_options.server_failure_response_message_type = AAZStrType(
                serialized_name="serverFailureResponseMessageType",
            )

            expedited_rollout_metadata = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.expedited_rollout_metadata
            expedited_rollout_metadata.enabled = AAZBoolType()
            expedited_rollout_metadata.expedited_rollout_intent = AAZStrType(
                serialized_name="expeditedRolloutIntent",
            )

            expedited_rollout_submitters = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.expedited_rollout_submitters
            expedited_rollout_submitters.Element = AAZStrType()

            manifest_owners = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.manifest_owners
            manifest_owners.Element = AAZStrType()

            resource_access_roles = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.resource_access_roles
            resource_access_roles.Element = AAZObjectType()
            _CreateHelper._build_schema_resource_access_role_read(resource_access_roles.Element)

            schema_owners = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.schema_owners
            schema_owners.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.management.service_tree_infos
            service_tree_infos.Element = AAZObjectType()
            _CreateHelper._build_schema_service_tree_info_read(service_tree_infos.Element)

            marketplace_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.marketplace_options
            marketplace_options.add_on_plan_conversion_allowed = AAZBoolType(
                serialized_name="addOnPlanConversionAllowed",
            )

            metadata = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.metadata
            metadata.Element = AAZFreeFormDictType()

            on_behalf_of_tokens = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.on_behalf_of_tokens
            on_behalf_of_tokens.action_name = AAZStrType(
                serialized_name="actionName",
            )
            on_behalf_of_tokens.life_time = AAZStrType(
                serialized_name="lifeTime",
            )

            open_api_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.open_api_configuration
            open_api_configuration.validation = AAZObjectType()

            validation = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.open_api_configuration.validation
            validation.allow_noncompliant_collection_response = AAZBoolType(
                serialized_name="allowNoncompliantCollectionResponse",
            )

            private_endpoint_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.private_endpoint_configuration
            private_endpoint_configuration.group_connectivity_information = AAZListType(
                serialized_name="groupConnectivityInformation",
                flags={"required": True},
            )
            private_endpoint_configuration.min_api_version = AAZStrType(
                serialized_name="minApiVersion",
                flags={"required": True},
            )

            group_connectivity_information = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.private_endpoint_configuration.group_connectivity_information
            group_connectivity_information.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.private_endpoint_configuration.group_connectivity_information.Element
            _element.group_id = AAZStrType(
                serialized_name="groupId",
                flags={"required": True},
            )
            _element.redirect_map_id = AAZStrType(
                serialized_name="redirectMapId",
            )
            _element.required_members = AAZListType(
                serialized_name="requiredMembers",
                flags={"required": True},
            )
            _element.required_zone_names = AAZListType(
                serialized_name="requiredZoneNames",
                flags={"required": True},
            )

            required_members = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.private_endpoint_configuration.group_connectivity_information.Element.required_members
            required_members.Element = AAZStrType()

            required_zone_names = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.private_endpoint_configuration.group_connectivity_information.Element.required_zone_names
            required_zone_names.Element = AAZStrType()

            quota_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.quota_rule
            quota_rule.location_rules = AAZListType(
                serialized_name="locationRules",
            )
            quota_rule.quota_policy = AAZStrType(
                serialized_name="quotaPolicy",
            )
            quota_rule.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            location_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.quota_rule.location_rules
            location_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.quota_rule.location_rules.Element
            _element.location = AAZStrType()
            _element.policy = AAZStrType()
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
            )

            required_features = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.quota_rule.required_features
            required_features.Element = AAZStrType()

            request_header_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.required_features
            required_features.Element = AAZStrType()

            resource_cache = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_cache
            resource_cache.enable_resource_cache = AAZBoolType(
                serialized_name="enableResourceCache",
            )
            resource_cache.resource_cache_expiration_timespan = AAZStrType(
                serialized_name="resourceCacheExpirationTimespan",
            )

            resource_concurrency_control_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_concurrency_control_options
            resource_concurrency_control_options.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_concurrency_control_options.Element
            _element.policy = AAZStrType()

            resource_graph_configuration = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_graph_configuration
            resource_graph_configuration.api_version = AAZStrType(
                serialized_name="apiVersion",
            )
            resource_graph_configuration.enabled = AAZBoolType()

            resource_management_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options
            resource_management_options.batch_provisioning_support = AAZObjectType(
                serialized_name="batchProvisioningSupport",
            )
            resource_management_options.delete_dependencies = AAZListType(
                serialized_name="deleteDependencies",
            )
            resource_management_options.nested_provisioning_support = AAZObjectType(
                serialized_name="nestedProvisioningSupport",
            )

            batch_provisioning_support = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options.batch_provisioning_support
            batch_provisioning_support.supported_operations = AAZStrType(
                serialized_name="supportedOperations",
            )

            delete_dependencies = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options.delete_dependencies
            delete_dependencies.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options.delete_dependencies.Element
            _element.linked_property = AAZStrType(
                serialized_name="linkedProperty",
            )
            _element.linked_type = AAZStrType(
                serialized_name="linkedType",
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            required_features = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options.delete_dependencies.Element.required_features
            required_features.Element = AAZStrType()

            nested_provisioning_support = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_management_options.nested_provisioning_support
            nested_provisioning_support.minimum_api_version = AAZStrType(
                serialized_name="minimumApiVersion",
            )

            resource_move_policy = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_move_policy
            resource_move_policy.cross_resource_group_move_enabled = AAZBoolType(
                serialized_name="crossResourceGroupMoveEnabled",
            )
            resource_move_policy.cross_subscription_move_enabled = AAZBoolType(
                serialized_name="crossSubscriptionMoveEnabled",
            )
            resource_move_policy.validation_required = AAZBoolType(
                serialized_name="validationRequired",
            )

            resource_query_management = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_query_management
            resource_query_management.filter_option = AAZStrType(
                serialized_name="filterOption",
            )

            resource_type_common_attribute_management = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.resource_type_common_attribute_management
            resource_type_common_attribute_management.common_api_versions_merge_mode = AAZStrType(
                serialized_name="commonApiVersionsMergeMode",
            )

            routing_rule = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.routing_rule
            routing_rule.host_resource_type = AAZStrType(
                serialized_name="hostResourceType",
            )

            service_tree_infos = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.service_tree_infos
            service_tree_infos.Element = AAZObjectType()
            _CreateHelper._build_schema_service_tree_info_read(service_tree_infos.Element)

            subscription_lifecycle_notification_specifications = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.subscription_lifecycle_notification_specifications
            subscription_lifecycle_notification_specifications.soft_delete_ttl = AAZStrType(
                serialized_name="softDeleteTTL",
            )
            subscription_lifecycle_notification_specifications.subscription_state_override_actions = AAZListType(
                serialized_name="subscriptionStateOverrideActions",
            )

            subscription_state_override_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.subscription_lifecycle_notification_specifications.subscription_state_override_actions
            subscription_state_override_actions.Element = AAZObjectType()
            _CreateHelper._build_schema_subscription_state_override_action_read(subscription_state_override_actions.Element)

            subscription_state_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.subscription_state_rules
            subscription_state_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.subscription_state_rules.Element
            _element.allowed_actions = AAZListType(
                serialized_name="allowedActions",
            )
            _element.state = AAZStrType()

            allowed_actions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.subscription_state_rules.Element.allowed_actions
            allowed_actions.Element = AAZStrType()

            swagger_specifications = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.swagger_specifications
            swagger_specifications.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.swagger_specifications.Element
            _element.api_versions = AAZListType(
                serialized_name="apiVersions",
            )
            _element.swagger_spec_folder_uri = AAZStrType(
                serialized_name="swaggerSpecFolderUri",
            )

            api_versions = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.swagger_specifications.Element.api_versions
            api_versions.Element = AAZStrType()

            template_deployment_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.template_deployment_options
            template_deployment_options.preflight_options = AAZListType(
                serialized_name="preflightOptions",
            )
            template_deployment_options.preflight_supported = AAZBoolType(
                serialized_name="preflightSupported",
            )

            preflight_options = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.template_deployment_options.preflight_options
            preflight_options.Element = AAZStrType()

            template_deployment_policy = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.template_deployment_policy
            template_deployment_policy.capabilities = AAZStrType(
                flags={"required": True},
            )
            template_deployment_policy.preflight_notifications = AAZStrType(
                serialized_name="preflightNotifications",
            )
            template_deployment_policy.preflight_options = AAZStrType(
                serialized_name="preflightOptions",
                flags={"required": True},
            )

            throttling_rules = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules
            throttling_rules.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.application_id = AAZListType(
                serialized_name="applicationId",
            )
            _element.metrics = AAZListType(
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            application_id = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules.Element.application_id
            application_id.Element = AAZStrType()

            metrics = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules.Element.metrics
            metrics.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules.Element.metrics.Element
            _element.interval = AAZStrType()
            _element.limit = AAZIntType(
                flags={"required": True},
            )
            _element.type = AAZStrType(
                flags={"required": True},
            )

            required_features = cls._schema_on_200_201.properties.specification.resource_type_registrations.Element.properties.throttling_rules.Element.required_features
            required_features.Element = AAZStrType()

            status = cls._schema_on_200_201.properties.status
            status.completed_regions = AAZListType(
                serialized_name="completedRegions",
            )
            status.failed_or_skipped_regions = AAZDictType(
                serialized_name="failedOrSkippedRegions",
            )
            status.manifest_checkin_status = AAZObjectType(
                serialized_name="manifestCheckinStatus",
            )

            completed_regions = cls._schema_on_200_201.properties.status.completed_regions
            completed_regions.Element = AAZStrType()

            failed_or_skipped_regions = cls._schema_on_200_201.properties.status.failed_or_skipped_regions
            failed_or_skipped_regions.Element = AAZObjectType()
            _CreateHelper._build_schema_extended_error_info_read(failed_or_skipped_regions.Element)

            manifest_checkin_status = cls._schema_on_200_201.properties.status.manifest_checkin_status
            manifest_checkin_status.commit_id = AAZStrType(
                serialized_name="commitId",
            )
            manifest_checkin_status.is_checked_in = AAZBoolType(
                serialized_name="isCheckedIn",
                flags={"required": True},
            )
            manifest_checkin_status.pull_request = AAZStrType(
                serialized_name="pullRequest",
            )
            manifest_checkin_status.status_message = AAZStrType(
                serialized_name="statusMessage",
                flags={"required": True},
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_extended_error_info_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("additionalInfo", AAZListType, ".additional_info")
        _builder.set_prop("code", AAZStrType, ".code")
        _builder.set_prop("details", AAZListType, ".details")
        _builder.set_prop("message", AAZStrType, ".message")
        _builder.set_prop("target", AAZStrType, ".target")

        additional_info = _builder.get(".additionalInfo")
        if additional_info is not None:
            additional_info.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".additionalInfo[]")
        if _elements is not None:
            _elements.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

        details = _builder.get(".details")
        if details is not None:
            cls._build_schema_extended_error_info_create(details.set_elements(AAZObjectType, "."))

    @classmethod
    def _build_schema_notifications_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_elements(AAZObjectType, ".")

        _elements = _builder.get("[]")
        if _elements is not None:
            _elements.set_prop("notificationType", AAZStrType, ".notification_type")
            _elements.set_prop("skipNotifications", AAZStrType, ".skip_notifications")

    @classmethod
    def _build_schema_resource_access_role_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("actions", AAZListType, ".actions")
        _builder.set_prop("allowedGroupClaims", AAZListType, ".allowed_group_claims")

        actions = _builder.get(".actions")
        if actions is not None:
            actions.set_elements(AAZStrType, ".")

        allowed_group_claims = _builder.get(".allowedGroupClaims")
        if allowed_group_claims is not None:
            allowed_group_claims.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_resource_provider_authorization_rules_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("asyncOperationPollingRules", AAZObjectType, ".async_operation_polling_rules")

        async_operation_polling_rules = _builder.get(".asyncOperationPollingRules")
        if async_operation_polling_rules is not None:
            async_operation_polling_rules.set_prop("additionalOptions", AAZStrType, ".additional_options")
            async_operation_polling_rules.set_prop("authorizationActions", AAZListType, ".authorization_actions")

        authorization_actions = _builder.get(".asyncOperationPollingRules.authorizationActions")
        if authorization_actions is not None:
            authorization_actions.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_resource_provider_authorization_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("allowedThirdPartyExtensions", AAZListType, ".allowed_third_party_extensions")
        _builder.set_prop("applicationId", AAZStrType, ".application_id")
        _builder.set_prop("groupingTag", AAZStrType, ".grouping_tag")
        _builder.set_prop("managedByAuthorization", AAZObjectType, ".managed_by_authorization")
        _builder.set_prop("managedByRoleDefinitionId", AAZStrType, ".managed_by_role_definition_id")
        _builder.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id")

        allowed_third_party_extensions = _builder.get(".allowedThirdPartyExtensions")
        if allowed_third_party_extensions is not None:
            allowed_third_party_extensions.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".allowedThirdPartyExtensions[]")
        if _elements is not None:
            _elements.set_prop("name", AAZStrType, ".name")

        managed_by_authorization = _builder.get(".managedByAuthorization")
        if managed_by_authorization is not None:
            managed_by_authorization.set_prop("additionalAuthorizations", AAZListType, ".additional_authorizations")
            managed_by_authorization.set_prop("allowManagedByInheritance", AAZBoolType, ".allow_managed_by_inheritance")
            managed_by_authorization.set_prop("managedByResourceRoleDefinitionId", AAZStrType, ".managed_by_resource_role_definition_id")

        additional_authorizations = _builder.get(".managedByAuthorization.additionalAuthorizations")
        if additional_authorizations is not None:
            additional_authorizations.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".managedByAuthorization.additionalAuthorizations[]")
        if _elements is not None:
            _elements.set_prop("applicationId", AAZStrType, ".application_id")
            _elements.set_prop("roleDefinitionId", AAZStrType, ".role_definition_id")

    @classmethod
    def _build_schema_resource_provider_endpoint_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("apiVersions", AAZListType, ".api_versions")
        _builder.set_prop("enabled", AAZBoolType, ".enabled")
        _builder.set_prop("endpointType", AAZStrType, ".endpoint_type")
        _builder.set_prop("endpointUri", AAZStrType, ".endpoint_uri")
        _builder.set_prop("featuresRule", AAZObjectType, ".features_rule")
        _builder.set_prop("locations", AAZListType, ".locations")
        _builder.set_prop("requiredFeatures", AAZListType, ".required_features")
        _builder.set_prop("skuLink", AAZStrType, ".sku_link")
        _builder.set_prop("timeout", AAZStrType, ".timeout")

        api_versions = _builder.get(".apiVersions")
        if api_versions is not None:
            api_versions.set_elements(AAZStrType, ".")

        features_rule = _builder.get(".featuresRule")
        if features_rule is not None:
            features_rule.set_prop("requiredFeaturesPolicy", AAZStrType, ".required_features_policy", typ_kwargs={"flags": {"required": True}})

        locations = _builder.get(".locations")
        if locations is not None:
            locations.set_elements(AAZStrType, ".")

        required_features = _builder.get(".requiredFeatures")
        if required_features is not None:
            required_features.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_service_tree_info_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("componentId", AAZStrType, ".component_id")
        _builder.set_prop("readiness", AAZStrType, ".readiness")
        _builder.set_prop("serviceId", AAZStrType, ".service_id")

    @classmethod
    def _build_schema_subscription_state_override_action_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("state", AAZStrType, ".state", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_token_auth_configuration_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("authenticationScheme", AAZStrType, ".authentication_scheme")
        _builder.set_prop("disableCertificateAuthenticationFallback", AAZBoolType, ".disable_certificate_authentication_fallback")
        _builder.set_prop("signedRequestScope", AAZStrType, ".signed_request_scope")

    _schema_extended_error_info_read = None

    @classmethod
    def _build_schema_extended_error_info_read(cls, _schema):
        if cls._schema_extended_error_info_read is not None:
            _schema.additional_info = cls._schema_extended_error_info_read.additional_info
            _schema.code = cls._schema_extended_error_info_read.code
            _schema.details = cls._schema_extended_error_info_read.details
            _schema.message = cls._schema_extended_error_info_read.message
            _schema.target = cls._schema_extended_error_info_read.target
            return

        cls._schema_extended_error_info_read = _schema_extended_error_info_read = AAZObjectType()

        extended_error_info_read = _schema_extended_error_info_read
        extended_error_info_read.additional_info = AAZListType(
            serialized_name="additionalInfo",
        )
        extended_error_info_read.code = AAZStrType()
        extended_error_info_read.details = AAZListType()
        extended_error_info_read.message = AAZStrType()
        extended_error_info_read.target = AAZStrType()

        additional_info = _schema_extended_error_info_read.additional_info
        additional_info.Element = AAZObjectType()

        _element = _schema_extended_error_info_read.additional_info.Element
        _element.info = AAZObjectType(
            flags={"read_only": True},
        )
        _element.type = AAZStrType(
            flags={"required": True},
        )

        details = _schema_extended_error_info_read.details
        details.Element = AAZObjectType()
        cls._build_schema_extended_error_info_read(details.Element)

        _schema.additional_info = cls._schema_extended_error_info_read.additional_info
        _schema.code = cls._schema_extended_error_info_read.code
        _schema.details = cls._schema_extended_error_info_read.details
        _schema.message = cls._schema_extended_error_info_read.message
        _schema.target = cls._schema_extended_error_info_read.target

    _schema_notifications_read = None

    @classmethod
    def _build_schema_notifications_read(cls, _schema):
        if cls._schema_notifications_read is not None:
            _schema.Element = cls._schema_notifications_read.Element
            return

        cls._schema_notifications_read = _schema_notifications_read = AAZListType()

        notifications_read = _schema_notifications_read
        notifications_read.Element = AAZObjectType()

        _element = _schema_notifications_read.Element
        _element.notification_type = AAZStrType(
            serialized_name="notificationType",
        )
        _element.skip_notifications = AAZStrType(
            serialized_name="skipNotifications",
        )

        _schema.Element = cls._schema_notifications_read.Element

    _schema_resource_access_role_read = None

    @classmethod
    def _build_schema_resource_access_role_read(cls, _schema):
        if cls._schema_resource_access_role_read is not None:
            _schema.actions = cls._schema_resource_access_role_read.actions
            _schema.allowed_group_claims = cls._schema_resource_access_role_read.allowed_group_claims
            return

        cls._schema_resource_access_role_read = _schema_resource_access_role_read = AAZObjectType()

        resource_access_role_read = _schema_resource_access_role_read
        resource_access_role_read.actions = AAZListType()
        resource_access_role_read.allowed_group_claims = AAZListType(
            serialized_name="allowedGroupClaims",
        )

        actions = _schema_resource_access_role_read.actions
        actions.Element = AAZStrType()

        allowed_group_claims = _schema_resource_access_role_read.allowed_group_claims
        allowed_group_claims.Element = AAZStrType()

        _schema.actions = cls._schema_resource_access_role_read.actions
        _schema.allowed_group_claims = cls._schema_resource_access_role_read.allowed_group_claims

    _schema_resource_provider_authorization_rules_read = None

    @classmethod
    def _build_schema_resource_provider_authorization_rules_read(cls, _schema):
        if cls._schema_resource_provider_authorization_rules_read is not None:
            _schema.async_operation_polling_rules = cls._schema_resource_provider_authorization_rules_read.async_operation_polling_rules
            return

        cls._schema_resource_provider_authorization_rules_read = _schema_resource_provider_authorization_rules_read = AAZObjectType()

        resource_provider_authorization_rules_read = _schema_resource_provider_authorization_rules_read
        resource_provider_authorization_rules_read.async_operation_polling_rules = AAZObjectType(
            serialized_name="asyncOperationPollingRules",
        )

        async_operation_polling_rules = _schema_resource_provider_authorization_rules_read.async_operation_polling_rules
        async_operation_polling_rules.additional_options = AAZStrType(
            serialized_name="additionalOptions",
        )
        async_operation_polling_rules.authorization_actions = AAZListType(
            serialized_name="authorizationActions",
        )

        authorization_actions = _schema_resource_provider_authorization_rules_read.async_operation_polling_rules.authorization_actions
        authorization_actions.Element = AAZStrType()

        _schema.async_operation_polling_rules = cls._schema_resource_provider_authorization_rules_read.async_operation_polling_rules

    _schema_resource_provider_authorization_read = None

    @classmethod
    def _build_schema_resource_provider_authorization_read(cls, _schema):
        if cls._schema_resource_provider_authorization_read is not None:
            _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
            _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
            _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
            _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
            _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
            _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id
            return

        cls._schema_resource_provider_authorization_read = _schema_resource_provider_authorization_read = AAZObjectType()

        resource_provider_authorization_read = _schema_resource_provider_authorization_read
        resource_provider_authorization_read.allowed_third_party_extensions = AAZListType(
            serialized_name="allowedThirdPartyExtensions",
        )
        resource_provider_authorization_read.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        resource_provider_authorization_read.grouping_tag = AAZStrType(
            serialized_name="groupingTag",
        )
        resource_provider_authorization_read.managed_by_authorization = AAZObjectType(
            serialized_name="managedByAuthorization",
        )
        resource_provider_authorization_read.managed_by_role_definition_id = AAZStrType(
            serialized_name="managedByRoleDefinitionId",
        )
        resource_provider_authorization_read.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        allowed_third_party_extensions = _schema_resource_provider_authorization_read.allowed_third_party_extensions
        allowed_third_party_extensions.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.allowed_third_party_extensions.Element
        _element.name = AAZStrType()

        managed_by_authorization = _schema_resource_provider_authorization_read.managed_by_authorization
        managed_by_authorization.additional_authorizations = AAZListType(
            serialized_name="additionalAuthorizations",
        )
        managed_by_authorization.allow_managed_by_inheritance = AAZBoolType(
            serialized_name="allowManagedByInheritance",
        )
        managed_by_authorization.managed_by_resource_role_definition_id = AAZStrType(
            serialized_name="managedByResourceRoleDefinitionId",
        )

        additional_authorizations = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations
        additional_authorizations.Element = AAZObjectType()

        _element = _schema_resource_provider_authorization_read.managed_by_authorization.additional_authorizations.Element
        _element.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        _element.role_definition_id = AAZStrType(
            serialized_name="roleDefinitionId",
        )

        _schema.allowed_third_party_extensions = cls._schema_resource_provider_authorization_read.allowed_third_party_extensions
        _schema.application_id = cls._schema_resource_provider_authorization_read.application_id
        _schema.grouping_tag = cls._schema_resource_provider_authorization_read.grouping_tag
        _schema.managed_by_authorization = cls._schema_resource_provider_authorization_read.managed_by_authorization
        _schema.managed_by_role_definition_id = cls._schema_resource_provider_authorization_read.managed_by_role_definition_id
        _schema.role_definition_id = cls._schema_resource_provider_authorization_read.role_definition_id

    _schema_resource_provider_endpoint_read = None

    @classmethod
    def _build_schema_resource_provider_endpoint_read(cls, _schema):
        if cls._schema_resource_provider_endpoint_read is not None:
            _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
            _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
            _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
            _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
            _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
            _schema.locations = cls._schema_resource_provider_endpoint_read.locations
            _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
            _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
            _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout
            return

        cls._schema_resource_provider_endpoint_read = _schema_resource_provider_endpoint_read = AAZObjectType()

        resource_provider_endpoint_read = _schema_resource_provider_endpoint_read
        resource_provider_endpoint_read.api_versions = AAZListType(
            serialized_name="apiVersions",
        )
        resource_provider_endpoint_read.enabled = AAZBoolType()
        resource_provider_endpoint_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        resource_provider_endpoint_read.endpoint_uri = AAZStrType(
            serialized_name="endpointUri",
        )
        resource_provider_endpoint_read.features_rule = AAZObjectType(
            serialized_name="featuresRule",
        )
        resource_provider_endpoint_read.locations = AAZListType()
        resource_provider_endpoint_read.required_features = AAZListType(
            serialized_name="requiredFeatures",
        )
        resource_provider_endpoint_read.sku_link = AAZStrType(
            serialized_name="skuLink",
        )
        resource_provider_endpoint_read.timeout = AAZStrType()

        api_versions = _schema_resource_provider_endpoint_read.api_versions
        api_versions.Element = AAZStrType()

        features_rule = _schema_resource_provider_endpoint_read.features_rule
        features_rule.required_features_policy = AAZStrType(
            serialized_name="requiredFeaturesPolicy",
            flags={"required": True},
        )

        locations = _schema_resource_provider_endpoint_read.locations
        locations.Element = AAZStrType()

        required_features = _schema_resource_provider_endpoint_read.required_features
        required_features.Element = AAZStrType()

        _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
        _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
        _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
        _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
        _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
        _schema.locations = cls._schema_resource_provider_endpoint_read.locations
        _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
        _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
        _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout

    _schema_service_tree_info_read = None

    @classmethod
    def _build_schema_service_tree_info_read(cls, _schema):
        if cls._schema_service_tree_info_read is not None:
            _schema.component_id = cls._schema_service_tree_info_read.component_id
            _schema.readiness = cls._schema_service_tree_info_read.readiness
            _schema.service_id = cls._schema_service_tree_info_read.service_id
            return

        cls._schema_service_tree_info_read = _schema_service_tree_info_read = AAZObjectType()

        service_tree_info_read = _schema_service_tree_info_read
        service_tree_info_read.component_id = AAZStrType(
            serialized_name="componentId",
        )
        service_tree_info_read.readiness = AAZStrType()
        service_tree_info_read.service_id = AAZStrType(
            serialized_name="serviceId",
        )

        _schema.component_id = cls._schema_service_tree_info_read.component_id
        _schema.readiness = cls._schema_service_tree_info_read.readiness
        _schema.service_id = cls._schema_service_tree_info_read.service_id

    _schema_subscription_state_override_action_read = None

    @classmethod
    def _build_schema_subscription_state_override_action_read(cls, _schema):
        if cls._schema_subscription_state_override_action_read is not None:
            _schema.action = cls._schema_subscription_state_override_action_read.action
            _schema.state = cls._schema_subscription_state_override_action_read.state
            return

        cls._schema_subscription_state_override_action_read = _schema_subscription_state_override_action_read = AAZObjectType()

        subscription_state_override_action_read = _schema_subscription_state_override_action_read
        subscription_state_override_action_read.action = AAZStrType(
            flags={"required": True},
        )
        subscription_state_override_action_read.state = AAZStrType(
            flags={"required": True},
        )

        _schema.action = cls._schema_subscription_state_override_action_read.action
        _schema.state = cls._schema_subscription_state_override_action_read.state

    _schema_system_data_read = None

    @classmethod
    def _build_schema_system_data_read(cls, _schema):
        if cls._schema_system_data_read is not None:
            _schema.created_at = cls._schema_system_data_read.created_at
            _schema.created_by = cls._schema_system_data_read.created_by
            _schema.created_by_type = cls._schema_system_data_read.created_by_type
            _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
            _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
            _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type
            return

        cls._schema_system_data_read = _schema_system_data_read = AAZObjectType(
            flags={"read_only": True}
        )

        system_data_read = _schema_system_data_read
        system_data_read.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data_read.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data_read.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data_read.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data_read.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data_read.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.created_at = cls._schema_system_data_read.created_at
        _schema.created_by = cls._schema_system_data_read.created_by
        _schema.created_by_type = cls._schema_system_data_read.created_by_type
        _schema.last_modified_at = cls._schema_system_data_read.last_modified_at
        _schema.last_modified_by = cls._schema_system_data_read.last_modified_by
        _schema.last_modified_by_type = cls._schema_system_data_read.last_modified_by_type

    _schema_token_auth_configuration_read = None

    @classmethod
    def _build_schema_token_auth_configuration_read(cls, _schema):
        if cls._schema_token_auth_configuration_read is not None:
            _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
            _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
            _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope
            return

        cls._schema_token_auth_configuration_read = _schema_token_auth_configuration_read = AAZObjectType()

        token_auth_configuration_read = _schema_token_auth_configuration_read
        token_auth_configuration_read.authentication_scheme = AAZStrType(
            serialized_name="authenticationScheme",
        )
        token_auth_configuration_read.disable_certificate_authentication_fallback = AAZBoolType(
            serialized_name="disableCertificateAuthenticationFallback",
        )
        token_auth_configuration_read.signed_request_scope = AAZStrType(
            serialized_name="signedRequestScope",
        )

        _schema.authentication_scheme = cls._schema_token_auth_configuration_read.authentication_scheme
        _schema.disable_certificate_authentication_fallback = cls._schema_token_auth_configuration_read.disable_certificate_authentication_fallback
        _schema.signed_request_scope = cls._schema_token_auth_configuration_read.signed_request_scope


__all__ = ["Create"]
