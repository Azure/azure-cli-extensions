# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub manifest generate",
)
class Generate(AAZCommand):
    """Generates the manifest for the given provider.

    :example: manifest generate
        az az providerhub manifest generate --provider-namespace "{providerNamespace}"
    """

    _aaz_info = {
        "version": "2024-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}/generatemanifest", "2024-04-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.provider_namespace = AAZStrArg(
            options=["--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GenerateManifest(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GenerateManifest(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/generateManifest",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.capabilities = AAZListType()
            _schema_on_200.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            _schema_on_200.enable_tenant_linked_notification = AAZBoolType(
                serialized_name="enableTenantLinkedNotification",
                nullable=True,
            )
            _schema_on_200.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            _schema_on_200.global_notification_endpoints = AAZListType(
                serialized_name="globalNotificationEndpoints",
            )
            _schema_on_200.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            _schema_on_200.management = AAZObjectType()
            _schema_on_200.metadata = AAZFreeFormDictType()
            _schema_on_200.namespace = AAZStrType()
            _schema_on_200.notifications = AAZListType()
            _GenerateHelper._build_schema_notifications_read(_schema_on_200.notifications)
            _schema_on_200.provider_authentication = AAZObjectType(
                serialized_name="providerAuthentication",
            )
            _schema_on_200.provider_authorizations = AAZListType(
                serialized_name="providerAuthorizations",
            )
            _schema_on_200.provider_type = AAZStrType(
                serialized_name="providerType",
            )
            _schema_on_200.provider_version = AAZStrType(
                serialized_name="providerVersion",
            )
            _schema_on_200.re_register_subscription_metadata = AAZObjectType(
                serialized_name="reRegisterSubscriptionMetadata",
            )
            _schema_on_200.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            _schema_on_200.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            _schema_on_200.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            _GenerateHelper._build_schema_resource_provider_authorization_rules_read(_schema_on_200.resource_provider_authorization_rules)
            _schema_on_200.resource_types = AAZListType(
                serialized_name="resourceTypes",
            )
            _schema_on_200.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            _schema_on_200.services = AAZListType()

            capabilities = cls._schema_on_200.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200.capabilities.Element
            _element.effect = AAZStrType(
                flags={"required": True},
            )
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            required_features = cls._schema_on_200.capabilities.Element.required_features
            required_features.Element = AAZStrType()

            features_rule = cls._schema_on_200.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            global_notification_endpoints = cls._schema_on_200.global_notification_endpoints
            global_notification_endpoints.Element = AAZObjectType()
            _GenerateHelper._build_schema_resource_provider_endpoint_read(global_notification_endpoints.Element)

            linked_notification_rules = cls._schema_on_200.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.dsts_configuration = AAZObjectType(
                serialized_name="dstsConfiguration",
            )
            _element.endpoints = AAZListType()
            _element.token_auth_configuration = AAZObjectType(
                serialized_name="tokenAuthConfiguration",
            )

            actions = cls._schema_on_200.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            dsts_configuration = cls._schema_on_200.linked_notification_rules.Element.dsts_configuration
            dsts_configuration.service_dns_name = AAZStrType(
                serialized_name="serviceDnsName",
            )
            dsts_configuration.service_name = AAZStrType(
                serialized_name="serviceName",
                flags={"required": True},
            )

            endpoints = cls._schema_on_200.linked_notification_rules.Element.endpoints
            endpoints.Element = AAZObjectType()
            _GenerateHelper._build_schema_resource_provider_endpoint_read(endpoints.Element)

            token_auth_configuration = cls._schema_on_200.linked_notification_rules.Element.token_auth_configuration
            token_auth_configuration.authentication_scheme = AAZStrType(
                serialized_name="authenticationScheme",
            )
            token_auth_configuration.disable_certificate_authentication_fallback = AAZBoolType(
                serialized_name="disableCertificateAuthenticationFallback",
            )
            token_auth_configuration.signed_request_scope = AAZStrType(
                serialized_name="signedRequestScope",
            )

            management = cls._schema_on_200.management
            management.authorization_owners = AAZListType(
                serialized_name="authorizationOwners",
            )
            management.canary_manifest_owners = AAZListType(
                serialized_name="canaryManifestOwners",
            )
            management.error_response_message_options = AAZObjectType(
                serialized_name="errorResponseMessageOptions",
            )
            management.expedited_rollout_metadata = AAZObjectType(
                serialized_name="expeditedRolloutMetadata",
            )
            management.expedited_rollout_submitters = AAZListType(
                serialized_name="expeditedRolloutSubmitters",
            )
            management.incident_contact_email = AAZStrType(
                serialized_name="incidentContactEmail",
            )
            management.incident_routing_service = AAZStrType(
                serialized_name="incidentRoutingService",
            )
            management.incident_routing_team = AAZStrType(
                serialized_name="incidentRoutingTeam",
            )
            management.manifest_owners = AAZListType(
                serialized_name="manifestOwners",
            )
            management.pc_code = AAZStrType(
                serialized_name="pcCode",
            )
            management.profit_center_program_id = AAZStrType(
                serialized_name="profitCenterProgramId",
            )
            management.resource_access_policy = AAZStrType(
                serialized_name="resourceAccessPolicy",
            )
            management.resource_access_roles = AAZListType(
                serialized_name="resourceAccessRoles",
            )
            management.schema_owners = AAZListType(
                serialized_name="schemaOwners",
            )
            management.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )

            authorization_owners = cls._schema_on_200.management.authorization_owners
            authorization_owners.Element = AAZStrType()

            canary_manifest_owners = cls._schema_on_200.management.canary_manifest_owners
            canary_manifest_owners.Element = AAZStrType()

            error_response_message_options = cls._schema_on_200.management.error_response_message_options
            error_response_message_options.server_failure_response_message_type = AAZStrType(
                serialized_name="serverFailureResponseMessageType",
            )

            expedited_rollout_metadata = cls._schema_on_200.management.expedited_rollout_metadata
            expedited_rollout_metadata.enabled = AAZBoolType()
            expedited_rollout_metadata.expedited_rollout_intent = AAZStrType(
                serialized_name="expeditedRolloutIntent",
            )

            expedited_rollout_submitters = cls._schema_on_200.management.expedited_rollout_submitters
            expedited_rollout_submitters.Element = AAZStrType()

            manifest_owners = cls._schema_on_200.management.manifest_owners
            manifest_owners.Element = AAZStrType()

            resource_access_roles = cls._schema_on_200.management.resource_access_roles
            resource_access_roles.Element = AAZObjectType()

            _element = cls._schema_on_200.management.resource_access_roles.Element
            _element.actions = AAZListType()
            _element.allowed_group_claims = AAZListType(
                serialized_name="allowedGroupClaims",
            )

            actions = cls._schema_on_200.management.resource_access_roles.Element.actions
            actions.Element = AAZStrType()

            allowed_group_claims = cls._schema_on_200.management.resource_access_roles.Element.allowed_group_claims
            allowed_group_claims.Element = AAZStrType()

            schema_owners = cls._schema_on_200.management.schema_owners
            schema_owners.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200.management.service_tree_infos
            service_tree_infos.Element = AAZObjectType()
            _GenerateHelper._build_schema_service_tree_info_read(service_tree_infos.Element)

            provider_authentication = cls._schema_on_200.provider_authentication
            provider_authentication.allowed_audiences = AAZListType(
                serialized_name="allowedAudiences",
                flags={"required": True},
            )

            allowed_audiences = cls._schema_on_200.provider_authentication.allowed_audiences
            allowed_audiences.Element = AAZStrType()

            provider_authorizations = cls._schema_on_200.provider_authorizations
            provider_authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200.provider_authorizations.Element
            _element.allowed_third_party_extensions = AAZListType(
                serialized_name="allowedThirdPartyExtensions",
            )
            _element.application_id = AAZStrType(
                serialized_name="applicationId",
            )
            _element.grouping_tag = AAZStrType(
                serialized_name="groupingTag",
            )
            _element.managed_by_authorization = AAZObjectType(
                serialized_name="managedByAuthorization",
            )
            _element.managed_by_role_definition_id = AAZStrType(
                serialized_name="managedByRoleDefinitionId",
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
            )

            allowed_third_party_extensions = cls._schema_on_200.provider_authorizations.Element.allowed_third_party_extensions
            allowed_third_party_extensions.Element = AAZObjectType()

            _element = cls._schema_on_200.provider_authorizations.Element.allowed_third_party_extensions.Element
            _element.name = AAZStrType()

            managed_by_authorization = cls._schema_on_200.provider_authorizations.Element.managed_by_authorization
            managed_by_authorization.additional_authorizations = AAZListType(
                serialized_name="additionalAuthorizations",
            )
            managed_by_authorization.allow_managed_by_inheritance = AAZBoolType(
                serialized_name="allowManagedByInheritance",
            )
            managed_by_authorization.managed_by_resource_role_definition_id = AAZStrType(
                serialized_name="managedByResourceRoleDefinitionId",
            )

            additional_authorizations = cls._schema_on_200.provider_authorizations.Element.managed_by_authorization.additional_authorizations
            additional_authorizations.Element = AAZObjectType()

            _element = cls._schema_on_200.provider_authorizations.Element.managed_by_authorization.additional_authorizations.Element
            _element.application_id = AAZStrType(
                serialized_name="applicationId",
            )
            _element.role_definition_id = AAZStrType(
                serialized_name="roleDefinitionId",
            )

            re_register_subscription_metadata = cls._schema_on_200.re_register_subscription_metadata
            re_register_subscription_metadata.concurrency_limit = AAZIntType(
                serialized_name="concurrencyLimit",
            )
            re_register_subscription_metadata.enabled = AAZBoolType(
                flags={"required": True},
            )

            request_header_options = cls._schema_on_200.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200.required_features
            required_features.Element = AAZStrType()

            resource_types = cls._schema_on_200.resource_types
            resource_types.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element
            _element.additional_options = AAZStrType(
                serialized_name="additionalOptions",
            )
            _element.allowed_unauthorized_actions = AAZListType(
                serialized_name="allowedUnauthorizedActions",
            )
            _element.authorization_action_mappings = AAZListType(
                serialized_name="authorizationActionMappings",
            )
            _element.cross_tenant_token_validation = AAZStrType(
                serialized_name="crossTenantTokenValidation",
            )
            _element.default_api_version = AAZStrType(
                serialized_name="defaultApiVersion",
            )
            _element.disallowed_action_verbs = AAZListType(
                serialized_name="disallowedActionVerbs",
            )
            _element.endpoints = AAZListType()
            _element.extended_locations = AAZListType(
                serialized_name="extendedLocations",
            )
            _element.features_rule = AAZObjectType(
                serialized_name="featuresRule",
            )
            _element.identity_management = AAZObjectType(
                serialized_name="identityManagement",
            )
            _element.linked_access_checks = AAZListType(
                serialized_name="linkedAccessChecks",
            )
            _element.linked_notification_rules = AAZListType(
                serialized_name="linkedNotificationRules",
            )
            _element.linked_operation_rules = AAZListType(
                serialized_name="linkedOperationRules",
            )
            _element.logging_rules = AAZListType(
                serialized_name="loggingRules",
            )
            _element.marketplace_type = AAZStrType(
                serialized_name="marketplaceType",
            )
            _element.metadata = AAZFreeFormDictType()
            _element.name = AAZStrType()
            _element.notifications = AAZListType()
            _GenerateHelper._build_schema_notifications_read(_element.notifications)
            _element.quota_rule = AAZObjectType(
                serialized_name="quotaRule",
            )
            _element.request_header_options = AAZObjectType(
                serialized_name="requestHeaderOptions",
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )
            _element.resource_deletion_policy = AAZStrType(
                serialized_name="resourceDeletionPolicy",
            )
            _element.resource_provider_authorization_rules = AAZObjectType(
                serialized_name="resourceProviderAuthorizationRules",
            )
            _GenerateHelper._build_schema_resource_provider_authorization_rules_read(_element.resource_provider_authorization_rules)
            _element.resource_validation = AAZStrType(
                serialized_name="resourceValidation",
            )
            _element.routing_type = AAZStrType(
                serialized_name="routingType",
            )
            _element.service_tree_infos = AAZListType(
                serialized_name="serviceTreeInfos",
            )
            _element.sku_link = AAZStrType(
                serialized_name="skuLink",
            )
            _element.subscription_state_rules = AAZListType(
                serialized_name="subscriptionStateRules",
            )
            _element.template_deployment_policy = AAZObjectType(
                serialized_name="templateDeploymentPolicy",
            )
            _element.throttling_rules = AAZListType(
                serialized_name="throttlingRules",
            )

            allowed_unauthorized_actions = cls._schema_on_200.resource_types.Element.allowed_unauthorized_actions
            allowed_unauthorized_actions.Element = AAZStrType()

            authorization_action_mappings = cls._schema_on_200.resource_types.Element.authorization_action_mappings
            authorization_action_mappings.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.authorization_action_mappings.Element
            _element.desired = AAZStrType()
            _element.original = AAZStrType()

            disallowed_action_verbs = cls._schema_on_200.resource_types.Element.disallowed_action_verbs
            disallowed_action_verbs.Element = AAZStrType()

            endpoints = cls._schema_on_200.resource_types.Element.endpoints
            endpoints.Element = AAZObjectType()
            _GenerateHelper._build_schema_resource_provider_endpoint_read(endpoints.Element)

            extended_locations = cls._schema_on_200.resource_types.Element.extended_locations
            extended_locations.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.extended_locations.Element
            _element.supported_policy = AAZStrType(
                serialized_name="supportedPolicy",
            )
            _element.type = AAZStrType()

            features_rule = cls._schema_on_200.resource_types.Element.features_rule
            features_rule.required_features_policy = AAZStrType(
                serialized_name="requiredFeaturesPolicy",
                flags={"required": True},
            )

            identity_management = cls._schema_on_200.resource_types.Element.identity_management
            identity_management.type = AAZStrType()

            linked_access_checks = cls._schema_on_200.resource_types.Element.linked_access_checks
            linked_access_checks.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.linked_access_checks.Element
            _element.action_name = AAZStrType(
                serialized_name="actionName",
            )
            _element.linked_action = AAZStrType(
                serialized_name="linkedAction",
            )
            _element.linked_action_verb = AAZStrType(
                serialized_name="linkedActionVerb",
            )
            _element.linked_property = AAZStrType(
                serialized_name="linkedProperty",
            )
            _element.linked_type = AAZStrType(
                serialized_name="linkedType",
            )

            linked_notification_rules = cls._schema_on_200.resource_types.Element.linked_notification_rules
            linked_notification_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.linked_notification_rules.Element
            _element.actions = AAZListType()
            _element.actions_on_failed_operation = AAZListType(
                serialized_name="actionsOnFailedOperation",
            )
            _element.fast_path_actions = AAZListType(
                serialized_name="fastPathActions",
            )
            _element.fast_path_actions_on_failed_operation = AAZListType(
                serialized_name="fastPathActionsOnFailedOperation",
            )
            _element.linked_notification_timeout = AAZStrType(
                serialized_name="linkedNotificationTimeout",
            )

            actions = cls._schema_on_200.resource_types.Element.linked_notification_rules.Element.actions
            actions.Element = AAZStrType()

            actions_on_failed_operation = cls._schema_on_200.resource_types.Element.linked_notification_rules.Element.actions_on_failed_operation
            actions_on_failed_operation.Element = AAZStrType()

            fast_path_actions = cls._schema_on_200.resource_types.Element.linked_notification_rules.Element.fast_path_actions
            fast_path_actions.Element = AAZStrType()

            fast_path_actions_on_failed_operation = cls._schema_on_200.resource_types.Element.linked_notification_rules.Element.fast_path_actions_on_failed_operation
            fast_path_actions_on_failed_operation.Element = AAZStrType()

            linked_operation_rules = cls._schema_on_200.resource_types.Element.linked_operation_rules
            linked_operation_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.linked_operation_rules.Element
            _element.depends_on_types = AAZListType(
                serialized_name="dependsOnTypes",
            )
            _element.linked_action = AAZStrType(
                serialized_name="linkedAction",
                flags={"required": True},
            )
            _element.linked_operation = AAZStrType(
                serialized_name="linkedOperation",
                flags={"required": True},
            )

            depends_on_types = cls._schema_on_200.resource_types.Element.linked_operation_rules.Element.depends_on_types
            depends_on_types.Element = AAZStrType()

            logging_rules = cls._schema_on_200.resource_types.Element.logging_rules
            logging_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.logging_rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.detail_level = AAZStrType(
                serialized_name="detailLevel",
                flags={"required": True},
            )
            _element.direction = AAZStrType(
                flags={"required": True},
            )
            _element.hidden_property_paths = AAZObjectType(
                serialized_name="hiddenPropertyPaths",
            )

            hidden_property_paths = cls._schema_on_200.resource_types.Element.logging_rules.Element.hidden_property_paths
            hidden_property_paths.hidden_paths_on_request = AAZListType(
                serialized_name="hiddenPathsOnRequest",
            )
            hidden_property_paths.hidden_paths_on_response = AAZListType(
                serialized_name="hiddenPathsOnResponse",
            )

            hidden_paths_on_request = cls._schema_on_200.resource_types.Element.logging_rules.Element.hidden_property_paths.hidden_paths_on_request
            hidden_paths_on_request.Element = AAZStrType()

            hidden_paths_on_response = cls._schema_on_200.resource_types.Element.logging_rules.Element.hidden_property_paths.hidden_paths_on_response
            hidden_paths_on_response.Element = AAZStrType()

            quota_rule = cls._schema_on_200.resource_types.Element.quota_rule
            quota_rule.location_rules = AAZListType(
                serialized_name="locationRules",
            )
            quota_rule.quota_policy = AAZStrType(
                serialized_name="quotaPolicy",
            )
            quota_rule.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            location_rules = cls._schema_on_200.resource_types.Element.quota_rule.location_rules
            location_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.quota_rule.location_rules.Element
            _element.location = AAZStrType()
            _element.policy = AAZStrType()
            _element.quota_id = AAZStrType(
                serialized_name="quotaId",
            )

            required_features = cls._schema_on_200.resource_types.Element.quota_rule.required_features
            required_features.Element = AAZStrType()

            request_header_options = cls._schema_on_200.resource_types.Element.request_header_options
            request_header_options.opt_in_headers = AAZStrType(
                serialized_name="optInHeaders",
            )
            request_header_options.opt_out_headers = AAZStrType(
                serialized_name="optOutHeaders",
            )

            required_features = cls._schema_on_200.resource_types.Element.required_features
            required_features.Element = AAZStrType()

            service_tree_infos = cls._schema_on_200.resource_types.Element.service_tree_infos
            service_tree_infos.Element = AAZObjectType()
            _GenerateHelper._build_schema_service_tree_info_read(service_tree_infos.Element)

            subscription_state_rules = cls._schema_on_200.resource_types.Element.subscription_state_rules
            subscription_state_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.subscription_state_rules.Element
            _element.allowed_actions = AAZListType(
                serialized_name="allowedActions",
            )
            _element.state = AAZStrType()

            allowed_actions = cls._schema_on_200.resource_types.Element.subscription_state_rules.Element.allowed_actions
            allowed_actions.Element = AAZStrType()

            template_deployment_policy = cls._schema_on_200.resource_types.Element.template_deployment_policy
            template_deployment_policy.capabilities = AAZStrType(
                flags={"required": True},
            )
            template_deployment_policy.preflight_notifications = AAZStrType(
                serialized_name="preflightNotifications",
            )
            template_deployment_policy.preflight_options = AAZStrType(
                serialized_name="preflightOptions",
                flags={"required": True},
            )

            throttling_rules = cls._schema_on_200.resource_types.Element.throttling_rules
            throttling_rules.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.throttling_rules.Element
            _element.action = AAZStrType(
                flags={"required": True},
            )
            _element.application_id = AAZListType(
                serialized_name="applicationId",
            )
            _element.metrics = AAZListType(
                flags={"required": True},
            )
            _element.required_features = AAZListType(
                serialized_name="requiredFeatures",
            )

            application_id = cls._schema_on_200.resource_types.Element.throttling_rules.Element.application_id
            application_id.Element = AAZStrType()

            metrics = cls._schema_on_200.resource_types.Element.throttling_rules.Element.metrics
            metrics.Element = AAZObjectType()

            _element = cls._schema_on_200.resource_types.Element.throttling_rules.Element.metrics.Element
            _element.interval = AAZStrType()
            _element.limit = AAZIntType(
                flags={"required": True},
            )
            _element.type = AAZStrType(
                flags={"required": True},
            )

            required_features = cls._schema_on_200.resource_types.Element.throttling_rules.Element.required_features
            required_features.Element = AAZStrType()

            services = cls._schema_on_200.services
            services.Element = AAZObjectType()

            _element = cls._schema_on_200.services.Element
            _element.service_name = AAZStrType(
                serialized_name="serviceName",
            )
            _element.status = AAZStrType()

            return cls._schema_on_200


class _GenerateHelper:
    """Helper class for Generate"""

    _schema_notifications_read = None

    @classmethod
    def _build_schema_notifications_read(cls, _schema):
        if cls._schema_notifications_read is not None:
            _schema.Element = cls._schema_notifications_read.Element
            return

        cls._schema_notifications_read = _schema_notifications_read = AAZListType()

        notifications_read = _schema_notifications_read
        notifications_read.Element = AAZObjectType()

        _element = _schema_notifications_read.Element
        _element.notification_type = AAZStrType(
            serialized_name="notificationType",
        )
        _element.skip_notifications = AAZStrType(
            serialized_name="skipNotifications",
        )

        _schema.Element = cls._schema_notifications_read.Element

    _schema_resource_provider_authorization_rules_read = None

    @classmethod
    def _build_schema_resource_provider_authorization_rules_read(cls, _schema):
        if cls._schema_resource_provider_authorization_rules_read is not None:
            _schema.async_operation_polling_rules = cls._schema_resource_provider_authorization_rules_read.async_operation_polling_rules
            return

        cls._schema_resource_provider_authorization_rules_read = _schema_resource_provider_authorization_rules_read = AAZObjectType()

        resource_provider_authorization_rules_read = _schema_resource_provider_authorization_rules_read
        resource_provider_authorization_rules_read.async_operation_polling_rules = AAZObjectType(
            serialized_name="asyncOperationPollingRules",
        )

        async_operation_polling_rules = _schema_resource_provider_authorization_rules_read.async_operation_polling_rules
        async_operation_polling_rules.additional_options = AAZStrType(
            serialized_name="additionalOptions",
        )
        async_operation_polling_rules.authorization_actions = AAZListType(
            serialized_name="authorizationActions",
        )

        authorization_actions = _schema_resource_provider_authorization_rules_read.async_operation_polling_rules.authorization_actions
        authorization_actions.Element = AAZStrType()

        _schema.async_operation_polling_rules = cls._schema_resource_provider_authorization_rules_read.async_operation_polling_rules

    _schema_resource_provider_endpoint_read = None

    @classmethod
    def _build_schema_resource_provider_endpoint_read(cls, _schema):
        if cls._schema_resource_provider_endpoint_read is not None:
            _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
            _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
            _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
            _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
            _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
            _schema.locations = cls._schema_resource_provider_endpoint_read.locations
            _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
            _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
            _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout
            return

        cls._schema_resource_provider_endpoint_read = _schema_resource_provider_endpoint_read = AAZObjectType()

        resource_provider_endpoint_read = _schema_resource_provider_endpoint_read
        resource_provider_endpoint_read.api_versions = AAZListType(
            serialized_name="apiVersions",
        )
        resource_provider_endpoint_read.enabled = AAZBoolType()
        resource_provider_endpoint_read.endpoint_type = AAZStrType(
            serialized_name="endpointType",
        )
        resource_provider_endpoint_read.endpoint_uri = AAZStrType(
            serialized_name="endpointUri",
        )
        resource_provider_endpoint_read.features_rule = AAZObjectType(
            serialized_name="featuresRule",
        )
        resource_provider_endpoint_read.locations = AAZListType()
        resource_provider_endpoint_read.required_features = AAZListType(
            serialized_name="requiredFeatures",
        )
        resource_provider_endpoint_read.sku_link = AAZStrType(
            serialized_name="skuLink",
        )
        resource_provider_endpoint_read.timeout = AAZStrType()

        api_versions = _schema_resource_provider_endpoint_read.api_versions
        api_versions.Element = AAZStrType()

        features_rule = _schema_resource_provider_endpoint_read.features_rule
        features_rule.required_features_policy = AAZStrType(
            serialized_name="requiredFeaturesPolicy",
            flags={"required": True},
        )

        locations = _schema_resource_provider_endpoint_read.locations
        locations.Element = AAZStrType()

        required_features = _schema_resource_provider_endpoint_read.required_features
        required_features.Element = AAZStrType()

        _schema.api_versions = cls._schema_resource_provider_endpoint_read.api_versions
        _schema.enabled = cls._schema_resource_provider_endpoint_read.enabled
        _schema.endpoint_type = cls._schema_resource_provider_endpoint_read.endpoint_type
        _schema.endpoint_uri = cls._schema_resource_provider_endpoint_read.endpoint_uri
        _schema.features_rule = cls._schema_resource_provider_endpoint_read.features_rule
        _schema.locations = cls._schema_resource_provider_endpoint_read.locations
        _schema.required_features = cls._schema_resource_provider_endpoint_read.required_features
        _schema.sku_link = cls._schema_resource_provider_endpoint_read.sku_link
        _schema.timeout = cls._schema_resource_provider_endpoint_read.timeout

    _schema_service_tree_info_read = None

    @classmethod
    def _build_schema_service_tree_info_read(cls, _schema):
        if cls._schema_service_tree_info_read is not None:
            _schema.component_id = cls._schema_service_tree_info_read.component_id
            _schema.readiness = cls._schema_service_tree_info_read.readiness
            _schema.service_id = cls._schema_service_tree_info_read.service_id
            return

        cls._schema_service_tree_info_read = _schema_service_tree_info_read = AAZObjectType()

        service_tree_info_read = _schema_service_tree_info_read
        service_tree_info_read.component_id = AAZStrType(
            serialized_name="componentId",
        )
        service_tree_info_read.readiness = AAZStrType()
        service_tree_info_read.service_id = AAZStrType(
            serialized_name="serviceId",
        )

        _schema.component_id = cls._schema_service_tree_info_read.component_id
        _schema.readiness = cls._schema_service_tree_info_read.readiness
        _schema.service_id = cls._schema_service_tree_info_read.service_id


__all__ = ["Generate"]
