# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "providerhub notification-registration create",
)
class Create(AAZCommand):
    """Create a notification registration.

    :example: notification-registration create
        az providerhub notification-registration create --name "{notificationRegistration}" --included-events "*/write" "Microsoft.Contoso/employees/delete" --message-scope "RegisteredSubscriptions" --notification-endpoints [{notification-destination:/subscriptions/ac6bcfb5-3dc1-491f-95a6-646b89bf3e88/resourceGroups/mgmtexp-eastus/providers/Microsoft.EventHub/namespaces/unitedstates-mgmtexpint/eventhubs/armlinkednotifications,locations:[EastUS]}] --notification-mode "EventHub" --provider-namespace "{providerNamespace}"
    """

    _aaz_info = {
        "version": "2024-04-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.providerhub/providerregistrations/{}/notificationregistrations/{}", "2024-04-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.notification_registration_name = AAZStrArg(
            options=["-n", "--name", "--notification-registration-name"],
            help="The notification registration.",
            required=True,
        )
        _args_schema.provider_namespace = AAZStrArg(
            options=["--provider-namespace"],
            help="The name of the resource provider hosted within ProviderHub.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.included_events = AAZListArg(
            options=["--included-events"],
            arg_group="Properties",
            help="These are the events that the RP should be messaged on. The message format is in the form {RP Namespace}/{ResourceType}/{action}. The available actions are: write, delete and move/action.",
        )
        _args_schema.message_scope = AAZStrArg(
            options=["--message-scope"],
            arg_group="Properties",
            help="Limits the messages that are sent to the RP. The default value is RegisteredSubscriptions. The available values are Global (all messages in Azure) and RegisteredSubscriptions (only messages in subscriptions registered by RP).",
            enum={"NotSpecified": "NotSpecified", "RegisteredSubscriptions": "RegisteredSubscriptions"},
        )
        _args_schema.notification_endpoints = AAZListArg(
            options=["--notification-endpoints"],
            arg_group="Properties",
            help="These are the locations for the notification messages. NotificationsÂ will be sent to the region of the event resource's location (e.g. VM in East Us will send message to the specified endpoint in East US).",
        )
        _args_schema.notification_mode = AAZStrArg(
            options=["--notification-mode"],
            arg_group="Properties",
            help="Determines how the notifications are sent to the RP. The two available modes are EventHub and Webhook.",
            enum={"EventHub": "EventHub", "NotSpecified": "NotSpecified", "WebHook": "WebHook"},
        )

        included_events = cls._args_schema.included_events
        included_events.Element = AAZStrArg()

        notification_endpoints = cls._args_schema.notification_endpoints
        notification_endpoints.Element = AAZObjectArg()

        _element = cls._args_schema.notification_endpoints.Element
        _element.locations = AAZListArg(
            options=["locations"],
        )
        _element.notification_destination = AAZStrArg(
            options=["notification-destination"],
        )

        locations = cls._args_schema.notification_endpoints.Element.locations
        locations.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.NotificationRegistrationsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class NotificationRegistrationsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/notificationRegistrations/{notificationRegistrationName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "notificationRegistrationName", self.ctx.args.notification_registration_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "providerNamespace", self.ctx.args.provider_namespace,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-04-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("includedEvents", AAZListType, ".included_events")
                properties.set_prop("messageScope", AAZStrType, ".message_scope")
                properties.set_prop("notificationEndpoints", AAZListType, ".notification_endpoints")
                properties.set_prop("notificationMode", AAZStrType, ".notification_mode")

            included_events = _builder.get(".properties.includedEvents")
            if included_events is not None:
                included_events.set_elements(AAZStrType, ".")

            notification_endpoints = _builder.get(".properties.notificationEndpoints")
            if notification_endpoints is not None:
                notification_endpoints.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.notificationEndpoints[]")
            if _elements is not None:
                _elements.set_prop("locations", AAZListType, ".locations")
                _elements.set_prop("notificationDestination", AAZStrType, ".notification_destination")

            locations = _builder.get(".properties.notificationEndpoints[].locations")
            if locations is not None:
                locations.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.included_events = AAZListType(
                serialized_name="includedEvents",
            )
            properties.message_scope = AAZStrType(
                serialized_name="messageScope",
            )
            properties.notification_endpoints = AAZListType(
                serialized_name="notificationEndpoints",
            )
            properties.notification_mode = AAZStrType(
                serialized_name="notificationMode",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )

            included_events = cls._schema_on_200.properties.included_events
            included_events.Element = AAZStrType()

            notification_endpoints = cls._schema_on_200.properties.notification_endpoints
            notification_endpoints.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.notification_endpoints.Element
            _element.locations = AAZListType()
            _element.notification_destination = AAZStrType(
                serialized_name="notificationDestination",
            )

            locations = cls._schema_on_200.properties.notification_endpoints.Element.locations
            locations.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
