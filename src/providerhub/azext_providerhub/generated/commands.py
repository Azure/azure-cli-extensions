# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_providerhub.generated._client_factory import cf_custom_rollout
    providerhub_custom_rollout = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._custom_rollouts_operations#CustomRollo'
        'utsOperations.{}',
        client_factory=cf_custom_rollout)
    with self.command_group('providerhub custom-rollout', providerhub_custom_rollout,
                            client_factory=cf_custom_rollout) as g:
        g.custom_command('list', 'providerhub_custom_rollout_list')
        g.custom_show_command('show', 'providerhub_custom_rollout_show')
        g.custom_command('create', 'providerhub_custom_rollout_create')

    from azext_providerhub.generated._client_factory import cf_default_rollout
    providerhub_default_rollout = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._default_rollouts_operations#DefaultRol'
        'loutsOperations.{}',
        client_factory=cf_default_rollout)
    with self.command_group('providerhub default-rollout', providerhub_default_rollout,
                            client_factory=cf_default_rollout) as g:
        g.custom_command('list', 'providerhub_default_rollout_list')
        g.custom_show_command('show', 'providerhub_default_rollout_show')
        g.custom_command('create', 'providerhub_default_rollout_create', supports_no_wait=True)
        g.custom_command('delete', 'providerhub_default_rollout_delete', confirmation=True)
        g.custom_command('stop', 'providerhub_default_rollout_stop')

    from azext_providerhub.generated._client_factory import cf_providerhub
    providerhub_ = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._model_operations#ProviderHubOperations'
        'Mixin.{}',
        client_factory=cf_providerhub)
    with self.command_group('providerhub manifest', providerhub_, client_factory=cf_providerhub, is_experimental=True) as g:
        g.custom_command('checkin', 'providerhub_checkin_manifest')
        g.custom_command('generate', 'providerhub_generate_manifest')

    from azext_providerhub.generated._client_factory import cf_notification_registration
    providerhub_notification_registration = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._notification_registrations_operations#'
        'NotificationRegistrationsOperations.{}',
        client_factory=cf_notification_registration)
    with self.command_group('providerhub notification-registration', providerhub_notification_registration,
                            client_factory=cf_notification_registration) as g:
        g.custom_command('list', 'providerhub_notification_registration_list')
        g.custom_show_command('show', 'providerhub_notification_registration_show')
        g.custom_command('create', 'providerhub_notification_registration_create')
        g.custom_command('delete', 'providerhub_notification_registration_delete', confirmation=True)

    from azext_providerhub.generated._client_factory import cf_operation
    providerhub_operation = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._operations_operations#Operations.{}',
        client_factory=cf_operation)
    with self.command_group('providerhub operation', providerhub_operation, client_factory=cf_operation) as g:
        g.custom_command('list', 'providerhub_operation_list')
        g.custom_command('create', 'providerhub_operation_create')
        g.custom_command('delete', 'providerhub_operation_delete', confirmation=True)

    from azext_providerhub.generated._client_factory import cf_provider_registration
    providerhub_provider_registration = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._provider_registrations_operations#Prov'
        'iderRegistrationsOperations.{}',
        client_factory=cf_provider_registration)
    with self.command_group('providerhub provider-registration', providerhub_provider_registration,
                            client_factory=cf_provider_registration) as g:
        g.custom_command('list', 'providerhub_provider_registration_list')
        g.custom_show_command('show', 'providerhub_provider_registration_show')
        g.custom_command('create', 'providerhub_provider_registration_create', supports_no_wait=True)
        g.custom_command('delete', 'providerhub_provider_registration_delete', confirmation=True)
        g.custom_command('generate-operation', 'providerhub_provider_registration_generate_operation')

    from azext_providerhub.generated._client_factory import cf_resource_type_registration
    providerhub_resource_type_registration = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._resource_type_registrations_operations'
        '#ResourceTypeRegistrationsOperations.{}',
        client_factory=cf_resource_type_registration)
    with self.command_group('providerhub resource-type-registration', providerhub_resource_type_registration,
                            client_factory=cf_resource_type_registration) as g:
        g.custom_command('list', 'providerhub_resource_type_registration_list')
        g.custom_show_command('show', 'providerhub_resource_type_registration_show')

    providerhub_resource_type_registration = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._resource_type_registration_operations#'
        'ResourceTypeRegistrationOperations.{}',
        client_factory=cf_resource_type_registration)
    with self.command_group('providerhub resource-type-registration', providerhub_resource_type_registration,
                            client_factory=cf_resource_type_registration) as g:
        g.custom_command(
            'create', 'providerhub_resource_type_registration_create')
        g.custom_command(
            'delete', 'providerhub_resource_type_registration_delete', confirmation=True)

    from azext_providerhub.generated._client_factory import cf_sku
    providerhub_sku = CliCommandType(
        operations_tmpl='azext_providerhub.vendored_sdks.providerhub.operations._skus_operations#SkusOperations.{}',
        client_factory=cf_sku)
    with self.command_group('providerhub sku', providerhub_sku, client_factory=cf_sku) as g:
        g.custom_command('list', 'providerhub_sku_list')
        g.custom_show_command('show', 'providerhub_sku_show')
        g.custom_command('create', 'providerhub_sku_create')
        g.custom_command('delete', 'providerhub_sku_delete', confirmation=True)
        g.custom_command('show-nested-resource-type-first', 'providerhub_sku_show_nested_resource_type_first')
        g.custom_command('show-nested-resource-type-second', 'providerhub_sku_show_nested_resource_type_second')
        g.custom_command('show-nested-resource-type-third', 'providerhub_sku_show_nested_resource_type_third')
