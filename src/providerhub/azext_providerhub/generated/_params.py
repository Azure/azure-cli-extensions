# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    get_three_state_flag,
    get_enum_type,
    resource_group_name_type
)
from azure.cli.core.commands.validators import validate_file_or_dict
from azext_providerhub.action import (
    AddCanary,
    AddProviderAuthentication,
    AddProviderAuthorizations,
    AddCapabilities,
    AddSkipRegions,
    AddTemplateDeploymentOptions,
    AddCustomrolloutsServiceTreeInfos,
    AddResourceTypeEndpointProperties,
    AddSubscriptionStateOverrideActions,
    AddProviderHubMetadataProviderAuthorizations,
    AddAuthorizations,
    AddSwaggerSpecifications,
    AddAuthorizationActionMappings,
    AddLinkedAccessChecks,
    AddThrottlingRules,
    AddIdentityManagement,
    AddCheckNameAvailabilitySpecifications,
    AddResourcetyperegistrationServiceTreeInfos,
    AddSubscriptionStateRules,
    AddExtendedLocations,
    AddResourceMovePolicy,
    AddResourceCreationBegin
)


def load_arguments(self, _):

    with self.argument_context('providerhub custom-rollout list') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')

    with self.argument_context('providerhub custom-rollout show') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')

    with self.argument_context('providerhub custom-rollout create') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')
        c.argument('rollout_name', type=str, help='The rollout name.')
        c.argument('canary', action=AddCanary, nargs='+', help='')

    with self.argument_context('providerhub custom-rollout update') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')
        c.argument('canary', action=AddCanary, nargs='+', help='')

    with self.argument_context('providerhub default-rollout list') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')

    with self.argument_context('providerhub default-rollout show') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')

    with self.argument_context('providerhub default-rollout create') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')
        c.argument('rollout_name', type=str, help='The rollout name.')
        c.argument('row_two_wait_duration', type=str, help='The wait duration before the rollout '
                   'begins in rest of the world two.')
        c.argument('skip_regions', action=AddSkipRegions, nargs='*', help='The canary regions to skip.')

    with self.argument_context('providerhub default-rollout update') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')
        c.argument('rollout_name', type=str, help='The rollout name.')
        c.argument('row_two_wait_duration', type=str, help='The wait duration before the rollout begins '
                   'in rest of the world two.')
        c.argument('skip_regions', action=AddSkipRegions, nargs='*', help='The canary regions to skip.')

    with self.argument_context('providerhub default-rollout delete') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')

    with self.argument_context('providerhub default-rollout stop') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')

    with self.argument_context('providerhub default-rollout wait') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('rollout_name', type=str, help='The rollout name.', id_part='child_name_1')

    with self.argument_context('providerhub manifest checkin') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('environment', type=str, help='The environment supplied to the checkin manifest '
                   'operation.')
        c.argument('baseline_arm_manifest_location', type=str, help='The baseline ARM manifest location supplied to '
                   'the checkin manifest operation.')

    with self.argument_context('providerhub manifest generate') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')

    with self.argument_context('providerhub provider-registration list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('providerhub provider-registration show') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')

    with self.argument_context('providerhub provider-registration create') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')
        c.argument('provider_authentication', action=AddProviderAuthentication, nargs='+', help='')
        c.argument('provider_authorizations', action=AddProviderAuthorizations, nargs='+', help='')
        c.argument('namespace', type=str, help='')
        c.argument('provider_version', type=str, help='')
        c.argument('provider_type', arg_type=get_enum_type(['NotSpecified', 'Internal', 'External', 'Hidden',
                                                            'RegistrationFree', 'LegacyRegistrationRequired',
                                                            'TenantOnly', 'AuthorizationFree']), help='')
        c.argument('required_features', nargs='+', help='')
        c.argument('capabilities', action=AddCapabilities, nargs='+', help='')
        c.argument('metadata', type=validate_file_or_dict, help='Any object Expected value: json-string/@json-file.')
        c.argument('template_deployment_options', action=AddTemplateDeploymentOptions, nargs='+', help='')
        c.argument('schema_owners', nargs='+', help='', arg_group='Management')
        c.argument('manifest_owners', nargs='+', help='', arg_group='Management')
        c.argument('incident_routing_service', type=str, help='', arg_group='Management')
        c.argument('incident_routing_team', type=str, help='', arg_group='Management')
        c.argument('incident_contact_email', type=str, help='', arg_group='Management')
        c.argument('service_tree_infos', action=AddCustomrolloutsServiceTreeInfos, nargs='+', help='',
                   arg_group='Management')
        c.argument('resource_access_policy', arg_type=get_enum_type(['NotSpecified', 'AcisReadAllowed',
                                                                     'AcisActionAllowed']), help='',
                   arg_group='Management')
        c.argument('resource_access_roles', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.', arg_group='Management')
        c.argument('opt_in_headers', arg_type=get_enum_type(['NotSpecified', 'SignedUserToken',
                                                             'ClientGroupMembership', 'SignedAuxiliaryTokens',
                                                             'UnboundedClientGroupMembership']), help='',
                   arg_group='Request Header Options')
        c.argument('required_features_policy', arg_type=get_enum_type(['Any', 'All']), help='', arg_group='Features '
                   'Rule')
        c.argument('subscription_state_override_actions', action=AddSubscriptionStateOverrideActions, nargs='+',
                   help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('soft_delete_ttl', help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('provider_hub_metadata_provider_authorizations',
                   action=AddProviderHubMetadataProviderAuthorizations, nargs='+', help='', arg_group='Provider Hub '
                   'Metadata')
        c.argument('resource_provider_authentication', action=AddProviderAuthentication, nargs='+', help='',
                   arg_group='Provider Hub Metadata')
        c.argument('authorizations', action=AddAuthorizations, nargs='+', help='', arg_group='Provider Hub Metadata '
                   'Third Party Provider Authorization')
        c.argument('managed_by_tenant_id', type=str, help='', arg_group='Provider Hub Metadata Third Party Provider '
                   'Authorization')

    with self.argument_context('providerhub provider-registration update') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('provider_authentication', action=AddProviderAuthentication, nargs='+', help='')
        c.argument('provider_authorizations', action=AddProviderAuthorizations, nargs='+', help='')
        c.argument('namespace', type=str, help='')
        c.argument('provider_version', type=str, help='')
        c.argument('provider_type', arg_type=get_enum_type(['NotSpecified', 'Internal', 'External', 'Hidden',
                                                            'RegistrationFree', 'LegacyRegistrationRequired',
                                                            'TenantOnly', 'AuthorizationFree']), help='')
        c.argument('required_features', nargs='+', help='')
        c.argument('capabilities', action=AddCapabilities, nargs='+', help='')
        c.argument('metadata', type=validate_file_or_dict, help='Any object Expected value: json-string/@json-file.')
        c.argument('template_deployment_options', action=AddTemplateDeploymentOptions, nargs='+', help='')
        c.argument('schema_owners', nargs='+', help='', arg_group='Management')
        c.argument('manifest_owners', nargs='+', help='', arg_group='Management')
        c.argument('incident_routing_service', type=str, help='', arg_group='Management')
        c.argument('incident_routing_team', type=str, help='', arg_group='Management')
        c.argument('incident_contact_email', type=str, help='', arg_group='Management')
        c.argument('service_tree_infos', action=AddCustomrolloutsServiceTreeInfos, nargs='+', help='',
                   arg_group='Management')
        c.argument('resource_access_policy', arg_type=get_enum_type(['NotSpecified', 'AcisReadAllowed',
                                                                     'AcisActionAllowed']), help='',
                   arg_group='Management')
        c.argument('resource_access_roles', type=validate_file_or_dict,
                   help=' Expected value: json-string/@json-file.', arg_group='Management')
        c.argument('opt_in_headers', arg_type=get_enum_type(['NotSpecified', 'SignedUserToken',
                                                             'ClientGroupMembership', 'SignedAuxiliaryTokens',
                                                             'UnboundedClientGroupMembership']), help='',
                   arg_group='Request Header Options')
        c.argument('required_features_policy', arg_type=get_enum_type(['Any', 'All']), help='', arg_group='Features '
                   'Rule')
        c.argument('subscription_state_override_actions', action=AddSubscriptionStateOverrideActions, nargs='+',
                   help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('soft_delete_ttl', help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('provider_hub_metadata_provider_authorizations',
                   action=AddProviderHubMetadataProviderAuthorizations, nargs='+', help='', arg_group='Provider Hub '
                   'Metadata')
        c.argument('resource_provider_authentication', action=AddProviderAuthentication, nargs='+', help='',
                   arg_group='Provider Hub Metadata')
        c.argument('authorizations', action=AddAuthorizations, nargs='+', help='', arg_group='Provider Hub Metadata '
                   'Third Party Provider Authorization')
        c.argument('managed_by_tenant_id', type=str, help='', arg_group='Provider Hub Metadata Third Party Provider '
                   'Authorization')
        c.ignore('properties')

    with self.argument_context('providerhub provider-registration delete') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')

    with self.argument_context('providerhub provider-registration generate-operation') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')

    with self.argument_context('providerhub provider-registration wait') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')

    with self.argument_context('providerhub resource-type-registration list') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')

    with self.argument_context('providerhub resource-type-registration show') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('resource_type', type=str, help='The resource type.', id_part='child_name_1')

    with self.argument_context('providerhub resource-type-registration create') as c:
        c.argument('provider_namespace', type=str,
                   help='The name of the resource provider hosted within ProviderHub.')
        c.argument('resource_type', type=str, help='The resource type.')
        c.argument('routing_type', arg_type=get_enum_type(['Default', 'ProxyOnly', 'HostBased', 'Extension',
                                                           'Tenant', 'Fanout', 'LocationBased', 'Failover',
                                                           'CascadeExtension']), help='')
        c.argument('regionality', arg_type=get_enum_type(['NotSpecified', 'Global', 'Regional']), help='')
        c.argument('endpoints', action=AddResourceTypeEndpointProperties, nargs='+', help='The resource '
                   'type endpoint properties.')
        c.argument('marketplace_type', arg_type=get_enum_type(['NotSpecified', 'AddOn', 'Bypass', 'Store']), help='')
        c.argument('swagger_specifications', action=AddSwaggerSpecifications, nargs='+', help='')
        c.argument('allowed_unauthorized_actions', nargs='+', help='')
        c.argument('authorization_action_mappings', action=AddAuthorizationActionMappings, nargs='+', help='')
        c.argument('linked_access_checks', action=AddLinkedAccessChecks, nargs='+', help='')
        c.argument('default_api_version', type=str, help='')
        c.argument('logging_rules', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('throttling_rules', action=AddThrottlingRules, nargs='+', help='')
        c.argument('required_features', nargs='+', help='')
        c.argument('enable_async_operation', arg_type=get_three_state_flag(), help='')
        c.argument('enable_third_party_s2_s', arg_type=get_three_state_flag(), help='')
        c.argument('is_pure_proxy', arg_type=get_three_state_flag(), help='')
        c.argument('identity_management', action=AddIdentityManagement, nargs='+', help='')
        c.argument('check_name_availability_specifications', action=AddCheckNameAvailabilitySpecifications, nargs='+',
                   help='')
        c.argument('disallowed_action_verbs', nargs='+', help='')
        c.argument('service_tree_infos', action=AddResourcetyperegistrationServiceTreeInfos, nargs='+', help='')
        c.argument('subscription_state_rules', action=AddSubscriptionStateRules, nargs='+', help='')
        c.argument('template_deployment_options', action=AddTemplateDeploymentOptions, nargs='+', help='')
        c.argument('extended_locations', action=AddExtendedLocations, nargs='+', help='')
        c.argument('resource_move_policy', action=AddResourceMovePolicy, nargs='+', help='')
        c.argument('resource_deletion_policy', arg_type=get_enum_type(['NotSpecified', 'CascadeDeleteAll',
                                                                       'CascadeDeleteProxyOnlyChildren']), help='')
        c.argument('opt_in_headers', arg_type=get_enum_type(['NotSpecified', 'SignedUserToken',
                                                             'ClientGroupMembership', 'SignedAuxiliaryTokens',
                                                             'UnboundedClientGroupMembership']), help='',
                   arg_group='Request Header Options')
        c.argument('subscription_state_override_actions', action=AddSubscriptionStateOverrideActions, nargs='+',
                   help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('soft_delete_ttl', help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('required_features_policy', arg_type=get_enum_type(['Any', 'All']), help='', arg_group='Features '
                   'Rule')
        c.argument('resource_creation_begin', action=AddResourceCreationBegin, nargs='+', help='',
                   arg_group='Extension Options')

    with self.argument_context('providerhub resource-type-registration update') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('resource_type', type=str, help='The resource type.', id_part='child_name_1')
        c.argument('routing_type', arg_type=get_enum_type(['Default', 'ProxyOnly', 'HostBased', 'Extension', 'Tenant',
                                                           'Fanout', 'LocationBased', 'Failover', 'CascadeExtension']),
                   help='')
        c.argument('regionality', arg_type=get_enum_type(['NotSpecified', 'Global', 'Regional']), help='')
        c.argument('endpoints', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('marketplace_type', arg_type=get_enum_type(['NotSpecified', 'AddOn', 'Bypass', 'Store']), help='')
        c.argument('swagger_specifications', action=AddSwaggerSpecifications, nargs='+', help='')
        c.argument('allowed_unauthorized_actions', nargs='+', help='')
        c.argument('authorization_action_mappings', action=AddAuthorizationActionMappings, nargs='+', help='')
        c.argument('linked_access_checks', action=AddLinkedAccessChecks, nargs='+', help='')
        c.argument('default_api_version', type=str, help='')
        c.argument('logging_rules', type=validate_file_or_dict, help=' Expected value: json-string/@json-file.')
        c.argument('throttling_rules', action=AddThrottlingRules, nargs='+', help='')
        c.argument('required_features', nargs='+', help='')
        c.argument('enable_async_operation', arg_type=get_three_state_flag(), help='')
        c.argument('enable_third_party_s2_s', arg_type=get_three_state_flag(), help='')
        c.argument('is_pure_proxy', arg_type=get_three_state_flag(), help='')
        c.argument('identity_management', action=AddIdentityManagement, nargs='+', help='')
        c.argument('check_name_availability_specifications', action=AddCheckNameAvailabilitySpecifications, nargs='+',
                   help='')
        c.argument('disallowed_action_verbs', nargs='+', help='')
        c.argument('service_tree_infos', action=AddResourcetyperegistrationServiceTreeInfos, nargs='+', help='')
        c.argument('subscription_state_rules', action=AddSubscriptionStateRules, nargs='+', help='')
        c.argument('template_deployment_options', action=AddTemplateDeploymentOptions, nargs='+', help='')
        c.argument('extended_locations', action=AddExtendedLocations, nargs='+', help='')
        c.argument('resource_move_policy', action=AddResourceMovePolicy, nargs='+', help='')
        c.argument('resource_deletion_policy', arg_type=get_enum_type(['NotSpecified', 'CascadeDeleteAll',
                                                                       'CascadeDeleteProxyOnlyChildren']), help='')
        c.argument('opt_in_headers', arg_type=get_enum_type(['NotSpecified', 'SignedUserToken',
                                                             'ClientGroupMembership', 'SignedAuxiliaryTokens',
                                                             'UnboundedClientGroupMembership']), help='',
                   arg_group='Request Header Options')
        c.argument('subscription_state_override_actions', action=AddSubscriptionStateOverrideActions, nargs='+',
                   help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('soft_delete_ttl', help='', arg_group='Subscription Lifecycle Notification Specifications')
        c.argument('required_features_policy', arg_type=get_enum_type(['Any', 'All']), help='', arg_group='Features '
                   'Rule')
        c.argument('resource_creation_begin', action=AddResourceCreationBegin, nargs='+', help='',
                   arg_group='Extension Options')

    with self.argument_context('providerhub resource-type-registration delete') as c:
        c.argument('provider_namespace', type=str, help='The name of the resource provider hosted within ProviderHub.',
                   id_part='name')
        c.argument('resource_type', type=str, help='The resource type.', id_part='child_name_1')
