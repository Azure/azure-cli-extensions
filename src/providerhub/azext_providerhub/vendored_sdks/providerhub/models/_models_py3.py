# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Dict, List, Optional, Union

from azure.core.exceptions import HttpResponseError
import msrest.serialization

from ._provider_hub_enums import *


class AuthorizationActionMapping(msrest.serialization.Model):
    """AuthorizationActionMapping.

    :param original:
    :type original: str
    :param desired:
    :type desired: str
    """

    _attribute_map = {
        'original': {'key': 'original', 'type': 'str'},
        'desired': {'key': 'desired', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        original: Optional[str] = None,
        desired: Optional[str] = None,
        **kwargs
    ):
        super(AuthorizationActionMapping, self).__init__(**kwargs)
        self.original = original
        self.desired = desired


class CanaryTrafficRegionRolloutConfiguration(msrest.serialization.Model):
    """CanaryTrafficRegionRolloutConfiguration.

    :param skip_regions:
    :type skip_regions: list[str]
    :param regions:
    :type regions: list[str]
    """

    _attribute_map = {
        'skip_regions': {'key': 'skipRegions', 'type': '[str]'},
        'regions': {'key': 'regions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        skip_regions: Optional[List[str]] = None,
        regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(CanaryTrafficRegionRolloutConfiguration, self).__init__(**kwargs)
        self.skip_regions = skip_regions
        self.regions = regions


class CheckinManifestInfo(msrest.serialization.Model):
    """CheckinManifestInfo.

    All required parameters must be populated in order to send to Azure.

    :param is_checked_in: Required.
    :type is_checked_in: bool
    :param status_message: Required.
    :type status_message: str
    :param pull_request:
    :type pull_request: str
    :param commit_id:
    :type commit_id: str
    """

    _validation = {
        'is_checked_in': {'required': True},
        'status_message': {'required': True},
    }

    _attribute_map = {
        'is_checked_in': {'key': 'isCheckedIn', 'type': 'bool'},
        'status_message': {'key': 'statusMessage', 'type': 'str'},
        'pull_request': {'key': 'pullRequest', 'type': 'str'},
        'commit_id': {'key': 'commitId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        is_checked_in: bool,
        status_message: str,
        pull_request: Optional[str] = None,
        commit_id: Optional[str] = None,
        **kwargs
    ):
        super(CheckinManifestInfo, self).__init__(**kwargs)
        self.is_checked_in = is_checked_in
        self.status_message = status_message
        self.pull_request = pull_request
        self.commit_id = commit_id


class CheckinManifestParams(msrest.serialization.Model):
    """CheckinManifestParams.

    All required parameters must be populated in order to send to Azure.

    :param environment: Required. The environment supplied to the checkin manifest operation.
    :type environment: str
    :param baseline_arm_manifest_location: Required. The baseline ARM manifest location supplied to
     the checkin manifest operation.
    :type baseline_arm_manifest_location: str
    """

    _validation = {
        'environment': {'required': True},
        'baseline_arm_manifest_location': {'required': True},
    }

    _attribute_map = {
        'environment': {'key': 'environment', 'type': 'str'},
        'baseline_arm_manifest_location': {'key': 'baselineArmManifestLocation', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        environment: str,
        baseline_arm_manifest_location: str,
        **kwargs
    ):
        super(CheckinManifestParams, self).__init__(**kwargs)
        self.environment = environment
        self.baseline_arm_manifest_location = baseline_arm_manifest_location


class CheckNameAvailabilitySpecifications(msrest.serialization.Model):
    """CheckNameAvailabilitySpecifications.

    :param enable_default_validation:
    :type enable_default_validation: bool
    :param resource_types_with_custom_validation:
    :type resource_types_with_custom_validation: list[str]
    """

    _attribute_map = {
        'enable_default_validation': {'key': 'enableDefaultValidation', 'type': 'bool'},
        'resource_types_with_custom_validation': {'key': 'resourceTypesWithCustomValidation', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        enable_default_validation: Optional[bool] = None,
        resource_types_with_custom_validation: Optional[List[str]] = None,
        **kwargs
    ):
        super(CheckNameAvailabilitySpecifications, self).__init__(**kwargs)
        self.enable_default_validation = enable_default_validation
        self.resource_types_with_custom_validation = resource_types_with_custom_validation


class Resource(msrest.serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class CustomRollout(Resource):
    """Rollout details.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties: Required. Properties of the rollout.
    :type properties: ~provider_hub.models.CustomRolloutProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
        'properties': {'required': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'CustomRolloutProperties'},
    }

    def __init__(
        self,
        *,
        properties: "CustomRolloutProperties",
        **kwargs
    ):
        super(CustomRollout, self).__init__(**kwargs)
        self.properties = properties


class CustomRolloutArrayResponseWithContinuation(msrest.serialization.Model):
    """CustomRolloutArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.CustomRollout]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[CustomRollout]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["CustomRollout"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(CustomRolloutArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class CustomRolloutProperties(msrest.serialization.Model):
    """CustomRolloutProperties.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param specification: Required.
    :type specification: ~provider_hub.models.CustomRolloutSpecification
    :param status:
    :type status: ~provider_hub.models.CustomRolloutStatus
    """

    _validation = {
        'specification': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'specification': {'key': 'specification', 'type': 'CustomRolloutSpecification'},
        'status': {'key': 'status', 'type': 'CustomRolloutStatus'},
    }

    def __init__(
        self,
        *,
        specification: "CustomRolloutSpecification",
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional["CustomRolloutStatus"] = None,
        **kwargs
    ):
        super(CustomRolloutProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.specification = specification
        self.status = status


class CustomRolloutPropertiesautogenerated(CustomRolloutProperties):
    """Properties of the rollout.

    All required parameters must be populated in order to send to Azure.

    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param specification: Required.
    :type specification: ~provider_hub.models.CustomRolloutSpecification
    :param status:
    :type status: ~provider_hub.models.CustomRolloutStatus
    """

    _validation = {
        'specification': {'required': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'specification': {'key': 'specification', 'type': 'CustomRolloutSpecification'},
        'status': {'key': 'status', 'type': 'CustomRolloutStatus'},
    }

    def __init__(
        self,
        *,
        specification: "CustomRolloutSpecification",
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        status: Optional["CustomRolloutStatus"] = None,
        **kwargs
    ):
        super(CustomRolloutPropertiesautogenerated, self).__init__(provisioning_state=provisioning_state, specification=specification, status=status, **kwargs)


class CustomRolloutSpecification(msrest.serialization.Model):
    """CustomRolloutSpecification.

    All required parameters must be populated in order to send to Azure.

    :param canary: Required.
    :type canary: ~provider_hub.models.TrafficRegions
    :param provider_registration:
    :type provider_registration: ~provider_hub.models.ProviderRegistration
    :param resource_type_registrations:
    :type resource_type_registrations: list[~provider_hub.models.ResourceTypeRegistration]
    """

    _validation = {
        'canary': {'required': True},
    }

    _attribute_map = {
        'canary': {'key': 'canary', 'type': 'TrafficRegions'},
        'provider_registration': {'key': 'providerRegistration', 'type': 'ProviderRegistration'},
        'resource_type_registrations': {'key': 'resourceTypeRegistrations', 'type': '[ResourceTypeRegistration]'},
    }

    def __init__(
        self,
        *,
        canary: "TrafficRegions",
        provider_registration: Optional["ProviderRegistration"] = None,
        resource_type_registrations: Optional[List["ResourceTypeRegistration"]] = None,
        **kwargs
    ):
        super(CustomRolloutSpecification, self).__init__(**kwargs)
        self.canary = canary
        self.provider_registration = provider_registration
        self.resource_type_registrations = resource_type_registrations


class CustomRolloutPropertiesSpecification(CustomRolloutSpecification):
    """CustomRolloutPropertiesSpecification.

    All required parameters must be populated in order to send to Azure.

    :param canary: Required.
    :type canary: ~provider_hub.models.TrafficRegions
    :param provider_registration:
    :type provider_registration: ~provider_hub.models.ProviderRegistration
    :param resource_type_registrations:
    :type resource_type_registrations: list[~provider_hub.models.ResourceTypeRegistration]
    """

    _validation = {
        'canary': {'required': True},
    }

    _attribute_map = {
        'canary': {'key': 'canary', 'type': 'TrafficRegions'},
        'provider_registration': {'key': 'providerRegistration', 'type': 'ProviderRegistration'},
        'resource_type_registrations': {'key': 'resourceTypeRegistrations', 'type': '[ResourceTypeRegistration]'},
    }

    def __init__(
        self,
        *,
        canary: "TrafficRegions",
        provider_registration: Optional["ProviderRegistration"] = None,
        resource_type_registrations: Optional[List["ResourceTypeRegistration"]] = None,
        **kwargs
    ):
        super(CustomRolloutPropertiesSpecification, self).__init__(canary=canary, provider_registration=provider_registration, resource_type_registrations=resource_type_registrations, **kwargs)


class CustomRolloutStatus(msrest.serialization.Model):
    """CustomRolloutStatus.

    :param completed_regions:
    :type completed_regions: list[str]
    :param failed_or_skipped_regions: Dictionary of :code:`<ExtendedErrorInfo>`.
    :type failed_or_skipped_regions: dict[str, ~provider_hub.models.ExtendedErrorInfo]
    """

    _attribute_map = {
        'completed_regions': {'key': 'completedRegions', 'type': '[str]'},
        'failed_or_skipped_regions': {'key': 'failedOrSkippedRegions', 'type': '{ExtendedErrorInfo}'},
    }

    def __init__(
        self,
        *,
        completed_regions: Optional[List[str]] = None,
        failed_or_skipped_regions: Optional[Dict[str, "ExtendedErrorInfo"]] = None,
        **kwargs
    ):
        super(CustomRolloutStatus, self).__init__(**kwargs)
        self.completed_regions = completed_regions
        self.failed_or_skipped_regions = failed_or_skipped_regions


class CustomRolloutPropertiesStatus(CustomRolloutStatus):
    """CustomRolloutPropertiesStatus.

    :param completed_regions:
    :type completed_regions: list[str]
    :param failed_or_skipped_regions: Dictionary of :code:`<ExtendedErrorInfo>`.
    :type failed_or_skipped_regions: dict[str, ~provider_hub.models.ExtendedErrorInfo]
    """

    _attribute_map = {
        'completed_regions': {'key': 'completedRegions', 'type': '[str]'},
        'failed_or_skipped_regions': {'key': 'failedOrSkippedRegions', 'type': '{ExtendedErrorInfo}'},
    }

    def __init__(
        self,
        *,
        completed_regions: Optional[List[str]] = None,
        failed_or_skipped_regions: Optional[Dict[str, "ExtendedErrorInfo"]] = None,
        **kwargs
    ):
        super(CustomRolloutPropertiesStatus, self).__init__(completed_regions=completed_regions, failed_or_skipped_regions=failed_or_skipped_regions, **kwargs)


class TrafficRegions(msrest.serialization.Model):
    """TrafficRegions.

    :param regions:
    :type regions: list[str]
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(TrafficRegions, self).__init__(**kwargs)
        self.regions = regions


class CustomRolloutSpecificationCanary(TrafficRegions):
    """CustomRolloutSpecificationCanary.

    :param regions:
    :type regions: list[str]
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(CustomRolloutSpecificationCanary, self).__init__(regions=regions, **kwargs)


class ProviderRegistration(Resource):
    """ProviderRegistration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.ProviderRegistrationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ProviderRegistrationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["ProviderRegistrationProperties"] = None,
        **kwargs
    ):
        super(ProviderRegistration, self).__init__(**kwargs)
        self.properties = properties


class CustomRolloutSpecificationProviderRegistration(ProviderRegistration):
    """CustomRolloutSpecificationProviderRegistration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.ProviderRegistrationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ProviderRegistrationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["ProviderRegistrationProperties"] = None,
        **kwargs
    ):
        super(CustomRolloutSpecificationProviderRegistration, self).__init__(properties=properties, **kwargs)


class DefaultRollout(Resource):
    """Default rollout definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties: Properties of the rollout.
    :type properties: ~provider_hub.models.DefaultRolloutProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DefaultRolloutProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["DefaultRolloutProperties"] = None,
        **kwargs
    ):
        super(DefaultRollout, self).__init__(**kwargs)
        self.properties = properties


class DefaultRolloutArrayResponseWithContinuation(msrest.serialization.Model):
    """DefaultRolloutArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.DefaultRollout]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[DefaultRollout]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["DefaultRollout"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(DefaultRolloutArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class DefaultRolloutProperties(msrest.serialization.Model):
    """DefaultRolloutProperties.

    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param specification:
    :type specification: ~provider_hub.models.DefaultRolloutSpecification
    :param status:
    :type status: ~provider_hub.models.DefaultRolloutStatus
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'specification': {'key': 'specification', 'type': 'DefaultRolloutSpecification'},
        'status': {'key': 'status', 'type': 'DefaultRolloutStatus'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        specification: Optional["DefaultRolloutSpecification"] = None,
        status: Optional["DefaultRolloutStatus"] = None,
        **kwargs
    ):
        super(DefaultRolloutProperties, self).__init__(**kwargs)
        self.provisioning_state = provisioning_state
        self.specification = specification
        self.status = status


class DefaultRolloutPropertiesautogenerated(DefaultRolloutProperties):
    """Properties of the rollout.

    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param specification:
    :type specification: ~provider_hub.models.DefaultRolloutSpecification
    :param status:
    :type status: ~provider_hub.models.DefaultRolloutStatus
    """

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'specification': {'key': 'specification', 'type': 'DefaultRolloutSpecification'},
        'status': {'key': 'status', 'type': 'DefaultRolloutStatus'},
    }

    def __init__(
        self,
        *,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        specification: Optional["DefaultRolloutSpecification"] = None,
        status: Optional["DefaultRolloutStatus"] = None,
        **kwargs
    ):
        super(DefaultRolloutPropertiesautogenerated, self).__init__(provisioning_state=provisioning_state, specification=specification, status=status, **kwargs)


class DefaultRolloutSpecification(msrest.serialization.Model):
    """DefaultRolloutSpecification.

    :param canary:
    :type canary: ~provider_hub.models.CanaryTrafficRegionRolloutConfiguration
    :param low_traffic:
    :type low_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param medium_traffic:
    :type medium_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param high_traffic:
    :type high_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param rest_of_the_world_group_one:
    :type rest_of_the_world_group_one: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param rest_of_the_world_group_two:
    :type rest_of_the_world_group_two: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param provider_registration:
    :type provider_registration: ~provider_hub.models.ProviderRegistration
    :param resource_type_registrations:
    :type resource_type_registrations: list[~provider_hub.models.ResourceTypeRegistration]
    """

    _attribute_map = {
        'canary': {'key': 'canary', 'type': 'CanaryTrafficRegionRolloutConfiguration'},
        'low_traffic': {'key': 'lowTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'medium_traffic': {'key': 'mediumTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'high_traffic': {'key': 'highTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'rest_of_the_world_group_one': {'key': 'restOfTheWorldGroupOne', 'type': 'TrafficRegionRolloutConfiguration'},
        'rest_of_the_world_group_two': {'key': 'restOfTheWorldGroupTwo', 'type': 'TrafficRegionRolloutConfiguration'},
        'provider_registration': {'key': 'providerRegistration', 'type': 'ProviderRegistration'},
        'resource_type_registrations': {'key': 'resourceTypeRegistrations', 'type': '[ResourceTypeRegistration]'},
    }

    def __init__(
        self,
        *,
        canary: Optional["CanaryTrafficRegionRolloutConfiguration"] = None,
        low_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        medium_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        high_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        rest_of_the_world_group_one: Optional["TrafficRegionRolloutConfiguration"] = None,
        rest_of_the_world_group_two: Optional["TrafficRegionRolloutConfiguration"] = None,
        provider_registration: Optional["ProviderRegistration"] = None,
        resource_type_registrations: Optional[List["ResourceTypeRegistration"]] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecification, self).__init__(**kwargs)
        self.canary = canary
        self.low_traffic = low_traffic
        self.medium_traffic = medium_traffic
        self.high_traffic = high_traffic
        self.rest_of_the_world_group_one = rest_of_the_world_group_one
        self.rest_of_the_world_group_two = rest_of_the_world_group_two
        self.provider_registration = provider_registration
        self.resource_type_registrations = resource_type_registrations


class DefaultRolloutPropertiesSpecification(DefaultRolloutSpecification):
    """DefaultRolloutPropertiesSpecification.

    :param canary:
    :type canary: ~provider_hub.models.CanaryTrafficRegionRolloutConfiguration
    :param low_traffic:
    :type low_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param medium_traffic:
    :type medium_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param high_traffic:
    :type high_traffic: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param rest_of_the_world_group_one:
    :type rest_of_the_world_group_one: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param rest_of_the_world_group_two:
    :type rest_of_the_world_group_two: ~provider_hub.models.TrafficRegionRolloutConfiguration
    :param provider_registration:
    :type provider_registration: ~provider_hub.models.ProviderRegistration
    :param resource_type_registrations:
    :type resource_type_registrations: list[~provider_hub.models.ResourceTypeRegistration]
    """

    _attribute_map = {
        'canary': {'key': 'canary', 'type': 'CanaryTrafficRegionRolloutConfiguration'},
        'low_traffic': {'key': 'lowTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'medium_traffic': {'key': 'mediumTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'high_traffic': {'key': 'highTraffic', 'type': 'TrafficRegionRolloutConfiguration'},
        'rest_of_the_world_group_one': {'key': 'restOfTheWorldGroupOne', 'type': 'TrafficRegionRolloutConfiguration'},
        'rest_of_the_world_group_two': {'key': 'restOfTheWorldGroupTwo', 'type': 'TrafficRegionRolloutConfiguration'},
        'provider_registration': {'key': 'providerRegistration', 'type': 'ProviderRegistration'},
        'resource_type_registrations': {'key': 'resourceTypeRegistrations', 'type': '[ResourceTypeRegistration]'},
    }

    def __init__(
        self,
        *,
        canary: Optional["CanaryTrafficRegionRolloutConfiguration"] = None,
        low_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        medium_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        high_traffic: Optional["TrafficRegionRolloutConfiguration"] = None,
        rest_of_the_world_group_one: Optional["TrafficRegionRolloutConfiguration"] = None,
        rest_of_the_world_group_two: Optional["TrafficRegionRolloutConfiguration"] = None,
        provider_registration: Optional["ProviderRegistration"] = None,
        resource_type_registrations: Optional[List["ResourceTypeRegistration"]] = None,
        **kwargs
    ):
        super(DefaultRolloutPropertiesSpecification, self).__init__(canary=canary, low_traffic=low_traffic, medium_traffic=medium_traffic, high_traffic=high_traffic, rest_of_the_world_group_one=rest_of_the_world_group_one, rest_of_the_world_group_two=rest_of_the_world_group_two, provider_registration=provider_registration, resource_type_registrations=resource_type_registrations, **kwargs)


class RolloutStatusBase(msrest.serialization.Model):
    """RolloutStatusBase.

    :param completed_regions:
    :type completed_regions: list[str]
    :param failed_or_skipped_regions: Dictionary of :code:`<ExtendedErrorInfo>`.
    :type failed_or_skipped_regions: dict[str, ~provider_hub.models.ExtendedErrorInfo]
    """

    _attribute_map = {
        'completed_regions': {'key': 'completedRegions', 'type': '[str]'},
        'failed_or_skipped_regions': {'key': 'failedOrSkippedRegions', 'type': '{ExtendedErrorInfo}'},
    }

    def __init__(
        self,
        *,
        completed_regions: Optional[List[str]] = None,
        failed_or_skipped_regions: Optional[Dict[str, "ExtendedErrorInfo"]] = None,
        **kwargs
    ):
        super(RolloutStatusBase, self).__init__(**kwargs)
        self.completed_regions = completed_regions
        self.failed_or_skipped_regions = failed_or_skipped_regions


class DefaultRolloutStatus(RolloutStatusBase):
    """DefaultRolloutStatus.

    :param completed_regions:
    :type completed_regions: list[str]
    :param failed_or_skipped_regions: Dictionary of :code:`<ExtendedErrorInfo>`.
    :type failed_or_skipped_regions: dict[str, ~provider_hub.models.ExtendedErrorInfo]
    :param next_traffic_region:  Possible values include: "NotSpecified", "Canary", "LowTraffic",
     "MediumTraffic", "HighTraffic", "None", "RestOfTheWorldGroupOne", "RestOfTheWorldGroupTwo".
    :type next_traffic_region: str or ~provider_hub.models.TrafficRegionCategory
    :param next_traffic_region_scheduled_time:
    :type next_traffic_region_scheduled_time: ~datetime.datetime
    :param subscription_reregistration_result:  Possible values include: "NotApplicable",
     "ConditionalUpdate", "ForcedUpdate", "Failed".
    :type subscription_reregistration_result: str or
     ~provider_hub.models.SubscriptionReregistrationResult
    """

    _attribute_map = {
        'completed_regions': {'key': 'completedRegions', 'type': '[str]'},
        'failed_or_skipped_regions': {'key': 'failedOrSkippedRegions', 'type': '{ExtendedErrorInfo}'},
        'next_traffic_region': {'key': 'nextTrafficRegion', 'type': 'str'},
        'next_traffic_region_scheduled_time': {'key': 'nextTrafficRegionScheduledTime', 'type': 'iso-8601'},
        'subscription_reregistration_result': {'key': 'subscriptionReregistrationResult', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        completed_regions: Optional[List[str]] = None,
        failed_or_skipped_regions: Optional[Dict[str, "ExtendedErrorInfo"]] = None,
        next_traffic_region: Optional[Union[str, "TrafficRegionCategory"]] = None,
        next_traffic_region_scheduled_time: Optional[datetime.datetime] = None,
        subscription_reregistration_result: Optional[Union[str, "SubscriptionReregistrationResult"]] = None,
        **kwargs
    ):
        super(DefaultRolloutStatus, self).__init__(completed_regions=completed_regions, failed_or_skipped_regions=failed_or_skipped_regions, **kwargs)
        self.next_traffic_region = next_traffic_region
        self.next_traffic_region_scheduled_time = next_traffic_region_scheduled_time
        self.subscription_reregistration_result = subscription_reregistration_result


class DefaultRolloutPropertiesStatus(DefaultRolloutStatus):
    """DefaultRolloutPropertiesStatus.

    :param completed_regions:
    :type completed_regions: list[str]
    :param failed_or_skipped_regions: Dictionary of :code:`<ExtendedErrorInfo>`.
    :type failed_or_skipped_regions: dict[str, ~provider_hub.models.ExtendedErrorInfo]
    :param next_traffic_region:  Possible values include: "NotSpecified", "Canary", "LowTraffic",
     "MediumTraffic", "HighTraffic", "None", "RestOfTheWorldGroupOne", "RestOfTheWorldGroupTwo".
    :type next_traffic_region: str or ~provider_hub.models.TrafficRegionCategory
    :param next_traffic_region_scheduled_time:
    :type next_traffic_region_scheduled_time: ~datetime.datetime
    :param subscription_reregistration_result:  Possible values include: "NotApplicable",
     "ConditionalUpdate", "ForcedUpdate", "Failed".
    :type subscription_reregistration_result: str or
     ~provider_hub.models.SubscriptionReregistrationResult
    """

    _attribute_map = {
        'completed_regions': {'key': 'completedRegions', 'type': '[str]'},
        'failed_or_skipped_regions': {'key': 'failedOrSkippedRegions', 'type': '{ExtendedErrorInfo}'},
        'next_traffic_region': {'key': 'nextTrafficRegion', 'type': 'str'},
        'next_traffic_region_scheduled_time': {'key': 'nextTrafficRegionScheduledTime', 'type': 'iso-8601'},
        'subscription_reregistration_result': {'key': 'subscriptionReregistrationResult', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        completed_regions: Optional[List[str]] = None,
        failed_or_skipped_regions: Optional[Dict[str, "ExtendedErrorInfo"]] = None,
        next_traffic_region: Optional[Union[str, "TrafficRegionCategory"]] = None,
        next_traffic_region_scheduled_time: Optional[datetime.datetime] = None,
        subscription_reregistration_result: Optional[Union[str, "SubscriptionReregistrationResult"]] = None,
        **kwargs
    ):
        super(DefaultRolloutPropertiesStatus, self).__init__(completed_regions=completed_regions, failed_or_skipped_regions=failed_or_skipped_regions, next_traffic_region=next_traffic_region, next_traffic_region_scheduled_time=next_traffic_region_scheduled_time, subscription_reregistration_result=subscription_reregistration_result, **kwargs)


class DefaultRolloutSpecificationCanary(CanaryTrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationCanary.

    :param skip_regions:
    :type skip_regions: list[str]
    :param regions:
    :type regions: list[str]
    """

    _attribute_map = {
        'skip_regions': {'key': 'skipRegions', 'type': '[str]'},
        'regions': {'key': 'regions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        skip_regions: Optional[List[str]] = None,
        regions: Optional[List[str]] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationCanary, self).__init__(skip_regions=skip_regions, regions=regions, **kwargs)


class TrafficRegionRolloutConfiguration(TrafficRegions):
    """TrafficRegionRolloutConfiguration.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(TrafficRegionRolloutConfiguration, self).__init__(regions=regions, **kwargs)
        self.wait_duration = wait_duration


class DefaultRolloutSpecificationHighTraffic(TrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationHighTraffic.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationHighTraffic, self).__init__(regions=regions, wait_duration=wait_duration, **kwargs)


class DefaultRolloutSpecificationLowTraffic(TrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationLowTraffic.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationLowTraffic, self).__init__(regions=regions, wait_duration=wait_duration, **kwargs)


class DefaultRolloutSpecificationMediumTraffic(TrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationMediumTraffic.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationMediumTraffic, self).__init__(regions=regions, wait_duration=wait_duration, **kwargs)


class DefaultRolloutSpecificationProviderRegistration(ProviderRegistration):
    """DefaultRolloutSpecificationProviderRegistration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.ProviderRegistrationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ProviderRegistrationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["ProviderRegistrationProperties"] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationProviderRegistration, self).__init__(properties=properties, **kwargs)


class DefaultRolloutSpecificationRestOfTheWorldGroupOne(TrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationRestOfTheWorldGroupOne.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationRestOfTheWorldGroupOne, self).__init__(regions=regions, wait_duration=wait_duration, **kwargs)


class DefaultRolloutSpecificationRestOfTheWorldGroupTwo(TrafficRegionRolloutConfiguration):
    """DefaultRolloutSpecificationRestOfTheWorldGroupTwo.

    :param regions:
    :type regions: list[str]
    :param wait_duration:
    :type wait_duration: ~datetime.timedelta
    """

    _attribute_map = {
        'regions': {'key': 'regions', 'type': '[str]'},
        'wait_duration': {'key': 'waitDuration', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        regions: Optional[List[str]] = None,
        wait_duration: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(DefaultRolloutSpecificationRestOfTheWorldGroupTwo, self).__init__(regions=regions, wait_duration=wait_duration, **kwargs)


class Error(msrest.serialization.Model):
    """Standard error object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Server-defined set of error codes.
    :vartype code: str
    :ivar message: Human-readable representation of the error.
    :vartype message: str
    :ivar target: Target of the error.
    :vartype target: str
    :ivar details: Array of details about specific errors that led to this reported error.
    :vartype details: list[~provider_hub.models.Error]
    :ivar inner_error: Object containing more specific information than  the current object about
     the error.
    :vartype inner_error: ~provider_hub.models.InnerError
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'inner_error': {'key': 'innerError', 'type': 'InnerError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(Error, self).__init__(**kwargs)
        self.code = None
        self.message = None
        self.target = None
        self.details = None
        self.inner_error = None


class InnerError(msrest.serialization.Model):
    """Inner error containing list of errors.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar code: Specific error code than was provided by the containing error.
    :vartype code: str
    :ivar inner_error: Object containing more specific information than the current object about
     the error.
    :vartype inner_error: object
    """

    _validation = {
        'code': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(InnerError, self).__init__(**kwargs)
        self.additional_properties = additional_properties
        self.code = None
        self.inner_error = None


class ErrorInnerError(InnerError):
    """Object containing more specific information than  the current object about the error.

    Variables are only populated by the server, and will be ignored when sending a request.

    :param additional_properties: Unmatched properties from the message are deserialized to this
     collection.
    :type additional_properties: dict[str, object]
    :ivar code: Specific error code than was provided by the containing error.
    :vartype code: str
    :ivar inner_error: Object containing more specific information than the current object about
     the error.
    :vartype inner_error: object
    """

    _validation = {
        'code': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'additional_properties': {'key': '', 'type': '{object}'},
        'code': {'key': 'code', 'type': 'str'},
        'inner_error': {'key': 'innerError', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        additional_properties: Optional[Dict[str, object]] = None,
        **kwargs
    ):
        super(ErrorInnerError, self).__init__(additional_properties=additional_properties, **kwargs)


class ErrorResponse(msrest.serialization.Model):
    """Standard error response.

    :param error: Standard error object.
    :type error: ~provider_hub.models.Error
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'Error'},
    }

    def __init__(
        self,
        *,
        error: Optional["Error"] = None,
        **kwargs
    ):
        super(ErrorResponse, self).__init__(**kwargs)
        self.error = error


class ErrorResponseError(Error):
    """Standard error object.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: Server-defined set of error codes.
    :vartype code: str
    :ivar message: Human-readable representation of the error.
    :vartype message: str
    :ivar target: Target of the error.
    :vartype target: str
    :ivar details: Array of details about specific errors that led to this reported error.
    :vartype details: list[~provider_hub.models.Error]
    :ivar inner_error: Object containing more specific information than  the current object about
     the error.
    :vartype inner_error: ~provider_hub.models.InnerError
    """

    _validation = {
        'code': {'readonly': True},
        'message': {'readonly': True},
        'target': {'readonly': True},
        'details': {'readonly': True},
        'inner_error': {'readonly': True},
    }

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[Error]'},
        'inner_error': {'key': 'innerError', 'type': 'InnerError'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ErrorResponseError, self).__init__(**kwargs)


class ExtendedErrorInfo(msrest.serialization.Model):
    """ExtendedErrorInfo.

    :param code:
    :type code: str
    :param target:
    :type target: str
    :param message:
    :type message: str
    :param details:
    :type details: list[~provider_hub.models.ExtendedErrorInfo]
    :param additional_info:
    :type additional_info: list[~provider_hub.models.TypedErrorInfo]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'details': {'key': 'details', 'type': '[ExtendedErrorInfo]'},
        'additional_info': {'key': 'additionalInfo', 'type': '[TypedErrorInfo]'},
    }

    def __init__(
        self,
        *,
        code: Optional[str] = None,
        target: Optional[str] = None,
        message: Optional[str] = None,
        details: Optional[List["ExtendedErrorInfo"]] = None,
        additional_info: Optional[List["TypedErrorInfo"]] = None,
        **kwargs
    ):
        super(ExtendedErrorInfo, self).__init__(**kwargs)
        self.code = code
        self.target = target
        self.message = message
        self.details = details
        self.additional_info = additional_info


class ExtendedLocationOptions(msrest.serialization.Model):
    """ExtendedLocationOptions.

    :param type:
    :type type: str
    :param supported_policy:
    :type supported_policy: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'supported_policy': {'key': 'supportedPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[str] = None,
        supported_policy: Optional[str] = None,
        **kwargs
    ):
        super(ExtendedLocationOptions, self).__init__(**kwargs)
        self.type = type
        self.supported_policy = supported_policy


class ExtensionOptions(msrest.serialization.Model):
    """ExtensionOptions.

    :param request:
    :type request: list[str or ~provider_hub.models.ExtensionOptionType]
    :param response:
    :type response: list[str or ~provider_hub.models.ExtensionOptionType]
    """

    _attribute_map = {
        'request': {'key': 'request', 'type': '[str]'},
        'response': {'key': 'response', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        request: Optional[List[Union[str, "ExtensionOptionType"]]] = None,
        response: Optional[List[Union[str, "ExtensionOptionType"]]] = None,
        **kwargs
    ):
        super(ExtensionOptions, self).__init__(**kwargs)
        self.request = request
        self.response = response


class FeaturesRule(msrest.serialization.Model):
    """FeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(FeaturesRule, self).__init__(**kwargs)
        self.required_features_policy = required_features_policy


class IdentityManagement(msrest.serialization.Model):
    """IdentityManagement.

    :param type:  Possible values include: "NotSpecified", "SystemAssigned", "UserAssigned",
     "Actor", "DelegatedResourceIdentity".
    :type type: str or ~provider_hub.models.IdentityManagementTypes
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "IdentityManagementTypes"]] = None,
        **kwargs
    ):
        super(IdentityManagement, self).__init__(**kwargs)
        self.type = type


class IdentityManagementProperties(msrest.serialization.Model):
    """IdentityManagementProperties.

    :param type:  Possible values include: "NotSpecified", "SystemAssigned", "UserAssigned",
     "Actor", "DelegatedResourceIdentity".
    :type type: str or ~provider_hub.models.IdentityManagementTypes
    :param application_id:
    :type application_id: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "IdentityManagementTypes"]] = None,
        application_id: Optional[str] = None,
        **kwargs
    ):
        super(IdentityManagementProperties, self).__init__(**kwargs)
        self.type = type
        self.application_id = application_id


class LightHouseAuthorization(msrest.serialization.Model):
    """LightHouseAuthorization.

    All required parameters must be populated in order to send to Azure.

    :param principal_id: Required.
    :type principal_id: str
    :param role_definition_id: Required.
    :type role_definition_id: str
    """

    _validation = {
        'principal_id': {'required': True},
        'role_definition_id': {'required': True},
    }

    _attribute_map = {
        'principal_id': {'key': 'principalId', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        principal_id: str,
        role_definition_id: str,
        **kwargs
    ):
        super(LightHouseAuthorization, self).__init__(**kwargs)
        self.principal_id = principal_id
        self.role_definition_id = role_definition_id


class LinkedAccessCheck(msrest.serialization.Model):
    """LinkedAccessCheck.

    :param action_name:
    :type action_name: str
    :param linked_property:
    :type linked_property: str
    :param linked_action:
    :type linked_action: str
    :param linked_action_verb:
    :type linked_action_verb: str
    :param linked_type:
    :type linked_type: str
    """

    _attribute_map = {
        'action_name': {'key': 'actionName', 'type': 'str'},
        'linked_property': {'key': 'linkedProperty', 'type': 'str'},
        'linked_action': {'key': 'linkedAction', 'type': 'str'},
        'linked_action_verb': {'key': 'linkedActionVerb', 'type': 'str'},
        'linked_type': {'key': 'linkedType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        action_name: Optional[str] = None,
        linked_property: Optional[str] = None,
        linked_action: Optional[str] = None,
        linked_action_verb: Optional[str] = None,
        linked_type: Optional[str] = None,
        **kwargs
    ):
        super(LinkedAccessCheck, self).__init__(**kwargs)
        self.action_name = action_name
        self.linked_property = linked_property
        self.linked_action = linked_action
        self.linked_action_verb = linked_action_verb
        self.linked_type = linked_type


class LinkedOperationRule(msrest.serialization.Model):
    """LinkedOperationRule.

    All required parameters must be populated in order to send to Azure.

    :param linked_operation: Required.  Possible values include: "None",
     "CrossResourceGroupResourceMove", "CrossSubscriptionResourceMove".
    :type linked_operation: str or ~provider_hub.models.LinkedOperation
    :param linked_action: Required.  Possible values include: "NotSpecified", "Blocked",
     "Validate", "Enabled".
    :type linked_action: str or ~provider_hub.models.LinkedAction
    """

    _validation = {
        'linked_operation': {'required': True},
        'linked_action': {'required': True},
    }

    _attribute_map = {
        'linked_operation': {'key': 'linkedOperation', 'type': 'str'},
        'linked_action': {'key': 'linkedAction', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        linked_operation: Union[str, "LinkedOperation"],
        linked_action: Union[str, "LinkedAction"],
        **kwargs
    ):
        super(LinkedOperationRule, self).__init__(**kwargs)
        self.linked_operation = linked_operation
        self.linked_action = linked_action


class LoggingHiddenPropertyPath(msrest.serialization.Model):
    """LoggingHiddenPropertyPath.

    :param hidden_paths_on_request:
    :type hidden_paths_on_request: list[str]
    :param hidden_paths_on_response:
    :type hidden_paths_on_response: list[str]
    """

    _attribute_map = {
        'hidden_paths_on_request': {'key': 'hiddenPathsOnRequest', 'type': '[str]'},
        'hidden_paths_on_response': {'key': 'hiddenPathsOnResponse', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        hidden_paths_on_request: Optional[List[str]] = None,
        hidden_paths_on_response: Optional[List[str]] = None,
        **kwargs
    ):
        super(LoggingHiddenPropertyPath, self).__init__(**kwargs)
        self.hidden_paths_on_request = hidden_paths_on_request
        self.hidden_paths_on_response = hidden_paths_on_response


class LoggingRule(msrest.serialization.Model):
    """LoggingRule.

    All required parameters must be populated in order to send to Azure.

    :param action: Required.
    :type action: str
    :param direction: Required.  Possible values include: "None", "Request", "Response".
    :type direction: str or ~provider_hub.models.LoggingDirections
    :param detail_level: Required.  Possible values include: "None", "Body".
    :type detail_level: str or ~provider_hub.models.LoggingDetails
    :param hidden_property_paths:
    :type hidden_property_paths: ~provider_hub.models.LoggingHiddenPropertyPath
    """

    _validation = {
        'action': {'required': True},
        'direction': {'required': True},
        'detail_level': {'required': True},
    }

    _attribute_map = {
        'action': {'key': 'action', 'type': 'str'},
        'direction': {'key': 'direction', 'type': 'str'},
        'detail_level': {'key': 'detailLevel', 'type': 'str'},
        'hidden_property_paths': {'key': 'hiddenPropertyPaths', 'type': 'LoggingHiddenPropertyPath'},
    }

    def __init__(
        self,
        *,
        action: str,
        direction: Union[str, "LoggingDirections"],
        detail_level: Union[str, "LoggingDetails"],
        hidden_property_paths: Optional["LoggingHiddenPropertyPath"] = None,
        **kwargs
    ):
        super(LoggingRule, self).__init__(**kwargs)
        self.action = action
        self.direction = direction
        self.detail_level = detail_level
        self.hidden_property_paths = hidden_property_paths


class LoggingRuleHiddenPropertyPaths(LoggingHiddenPropertyPath):
    """LoggingRuleHiddenPropertyPaths.

    :param hidden_paths_on_request:
    :type hidden_paths_on_request: list[str]
    :param hidden_paths_on_response:
    :type hidden_paths_on_response: list[str]
    """

    _attribute_map = {
        'hidden_paths_on_request': {'key': 'hiddenPathsOnRequest', 'type': '[str]'},
        'hidden_paths_on_response': {'key': 'hiddenPathsOnResponse', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        hidden_paths_on_request: Optional[List[str]] = None,
        hidden_paths_on_response: Optional[List[str]] = None,
        **kwargs
    ):
        super(LoggingRuleHiddenPropertyPaths, self).__init__(hidden_paths_on_request=hidden_paths_on_request, hidden_paths_on_response=hidden_paths_on_response, **kwargs)


class NotificationEndpoint(msrest.serialization.Model):
    """NotificationEndpoint.

    :param notification_destination:
    :type notification_destination: str
    :param locations:
    :type locations: list[str]
    """

    _attribute_map = {
        'notification_destination': {'key': 'notificationDestination', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        notification_destination: Optional[str] = None,
        locations: Optional[List[str]] = None,
        **kwargs
    ):
        super(NotificationEndpoint, self).__init__(**kwargs)
        self.notification_destination = notification_destination
        self.locations = locations


class NotificationRegistration(Resource):
    """The notification registration definition.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.NotificationRegistrationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'NotificationRegistrationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["NotificationRegistrationProperties"] = None,
        **kwargs
    ):
        super(NotificationRegistration, self).__init__(**kwargs)
        self.properties = properties


class NotificationRegistrationArrayResponseWithContinuation(msrest.serialization.Model):
    """NotificationRegistrationArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.NotificationRegistration]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[NotificationRegistration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["NotificationRegistration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(NotificationRegistrationArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class NotificationRegistrationProperties(msrest.serialization.Model):
    """NotificationRegistrationProperties.

    :param notification_mode:  Possible values include: "NotSpecified", "EventHub", "WebHook".
    :type notification_mode: str or ~provider_hub.models.NotificationMode
    :param message_scope:  Possible values include: "NotSpecified", "RegisteredSubscriptions".
    :type message_scope: str or ~provider_hub.models.MessageScope
    :param included_events:
    :type included_events: list[str]
    :param notification_endpoints:
    :type notification_endpoints: list[~provider_hub.models.NotificationEndpoint]
    """

    _attribute_map = {
        'notification_mode': {'key': 'notificationMode', 'type': 'str'},
        'message_scope': {'key': 'messageScope', 'type': 'str'},
        'included_events': {'key': 'includedEvents', 'type': '[str]'},
        'notification_endpoints': {'key': 'notificationEndpoints', 'type': '[NotificationEndpoint]'},
    }

    def __init__(
        self,
        *,
        notification_mode: Optional[Union[str, "NotificationMode"]] = None,
        message_scope: Optional[Union[str, "MessageScope"]] = None,
        included_events: Optional[List[str]] = None,
        notification_endpoints: Optional[List["NotificationEndpoint"]] = None,
        **kwargs
    ):
        super(NotificationRegistrationProperties, self).__init__(**kwargs)
        self.notification_mode = notification_mode
        self.message_scope = message_scope
        self.included_events = included_events
        self.notification_endpoints = notification_endpoints


class NotificationRegistrationPropertiesautogenerated(NotificationRegistrationProperties):
    """NotificationRegistrationPropertiesautogenerated.

    :param notification_mode:  Possible values include: "NotSpecified", "EventHub", "WebHook".
    :type notification_mode: str or ~provider_hub.models.NotificationMode
    :param message_scope:  Possible values include: "NotSpecified", "RegisteredSubscriptions".
    :type message_scope: str or ~provider_hub.models.MessageScope
    :param included_events:
    :type included_events: list[str]
    :param notification_endpoints:
    :type notification_endpoints: list[~provider_hub.models.NotificationEndpoint]
    """

    _attribute_map = {
        'notification_mode': {'key': 'notificationMode', 'type': 'str'},
        'message_scope': {'key': 'messageScope', 'type': 'str'},
        'included_events': {'key': 'includedEvents', 'type': '[str]'},
        'notification_endpoints': {'key': 'notificationEndpoints', 'type': '[NotificationEndpoint]'},
    }

    def __init__(
        self,
        *,
        notification_mode: Optional[Union[str, "NotificationMode"]] = None,
        message_scope: Optional[Union[str, "MessageScope"]] = None,
        included_events: Optional[List[str]] = None,
        notification_endpoints: Optional[List["NotificationEndpoint"]] = None,
        **kwargs
    ):
        super(NotificationRegistrationPropertiesautogenerated, self).__init__(notification_mode=notification_mode, message_scope=message_scope, included_events=included_events, notification_endpoints=notification_endpoints, **kwargs)


class OperationsContent(Resource):
    """OperationsContent.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param name_properties_name: Name of the operation.
    :type name_properties_name: str
    :param is_data_action: Indicates whether the operation applies to data-plane.
    :type is_data_action: bool
    :param origin:  Possible values include: "NotSpecified", "User", "System".
    :type origin: str or ~provider_hub.models.OperationsDefinitionOrigin
    :param display: Display information of the operation.
    :type display: ~provider_hub.models.OperationsDisplayDefinition
    :param action_type:  Possible values include: "NotSpecified", "Internal".
    :type action_type: str or ~provider_hub.models.OperationsDefinitionActionType
    :param properties: Any object.
    :type properties: object
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'name_properties_name': {'key': 'properties.name', 'type': 'str'},
        'is_data_action': {'key': 'properties.isDataAction', 'type': 'bool'},
        'origin': {'key': 'properties.origin', 'type': 'str'},
        'display': {'key': 'properties.display', 'type': 'OperationsDisplayDefinition'},
        'action_type': {'key': 'properties.actionType', 'type': 'str'},
        'properties': {'key': 'properties.properties', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name_properties_name: Optional[str] = None,
        is_data_action: Optional[bool] = None,
        origin: Optional[Union[str, "OperationsDefinitionOrigin"]] = None,
        display: Optional["OperationsDisplayDefinition"] = None,
        action_type: Optional[Union[str, "OperationsDefinitionActionType"]] = None,
        properties: Optional[object] = None,
        **kwargs
    ):
        super(OperationsContent, self).__init__(**kwargs)
        self.name_properties_name = name_properties_name
        self.is_data_action = is_data_action
        self.origin = origin
        self.display = display
        self.action_type = action_type
        self.properties = properties


class OperationsDefinition(msrest.serialization.Model):
    """Properties of an Operation.

    All required parameters must be populated in order to send to Azure.

    :param name: Required. Name of the operation.
    :type name: str
    :param is_data_action: Indicates whether the operation applies to data-plane.
    :type is_data_action: bool
    :param origin:  Possible values include: "NotSpecified", "User", "System".
    :type origin: str or ~provider_hub.models.OperationsDefinitionOrigin
    :param display: Required. Display information of the operation.
    :type display: ~provider_hub.models.OperationsDisplayDefinition
    :param action_type:  Possible values include: "NotSpecified", "Internal".
    :type action_type: str or ~provider_hub.models.OperationsDefinitionActionType
    :param properties: Any object.
    :type properties: object
    """

    _validation = {
        'name': {'required': True},
        'display': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'is_data_action': {'key': 'isDataAction', 'type': 'bool'},
        'origin': {'key': 'origin', 'type': 'str'},
        'display': {'key': 'display', 'type': 'OperationsDisplayDefinition'},
        'action_type': {'key': 'actionType', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        name: str,
        display: "OperationsDisplayDefinition",
        is_data_action: Optional[bool] = None,
        origin: Optional[Union[str, "OperationsDefinitionOrigin"]] = None,
        action_type: Optional[Union[str, "OperationsDefinitionActionType"]] = None,
        properties: Optional[object] = None,
        **kwargs
    ):
        super(OperationsDefinition, self).__init__(**kwargs)
        self.name = name
        self.is_data_action = is_data_action
        self.origin = origin
        self.display = display
        self.action_type = action_type
        self.properties = properties


class OperationsDefinitionArrayResponseWithContinuation(msrest.serialization.Model):
    """OperationsDefinitionArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.OperationsDefinition]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[OperationsDefinition]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["OperationsDefinition"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(OperationsDefinitionArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class OperationsDisplayDefinition(msrest.serialization.Model):
    """OperationsDisplayDefinition.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required.
    :type provider: str
    :param resource: Required.
    :type resource: str
    :param operation: Required.
    :type operation: str
    :param description: Required.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: str,
        resource: str,
        operation: str,
        description: str,
        **kwargs
    ):
        super(OperationsDisplayDefinition, self).__init__(**kwargs)
        self.provider = provider
        self.resource = resource
        self.operation = operation
        self.description = description


class OperationsDefinitionDisplay(OperationsDisplayDefinition):
    """Display information of the operation.

    All required parameters must be populated in order to send to Azure.

    :param provider: Required.
    :type provider: str
    :param resource: Required.
    :type resource: str
    :param operation: Required.
    :type operation: str
    :param description: Required.
    :type description: str
    """

    _validation = {
        'provider': {'required': True},
        'resource': {'required': True},
        'operation': {'required': True},
        'description': {'required': True},
    }

    _attribute_map = {
        'provider': {'key': 'provider', 'type': 'str'},
        'resource': {'key': 'resource', 'type': 'str'},
        'operation': {'key': 'operation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        provider: str,
        resource: str,
        operation: str,
        description: str,
        **kwargs
    ):
        super(OperationsDefinitionDisplay, self).__init__(provider=provider, resource=resource, operation=operation, description=description, **kwargs)


class OperationsPutContent(msrest.serialization.Model):
    """OperationsPutContent.

    All required parameters must be populated in order to send to Azure.

    :param contents: Required.
    :type contents: list[~provider_hub.models.OperationsDefinition]
    """

    _validation = {
        'contents': {'required': True},
    }

    _attribute_map = {
        'contents': {'key': 'contents', 'type': '[OperationsDefinition]'},
    }

    def __init__(
        self,
        *,
        contents: List["OperationsDefinition"],
        **kwargs
    ):
        super(OperationsPutContent, self).__init__(**kwargs)
        self.contents = contents


class ProviderHubMetadata(msrest.serialization.Model):
    """ProviderHubMetadata.

    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param third_party_provider_authorization:
    :type third_party_provider_authorization: ~provider_hub.models.ThirdPartyProviderAuthorization
    """

    _attribute_map = {
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'third_party_provider_authorization': {'key': 'thirdPartyProviderAuthorization', 'type': 'ThirdPartyProviderAuthorization'},
    }

    def __init__(
        self,
        *,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        third_party_provider_authorization: Optional["ThirdPartyProviderAuthorization"] = None,
        **kwargs
    ):
        super(ProviderHubMetadata, self).__init__(**kwargs)
        self.provider_authorizations = provider_authorizations
        self.provider_authentication = provider_authentication
        self.third_party_provider_authorization = third_party_provider_authorization


class ResourceProviderAuthentication(msrest.serialization.Model):
    """ResourceProviderAuthentication.

    All required parameters must be populated in order to send to Azure.

    :param allowed_audiences: Required.
    :type allowed_audiences: list[str]
    """

    _validation = {
        'allowed_audiences': {'required': True},
    }

    _attribute_map = {
        'allowed_audiences': {'key': 'allowedAudiences', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        allowed_audiences: List[str],
        **kwargs
    ):
        super(ResourceProviderAuthentication, self).__init__(**kwargs)
        self.allowed_audiences = allowed_audiences


class ProviderHubMetadataProviderAuthentication(ResourceProviderAuthentication):
    """ProviderHubMetadataProviderAuthentication.

    All required parameters must be populated in order to send to Azure.

    :param allowed_audiences: Required.
    :type allowed_audiences: list[str]
    """

    _validation = {
        'allowed_audiences': {'required': True},
    }

    _attribute_map = {
        'allowed_audiences': {'key': 'allowedAudiences', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        allowed_audiences: List[str],
        **kwargs
    ):
        super(ProviderHubMetadataProviderAuthentication, self).__init__(allowed_audiences=allowed_audiences, **kwargs)


class ThirdPartyProviderAuthorization(msrest.serialization.Model):
    """ThirdPartyProviderAuthorization.

    :param authorizations:
    :type authorizations: list[~provider_hub.models.LightHouseAuthorization]
    :param managed_by_tenant_id:
    :type managed_by_tenant_id: str
    """

    _attribute_map = {
        'authorizations': {'key': 'authorizations', 'type': '[LightHouseAuthorization]'},
        'managed_by_tenant_id': {'key': 'managedByTenantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        authorizations: Optional[List["LightHouseAuthorization"]] = None,
        managed_by_tenant_id: Optional[str] = None,
        **kwargs
    ):
        super(ThirdPartyProviderAuthorization, self).__init__(**kwargs)
        self.authorizations = authorizations
        self.managed_by_tenant_id = managed_by_tenant_id


class ProviderHubMetadataThirdPartyProviderAuthorization(ThirdPartyProviderAuthorization):
    """ProviderHubMetadataThirdPartyProviderAuthorization.

    :param authorizations:
    :type authorizations: list[~provider_hub.models.LightHouseAuthorization]
    :param managed_by_tenant_id:
    :type managed_by_tenant_id: str
    """

    _attribute_map = {
        'authorizations': {'key': 'authorizations', 'type': '[LightHouseAuthorization]'},
        'managed_by_tenant_id': {'key': 'managedByTenantId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        authorizations: Optional[List["LightHouseAuthorization"]] = None,
        managed_by_tenant_id: Optional[str] = None,
        **kwargs
    ):
        super(ProviderHubMetadataThirdPartyProviderAuthorization, self).__init__(authorizations=authorizations, managed_by_tenant_id=managed_by_tenant_id, **kwargs)


class ProviderRegistrationArrayResponseWithContinuation(msrest.serialization.Model):
    """ProviderRegistrationArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.ProviderRegistration]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ProviderRegistration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ProviderRegistration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ProviderRegistrationArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ResourceProviderManifestProperties(msrest.serialization.Model):
    """ResourceProviderManifestProperties.

    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param namespace:
    :type namespace: str
    :param provider_version:
    :type provider_version: str
    :param provider_type:  Possible values include: "NotSpecified", "Internal", "External",
     "Hidden", "RegistrationFree", "LegacyRegistrationRequired", "TenantOnly", "AuthorizationFree".
    :type provider_type: str or ~provider_hub.models.ResourceProviderType
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param management:
    :type management: ~provider_hub.models.ResourceProviderManagement
    :param capabilities:
    :type capabilities: list[~provider_hub.models.ResourceProviderCapabilities]
    :param metadata: Any object.
    :type metadata: object
    :param template_deployment_options:
    :type template_deployment_options: ~provider_hub.models.TemplateDeploymentOptions
    """

    _attribute_map = {
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'provider_version': {'key': 'providerVersion', 'type': 'str'},
        'provider_type': {'key': 'providerType', 'type': 'str'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'management': {'key': 'management', 'type': 'ResourceProviderManagement'},
        'capabilities': {'key': 'capabilities', 'type': '[ResourceProviderCapabilities]'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'template_deployment_options': {'key': 'templateDeploymentOptions', 'type': 'TemplateDeploymentOptions'},
    }

    def __init__(
        self,
        *,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        namespace: Optional[str] = None,
        provider_version: Optional[str] = None,
        provider_type: Optional[Union[str, "ResourceProviderType"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        management: Optional["ResourceProviderManagement"] = None,
        capabilities: Optional[List["ResourceProviderCapabilities"]] = None,
        metadata: Optional[object] = None,
        template_deployment_options: Optional["TemplateDeploymentOptions"] = None,
        **kwargs
    ):
        super(ResourceProviderManifestProperties, self).__init__(**kwargs)
        self.provider_authentication = provider_authentication
        self.provider_authorizations = provider_authorizations
        self.namespace = namespace
        self.provider_version = provider_version
        self.provider_type = provider_type
        self.required_features = required_features
        self.features_rule = features_rule
        self.request_header_options = request_header_options
        self.management = management
        self.capabilities = capabilities
        self.metadata = metadata
        self.template_deployment_options = template_deployment_options


class ProviderRegistrationProperties(ResourceProviderManifestProperties):
    """ProviderRegistrationProperties.

    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param namespace:
    :type namespace: str
    :param provider_version:
    :type provider_version: str
    :param provider_type:  Possible values include: "NotSpecified", "Internal", "External",
     "Hidden", "RegistrationFree", "LegacyRegistrationRequired", "TenantOnly", "AuthorizationFree".
    :type provider_type: str or ~provider_hub.models.ResourceProviderType
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param management:
    :type management: ~provider_hub.models.ResourceProviderManagement
    :param capabilities:
    :type capabilities: list[~provider_hub.models.ResourceProviderCapabilities]
    :param metadata: Any object.
    :type metadata: object
    :param template_deployment_options:
    :type template_deployment_options: ~provider_hub.models.TemplateDeploymentOptions
    :param provider_hub_metadata:
    :type provider_hub_metadata: ~provider_hub.models.ProviderHubMetadata
    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param subscription_lifecycle_notification_specifications:
    :type subscription_lifecycle_notification_specifications:
     ~provider_hub.models.SubscriptionLifecycleNotificationSpecifications
    """

    _attribute_map = {
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'provider_version': {'key': 'providerVersion', 'type': 'str'},
        'provider_type': {'key': 'providerType', 'type': 'str'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'management': {'key': 'management', 'type': 'ResourceProviderManagement'},
        'capabilities': {'key': 'capabilities', 'type': '[ResourceProviderCapabilities]'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'template_deployment_options': {'key': 'templateDeploymentOptions', 'type': 'TemplateDeploymentOptions'},
        'provider_hub_metadata': {'key': 'providerHubMetadata', 'type': 'ProviderHubMetadata'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'subscription_lifecycle_notification_specifications': {'key': 'subscriptionLifecycleNotificationSpecifications', 'type': 'SubscriptionLifecycleNotificationSpecifications'},
    }

    def __init__(
        self,
        *,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        namespace: Optional[str] = None,
        provider_version: Optional[str] = None,
        provider_type: Optional[Union[str, "ResourceProviderType"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        management: Optional["ResourceProviderManagement"] = None,
        capabilities: Optional[List["ResourceProviderCapabilities"]] = None,
        metadata: Optional[object] = None,
        template_deployment_options: Optional["TemplateDeploymentOptions"] = None,
        provider_hub_metadata: Optional["ProviderHubMetadata"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        subscription_lifecycle_notification_specifications: Optional["SubscriptionLifecycleNotificationSpecifications"] = None,
        **kwargs
    ):
        super(ProviderRegistrationProperties, self).__init__(provider_authentication=provider_authentication, provider_authorizations=provider_authorizations, namespace=namespace, provider_version=provider_version, provider_type=provider_type, required_features=required_features, features_rule=features_rule, request_header_options=request_header_options, management=management, capabilities=capabilities, metadata=metadata, template_deployment_options=template_deployment_options, **kwargs)
        self.provider_hub_metadata = provider_hub_metadata
        self.provisioning_state = provisioning_state
        self.subscription_lifecycle_notification_specifications = subscription_lifecycle_notification_specifications


class ProviderRegistrationPropertiesautogenerated(ProviderRegistrationProperties):
    """ProviderRegistrationPropertiesautogenerated.

    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param namespace:
    :type namespace: str
    :param provider_version:
    :type provider_version: str
    :param provider_type:  Possible values include: "NotSpecified", "Internal", "External",
     "Hidden", "RegistrationFree", "LegacyRegistrationRequired", "TenantOnly", "AuthorizationFree".
    :type provider_type: str or ~provider_hub.models.ResourceProviderType
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param management:
    :type management: ~provider_hub.models.ResourceProviderManagement
    :param capabilities:
    :type capabilities: list[~provider_hub.models.ResourceProviderCapabilities]
    :param metadata: Any object.
    :type metadata: object
    :param template_deployment_options:
    :type template_deployment_options: ~provider_hub.models.TemplateDeploymentOptions
    :param provider_hub_metadata:
    :type provider_hub_metadata: ~provider_hub.models.ProviderHubMetadata
    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param subscription_lifecycle_notification_specifications:
    :type subscription_lifecycle_notification_specifications:
     ~provider_hub.models.SubscriptionLifecycleNotificationSpecifications
    """

    _attribute_map = {
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'provider_version': {'key': 'providerVersion', 'type': 'str'},
        'provider_type': {'key': 'providerType', 'type': 'str'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'management': {'key': 'management', 'type': 'ResourceProviderManagement'},
        'capabilities': {'key': 'capabilities', 'type': '[ResourceProviderCapabilities]'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'template_deployment_options': {'key': 'templateDeploymentOptions', 'type': 'TemplateDeploymentOptions'},
        'provider_hub_metadata': {'key': 'providerHubMetadata', 'type': 'ProviderHubMetadata'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'subscription_lifecycle_notification_specifications': {'key': 'subscriptionLifecycleNotificationSpecifications', 'type': 'SubscriptionLifecycleNotificationSpecifications'},
    }

    def __init__(
        self,
        *,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        namespace: Optional[str] = None,
        provider_version: Optional[str] = None,
        provider_type: Optional[Union[str, "ResourceProviderType"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        management: Optional["ResourceProviderManagement"] = None,
        capabilities: Optional[List["ResourceProviderCapabilities"]] = None,
        metadata: Optional[object] = None,
        template_deployment_options: Optional["TemplateDeploymentOptions"] = None,
        provider_hub_metadata: Optional["ProviderHubMetadata"] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        subscription_lifecycle_notification_specifications: Optional["SubscriptionLifecycleNotificationSpecifications"] = None,
        **kwargs
    ):
        super(ProviderRegistrationPropertiesautogenerated, self).__init__(provider_authentication=provider_authentication, provider_authorizations=provider_authorizations, namespace=namespace, provider_version=provider_version, provider_type=provider_type, required_features=required_features, features_rule=features_rule, request_header_options=request_header_options, management=management, capabilities=capabilities, metadata=metadata, template_deployment_options=template_deployment_options, provider_hub_metadata=provider_hub_metadata, provisioning_state=provisioning_state, subscription_lifecycle_notification_specifications=subscription_lifecycle_notification_specifications, **kwargs)


class ProviderRegistrationPropertiesProviderHubMetadata(ProviderHubMetadata):
    """ProviderRegistrationPropertiesProviderHubMetadata.

    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param third_party_provider_authorization:
    :type third_party_provider_authorization: ~provider_hub.models.ThirdPartyProviderAuthorization
    """

    _attribute_map = {
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'third_party_provider_authorization': {'key': 'thirdPartyProviderAuthorization', 'type': 'ThirdPartyProviderAuthorization'},
    }

    def __init__(
        self,
        *,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        third_party_provider_authorization: Optional["ThirdPartyProviderAuthorization"] = None,
        **kwargs
    ):
        super(ProviderRegistrationPropertiesProviderHubMetadata, self).__init__(provider_authorizations=provider_authorizations, provider_authentication=provider_authentication, third_party_provider_authorization=third_party_provider_authorization, **kwargs)


class SubscriptionLifecycleNotificationSpecifications(msrest.serialization.Model):
    """SubscriptionLifecycleNotificationSpecifications.

    :param subscription_state_override_actions:
    :type subscription_state_override_actions:
     list[~provider_hub.models.SubscriptionStateOverrideAction]
    :param soft_delete_ttl:
    :type soft_delete_ttl: ~datetime.timedelta
    """

    _attribute_map = {
        'subscription_state_override_actions': {'key': 'subscriptionStateOverrideActions', 'type': '[SubscriptionStateOverrideAction]'},
        'soft_delete_ttl': {'key': 'softDeleteTTL', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        subscription_state_override_actions: Optional[List["SubscriptionStateOverrideAction"]] = None,
        soft_delete_ttl: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(SubscriptionLifecycleNotificationSpecifications, self).__init__(**kwargs)
        self.subscription_state_override_actions = subscription_state_override_actions
        self.soft_delete_ttl = soft_delete_ttl


class ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(SubscriptionLifecycleNotificationSpecifications):
    """ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications.

    :param subscription_state_override_actions:
    :type subscription_state_override_actions:
     list[~provider_hub.models.SubscriptionStateOverrideAction]
    :param soft_delete_ttl:
    :type soft_delete_ttl: ~datetime.timedelta
    """

    _attribute_map = {
        'subscription_state_override_actions': {'key': 'subscriptionStateOverrideActions', 'type': '[SubscriptionStateOverrideAction]'},
        'soft_delete_ttl': {'key': 'softDeleteTTL', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        subscription_state_override_actions: Optional[List["SubscriptionStateOverrideAction"]] = None,
        soft_delete_ttl: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ProviderRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications, self).__init__(subscription_state_override_actions=subscription_state_override_actions, soft_delete_ttl=soft_delete_ttl, **kwargs)


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        **kwargs
    ):
        super(ProxyResource, self).__init__(**kwargs)


class RequestHeaderOptions(msrest.serialization.Model):
    """RequestHeaderOptions.

    :param opt_in_headers:  Possible values include: "NotSpecified", "SignedUserToken",
     "ClientGroupMembership", "SignedAuxiliaryTokens", "UnboundedClientGroupMembership".
    :type opt_in_headers: str or ~provider_hub.models.OptInHeaderType
    """

    _attribute_map = {
        'opt_in_headers': {'key': 'optInHeaders', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        opt_in_headers: Optional[Union[str, "OptInHeaderType"]] = None,
        **kwargs
    ):
        super(RequestHeaderOptions, self).__init__(**kwargs)
        self.opt_in_headers = opt_in_headers


class ReRegisterSubscriptionMetadata(msrest.serialization.Model):
    """ReRegisterSubscriptionMetadata.

    All required parameters must be populated in order to send to Azure.

    :param enabled: Required.
    :type enabled: bool
    :param concurrency_limit:
    :type concurrency_limit: int
    """

    _validation = {
        'enabled': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'concurrency_limit': {'key': 'concurrencyLimit', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        concurrency_limit: Optional[int] = None,
        **kwargs
    ):
        super(ReRegisterSubscriptionMetadata, self).__init__(**kwargs)
        self.enabled = enabled
        self.concurrency_limit = concurrency_limit


class ResourceMovePolicy(msrest.serialization.Model):
    """ResourceMovePolicy.

    :param validation_required:
    :type validation_required: bool
    :param cross_resource_group_move_enabled:
    :type cross_resource_group_move_enabled: bool
    :param cross_subscription_move_enabled:
    :type cross_subscription_move_enabled: bool
    """

    _attribute_map = {
        'validation_required': {'key': 'validationRequired', 'type': 'bool'},
        'cross_resource_group_move_enabled': {'key': 'crossResourceGroupMoveEnabled', 'type': 'bool'},
        'cross_subscription_move_enabled': {'key': 'crossSubscriptionMoveEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        validation_required: Optional[bool] = None,
        cross_resource_group_move_enabled: Optional[bool] = None,
        cross_subscription_move_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(ResourceMovePolicy, self).__init__(**kwargs)
        self.validation_required = validation_required
        self.cross_resource_group_move_enabled = cross_resource_group_move_enabled
        self.cross_subscription_move_enabled = cross_subscription_move_enabled


class ResourceProviderAuthorization(msrest.serialization.Model):
    """ResourceProviderAuthorization.

    :param application_id:
    :type application_id: str
    :param role_definition_id:
    :type role_definition_id: str
    :param managed_by_role_definition_id:
    :type managed_by_role_definition_id: str
    """

    _attribute_map = {
        'application_id': {'key': 'applicationId', 'type': 'str'},
        'role_definition_id': {'key': 'roleDefinitionId', 'type': 'str'},
        'managed_by_role_definition_id': {'key': 'managedByRoleDefinitionId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        application_id: Optional[str] = None,
        role_definition_id: Optional[str] = None,
        managed_by_role_definition_id: Optional[str] = None,
        **kwargs
    ):
        super(ResourceProviderAuthorization, self).__init__(**kwargs)
        self.application_id = application_id
        self.role_definition_id = role_definition_id
        self.managed_by_role_definition_id = managed_by_role_definition_id


class ResourceProviderCapabilities(msrest.serialization.Model):
    """ResourceProviderCapabilities.

    All required parameters must be populated in order to send to Azure.

    :param quota_id: Required.
    :type quota_id: str
    :param effect: Required.  Possible values include: "NotSpecified", "Allow", "Disallow".
    :type effect: str or ~provider_hub.models.ResourceProviderCapabilitiesEffect
    :param required_features:
    :type required_features: list[str]
    """

    _validation = {
        'quota_id': {'required': True},
        'effect': {'required': True},
    }

    _attribute_map = {
        'quota_id': {'key': 'quotaId', 'type': 'str'},
        'effect': {'key': 'effect', 'type': 'str'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        quota_id: str,
        effect: Union[str, "ResourceProviderCapabilitiesEffect"],
        required_features: Optional[List[str]] = None,
        **kwargs
    ):
        super(ResourceProviderCapabilities, self).__init__(**kwargs)
        self.quota_id = quota_id
        self.effect = effect
        self.required_features = required_features


class ResourceProviderEndpoint(msrest.serialization.Model):
    """ResourceProviderEndpoint.

    :param enabled:
    :type enabled: bool
    :param api_versions:
    :type api_versions: list[str]
    :param endpoint_uri:
    :type endpoint_uri: str
    :param locations:
    :type locations: list[str]
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param timeout:
    :type timeout: ~datetime.timedelta
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'api_versions': {'key': 'apiVersions', 'type': '[str]'},
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'timeout': {'key': 'timeout', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        api_versions: Optional[List[str]] = None,
        endpoint_uri: Optional[str] = None,
        locations: Optional[List[str]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        timeout: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ResourceProviderEndpoint, self).__init__(**kwargs)
        self.enabled = enabled
        self.api_versions = api_versions
        self.endpoint_uri = endpoint_uri
        self.locations = locations
        self.required_features = required_features
        self.features_rule = features_rule
        self.timeout = timeout


class ResourceProviderEndpointFeaturesRule(FeaturesRule):
    """ResourceProviderEndpointFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceProviderEndpointFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceProviderManagement(msrest.serialization.Model):
    """ResourceProviderManagement.

    :param schema_owners:
    :type schema_owners: list[str]
    :param manifest_owners:
    :type manifest_owners: list[str]
    :param incident_routing_service:
    :type incident_routing_service: str
    :param incident_routing_team:
    :type incident_routing_team: str
    :param incident_contact_email:
    :type incident_contact_email: str
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param resource_access_policy:  Possible values include: "NotSpecified", "AcisReadAllowed",
     "AcisActionAllowed".
    :type resource_access_policy: str or
     ~provider_hub.models.ResourceProviderManagementResourceAccessPolicy
    :param resource_access_roles:
    :type resource_access_roles: list[object]
    """

    _attribute_map = {
        'schema_owners': {'key': 'schemaOwners', 'type': '[str]'},
        'manifest_owners': {'key': 'manifestOwners', 'type': '[str]'},
        'incident_routing_service': {'key': 'incidentRoutingService', 'type': 'str'},
        'incident_routing_team': {'key': 'incidentRoutingTeam', 'type': 'str'},
        'incident_contact_email': {'key': 'incidentContactEmail', 'type': 'str'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'resource_access_policy': {'key': 'resourceAccessPolicy', 'type': 'str'},
        'resource_access_roles': {'key': 'resourceAccessRoles', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        schema_owners: Optional[List[str]] = None,
        manifest_owners: Optional[List[str]] = None,
        incident_routing_service: Optional[str] = None,
        incident_routing_team: Optional[str] = None,
        incident_contact_email: Optional[str] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        resource_access_policy: Optional[Union[str, "ResourceProviderManagementResourceAccessPolicy"]] = None,
        resource_access_roles: Optional[List[object]] = None,
        **kwargs
    ):
        super(ResourceProviderManagement, self).__init__(**kwargs)
        self.schema_owners = schema_owners
        self.manifest_owners = manifest_owners
        self.incident_routing_service = incident_routing_service
        self.incident_routing_team = incident_routing_team
        self.incident_contact_email = incident_contact_email
        self.service_tree_infos = service_tree_infos
        self.resource_access_policy = resource_access_policy
        self.resource_access_roles = resource_access_roles


class ResourceProviderManifest(msrest.serialization.Model):
    """ResourceProviderManifest.

    :param provider_authentication:
    :type provider_authentication: ~provider_hub.models.ResourceProviderAuthentication
    :param provider_authorizations:
    :type provider_authorizations: list[~provider_hub.models.ResourceProviderAuthorization]
    :param namespace:
    :type namespace: str
    :param provider_version:
    :type provider_version: str
    :param provider_type:  Possible values include: "NotSpecified", "Internal", "External",
     "Hidden", "RegistrationFree", "LegacyRegistrationRequired", "TenantOnly", "AuthorizationFree".
    :type provider_type: str or ~provider_hub.models.ResourceProviderType
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param resource_types:
    :type resource_types: list[~provider_hub.models.ResourceType]
    :param management:
    :type management: ~provider_hub.models.ResourceProviderManagement
    :param capabilities:
    :type capabilities: list[~provider_hub.models.ResourceProviderCapabilities]
    :param metadata: Any object.
    :type metadata: object
    :param global_notification_endpoints:
    :type global_notification_endpoints: list[~provider_hub.models.ResourceProviderEndpoint]
    :param re_register_subscription_metadata:
    :type re_register_subscription_metadata: ~provider_hub.models.ReRegisterSubscriptionMetadata
    """

    _attribute_map = {
        'provider_authentication': {'key': 'providerAuthentication', 'type': 'ResourceProviderAuthentication'},
        'provider_authorizations': {'key': 'providerAuthorizations', 'type': '[ResourceProviderAuthorization]'},
        'namespace': {'key': 'namespace', 'type': 'str'},
        'provider_version': {'key': 'providerVersion', 'type': 'str'},
        'provider_type': {'key': 'providerType', 'type': 'str'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'resource_types': {'key': 'resourceTypes', 'type': '[ResourceType]'},
        'management': {'key': 'management', 'type': 'ResourceProviderManagement'},
        'capabilities': {'key': 'capabilities', 'type': '[ResourceProviderCapabilities]'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'global_notification_endpoints': {'key': 'globalNotificationEndpoints', 'type': '[ResourceProviderEndpoint]'},
        're_register_subscription_metadata': {'key': 'reRegisterSubscriptionMetadata', 'type': 'ReRegisterSubscriptionMetadata'},
    }

    def __init__(
        self,
        *,
        provider_authentication: Optional["ResourceProviderAuthentication"] = None,
        provider_authorizations: Optional[List["ResourceProviderAuthorization"]] = None,
        namespace: Optional[str] = None,
        provider_version: Optional[str] = None,
        provider_type: Optional[Union[str, "ResourceProviderType"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        resource_types: Optional[List["ResourceType"]] = None,
        management: Optional["ResourceProviderManagement"] = None,
        capabilities: Optional[List["ResourceProviderCapabilities"]] = None,
        metadata: Optional[object] = None,
        global_notification_endpoints: Optional[List["ResourceProviderEndpoint"]] = None,
        re_register_subscription_metadata: Optional["ReRegisterSubscriptionMetadata"] = None,
        **kwargs
    ):
        super(ResourceProviderManifest, self).__init__(**kwargs)
        self.provider_authentication = provider_authentication
        self.provider_authorizations = provider_authorizations
        self.namespace = namespace
        self.provider_version = provider_version
        self.provider_type = provider_type
        self.required_features = required_features
        self.features_rule = features_rule
        self.request_header_options = request_header_options
        self.resource_types = resource_types
        self.management = management
        self.capabilities = capabilities
        self.metadata = metadata
        self.global_notification_endpoints = global_notification_endpoints
        self.re_register_subscription_metadata = re_register_subscription_metadata


class ResourceProviderManifestFeaturesRule(FeaturesRule):
    """ResourceProviderManifestFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceProviderManifestFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceProviderManifestManagement(ResourceProviderManagement):
    """ResourceProviderManifestManagement.

    :param schema_owners:
    :type schema_owners: list[str]
    :param manifest_owners:
    :type manifest_owners: list[str]
    :param incident_routing_service:
    :type incident_routing_service: str
    :param incident_routing_team:
    :type incident_routing_team: str
    :param incident_contact_email:
    :type incident_contact_email: str
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param resource_access_policy:  Possible values include: "NotSpecified", "AcisReadAllowed",
     "AcisActionAllowed".
    :type resource_access_policy: str or
     ~provider_hub.models.ResourceProviderManagementResourceAccessPolicy
    :param resource_access_roles:
    :type resource_access_roles: list[object]
    """

    _attribute_map = {
        'schema_owners': {'key': 'schemaOwners', 'type': '[str]'},
        'manifest_owners': {'key': 'manifestOwners', 'type': '[str]'},
        'incident_routing_service': {'key': 'incidentRoutingService', 'type': 'str'},
        'incident_routing_team': {'key': 'incidentRoutingTeam', 'type': 'str'},
        'incident_contact_email': {'key': 'incidentContactEmail', 'type': 'str'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'resource_access_policy': {'key': 'resourceAccessPolicy', 'type': 'str'},
        'resource_access_roles': {'key': 'resourceAccessRoles', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        schema_owners: Optional[List[str]] = None,
        manifest_owners: Optional[List[str]] = None,
        incident_routing_service: Optional[str] = None,
        incident_routing_team: Optional[str] = None,
        incident_contact_email: Optional[str] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        resource_access_policy: Optional[Union[str, "ResourceProviderManagementResourceAccessPolicy"]] = None,
        resource_access_roles: Optional[List[object]] = None,
        **kwargs
    ):
        super(ResourceProviderManifestManagement, self).__init__(schema_owners=schema_owners, manifest_owners=manifest_owners, incident_routing_service=incident_routing_service, incident_routing_team=incident_routing_team, incident_contact_email=incident_contact_email, service_tree_infos=service_tree_infos, resource_access_policy=resource_access_policy, resource_access_roles=resource_access_roles, **kwargs)


class ResourceProviderManifestPropertiesFeaturesRule(FeaturesRule):
    """ResourceProviderManifestPropertiesFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceProviderManifestPropertiesFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceProviderManifestPropertiesManagement(ResourceProviderManagement):
    """ResourceProviderManifestPropertiesManagement.

    :param schema_owners:
    :type schema_owners: list[str]
    :param manifest_owners:
    :type manifest_owners: list[str]
    :param incident_routing_service:
    :type incident_routing_service: str
    :param incident_routing_team:
    :type incident_routing_team: str
    :param incident_contact_email:
    :type incident_contact_email: str
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param resource_access_policy:  Possible values include: "NotSpecified", "AcisReadAllowed",
     "AcisActionAllowed".
    :type resource_access_policy: str or
     ~provider_hub.models.ResourceProviderManagementResourceAccessPolicy
    :param resource_access_roles:
    :type resource_access_roles: list[object]
    """

    _attribute_map = {
        'schema_owners': {'key': 'schemaOwners', 'type': '[str]'},
        'manifest_owners': {'key': 'manifestOwners', 'type': '[str]'},
        'incident_routing_service': {'key': 'incidentRoutingService', 'type': 'str'},
        'incident_routing_team': {'key': 'incidentRoutingTeam', 'type': 'str'},
        'incident_contact_email': {'key': 'incidentContactEmail', 'type': 'str'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'resource_access_policy': {'key': 'resourceAccessPolicy', 'type': 'str'},
        'resource_access_roles': {'key': 'resourceAccessRoles', 'type': '[object]'},
    }

    def __init__(
        self,
        *,
        schema_owners: Optional[List[str]] = None,
        manifest_owners: Optional[List[str]] = None,
        incident_routing_service: Optional[str] = None,
        incident_routing_team: Optional[str] = None,
        incident_contact_email: Optional[str] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        resource_access_policy: Optional[Union[str, "ResourceProviderManagementResourceAccessPolicy"]] = None,
        resource_access_roles: Optional[List[object]] = None,
        **kwargs
    ):
        super(ResourceProviderManifestPropertiesManagement, self).__init__(schema_owners=schema_owners, manifest_owners=manifest_owners, incident_routing_service=incident_routing_service, incident_routing_team=incident_routing_team, incident_contact_email=incident_contact_email, service_tree_infos=service_tree_infos, resource_access_policy=resource_access_policy, resource_access_roles=resource_access_roles, **kwargs)


class ResourceProviderManifestPropertiesProviderAuthentication(ResourceProviderAuthentication):
    """ResourceProviderManifestPropertiesProviderAuthentication.

    All required parameters must be populated in order to send to Azure.

    :param allowed_audiences: Required.
    :type allowed_audiences: list[str]
    """

    _validation = {
        'allowed_audiences': {'required': True},
    }

    _attribute_map = {
        'allowed_audiences': {'key': 'allowedAudiences', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        allowed_audiences: List[str],
        **kwargs
    ):
        super(ResourceProviderManifestPropertiesProviderAuthentication, self).__init__(allowed_audiences=allowed_audiences, **kwargs)


class ResourceProviderManifestPropertiesRequestHeaderOptions(RequestHeaderOptions):
    """ResourceProviderManifestPropertiesRequestHeaderOptions.

    :param opt_in_headers:  Possible values include: "NotSpecified", "SignedUserToken",
     "ClientGroupMembership", "SignedAuxiliaryTokens", "UnboundedClientGroupMembership".
    :type opt_in_headers: str or ~provider_hub.models.OptInHeaderType
    """

    _attribute_map = {
        'opt_in_headers': {'key': 'optInHeaders', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        opt_in_headers: Optional[Union[str, "OptInHeaderType"]] = None,
        **kwargs
    ):
        super(ResourceProviderManifestPropertiesRequestHeaderOptions, self).__init__(opt_in_headers=opt_in_headers, **kwargs)


class TemplateDeploymentOptions(msrest.serialization.Model):
    """TemplateDeploymentOptions.

    :param preflight_supported:
    :type preflight_supported: bool
    :param preflight_options:
    :type preflight_options: list[str or ~provider_hub.models.PreflightOption]
    """

    _attribute_map = {
        'preflight_supported': {'key': 'preflightSupported', 'type': 'bool'},
        'preflight_options': {'key': 'preflightOptions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        preflight_supported: Optional[bool] = None,
        preflight_options: Optional[List[Union[str, "PreflightOption"]]] = None,
        **kwargs
    ):
        super(TemplateDeploymentOptions, self).__init__(**kwargs)
        self.preflight_supported = preflight_supported
        self.preflight_options = preflight_options


class ResourceProviderManifestPropertiesTemplateDeploymentOptions(TemplateDeploymentOptions):
    """ResourceProviderManifestPropertiesTemplateDeploymentOptions.

    :param preflight_supported:
    :type preflight_supported: bool
    :param preflight_options:
    :type preflight_options: list[str or ~provider_hub.models.PreflightOption]
    """

    _attribute_map = {
        'preflight_supported': {'key': 'preflightSupported', 'type': 'bool'},
        'preflight_options': {'key': 'preflightOptions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        preflight_supported: Optional[bool] = None,
        preflight_options: Optional[List[Union[str, "PreflightOption"]]] = None,
        **kwargs
    ):
        super(ResourceProviderManifestPropertiesTemplateDeploymentOptions, self).__init__(preflight_supported=preflight_supported, preflight_options=preflight_options, **kwargs)


class ResourceProviderManifestProviderAuthentication(ResourceProviderAuthentication):
    """ResourceProviderManifestProviderAuthentication.

    All required parameters must be populated in order to send to Azure.

    :param allowed_audiences: Required.
    :type allowed_audiences: list[str]
    """

    _validation = {
        'allowed_audiences': {'required': True},
    }

    _attribute_map = {
        'allowed_audiences': {'key': 'allowedAudiences', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        allowed_audiences: List[str],
        **kwargs
    ):
        super(ResourceProviderManifestProviderAuthentication, self).__init__(allowed_audiences=allowed_audiences, **kwargs)


class ResourceProviderManifestRequestHeaderOptions(RequestHeaderOptions):
    """ResourceProviderManifestRequestHeaderOptions.

    :param opt_in_headers:  Possible values include: "NotSpecified", "SignedUserToken",
     "ClientGroupMembership", "SignedAuxiliaryTokens", "UnboundedClientGroupMembership".
    :type opt_in_headers: str or ~provider_hub.models.OptInHeaderType
    """

    _attribute_map = {
        'opt_in_headers': {'key': 'optInHeaders', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        opt_in_headers: Optional[Union[str, "OptInHeaderType"]] = None,
        **kwargs
    ):
        super(ResourceProviderManifestRequestHeaderOptions, self).__init__(opt_in_headers=opt_in_headers, **kwargs)


class ResourceProviderManifestReRegisterSubscriptionMetadata(ReRegisterSubscriptionMetadata):
    """ResourceProviderManifestReRegisterSubscriptionMetadata.

    All required parameters must be populated in order to send to Azure.

    :param enabled: Required.
    :type enabled: bool
    :param concurrency_limit:
    :type concurrency_limit: int
    """

    _validation = {
        'enabled': {'required': True},
    }

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'concurrency_limit': {'key': 'concurrencyLimit', 'type': 'int'},
    }

    def __init__(
        self,
        *,
        enabled: bool,
        concurrency_limit: Optional[int] = None,
        **kwargs
    ):
        super(ResourceProviderManifestReRegisterSubscriptionMetadata, self).__init__(enabled=enabled, concurrency_limit=concurrency_limit, **kwargs)


class ResourceType(msrest.serialization.Model):
    """ResourceType.

    :param name:
    :type name: str
    :param routing_type:  Possible values include: "Default", "ProxyOnly", "HostBased",
     "Extension", "Tenant", "Fanout", "LocationBased", "Failover", "CascadeExtension".
    :type routing_type: str or ~provider_hub.models.RoutingType
    :param resource_validation:  Possible values include: "NotSpecified", "ReservedWords",
     "ProfaneWords".
    :type resource_validation: str or ~provider_hub.models.ResourceValidation
    :param allowed_unauthorized_actions:
    :type allowed_unauthorized_actions: list[str]
    :param authorization_action_mappings:
    :type authorization_action_mappings: list[~provider_hub.models.AuthorizationActionMapping]
    :param linked_access_checks:
    :type linked_access_checks: list[~provider_hub.models.LinkedAccessCheck]
    :param default_api_version:
    :type default_api_version: str
    :param logging_rules:
    :type logging_rules: list[~provider_hub.models.LoggingRule]
    :param throttling_rules:
    :type throttling_rules: list[~provider_hub.models.ThrottlingRule]
    :param endpoints:
    :type endpoints: list[~provider_hub.models.ResourceProviderEndpoint]
    :param marketplace_type:  Possible values include: "NotSpecified", "AddOn", "Bypass", "Store".
    :type marketplace_type: str or ~provider_hub.models.ResourceTypeMarketplaceType
    :param identity_management:
    :type identity_management: ~provider_hub.models.IdentityManagement
    :param metadata: Any object.
    :type metadata: object
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param subscription_state_rules:
    :type subscription_state_rules: list[~provider_hub.models.SubscriptionStateRule]
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param sku_link:
    :type sku_link: str
    :param disallowed_action_verbs:
    :type disallowed_action_verbs: list[str]
    :param template_deployment_policy:
    :type template_deployment_policy: ~provider_hub.models.TemplateDeploymentPolicy
    :param extended_locations:
    :type extended_locations: list[~provider_hub.models.ExtendedLocationOptions]
    :param linked_operation_rules:
    :type linked_operation_rules: list[~provider_hub.models.LinkedOperationRule]
    :param resource_deletion_policy:  Possible values include: "NotSpecified", "Cascade", "Force".
    :type resource_deletion_policy: str or ~provider_hub.models.ManifestResourceDeletionPolicy
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'routing_type': {'key': 'routingType', 'type': 'str'},
        'resource_validation': {'key': 'resourceValidation', 'type': 'str'},
        'allowed_unauthorized_actions': {'key': 'allowedUnauthorizedActions', 'type': '[str]'},
        'authorization_action_mappings': {'key': 'authorizationActionMappings', 'type': '[AuthorizationActionMapping]'},
        'linked_access_checks': {'key': 'linkedAccessChecks', 'type': '[LinkedAccessCheck]'},
        'default_api_version': {'key': 'defaultApiVersion', 'type': 'str'},
        'logging_rules': {'key': 'loggingRules', 'type': '[LoggingRule]'},
        'throttling_rules': {'key': 'throttlingRules', 'type': '[ThrottlingRule]'},
        'endpoints': {'key': 'endpoints', 'type': '[ResourceProviderEndpoint]'},
        'marketplace_type': {'key': 'marketplaceType', 'type': 'str'},
        'identity_management': {'key': 'identityManagement', 'type': 'IdentityManagement'},
        'metadata': {'key': 'metadata', 'type': 'object'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'subscription_state_rules': {'key': 'subscriptionStateRules', 'type': '[SubscriptionStateRule]'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'sku_link': {'key': 'skuLink', 'type': 'str'},
        'disallowed_action_verbs': {'key': 'disallowedActionVerbs', 'type': '[str]'},
        'template_deployment_policy': {'key': 'templateDeploymentPolicy', 'type': 'TemplateDeploymentPolicy'},
        'extended_locations': {'key': 'extendedLocations', 'type': '[ExtendedLocationOptions]'},
        'linked_operation_rules': {'key': 'linkedOperationRules', 'type': '[LinkedOperationRule]'},
        'resource_deletion_policy': {'key': 'resourceDeletionPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: Optional[str] = None,
        routing_type: Optional[Union[str, "RoutingType"]] = None,
        resource_validation: Optional[Union[str, "ResourceValidation"]] = None,
        allowed_unauthorized_actions: Optional[List[str]] = None,
        authorization_action_mappings: Optional[List["AuthorizationActionMapping"]] = None,
        linked_access_checks: Optional[List["LinkedAccessCheck"]] = None,
        default_api_version: Optional[str] = None,
        logging_rules: Optional[List["LoggingRule"]] = None,
        throttling_rules: Optional[List["ThrottlingRule"]] = None,
        endpoints: Optional[List["ResourceProviderEndpoint"]] = None,
        marketplace_type: Optional[Union[str, "ResourceTypeMarketplaceType"]] = None,
        identity_management: Optional["IdentityManagement"] = None,
        metadata: Optional[object] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        subscription_state_rules: Optional[List["SubscriptionStateRule"]] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        sku_link: Optional[str] = None,
        disallowed_action_verbs: Optional[List[str]] = None,
        template_deployment_policy: Optional["TemplateDeploymentPolicy"] = None,
        extended_locations: Optional[List["ExtendedLocationOptions"]] = None,
        linked_operation_rules: Optional[List["LinkedOperationRule"]] = None,
        resource_deletion_policy: Optional[Union[str, "ManifestResourceDeletionPolicy"]] = None,
        **kwargs
    ):
        super(ResourceType, self).__init__(**kwargs)
        self.name = name
        self.routing_type = routing_type
        self.resource_validation = resource_validation
        self.allowed_unauthorized_actions = allowed_unauthorized_actions
        self.authorization_action_mappings = authorization_action_mappings
        self.linked_access_checks = linked_access_checks
        self.default_api_version = default_api_version
        self.logging_rules = logging_rules
        self.throttling_rules = throttling_rules
        self.endpoints = endpoints
        self.marketplace_type = marketplace_type
        self.identity_management = identity_management
        self.metadata = metadata
        self.required_features = required_features
        self.features_rule = features_rule
        self.subscription_state_rules = subscription_state_rules
        self.service_tree_infos = service_tree_infos
        self.request_header_options = request_header_options
        self.sku_link = sku_link
        self.disallowed_action_verbs = disallowed_action_verbs
        self.template_deployment_policy = template_deployment_policy
        self.extended_locations = extended_locations
        self.linked_operation_rules = linked_operation_rules
        self.resource_deletion_policy = resource_deletion_policy


class ResourceTypeEndpoint(msrest.serialization.Model):
    """ResourceTypeEndpoint.

    :param enabled:
    :type enabled: bool
    :param api_versions:
    :type api_versions: list[str]
    :param locations:
    :type locations: list[str]
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param extensions:
    :type extensions: list[~provider_hub.models.ResourceTypeExtension]
    :param timeout:
    :type timeout: ~datetime.timedelta
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'api_versions': {'key': 'apiVersions', 'type': '[str]'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'extensions': {'key': 'extensions', 'type': '[ResourceTypeExtension]'},
        'timeout': {'key': 'timeout', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        enabled: Optional[bool] = None,
        api_versions: Optional[List[str]] = None,
        locations: Optional[List[str]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        extensions: Optional[List["ResourceTypeExtension"]] = None,
        timeout: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ResourceTypeEndpoint, self).__init__(**kwargs)
        self.enabled = enabled
        self.api_versions = api_versions
        self.locations = locations
        self.required_features = required_features
        self.features_rule = features_rule
        self.extensions = extensions
        self.timeout = timeout


class ResourceTypeEndpointFeaturesRule(FeaturesRule):
    """ResourceTypeEndpointFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceTypeEndpointFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceTypeExtension(msrest.serialization.Model):
    """ResourceTypeExtension.

    :param endpoint_uri:
    :type endpoint_uri: str
    :param extension_categories:
    :type extension_categories: list[str or ~provider_hub.models.ExtensionCategory]
    :param timeout:
    :type timeout: ~datetime.timedelta
    """

    _attribute_map = {
        'endpoint_uri': {'key': 'endpointUri', 'type': 'str'},
        'extension_categories': {'key': 'extensionCategories', 'type': '[str]'},
        'timeout': {'key': 'timeout', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        endpoint_uri: Optional[str] = None,
        extension_categories: Optional[List[Union[str, "ExtensionCategory"]]] = None,
        timeout: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ResourceTypeExtension, self).__init__(**kwargs)
        self.endpoint_uri = endpoint_uri
        self.extension_categories = extension_categories
        self.timeout = timeout


class ResourceTypeExtensionOptions(msrest.serialization.Model):
    """ResourceTypeExtensionOptions.

    :param resource_creation_begin:
    :type resource_creation_begin: ~provider_hub.models.ExtensionOptions
    """

    _attribute_map = {
        'resource_creation_begin': {'key': 'resourceCreationBegin', 'type': 'ExtensionOptions'},
    }

    def __init__(
        self,
        *,
        resource_creation_begin: Optional["ExtensionOptions"] = None,
        **kwargs
    ):
        super(ResourceTypeExtensionOptions, self).__init__(**kwargs)
        self.resource_creation_begin = resource_creation_begin


class ResourceTypeExtensionOptionsResourceCreationBegin(ExtensionOptions):
    """ResourceTypeExtensionOptionsResourceCreationBegin.

    :param request:
    :type request: list[str or ~provider_hub.models.ExtensionOptionType]
    :param response:
    :type response: list[str or ~provider_hub.models.ExtensionOptionType]
    """

    _attribute_map = {
        'request': {'key': 'request', 'type': '[str]'},
        'response': {'key': 'response', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        request: Optional[List[Union[str, "ExtensionOptionType"]]] = None,
        response: Optional[List[Union[str, "ExtensionOptionType"]]] = None,
        **kwargs
    ):
        super(ResourceTypeExtensionOptionsResourceCreationBegin, self).__init__(request=request, response=response, **kwargs)


class ResourceTypeFeaturesRule(FeaturesRule):
    """ResourceTypeFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceTypeFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceTypeIdentityManagement(IdentityManagement):
    """ResourceTypeIdentityManagement.

    :param type:  Possible values include: "NotSpecified", "SystemAssigned", "UserAssigned",
     "Actor", "DelegatedResourceIdentity".
    :type type: str or ~provider_hub.models.IdentityManagementTypes
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "IdentityManagementTypes"]] = None,
        **kwargs
    ):
        super(ResourceTypeIdentityManagement, self).__init__(type=type, **kwargs)


class ResourceTypeRegistration(Resource):
    """ResourceTypeRegistration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.ResourceTypeRegistrationProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ResourceTypeRegistrationProperties'},
    }

    def __init__(
        self,
        *,
        properties: Optional["ResourceTypeRegistrationProperties"] = None,
        **kwargs
    ):
        super(ResourceTypeRegistration, self).__init__(**kwargs)
        self.properties = properties


class ResourceTypeRegistrationArrayResponseWithContinuation(msrest.serialization.Model):
    """ResourceTypeRegistrationArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.ResourceTypeRegistration]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[ResourceTypeRegistration]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["ResourceTypeRegistration"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class ResourceTypeRegistrationProperties(msrest.serialization.Model):
    """ResourceTypeRegistrationProperties.

    :param routing_type:  Possible values include: "Default", "ProxyOnly", "HostBased",
     "Extension", "Tenant", "Fanout", "LocationBased", "Failover", "CascadeExtension".
    :type routing_type: str or ~provider_hub.models.RoutingType
    :param regionality:  Possible values include: "NotSpecified", "Global", "Regional".
    :type regionality: str or ~provider_hub.models.Regionality
    :param endpoints:
    :type endpoints: list[~provider_hub.models.ResourceTypeEndpoint]
    :param extension_options:
    :type extension_options: ~provider_hub.models.ResourceTypeExtensionOptions
    :param marketplace_type:  Possible values include: "NotSpecified", "AddOn", "Bypass", "Store".
    :type marketplace_type: str or
     ~provider_hub.models.ResourceTypeRegistrationPropertiesMarketplaceType
    :param swagger_specifications:
    :type swagger_specifications: list[~provider_hub.models.SwaggerSpecification]
    :param allowed_unauthorized_actions:
    :type allowed_unauthorized_actions: list[str]
    :param authorization_action_mappings:
    :type authorization_action_mappings: list[~provider_hub.models.AuthorizationActionMapping]
    :param linked_access_checks:
    :type linked_access_checks: list[~provider_hub.models.LinkedAccessCheck]
    :param default_api_version:
    :type default_api_version: str
    :param logging_rules:
    :type logging_rules: list[~provider_hub.models.LoggingRule]
    :param throttling_rules:
    :type throttling_rules: list[~provider_hub.models.ThrottlingRule]
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param enable_async_operation:
    :type enable_async_operation: bool
    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param enable_third_party_s2s:
    :type enable_third_party_s2s: bool
    :param subscription_lifecycle_notification_specifications:
    :type subscription_lifecycle_notification_specifications:
     ~provider_hub.models.SubscriptionLifecycleNotificationSpecifications
    :param is_pure_proxy:
    :type is_pure_proxy: bool
    :param identity_management:
    :type identity_management: ~provider_hub.models.IdentityManagementProperties
    :param check_name_availability_specifications:
    :type check_name_availability_specifications:
     ~provider_hub.models.CheckNameAvailabilitySpecifications
    :param disallowed_action_verbs:
    :type disallowed_action_verbs: list[str]
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param subscription_state_rules:
    :type subscription_state_rules: list[~provider_hub.models.SubscriptionStateRule]
    :param template_deployment_options:
    :type template_deployment_options: ~provider_hub.models.TemplateDeploymentOptions
    :param extended_locations:
    :type extended_locations: list[~provider_hub.models.ExtendedLocationOptions]
    :param resource_move_policy:
    :type resource_move_policy: ~provider_hub.models.ResourceMovePolicy
    :param resource_deletion_policy:  Possible values include: "NotSpecified", "CascadeDeleteAll",
     "CascadeDeleteProxyOnlyChildren".
    :type resource_deletion_policy: str or ~provider_hub.models.ResourceDeletionPolicy
    """

    _attribute_map = {
        'routing_type': {'key': 'routingType', 'type': 'str'},
        'regionality': {'key': 'regionality', 'type': 'str'},
        'endpoints': {'key': 'endpoints', 'type': '[ResourceTypeEndpoint]'},
        'extension_options': {'key': 'extensionOptions', 'type': 'ResourceTypeExtensionOptions'},
        'marketplace_type': {'key': 'marketplaceType', 'type': 'str'},
        'swagger_specifications': {'key': 'swaggerSpecifications', 'type': '[SwaggerSpecification]'},
        'allowed_unauthorized_actions': {'key': 'allowedUnauthorizedActions', 'type': '[str]'},
        'authorization_action_mappings': {'key': 'authorizationActionMappings', 'type': '[AuthorizationActionMapping]'},
        'linked_access_checks': {'key': 'linkedAccessChecks', 'type': '[LinkedAccessCheck]'},
        'default_api_version': {'key': 'defaultApiVersion', 'type': 'str'},
        'logging_rules': {'key': 'loggingRules', 'type': '[LoggingRule]'},
        'throttling_rules': {'key': 'throttlingRules', 'type': '[ThrottlingRule]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'enable_async_operation': {'key': 'enableAsyncOperation', 'type': 'bool'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'enable_third_party_s2s': {'key': 'enableThirdPartyS2S', 'type': 'bool'},
        'subscription_lifecycle_notification_specifications': {'key': 'subscriptionLifecycleNotificationSpecifications', 'type': 'SubscriptionLifecycleNotificationSpecifications'},
        'is_pure_proxy': {'key': 'isPureProxy', 'type': 'bool'},
        'identity_management': {'key': 'identityManagement', 'type': 'IdentityManagementProperties'},
        'check_name_availability_specifications': {'key': 'checkNameAvailabilitySpecifications', 'type': 'CheckNameAvailabilitySpecifications'},
        'disallowed_action_verbs': {'key': 'disallowedActionVerbs', 'type': '[str]'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'subscription_state_rules': {'key': 'subscriptionStateRules', 'type': '[SubscriptionStateRule]'},
        'template_deployment_options': {'key': 'templateDeploymentOptions', 'type': 'TemplateDeploymentOptions'},
        'extended_locations': {'key': 'extendedLocations', 'type': '[ExtendedLocationOptions]'},
        'resource_move_policy': {'key': 'resourceMovePolicy', 'type': 'ResourceMovePolicy'},
        'resource_deletion_policy': {'key': 'resourceDeletionPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        routing_type: Optional[Union[str, "RoutingType"]] = None,
        regionality: Optional[Union[str, "Regionality"]] = None,
        endpoints: Optional[List["ResourceTypeEndpoint"]] = None,
        extension_options: Optional["ResourceTypeExtensionOptions"] = None,
        marketplace_type: Optional[Union[str, "ResourceTypeRegistrationPropertiesMarketplaceType"]] = None,
        swagger_specifications: Optional[List["SwaggerSpecification"]] = None,
        allowed_unauthorized_actions: Optional[List[str]] = None,
        authorization_action_mappings: Optional[List["AuthorizationActionMapping"]] = None,
        linked_access_checks: Optional[List["LinkedAccessCheck"]] = None,
        default_api_version: Optional[str] = None,
        logging_rules: Optional[List["LoggingRule"]] = None,
        throttling_rules: Optional[List["ThrottlingRule"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        enable_async_operation: Optional[bool] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        enable_third_party_s2s: Optional[bool] = None,
        subscription_lifecycle_notification_specifications: Optional["SubscriptionLifecycleNotificationSpecifications"] = None,
        is_pure_proxy: Optional[bool] = None,
        identity_management: Optional["IdentityManagementProperties"] = None,
        check_name_availability_specifications: Optional["CheckNameAvailabilitySpecifications"] = None,
        disallowed_action_verbs: Optional[List[str]] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        subscription_state_rules: Optional[List["SubscriptionStateRule"]] = None,
        template_deployment_options: Optional["TemplateDeploymentOptions"] = None,
        extended_locations: Optional[List["ExtendedLocationOptions"]] = None,
        resource_move_policy: Optional["ResourceMovePolicy"] = None,
        resource_deletion_policy: Optional[Union[str, "ResourceDeletionPolicy"]] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationProperties, self).__init__(**kwargs)
        self.routing_type = routing_type
        self.regionality = regionality
        self.endpoints = endpoints
        self.extension_options = extension_options
        self.marketplace_type = marketplace_type
        self.swagger_specifications = swagger_specifications
        self.allowed_unauthorized_actions = allowed_unauthorized_actions
        self.authorization_action_mappings = authorization_action_mappings
        self.linked_access_checks = linked_access_checks
        self.default_api_version = default_api_version
        self.logging_rules = logging_rules
        self.throttling_rules = throttling_rules
        self.required_features = required_features
        self.features_rule = features_rule
        self.enable_async_operation = enable_async_operation
        self.provisioning_state = provisioning_state
        self.enable_third_party_s2s = enable_third_party_s2s
        self.subscription_lifecycle_notification_specifications = subscription_lifecycle_notification_specifications
        self.is_pure_proxy = is_pure_proxy
        self.identity_management = identity_management
        self.check_name_availability_specifications = check_name_availability_specifications
        self.disallowed_action_verbs = disallowed_action_verbs
        self.service_tree_infos = service_tree_infos
        self.request_header_options = request_header_options
        self.subscription_state_rules = subscription_state_rules
        self.template_deployment_options = template_deployment_options
        self.extended_locations = extended_locations
        self.resource_move_policy = resource_move_policy
        self.resource_deletion_policy = resource_deletion_policy


class ResourceTypeRegistrationPropertiesautogenerated(ResourceTypeRegistrationProperties):
    """ResourceTypeRegistrationPropertiesautogenerated.

    :param routing_type:  Possible values include: "Default", "ProxyOnly", "HostBased",
     "Extension", "Tenant", "Fanout", "LocationBased", "Failover", "CascadeExtension".
    :type routing_type: str or ~provider_hub.models.RoutingType
    :param regionality:  Possible values include: "NotSpecified", "Global", "Regional".
    :type regionality: str or ~provider_hub.models.Regionality
    :param endpoints:
    :type endpoints: list[~provider_hub.models.ResourceTypeEndpoint]
    :param extension_options:
    :type extension_options: ~provider_hub.models.ResourceTypeExtensionOptions
    :param marketplace_type:  Possible values include: "NotSpecified", "AddOn", "Bypass", "Store".
    :type marketplace_type: str or
     ~provider_hub.models.ResourceTypeRegistrationPropertiesMarketplaceType
    :param swagger_specifications:
    :type swagger_specifications: list[~provider_hub.models.SwaggerSpecification]
    :param allowed_unauthorized_actions:
    :type allowed_unauthorized_actions: list[str]
    :param authorization_action_mappings:
    :type authorization_action_mappings: list[~provider_hub.models.AuthorizationActionMapping]
    :param linked_access_checks:
    :type linked_access_checks: list[~provider_hub.models.LinkedAccessCheck]
    :param default_api_version:
    :type default_api_version: str
    :param logging_rules:
    :type logging_rules: list[~provider_hub.models.LoggingRule]
    :param throttling_rules:
    :type throttling_rules: list[~provider_hub.models.ThrottlingRule]
    :param required_features:
    :type required_features: list[str]
    :param features_rule:
    :type features_rule: ~provider_hub.models.FeaturesRule
    :param enable_async_operation:
    :type enable_async_operation: bool
    :param provisioning_state:  Possible values include: "NotSpecified", "Accepted", "Running",
     "Creating", "Created", "Deleting", "Deleted", "Canceled", "Failed", "Succeeded",
     "MovingResources", "TransientFailure", "RolloutInProgress".
    :type provisioning_state: str or ~provider_hub.models.ProvisioningState
    :param enable_third_party_s2s:
    :type enable_third_party_s2s: bool
    :param subscription_lifecycle_notification_specifications:
    :type subscription_lifecycle_notification_specifications:
     ~provider_hub.models.SubscriptionLifecycleNotificationSpecifications
    :param is_pure_proxy:
    :type is_pure_proxy: bool
    :param identity_management:
    :type identity_management: ~provider_hub.models.IdentityManagementProperties
    :param check_name_availability_specifications:
    :type check_name_availability_specifications:
     ~provider_hub.models.CheckNameAvailabilitySpecifications
    :param disallowed_action_verbs:
    :type disallowed_action_verbs: list[str]
    :param service_tree_infos:
    :type service_tree_infos: list[~provider_hub.models.ServiceTreeInfo]
    :param request_header_options:
    :type request_header_options: ~provider_hub.models.RequestHeaderOptions
    :param subscription_state_rules:
    :type subscription_state_rules: list[~provider_hub.models.SubscriptionStateRule]
    :param template_deployment_options:
    :type template_deployment_options: ~provider_hub.models.TemplateDeploymentOptions
    :param extended_locations:
    :type extended_locations: list[~provider_hub.models.ExtendedLocationOptions]
    :param resource_move_policy:
    :type resource_move_policy: ~provider_hub.models.ResourceMovePolicy
    :param resource_deletion_policy:  Possible values include: "NotSpecified", "CascadeDeleteAll",
     "CascadeDeleteProxyOnlyChildren".
    :type resource_deletion_policy: str or ~provider_hub.models.ResourceDeletionPolicy
    """

    _attribute_map = {
        'routing_type': {'key': 'routingType', 'type': 'str'},
        'regionality': {'key': 'regionality', 'type': 'str'},
        'endpoints': {'key': 'endpoints', 'type': '[ResourceTypeEndpoint]'},
        'extension_options': {'key': 'extensionOptions', 'type': 'ResourceTypeExtensionOptions'},
        'marketplace_type': {'key': 'marketplaceType', 'type': 'str'},
        'swagger_specifications': {'key': 'swaggerSpecifications', 'type': '[SwaggerSpecification]'},
        'allowed_unauthorized_actions': {'key': 'allowedUnauthorizedActions', 'type': '[str]'},
        'authorization_action_mappings': {'key': 'authorizationActionMappings', 'type': '[AuthorizationActionMapping]'},
        'linked_access_checks': {'key': 'linkedAccessChecks', 'type': '[LinkedAccessCheck]'},
        'default_api_version': {'key': 'defaultApiVersion', 'type': 'str'},
        'logging_rules': {'key': 'loggingRules', 'type': '[LoggingRule]'},
        'throttling_rules': {'key': 'throttlingRules', 'type': '[ThrottlingRule]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'features_rule': {'key': 'featuresRule', 'type': 'FeaturesRule'},
        'enable_async_operation': {'key': 'enableAsyncOperation', 'type': 'bool'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'enable_third_party_s2s': {'key': 'enableThirdPartyS2S', 'type': 'bool'},
        'subscription_lifecycle_notification_specifications': {'key': 'subscriptionLifecycleNotificationSpecifications', 'type': 'SubscriptionLifecycleNotificationSpecifications'},
        'is_pure_proxy': {'key': 'isPureProxy', 'type': 'bool'},
        'identity_management': {'key': 'identityManagement', 'type': 'IdentityManagementProperties'},
        'check_name_availability_specifications': {'key': 'checkNameAvailabilitySpecifications', 'type': 'CheckNameAvailabilitySpecifications'},
        'disallowed_action_verbs': {'key': 'disallowedActionVerbs', 'type': '[str]'},
        'service_tree_infos': {'key': 'serviceTreeInfos', 'type': '[ServiceTreeInfo]'},
        'request_header_options': {'key': 'requestHeaderOptions', 'type': 'RequestHeaderOptions'},
        'subscription_state_rules': {'key': 'subscriptionStateRules', 'type': '[SubscriptionStateRule]'},
        'template_deployment_options': {'key': 'templateDeploymentOptions', 'type': 'TemplateDeploymentOptions'},
        'extended_locations': {'key': 'extendedLocations', 'type': '[ExtendedLocationOptions]'},
        'resource_move_policy': {'key': 'resourceMovePolicy', 'type': 'ResourceMovePolicy'},
        'resource_deletion_policy': {'key': 'resourceDeletionPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        routing_type: Optional[Union[str, "RoutingType"]] = None,
        regionality: Optional[Union[str, "Regionality"]] = None,
        endpoints: Optional[List["ResourceTypeEndpoint"]] = None,
        extension_options: Optional["ResourceTypeExtensionOptions"] = None,
        marketplace_type: Optional[Union[str, "ResourceTypeRegistrationPropertiesMarketplaceType"]] = None,
        swagger_specifications: Optional[List["SwaggerSpecification"]] = None,
        allowed_unauthorized_actions: Optional[List[str]] = None,
        authorization_action_mappings: Optional[List["AuthorizationActionMapping"]] = None,
        linked_access_checks: Optional[List["LinkedAccessCheck"]] = None,
        default_api_version: Optional[str] = None,
        logging_rules: Optional[List["LoggingRule"]] = None,
        throttling_rules: Optional[List["ThrottlingRule"]] = None,
        required_features: Optional[List[str]] = None,
        features_rule: Optional["FeaturesRule"] = None,
        enable_async_operation: Optional[bool] = None,
        provisioning_state: Optional[Union[str, "ProvisioningState"]] = None,
        enable_third_party_s2s: Optional[bool] = None,
        subscription_lifecycle_notification_specifications: Optional["SubscriptionLifecycleNotificationSpecifications"] = None,
        is_pure_proxy: Optional[bool] = None,
        identity_management: Optional["IdentityManagementProperties"] = None,
        check_name_availability_specifications: Optional["CheckNameAvailabilitySpecifications"] = None,
        disallowed_action_verbs: Optional[List[str]] = None,
        service_tree_infos: Optional[List["ServiceTreeInfo"]] = None,
        request_header_options: Optional["RequestHeaderOptions"] = None,
        subscription_state_rules: Optional[List["SubscriptionStateRule"]] = None,
        template_deployment_options: Optional["TemplateDeploymentOptions"] = None,
        extended_locations: Optional[List["ExtendedLocationOptions"]] = None,
        resource_move_policy: Optional["ResourceMovePolicy"] = None,
        resource_deletion_policy: Optional[Union[str, "ResourceDeletionPolicy"]] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesautogenerated, self).__init__(routing_type=routing_type, regionality=regionality, endpoints=endpoints, extension_options=extension_options, marketplace_type=marketplace_type, swagger_specifications=swagger_specifications, allowed_unauthorized_actions=allowed_unauthorized_actions, authorization_action_mappings=authorization_action_mappings, linked_access_checks=linked_access_checks, default_api_version=default_api_version, logging_rules=logging_rules, throttling_rules=throttling_rules, required_features=required_features, features_rule=features_rule, enable_async_operation=enable_async_operation, provisioning_state=provisioning_state, enable_third_party_s2s=enable_third_party_s2s, subscription_lifecycle_notification_specifications=subscription_lifecycle_notification_specifications, is_pure_proxy=is_pure_proxy, identity_management=identity_management, check_name_availability_specifications=check_name_availability_specifications, disallowed_action_verbs=disallowed_action_verbs, service_tree_infos=service_tree_infos, request_header_options=request_header_options, subscription_state_rules=subscription_state_rules, template_deployment_options=template_deployment_options, extended_locations=extended_locations, resource_move_policy=resource_move_policy, resource_deletion_policy=resource_deletion_policy, **kwargs)


class ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications(CheckNameAvailabilitySpecifications):
    """ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications.

    :param enable_default_validation:
    :type enable_default_validation: bool
    :param resource_types_with_custom_validation:
    :type resource_types_with_custom_validation: list[str]
    """

    _attribute_map = {
        'enable_default_validation': {'key': 'enableDefaultValidation', 'type': 'bool'},
        'resource_types_with_custom_validation': {'key': 'resourceTypesWithCustomValidation', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        enable_default_validation: Optional[bool] = None,
        resource_types_with_custom_validation: Optional[List[str]] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesCheckNameAvailabilitySpecifications, self).__init__(enable_default_validation=enable_default_validation, resource_types_with_custom_validation=resource_types_with_custom_validation, **kwargs)


class ResourceTypeRegistrationPropertiesExtensionOptions(ResourceTypeExtensionOptions):
    """ResourceTypeRegistrationPropertiesExtensionOptions.

    :param resource_creation_begin:
    :type resource_creation_begin: ~provider_hub.models.ExtensionOptions
    """

    _attribute_map = {
        'resource_creation_begin': {'key': 'resourceCreationBegin', 'type': 'ExtensionOptions'},
    }

    def __init__(
        self,
        *,
        resource_creation_begin: Optional["ExtensionOptions"] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesExtensionOptions, self).__init__(resource_creation_begin=resource_creation_begin, **kwargs)


class ResourceTypeRegistrationPropertiesFeaturesRule(FeaturesRule):
    """ResourceTypeRegistrationPropertiesFeaturesRule.

    All required parameters must be populated in order to send to Azure.

    :param required_features_policy: Required.  Possible values include: "Any", "All".
    :type required_features_policy: str or ~provider_hub.models.FeaturesPolicy
    """

    _validation = {
        'required_features_policy': {'required': True},
    }

    _attribute_map = {
        'required_features_policy': {'key': 'requiredFeaturesPolicy', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        required_features_policy: Union[str, "FeaturesPolicy"],
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesFeaturesRule, self).__init__(required_features_policy=required_features_policy, **kwargs)


class ResourceTypeRegistrationPropertiesIdentityManagement(IdentityManagementProperties):
    """ResourceTypeRegistrationPropertiesIdentityManagement.

    :param type:  Possible values include: "NotSpecified", "SystemAssigned", "UserAssigned",
     "Actor", "DelegatedResourceIdentity".
    :type type: str or ~provider_hub.models.IdentityManagementTypes
    :param application_id:
    :type application_id: str
    """

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'application_id': {'key': 'applicationId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        type: Optional[Union[str, "IdentityManagementTypes"]] = None,
        application_id: Optional[str] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesIdentityManagement, self).__init__(type=type, application_id=application_id, **kwargs)


class ResourceTypeRegistrationPropertiesRequestHeaderOptions(RequestHeaderOptions):
    """ResourceTypeRegistrationPropertiesRequestHeaderOptions.

    :param opt_in_headers:  Possible values include: "NotSpecified", "SignedUserToken",
     "ClientGroupMembership", "SignedAuxiliaryTokens", "UnboundedClientGroupMembership".
    :type opt_in_headers: str or ~provider_hub.models.OptInHeaderType
    """

    _attribute_map = {
        'opt_in_headers': {'key': 'optInHeaders', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        opt_in_headers: Optional[Union[str, "OptInHeaderType"]] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesRequestHeaderOptions, self).__init__(opt_in_headers=opt_in_headers, **kwargs)


class ResourceTypeRegistrationPropertiesResourceMovePolicy(ResourceMovePolicy):
    """ResourceTypeRegistrationPropertiesResourceMovePolicy.

    :param validation_required:
    :type validation_required: bool
    :param cross_resource_group_move_enabled:
    :type cross_resource_group_move_enabled: bool
    :param cross_subscription_move_enabled:
    :type cross_subscription_move_enabled: bool
    """

    _attribute_map = {
        'validation_required': {'key': 'validationRequired', 'type': 'bool'},
        'cross_resource_group_move_enabled': {'key': 'crossResourceGroupMoveEnabled', 'type': 'bool'},
        'cross_subscription_move_enabled': {'key': 'crossSubscriptionMoveEnabled', 'type': 'bool'},
    }

    def __init__(
        self,
        *,
        validation_required: Optional[bool] = None,
        cross_resource_group_move_enabled: Optional[bool] = None,
        cross_subscription_move_enabled: Optional[bool] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesResourceMovePolicy, self).__init__(validation_required=validation_required, cross_resource_group_move_enabled=cross_resource_group_move_enabled, cross_subscription_move_enabled=cross_subscription_move_enabled, **kwargs)


class ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications(SubscriptionLifecycleNotificationSpecifications):
    """ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications.

    :param subscription_state_override_actions:
    :type subscription_state_override_actions:
     list[~provider_hub.models.SubscriptionStateOverrideAction]
    :param soft_delete_ttl:
    :type soft_delete_ttl: ~datetime.timedelta
    """

    _attribute_map = {
        'subscription_state_override_actions': {'key': 'subscriptionStateOverrideActions', 'type': '[SubscriptionStateOverrideAction]'},
        'soft_delete_ttl': {'key': 'softDeleteTTL', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        subscription_state_override_actions: Optional[List["SubscriptionStateOverrideAction"]] = None,
        soft_delete_ttl: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesSubscriptionLifecycleNotificationSpecifications, self).__init__(subscription_state_override_actions=subscription_state_override_actions, soft_delete_ttl=soft_delete_ttl, **kwargs)


class ResourceTypeRegistrationPropertiesTemplateDeploymentOptions(TemplateDeploymentOptions):
    """ResourceTypeRegistrationPropertiesTemplateDeploymentOptions.

    :param preflight_supported:
    :type preflight_supported: bool
    :param preflight_options:
    :type preflight_options: list[str or ~provider_hub.models.PreflightOption]
    """

    _attribute_map = {
        'preflight_supported': {'key': 'preflightSupported', 'type': 'bool'},
        'preflight_options': {'key': 'preflightOptions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        preflight_supported: Optional[bool] = None,
        preflight_options: Optional[List[Union[str, "PreflightOption"]]] = None,
        **kwargs
    ):
        super(ResourceTypeRegistrationPropertiesTemplateDeploymentOptions, self).__init__(preflight_supported=preflight_supported, preflight_options=preflight_options, **kwargs)


class ResourceTypeRequestHeaderOptions(RequestHeaderOptions):
    """ResourceTypeRequestHeaderOptions.

    :param opt_in_headers:  Possible values include: "NotSpecified", "SignedUserToken",
     "ClientGroupMembership", "SignedAuxiliaryTokens", "UnboundedClientGroupMembership".
    :type opt_in_headers: str or ~provider_hub.models.OptInHeaderType
    """

    _attribute_map = {
        'opt_in_headers': {'key': 'optInHeaders', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        opt_in_headers: Optional[Union[str, "OptInHeaderType"]] = None,
        **kwargs
    ):
        super(ResourceTypeRequestHeaderOptions, self).__init__(opt_in_headers=opt_in_headers, **kwargs)


class ResourceTypeSku(msrest.serialization.Model):
    """ResourceTypeSku.

    All required parameters must be populated in order to send to Azure.

    :param sku_settings: Required.
    :type sku_settings: list[~provider_hub.models.SkuSetting]
    """

    _validation = {
        'sku_settings': {'required': True},
    }

    _attribute_map = {
        'sku_settings': {'key': 'skuSettings', 'type': '[SkuSetting]'},
    }

    def __init__(
        self,
        *,
        sku_settings: List["SkuSetting"],
        **kwargs
    ):
        super(ResourceTypeSku, self).__init__(**kwargs)
        self.sku_settings = sku_settings


class TemplateDeploymentPolicy(msrest.serialization.Model):
    """TemplateDeploymentPolicy.

    All required parameters must be populated in order to send to Azure.

    :param capabilities: Required.  Possible values include: "Default", "Preflight".
    :type capabilities: str or ~provider_hub.models.TemplateDeploymentCapabilities
    :param preflight_options: Required.  Possible values include: "None", "ValidationRequests",
     "DeploymentRequests", "TestOnly", "RegisteredOnly".
    :type preflight_options: str or ~provider_hub.models.TemplateDeploymentPreflightOptions
    """

    _validation = {
        'capabilities': {'required': True},
        'preflight_options': {'required': True},
    }

    _attribute_map = {
        'capabilities': {'key': 'capabilities', 'type': 'str'},
        'preflight_options': {'key': 'preflightOptions', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        capabilities: Union[str, "TemplateDeploymentCapabilities"],
        preflight_options: Union[str, "TemplateDeploymentPreflightOptions"],
        **kwargs
    ):
        super(TemplateDeploymentPolicy, self).__init__(**kwargs)
        self.capabilities = capabilities
        self.preflight_options = preflight_options


class ResourceTypeTemplateDeploymentPolicy(TemplateDeploymentPolicy):
    """ResourceTypeTemplateDeploymentPolicy.

    All required parameters must be populated in order to send to Azure.

    :param capabilities: Required.  Possible values include: "Default", "Preflight".
    :type capabilities: str or ~provider_hub.models.TemplateDeploymentCapabilities
    :param preflight_options: Required.  Possible values include: "None", "ValidationRequests",
     "DeploymentRequests", "TestOnly", "RegisteredOnly".
    :type preflight_options: str or ~provider_hub.models.TemplateDeploymentPreflightOptions
    """

    _validation = {
        'capabilities': {'required': True},
        'preflight_options': {'required': True},
    }

    _attribute_map = {
        'capabilities': {'key': 'capabilities', 'type': 'str'},
        'preflight_options': {'key': 'preflightOptions', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        capabilities: Union[str, "TemplateDeploymentCapabilities"],
        preflight_options: Union[str, "TemplateDeploymentPreflightOptions"],
        **kwargs
    ):
        super(ResourceTypeTemplateDeploymentPolicy, self).__init__(capabilities=capabilities, preflight_options=preflight_options, **kwargs)


class ServiceTreeInfo(msrest.serialization.Model):
    """ServiceTreeInfo.

    :param service_id:
    :type service_id: str
    :param component_id:
    :type component_id: str
    """

    _attribute_map = {
        'service_id': {'key': 'serviceId', 'type': 'str'},
        'component_id': {'key': 'componentId', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        service_id: Optional[str] = None,
        component_id: Optional[str] = None,
        **kwargs
    ):
        super(ServiceTreeInfo, self).__init__(**kwargs)
        self.service_id = service_id
        self.component_id = component_id


class SkuCapability(msrest.serialization.Model):
    """SkuCapability.

    All required parameters must be populated in order to send to Azure.

    :param name: Required.
    :type name: str
    :param value: Required.
    :type value: str
    """

    _validation = {
        'name': {'required': True},
        'value': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'value': {'key': 'value', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        name: str,
        value: str,
        **kwargs
    ):
        super(SkuCapability, self).__init__(**kwargs)
        self.name = name
        self.value = value


class SkuCapacity(msrest.serialization.Model):
    """SkuCapacity.

    All required parameters must be populated in order to send to Azure.

    :param minimum: Required.
    :type minimum: int
    :param maximum:
    :type maximum: int
    :param default:
    :type default: int
    :param scale_type:  Possible values include: "None", "Manual", "Automatic".
    :type scale_type: str or ~provider_hub.models.SkuScaleType
    """

    _validation = {
        'minimum': {'required': True},
    }

    _attribute_map = {
        'minimum': {'key': 'minimum', 'type': 'int'},
        'maximum': {'key': 'maximum', 'type': 'int'},
        'default': {'key': 'default', 'type': 'int'},
        'scale_type': {'key': 'scaleType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        minimum: int,
        maximum: Optional[int] = None,
        default: Optional[int] = None,
        scale_type: Optional[Union[str, "SkuScaleType"]] = None,
        **kwargs
    ):
        super(SkuCapacity, self).__init__(**kwargs)
        self.minimum = minimum
        self.maximum = maximum
        self.default = default
        self.scale_type = scale_type


class SkuCost(msrest.serialization.Model):
    """SkuCost.

    All required parameters must be populated in order to send to Azure.

    :param meter_id: Required.
    :type meter_id: str
    :param quantity:
    :type quantity: int
    :param extended_unit:
    :type extended_unit: str
    """

    _validation = {
        'meter_id': {'required': True},
    }

    _attribute_map = {
        'meter_id': {'key': 'meterId', 'type': 'str'},
        'quantity': {'key': 'quantity', 'type': 'int'},
        'extended_unit': {'key': 'extendedUnit', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        meter_id: str,
        quantity: Optional[int] = None,
        extended_unit: Optional[str] = None,
        **kwargs
    ):
        super(SkuCost, self).__init__(**kwargs)
        self.meter_id = meter_id
        self.quantity = quantity
        self.extended_unit = extended_unit


class SkuLocationInfo(msrest.serialization.Model):
    """SkuLocationInfo.

    All required parameters must be populated in order to send to Azure.

    :param location: Required.
    :type location: str
    :param zones:
    :type zones: list[str]
    :param zone_details:
    :type zone_details: list[~provider_hub.models.SkuZoneDetail]
    :param extended_locations:
    :type extended_locations: list[str]
    :param type:  Possible values include: "NotSpecified", "EdgeZone", "ArcZone".
    :type type: str or ~provider_hub.models.SkuLocationInfoType
    """

    _validation = {
        'location': {'required': True},
    }

    _attribute_map = {
        'location': {'key': 'location', 'type': 'str'},
        'zones': {'key': 'zones', 'type': '[str]'},
        'zone_details': {'key': 'zoneDetails', 'type': '[SkuZoneDetail]'},
        'extended_locations': {'key': 'extendedLocations', 'type': '[str]'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        location: str,
        zones: Optional[List[str]] = None,
        zone_details: Optional[List["SkuZoneDetail"]] = None,
        extended_locations: Optional[List[str]] = None,
        type: Optional[Union[str, "SkuLocationInfoType"]] = None,
        **kwargs
    ):
        super(SkuLocationInfo, self).__init__(**kwargs)
        self.location = location
        self.zones = zones
        self.zone_details = zone_details
        self.extended_locations = extended_locations
        self.type = type


class SkuResource(Resource):
    """SkuResource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. Ex -
     /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :param properties:
    :type properties: ~provider_hub.models.ResourceTypeSku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'ResourceTypeSku'},
    }

    def __init__(
        self,
        *,
        properties: Optional["ResourceTypeSku"] = None,
        **kwargs
    ):
        super(SkuResource, self).__init__(**kwargs)
        self.properties = properties


class SkuResourceArrayResponseWithContinuation(msrest.serialization.Model):
    """SkuResourceArrayResponseWithContinuation.

    :param value:
    :type value: list[~provider_hub.models.SkuResource]
    :param next_link: The URL to get to the next set of results, if there are any.
    :type next_link: str
    """

    _attribute_map = {
        'value': {'key': 'value', 'type': '[SkuResource]'},
        'next_link': {'key': 'nextLink', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        value: Optional[List["SkuResource"]] = None,
        next_link: Optional[str] = None,
        **kwargs
    ):
        super(SkuResourceArrayResponseWithContinuation, self).__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class SkuResourceProperties(ResourceTypeSku):
    """SkuResourceProperties.

    All required parameters must be populated in order to send to Azure.

    :param sku_settings: Required.
    :type sku_settings: list[~provider_hub.models.SkuSetting]
    """

    _validation = {
        'sku_settings': {'required': True},
    }

    _attribute_map = {
        'sku_settings': {'key': 'skuSettings', 'type': '[SkuSetting]'},
    }

    def __init__(
        self,
        *,
        sku_settings: List["SkuSetting"],
        **kwargs
    ):
        super(SkuResourceProperties, self).__init__(sku_settings=sku_settings, **kwargs)


class SkuSetting(msrest.serialization.Model):
    """SkuSetting.

    All required parameters must be populated in order to send to Azure.

    :param name: Required.
    :type name: str
    :param tier:
    :type tier: str
    :param size:
    :type size: str
    :param family:
    :type family: str
    :param kind:
    :type kind: str
    :param locations:
    :type locations: list[str]
    :param location_info:
    :type location_info: list[~provider_hub.models.SkuLocationInfo]
    :param required_quota_ids:
    :type required_quota_ids: list[str]
    :param required_features:
    :type required_features: list[str]
    :param capacity:
    :type capacity: ~provider_hub.models.SkuCapacity
    :param costs:
    :type costs: list[~provider_hub.models.SkuCost]
    :param capabilities:
    :type capabilities: list[~provider_hub.models.SkuCapability]
    """

    _validation = {
        'name': {'required': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'size': {'key': 'size', 'type': 'str'},
        'family': {'key': 'family', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
        'locations': {'key': 'locations', 'type': '[str]'},
        'location_info': {'key': 'locationInfo', 'type': '[SkuLocationInfo]'},
        'required_quota_ids': {'key': 'requiredQuotaIds', 'type': '[str]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
        'capacity': {'key': 'capacity', 'type': 'SkuCapacity'},
        'costs': {'key': 'costs', 'type': '[SkuCost]'},
        'capabilities': {'key': 'capabilities', 'type': '[SkuCapability]'},
    }

    def __init__(
        self,
        *,
        name: str,
        tier: Optional[str] = None,
        size: Optional[str] = None,
        family: Optional[str] = None,
        kind: Optional[str] = None,
        locations: Optional[List[str]] = None,
        location_info: Optional[List["SkuLocationInfo"]] = None,
        required_quota_ids: Optional[List[str]] = None,
        required_features: Optional[List[str]] = None,
        capacity: Optional["SkuCapacity"] = None,
        costs: Optional[List["SkuCost"]] = None,
        capabilities: Optional[List["SkuCapability"]] = None,
        **kwargs
    ):
        super(SkuSetting, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.size = size
        self.family = family
        self.kind = kind
        self.locations = locations
        self.location_info = location_info
        self.required_quota_ids = required_quota_ids
        self.required_features = required_features
        self.capacity = capacity
        self.costs = costs
        self.capabilities = capabilities


class SkuSettingCapacity(SkuCapacity):
    """SkuSettingCapacity.

    All required parameters must be populated in order to send to Azure.

    :param minimum: Required.
    :type minimum: int
    :param maximum:
    :type maximum: int
    :param default:
    :type default: int
    :param scale_type:  Possible values include: "None", "Manual", "Automatic".
    :type scale_type: str or ~provider_hub.models.SkuScaleType
    """

    _validation = {
        'minimum': {'required': True},
    }

    _attribute_map = {
        'minimum': {'key': 'minimum', 'type': 'int'},
        'maximum': {'key': 'maximum', 'type': 'int'},
        'default': {'key': 'default', 'type': 'int'},
        'scale_type': {'key': 'scaleType', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        minimum: int,
        maximum: Optional[int] = None,
        default: Optional[int] = None,
        scale_type: Optional[Union[str, "SkuScaleType"]] = None,
        **kwargs
    ):
        super(SkuSettingCapacity, self).__init__(minimum=minimum, maximum=maximum, default=default, scale_type=scale_type, **kwargs)


class SkuZoneDetail(msrest.serialization.Model):
    """SkuZoneDetail.

    :param name:
    :type name: list[str]
    :param capabilities:
    :type capabilities: list[~provider_hub.models.SkuCapability]
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': '[str]'},
        'capabilities': {'key': 'capabilities', 'type': '[SkuCapability]'},
    }

    def __init__(
        self,
        *,
        name: Optional[List[str]] = None,
        capabilities: Optional[List["SkuCapability"]] = None,
        **kwargs
    ):
        super(SkuZoneDetail, self).__init__(**kwargs)
        self.name = name
        self.capabilities = capabilities


class SubscriptionStateOverrideAction(msrest.serialization.Model):
    """SubscriptionStateOverrideAction.

    All required parameters must be populated in order to send to Azure.

    :param state: Required.  Possible values include: "Registered", "Unregistered", "Warned",
     "Suspended", "Deleted", "WarnedToRegistered", "WarnedToSuspended", "WarnedToDeleted",
     "WarnedToUnregistered", "SuspendedToRegistered", "SuspendedToWarned", "SuspendedToDeleted",
     "SuspendedToUnregistered".
    :type state: str or ~provider_hub.models.SubscriptionTransitioningState
    :param action: Required.  Possible values include: "NotDefined", "DeleteAllResources",
     "SoftDeleteAllResources", "NoOp", "BillingCancellation", "UndoSoftDelete".
    :type action: str or ~provider_hub.models.SubscriptionNotificationOperation
    """

    _validation = {
        'state': {'required': True},
        'action': {'required': True},
    }

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'action': {'key': 'action', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        state: Union[str, "SubscriptionTransitioningState"],
        action: Union[str, "SubscriptionNotificationOperation"],
        **kwargs
    ):
        super(SubscriptionStateOverrideAction, self).__init__(**kwargs)
        self.state = state
        self.action = action


class SubscriptionStateRule(msrest.serialization.Model):
    """SubscriptionStateRule.

    :param state:  Possible values include: "NotDefined", "Enabled", "Warned", "PastDue",
     "Disabled", "Deleted".
    :type state: str or ~provider_hub.models.SubscriptionState
    :param allowed_actions:
    :type allowed_actions: list[str]
    """

    _attribute_map = {
        'state': {'key': 'state', 'type': 'str'},
        'allowed_actions': {'key': 'allowedActions', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        state: Optional[Union[str, "SubscriptionState"]] = None,
        allowed_actions: Optional[List[str]] = None,
        **kwargs
    ):
        super(SubscriptionStateRule, self).__init__(**kwargs)
        self.state = state
        self.allowed_actions = allowed_actions


class SwaggerSpecification(msrest.serialization.Model):
    """SwaggerSpecification.

    :param api_versions:
    :type api_versions: list[str]
    :param swagger_spec_folder_uri:
    :type swagger_spec_folder_uri: str
    """

    _attribute_map = {
        'api_versions': {'key': 'apiVersions', 'type': '[str]'},
        'swagger_spec_folder_uri': {'key': 'swaggerSpecFolderUri', 'type': 'str'},
    }

    def __init__(
        self,
        *,
        api_versions: Optional[List[str]] = None,
        swagger_spec_folder_uri: Optional[str] = None,
        **kwargs
    ):
        super(SwaggerSpecification, self).__init__(**kwargs)
        self.api_versions = api_versions
        self.swagger_spec_folder_uri = swagger_spec_folder_uri


class ThrottlingMetric(msrest.serialization.Model):
    """ThrottlingMetric.

    All required parameters must be populated in order to send to Azure.

    :param type: Required.  Possible values include: "NotSpecified", "NumberOfRequests",
     "NumberOfResources".
    :type type: str or ~provider_hub.models.ThrottlingMetricType
    :param limit: Required.
    :type limit: long
    :param interval:
    :type interval: ~datetime.timedelta
    """

    _validation = {
        'type': {'required': True},
        'limit': {'required': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'limit': {'key': 'limit', 'type': 'long'},
        'interval': {'key': 'interval', 'type': 'duration'},
    }

    def __init__(
        self,
        *,
        type: Union[str, "ThrottlingMetricType"],
        limit: int,
        interval: Optional[datetime.timedelta] = None,
        **kwargs
    ):
        super(ThrottlingMetric, self).__init__(**kwargs)
        self.type = type
        self.limit = limit
        self.interval = interval


class ThrottlingRule(msrest.serialization.Model):
    """ThrottlingRule.

    All required parameters must be populated in order to send to Azure.

    :param action: Required.
    :type action: str
    :param metrics: Required.
    :type metrics: list[~provider_hub.models.ThrottlingMetric]
    :param required_features:
    :type required_features: list[str]
    """

    _validation = {
        'action': {'required': True},
        'metrics': {'required': True},
    }

    _attribute_map = {
        'action': {'key': 'action', 'type': 'str'},
        'metrics': {'key': 'metrics', 'type': '[ThrottlingMetric]'},
        'required_features': {'key': 'requiredFeatures', 'type': '[str]'},
    }

    def __init__(
        self,
        *,
        action: str,
        metrics: List["ThrottlingMetric"],
        required_features: Optional[List[str]] = None,
        **kwargs
    ):
        super(ThrottlingRule, self).__init__(**kwargs)
        self.action = action
        self.metrics = metrics
        self.required_features = required_features


class TypedErrorInfo(msrest.serialization.Model):
    """TypedErrorInfo.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to Azure.

    :param type: Required.
    :type type: str
    :ivar info: Any object.
    :vartype info: object
    """

    _validation = {
        'type': {'required': True},
        'info': {'readonly': True},
    }

    _attribute_map = {
        'type': {'key': 'type', 'type': 'str'},
        'info': {'key': 'info', 'type': 'object'},
    }

    def __init__(
        self,
        *,
        type: str,
        **kwargs
    ):
        super(TypedErrorInfo, self).__init__(**kwargs)
        self.type = type
        self.info = None
