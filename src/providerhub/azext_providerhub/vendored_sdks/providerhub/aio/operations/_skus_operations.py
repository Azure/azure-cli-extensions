# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse, HttpRequest
from azure.mgmt.core.exceptions import ARMErrorFormat

from ... import models

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class SkusOperations:
    """SkusOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~provider_hub.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    async def get(
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        **kwargs
    ) -> "models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.get.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}'}  # type: ignore

    async def create_or_update(
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        properties: "models.ResourceTypeSku",
        **kwargs
    ) -> "models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~provider_hub.models.ResourceTypeSku
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(properties, 'ResourceTypeSku')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}'}  # type: ignore

    async def delete(
        self,
        provider_namespace: str,
        resource_type: str,
        sku: str,
        **kwargs
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.delete.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus/{sku}'}  # type: ignore

    async def get_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        **kwargs
    ) -> "models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.get_nested_resource_type_first.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_nested_resource_type_first.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}'}  # type: ignore

    async def create_or_update_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        properties: "models.ResourceTypeSku",
        **kwargs
    ) -> "models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~provider_hub.models.ResourceTypeSku
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update_nested_resource_type_first.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(properties, 'ResourceTypeSku')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update_nested_resource_type_first.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}'}  # type: ignore

    async def delete_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        sku: str,
        **kwargs
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.delete_nested_resource_type_first.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_first.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus/{sku}'}  # type: ignore

    async def get_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        **kwargs
    ) -> "models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.get_nested_resource_type_second.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_nested_resource_type_second.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}'}  # type: ignore

    async def create_or_update_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        properties: "models.ResourceTypeSku",
        **kwargs
    ) -> "models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~provider_hub.models.ResourceTypeSku
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update_nested_resource_type_second.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(properties, 'ResourceTypeSku')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update_nested_resource_type_second.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}'}  # type: ignore

    async def delete_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        sku: str,
        **kwargs
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.delete_nested_resource_type_second.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_second.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus/{sku}'}  # type: ignore

    async def get_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        **kwargs
    ) -> "models.SkuResource":
        """Gets the sku details for the given resource type and sku name.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.get_nested_resource_type_third.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'nestedResourceTypeThird': self._serialize.url("nested_resource_type_third", nested_resource_type_third, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.get(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    get_nested_resource_type_third.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}'}  # type: ignore

    async def create_or_update_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        properties: "models.ResourceTypeSku",
        **kwargs
    ) -> "models.SkuResource":
        """Creates or updates the resource type skus in the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :param properties: The required body parameters supplied to the resource sku operation.
        :type properties: ~provider_hub.models.ResourceTypeSku
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: SkuResource, or the result of cls(response)
        :rtype: ~provider_hub.models.SkuResource
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResource"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        content_type = kwargs.pop("content_type", "application/json")
        accept = "application/json"

        # Construct URL
        url = self.create_or_update_nested_resource_type_third.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'nestedResourceTypeThird': self._serialize.url("nested_resource_type_third", nested_resource_type_third, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Content-Type'] = self._serialize.header("content_type", content_type, 'str')
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        body_content_kwargs = {}  # type: Dict[str, Any]
        body_content = self._serialize.body(properties, 'ResourceTypeSku')
        body_content_kwargs['content'] = body_content
        request = self._client.put(url, query_parameters, header_parameters, **body_content_kwargs)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        deserialized = self._deserialize('SkuResource', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized
    create_or_update_nested_resource_type_third.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}'}  # type: ignore

    async def delete_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        sku: str,
        **kwargs
    ) -> None:
        """Deletes a resource type sku.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :param sku: The SKU.
        :type sku: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        # Construct URL
        url = self.delete_nested_resource_type_third.metadata['url']  # type: ignore
        path_format_arguments = {
            'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
            'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
            'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
            'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
            'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
            'nestedResourceTypeThird': self._serialize.url("nested_resource_type_third", nested_resource_type_third, 'str'),
            'sku': self._serialize.url("sku", sku, 'str'),
        }
        url = self._client.format_url(url, **path_format_arguments)

        # Construct parameters
        query_parameters = {}  # type: Dict[str, Any]
        query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

        # Construct headers
        header_parameters = {}  # type: Dict[str, Any]
        header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

        request = self._client.delete(url, query_parameters, header_parameters)
        pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200, 204]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize(models.ErrorResponse, response)
            raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

        if cls:
            return cls(pipeline_response, None, {})

    delete_nested_resource_type_third.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus/{sku}'}  # type: ignore

    def list_by_resource_type_registrations(
        self,
        provider_namespace: str,
        resource_type: str,
        **kwargs
    ) -> AsyncIterable["models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~provider_hub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_by_resource_type_registrations.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                    'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
                    'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('SkuResourceArrayResponseWithContinuation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/skus'}  # type: ignore

    def list_by_resource_type_registrations_nested_resource_type_first(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        **kwargs
    ) -> AsyncIterable["models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~provider_hub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_by_resource_type_registrations_nested_resource_type_first.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                    'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
                    'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
                    'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('SkuResourceArrayResponseWithContinuation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_first.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/skus'}  # type: ignore

    def list_by_resource_type_registrations_nested_resource_type_second(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        **kwargs
    ) -> AsyncIterable["models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~provider_hub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_by_resource_type_registrations_nested_resource_type_second.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                    'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
                    'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
                    'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
                    'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('SkuResourceArrayResponseWithContinuation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_second.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/skus'}  # type: ignore

    def list_by_resource_type_registrations_nested_resource_type_third(
        self,
        provider_namespace: str,
        resource_type: str,
        nested_resource_type_first: str,
        nested_resource_type_second: str,
        nested_resource_type_third: str,
        **kwargs
    ) -> AsyncIterable["models.SkuResourceArrayResponseWithContinuation"]:
        """Gets the list of skus for the given resource type.

        :param provider_namespace: The name of the resource provider hosted within ProviderHub.
        :type provider_namespace: str
        :param resource_type: The resource type.
        :type resource_type: str
        :param nested_resource_type_first: The first child resource type.
        :type nested_resource_type_first: str
        :param nested_resource_type_second: The second child resource type.
        :type nested_resource_type_second: str
        :param nested_resource_type_third: The third child resource type.
        :type nested_resource_type_third: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either SkuResourceArrayResponseWithContinuation or the result of cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~provider_hub.models.SkuResourceArrayResponseWithContinuation]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["models.SkuResourceArrayResponseWithContinuation"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        api_version = "2020-11-20"
        accept = "application/json"

        def prepare_request(next_link=None):
            # Construct headers
            header_parameters = {}  # type: Dict[str, Any]
            header_parameters['Accept'] = self._serialize.header("accept", accept, 'str')

            if not next_link:
                # Construct URL
                url = self.list_by_resource_type_registrations_nested_resource_type_third.metadata['url']  # type: ignore
                path_format_arguments = {
                    'subscriptionId': self._serialize.url("self._config.subscription_id", self._config.subscription_id, 'str', min_length=1),
                    'providerNamespace': self._serialize.url("provider_namespace", provider_namespace, 'str'),
                    'resourceType': self._serialize.url("resource_type", resource_type, 'str'),
                    'nestedResourceTypeFirst': self._serialize.url("nested_resource_type_first", nested_resource_type_first, 'str'),
                    'nestedResourceTypeSecond': self._serialize.url("nested_resource_type_second", nested_resource_type_second, 'str'),
                    'nestedResourceTypeThird': self._serialize.url("nested_resource_type_third", nested_resource_type_third, 'str'),
                }
                url = self._client.format_url(url, **path_format_arguments)
                # Construct parameters
                query_parameters = {}  # type: Dict[str, Any]
                query_parameters['api-version'] = self._serialize.query("api_version", api_version, 'str')

                request = self._client.get(url, query_parameters, header_parameters)
            else:
                url = next_link
                query_parameters = {}  # type: Dict[str, Any]
                request = self._client.get(url, query_parameters, header_parameters)
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize('SkuResourceArrayResponseWithContinuation', pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                error = self._deserialize(models.ErrorResponse, response)
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                raise HttpResponseError(response=response, model=error, error_format=ARMErrorFormat)

            return pipeline_response

        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_resource_type_registrations_nested_resource_type_third.metadata = {'url': '/subscriptions/{subscriptionId}/providers/Microsoft.ProviderHub/providerRegistrations/{providerNamespace}/resourcetypeRegistrations/{resourceType}/resourcetypeRegistrations/{nestedResourceTypeFirst}/resourcetypeRegistrations/{nestedResourceTypeSecond}/resourcetypeRegistrations/{nestedResourceTypeThird}/skus'}  # type: ignore
