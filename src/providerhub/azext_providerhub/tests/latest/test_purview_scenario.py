# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from azure.cli.testsdk import ResourceGroupPreparer
from .example_steps import step_account_create
from .example_steps import step_account_show
from .example_steps import step_account_list
from .example_steps import step_account_list2
from .example_steps import step_account_update
from .example_steps import step_account_add_root_collection_admin
from .example_steps import step_account_list_key
from .example_steps import step_default_account_show
from .example_steps import step_default_account_remove
from .example_steps import step_default_account_set
from .example_steps import step_private_endpoint_connection_create
from .example_steps import step_private_endpoint_connection_show
from .example_steps import step_private_endpoint_connection_list
from .example_steps import step_private_endpoint_connection_delete
from .example_steps import step_private_link_resource_show
from .example_steps import step_private_link_resource_list
from .example_steps import step_account_delete
from .. import (
    try_manual,
    raise_if,
    calc_coverage
)


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


# Env setup_scenario
@try_manual
def setup_scenario(test):
    pass


# Env cleanup_scenario
@try_manual
def cleanup_scenario(test):
    pass


# Testcase: Scenario
@try_manual
def call_scenario(test):
    setup_scenario(test)
    step_account_create(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("managedResourceGroupName", "custom-rgname", case_sensitive=False),
        test.check("name", "{myAccount}", case_sensitive=False),
    ])
    step_account_show(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("sku.name", "Standard", case_sensitive=False),
        test.check("sku.capacity", 4),
        test.check("name", "{myAccount}", case_sensitive=False),
    ])
    step_account_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_list2(test, checks=[
        test.check('length(@)', 1),
    ])
    step_account_update(test, checks=[
        test.check("location", "West US 2", case_sensitive=False),
        test.check("sku.name", "Standard", case_sensitive=False),
        test.check("sku.capacity", 4),
        test.check("name", "{myAccount}", case_sensitive=False),
        test.check("tags.newTag", "New tag value.", case_sensitive=False),
    ])
    step_account_add_root_collection_admin(test, checks=[])
    step_account_list_key(test, checks=[])
    step_default_account_show(test, checks=[])
    step_default_account_remove(test, checks=[])
    step_default_account_set(test, checks=[])
    step_private_endpoint_connection_create(test, checks=[
        test.check("name", "{myPrivateEndpointConnection}", case_sensitive=False),
        test.check("privateLinkServiceConnectionState.description", "Approved by johndoe@company.com",
                   case_sensitive=False),
        test.check("privateLinkServiceConnectionState.status", "Approved", case_sensitive=False),
    ])
    step_private_endpoint_connection_show(test, checks=[
        test.check("name", "{myPrivateEndpointConnection}", case_sensitive=False),
        test.check("privateLinkServiceConnectionState.description", "Approved by johndoe@company.com",
                   case_sensitive=False),
        test.check("privateLinkServiceConnectionState.status", "Approved", case_sensitive=False),
    ])
    step_private_endpoint_connection_list(test, checks=[
        test.check('length(@)', 1),
    ])
    step_private_endpoint_connection_delete(test, checks=[])
    step_private_link_resource_show(test, checks=[])
    step_private_link_resource_list(test, checks=[])
    step_account_delete(test, checks=[])
    cleanup_scenario(test)


# Test class for Scenario
@try_manual
class PurviewScenarioTest(ScenarioTest):
    def __init__(self, *args, **kwargs):
        super(PurviewScenarioTest, self).__init__(*args, **kwargs)
        self.kwargs.update({
            'myAccount': 'account1',
            'myAccount2': 'myDefaultAccount',
            'myPrivateEndpointConnection': 'privateEndpointConnection1',
        })

    @ResourceGroupPreparer(name_prefix='clitestpurview_SampleResourceGroup'[:7], key='rg', parameter_name='rg')
    @ResourceGroupPreparer(name_prefix='clitestpurview_rg-1'[:7], key='rg_2', parameter_name='rg_2')
    def test_purview_Scenario(self, rg, rg_2):
        call_scenario(self)
        calc_coverage(__file__)
        raise_if()
