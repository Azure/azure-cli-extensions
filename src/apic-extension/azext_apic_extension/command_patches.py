# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# --------------------------------------------------------------------------------------------

# This file patches the commands generated by aaz to provide expected user experience per product design
# Always use aaz to update the commands if it's possible
from .aaz.latest.apic.api import (
    Create as CreateAPI,
    Delete as DeleteAPI,
    List as ListAPI,
    Show as ShowAPI,
    Update as UpdateAPI
)
from .aaz.latest.apic.api.definition import (
    Create as CreateAPIDefinition,
    Delete as DeleteAPIDefinition,
    ExportSpecification as ExportAPIDefinition,
    ImportSpecification as ImportAPIDefinition,
    List as ListAPIDefinition,
    Show as ShowAPIDefinition,
    Update as UpdateAPIDefinition
)
from .aaz.latest.apic.api.version import (
    Create as CreateAPIVersion,
    Delete as DeleteAPIVersion,
    List as ListAPIVersion,
    Show as ShowAPIVersion,
    Update as UpdateAPIVersion
)
from .aaz.latest.apic.api.deployment import (
    Create as CreateAPIDeployment,
    Delete as DeleteAPIDeployment,
    List as ListAPIDeployment,
    Show as ShowAPIDeployment,
    Update as UpdateAPIDeployment
)
from .aaz.latest.apic.environment import (
    Create as CreateEnvironment,
    Delete as DeleteEnvironment,
    List as ListEnvironment,
    Show as ShowEnvironment,
    Update as UpdateEnvironment
)
from .aaz.latest.apic.metadata import (
    Create as CreateMetadata,
    Export as ExportMetadata
)
from .aaz.latest.apic import ImportFromApim, Create as CreateService
from .aaz.latest.apic.integration import (
    Create as CreateIntegration,
    Show as ShowIntegration,
    List as ListIntegration,
    Delete as DeleteIntegration
)
from .aaz.latest.apic import Import

from azure.cli.core.aaz._arg import AAZStrArg, AAZListArg, AAZResourceIdArg
from azure.cli.core.aaz import register_command
from msrestazure.tools import is_valid_resource_id


class DefaultWorkspaceParameter:
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.workspace_name._required = False
        args_schema.workspace_name._registered = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        args.workspace_name = "default"


# `az apic` commands
class CreateServiceExtension(CreateService):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        # temporary hide sku parameter as SKU has many fields and we needs more discussion on the UX
        args_schema.sku_name._registered = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        args.sku_name = "Free"


# `az apic api` commands
class CreateAPIExtension(DefaultWorkspaceParameter, CreateAPI):
    pass


class DeleteAPIExtension(DefaultWorkspaceParameter, DeleteAPI):
    pass


class ListAPIExtension(DefaultWorkspaceParameter, ListAPI):
    pass


class ShowAPIExtension(DefaultWorkspaceParameter, ShowAPI):
    pass


class UpdateAPIExtension(DefaultWorkspaceParameter, UpdateAPI):
    pass


# `az apic api definition` commands
class CreateAPIDefinitionExtension(DefaultWorkspaceParameter, CreateAPIDefinition):
    pass


class DeleteAPIDefinitionExtension(DefaultWorkspaceParameter, DeleteAPIDefinition):
    pass


class ExportAPIDefinitionExtension(DefaultWorkspaceParameter, ExportAPIDefinition):
    pass


class ImportAPIDefinitionExtension(DefaultWorkspaceParameter, ImportAPIDefinition):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.format._required = True
        args_schema.specification._required = True
        args_schema.value._required = True
        return args_schema


class ListAPIDefinitionExtension(DefaultWorkspaceParameter, ListAPIDefinition):
    pass


class ShowAPIDefinitionExtension(DefaultWorkspaceParameter, ShowAPIDefinition):
    pass


class UpdateAPIDefinitionExtension(DefaultWorkspaceParameter, UpdateAPIDefinition):
    pass


# `az apic api version` commands
class CreateAPIVersionExtension(DefaultWorkspaceParameter, CreateAPIVersion):
    pass


class DeleteAPIVersionExtension(DefaultWorkspaceParameter, DeleteAPIVersion):
    pass


class ListAPIVersionExtension(DefaultWorkspaceParameter, ListAPIVersion):
    pass


class ShowAPIVersionExtension(DefaultWorkspaceParameter, ShowAPIVersion):
    pass


class UpdateAPIVersionExtension(DefaultWorkspaceParameter, UpdateAPIVersion):
    pass


# `az apic api deployment` commands
class CreateAPIDeploymentExtension(DefaultWorkspaceParameter, CreateAPIDeployment):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.definition_id._required = True
        args_schema.environment_id._required = True
        args_schema.server._required = True
        args_schema.title._required = True
        return args_schema


class DeleteAPIDeploymentExtension(DefaultWorkspaceParameter, DeleteAPIDeployment):
    pass


class ListAPIDeploymentExtension(DefaultWorkspaceParameter, ListAPIDeployment):
    pass


class ShowAPIDeploymentExtension(DefaultWorkspaceParameter, ShowAPIDeployment):
    pass


class UpdateAPIDeploymentExtension(DefaultWorkspaceParameter, UpdateAPIDeployment):
    pass


# `az apic environment` commands
class CreateEnvironmentExtension(DefaultWorkspaceParameter, CreateEnvironment):
    pass


class DeleteEnvironmentExtension(DefaultWorkspaceParameter, DeleteEnvironment):
    pass


class ListEnvironmentExtension(DefaultWorkspaceParameter, ListEnvironment):
    pass


class ShowEnvironmentExtension(DefaultWorkspaceParameter, ShowEnvironment):
    pass


class UpdateEnvironmentExtension(DefaultWorkspaceParameter, UpdateEnvironment):
    pass


# `az apic metadata commands`
class CreateMetadataExtension(CreateMetadata):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.assignments._required = True
        return args_schema


class ExportMetadataExtension(ExportMetadata):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.assignments._required = True
        return args_schema


# `az apic service commands`
class ImportFromApimExtension(ImportFromApim):
    # pylint: disable=too-few-public-methods
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.source_resource_ids._required = False
        args_schema.source_resource_ids._registered = False

        args_schema.apim_subscription_id = AAZStrArg(
            options=["--apim-subscription"],
            help="The subscription id of the source APIM instance.",
            required=False
        )

        args_schema.apim_resource_group = AAZStrArg(
            options=["--apim-resource-group"],
            help="The resource group of the source APIM instance.",
            required=False
        )

        args_schema.apim_name = AAZStrArg(
            options=["--apim-name"],
            help="The name of the source APIM instance.",
            required=True
        )

        args_schema.apim_apis = AAZListArg(
            options=["--apim-apis"],
            help="The APIs to be imported.",
            required=True
        )
        args_schema.apim_apis.Element = AAZStrArg()

        return args_schema

    def pre_operations(self):
        super().pre_operations()
        args = self.ctx.args

        # compose sourceResourceIds property in the request body
        # Use same subscription id and resource group as API Center by default
        resource_group = args.resource_group
        subscription_id = self.ctx.subscription_id

        # Use user provided subscription id
        if args.apim_subscription_id:
            subscription_id = args.apim_subscription_id

        # Use user provided resource group
        if args.apim_resource_group:
            resource_group = args.apim_resource_group

        source_resource_ids = []
        for item in args.apim_apis:
            source_resource_ids.append(
                f"/subscriptions/{subscription_id}/resourceGroups/{resource_group}/providers/"
                f"Microsoft.ApiManagement/service/{args.apim_name}/apis/{item}"
            )

        args.source_resource_ids = source_resource_ids


# `az apic integration` commands
class ListIntegrationExtension(DefaultWorkspaceParameter, ListIntegration):
    pass


class DeleteIntegrationExtension(DefaultWorkspaceParameter, DeleteIntegration):
    pass


class ShowIntegrationExtension(DefaultWorkspaceParameter, ShowIntegration):
    pass


@register_command(
    "apic integration create apim",
    is_preview=True,
)
class CreateApimIntegration(DefaultWorkspaceParameter, CreateIntegration):
    # pylint: disable=C0301
    """Add Azure APIM as an API source

    :example: Add Azure APIM in the same resource group as the Azure API Center instance as an API source
        az apic integration create apim -g contoso-resources -n contoso --integration-name sync-from-my-apim --azure-apim myapim

    :example: Add Azure APIM in another resource group as an API source
        az apic integration create apim -g contoso-resources -n contoso --integration-name sync-from-my-apim --azure-apim /subscriptions/12345678-1234-1234-1234-123456789abc/resourceGroups/samplegroup/providers/Microsoft.ApiManagement/service/sampleapim

    """
    # pylint: enable=C0301

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        # Remove the azure-api-management-source parameter
        args_schema.azure_api_management_source._registered = False
        # Remove the amazon-api-gateway-source parameter
        args_schema.amazon_api_gateway_source._registered = False
        # Remove the api_source_type parameter, will set it for users in pre_operations
        args_schema.api_source_type._registered = False

        # Create arg group for AzureApiManagementSource

        args_schema.msi_resource_id = AAZResourceIdArg(
            options=["--msi-resource-id"],
            arg_group="AzureApiManagementSource",
            help="The resource ID of the managed identity that has access to the API Management instance.",
        )

        args_schema.azure_apim = AAZStrArg(
            options=["--azure-apim"],
            arg_group="AzureApiManagementSource",
            help="The name or resource id of the source APIM instance.",
            required=True
        )

        return args_schema

    def pre_operations(self):
        # Set apim_resource_id based on user input
        super().pre_operations()
        args = self.ctx.args

        if not is_valid_resource_id(args.azure_apim.to_serialized_data()):
            # The APIM is in the same resource group
            resource_group = args.resource_group
            subscription_id = self.ctx.subscription_id
            apim_resource_id = (f"/subscriptions/{subscription_id}/resourceGroups/{resource_group}/providers/"
                                f"Microsoft.ApiManagement/service/{args.azure_apim}")
        else:
            apim_resource_id = args.azure_apim

        args.azure_api_management_source = {
            "msi_resource_id": args.msi_resource_id,
            "apim_resource_id": apim_resource_id
        }

        # Set api_source_type
        args.api_source_type = "AzureApiManagement"


@register_command(
    "apic integration create aws",
    is_preview=True,
)
class CreateAmazonApiGatewayIntegration(DefaultWorkspaceParameter, CreateIntegration):
    # pylint: disable=C0301
    """Add Amazon API Gateway as an API source

    :example: Add Amazon API Gateway as an API source
        az apic integration create aws -g contoso-resources -n contoso --integration-name sync-from-my-amazon-api-gateway --aws-access-key-reference https://mykey.vault.azure.net/secrets/AccessKey --aws-secret-access-key-reference https://mykey.vault.azure.net/secrets/SecretAccessKey --aws-region-name us-east-2
    """

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        # Remove the azure-api-management-source parameter
        args_schema.azure_api_management_source._registered = False
        # Remove the amazon-api-gateway-source parameter
        args_schema.amazon_api_gateway_source._registered = False
        # Remove the api_source_type parameter, will set it for users in pre_operations
        args_schema.api_source_type._registered = False

        # Create arg group for AmazonApiGatewaySource
        # Add separate parameters for access-key, secret-access-key, and region-name
        args_schema.access_key = AAZStrArg(
            options=["--aws-access-key-reference", "-a"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Access Key. Must be an Azure Key Vault secret reference.",
            required=True,
        )
        args_schema.secret_access_key = AAZStrArg(
            options=["--aws-secret-access-key-reference", "-s"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Secret Access Key. Must be an Azure Key Vault secret reference.",
            required=True,
        )
        args_schema.region_name = AAZStrArg(
            options=["--aws-region-name"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Region (ex. us-east-2).",
            required=True,
        )
        args_schema.msi_resource_id = AAZResourceIdArg(
            options=["--msi-resource-id"],
            arg_group="AmazonApiGatewaySource",
            help="The resource ID of the managed identity that has access to the Azure Key Vault.",
            required=False,
        )

        return args_schema

    def pre_operations(self):
        super().pre_operations()
        args = self.ctx.args
        args.api_source_type = "AmazonApiGateway"

        # Set the properties for Amazon API Gateway source
        args.amazon_api_gateway_source = {
            "access_key": args.access_key,
            "secret_access_key": args.secret_access_key,
            "region_name": args.region_name,
            "msi_resource_id": args.msi_resource_id
        }


# `az apic import` commands
@register_command(
    "apic import aws",
    is_preview=True,
)
class ImportAmazonApiGatewaySource(DefaultWorkspaceParameter, Import):
    # pylint: disable=C0301
    """Import an Amazon API Gateway API source

    :example: Import an Amazon API Gateway API source
        az apic import aws -g contoso-resources -n contoso --aws-access-key-reference https://mykey.vault.azure.net/secrets/AccessKey --aws-secret-access-key-reference https://mykey.vault.azure.net/secrets/SecretAccessKey --aws-region-name us-east-2
    """

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        # pylint: disable=protected-access
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        # Remove the azure-api-management-source parameter
        args_schema.azure_api_management_source._registered = False
        # Remove the amazon-api-gateway-source parameter
        args_schema.amazon_api_gateway_source._registered = False
        # Remove the api_source_type parameter, will set it for users in pre_operations
        args_schema.api_source_type._required = False
        args_schema.api_source_type._registered = False

        # Create arg group for AmazonApiGatewaySource
        # Add separate parameters for access-key, secret-access-key, and region-name
        args_schema.access_key = AAZStrArg(
            options=["--aws-access-key-reference", "-a"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Access Key. Must be an Azure Key Vault secret reference.",
            required=True,
        )
        args_schema.secret_access_key = AAZStrArg(
            options=["--aws-secret-access-key-reference", "-s"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Secret Access Key. Must be an Azure Key Vault secret reference.",
            required=True,
        )
        args_schema.region_name = AAZStrArg(
            options=["--aws-region-name"],
            arg_group="AmazonApiGatewaySource",
            help="Amazon API Gateway Region (ex. us-east-2).",
            required=True,
        )
        args_schema.msi_resource_id = AAZResourceIdArg(
            options=["--msi-resource-id"],
            arg_group="AmazonApiGatewaySource",
            help="The resource ID of the managed identity that has access to the Azure Key Vault.",
            required=False,
        )

        return args_schema

    def pre_operations(self):
        super().pre_operations()
        args = self.ctx.args
        args.api_source_type = "AmazonApiGateway"

        # Set the properties for Amazon API Gateway source
        args.amazon_api_gateway_source = {
            "access_key": args.access_key,
            "secret_access_key": args.secret_access_key,
            "region_name": args.region_name,
            "msi_resource_id": args.msi_resource_id
        }
