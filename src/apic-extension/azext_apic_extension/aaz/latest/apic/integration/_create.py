# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


class Create(AAZCommand):
    """Create new or updates existing API source.
    """

    _aaz_info = {
        "version": "2024-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.apicenter/services/{}/workspaces/{}/apisources/{}", "2024-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.integration_id = AAZStrArg(
            options=["--integration-id"],
            help="The name of the integration.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="Name of Azure API Center resource group. You can configure the default group using `az configure --defaults group=<name>`.",
            required=True,
        )
        _args_schema.service_name = AAZStrArg(
            options=["-n", "--service-name"],
            help="The name of Azure API Center service.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["--workspace-name"],
            help="The name of the workspace.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )

        # define Arg Group "AzureApiManagementSource"

        _args_schema = cls._args_schema
        _args_schema.msi_resource_id = AAZResourceIdArg(
            options=["--msi-resource-id"],
            arg_group="AzureApiManagementSource",
            help="The resource ID of the managed identity that has access to the API Management instance.",
        )
        _args_schema.apim_resource_id = AAZResourceIdArg(
            options=["--apim-resource-id"],
            arg_group="AzureApiManagementSource",
            help="API Management service resource ID.",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.import_specification = AAZStrArg(
            options=["--import-specification"],
            arg_group="Properties",
            help="Indicates if the specification should be imported along with metadata.",
            default="always",
            enum={"always": "always", "never": "never", "ondemand": "ondemand"},
        )
        _args_schema.target_environment_id = AAZResourceIdArg(
            options=["--target-environment-id"],
            arg_group="Properties",
            help="The target environment resource ID.",
        )
        _args_schema.target_lifecycle_stage = AAZStrArg(
            options=["--target-lifecycle-stage"],
            arg_group="Properties",
            help="The target lifecycle stage.",
            enum={"deprecated": "deprecated", "design": "design", "development": "development", "preview": "preview", "production": "production", "retired": "retired", "testing": "testing"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ApiSourcesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ApiSourcesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/apiSources/{apiSourceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "apiSourceName", self.ctx.args.integration_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serviceName", self.ctx.args.service_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("azureApiManagementSource", AAZObjectType)
                properties.set_prop("importSpecification", AAZStrType, ".import_specification")
                properties.set_prop("targetEnvironmentId", AAZStrType, ".target_environment_id")
                properties.set_prop("targetLifecycleStage", AAZStrType, ".target_lifecycle_stage")

            azure_api_management_source = _builder.get(".properties.azureApiManagementSource")
            if azure_api_management_source is not None:
                azure_api_management_source.set_prop("msiResourceId", AAZStrType, ".msi_resource_id")
                azure_api_management_source.set_prop("resourceId", AAZStrType, ".apim_resource_id", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.azure_api_management_source = AAZObjectType(
                serialized_name="azureApiManagementSource",
            )
            properties.import_specification = AAZStrType(
                serialized_name="importSpecification",
            )
            properties.link_state = AAZObjectType(
                serialized_name="linkState",
                flags={"read_only": True},
            )
            properties.target_environment_id = AAZStrType(
                serialized_name="targetEnvironmentId",
            )
            properties.target_lifecycle_stage = AAZStrType(
                serialized_name="targetLifecycleStage",
            )

            azure_api_management_source = cls._schema_on_200_201.properties.azure_api_management_source
            azure_api_management_source.msi_resource_id = AAZStrType(
                serialized_name="msiResourceId",
            )
            azure_api_management_source.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )

            link_state = cls._schema_on_200_201.properties.link_state
            link_state.last_updated_on = AAZStrType(
                serialized_name="lastUpdatedOn",
                flags={"required": True},
            )
            link_state.message = AAZStrType()
            link_state.state = AAZStrType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
