# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "apic api-analysis create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create new or updates existing API analyzer configuration.

    :example: Create an API Analysis rule config
        az apic api-analysis create -g contoso-resources -n contoso -c spectral-openapi
    """

    _aaz_info = {
        "version": "2024-06-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.apicenter/services/{}/workspaces/{}/analyzerconfigs/{}", "2024-06-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.analyzer_config_name = AAZStrArg(
            options=["-c", "--config-name", "--analyzer-config-name"],
            help="The name of the configuration.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.service_name = AAZStrArg(
            options=["-n", "--service-name"],
            help="The name of Azure API Center service.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )
        _args_schema.workspace_name = AAZStrArg(
            options=["--workspace-name"],
            help="The name of the workspace.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,90}$",
                max_length=90,
                min_length=1,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.analyzer_type = AAZStrArg(
            options=["--analyzer-type"],
            arg_group="Properties",
            help="The type of API analyzer.",
            default="spectral",
            enum={"spectral": "spectral"},
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="The description of the analyzer configuration.",
        )
        _args_schema.filter = AAZObjectArg(
            options=["--filter"],
            arg_group="Properties",
            help="The API analyzer filter.",
        )
        _args_schema.title = AAZStrArg(
            options=["--title"],
            arg_group="Properties",
            help="The title of the analyzer configuration, e.g. \"Spectral (OpenAPI)\".",
        )

        filter = cls._args_schema.filter
        filter.api_definitions = AAZListArg(
            options=["api-definitions"],
            help="Api definition filter conditions.",
            required=True,
        )
        filter.api_versions = AAZListArg(
            options=["api-versions"],
            help="APi version filter conditions.",
            required=True,
        )
        filter.apis = AAZListArg(
            options=["apis"],
            help="API filter conditions.",
            required=True,
        )

        api_definitions = cls._args_schema.filter.api_definitions
        api_definitions.Element = AAZFreeFormDictArg()
        cls._build_args_analyzer_filter_condition_create(api_definitions.Element)

        api_versions = cls._args_schema.filter.api_versions
        api_versions.Element = AAZFreeFormDictArg()
        cls._build_args_analyzer_filter_condition_create(api_versions.Element)

        apis = cls._args_schema.filter.apis
        apis.Element = AAZFreeFormDictArg()
        cls._build_args_analyzer_filter_condition_create(apis.Element)
        return cls._args_schema

    _args_analyzer_filter_condition_create = None

    @classmethod
    def _build_args_analyzer_filter_condition_create(cls, _schema):
        if cls._args_analyzer_filter_condition_create is not None:
            return

        cls._args_analyzer_filter_condition_create = AAZFreeFormDictArg()


    def _execute_operations(self):
        self.pre_operations()
        self.AnalyzerConfigsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AnalyzerConfigsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiCenter/services/{serviceName}/workspaces/{workspaceName}/analyzerConfigs/{analyzerConfigName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "analyzerConfigName", self.ctx.args.analyzer_config_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "serviceName", self.ctx.args.service_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
                **self.serialize_url_param(
                    "workspaceName", self.ctx.args.workspace_name,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-06-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("analyzerType", AAZStrType, ".analyzer_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("filter", AAZObjectType, ".filter")
                properties.set_prop("title", AAZStrType, ".title", typ_kwargs={"flags": {"required": True}})

            filter = _builder.get(".properties.filter")
            if filter is not None:
                filter.set_prop("apiDefinitions", AAZListType, ".api_definitions", typ_kwargs={"flags": {"required": True}})
                filter.set_prop("apiVersions", AAZListType, ".api_versions", typ_kwargs={"flags": {"required": True}})
                filter.set_prop("apis", AAZListType, ".apis", typ_kwargs={"flags": {"required": True}})

            api_definitions = _builder.get(".properties.filter.apiDefinitions")
            if api_definitions is not None:
                _CreateHelper._build_schema_analyzer_filter_condition_create(api_definitions.set_elements(AAZFreeFormDictType, "."))

            api_versions = _builder.get(".properties.filter.apiVersions")
            if api_versions is not None:
                _CreateHelper._build_schema_analyzer_filter_condition_create(api_versions.set_elements(AAZFreeFormDictType, "."))

            apis = _builder.get(".properties.filter.apis")
            if apis is not None:
                _CreateHelper._build_schema_analyzer_filter_condition_create(apis.set_elements(AAZFreeFormDictType, "."))

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.analyzer_type = AAZStrType(
                serialized_name="analyzerType",
                flags={"required": True},
            )
            properties.description = AAZStrType()
            properties.filter = AAZObjectType()
            properties.state = AAZStrType(
                flags={"read_only": True},
            )
            properties.title = AAZStrType(
                flags={"required": True},
            )

            filter = cls._schema_on_200_201.properties.filter
            filter.api_definitions = AAZListType(
                serialized_name="apiDefinitions",
                flags={"required": True},
            )
            filter.api_versions = AAZListType(
                serialized_name="apiVersions",
                flags={"required": True},
            )
            filter.apis = AAZListType(
                flags={"required": True},
            )

            api_definitions = cls._schema_on_200_201.properties.filter.api_definitions
            api_definitions.Element = AAZFreeFormDictType()
            _CreateHelper._build_schema_analyzer_filter_condition_read(api_definitions.Element)

            api_versions = cls._schema_on_200_201.properties.filter.api_versions
            api_versions.Element = AAZFreeFormDictType()
            _CreateHelper._build_schema_analyzer_filter_condition_read(api_versions.Element)

            apis = cls._schema_on_200_201.properties.filter.apis
            apis.Element = AAZFreeFormDictType()
            _CreateHelper._build_schema_analyzer_filter_condition_read(apis.Element)

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_analyzer_filter_condition_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_anytype_elements(".")

    _schema_analyzer_filter_condition_read = None

    @classmethod
    def _build_schema_analyzer_filter_condition_read(cls, _schema):
        if cls._schema_analyzer_filter_condition_read is not None:
            return

        cls._schema_analyzer_filter_condition_read = _schema_analyzer_filter_condition_read = AAZFreeFormDictType()



__all__ = ["Create"]
