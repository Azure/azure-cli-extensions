# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
from azure.cli.testsdk import *
import json

@live_only()
class TrustedsigningScenario(ScenarioTest):
    
    @ResourceGroupPreparer(name_prefix= 'cli_test_acs_', location='centraluseuap')
    def test_trustedsigning_account(self, resource_group):
        subscription_id = self.get_subscription_id()
        self.kwargs.update({
            'rg': resource_group, 
            'name': self.create_random_name('account-', 15),
            'sku': 'Premium',
            'location': 'centraluseuap',
            'tags': 'type=cli op=create',
            'check_name_type': 'Microsoft.CodeSigning/codeSigningAccounts',
            'public_profile_name': self.create_random_name('profile-', 15),
            'publictrust_profile_type': 'PublicTrust',
            'public_identity_validation_id': '4931b0b1-c1d4-43a5-800e-259f7937220b',
            'private_profile_name': self.create_random_name('profile-', 15),
            'privatetrust_profile_type': 'PrivateTrust',
            'private_identity_validation_id': '36ea222a-4d89-4dbd-b814-404e687e1f81'
        })
        
        self.cmd('trustedsigning create '
                 '-g {rg} '
                 '-n {name} ' 
                 '-l {location} '
                 '--sku {sku} '
                 '--tags {tags}', 
                 checks=[
                        self.check('name', '{name}'),
                        self.check('resourceGroup', '{rg}'),
                        self.check('location', '{location}'),
                        self.check('sku.name', 'Premium'),
                        self.check('tags.type', 'cli'),
                        self.check('tags.op', 'create'),
                        self.check('provisioningState', 'Succeeded')
        ])
        
        self.cmd('trustedsigning check-name-availability '
                 '--name {name} '
                 '--type {check_name_type}', 
                 checks=[
                        self.check('nameAvailable', False)
        ])
        
        self.cmd('trustedsigning update '
                 '-g {rg} '
                 '-n {name} ' 
                 '--sku Basic '
                 '--tags type=cli op=update', 
                 checks=[
                        self.check('name', '{name}'),
                        self.check('resourceGroup', '{rg}'),
                        self.check('location', '{location}'),
                        self.check('sku.name', 'Basic'),
                        self.check('tags.type', 'cli'),
                        self.check('tags.op', 'update'),
                        self.check('provisioningState', 'Succeeded')
        ])

        self.cmd('trustedsigning show '
                 '-g {rg} '
                 '-n {name}', 
                 checks=[
                        self.check('name', '{name}'),
                        self.check('resourceGroup', '{rg}'),
                        self.check('location', '{location}'),
                        self.check('sku.name', 'Basic'),
                         self.check('tags.type', 'cli'),
                        self.check('tags.op', 'update'),
                        self.check('provisioningState', 'Succeeded')
        ])
        
        self.cmd('trustedsigning certificate-profile create ' 
                 '-g {rg} ' 
                 '--account-name {name} '
                 '-n {public_profile_name} '
                 '--profile-type {publictrust_profile_type} '
                 '--id {public_identity_validation_id} '
                 '--include-street true '
                 '--include-postal-code true',
                 checks=[
                        self.check('name', '{public_profile_name}'),
                        self.check('resourceGroup', '{rg}'),
                        self.check('profileType', '{publictrust_profile_type}'),
                        self.check('identityValidationId', '{public_identity_validation_id}'),
                        self.check('provisioningState', 'Succeeded')
        ])

        self.cmd('trustedsigning certificate-profile create ' 
                 '-g {rg} ' 
                 '--account-name {name} '
                 '-n {private_profile_name} '
                 '--profile-type {privatetrust_profile_type} '
                 '--id {private_identity_validation_id} '
                 '--include-street true '
                 '--include-postal-code true',
                 checks=[
                        self.check('name', '{private_profile_name}'),
                        self.check('resourceGroup', '{rg}'),
                        self.check('profileType', '{privatetrust_profile_type}'),
                        self.check('identityValidationId', '{private_identity_validation_id}'),
                        self.check('provisioningState', 'Succeeded')
        ])
        
        self.cmd('trustedsigning certificate-profile delete ' 
                 '-g {rg} ' 
                 '--account-name {name} '
                 '-n {private_profile_name} -y')
        
        profilesList = self.cmd('trustedsigning certificate-profile list '
                                '-g {rg} '
                                '--account-name {name}').get_output_in_json()
        
        assert len(profilesList) == 1 

        self.cmd('trustedsigning delete -g {rg} -n {name} -y')
