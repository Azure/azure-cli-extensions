# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if, calc_coverage
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg):
    pass


# EXAMPLE: /VirtualMachines/put/Create a virtual machine with password authentication.
@try_manual
def step__virtualmachines_put_create_a_virtual_machine_with_password_authentication_(test, rg):
    test.cmd('az swiftlet vm create '
             '--location "centraluseuap" '
             '--password "testPassword0" '
             '--ports port-range="3389" protocol="*" '
             # '--startup-script "{inline startup script}" '
             '--swiftlet-bundle-sku "Windows_1" '
             '--swiftlet-image-id "windows-2019-datacenter" '
             '--username "SwiftletUser" '
             '--tags key1="value1" key2="value2" '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/put/Create a virtual machine with ssh authentication.
@try_manual
def step__virtualmachines_put_create_a_virtual_machine_with_ssh_authentication_(test, rg):
    test.cmd('az swiftlet vm create ' 
             '--location "westus" '
             '--ports port-range="22" protocol="*" '
             '--ssh-public-key "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+'
             '4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+'
             '8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYN'
             'x7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1" '
             # '--startup-script "{inline startup script}" '
             '--swiftlet-bundle-sku "Linux_1" '
             '--swiftlet-image-id "ubuntu-18.04-lts" '
             '--username "SwiftletUser" '
             '--tags key1="value1" key2="value2" '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/get/Get a virtual machine.
@try_manual
def step__virtualmachines_get_get_a_virtual_machine_(test, rg):
    test.cmd('az swiftlet vm show '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/get/List all virtual machines in a resource group.
@try_manual
def step__virtualmachines_get_list_all_virtual_machines_in_a_resource_group_(test, rg):
    test.cmd('az swiftlet vm list '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /VirtualMachines/get/List all virtual machines in a subscription.
@try_manual
def step__virtualmachines_get_list_all_virtual_machines_in_a_subscription_(test, rg):
    test.cmd('az swiftlet vm list '
             '-g ""',
             checks=[])


# EXAMPLE: /VirtualMachines/get/List available Swiftlet bundles
@try_manual
def step__virtualmachines_get_list_available_swiftlet_bundles(test, rg):
    test.cmd('az swiftlet vm list-bundle '
             '--location "westus"',
             checks=[])


# EXAMPLE: /VirtualMachines/get/List available Swiftlet images
@try_manual
def step__virtualmachines_get_list_available_swiftlet_images(test, rg):
    test.cmd('az swiftlet vm list-image '
             '--location "westus"',
             checks=[])


# EXAMPLE: /VirtualMachines/post/Start a virtual machine.
@try_manual
def step__virtualmachines_post_start_a_virtual_machine_(test, rg):
    test.cmd('az swiftlet vm start '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/post/Stop a virtual machine.
@try_manual
def step__virtualmachines_post_stop_a_virtual_machine_(test, rg):
    test.cmd('az swiftlet vm stop '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/patch/Update tags of a virtual machine.
@try_manual
def step__virtualmachines_patch_update_tags_of_a_virtual_machine_(test, rg):
    test.cmd('az swiftlet vm update '
             '--ports port-range="80" protocol="TCP" '
             '--ports port-range="50-60" protocol="UDP" '
             '--tags key3="value3" '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


# EXAMPLE: /VirtualMachines/delete/Delete a virtual machine.
@try_manual
def step__virtualmachines_delete_delete_a_virtual_machine_(test, rg):
    test.cmd('az swiftlet vm delete -y '
             '--resource-group "{rg}" '
             '--vm-name "myVirtualMachine"',
             checks=[])


@try_manual
def cleanup(test, rg):
    pass


@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step__virtualmachines_put_create_a_virtual_machine_with_password_authentication_(test, rg)
    step__virtualmachines_put_create_a_virtual_machine_with_ssh_authentication_(test, rg)
    step__virtualmachines_get_get_a_virtual_machine_(test, rg)
    step__virtualmachines_get_list_all_virtual_machines_in_a_resource_group_(test, rg)
    step__virtualmachines_get_list_all_virtual_machines_in_a_subscription_(test, rg)
    step__virtualmachines_get_list_available_swiftlet_bundles(test, rg)
    step__virtualmachines_get_list_available_swiftlet_images(test, rg)
    step__virtualmachines_post_start_a_virtual_machine_(test, rg)
    step__virtualmachines_post_stop_a_virtual_machine_(test, rg)
    step__virtualmachines_patch_update_tags_of_a_virtual_machine_(test, rg)
    step__virtualmachines_delete_delete_a_virtual_machine_(test, rg)
    cleanup(test, rg)


@try_manual
class SwiftletManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestswiftlet_myResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_swiftlet(self, rg):

        call_scenario(self, rg)
        calc_coverage(__file__)
        raise_if()


class SwiftletScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitest_swiftlet', random_name_length=25)
    def test_swiftlet_create(self, resource_group):
        self.kwargs.update({
            'vm': 'vm'
        })
        self.cmd('swiftlet vm create '
                 '--location "centraluseuap" '
                 '--password "testPassword0" '
                 '--ports port-range="3389" protocol="*" '
                 '--swiftlet-bundle-sku "Windows_1" '
                 '--swiftlet-image-id "windows-2019-datacenter" '
                 '--username "SwiftletUser" '
                 '--tags key1="value1" key2="value2" '
                 '--resource-group {rg} '
                 '--name {vm}',
                 checks=[])
        self.cmd('swiftlet vm list -g {rg}', checks=[
            self.check('length(@)', 1),
        ])
        self.cmd('swiftlet vm show -g {rg} -n {vm}', checks=[
            self.check('name', '{vm}'),
            self.check('tags.key1', 'value1'),
            self.check('tags.key2', 'value2')
        ])
        self.cmd('swiftlet vm update -g {rg} -n {vm} --ports port-range=80 protocol=TCP --tags key3=value3', checks=[
            self.check('ports[0].portRange', '80'),
            self.check('ports[0].protocol', 'TCP', False),
            self.check('tags.key3', 'value3')
        ])
        self.cmd('swiftlet vm stop -g {rg} -n {vm}')
        self.cmd('swiftlet vm start -g {rg} -n {vm}')
        self.cmd('swiftlet vm delete -g {rg} -n {vm} --yes')

    @ResourceGroupPreparer(name_prefix='clitest_swiftlet', random_name_length=25)
    def test_swiftlet_list(self, resource_group):
        self.cmd('swiftlet vm list-bundle -l centraluseuap', checks=[
            self.greater_than('length(@)', 0)
        ])
        self.cmd('swiftlet vm list-image -l centraluseuap', checks=[
            self.greater_than('length(@)', 0)
        ])
