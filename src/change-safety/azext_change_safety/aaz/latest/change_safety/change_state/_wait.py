# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "change-safety change-state wait",
)
class Wait(AAZWaitCommand):
    """Place the CLI in a waiting state until a condition is met.
    """

    _aaz_info = {
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.changesafety/changestates/{}", "2025-03-01-preview"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.change_state_name = AAZStrArg(
            options=["-n", "--name", "--change-state-name"],
            help="The name of the ChangeState resource.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,100}$",
                max_length=100,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ChangeStatesGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=False)
        return result

    class ChangeStatesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.change_artifact = AAZObjectType(
                serialized_name="changeArtifact",
                flags={"required": True},
            )
            properties.change_type = AAZStrType(
                serialized_name="changeType",
                flags={"required": True},
            )
            properties.comments = AAZStrType()
            properties.description = AAZStrType()
            properties.expiration_date = AAZStrType(
                serialized_name="expirationDate",
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.service_catalog_reference = AAZStrType(
                serialized_name="serviceCatalogReference",
            )
            properties.stage_map_resource_id = AAZStrType(
                serialized_name="stageMapResourceId",
                flags={"required": True},
            )
            properties.stage_map_snapshot = AAZListType(
                serialized_name="stageMapSnapshot",
                flags={"read_only": True},
            )
            properties.stage_parameters = AAZDictType(
                serialized_name="stageParameters",
                flags={"required": True},
            )
            properties.state = AAZStrType(
                flags={"required": True},
            )
            properties.work_item_reference = AAZStrType(
                serialized_name="workItemReference",
            )

            change_artifact = cls._schema_on_200.properties.change_artifact
            change_artifact.artifact_type = AAZStrType(
                serialized_name="artifactType",
                flags={"required": True},
            )
            change_artifact.name = AAZStrType(
                flags={"required": True},
            )

            disc_arm_operation = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation")
            disc_arm_operation.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload
            artifact_payload.operations = AAZListType(
                flags={"required": True},
            )

            operations = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations
            operations.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations.Element
            _element.content = AAZObjectType()
            _element.http_method = AAZStrType(
                serialized_name="httpMethod",
                flags={"required": True},
            )
            _element.uri = AAZStrType(
                flags={"required": True},
            )

            content = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations.Element.content
            content.location = AAZStrType()
            content.name = AAZStrType()
            content.properties = AAZObjectType(
                flags={"required": True},
            )

            disc_external_arm_template = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ExternalArmTemplate")
            disc_external_arm_template.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ExternalArmTemplate").artifact_payload
            artifact_payload.external_artifact_uri = AAZStrType(
                serialized_name="externalArtifactUri",
                flags={"required": True},
            )

            disc_external_bicep = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ExternalBicep")
            disc_external_bicep.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "ExternalBicep").artifact_payload
            artifact_payload.external_artifact_uri = AAZStrType(
                serialized_name="externalArtifactUri",
                flags={"required": True},
            )

            disc_inline_arm_template = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "InlineArmTemplate")
            disc_inline_arm_template.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "InlineArmTemplate").artifact_payload
            artifact_payload.inline_script = AAZStrType(
                serialized_name="inlineScript",
                flags={"required": True},
            )

            disc_inline_bicep = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "InlineBicep")
            disc_inline_bicep.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "InlineBicep").artifact_payload
            artifact_payload.inline_script = AAZStrType(
                serialized_name="inlineScript",
                flags={"required": True},
            )

            disc_template_spec = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "TemplateSpec")
            disc_template_spec.artifact_payload = AAZObjectType(
                serialized_name="artifactPayload",
                flags={"required": True},
            )

            artifact_payload = cls._schema_on_200.properties.change_artifact.discriminate_by("artifact_type", "TemplateSpec").artifact_payload
            artifact_payload.artifact_resource_id = AAZStrType(
                serialized_name="artifactResourceId",
                flags={"required": True},
            )

            stage_map_snapshot = cls._schema_on_200.properties.stage_map_snapshot
            stage_map_snapshot.Element = AAZAnyType()

            stage_parameters = cls._schema_on_200.properties.stage_parameters
            stage_parameters.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.stage_parameters.Element
            _element.metadata = AAZDictType()
            _element.type = AAZStrType(
                flags={"required": True},
            )

            metadata = cls._schema_on_200.properties.stage_parameters.Element.metadata
            metadata.Element = AAZStrType()

            disc_number = cls._schema_on_200.properties.stage_parameters.Element.discriminate_by("type", "number")
            disc_number.allowed_values = AAZListType(
                serialized_name="allowedValues",
                flags={"required": True},
            )
            disc_number.default_value = AAZIntType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.stage_parameters.Element.discriminate_by("type", "number").allowed_values
            allowed_values.Element = AAZIntType()

            disc_string = cls._schema_on_200.properties.stage_parameters.Element.discriminate_by("type", "string")
            disc_string.allowed_values = AAZListType(
                serialized_name="allowedValues",
                flags={"required": True},
            )
            disc_string.default_value = AAZStrType(
                serialized_name="defaultValue",
            )

            allowed_values = cls._schema_on_200.properties.stage_parameters.Element.discriminate_by("type", "string").allowed_values
            allowed_values.Element = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _WaitHelper:
    """Helper class for Wait"""


__all__ = ["Wait"]
