# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "change-safety change-state update",
)
class Update(AAZCommand):
    """Update a ChangeState
    """

    _aaz_info = {
        "version": "2025-03-01-preview",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.changesafety/changestates/{}", "2025-03-01-preview"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.change_state_name = AAZStrArg(
            options=["-n", "--name", "--change-state-name"],
            help="The name of the ChangeState resource.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-zA-Z0-9-]{3,100}$",
                max_length=100,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.comments = AAZStrArg(
            options=["--comments"],
            arg_group="Properties",
            help="Comments about the last update to the changeState resource.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Brief description about the change.",
            nullable=True,
            fmt=AAZStrArgFormat(
                max_length=2000,
            ),
        )
        _args_schema.service_catalog_reference = AAZStrArg(
            options=["--service-catalog-reference"],
            arg_group="Properties",
            help="URI to the external service catalog reference.",
            nullable=True,
        )
        _args_schema.state = AAZStrArg(
            options=["--state"],
            arg_group="Properties",
            help="Internal status of the changestate resource.",
            enum={"Abandoned": "Abandoned", "Completed": "Completed", "Failed": "Failed", "InProgress": "InProgress", "Initialized": "Initialized", "Paused": "Paused"},
        )
        _args_schema.work_item_reference = AAZStrArg(
            options=["--work-item-reference"],
            arg_group="Properties",
            help="URI to the work item related to this change.",
            nullable=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ChangeStatesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.ChangeStatesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ChangeStatesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_change_state_read(cls._schema_on_200)

            return cls._schema_on_200

    class ChangeStatesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ChangeSafety/changeStates/{changeStateName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "changeStateName", self.ctx.args.change_state_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-03-01-preview",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_change_state_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("comments", AAZStrType, ".comments")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("serviceCatalogReference", AAZStrType, ".service_catalog_reference")
                properties.set_prop("state", AAZStrType, ".state", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("workItemReference", AAZStrType, ".work_item_reference")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_change_state_read = None

    @classmethod
    def _build_schema_change_state_read(cls, _schema):
        if cls._schema_change_state_read is not None:
            _schema.id = cls._schema_change_state_read.id
            _schema.name = cls._schema_change_state_read.name
            _schema.properties = cls._schema_change_state_read.properties
            _schema.system_data = cls._schema_change_state_read.system_data
            _schema.type = cls._schema_change_state_read.type
            return

        cls._schema_change_state_read = _schema_change_state_read = AAZObjectType()

        change_state_read = _schema_change_state_read
        change_state_read.id = AAZStrType(
            flags={"read_only": True},
        )
        change_state_read.name = AAZStrType(
            flags={"read_only": True},
        )
        change_state_read.properties = AAZObjectType()
        change_state_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        change_state_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_change_state_read.properties
        properties.change_artifact = AAZObjectType(
            serialized_name="changeArtifact",
            flags={"required": True},
        )
        properties.change_type = AAZStrType(
            serialized_name="changeType",
            flags={"required": True},
        )
        properties.comments = AAZStrType()
        properties.description = AAZStrType()
        properties.expiration_date = AAZStrType(
            serialized_name="expirationDate",
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.service_catalog_reference = AAZStrType(
            serialized_name="serviceCatalogReference",
        )
        properties.stage_map_resource_id = AAZStrType(
            serialized_name="stageMapResourceId",
            flags={"required": True},
        )
        properties.stage_map_snapshot = AAZListType(
            serialized_name="stageMapSnapshot",
            flags={"read_only": True},
        )
        properties.stage_parameters = AAZDictType(
            serialized_name="stageParameters",
            flags={"required": True},
        )
        properties.state = AAZStrType(
            flags={"required": True},
        )
        properties.work_item_reference = AAZStrType(
            serialized_name="workItemReference",
        )

        change_artifact = _schema_change_state_read.properties.change_artifact
        change_artifact.artifact_type = AAZStrType(
            serialized_name="artifactType",
            flags={"required": True},
        )
        change_artifact.name = AAZStrType(
            flags={"required": True},
        )

        disc_arm_operation = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation")
        disc_arm_operation.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload
        artifact_payload.operations = AAZListType(
            flags={"required": True},
        )

        operations = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations
        operations.Element = AAZObjectType()

        _element = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations.Element
        _element.content = AAZObjectType()
        _element.http_method = AAZStrType(
            serialized_name="httpMethod",
            flags={"required": True},
        )
        _element.uri = AAZStrType(
            flags={"required": True},
        )

        content = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ArmOperation").artifact_payload.operations.Element.content
        content.location = AAZStrType()
        content.name = AAZStrType()
        content.properties = AAZObjectType(
            flags={"required": True},
        )

        disc_external_arm_template = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ExternalArmTemplate")
        disc_external_arm_template.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ExternalArmTemplate").artifact_payload
        artifact_payload.external_artifact_uri = AAZStrType(
            serialized_name="externalArtifactUri",
            flags={"required": True},
        )

        disc_external_bicep = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ExternalBicep")
        disc_external_bicep.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "ExternalBicep").artifact_payload
        artifact_payload.external_artifact_uri = AAZStrType(
            serialized_name="externalArtifactUri",
            flags={"required": True},
        )

        disc_inline_arm_template = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "InlineArmTemplate")
        disc_inline_arm_template.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "InlineArmTemplate").artifact_payload
        artifact_payload.inline_script = AAZStrType(
            serialized_name="inlineScript",
            flags={"required": True},
        )

        disc_inline_bicep = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "InlineBicep")
        disc_inline_bicep.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "InlineBicep").artifact_payload
        artifact_payload.inline_script = AAZStrType(
            serialized_name="inlineScript",
            flags={"required": True},
        )

        disc_template_spec = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "TemplateSpec")
        disc_template_spec.artifact_payload = AAZObjectType(
            serialized_name="artifactPayload",
            flags={"required": True},
        )

        artifact_payload = _schema_change_state_read.properties.change_artifact.discriminate_by("artifact_type", "TemplateSpec").artifact_payload
        artifact_payload.artifact_resource_id = AAZStrType(
            serialized_name="artifactResourceId",
            flags={"required": True},
        )

        stage_map_snapshot = _schema_change_state_read.properties.stage_map_snapshot
        stage_map_snapshot.Element = AAZAnyType()

        stage_parameters = _schema_change_state_read.properties.stage_parameters
        stage_parameters.Element = AAZObjectType()

        _element = _schema_change_state_read.properties.stage_parameters.Element
        _element.metadata = AAZDictType()
        _element.type = AAZStrType(
            flags={"required": True},
        )

        metadata = _schema_change_state_read.properties.stage_parameters.Element.metadata
        metadata.Element = AAZStrType()

        disc_number = _schema_change_state_read.properties.stage_parameters.Element.discriminate_by("type", "number")
        disc_number.allowed_values = AAZListType(
            serialized_name="allowedValues",
            flags={"required": True},
        )
        disc_number.default_value = AAZIntType(
            serialized_name="defaultValue",
        )

        allowed_values = _schema_change_state_read.properties.stage_parameters.Element.discriminate_by("type", "number").allowed_values
        allowed_values.Element = AAZIntType()

        disc_string = _schema_change_state_read.properties.stage_parameters.Element.discriminate_by("type", "string")
        disc_string.allowed_values = AAZListType(
            serialized_name="allowedValues",
            flags={"required": True},
        )
        disc_string.default_value = AAZStrType(
            serialized_name="defaultValue",
        )

        allowed_values = _schema_change_state_read.properties.stage_parameters.Element.discriminate_by("type", "string").allowed_values
        allowed_values.Element = AAZStrType()

        system_data = _schema_change_state_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        _schema.id = cls._schema_change_state_read.id
        _schema.name = cls._schema_change_state_read.name
        _schema.properties = cls._schema_change_state_read.properties
        _schema.system_data = cls._schema_change_state_read.system_data
        _schema.type = cls._schema_change_state_read.type


__all__ = ["Update"]
