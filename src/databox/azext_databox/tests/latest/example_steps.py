# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------


from .. import try_manual


# EXAMPLE: /Jobs/put/JobsCreate
@try_manual
def step_job_create(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job create '
             '--name "{myJob}" '
             '--location "westus" '
             '--transfer-type "ImportToAzure" '
             '--details "{{\\"contactDetails\\":{{\\"contactName\\":\\"Public SDK Test\\",\\"emailList\\":[\\"testing@m'
             'icrosoft.com\\"],\\"phone\\":\\"1234567890\\",\\"phoneExtension\\":\\"1234\\"}},\\"dataImportDetails\\":['
             '{{\\"accountDetails\\":{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscripti'
             'ons/{subscription_id}/resourcegroups/{rg_5}/providers/Microsoft.Storage/storageAccounts/{sa}\\"}}}}],\\"j'
             'obDetailsType\\":\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\"S'
             'an Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",\\"'
             'stateOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}}}}" '
             '--sku name="DataBox" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Jobs/put/JobsCreateDevicePassword
@try_manual
def step_job_create2(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job create '
             '--name "{myJob5}" '
             '--location "westus" '
             '--transfer-type "ImportToAzure" '
             '--details "{{\\"contactDetails\\":{{\\"contactName\\":\\"Public SDK Test\\",\\"emailList\\":[\\"testing@m'
             'icrosoft.com\\"],\\"phone\\":\\"1234567890\\",\\"phoneExtension\\":\\"1234\\"}},\\"dataImportDetails\\":['
             '{{\\"accountDetails\\":{{\\"dataAccountType\\":\\"StorageAccount\\",\\"sharePassword\\":\\"<sharePassword'
             '>\\",\\"storageAccountId\\":\\"/subscriptions/{subscription_id}/resourceGroups/{rg_6}/providers/Microsoft'
             '.Storage/storageAccounts/{sa_2}\\"}}}}],\\"devicePassword\\":\\"<devicePassword>\\",\\"jobDetailsType\\":'
             '\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\"San '
             'Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",\\"sta'
             'teOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}}}}" '
             '--sku name="DataBox" '
             '--resource-group "{rg_7}"',
             checks=checks)


# EXAMPLE: /Jobs/put/JobsCreateDoubleEncryption
@try_manual
def step_job_create3(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job create '
             '--name "{myJob6}" '
             '--location "westus" '
             '--transfer-type "ImportToAzure" '
             '--details "{{\\"contactDetails\\":{{\\"contactName\\":\\"Public SDK Test\\",\\"emailList\\":[\\"testing@m'
             'icrosoft.com\\"],\\"phone\\":\\"1234567890\\",\\"phoneExtension\\":\\"1234\\"}},\\"dataImportDetails\\":['
             '{{\\"accountDetails\\":{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscripti'
             'ons/{subscription_id}/resourcegroups/{rg_5}/providers/Microsoft.Storage/storageAccounts/{sa}\\"}}}}],\\"j'
             'obDetailsType\\":\\"DataBox\\",\\"preferences\\":{{\\"encryptionPreferences\\":{{\\"doubleEncryption\\":'
             '\\"Enabled\\"}}}},\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\"San '
             'Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",\\"sta'
             'teOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}}}}" '
             '--sku name="DataBox" '
             '--resource-group "{rg_8}"',
             checks=checks)


# EXAMPLE: /Jobs/put/JobsCreateExport
@try_manual
def step_job_create4(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job create '
             '--name "{myJob4}" '
             '--location "westus" '
             '--transfer-type "ExportFromAzure" '
             '--details "{{\\"contactDetails\\":{{\\"contactName\\":\\"Public SDK Test\\",\\"emailList\\":[\\"testing@m'
             'icrosoft.com\\"],\\"phone\\":\\"1234567890\\",\\"phoneExtension\\":\\"1234\\"}},\\"dataExportDetails\\":['
             '{{\\"accountDetails\\":{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscripti'
             'ons/{subscription_id}/resourceGroups/{rg_9}/providers/Microsoft.Storage/storageAccounts/{sa_3}\\"}},\\"tr'
             'ansferConfiguration\\":{{\\"transferAllDetails\\":{{\\"include\\":{{\\"dataAccountType\\":\\"StorageAccou'
             'nt\\",\\"transferAllBlobs\\":true,\\"transferAllFiles\\":true}}}},\\"transferConfigurationType\\":\\"Tran'
             'sferAll\\"}}}}],\\"jobDetailsType\\":\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercia'
             'l\\",\\"city\\":\\"San Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCod'
             'e\\":\\"94107\\",\\"stateOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND '
             'ST\\",\\"streetAddress2\\":\\"Unit 1\\"}}}}" '
             '--sku name="DataBox" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /Jobs/put/JobsCreateWithUserAssignedIdentity
@try_manual
def step_job_create5(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job create '
             '--name "{myJob7}" '
             '--type "UserAssigned" '
             '--user-assigned-identities "{{\\"/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akven'
             'kat/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sdkIdentity\\":{{}}}}" '
             '--location "westus" '
             '--transfer-type "ImportToAzure" '
             '--details "{{\\"contactDetails\\":{{\\"contactName\\":\\"Public SDK Test\\",\\"emailList\\":[\\"testing@m'
             'icrosoft.com\\"],\\"phone\\":\\"1234567890\\",\\"phoneExtension\\":\\"1234\\"}},\\"dataImportDetails\\":['
             '{{\\"accountDetails\\":{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscripti'
             'ons/{subscription_id}/resourceGroups/{rg_6}/providers/Microsoft.Storage/storageAccounts/{sa_2}\\"}}}}],\\'
             '"jobDetailsType\\":\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\'
             '"San Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",'
             '\\"stateOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}}}}" '
             '--sku name="DataBox" '
             '--resource-group "{rg_10}"',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsGet
@try_manual
def step_job_show(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                  checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job show '
             '--expand "details" '
             '--name "{myJob}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsGetCmk
@try_manual
def step_job_show2(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job show '
             '--expand "details" '
             '--name "{myJob2}" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsGetCopyStuck
@try_manual
def step_job_show3(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job show '
             '--expand "details" '
             '--name "{myJob3}" '
             '--resource-group "{rg_3}"',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsGetExport
@try_manual
def step_job_show4(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job show '
             '--expand "details" '
             '--name "{myJob4}" '
             '--resource-group "{rg_4}"',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsList
@try_manual
def step_job_list(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                  checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job list '
             '-g ""',
             checks=checks)


# EXAMPLE: /Jobs/get/JobsListByResourceGroup
@try_manual
def step_job_list2(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                   checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job list '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Jobs/patch/JobsPatch
@try_manual
def step_job_update(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job update '
             '--name "{myJob}" '
             '--contact-name "Update Job" '
             '--email-list "testing@microsoft.com" '
             '--phone "1234567890" '
             '--phone-extension "1234" '
             '--shipping-address address-type="Commercial" city="San Francisco" company-name="Microsoft" country="US" '
             'postal-code="94107" state-or-province="CA" street-address1="16 TOWNSEND ST" street-address2="Unit 1" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Jobs/patch/JobsPatchCmk
@try_manual
def step_job_update2(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job update '
             '--name "{myJob2}" '
             '--kek-type "CustomerManaged" '
             '--kek-url "https://sdkkeyvault.vault.azure.net/keys/SSDKEY/" '
             '--kek-vault-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg_9}/providers/Microsoft.KeyVa'
             'ult/vaults/SDKKeyVault" '
             '--resource-group "{rg_2}"',
             checks=checks)


# EXAMPLE: /Jobs/patch/JobsPatchSystemAssignedToUserAssigned
@try_manual
def step_job_update3(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14,
                     rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job update '
             '--name "{myJob8}" '
             '--resource-identity-type "SystemAssigned,UserAssigned" '
             '--user-assigned-identities "{{\\"/subscriptions/fa68082f-8ff7-4a25-95c7-ce9da541242f/resourceGroups/akven'
             'kat/providers/Microsoft.ManagedIdentity/userAssignedIdentities/sdkIdentity\\":{{}}}}" '
             '--type "UserAssigned" '
             '--user-assigned resource-id="/subscriptions/{subscription_id}/resourceGroups/{rg_9}/providers/Microsoft.M'
             'anagedIdentity/userAssignedIdentities/sdkIdentity" '
             '--kek-type "CustomerManaged" '
             '--kek-url "https://sdkkeyvault.vault.azure.net/keys/SSDKEY/" '
             '--kek-vault-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg_9}/providers/Microsoft.KeyVa'
             'ult/vaults/SDKKeyVault" '
             '--resource-group "{rg_11}"',
             checks=checks)


# EXAMPLE: /Jobs/post/BookShipmentPickupPost
@try_manual
def step_job_book_shipment_pick_up(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12,
                                   rg_13, rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job book-shipment-pick-up '
             '--name "{myJob9}" '
             '--resource-group "{rg_12}" '
             '--end-time "2019-09-22T18:30:00Z" '
             '--shipment-location "Front desk" '
             '--start-time "2019-09-20T18:30:00Z"',
             checks=checks)


# EXAMPLE: /Jobs/post/JobsCancelPost
@try_manual
def step_job_cancel(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job cancel '
             '--reason "CancelTest" '
             '--name "{myJob}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Jobs/post/JobsListCredentials
@try_manual
def step_job_list_credentials(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13,
                              rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job list-credentials '
             '--name "{myJob9}" '
             '--resource-group "{rg_12}"',
             checks=checks)


# EXAMPLE: /databox/post/Mitigate
@try_manual
def step_mitigate(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                  checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox mitigate '
             '--job-name "{myJob10}" '
             '--customer-resolution-code "MoveToCleanUpDevice" '
             '--resource-group "{rg_13}"',
             checks=checks)


# EXAMPLE: /Jobs/delete/JobsDelete
@try_manual
def step_job_delete(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13, rg_14, rg_15,
                    checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox job delete -y '
             '--name "{myJob}" '
             '--resource-group "{rg}"',
             checks=checks)


# EXAMPLE: /Service/post/AvailableSkusPost
@try_manual
def step_service_list_available_sku_by_resource_group(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10,
                                                      rg_11, rg_12, rg_13, rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service list-available-sku-by-resource-group '
             '--country "US" '
             '--available-sku-request-location "westus" '
             '--transfer-type "ImportToAzure" '
             '--location "westus" '
             '--resource-group "{rg_12}"',
             checks=checks)


# EXAMPLE: /Service/post/RegionConfiguration
@try_manual
def step_service_region_configuration(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12,
                                      rg_13, rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service region-configuration '
             '--location "westus" '
             '--schedule-availability-request "{{\\"skuName\\":\\"DataBox\\",\\"storageLocation\\":\\"westus\\"}}"',
             checks=checks)


# EXAMPLE: /Service/post/RegionConfigurationByResourceGroup
@try_manual
def step_service_region_configuration2(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12,
                                       rg_13, rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service region-configuration-by-resource-group '
             '--location "westus" '
             '--schedule-availability-request "{{\\"skuName\\":\\"DataBox\\",\\"storageLocation\\":\\"westus\\"}}" '
             '--resource-group "{rg_14}"',
             checks=checks)


# EXAMPLE: /Service/post/ValidateAddressPost
@try_manual
def step_service_validate_address(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13,
                                  rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service validate-address '
             '--location "westus" '
             '--device-type "DataBox" '
             '--shipping-address address-type="Commercial" city="San Francisco" company-name="Microsoft" country="US" '
             'postal-code="94107" state-or-province="CA" street-address1="16 TOWNSEND ST" street-address2="Unit 1" '
             '--validation-type "ValidateAddress"',
             checks=checks)


# EXAMPLE: /Service/post/ValidateInputs
@try_manual
def step_service_validate_input(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10, rg_11, rg_12, rg_13,
                                rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service validate-input '
             '--location "westus" '
             '--validation-request "{{\\"individualRequestDetails\\":[{{\\"dataImportDetails\\":[{{\\"accountDetails\\"'
             ':{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscriptions/{subscription_id}/'
             'resourcegroups/{rg_5}/providers/Microsoft.Storage/storageAccounts/{sa}\\"}}}}],\\"deviceType\\":\\"DataBo'
             'x\\",\\"transferType\\":\\"ImportToAzure\\",\\"validationType\\":\\"ValidateDataTransferDetails\\"}},{{\\'
             '"deviceType\\":\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\"San'
             ' Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",\\"st'
             'ateOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}},\\"transportPreferences\\":{{\\"preferredShipmentType\\":\\"MicrosoftManaged\\"}},\\"validationTyp'
             'e\\":\\"ValidateAddress\\"}},{{\\"validationType\\":\\"ValidateSubscriptionIsAllowedToCreateJob\\"}},{{\\'
             '"country\\":\\"US\\",\\"deviceType\\":\\"DataBox\\",\\"location\\":\\"westus\\",\\"transferType\\":\\"Imp'
             'ortToAzure\\",\\"validationType\\":\\"ValidateSkuAvailability\\"}},{{\\"deviceType\\":\\"DataBox\\",\\"va'
             'lidationType\\":\\"ValidateCreateOrderLimit\\"}},{{\\"deviceType\\":\\"DataBox\\",\\"preference\\":{{\\"t'
             'ransportPreferences\\":{{\\"preferredShipmentType\\":\\"MicrosoftManaged\\"}}}},\\"validationType\\":\\"V'
             'alidatePreferences\\"}}],\\"validationCategory\\":\\"JobCreationValidation\\"}}"',
             checks=checks)


# EXAMPLE: /Service/post/ValidateInputsByResourceGroup
@try_manual
def step_service_validate_input_by_resource_group(test, rg_5, rg_6, rg_9, rg, rg_2, rg_3, rg_4, rg_7, rg_8, rg_10,
                                                  rg_11, rg_12, rg_13, rg_14, rg_15, checks=None):
    if checks is None:
        checks = []
    test.cmd('az databox service validate-input-by-resource-group '
             '--location "westus" '
             '--resource-group "{rg_15}" '
             '--validation-request "{{\\"individualRequestDetails\\":[{{\\"dataImportDetails\\":[{{\\"accountDetails\\"'
             ':{{\\"dataAccountType\\":\\"StorageAccount\\",\\"storageAccountId\\":\\"/subscriptions/{subscription_id}/'
             'resourcegroups/{rg_5}/providers/Microsoft.Storage/storageAccounts/{sa}\\"}}}}],\\"deviceType\\":\\"DataBo'
             'x\\",\\"transferType\\":\\"ImportToAzure\\",\\"validationType\\":\\"ValidateDataTransferDetails\\"}},{{\\'
             '"deviceType\\":\\"DataBox\\",\\"shippingAddress\\":{{\\"addressType\\":\\"Commercial\\",\\"city\\":\\"San'
             ' Francisco\\",\\"companyName\\":\\"Microsoft\\",\\"country\\":\\"US\\",\\"postalCode\\":\\"94107\\",\\"st'
             'ateOrProvince\\":\\"CA\\",\\"streetAddress1\\":\\"16 TOWNSEND ST\\",\\"streetAddress2\\":\\"Unit '
             '1\\"}},\\"transportPreferences\\":{{\\"preferredShipmentType\\":\\"MicrosoftManaged\\"}},\\"validationTyp'
             'e\\":\\"ValidateAddress\\"}},{{\\"validationType\\":\\"ValidateSubscriptionIsAllowedToCreateJob\\"}},{{\\'
             '"country\\":\\"US\\",\\"deviceType\\":\\"DataBox\\",\\"location\\":\\"westus\\",\\"transferType\\":\\"Imp'
             'ortToAzure\\",\\"validationType\\":\\"ValidateSkuAvailability\\"}},{{\\"deviceType\\":\\"DataBox\\",\\"va'
             'lidationType\\":\\"ValidateCreateOrderLimit\\"}},{{\\"deviceType\\":\\"DataBox\\",\\"preference\\":{{\\"t'
             'ransportPreferences\\":{{\\"preferredShipmentType\\":\\"MicrosoftManaged\\"}}}},\\"validationType\\":\\"V'
             'alidatePreferences\\"}}],\\"validationCategory\\":\\"JobCreationValidation\\"}}"',
             checks=checks)

