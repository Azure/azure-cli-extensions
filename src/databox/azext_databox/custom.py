# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines, too-many-branches, too-many-locals
# pylint: disable=too-many-statements, line-too-long, protected-access

from knack.log import get_logger

from azure.cli.core.aaz import has_value
from azure.cli.core.azclierror import ArgumentUsageError
from azext_databox.aaz.latest.databox.job import Create as _JobCreate

logger = get_logger(__name__)


class JobCreate(_JobCreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZResourceIdArg, AAZResourceIdArgFormat, AAZListArg, AAZStrArg, AAZArgEnum, AAZFreeFormDictArg, AAZFreeFormDictArgFormat, AAZBoolArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.storage_accounts = AAZListArg(
            options=["--storage-account"],
            help="Space-separated list of the destination storage account. It can be the name or resource ID of storage account."
        )
        args_schema.storage_accounts.Element = AAZResourceIdArg(
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.Storage/storageAccounts/{}")
        )
        args_schema.staging_storage_account = AAZResourceIdArg(
            options=["--staging-storage-account"],
            help="Resource Id of the storage account that can be used to copy the vhd for staging.",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.Storage/storageAccounts/{}")
        )
        args_schema.resource_group_for_managed_disk = AAZResourceIdArg(
            options=['--resource-group-for-managed-disk'],
            help="Resource Group Id of the compute disks.",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{}")
        )
        args_schema.transfer_configuration_type = AAZStrArg(
            options=['--transfer-configuration-type'],
            help="Type of the configuration for transfer."
        )
        args_schema.transfer_configuration_type.enum = AAZArgEnum({"TransferAll", "TransferUsingFilter"})
        args_schema.transfer_filter_details = AAZFreeFormDictArg(
            options=["--transfer-filter-details"],
            help="Path to the map of filter type and the details to filter.",
            fmt=AAZFreeFormDictArgFormat()
        )
        args_schema.transfer_all_blobs = AAZBoolArg(
            options=["--transfer-all-blobs"],
            help="To indicate if all Azure blobs have to be transferred",
            default=False
        )
        args_schema.transfer_all_files = AAZBoolArg(
            options=["--transfer-all-files"],
            help="To indicate if all Azure files have to be transferred",
            default=False
        )
        args_schema.data_box._registered = False
        args_schema.data_box_disk._registered = False
        args_schema.data_box_heavy._registered = False
        args_schema.data_import_details._registered = False
        args_schema.data_export_details._registered = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if args.sku == 'DataBox':
            args.data_box = {}
        if args.sku == 'DataBoxDisk':
            args.data_box_disk = {}
        if args.sku == 'DataBoxHeavy':
            args.data_box_heavy = {}

        if args.sku == 'DataBoxDisk' and not has_value(args.expected_data_size):
            raise ArgumentUsageError("You must provide '--expected-data-size' when the 'sku' is 'DataBoxDisk'.")
        if not has_value(args.storage_accounts) and not has_value(args.staging_storage_account):
            raise ArgumentUsageError("You must provide at least one '--storage-account' or the combination of '--staging-storage-account' and '--resource-group-for-managed-disk'")

        data_import_or_export_details = []
        if has_value(args.storage_accounts):
            for storage_account in args.storage_accounts:
                account_details = {
                    'account_details': {
                        'storage_account': {
                            'storage_account_id': storage_account
                        }
                    }
                }
                data_import_or_export_details.append(account_details)
        if has_value(args.staging_storage_account):
            account_details = {
                'account_details': {
                    'managed_disk': {
                        'staging_storage_account_id': args.staging_storage_account,
                        'resource_group_id': args.resource_group_for_managed_disk
                    }
                }
            }
            data_import_or_export_details.append(account_details)

        if args.transfer_type == 'ImportToAzure':
            args.data_import_details = data_import_or_export_details

        if args.transfer_type == 'ExportFromAzure':
            if not has_value(args.transfer_configuration_type):
                raise ArgumentUsageError('You must provide --transfer-configuration-type when --transfer-type  is ExportFromAzure.')
            for detail in data_import_or_export_details:
                if args.transfer_configuration_type == 'TransferAll':
                    data_account_type = 'StorageAccount' if 'storage_account' in detail['account_details'] else 'ManagedDisk'
                    transfer_configuration = {
                        'transfer_configuration_type': args.transfer_configuration_type,
                        'transfer_all_details': {
                            'include': {
                                'data_account_type': data_account_type,
                                'transfer_all_blobs': args.transfer_all_blobs,
                                'transfer_all_files': args.transfer_all_files
                            }
                        }
                    }
                    detail['transfer_configuration'] = transfer_configuration
                if args.transfer_configuration_type == 'TransferUsingFilter':
                    if not has_value(args.transfer_filter_details):
                        raise ArgumentUsageError('You must provide --transfer-filter-details when --transfer-configuration-type  is TransferUsingFilter.')
                    transfer_configuration = {
                        "transfer_configuration_type": args.transfer_configuration_type,
                        "transfer_filter_details": args.transfer_filter_details
                    }
                    detail['transfer_configuration'] = transfer_configuration
            args.data_export_details = data_import_or_export_details
