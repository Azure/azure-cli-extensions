# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def databox_job_list(client,
                     resource_group_name=None,
                     skip_token=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             skip_token=skip_token)
    return client.list(skip_token=skip_token)


def databox_job_show(client,
                     resource_group_name,
                     job_name,
                     expand=None):
    return client.get(resource_group_name=resource_group_name,
                      job_name=job_name,
                      expand=expand)


def databox_job_create(client,
                       resource_group_name,
                       job_name,
                       location,
                       sku,
                       transfer_type,
                       tags=None,
                       identity_type=None,
                       identity_user_assigned_identities=None,
                       details=None,
                       delivery_type=None,
                       delivery_info_scheduled_date_time=None,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       job_name=job_name,
                       location=location,
                       tags=tags,
                       sku=sku,
                       type=identity_type,
                       user_assigned_identities=identity_user_assigned_identities,
                       transfer_type=transfer_type,
                       details=details,
                       delivery_type=delivery_type,
                       scheduled_date_time=delivery_info_scheduled_date_time)


def databox_job_update(client,
                       resource_group_name,
                       job_name,
                       if_match=None,
                       tags=None,
                       details_shipping_address=None,
                       details_key_encryption_key_kek_type=None,
                       details_key_encryption_key_kek_url=None,
                       details_key_encryption_key_kek_vault_resource_id=None,
                       details_key_encryption_key_identity_properties_type=None,
                       details_key_encryption_key_identity_properties_user_assigned=None,
                       details_contact_details_contact_name=None,
                       details_contact_details_phone=None,
                       details_contact_details_phone_extension=None,
                       details_contact_details_mobile=None,
                       details_contact_details_email_list=None,
                       details_contact_details_notification_preference=None,
                       identity_user_assigned_identities=None,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       job_name=job_name,
                       if_match=if_match,
                       tags=tags,
                       shipping_address=details_shipping_address,
                       kek_type=details_key_encryption_key_kek_type,
                       kek_url=details_key_encryption_key_kek_url,
                       kek_vault_resource_id=details_key_encryption_key_kek_vault_resource_id,
                       type=details_key_encryption_key_identity_properties_type,
                       user_assigned=details_key_encryption_key_identity_properties_user_assigned,
                       contact_name=details_contact_details_contact_name,
                       phone=details_contact_details_phone,
                       phone_extension=details_contact_details_phone_extension,
                       mobile=details_contact_details_mobile,
                       email_list=details_contact_details_email_list,
                       notification_preference=details_contact_details_notification_preference,
                       user_assigned_identities=identity_user_assigned_identities)


def databox_job_delete(client,
                       resource_group_name,
                       job_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       job_name=job_name)


def databox_job_book_shipment_pick_up(client,
                                      resource_group_name,
                                      job_name,
                                      start_time,
                                      end_time,
                                      shipment_location):
    return client.book_shipment_pick_up(resource_group_name=resource_group_name,
                                        job_name=job_name,
                                        start_time=start_time,
                                        end_time=end_time,
                                        shipment_location=shipment_location)


def databox_job_cancel(client,
                       resource_group_name,
                       job_name,
                       reason):
    return client.cancel(resource_group_name=resource_group_name,
                         job_name=job_name,
                         reason=reason)


def databox_job_list_credentials(client,
                                 resource_group_name,
                                 job_name):
    return client.list_credentials(resource_group_name=resource_group_name,
                                   job_name=job_name)


def databox_service_list_available_sku_by_resource_group(client,
                                                         resource_group_name,
                                                         location,
                                                         transfer_type,
                                                         country,
                                                         available_sku_request_location,
                                                         sku_names=None):
    return client.list_available_sku_by_resource_group(resource_group_name=resource_group_name,
                                                       location=location,
                                                       transfer_type=transfer_type,
                                                       country=country,
                                                       available_sku_request_location=available_sku_request_location,
                                                       sku_names=sku_names)


def databox_service_region_configuration(client,
                                         location,
                                         data_box_schedule_availability_request=None,
                                         disk_schedule_availability_request=None,
                                         heavy_schedule_availability_request=None,
                                         transport_availability_request_sku_name=None):
    all_schedule_availability_request = []
    if data_box_schedule_availability_request is not None:
        all_schedule_availability_request.append(data_box_schedule_availability_request)
    if disk_schedule_availability_request is not None:
        all_schedule_availability_request.append(disk_schedule_availability_request)
    if heavy_schedule_availability_request is not None:
        all_schedule_availability_request.append(heavy_schedule_availability_request)
    if len(all_schedule_availability_request) > 1:
        raise CLIError('at most one of  data_box_schedule_availability_request, disk_schedule_availability_request, '
                       'heavy_schedule_availability_request is needed for schedule_availability_request!')
    schedule_availability_request = all_schedule_availability_request[0] if len(all_schedule_availability_request) == \
    1 else None
    return client.region_configuration(location=location,
                                       schedule_availability_request=schedule_availability_request,
                                       sku_name=transport_availability_request_sku_name)


def databox_service_region_configuration_by_resource_group(client,
                                                           resource_group_name,
                                                           location,
                                                           data_box_schedule_availability_request=None,
                                                           disk_schedule_availability_request=None,
                                                           heavy_schedule_availability_request=None,
                                                           transport_availability_request_sku_name=None):
    all_schedule_availability_request = []
    if data_box_schedule_availability_request is not None:
        all_schedule_availability_request.append(data_box_schedule_availability_request)
    if disk_schedule_availability_request is not None:
        all_schedule_availability_request.append(disk_schedule_availability_request)
    if heavy_schedule_availability_request is not None:
        all_schedule_availability_request.append(heavy_schedule_availability_request)
    if len(all_schedule_availability_request) > 1:
        raise CLIError('at most one of  data_box_schedule_availability_request, disk_schedule_availability_request, '
                       'heavy_schedule_availability_request is needed for schedule_availability_request!')
    schedule_availability_request = all_schedule_availability_request[0] if len(all_schedule_availability_request) == \
    1 else None
    return client.region_configuration_by_resource_group(resource_group_name=resource_group_name,
                                                         location=location,
                                                         schedule_availability_request=schedule_availability_request,
                                                         sku_name=transport_availability_request_sku_name)


def databox_service_validate_address(client,
                                     location,
                                     validation_type,
                                     shipping_address,
                                     device_type,
                                     transport_preferences_preferred_shipment_type=None):
    return client.validate_address(location=location,
                                   validation_type=validation_type,
                                   shipping_address=shipping_address,
                                   device_type=device_type,
                                   preferred_shipment_type=transport_preferences_preferred_shipment_type)


def databox_service_validate_input(client,
                                   location,
                                   create_job_validations=None):
    all_validation_request = []
    if create_job_validations is not None:
        all_validation_request.append(create_job_validations)
    if len(all_validation_request) > 1:
        raise CLIError('at most one of  create_job_validations is needed for validation_request!')
    if len(all_validation_request) != 1:
        raise CLIError('validation_request is required. but none of create_job_validations is provided!')
    validation_request = all_validation_request[0] if len(all_validation_request) == 1 else None
    return client.validate_input(location=location,
                                 validation_request=validation_request)


def databox_service_validate_input_by_resource_group(client,
                                                     resource_group_name,
                                                     location,
                                                     create_job_validations=None):
    all_validation_request = []
    if create_job_validations is not None:
        all_validation_request.append(create_job_validations)
    if len(all_validation_request) > 1:
        raise CLIError('at most one of  create_job_validations is needed for validation_request!')
    if len(all_validation_request) != 1:
        raise CLIError('validation_request is required. but none of create_job_validations is provided!')
    validation_request = all_validation_request[0] if len(all_validation_request) == 1 else None
    return client.validate_input_by_resource_group(resource_group_name=resource_group_name,
                                                   location=location,
                                                   validation_request=validation_request)
