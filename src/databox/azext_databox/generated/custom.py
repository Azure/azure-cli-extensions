# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from knack.util import CLIError
from azure.cli.core.util import sdk_no_wait


def databox_job_list(client,
                     resource_group_name=None,
                     skip_token=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name,
                                             skip_token=skip_token)
    return client.list(skip_token=skip_token)


def databox_job_show(client,
                     resource_group_name,
                     job_name,
                     expand=None):
    return client.get(resource_group_name=resource_group_name,
                      job_name=job_name,
                      expand=expand)


def databox_job_create(client,
                       resource_group_name,
                       job_name,
                       location,
                       sku,
                       transfer_type,
                       tags=None,
                       type_=None,
                       user_assigned_identities=None,
                       details=None,
                       delivery_type=None,
                       scheduled_date_time=None,
                       no_wait=False):
    if type_ is None:
        type_ = "None"
    if delivery_type is None:
        delivery_type = "NonScheduled"
    job_resource = {}
    job_resource['location'] = location
    job_resource['tags'] = tags
    job_resource['sku'] = sku
    job_resource['identity'] = {}
    job_resource['identity']['type'] = "None" if type_ is None else type_
    job_resource['identity']['user_assigned_identities'] = user_assigned_identities
    job_resource['details'] = details
    job_resource['delivery_type'] = "NonScheduled" if delivery_type is None else delivery_type
    job_resource['delivery_info'] = {}
    job_resource['delivery_info']['scheduled_date_time'] = scheduled_date_time
    return sdk_no_wait(no_wait,
                       client.begin_create,
                       resource_group_name=resource_group_name,
                       job_name=job_name,
                       job_resource=job_resource)


def databox_job_update(client,
                       resource_group_name,
                       job_name,
                       if_match=None,
                       tags=None,
                       shipping_address=None,
                       kek_type=None,
                       kek_url=None,
                       kek_vault_resource_id=None,
                       type_=None,
                       user_assigned=None,
                       contact_name=None,
                       phone=None,
                       phone_extension=None,
                       mobile=None,
                       email_list=None,
                       notification_preference=None,
                       resource_identity_type=None,
                       user_assigned_identities=None,
                       no_wait=False):
    if kek_type is None:
        kek_type = "MicrosoftManaged"
    if resource_identity_type is None:
        resource_identity_type = "None"
    job_resource_update_parameter = {}
    job_resource_update_parameter['tags'] = tags
    job_resource_update_parameter['details'] = {}
    job_resource_update_parameter['details']['shipping_address'] = shipping_address
    job_resource_update_parameter['details']['key_encryption_key'] = {}
    job_resource_update_parameter['details']['key_encryption_key']['kek_type'] = "MicrosoftManaged" if kek_type is None else kek_type
    job_resource_update_parameter['details']['key_encryption_key']['kek_url'] = kek_url
    job_resource_update_parameter['details']['key_encryption_key']['kek_vault_resource_id'] = kek_vault_resource_id
    job_resource_update_parameter['contact_details'] = {}
    job_resource_update_parameter['contact_details']['contact_name'] = contact_name
    job_resource_update_parameter['contact_details']['phone'] = phone
    job_resource_update_parameter['contact_details']['phone_extension'] = phone_extension
    job_resource_update_parameter['contact_details']['mobile'] = mobile
    job_resource_update_parameter['contact_details']['email_list'] = email_list
    job_resource_update_parameter['contact_details']['notification_preference'] = notification_preference
    job_resource_update_parameter['identity'] = {}
    job_resource_update_parameter['identity']['type'] = "None" if resource_identity_type is None else resource_identity_type
    job_resource_update_parameter['identity']['user_assigned_identities'] = user_assigned_identities
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       job_name=job_name,
                       if_match=if_match,
                       job_resource_update_parameter=job_resource_update_parameter)


def databox_job_delete(client,
                       resource_group_name,
                       job_name,
                       no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       job_name=job_name)


def databox_job_book_shipment_pick_up(client,
                                      resource_group_name,
                                      job_name,
                                      start_time,
                                      end_time,
                                      shipment_location):
    shipment_pick_up_request = {}
    shipment_pick_up_request['start_time'] = start_time
    shipment_pick_up_request['end_time'] = end_time
    shipment_pick_up_request['shipment_location'] = shipment_location
    return client.book_shipment_pick_up(resource_group_name=resource_group_name,
                                        job_name=job_name,
                                        shipment_pick_up_request=shipment_pick_up_request)


def databox_job_cancel(client,
                       resource_group_name,
                       job_name,
                       reason):
    cancellation_reason = {}
    cancellation_reason['reason'] = reason
    return client.cancel(resource_group_name=resource_group_name,
                         job_name=job_name,
                         cancellation_reason=cancellation_reason)


def databox_job_list_credentials(client,
                                 resource_group_name,
                                 job_name):
    return client.list_credentials(resource_group_name=resource_group_name,
                                   job_name=job_name)


def databox_mitigate(client,
                     job_name,
                     resource_group_name,
                     customer_resolution_code):
    mitigate_job_request = {}
    mitigate_job_request['customer_resolution_code'] = customer_resolution_code
    return client.mitigate(job_name=job_name,
                           resource_group_name=resource_group_name,
                           mitigate_job_request=mitigate_job_request)


def databox_service_list_available_sku_by_resource_group(client,
                                                         resource_group_name,
                                                         location,
                                                         transfer_type,
                                                         country,
                                                         available_sku_request_location,
                                                         sku_names=None):
    available_sku_request = {}
    available_sku_request['transfer_type'] = transfer_type
    available_sku_request['country'] = country
    available_sku_request['location'] = available_sku_request_location
    available_sku_request['sku_names'] = sku_names
    return client.list_available_skus_by_resource_group(resource_group_name=resource_group_name,
                                                        location=location,
                                                        available_sku_request=available_sku_request)


def databox_service_region_configuration(client,
                                         location,
                                         data_box_schedule_availability_request=None,
                                         disk_schedule_availability_request=None,
                                         heavy_schedule_availability_request=None,
                                         sku_name=None):
    all_schedule_availability_request = []
    if data_box_schedule_availability_request is not None:
        all_schedule_availability_request.append(data_box_schedule_availability_request)
    if disk_schedule_availability_request is not None:
        all_schedule_availability_request.append(disk_schedule_availability_request)
    if heavy_schedule_availability_request is not None:
        all_schedule_availability_request.append(heavy_schedule_availability_request)
    if len(all_schedule_availability_request) > 1:
        raise CLIError('at most one of  data_box_schedule_availability_request, disk_schedule_availability_request, '
                       'heavy_schedule_availability_request is needed for schedule_availability_request!')
    schedule_availability_request = all_schedule_availability_request[0] if len(all_schedule_availability_request) == \
    1 else None
    region_configuration_request = {}
    region_configuration_request['schedule_availability_request'] = schedule_availability_request
    region_configuration_request['transport_availability_request'] = {}
    region_configuration_request['transport_availability_request']['sku_name'] = sku_name
    return client.region_configuration(location=location,
                                       region_configuration_request=region_configuration_request)


def databox_service_region_configuration_by_resource_group(client,
                                                           resource_group_name,
                                                           location,
                                                           data_box_schedule_availability_request=None,
                                                           disk_schedule_availability_request=None,
                                                           heavy_schedule_availability_request=None,
                                                           sku_name=None):
    all_schedule_availability_request = []
    if data_box_schedule_availability_request is not None:
        all_schedule_availability_request.append(data_box_schedule_availability_request)
    if disk_schedule_availability_request is not None:
        all_schedule_availability_request.append(disk_schedule_availability_request)
    if heavy_schedule_availability_request is not None:
        all_schedule_availability_request.append(heavy_schedule_availability_request)
    if len(all_schedule_availability_request) > 1:
        raise CLIError('at most one of  data_box_schedule_availability_request, disk_schedule_availability_request, '
                       'heavy_schedule_availability_request is needed for schedule_availability_request!')
    schedule_availability_request = all_schedule_availability_request[0] if len(all_schedule_availability_request) == \
    1 else None
    region_configuration_request = {}
    region_configuration_request['schedule_availability_request'] = schedule_availability_request
    region_configuration_request['transport_availability_request'] = {}
    region_configuration_request['transport_availability_request']['sku_name'] = sku_name
    return client.region_configuration_by_resource_group(resource_group_name=resource_group_name,
                                                         location=location,
                                                         region_configuration_request=region_configuration_request)


def databox_service_validate_address(client,
                                     location,
                                     validation_type,
                                     shipping_address,
                                     device_type,
                                     preferred_shipment_type=None):
    validate_address = {}
    validate_address['shipping_address'] = shipping_address
    validate_address['device_type'] = device_type
    validate_address['transport_preferences'] = {}
    validate_address['transport_preferences']['preferred_shipment_type'] = preferred_shipment_type
    return client.validate_address(location=location,
                                   validate_address=validate_address)


def databox_service_validate_input(client,
                                   location,
                                   create_job_validations=None):
    all_validation_request = []
    if create_job_validations is not None:
        all_validation_request.append(create_job_validations)
    if len(all_validation_request) > 1:
        raise CLIError('at most one of  create_job_validations is needed for validation_request!')
    if len(all_validation_request) != 1:
        raise CLIError('validation_request is required. but none of create_job_validations is provided!')
    validation_request = all_validation_request[0] if len(all_validation_request) == 1 else None
    return client.validate_inputs(location=location,
                                  validation_request=validation_request)


def databox_service_validate_input_by_resource_group(client,
                                                     resource_group_name,
                                                     location,
                                                     create_job_validations=None):
    all_validation_request = []
    if create_job_validations is not None:
        all_validation_request.append(create_job_validations)
    if len(all_validation_request) > 1:
        raise CLIError('at most one of  create_job_validations is needed for validation_request!')
    if len(all_validation_request) != 1:
        raise CLIError('validation_request is required. but none of create_job_validations is provided!')
    validation_request = all_validation_request[0] if len(all_validation_request) == 1 else None
    return client.validate_inputs_by_resource_group(resource_group_name=resource_group_name,
                                                    location=location,
                                                    validation_request=validation_request)
