# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from knack.arguments import CLIArgumentType
from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import get_default_location_from_resource_group
from azext_databox.action import (
    AddSku,
    AddDeliveryInfo,
    AddDestinationAccountDetails,
    AddDataBoxScheduleAvailabilityRequest,
    AddDiskScheduleAvailabilityRequest,
    AddHeavyScheduleAvailabilityRequest,
    AddTransportAvailabilityRequest,
    AddShippingAddress,
    AddTransportPreferences,
    AddCreateJobValidations
)


def load_arguments(self, _):

    with self.argument_context('databox job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skip_token', help='$skipToken is supported on Get list of jobs, which provides the next page in the'
                   ' list of jobs.')

    with self.argument_context('databox job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')
        c.argument('expand', help='$expand is supported on details parameter for job, which provides details on the job'
                   ' stages.')

    with self.argument_context('databox job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku type. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , ava'
                   'ilable KEYs are: name, display-name, family.')
        c.argument('details', arg_type=CLIArgumentType(options_list=['--details'], help='Details of a job run. This fie'
                   'ld will only be sent for expand details filter. Expected value: json-string/@json-file.'))
        c.argument('delivery_type', arg_type=get_enum_type(['NonScheduled', 'Scheduled']),
                   help='Delivery type of Job.')
        c.argument('delivery_info', action=AddDeliveryInfo, nargs='+', help='Delivery Info of Job. Expect value: schedu'
                   'led-date-time=xx.')

    with self.argument_context('databox job update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')
        c.argument('if_match', help='Defines the If-Match condition. The patch will be performed only if the ETag of th'
                   'e job on the server matches this value.')
        c.argument('tags', tags_type)
        c.argument('details', arg_type=CLIArgumentType(options_list=['--details'], help='Details of a job to be updated'
                   '. Expected value: json-string/@json-file.'))
        c.argument('destination_account_details', action=AddDestinationAccountDetails, nargs='+', help='Destination acc'
                   'ount details. Expect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: data-destination-type'
                   ', account-id, share-password.')

    with self.argument_context('databox job delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')

    with self.argument_context('databox job book-shipment-pick-up') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')
        c.argument('start_time', help='Minimum date after which the pick up should commence, this must be in local time'
                   ' of pick up area.')
        c.argument('end_time', help='Maximum date before which the pick up should commence, this must be in local time '
                   'of pick up area.')
        c.argument('shipment_location', help='Shipment Location in the pickup place. Eg.front desk')

    with self.argument_context('databox job cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')
        c.argument('reason', help='Reason for cancellation.')

    with self.argument_context('databox job list-credentials') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', help='The name of the job Resource within the specified resource group. job names must b'
                   'e between 3 and 24 characters in length and use any alphanumeric and underscore only')

    with self.argument_context('databox service list-available-sku') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('country', help='ISO country code. Country for hardware shipment. For codes check: https://en.wikipe'
                   'dia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements')
        c.argument('sku_names', nargs='+', help='Sku Names to filter for available skus Expected value: json-string/@js'
                   'on-file.')

    with self.argument_context('databox service list-available-sku-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('country', help='ISO country code. Country for hardware shipment. For codes check: https://en.wikipe'
                   'dia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements')
        c.argument('sku_names', nargs='+', help='Sku Names to filter for available skus Expected value: json-string/@js'
                   'on-file.')

    with self.argument_context('databox service region-configuration') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('data_box_schedule_availability_request', action=AddDataBoxScheduleAvailabilityRequest, nargs='+',
                   help='Request body to get the availability for scheduling data box orders orders. Expect value: stor'
                   'age-location=xx.', arg_group='ScheduleAvailabilityRequest')
        c.argument('disk_schedule_availability_request', action=AddDiskScheduleAvailabilityRequest, nargs='+', help='Re'
                   'quest body to get the availability for scheduling disk orders. Expect value: KEY1=VALUE1 KEY2=VALUE'
                   '2 ... , available KEYs are: expected-data-size-in-terabytes, storage-location.', arg_group='Schedul'
                   'eAvailabilityRequest')
        c.argument('heavy_schedule_availability_request', action=AddHeavyScheduleAvailabilityRequest, nargs='+', help=
                   'Request body to get the availability for scheduling heavy orders. Expect value: storage-location=xx'
                   '.', arg_group='ScheduleAvailabilityRequest')
        c.argument('transport_availability_request', action=AddTransportAvailabilityRequest, nargs='+', help='Request b'
                   'ody to get the transport availability for given sku. Expect value: sku-name=xx.')

    with self.argument_context('databox service validate-address') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('validation_type', arg_type=get_enum_type(['ValidateAddress', 'ValidateDataDestinationDetails', 'Val'
                   'idateSubscriptionIsAllowedToCreateJob', 'ValidatePreferences', 'ValidateCreateOrderLimit', 'Validat'
                   'eSkuAvailability']), help='Identifies the type of validation request.')
        c.argument('shipping_address', action=AddShippingAddress, nargs='+', help='Shipping address of the customer. Ex'
                   'pect value: KEY1=VALUE1 KEY2=VALUE2 ... , available KEYs are: street-address1, street-address2, str'
                   'eet-address3, city, state-or-province, country, postal-code, zip-extended-code, company-name, addre'
                   'ss-type.')
        c.argument('device_type', arg_type=get_enum_type(['DataBox', 'DataBoxDisk', 'DataBoxHeavy']), help='Device type'
                   ' to be used for the job.')
        c.argument('transport_preferences', action=AddTransportPreferences, nargs='+', help='Preferences related to the'
                   ' shipment logistics of the sku. Expect value: preferred-shipment-type=xx.')

    with self.argument_context('databox service validate-input') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('create_job_validations', action=AddCreateJobValidations, nargs='+', help='It does all pre-job creat'
                   'ion validations. Expect value: individual-request-details=xx.', arg_group='ValidationRequest')

    with self.argument_context('databox service validate-input-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('create_job_validations', action=AddCreateJobValidations, nargs='+', help='It does all pre-job creat'
                   'ion validations. Expect value: individual-request-details=xx.', arg_group='ValidationRequest')
