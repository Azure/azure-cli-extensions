# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type,
    get_location_type
)
from azure.cli.core.commands.validators import (
    get_default_location_from_resource_group,
    validate_file_or_dict
)
from azext_databox.action import (
    AddSku,
    AddDetailsShippingAddress,
    AddDetailsKeyEncryptionKeyIdentityPropertiesUserAssigned,
    AddDetailsContactDetailsNotificationPreference,
    AddDataBoxScheduleAvailabilityRequest,
    AddDiskScheduleAvailabilityRequest,
    AddHeavyScheduleAvailabilityRequest,
    AddCreateJobValidations
)


def load_arguments(self, _):

    with self.argument_context('databox job list') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('skip_token', type=str, help='$skipToken is supported on Get list of jobs, which provides the next '
                   'page in the list of jobs.')

    with self.argument_context('databox job show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')
        c.argument('expand', type=str, help='$expand is supported on details parameter for job, which provides details '
                   'on the job stages.')

    with self.argument_context('databox job create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only')
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('tags', tags_type)
        c.argument('sku', action=AddSku, nargs='+', help='The sku type.')
        c.argument('identity_type', type=str, help='Identity type')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='User Assigned Identities '
                   'Expected value: json-string/@json-file.')
        c.argument('transfer_type', arg_type=get_enum_type(['ImportToAzure', 'ExportFromAzure']), help='Type of the '
                   'data transfer.')
        c.argument('details', type=validate_file_or_dict, help='Details of a job run. This field will only be sent for '
                   'expand details filter. Expected value: json-string/@json-file.')
        c.argument('delivery_type', arg_type=get_enum_type(['NonScheduled', 'Scheduled']),
                   help='Delivery type of Job.')
        c.argument('delivery_info_scheduled_date_time', help='Scheduled date time.')

    with self.argument_context('databox job update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')
        c.argument('if_match', type=str, help='Defines the If-Match condition. The patch will be performed only if the '
                   'ETag of the job on the server matches this value.')
        c.argument('tags', tags_type)
        c.argument('details_shipping_address', action=AddDetailsShippingAddress, nargs='*', help='Shipping address of '
                   'the customer.')
        c.argument('details_key_encryption_key_kek_type', arg_type=get_enum_type(['MicrosoftManaged',
                                                                                  'CustomerManaged']), help='Type of '
                   'encryption key used for key encryption.')
        c.argument('details_key_encryption_key_kek_url', type=str, help='Key encryption key. It is required in case of '
                   'Customer managed KekType.')
        c.argument('details_key_encryption_key_kek_vault_resource_id', type=str, help='Kek vault resource id. It is '
                   'required in case of Customer managed KekType.')
        c.argument('details_key_encryption_key_identity_properties_type', type=str, help='Managed service identity '
                   'type.')
        c.argument('details_key_encryption_key_identity_properties_user_assigned',
                   action=AddDetailsKeyEncryptionKeyIdentityPropertiesUserAssigned, nargs='*', help='User assigned '
                   'identity properties.')
        c.argument('details_contact_details_contact_name', type=str, help='Contact name of the person.')
        c.argument('details_contact_details_phone', type=str, help='Phone number of the contact person.')
        c.argument('details_contact_details_phone_extension', type=str, help='Phone extension number of the contact '
                   'person.')
        c.argument('details_contact_details_mobile', type=str, help='Mobile number of the contact person.')
        c.argument('details_contact_details_email_list', nargs='*', help='List of Email-ids to be notified about job '
                   'progress.')
        c.argument('details_contact_details_notification_preference',
                   action=AddDetailsContactDetailsNotificationPreference, nargs='*', help='Notification preference for '
                   'a job stage.')
        c.argument('identity_user_assigned_identities', type=validate_file_or_dict, help='User Assigned Identities '
                   'Expected value: json-string/@json-file.')

    with self.argument_context('databox job delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')

    with self.argument_context('databox job book-shipment-pick-up') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')
        c.argument('start_time', help='Minimum date after which the pick up should commence, this must be in local '
                   'time of pick up area.')
        c.argument('end_time', help='Maximum date before which the pick up should commence, this must be in local time '
                   'of pick up area.')
        c.argument('shipment_location', type=str, help='Shipment Location in the pickup place. Eg.front desk')

    with self.argument_context('databox job cancel') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')
        c.argument('reason', type=str, help='Reason for cancellation.')

    with self.argument_context('databox job list-credentials') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only')

    with self.argument_context('databox job wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('job_name', options_list=['--name', '-n', '--job-name'], type=str, help='The name of the job '
                   'Resource within the specified resource group. job names must be between 3 and 24 characters in '
                   'length and use any alphanumeric and underscore only', id_part='name')
        c.argument('expand', type=str, help='$expand is supported on details parameter for job, which provides details '
                   'on the job stages.')

    with self.argument_context('databox service list-available-sku-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group)
        c.argument('transfer_type', arg_type=get_enum_type(['ImportToAzure', 'ExportFromAzure']), help='Type of the '
                   'transfer.')
        c.argument('country', type=str, help='ISO country code. Country for hardware shipment. For codes check: '
                   'https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements')
        c.argument('available_sku_request_location', type=str, help='Location for data transfer. For locations check: '
                   'https://management.azure.com/subscriptions/SUBSCRIPTIONID/locations?api-version=2018-01-01')
        c.argument('sku_names', nargs='*', help='Sku Names to filter for available skus')

    with self.argument_context('databox service region-configuration') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('data_box_schedule_availability_request', action=AddDataBoxScheduleAvailabilityRequest, nargs='*',
                   help='Request body to get the availability for scheduling data box orders orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('disk_schedule_availability_request', action=AddDiskScheduleAvailabilityRequest, nargs='*', help=''
                   'Request body to get the availability for scheduling disk orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('heavy_schedule_availability_request', action=AddHeavyScheduleAvailabilityRequest, nargs='*', help=''
                   'Request body to get the availability for scheduling heavy orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('transport_availability_request_sku_name', arg_type=get_enum_type(['DataBox', 'DataBoxDisk', ''
                                                                                      'DataBoxHeavy']), help='Type of '
                   'the device.')

    with self.argument_context('databox service region-configuration-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group, id_part='name')
        c.argument('data_box_schedule_availability_request', action=AddDataBoxScheduleAvailabilityRequest, nargs='*',
                   help='Request body to get the availability for scheduling data box orders orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('disk_schedule_availability_request', action=AddDiskScheduleAvailabilityRequest, nargs='*', help=''
                   'Request body to get the availability for scheduling disk orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('heavy_schedule_availability_request', action=AddHeavyScheduleAvailabilityRequest, nargs='*', help=''
                   'Request body to get the availability for scheduling heavy orders.', arg_group=''
                   'ScheduleAvailabilityRequest')
        c.argument('transport_availability_request_sku_name', arg_type=get_enum_type(['DataBox', 'DataBoxDisk', ''
                                                                                      'DataBoxHeavy']), help='Type of '
                   'the device.')

    with self.argument_context('databox service validate-address') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('validation_type', arg_type=get_enum_type(['ValidateAddress', 'ValidateSubscriptionIsAllowedToCreate'
                                                              'Job', 'ValidatePreferences', 'ValidateCreateOrderLimit',
                                                              'ValidateSkuAvailability',
                                                             'ValidateDataTransferDetails']), help='Identifies the '
                   'type of validation request.')
        c.argument('shipping_address', action=AddDetailsShippingAddress, nargs='+', help='Shipping address of the '
                   'customer.')
        c.argument('device_type', arg_type=get_enum_type(['DataBox', 'DataBoxDisk', 'DataBoxHeavy']), help='Device '
                   'type to be used for the job.')
        c.argument('transport_preferences_preferred_shipment_type', arg_type=get_enum_type(['CustomerManaged', ''
                                                                                            'MicrosoftManaged']),
                   help='Indicates Shipment Logistics type that the customer preferred.')

    with self.argument_context('databox service validate-input') as c:
        c.argument('location', arg_type=get_location_type(self.cli_ctx), id_part='name')
        c.argument('create_job_validations', action=AddCreateJobValidations, nargs='*', help='It does all pre-job '
                   'creation validations.', arg_group='ValidationRequest')

    with self.argument_context('databox service validate-input-by-resource-group') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('location', arg_type=get_location_type(self.cli_ctx),
                   validator=get_default_location_from_resource_group, id_part='name')
        c.argument('create_job_validations', action=AddCreateJobValidations, nargs='*', help='It does all pre-job '
                   'creation validations.', arg_group='ValidationRequest')
