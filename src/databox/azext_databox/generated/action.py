# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=protected-access

import argparse
from collections import defaultdict
from knack.util import CLIError


class AddSku(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.sku = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'name':
                d['name'] = v[0]
            elif kl == 'display-name':
                d['display_name'] = v[0]
            elif kl == 'family':
                d['family'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter sku. All possible keys are: name, '
                               'display-name, family'.format(k))
        return d


class AddShippingAddress(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.shipping_address = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['address_type'] = "None"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'street-address1':
                d['street_address1'] = v[0]
            elif kl == 'street-address2':
                d['street_address2'] = v[0]
            elif kl == 'street-address3':
                d['street_address3'] = v[0]
            elif kl == 'city':
                d['city'] = v[0]
            elif kl == 'state-or-province':
                d['state_or_province'] = v[0]
            elif kl == 'country':
                d['country'] = v[0]
            elif kl == 'postal-code':
                d['postal_code'] = v[0]
            elif kl == 'zip-extended-code':
                d['zip_extended_code'] = v[0]
            elif kl == 'company-name':
                d['company_name'] = v[0]
            elif kl == 'address-type':
                d['address_type'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter shipping_address. All possible keys are: '
                               'street-address1, street-address2, street-address3, city, state-or-province, country, '
                               'postal-code, zip-extended-code, company-name, address-type'.format(k))
        return d


class AddUserAssigned(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.user_assigned = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'resource-id':
                d['resource_id'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter user_assigned. All possible keys are: '
                               'resource-id'.format(k))
        return d


class AddNotificationPreference(argparse._AppendAction):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        super(AddNotificationPreference, self).__call__(parser, namespace, action, option_string)

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['send_notification'] = True
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'stage-name':
                d['stage_name'] = v[0]
            elif kl == 'send-notification':
                d['send_notification'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter notification_preference. All possible '
                               'keys are: stage-name, send-notification'.format(k))
        return d


class AddDataBoxScheduleAvailabilityRequest(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.data_box_schedule_availability_request = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'storage-location':
                d['storage_location'] = v[0]
            elif kl == 'country':
                d['country'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter data_box_schedule_availability_request. '
                               'All possible keys are: storage-location, country'.format(k))
        d['sku_name'] = 'DataBox'
        return d


class AddDiskScheduleAvailabilityRequest(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.disk_schedule_availability_request = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'expected-data-size-in-tera-bytes':
                d['expected_data_size_in_tera_bytes'] = v[0]
            elif kl == 'storage-location':
                d['storage_location'] = v[0]
            elif kl == 'country':
                d['country'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter disk_schedule_availability_request. All '
                               'possible keys are: expected-data-size-in-tera-bytes, storage-location, country'.format(k))
        d['sku_name'] = 'DataBoxDisk'
        return d


class AddHeavyScheduleAvailabilityRequest(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.heavy_schedule_availability_request = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'storage-location':
                d['storage_location'] = v[0]
            elif kl == 'country':
                d['country'] = v[0]
            else:
                raise CLIError('Unsupported Key {} is provided for parameter heavy_schedule_availability_request. All '
                               'possible keys are: storage-location, country'.format(k))
        d['sku_name'] = 'DataBoxHeavy'
        return d


class AddCreateJobValidations(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        action = self.get_action(values, option_string)
        namespace.create_job_validations = action

    def get_action(self, values, option_string):  # pylint: disable=no-self-use
        try:
            properties = defaultdict(list)
            for (k, v) in (x.split('=', 1) for x in values):
                properties[k].append(v)
            properties = dict(properties)
        except ValueError:
            raise CLIError('usage error: {} [KEY=VALUE ...]'.format(option_string))
        d = {}
        d['validation_category'] = "JobCreationValidation"
        for k in properties:
            kl = k.lower()
            v = properties[k]
            if kl == 'individual-request-details':
                d['individual_request_details'] = v
            else:
                raise CLIError('Unsupported Key {} is provided for parameter create_job_validations. All possible keys '
                               'are: individual-request-details'.format(k))
        d['validation_category'] = 'JobCreationValidation'
        return d
