# pylint: disable=line-too-long,useless-suppression,too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

import datetime
from typing import Any, Dict, List, Optional, TYPE_CHECKING, Union

from .._utils import serialization as _serialization

if TYPE_CHECKING:
    from .. import models as _models


class AgentProfile(_serialization.Model):
    """Agent profile for the Fleet hub.

    :ivar subnet_id: The ID of the subnet which the Fleet hub node will join on startup. If this is
     not specified, a vnet and subnet will be generated and used.
    :vartype subnet_id: str
    :ivar vm_size: The virtual machine size of the Fleet hub.
    :vartype vm_size: str
    """

    _attribute_map = {
        "subnet_id": {"key": "subnetId", "type": "str"},
        "vm_size": {"key": "vmSize", "type": "str"},
    }

    def __init__(self, *, subnet_id: Optional[str] = None, vm_size: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword subnet_id: The ID of the subnet which the Fleet hub node will join on startup. If this
         is not specified, a vnet and subnet will be generated and used.
        :paramtype subnet_id: str
        :keyword vm_size: The virtual machine size of the Fleet hub.
        :paramtype vm_size: str
        """
        super().__init__(**kwargs)
        self.subnet_id = subnet_id
        self.vm_size = vm_size


class APIServerAccessProfile(_serialization.Model):
    """Access profile for the Fleet hub API server.

    :ivar enable_private_cluster: Whether to create the Fleet hub as a private cluster or not.
    :vartype enable_private_cluster: bool
    :ivar enable_vnet_integration: Whether to enable apiserver vnet integration for the Fleet hub
     or not.
    :vartype enable_vnet_integration: bool
    :ivar subnet_id: The subnet to be used when apiserver vnet integration is enabled. It is
     required when creating a new Fleet with BYO vnet.
    :vartype subnet_id: str
    """

    _attribute_map = {
        "enable_private_cluster": {"key": "enablePrivateCluster", "type": "bool"},
        "enable_vnet_integration": {"key": "enableVnetIntegration", "type": "bool"},
        "subnet_id": {"key": "subnetId", "type": "str"},
    }

    def __init__(
        self,
        *,
        enable_private_cluster: Optional[bool] = None,
        enable_vnet_integration: Optional[bool] = None,
        subnet_id: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword enable_private_cluster: Whether to create the Fleet hub as a private cluster or not.
        :paramtype enable_private_cluster: bool
        :keyword enable_vnet_integration: Whether to enable apiserver vnet integration for the Fleet
         hub or not.
        :paramtype enable_vnet_integration: bool
        :keyword subnet_id: The subnet to be used when apiserver vnet integration is enabled. It is
         required when creating a new Fleet with BYO vnet.
        :paramtype subnet_id: str
        """
        super().__init__(**kwargs)
        self.enable_private_cluster = enable_private_cluster
        self.enable_vnet_integration = enable_vnet_integration
        self.subnet_id = subnet_id


class AutoUpgradeNodeImageSelection(_serialization.Model):
    """The node image upgrade to be applied to the target clusters in auto upgrade.

    All required parameters must be populated in order to send to server.

    :ivar type: The node image upgrade type. Required. Known values are: "Latest" and "Consistent".
    :vartype type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeNodeImageSelectionType
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
    }

    def __init__(self, *, type: Union[str, "_models.AutoUpgradeNodeImageSelectionType"], **kwargs: Any) -> None:
        """
        :keyword type: The node image upgrade type. Required. Known values are: "Latest" and
         "Consistent".
        :paramtype type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeNodeImageSelectionType
        """
        super().__init__(**kwargs)
        self.type = type


class Resource(_serialization.Model):
    """Common fields that are returned in the response for all Azure Resource Manager resources.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None
        self.name: Optional[str] = None
        self.type: Optional[str] = None
        self.system_data: Optional["_models.SystemData"] = None


class ProxyResource(Resource):
    """The resource model definition for a Azure Resource Manager proxy resource. It will not have
    tags and a location.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    """


class AutoUpgradeProfile(ProxyResource):
    """The AutoUpgradeProfile resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar provisioning_state: The provisioning state of the AutoUpgradeProfile resource. Known
     values are: "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeProfileProvisioningState
    :ivar update_strategy_id: The resource id of the UpdateStrategy resource to reference. If not
     specified, the auto upgrade will run on all clusters which are members of the fleet.
    :vartype update_strategy_id: str
    :ivar channel: Configures how auto-upgrade will be run. Known values are: "Stable", "Rapid",
     "NodeImage", and "TargetKubernetesVersion".
    :vartype channel: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpgradeChannel
    :ivar node_image_selection: The node image upgrade to be applied to the target clusters in auto
     upgrade.
    :vartype node_image_selection:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeNodeImageSelection
    :ivar disabled: If set to False: the auto upgrade has effect - target managed clusters will be
     upgraded on schedule.
     If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed
     clusters.
     This is a boolean and not an enum because enabled/disabled are all available states of the auto
     upgrade profile.
     By default, this is set to False.
    :vartype disabled: bool
    :ivar auto_upgrade_profile_status: The status of the auto upgrade profile.
    :vartype auto_upgrade_profile_status:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeProfileStatus
    :ivar target_kubernetes_version: This is the target Kubernetes version for auto-upgrade. The
     format must be ``{major version}.{minor version}``. For example, "1.30".
       By default, this is empty.
       If upgrade channel is set to TargetKubernetesVersion, this field must not be empty.
       If upgrade channel is Rapid, Stable or NodeImage, this field must be empty.
    :vartype target_kubernetes_version: str
    :ivar long_term_support: If upgrade channel is not TargetKubernetesVersion, this field must be
     False.
       If set to True: Fleet auto upgrade will continue generate update runs for patches of minor
     versions earlier than N-2
       (where N is the latest supported minor version) if those minor versions support Long-Term
     Support (LTS).
       By default, this is set to False.
       For more information on AKS LTS, please see
     https://learn.microsoft.com/en-us/azure/aks/long-term-support.
    :vartype long_term_support: bool
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "e_tag": {"key": "eTag", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "update_strategy_id": {"key": "properties.updateStrategyId", "type": "str"},
        "channel": {"key": "properties.channel", "type": "str"},
        "node_image_selection": {"key": "properties.nodeImageSelection", "type": "AutoUpgradeNodeImageSelection"},
        "disabled": {"key": "properties.disabled", "type": "bool"},
        "auto_upgrade_profile_status": {
            "key": "properties.autoUpgradeProfileStatus",
            "type": "AutoUpgradeProfileStatus",
        },
        "target_kubernetes_version": {"key": "properties.targetKubernetesVersion", "type": "str"},
        "long_term_support": {"key": "properties.longTermSupport", "type": "bool"},
    }

    def __init__(
        self,
        *,
        update_strategy_id: Optional[str] = None,
        channel: Optional[Union[str, "_models.UpgradeChannel"]] = None,
        node_image_selection: Optional["_models.AutoUpgradeNodeImageSelection"] = None,
        disabled: Optional[bool] = None,
        auto_upgrade_profile_status: Optional["_models.AutoUpgradeProfileStatus"] = None,
        target_kubernetes_version: Optional[str] = None,
        long_term_support: Optional[bool] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword update_strategy_id: The resource id of the UpdateStrategy resource to reference. If
         not specified, the auto upgrade will run on all clusters which are members of the fleet.
        :paramtype update_strategy_id: str
        :keyword channel: Configures how auto-upgrade will be run. Known values are: "Stable", "Rapid",
         "NodeImage", and "TargetKubernetesVersion".
        :paramtype channel: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpgradeChannel
        :keyword node_image_selection: The node image upgrade to be applied to the target clusters in
         auto upgrade.
        :paramtype node_image_selection:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeNodeImageSelection
        :keyword disabled: If set to False: the auto upgrade has effect - target managed clusters will
         be upgraded on schedule.
         If set to True: the auto upgrade has no effect - no upgrade will be run on the target managed
         clusters.
         This is a boolean and not an enum because enabled/disabled are all available states of the auto
         upgrade profile.
         By default, this is set to False.
        :paramtype disabled: bool
        :keyword auto_upgrade_profile_status: The status of the auto upgrade profile.
        :paramtype auto_upgrade_profile_status:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeProfileStatus
        :keyword target_kubernetes_version: This is the target Kubernetes version for auto-upgrade. The
         format must be ``{major version}.{minor version}``. For example, "1.30".
           By default, this is empty.
           If upgrade channel is set to TargetKubernetesVersion, this field must not be empty.
           If upgrade channel is Rapid, Stable or NodeImage, this field must be empty.
        :paramtype target_kubernetes_version: str
        :keyword long_term_support: If upgrade channel is not TargetKubernetesVersion, this field must
         be False.
           If set to True: Fleet auto upgrade will continue generate update runs for patches of minor
         versions earlier than N-2
           (where N is the latest supported minor version) if those minor versions support Long-Term
         Support (LTS).
           By default, this is set to False.
           For more information on AKS LTS, please see
         https://learn.microsoft.com/en-us/azure/aks/long-term-support.
        :paramtype long_term_support: bool
        """
        super().__init__(**kwargs)
        self.e_tag: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.AutoUpgradeProfileProvisioningState"]] = None
        self.update_strategy_id = update_strategy_id
        self.channel = channel
        self.node_image_selection = node_image_selection
        self.disabled = disabled
        self.auto_upgrade_profile_status = auto_upgrade_profile_status
        self.target_kubernetes_version = target_kubernetes_version
        self.long_term_support = long_term_support


class AutoUpgradeProfileListResult(_serialization.Model):
    """The response of a AutoUpgradeProfile list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The AutoUpgradeProfile items on this page. Required.
    :vartype value:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeProfile]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[AutoUpgradeProfile]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.AutoUpgradeProfile"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The AutoUpgradeProfile items on this page. Required.
        :paramtype value:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeProfile]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class AutoUpgradeProfileStatus(_serialization.Model):
    """AutoUpgradeProfileStatus is the status of an auto upgrade profile.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar last_triggered_at: The UTC time of the last attempt to automatically create and start an
     UpdateRun as triggered by the release of new versions.
    :vartype last_triggered_at: ~datetime.datetime
    :ivar last_trigger_status: The status of the last AutoUpgrade trigger. Known values are:
     "Succeeded" and "Failed".
    :vartype last_trigger_status: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AutoUpgradeLastTriggerStatus
    :ivar last_trigger_error: The error details of the last trigger.
    :vartype last_trigger_error:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    :ivar last_trigger_upgrade_versions: The target Kubernetes version or node image versions of
     the last trigger.
    :vartype last_trigger_upgrade_versions: list[str]
    """

    _validation = {
        "last_triggered_at": {"readonly": True},
        "last_trigger_status": {"readonly": True},
        "last_trigger_error": {"readonly": True},
        "last_trigger_upgrade_versions": {"readonly": True},
    }

    _attribute_map = {
        "last_triggered_at": {"key": "lastTriggeredAt", "type": "iso-8601"},
        "last_trigger_status": {"key": "lastTriggerStatus", "type": "str"},
        "last_trigger_error": {"key": "lastTriggerError", "type": "ErrorDetail"},
        "last_trigger_upgrade_versions": {"key": "lastTriggerUpgradeVersions", "type": "[str]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.last_triggered_at: Optional[datetime.datetime] = None
        self.last_trigger_status: Optional[Union[str, "_models.AutoUpgradeLastTriggerStatus"]] = None
        self.last_trigger_error: Optional["_models.ErrorDetail"] = None
        self.last_trigger_upgrade_versions: Optional[List[str]] = None


class ErrorAdditionalInfo(_serialization.Model):
    """The resource management error additional info.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar type: The additional info type.
    :vartype type: str
    :ivar info: The additional info.
    :vartype info: JSON
    """

    _validation = {
        "type": {"readonly": True},
        "info": {"readonly": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "info": {"key": "info", "type": "object"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.type: Optional[str] = None
        self.info: Optional[JSON] = None


class ErrorDetail(_serialization.Model):
    """The error detail.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar code: The error code.
    :vartype code: str
    :ivar message: The error message.
    :vartype message: str
    :ivar target: The error target.
    :vartype target: str
    :ivar details: The error details.
    :vartype details:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail]
    :ivar additional_info: The error additional info.
    :vartype additional_info:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorAdditionalInfo]
    """

    _validation = {
        "code": {"readonly": True},
        "message": {"readonly": True},
        "target": {"readonly": True},
        "details": {"readonly": True},
        "additional_info": {"readonly": True},
    }

    _attribute_map = {
        "code": {"key": "code", "type": "str"},
        "message": {"key": "message", "type": "str"},
        "target": {"key": "target", "type": "str"},
        "details": {"key": "details", "type": "[ErrorDetail]"},
        "additional_info": {"key": "additionalInfo", "type": "[ErrorAdditionalInfo]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.code: Optional[str] = None
        self.message: Optional[str] = None
        self.target: Optional[str] = None
        self.details: Optional[List["_models.ErrorDetail"]] = None
        self.additional_info: Optional[List["_models.ErrorAdditionalInfo"]] = None


class ErrorResponse(_serialization.Model):
    """Common error response for all Azure Resource Manager APIs to return error details for failed
    operations. (This also follows the OData error response format.).

    :ivar error: The error object.
    :vartype error: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    """

    _attribute_map = {
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, *, error: Optional["_models.ErrorDetail"] = None, **kwargs: Any) -> None:
        """
        :keyword error: The error object.
        :paramtype error: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
        """
        super().__init__(**kwargs)
        self.error = error


class TrackedResource(Resource):
    """The resource model definition for an Azure Resource Manager tracked top level resource which
    has 'tags' and a 'location'.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
    }

    def __init__(self, *, location: str, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.location = location


class Fleet(TrackedResource):
    """The Fleet resource.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar identity: Managed identity.
    :vartype identity:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentity
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetProvisioningState
    :ivar hub_profile: The FleetHubProfile configures the Fleet's hub.
    :vartype hub_profile:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetHubProfile
    :ivar status: Status information for the fleet.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetStatus
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "e_tag": {"key": "eTag", "type": "str"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "hub_profile": {"key": "properties.hubProfile", "type": "FleetHubProfile"},
        "status": {"key": "properties.status", "type": "FleetStatus"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        hub_profile: Optional["_models.FleetHubProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword identity: Managed identity.
        :paramtype identity:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentity
        :keyword hub_profile: The FleetHubProfile configures the Fleet's hub.
        :paramtype hub_profile:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetHubProfile
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.e_tag: Optional[str] = None
        self.identity = identity
        self.provisioning_state: Optional[Union[str, "_models.FleetProvisioningState"]] = None
        self.hub_profile = hub_profile
        self.status: Optional["_models.FleetStatus"] = None


class FleetCredentialResult(_serialization.Model):
    """One credential result item.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the credential.
    :vartype name: str
    :ivar value: Base64-encoded Kubernetes configuration file.
    :vartype value: bytes
    """

    _validation = {
        "name": {"readonly": True},
        "value": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "value": {"key": "value", "type": "bytearray"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.value: Optional[bytes] = None


class FleetCredentialResults(_serialization.Model):
    """The Credential results response.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar kubeconfigs: Array of base64-encoded Kubernetes configuration files.
    :vartype kubeconfigs:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetCredentialResult]
    """

    _validation = {
        "kubeconfigs": {"readonly": True},
    }

    _attribute_map = {
        "kubeconfigs": {"key": "kubeconfigs", "type": "[FleetCredentialResult]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.kubeconfigs: Optional[List["_models.FleetCredentialResult"]] = None


class FleetHubProfile(_serialization.Model):
    """The FleetHubProfile configures the fleet hub.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar dns_prefix: DNS prefix used to create the FQDN for the Fleet hub.
    :vartype dns_prefix: str
    :ivar api_server_access_profile: The access profile for the Fleet hub API server.
    :vartype api_server_access_profile:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.APIServerAccessProfile
    :ivar agent_profile: The agent profile for the Fleet hub.
    :vartype agent_profile:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AgentProfile
    :ivar fqdn: The FQDN of the Fleet hub.
    :vartype fqdn: str
    :ivar kubernetes_version: The Kubernetes version of the Fleet hub.
    :vartype kubernetes_version: str
    :ivar portal_fqdn: The Azure Portal FQDN of the Fleet hub.
    :vartype portal_fqdn: str
    """

    _validation = {
        "dns_prefix": {
            "max_length": 54,
            "min_length": 1,
            "pattern": r"^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-]{0,52}[a-zA-Z0-9]$",
        },
        "fqdn": {"readonly": True},
        "kubernetes_version": {"readonly": True},
        "portal_fqdn": {"readonly": True},
    }

    _attribute_map = {
        "dns_prefix": {"key": "dnsPrefix", "type": "str"},
        "api_server_access_profile": {"key": "apiServerAccessProfile", "type": "APIServerAccessProfile"},
        "agent_profile": {"key": "agentProfile", "type": "AgentProfile"},
        "fqdn": {"key": "fqdn", "type": "str"},
        "kubernetes_version": {"key": "kubernetesVersion", "type": "str"},
        "portal_fqdn": {"key": "portalFqdn", "type": "str"},
    }

    def __init__(
        self,
        *,
        dns_prefix: Optional[str] = None,
        api_server_access_profile: Optional["_models.APIServerAccessProfile"] = None,
        agent_profile: Optional["_models.AgentProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword dns_prefix: DNS prefix used to create the FQDN for the Fleet hub.
        :paramtype dns_prefix: str
        :keyword api_server_access_profile: The access profile for the Fleet hub API server.
        :paramtype api_server_access_profile:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.APIServerAccessProfile
        :keyword agent_profile: The agent profile for the Fleet hub.
        :paramtype agent_profile:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AgentProfile
        """
        super().__init__(**kwargs)
        self.dns_prefix = dns_prefix
        self.api_server_access_profile = api_server_access_profile
        self.agent_profile = agent_profile
        self.fqdn: Optional[str] = None
        self.kubernetes_version: Optional[str] = None
        self.portal_fqdn: Optional[str] = None


class FleetListResult(_serialization.Model):
    """The response of a Fleet list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Fleet items on this page. Required.
    :vartype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Fleet]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Fleet]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Fleet"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Fleet items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Fleet]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetManagedNamespace(TrackedResource):
    """A fleet managed namespace.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar location: The geo-location where the resource lives. Required.
    :vartype location: str
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Creating", "Updating", and "Deleting".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetManagedNamespaceProvisioningState
    :ivar managed_namespace_properties: The namespace properties for the fleet managed namespace.
    :vartype managed_namespace_properties:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedNamespaceProperties
    :ivar adoption_policy: Action if the managed namespace with the same name already exists.
     Default is Never. Known values are: "Never", "IfIdentical", and "Always".
    :vartype adoption_policy: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AdoptionPolicy
    :ivar delete_policy: Delete options of a fleet managed namespace. Default is Keep. Known values
     are: "Keep" and "Delete".
    :vartype delete_policy: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.DeletePolicy
    :ivar propagation_policy: The profile of the propagation to create the namespace.
    :vartype propagation_policy:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropagationPolicy
    :ivar status: Status information of the last operation for fleet managed namespace.
    :vartype status:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetManagedNamespaceStatus
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "location": {"required": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "tags": {"key": "tags", "type": "{str}"},
        "location": {"key": "location", "type": "str"},
        "e_tag": {"key": "eTag", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "managed_namespace_properties": {
            "key": "properties.managedNamespaceProperties",
            "type": "ManagedNamespaceProperties",
        },
        "adoption_policy": {"key": "properties.adoptionPolicy", "type": "str"},
        "delete_policy": {"key": "properties.deletePolicy", "type": "str"},
        "propagation_policy": {"key": "properties.propagationPolicy", "type": "PropagationPolicy"},
        "status": {"key": "properties.status", "type": "FleetManagedNamespaceStatus"},
    }

    def __init__(
        self,
        *,
        location: str,
        tags: Optional[Dict[str, str]] = None,
        managed_namespace_properties: Optional["_models.ManagedNamespaceProperties"] = None,
        adoption_policy: Optional[Union[str, "_models.AdoptionPolicy"]] = None,
        delete_policy: Optional[Union[str, "_models.DeletePolicy"]] = None,
        propagation_policy: Optional["_models.PropagationPolicy"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword location: The geo-location where the resource lives. Required.
        :paramtype location: str
        :keyword managed_namespace_properties: The namespace properties for the fleet managed
         namespace.
        :paramtype managed_namespace_properties:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedNamespaceProperties
        :keyword adoption_policy: Action if the managed namespace with the same name already exists.
         Default is Never. Known values are: "Never", "IfIdentical", and "Always".
        :paramtype adoption_policy: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.AdoptionPolicy
        :keyword delete_policy: Delete options of a fleet managed namespace. Default is Keep. Known
         values are: "Keep" and "Delete".
        :paramtype delete_policy: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.DeletePolicy
        :keyword propagation_policy: The profile of the propagation to create the namespace.
        :paramtype propagation_policy:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropagationPolicy
        """
        super().__init__(tags=tags, location=location, **kwargs)
        self.e_tag: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.FleetManagedNamespaceProvisioningState"]] = None
        self.managed_namespace_properties = managed_namespace_properties
        self.adoption_policy = adoption_policy
        self.delete_policy = delete_policy
        self.propagation_policy = propagation_policy
        self.status: Optional["_models.FleetManagedNamespaceStatus"] = None


class FleetManagedNamespaceListResult(_serialization.Model):
    """The response of a FleetManagedNamespace list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FleetManagedNamespace items on this page. Required.
    :vartype value:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetManagedNamespace]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FleetManagedNamespace]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.FleetManagedNamespace"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The FleetManagedNamespace items on this page. Required.
        :paramtype value:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetManagedNamespace]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetManagedNamespacePatch(_serialization.Model):
    """The properties of a fleet managed namespace that can be patched.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
    }

    def __init__(self, *, tags: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        """
        super().__init__(**kwargs)
        self.tags = tags


class FleetManagedNamespaceStatus(_serialization.Model):
    """Status information for the fleet managed namespace.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar last_operation_id: The last operation ID for the fleet managed namespace.
    :vartype last_operation_id: str
    :ivar last_operation_error: The last operation error of the fleet managed namespace.
    :vartype last_operation_error:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    """

    _validation = {
        "last_operation_id": {"readonly": True},
        "last_operation_error": {"readonly": True},
    }

    _attribute_map = {
        "last_operation_id": {"key": "lastOperationId", "type": "str"},
        "last_operation_error": {"key": "lastOperationError", "type": "ErrorDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.last_operation_id: Optional[str] = None
        self.last_operation_error: Optional["_models.ErrorDetail"] = None


class FleetMember(ProxyResource):
    """A member of the Fleet. It contains a reference to an existing Kubernetes cluster on Azure.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar cluster_resource_id: The ARM resource id of the cluster that joins the Fleet. Must be a
     valid Azure resource id. e.g.:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
    :vartype cluster_resource_id: str
    :ivar group: The group this member belongs to for multi-cluster update management.
    :vartype group: str
    :ivar provisioning_state: The status of the last operation. Known values are: "Succeeded",
     "Failed", "Canceled", "Joining", "Leaving", and "Updating".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetMemberProvisioningState
    :ivar labels: The labels for the fleet member.
    :vartype labels: dict[str, str]
    :ivar status: Status information of the last operation for fleet member.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetMemberStatus
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "e_tag": {"readonly": True},
        "group": {"max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "e_tag": {"key": "eTag", "type": "str"},
        "cluster_resource_id": {"key": "properties.clusterResourceId", "type": "str"},
        "group": {"key": "properties.group", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "labels": {"key": "properties.labels", "type": "{str}"},
        "status": {"key": "properties.status", "type": "FleetMemberStatus"},
    }

    def __init__(
        self,
        *,
        cluster_resource_id: Optional[str] = None,
        group: Optional[str] = None,
        labels: Optional[Dict[str, str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cluster_resource_id: The ARM resource id of the cluster that joins the Fleet. Must be
         a valid Azure resource id. e.g.:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/managedClusters/{clusterName}'.
        :paramtype cluster_resource_id: str
        :keyword group: The group this member belongs to for multi-cluster update management.
        :paramtype group: str
        :keyword labels: The labels for the fleet member.
        :paramtype labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.e_tag: Optional[str] = None
        self.cluster_resource_id = cluster_resource_id
        self.group = group
        self.provisioning_state: Optional[Union[str, "_models.FleetMemberProvisioningState"]] = None
        self.labels = labels
        self.status: Optional["_models.FleetMemberStatus"] = None


class FleetMemberListResult(_serialization.Model):
    """The response of a FleetMember list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FleetMember items on this page. Required.
    :vartype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetMember]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FleetMember]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.FleetMember"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The FleetMember items on this page. Required.
        :paramtype value:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetMember]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class FleetMemberStatus(_serialization.Model):
    """Status information for the fleet member.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar last_operation_id: The last operation ID for the fleet member.
    :vartype last_operation_id: str
    :ivar last_operation_error: The last operation error of the fleet member.
    :vartype last_operation_error:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    """

    _validation = {
        "last_operation_id": {"readonly": True},
        "last_operation_error": {"readonly": True},
    }

    _attribute_map = {
        "last_operation_id": {"key": "lastOperationId", "type": "str"},
        "last_operation_error": {"key": "lastOperationError", "type": "ErrorDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.last_operation_id: Optional[str] = None
        self.last_operation_error: Optional["_models.ErrorDetail"] = None


class FleetMemberUpdate(_serialization.Model):
    """The type used for update operations of the FleetMember.

    :ivar group: The group this member belongs to for multi-cluster update management.
    :vartype group: str
    :ivar labels: The labels for the fleet member.
    :vartype labels: dict[str, str]
    """

    _validation = {
        "group": {"max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
    }

    _attribute_map = {
        "group": {"key": "properties.group", "type": "str"},
        "labels": {"key": "properties.labels", "type": "{str}"},
    }

    def __init__(self, *, group: Optional[str] = None, labels: Optional[Dict[str, str]] = None, **kwargs: Any) -> None:
        """
        :keyword group: The group this member belongs to for multi-cluster update management.
        :paramtype group: str
        :keyword labels: The labels for the fleet member.
        :paramtype labels: dict[str, str]
        """
        super().__init__(**kwargs)
        self.group = group
        self.labels = labels


class FleetPatch(_serialization.Model):
    """Properties of a Fleet that can be patched.

    :ivar tags: Resource tags.
    :vartype tags: dict[str, str]
    :ivar identity: Managed identity.
    :vartype identity:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentity
    """

    _attribute_map = {
        "tags": {"key": "tags", "type": "{str}"},
        "identity": {"key": "identity", "type": "ManagedServiceIdentity"},
    }

    def __init__(
        self,
        *,
        tags: Optional[Dict[str, str]] = None,
        identity: Optional["_models.ManagedServiceIdentity"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword tags: Resource tags.
        :paramtype tags: dict[str, str]
        :keyword identity: Managed identity.
        :paramtype identity:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentity
        """
        super().__init__(**kwargs)
        self.tags = tags
        self.identity = identity


class FleetStatus(_serialization.Model):
    """Status information for the fleet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar last_operation_id: The last operation ID for the fleet.
    :vartype last_operation_id: str
    :ivar last_operation_error: The last operation error for the fleet.
    :vartype last_operation_error:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    """

    _validation = {
        "last_operation_id": {"readonly": True},
        "last_operation_error": {"readonly": True},
    }

    _attribute_map = {
        "last_operation_id": {"key": "lastOperationId", "type": "str"},
        "last_operation_error": {"key": "lastOperationError", "type": "ErrorDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.last_operation_id: Optional[str] = None
        self.last_operation_error: Optional["_models.ErrorDetail"] = None


class FleetUpdateStrategy(ProxyResource):
    """Defines a multi-stage process to perform update operations across members of a Fleet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar provisioning_state: The provisioning state of the UpdateStrategy resource. Known values
     are: "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetUpdateStrategyProvisioningState
    :ivar strategy: Defines the update sequence of the clusters.
    :vartype strategy:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunStrategy
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "e_tag": {"key": "eTag", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "strategy": {"key": "properties.strategy", "type": "UpdateRunStrategy"},
    }

    def __init__(self, *, strategy: Optional["_models.UpdateRunStrategy"] = None, **kwargs: Any) -> None:
        """
        :keyword strategy: Defines the update sequence of the clusters.
        :paramtype strategy:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunStrategy
        """
        super().__init__(**kwargs)
        self.e_tag: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.FleetUpdateStrategyProvisioningState"]] = None
        self.strategy = strategy


class FleetUpdateStrategyListResult(_serialization.Model):
    """The response of a FleetUpdateStrategy list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The FleetUpdateStrategy items on this page. Required.
    :vartype value:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetUpdateStrategy]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[FleetUpdateStrategy]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(
        self, *, value: List["_models.FleetUpdateStrategy"], next_link: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword value: The FleetUpdateStrategy items on this page. Required.
        :paramtype value:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.FleetUpdateStrategy]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class Gate(ProxyResource):
    """A Gate controls the progression during a staged rollout, e.g. in an Update Run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar provisioning_state: The provisioning state of the Gate resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateProvisioningState
    :ivar display_name: The human-readable display name of the Gate.
    :vartype display_name: str
    :ivar gate_type: The type of the Gate determines how it is completed. "Approval"
    :vartype gate_type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateType
    :ivar target: The target that the Gate is controlling, e.g. an Update Run.
    :vartype target: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateTarget
    :ivar state: The state of the Gate. Known values are: "Pending", "Skipped", and "Completed".
    :vartype state: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateState
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "display_name": {"max_length": 100, "min_length": 1},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "e_tag": {"key": "eTag", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "display_name": {"key": "properties.displayName", "type": "str"},
        "gate_type": {"key": "properties.gateType", "type": "str"},
        "target": {"key": "properties.target", "type": "GateTarget"},
        "state": {"key": "properties.state", "type": "str"},
    }

    def __init__(
        self,
        *,
        display_name: Optional[str] = None,
        gate_type: Optional[Union[str, "_models.GateType"]] = None,
        target: Optional["_models.GateTarget"] = None,
        state: Optional[Union[str, "_models.GateState"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The human-readable display name of the Gate.
        :paramtype display_name: str
        :keyword gate_type: The type of the Gate determines how it is completed. "Approval"
        :paramtype gate_type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateType
        :keyword target: The target that the Gate is controlling, e.g. an Update Run.
        :paramtype target: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateTarget
        :keyword state: The state of the Gate. Known values are: "Pending", "Skipped", and "Completed".
        :paramtype state: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateState
        """
        super().__init__(**kwargs)
        self.e_tag: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.GateProvisioningState"]] = None
        self.display_name = display_name
        self.gate_type = gate_type
        self.target = target
        self.state = state


class GateConfiguration(_serialization.Model):
    """GateConfiguration is used to define where Gates should be placed within the Update Run.

    All required parameters must be populated in order to send to server.

    :ivar display_name: The human-readable display name of the Gate.
    :vartype display_name: str
    :ivar type: The type of the Gate determines how it is completed. Required. "Approval"
    :vartype type: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateType
    """

    _validation = {
        "display_name": {"max_length": 100, "min_length": 1},
        "type": {"required": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "type": {"key": "type", "type": "str"},
    }

    def __init__(
        self, *, type: Union[str, "_models.GateType"], display_name: Optional[str] = None, **kwargs: Any
    ) -> None:
        """
        :keyword display_name: The human-readable display name of the Gate.
        :paramtype display_name: str
        :keyword type: The type of the Gate determines how it is completed. Required. "Approval"
        :paramtype type: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateType
        """
        super().__init__(**kwargs)
        self.display_name = display_name
        self.type = type


class GateListResult(_serialization.Model):
    """The response of a Gate list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The Gate items on this page. Required.
    :vartype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Gate]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Gate]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.Gate"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The Gate items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Gate]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class GatePatch(_serialization.Model):
    """Patch a Gate resource.

    :ivar properties: Properties of a Gate that can be patched.
    :vartype properties:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GatePatchProperties
    """

    _attribute_map = {
        "properties": {"key": "properties", "type": "GatePatchProperties"},
    }

    def __init__(self, *, properties: Optional["_models.GatePatchProperties"] = None, **kwargs: Any) -> None:
        """
        :keyword properties: Properties of a Gate that can be patched.
        :paramtype properties:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GatePatchProperties
        """
        super().__init__(**kwargs)
        self.properties = properties


class GatePatchProperties(_serialization.Model):
    """Properties of a Gate that can be patched.

    :ivar state: The state of the Gate. Known values are: "Pending", "Skipped", and "Completed".
    :vartype state: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateState
    """

    _attribute_map = {
        "state": {"key": "state", "type": "str"},
    }

    def __init__(self, *, state: Optional[Union[str, "_models.GateState"]] = None, **kwargs: Any) -> None:
        """
        :keyword state: The state of the Gate. Known values are: "Pending", "Skipped", and "Completed".
        :paramtype state: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateState
        """
        super().__init__(**kwargs)
        self.state = state


class GateTarget(_serialization.Model):
    """The target that the Gate is controlling, e.g. an Update Run. Exactly one of the properties
    objects will be set.

    All required parameters must be populated in order to send to server.

    :ivar id: The resource id that the Gate is controlling the rollout of. Required.
    :vartype id: str
    :ivar update_run_properties: The properties of the Update Run that the Gate is targeting.
    :vartype update_run_properties:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateTargetProperties
    """

    _validation = {
        "id": {"required": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "update_run_properties": {"key": "updateRunProperties", "type": "UpdateRunGateTargetProperties"},
    }

    def __init__(
        self,
        *,
        id: str,  # pylint: disable=redefined-builtin
        update_run_properties: Optional["_models.UpdateRunGateTargetProperties"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword id: The resource id that the Gate is controlling the rollout of. Required.
        :paramtype id: str
        :keyword update_run_properties: The properties of the Update Run that the Gate is targeting.
        :paramtype update_run_properties:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateTargetProperties
        """
        super().__init__(**kwargs)
        self.id = id
        self.update_run_properties = update_run_properties


class GenerateResponse(_serialization.Model):
    """GenerateResponse is the response of a generate request.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar id: The ARM resource id of the generated UpdateRun. e.g.:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerService/fleets/{fleetName}/updateRuns/{updateRunName}'.
     Required.
    :vartype id: str
    """

    _validation = {
        "id": {"required": True, "readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.id: Optional[str] = None


class ManagedClusterUpdate(_serialization.Model):
    """The update to be applied to the ManagedClusters.

    All required parameters must be populated in order to send to server.

    :ivar upgrade: The upgrade to apply to the ManagedClusters. Required.
    :vartype upgrade:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpgradeSpec
    :ivar node_image_selection: The node image upgrade to be applied to the target nodes in update
     run.
    :vartype node_image_selection:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageSelection
    """

    _validation = {
        "upgrade": {"required": True},
    }

    _attribute_map = {
        "upgrade": {"key": "upgrade", "type": "ManagedClusterUpgradeSpec"},
        "node_image_selection": {"key": "nodeImageSelection", "type": "NodeImageSelection"},
    }

    def __init__(
        self,
        *,
        upgrade: "_models.ManagedClusterUpgradeSpec",
        node_image_selection: Optional["_models.NodeImageSelection"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword upgrade: The upgrade to apply to the ManagedClusters. Required.
        :paramtype upgrade:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpgradeSpec
        :keyword node_image_selection: The node image upgrade to be applied to the target nodes in
         update run.
        :paramtype node_image_selection:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageSelection
        """
        super().__init__(**kwargs)
        self.upgrade = upgrade
        self.node_image_selection = node_image_selection


class ManagedClusterUpgradeSpec(_serialization.Model):
    """The upgrade to apply to a ManagedCluster.

    All required parameters must be populated in order to send to server.

    :ivar type: ManagedClusterUpgradeType is the type of upgrade to be applied. Required. Known
     values are: "Full", "NodeImageOnly", and "ControlPlaneOnly".
    :vartype type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpgradeType
    :ivar kubernetes_version: The Kubernetes version to upgrade the member clusters to.
    :vartype kubernetes_version: str
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "kubernetes_version": {"key": "kubernetesVersion", "type": "str"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedClusterUpgradeType"],
        kubernetes_version: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: ManagedClusterUpgradeType is the type of upgrade to be applied. Required. Known
         values are: "Full", "NodeImageOnly", and "ControlPlaneOnly".
        :paramtype type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpgradeType
        :keyword kubernetes_version: The Kubernetes version to upgrade the member clusters to.
        :paramtype kubernetes_version: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.kubernetes_version = kubernetes_version


class ManagedNamespaceProperties(_serialization.Model):
    """The namespace properties for the fleet managed namespace.

    :ivar labels: The labels for the fleet managed namespace.
    :vartype labels: dict[str, str]
    :ivar annotations: The annotations for the fleet managed namespace.
    :vartype annotations: dict[str, str]
    :ivar default_resource_quota: The default resource quota for the fleet managed namespace.
    :vartype default_resource_quota:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ResourceQuota
    :ivar default_network_policy: The default network policy for the fleet managed namespace.
    :vartype default_network_policy:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NetworkPolicy
    """

    _attribute_map = {
        "labels": {"key": "labels", "type": "{str}"},
        "annotations": {"key": "annotations", "type": "{str}"},
        "default_resource_quota": {"key": "defaultResourceQuota", "type": "ResourceQuota"},
        "default_network_policy": {"key": "defaultNetworkPolicy", "type": "NetworkPolicy"},
    }

    def __init__(
        self,
        *,
        labels: Optional[Dict[str, str]] = None,
        annotations: Optional[Dict[str, str]] = None,
        default_resource_quota: Optional["_models.ResourceQuota"] = None,
        default_network_policy: Optional["_models.NetworkPolicy"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword labels: The labels for the fleet managed namespace.
        :paramtype labels: dict[str, str]
        :keyword annotations: The annotations for the fleet managed namespace.
        :paramtype annotations: dict[str, str]
        :keyword default_resource_quota: The default resource quota for the fleet managed namespace.
        :paramtype default_resource_quota:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ResourceQuota
        :keyword default_network_policy: The default network policy for the fleet managed namespace.
        :paramtype default_network_policy:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NetworkPolicy
        """
        super().__init__(**kwargs)
        self.labels = labels
        self.annotations = annotations
        self.default_resource_quota = default_resource_quota
        self.default_network_policy = default_network_policy


class ManagedServiceIdentity(_serialization.Model):
    """Managed service identity (system assigned and/or user assigned identities).

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar principal_id: The service principal ID of the system assigned identity. This property
     will only be provided for a system assigned identity.
    :vartype principal_id: str
    :ivar tenant_id: The tenant ID of the system assigned identity. This property will only be
     provided for a system assigned identity.
    :vartype tenant_id: str
    :ivar type: Type of managed service identity (where both SystemAssigned and UserAssigned types
     are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
     "SystemAssigned, UserAssigned".
    :vartype type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentityType
    :ivar user_assigned_identities: The set of user assigned identities associated with the
     resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
     The dictionary values can be empty objects ({}) in requests.
    :vartype user_assigned_identities: dict[str,
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UserAssignedIdentity]
    """

    _validation = {
        "principal_id": {"readonly": True},
        "tenant_id": {"readonly": True},
        "type": {"required": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "tenant_id": {"key": "tenantId", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "user_assigned_identities": {"key": "userAssignedIdentities", "type": "{UserAssignedIdentity}"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.ManagedServiceIdentityType"],
        user_assigned_identities: Optional[Dict[str, "_models.UserAssignedIdentity"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: Type of managed service identity (where both SystemAssigned and UserAssigned
         types are allowed). Required. Known values are: "None", "SystemAssigned", "UserAssigned", and
         "SystemAssigned, UserAssigned".
        :paramtype type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedServiceIdentityType
        :keyword user_assigned_identities: The set of user assigned identities associated with the
         resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form:
         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
         The dictionary values can be empty objects ({}) in requests.
        :paramtype user_assigned_identities: dict[str,
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UserAssignedIdentity]
        """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.tenant_id: Optional[str] = None
        self.type = type
        self.user_assigned_identities = user_assigned_identities


class MemberUpdateStatus(_serialization.Model):
    """The status of a member update operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the MemberUpdate operation.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    :ivar name: The name of the FleetMember.
    :vartype name: str
    :ivar cluster_resource_id: The Azure resource id of the target Kubernetes cluster.
    :vartype cluster_resource_id: str
    :ivar operation_id: The operation resource id of the latest attempt to perform the operation.
    :vartype operation_id: str
    :ivar message: The status message after processing the member update operation.
    :vartype message: str
    """

    _validation = {
        "status": {"readonly": True},
        "name": {"readonly": True},
        "cluster_resource_id": {"readonly": True},
        "operation_id": {"readonly": True},
        "message": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "UpdateStatus"},
        "name": {"key": "name", "type": "str"},
        "cluster_resource_id": {"key": "clusterResourceId", "type": "str"},
        "operation_id": {"key": "operationId", "type": "str"},
        "message": {"key": "message", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status: Optional["_models.UpdateStatus"] = None
        self.name: Optional[str] = None
        self.cluster_resource_id: Optional[str] = None
        self.operation_id: Optional[str] = None
        self.message: Optional[str] = None


class MetaV1LabelSelector(_serialization.Model):
    """A label selector is a label query over a set of resources. The result of matchLabels and
    matchExpressions are ANDed. An empty label selector matches all objects. A null label selector
    matches no objects.

    :ivar match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the
     matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the
     operator is "In", and the values array contains only "value". The requirements are ANDed.
    :vartype match_labels: dict[str, str]
    :ivar match_expressions: matchExpressions is a list of label selector requirements. The
     requirements are ANDed.
    :vartype match_expressions:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.MetaV1LabelSelectorRequirement]
    """

    _attribute_map = {
        "match_labels": {"key": "matchLabels", "type": "{str}"},
        "match_expressions": {"key": "matchExpressions", "type": "[MetaV1LabelSelectorRequirement]"},
    }

    def __init__(
        self,
        *,
        match_labels: Optional[Dict[str, str]] = None,
        match_expressions: Optional[List["_models.MetaV1LabelSelectorRequirement"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the
         matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the
         operator is "In", and the values array contains only "value". The requirements are ANDed.
        :paramtype match_labels: dict[str, str]
        :keyword match_expressions: matchExpressions is a list of label selector requirements. The
         requirements are ANDed.
        :paramtype match_expressions:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.MetaV1LabelSelectorRequirement]
        """
        super().__init__(**kwargs)
        self.match_labels = match_labels
        self.match_expressions = match_expressions


class MetaV1LabelSelectorRequirement(_serialization.Model):
    """A label selector requirement is a selector that contains values, a key, and an operator that
    relates the key and values.

    All required parameters must be populated in order to send to server.

    :ivar key: key is the label key that the selector applies to. Required.
    :vartype key: str
    :ivar operator: operator represents a key's relationship to a set of values. Valid operators
     are In, NotIn, Exists and DoesNotExist. Required. Known values are: "In", "NotIn", "Exists",
     "DoesNotExist", and "In".
    :vartype operator: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.LabelSelectorOperator
    :ivar values: values is an array of string values. If the operator is In or NotIn, the values
     array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be
     empty. This array is replaced during a strategic merge patch.
    :vartype values: list[str]
    """

    _validation = {
        "key": {"required": True},
        "operator": {"required": True},
    }

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self,
        *,
        key: str,
        operator: Union[str, "_models.LabelSelectorOperator"],
        values: Optional[List[str]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword key: key is the label key that the selector applies to. Required.
        :paramtype key: str
        :keyword operator: operator represents a key's relationship to a set of values. Valid operators
         are In, NotIn, Exists and DoesNotExist. Required. Known values are: "In", "NotIn", "Exists",
         "DoesNotExist", and "In".
        :paramtype operator: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.LabelSelectorOperator
        :keyword values: values is an array of string values. If the operator is In or NotIn, the
         values array must be non-empty. If the operator is Exists or DoesNotExist, the values array
         must be empty. This array is replaced during a strategic merge patch.
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.values = values


class NetworkPolicy(_serialization.Model):
    """The network policy for the managed namespace.

    :ivar ingress: The ingress policy for the managed namespace. Known values are: "AllowAll",
     "DenyAll", and "AllowSameNamespace".
    :vartype ingress: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PolicyRule
    :ivar egress: The egress policy for the managed namespace. Known values are: "AllowAll",
     "DenyAll", and "AllowSameNamespace".
    :vartype egress: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PolicyRule
    """

    _attribute_map = {
        "ingress": {"key": "ingress", "type": "str"},
        "egress": {"key": "egress", "type": "str"},
    }

    def __init__(
        self,
        *,
        ingress: Optional[Union[str, "_models.PolicyRule"]] = None,
        egress: Optional[Union[str, "_models.PolicyRule"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword ingress: The ingress policy for the managed namespace. Known values are: "AllowAll",
         "DenyAll", and "AllowSameNamespace".
        :paramtype ingress: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PolicyRule
        :keyword egress: The egress policy for the managed namespace. Known values are: "AllowAll",
         "DenyAll", and "AllowSameNamespace".
        :paramtype egress: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PolicyRule
        """
        super().__init__(**kwargs)
        self.ingress = ingress
        self.egress = egress


class NodeImageSelection(_serialization.Model):
    """The node image upgrade to be applied to the target nodes in update run.

    All required parameters must be populated in order to send to server.

    :ivar type: The node image upgrade type. Required. Known values are: "Latest", "Consistent",
     and "Custom".
    :vartype type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageSelectionType
    :ivar custom_node_image_versions: Custom node image versions to upgrade the nodes to. This
     field is required if node image selection type is Custom. Otherwise, it must be empty. For each
     node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one
     version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or
     'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a
     matching image version in this field, they are not upgraded.
    :vartype custom_node_image_versions:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageVersion]
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "custom_node_image_versions": {"key": "customNodeImageVersions", "type": "[NodeImageVersion]"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.NodeImageSelectionType"],
        custom_node_image_versions: Optional[List["_models.NodeImageVersion"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The node image upgrade type. Required. Known values are: "Latest", "Consistent",
         and "Custom".
        :paramtype type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageSelectionType
        :keyword custom_node_image_versions: Custom node image versions to upgrade the nodes to. This
         field is required if node image selection type is Custom. Otherwise, it must be empty. For each
         node image family (e.g., 'AKSUbuntu-1804gen2containerd'), this field can contain at most one
         version (e.g., only one of 'AKSUbuntu-1804gen2containerd-2023.01.12' or
         'AKSUbuntu-1804gen2containerd-2023.02.12', not both). If the nodes belong to a family without a
         matching image version in this field, they are not upgraded.
        :paramtype custom_node_image_versions:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageVersion]
        """
        super().__init__(**kwargs)
        self.type = type
        self.custom_node_image_versions = custom_node_image_versions


class NodeImageSelectionStatus(_serialization.Model):
    """The node image upgrade specs for the update run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar selected_node_image_versions: The image versions to upgrade the nodes to.
    :vartype selected_node_image_versions:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageVersion]
    """

    _validation = {
        "selected_node_image_versions": {"readonly": True},
    }

    _attribute_map = {
        "selected_node_image_versions": {"key": "selectedNodeImageVersions", "type": "[NodeImageVersion]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.selected_node_image_versions: Optional[List["_models.NodeImageVersion"]] = None


class NodeImageVersion(_serialization.Model):
    """The node upgrade image version.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar version: The image version to upgrade the nodes to (e.g.,
     'AKSUbuntu-1804gen2containerd-2022.12.13').
    :vartype version: str
    """

    _validation = {
        "version": {"readonly": True},
    }

    _attribute_map = {
        "version": {"key": "version", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.version: Optional[str] = None


class Operation(_serialization.Model):
    """Details of a REST API operation, returned from the Resource Provider Operations API.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar name: The name of the operation, as per Resource-Based Access Control (RBAC). Examples:
     "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action".
    :vartype name: str
    :ivar is_data_action: Whether the operation applies to data-plane. This is "true" for
     data-plane operations and "false" for ARM/control-plane operations.
    :vartype is_data_action: bool
    :ivar display: Localized display information for this particular operation.
    :vartype display: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.OperationDisplay
    :ivar origin: The intended executor of the operation; as in Resource Based Access Control
     (RBAC) and audit logs UX. Default value is "user,system". Known values are: "user", "system",
     and "user,system".
    :vartype origin: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Origin
    :ivar action_type: Enum. Indicates the action type. "Internal" refers to actions that are for
     internal only APIs. "Internal"
    :vartype action_type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ActionType
    """

    _validation = {
        "name": {"readonly": True},
        "is_data_action": {"readonly": True},
        "origin": {"readonly": True},
        "action_type": {"readonly": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "is_data_action": {"key": "isDataAction", "type": "bool"},
        "display": {"key": "display", "type": "OperationDisplay"},
        "origin": {"key": "origin", "type": "str"},
        "action_type": {"key": "actionType", "type": "str"},
    }

    def __init__(self, *, display: Optional["_models.OperationDisplay"] = None, **kwargs: Any) -> None:
        """
        :keyword display: Localized display information for this particular operation.
        :paramtype display:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.OperationDisplay
        """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.is_data_action: Optional[bool] = None
        self.display = display
        self.origin: Optional[Union[str, "_models.Origin"]] = None
        self.action_type: Optional[Union[str, "_models.ActionType"]] = None


class OperationDisplay(_serialization.Model):
    """Localized display information for this particular operation.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar provider: The localized friendly form of the resource provider name, e.g. "Microsoft
     Monitoring Insights" or "Microsoft Compute".
    :vartype provider: str
    :ivar resource: The localized friendly name of the resource type related to this operation.
     E.g. "Virtual Machines" or "Job Schedule Collections".
    :vartype resource: str
    :ivar operation: The concise, localized friendly name for the operation; suitable for
     dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
    :vartype operation: str
    :ivar description: The short, localized friendly description of the operation; suitable for
     tool tips and detailed views.
    :vartype description: str
    """

    _validation = {
        "provider": {"readonly": True},
        "resource": {"readonly": True},
        "operation": {"readonly": True},
        "description": {"readonly": True},
    }

    _attribute_map = {
        "provider": {"key": "provider", "type": "str"},
        "resource": {"key": "resource", "type": "str"},
        "operation": {"key": "operation", "type": "str"},
        "description": {"key": "description", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.provider: Optional[str] = None
        self.resource: Optional[str] = None
        self.operation: Optional[str] = None
        self.description: Optional[str] = None


class OperationListResult(_serialization.Model):
    """A list of REST API operations supported by an Azure Resource Provider. It contains an URL link
    to get the next set of results.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar value: List of operations supported by the resource provider.
    :vartype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Operation]
    :ivar next_link: URL to get the next set of operation list results (if there are any).
    :vartype next_link: str
    """

    _validation = {
        "value": {"readonly": True},
        "next_link": {"readonly": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[Operation]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.value: Optional[List["_models.Operation"]] = None
        self.next_link: Optional[str] = None


class PlacementProfile(_serialization.Model):
    """The configuration profile for default ClusterResourcePlacement for placement.

    :ivar default_cluster_resource_placement: The default ClusterResourcePlacement policy
     configuration.
    :vartype default_cluster_resource_placement:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterResourcePlacementSpec
    """

    _attribute_map = {
        "default_cluster_resource_placement": {
            "key": "defaultClusterResourcePlacement",
            "type": "PlacementV1ClusterResourcePlacementSpec",
        },
    }

    def __init__(
        self,
        *,
        default_cluster_resource_placement: Optional["_models.PlacementV1ClusterResourcePlacementSpec"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword default_cluster_resource_placement: The default ClusterResourcePlacement policy
         configuration.
        :paramtype default_cluster_resource_placement:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterResourcePlacementSpec
        """
        super().__init__(**kwargs)
        self.default_cluster_resource_placement = default_cluster_resource_placement


class PlacementV1Affinity(_serialization.Model):
    """Affinity is a group of cluster affinity scheduling rules. More to be added.

    :ivar cluster_affinity: ClusterAffinity contains cluster affinity scheduling rules for the
     selected resources.
    :vartype cluster_affinity:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterAffinity
    """

    _attribute_map = {
        "cluster_affinity": {"key": "clusterAffinity", "type": "PlacementV1ClusterAffinity"},
    }

    def __init__(
        self, *, cluster_affinity: Optional["_models.PlacementV1ClusterAffinity"] = None, **kwargs: Any
    ) -> None:
        """
        :keyword cluster_affinity: ClusterAffinity contains cluster affinity scheduling rules for the
         selected resources.
        :paramtype cluster_affinity:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterAffinity
        """
        super().__init__(**kwargs)
        self.cluster_affinity = cluster_affinity


class PlacementV1ClusterAffinity(_serialization.Model):
    """ClusterAffinity contains cluster affinity scheduling rules for the selected resources.

    :ivar required_during_scheduling_ignored_during_execution: If the affinity requirements
     specified by this field are not met at scheduling time, the resource will not be scheduled onto
     the cluster. If the affinity requirements specified by this field cease to be met at some point
     after the placement (e.g. due to an update), the system may or may not try to eventually remove
     the resource from the cluster.
    :vartype required_during_scheduling_ignored_during_execution:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterSelector
    """

    _attribute_map = {
        "required_during_scheduling_ignored_during_execution": {
            "key": "requiredDuringSchedulingIgnoredDuringExecution",
            "type": "PlacementV1ClusterSelector",
        },
    }

    def __init__(
        self,
        *,
        required_during_scheduling_ignored_during_execution: Optional["_models.PlacementV1ClusterSelector"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword required_during_scheduling_ignored_during_execution: If the affinity requirements
         specified by this field are not met at scheduling time, the resource will not be scheduled onto
         the cluster. If the affinity requirements specified by this field cease to be met at some point
         after the placement (e.g. due to an update), the system may or may not try to eventually remove
         the resource from the cluster.
        :paramtype required_during_scheduling_ignored_during_execution:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterSelector
        """
        super().__init__(**kwargs)
        self.required_during_scheduling_ignored_during_execution = required_during_scheduling_ignored_during_execution


class PlacementV1ClusterResourcePlacementSpec(_serialization.Model):
    """ClusterResourcePlacementSpec defines the desired state of ClusterResourcePlacement.

    :ivar policy: Policy defines how to select member clusters to place the selected resources. If
     unspecified, all the joined member clusters are selected.
    :vartype policy:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PlacementPolicy
    """

    _attribute_map = {
        "policy": {"key": "policy", "type": "PlacementV1PlacementPolicy"},
    }

    def __init__(self, *, policy: Optional["_models.PlacementV1PlacementPolicy"] = None, **kwargs: Any) -> None:
        """
        :keyword policy: Policy defines how to select member clusters to place the selected resources.
         If unspecified, all the joined member clusters are selected.
        :paramtype policy:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PlacementPolicy
        """
        super().__init__(**kwargs)
        self.policy = policy


class PlacementV1ClusterSelector(_serialization.Model):
    """ClusterSelector.

    All required parameters must be populated in order to send to server.

    :ivar cluster_selector_terms: ClusterSelectorTerms is a list of cluster selector terms. The
     terms are ``ORed``. Required.
    :vartype cluster_selector_terms:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterSelectorTerm]
    """

    _validation = {
        "cluster_selector_terms": {"required": True},
    }

    _attribute_map = {
        "cluster_selector_terms": {"key": "clusterSelectorTerms", "type": "[PlacementV1ClusterSelectorTerm]"},
    }

    def __init__(
        self, *, cluster_selector_terms: List["_models.PlacementV1ClusterSelectorTerm"], **kwargs: Any
    ) -> None:
        """
        :keyword cluster_selector_terms: ClusterSelectorTerms is a list of cluster selector terms. The
         terms are ``ORed``. Required.
        :paramtype cluster_selector_terms:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1ClusterSelectorTerm]
        """
        super().__init__(**kwargs)
        self.cluster_selector_terms = cluster_selector_terms


class PlacementV1ClusterSelectorTerm(_serialization.Model):
    """ClusterSelectorTerm.

    :ivar label_selector: LabelSelector is a label query over all the joined member clusters.
     Clusters matching the query are selected. If you specify both label and property selectors in
     the same term, the results are AND'd.
    :vartype label_selector:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.MetaV1LabelSelector
    :ivar property_selector: PropertySelector is a property query over all joined member clusters.
     Clusters matching the query are selected. If you specify both label and property selectors in
     the same term, the results are AND'd. At this moment, PropertySelector can only be used with
     ``RequiredDuringSchedulingIgnoredDuringExecution`` affinity terms. This field is beta-level; it
     is for the property-based scheduling feature and is only functional when a property provider is
     enabled in the deployment.
    :vartype property_selector:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PropertySelector
    """

    _attribute_map = {
        "label_selector": {"key": "labelSelector", "type": "MetaV1LabelSelector"},
        "property_selector": {"key": "propertySelector", "type": "PlacementV1PropertySelector"},
    }

    def __init__(
        self,
        *,
        label_selector: Optional["_models.MetaV1LabelSelector"] = None,
        property_selector: Optional["_models.PlacementV1PropertySelector"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword label_selector: LabelSelector is a label query over all the joined member clusters.
         Clusters matching the query are selected. If you specify both label and property selectors in
         the same term, the results are AND'd.
        :paramtype label_selector:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.MetaV1LabelSelector
        :keyword property_selector: PropertySelector is a property query over all joined member
         clusters. Clusters matching the query are selected. If you specify both label and property
         selectors in the same term, the results are AND'd. At this moment, PropertySelector can only be
         used with ``RequiredDuringSchedulingIgnoredDuringExecution`` affinity terms. This field is
         beta-level; it is for the property-based scheduling feature and is only functional when a
         property provider is enabled in the deployment.
        :paramtype property_selector:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PropertySelector
        """
        super().__init__(**kwargs)
        self.label_selector = label_selector
        self.property_selector = property_selector


class PlacementV1PlacementPolicy(_serialization.Model):
    """PlacementPolicy contains the rules to select target member clusters to place the selected
    resources. Note that only clusters that are both joined and satisfying the rules will be
    selected. You can only specify at most one of the two fields: ClusterNames and Affinity. If
    none is specified, all the joined clusters are selected.

    :ivar placement_type: Type of placement. Can be "PickAll", "PickN" or "PickFixed". Default is
     PickAll. Known values are: "PickAll" and "PickFixed".
    :vartype placement_type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementType
    :ivar cluster_names: ClusterNames contains a list of names of MemberCluster to place the
     selected resources. Only valid if the placement type is "PickFixed".
    :vartype cluster_names: list[str]
    :ivar affinity: Affinity contains cluster affinity scheduling rules. Defines which member
     clusters to place the selected resources. Only valid if the placement type is "PickAll" or
     "PickN".
    :vartype affinity:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1Affinity
    :ivar tolerations: If specified, the ClusterResourcePlacement's Tolerations. Tolerations cannot
     be updated or deleted. This field is beta-level and is for the taints and tolerations feature.
    :vartype tolerations:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1Toleration]
    """

    _attribute_map = {
        "placement_type": {"key": "placementType", "type": "str"},
        "cluster_names": {"key": "clusterNames", "type": "[str]"},
        "affinity": {"key": "affinity", "type": "PlacementV1Affinity"},
        "tolerations": {"key": "tolerations", "type": "[PlacementV1Toleration]"},
    }

    def __init__(
        self,
        *,
        placement_type: Optional[Union[str, "_models.PlacementType"]] = None,
        cluster_names: Optional[List[str]] = None,
        affinity: Optional["_models.PlacementV1Affinity"] = None,
        tolerations: Optional[List["_models.PlacementV1Toleration"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword placement_type: Type of placement. Can be "PickAll", "PickN" or "PickFixed". Default
         is PickAll. Known values are: "PickAll" and "PickFixed".
        :paramtype placement_type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementType
        :keyword cluster_names: ClusterNames contains a list of names of MemberCluster to place the
         selected resources. Only valid if the placement type is "PickFixed".
        :paramtype cluster_names: list[str]
        :keyword affinity: Affinity contains cluster affinity scheduling rules. Defines which member
         clusters to place the selected resources. Only valid if the placement type is "PickAll" or
         "PickN".
        :paramtype affinity:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1Affinity
        :keyword tolerations: If specified, the ClusterResourcePlacement's Tolerations. Tolerations
         cannot be updated or deleted. This field is beta-level and is for the taints and tolerations
         feature.
        :paramtype tolerations:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1Toleration]
        """
        super().__init__(**kwargs)
        self.placement_type = placement_type
        self.cluster_names = cluster_names
        self.affinity = affinity
        self.tolerations = tolerations


class PlacementV1PropertySelector(_serialization.Model):
    """PropertySelector helps user specify property requirements when picking clusters for resource
    placement.

    All required parameters must be populated in order to send to server.

    :ivar match_expressions: MatchExpressions is an array of PropertySelectorRequirements. The
     requirements are AND'd. Required.
    :vartype match_expressions:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PropertySelectorRequirement]
    """

    _validation = {
        "match_expressions": {"required": True},
    }

    _attribute_map = {
        "match_expressions": {"key": "matchExpressions", "type": "[PlacementV1PropertySelectorRequirement]"},
    }

    def __init__(
        self, *, match_expressions: List["_models.PlacementV1PropertySelectorRequirement"], **kwargs: Any
    ) -> None:
        """
        :keyword match_expressions: MatchExpressions is an array of PropertySelectorRequirements. The
         requirements are AND'd. Required.
        :paramtype match_expressions:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementV1PropertySelectorRequirement]
        """
        super().__init__(**kwargs)
        self.match_expressions = match_expressions


class PlacementV1PropertySelectorRequirement(_serialization.Model):
    """PropertySelectorRequirement is a specific property requirement when picking clusters for
    resource placement.

    All required parameters must be populated in order to send to server.

    :ivar name: Name is the name of the property; it should be a Kubernetes label name. Required.
    :vartype name: str
    :ivar operator: Operator specifies the relationship between a cluster's observed value of the
     specified property and the values given in the requirement. Required. Known values are: "Gt",
     "Ge", "Eq", "Ne", "Lt", and "Le".
    :vartype operator: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropertySelectorOperator
    :ivar values: Values are a list of values of the specified property which Fleet will compare
     against the observed values of individual member clusters in accordance with the given
     operator. At this moment, each value should be a Kubernetes quantity. For more information, see
     https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity. If the operator is Gt
     (greater than), Ge (greater than or equal to), Lt (less than), or ``Le`` (less than or equal
     to), Eq (equal to), or Ne (ne), exactly one value must be specified in the list. Required.
    :vartype values: list[str]
    """

    _validation = {
        "name": {"required": True},
        "operator": {"required": True},
        "values": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "values": {"key": "values", "type": "[str]"},
    }

    def __init__(
        self, *, name: str, operator: Union[str, "_models.PropertySelectorOperator"], values: List[str], **kwargs: Any
    ) -> None:
        """
        :keyword name: Name is the name of the property; it should be a Kubernetes label name.
         Required.
        :paramtype name: str
        :keyword operator: Operator specifies the relationship between a cluster's observed value of
         the specified property and the values given in the requirement. Required. Known values are:
         "Gt", "Ge", "Eq", "Ne", "Lt", and "Le".
        :paramtype operator: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropertySelectorOperator
        :keyword values: Values are a list of values of the specified property which Fleet will compare
         against the observed values of individual member clusters in accordance with the given
         operator. At this moment, each value should be a Kubernetes quantity. For more information, see
         https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity. If the operator is Gt
         (greater than), Ge (greater than or equal to), Lt (less than), or ``Le`` (less than or equal
         to), Eq (equal to), or Ne (ne), exactly one value must be specified in the list. Required.
        :paramtype values: list[str]
        """
        super().__init__(**kwargs)
        self.name = name
        self.operator = operator
        self.values = values


class PlacementV1Toleration(_serialization.Model):
    """Toleration allows ClusterResourcePlacement to tolerate any taint that matches the triple
    <key,value,effect> using the matching operator :code:`<operator>`.

    :ivar key: Key is the taint key that the toleration applies to. Empty means match all taint
     keys. If the key is empty, operator must be Exists; this combination means to match all values
     and all keys.
    :vartype key: str
    :ivar operator: Operator represents a key's relationship to the value. Valid operators are
     Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a
     ClusterResourcePlacement can tolerate all taints of a particular category. Known values are:
     "Exists" and "Equal".
    :vartype operator: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TolerationOperator
    :ivar value: Value is the taint value the toleration matches to. If the operator is Exists, the
     value should be empty, otherwise just a regular string.
    :vartype value: str
    :ivar effect: Effect indicates the taint effect to match. Empty means match all taint effects.
     When specified, only allowed value is NoSchedule. "NoSchedule"
    :vartype effect: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TaintEffect
    """

    _attribute_map = {
        "key": {"key": "key", "type": "str"},
        "operator": {"key": "operator", "type": "str"},
        "value": {"key": "value", "type": "str"},
        "effect": {"key": "effect", "type": "str"},
    }

    def __init__(
        self,
        *,
        key: Optional[str] = None,
        operator: Optional[Union[str, "_models.TolerationOperator"]] = None,
        value: Optional[str] = None,
        effect: Optional[Union[str, "_models.TaintEffect"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword key: Key is the taint key that the toleration applies to. Empty means match all taint
         keys. If the key is empty, operator must be Exists; this combination means to match all values
         and all keys.
        :paramtype key: str
        :keyword operator: Operator represents a key's relationship to the value. Valid operators are
         Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a
         ClusterResourcePlacement can tolerate all taints of a particular category. Known values are:
         "Exists" and "Equal".
        :paramtype operator: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TolerationOperator
        :keyword value: Value is the taint value the toleration matches to. If the operator is Exists,
         the value should be empty, otherwise just a regular string.
        :paramtype value: str
        :keyword effect: Effect indicates the taint effect to match. Empty means match all taint
         effects. When specified, only allowed value is NoSchedule. "NoSchedule"
        :paramtype effect: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TaintEffect
        """
        super().__init__(**kwargs)
        self.key = key
        self.operator = operator
        self.value = value
        self.effect = effect


class PropagationPolicy(_serialization.Model):
    """The propagation to be used for provisioning the namespace among the fleet.

    All required parameters must be populated in order to send to server.

    :ivar type: The type of the policy to be used. Default is Placement. Required. "Placement"
    :vartype type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropagationType
    :ivar placement_profile: The profile to be used for propagation via placement.
    :vartype placement_profile:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementProfile
    """

    _validation = {
        "type": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "placement_profile": {"key": "placementProfile", "type": "PlacementProfile"},
    }

    def __init__(
        self,
        *,
        type: Union[str, "_models.PropagationType"],
        placement_profile: Optional["_models.PlacementProfile"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword type: The type of the policy to be used. Default is Placement. Required. "Placement"
        :paramtype type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PropagationType
        :keyword placement_profile: The profile to be used for propagation via placement.
        :paramtype placement_profile:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.PlacementProfile
        """
        super().__init__(**kwargs)
        self.type = type
        self.placement_profile = placement_profile


class ResourceQuota(_serialization.Model):
    """The resource quota for the managed namespace.

    :ivar cpu_request: The CPU request for the managed namespace. See more at
     https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
    :vartype cpu_request: str
    :ivar cpu_limit: The CPU limit for the managed namespace. See more at
     https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
    :vartype cpu_limit: str
    :ivar memory_request: The memory request for the managed namespace. See more at
     https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
    :vartype memory_request: str
    :ivar memory_limit: The memory limit for the managed namespace. See more at
     https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
    :vartype memory_limit: str
    """

    _attribute_map = {
        "cpu_request": {"key": "cpuRequest", "type": "str"},
        "cpu_limit": {"key": "cpuLimit", "type": "str"},
        "memory_request": {"key": "memoryRequest", "type": "str"},
        "memory_limit": {"key": "memoryLimit", "type": "str"},
    }

    def __init__(
        self,
        *,
        cpu_request: Optional[str] = None,
        cpu_limit: Optional[str] = None,
        memory_request: Optional[str] = None,
        memory_limit: Optional[str] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword cpu_request: The CPU request for the managed namespace. See more at
         https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
        :paramtype cpu_request: str
        :keyword cpu_limit: The CPU limit for the managed namespace. See more at
         https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu.
        :paramtype cpu_limit: str
        :keyword memory_request: The memory request for the managed namespace. See more at
         https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
        :paramtype memory_request: str
        :keyword memory_limit: The memory limit for the managed namespace. See more at
         https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory.
        :paramtype memory_limit: str
        """
        super().__init__(**kwargs)
        self.cpu_request = cpu_request
        self.cpu_limit = cpu_limit
        self.memory_request = memory_request
        self.memory_limit = memory_limit


class SkipProperties(_serialization.Model):
    """The properties of a skip operation containing multiple skip requests.

    All required parameters must be populated in order to send to server.

    :ivar targets: The targets to skip. Required.
    :vartype targets: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SkipTarget]
    """

    _validation = {
        "targets": {"required": True},
    }

    _attribute_map = {
        "targets": {"key": "targets", "type": "[SkipTarget]"},
    }

    def __init__(self, *, targets: List["_models.SkipTarget"], **kwargs: Any) -> None:
        """
        :keyword targets: The targets to skip. Required.
        :paramtype targets:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SkipTarget]
        """
        super().__init__(**kwargs)
        self.targets = targets


class SkipTarget(_serialization.Model):
    """The definition of a single skip request.

    All required parameters must be populated in order to send to server.

    :ivar type: The skip target type. Required. Known values are: "Member", "Group", "Stage", and
     "AfterStageWait".
    :vartype type: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TargetType
    :ivar name: The skip target's name.
     To skip a member/group/stage, use the member/group/stage's name;
     Tp skip an after stage wait, use the parent stage's name. Required.
    :vartype name: str
    """

    _validation = {
        "type": {"required": True},
        "name": {"required": True},
    }

    _attribute_map = {
        "type": {"key": "type", "type": "str"},
        "name": {"key": "name", "type": "str"},
    }

    def __init__(self, *, type: Union[str, "_models.TargetType"], name: str, **kwargs: Any) -> None:
        """
        :keyword type: The skip target type. Required. Known values are: "Member", "Group", "Stage",
         and "AfterStageWait".
        :paramtype type: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.TargetType
        :keyword name: The skip target's name.
         To skip a member/group/stage, use the member/group/stage's name;
         Tp skip an after stage wait, use the parent stage's name. Required.
        :paramtype name: str
        """
        super().__init__(**kwargs)
        self.type = type
        self.name = name


class SystemData(_serialization.Model):
    """Metadata pertaining to creation and last modification of the resource.

    :ivar created_by: The identity that created the resource.
    :vartype created_by: str
    :ivar created_by_type: The type of identity that created the resource. Known values are:
     "User", "Application", "ManagedIdentity", and "Key".
    :vartype created_by_type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.CreatedByType
    :ivar created_at: The timestamp of resource creation (UTC).
    :vartype created_at: ~datetime.datetime
    :ivar last_modified_by: The identity that last modified the resource.
    :vartype last_modified_by: str
    :ivar last_modified_by_type: The type of identity that last modified the resource. Known values
     are: "User", "Application", "ManagedIdentity", and "Key".
    :vartype last_modified_by_type: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.CreatedByType
    :ivar last_modified_at: The timestamp of resource last modification (UTC).
    :vartype last_modified_at: ~datetime.datetime
    """

    _attribute_map = {
        "created_by": {"key": "createdBy", "type": "str"},
        "created_by_type": {"key": "createdByType", "type": "str"},
        "created_at": {"key": "createdAt", "type": "iso-8601"},
        "last_modified_by": {"key": "lastModifiedBy", "type": "str"},
        "last_modified_by_type": {"key": "lastModifiedByType", "type": "str"},
        "last_modified_at": {"key": "lastModifiedAt", "type": "iso-8601"},
    }

    def __init__(
        self,
        *,
        created_by: Optional[str] = None,
        created_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        created_at: Optional[datetime.datetime] = None,
        last_modified_by: Optional[str] = None,
        last_modified_by_type: Optional[Union[str, "_models.CreatedByType"]] = None,
        last_modified_at: Optional[datetime.datetime] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword created_by: The identity that created the resource.
        :paramtype created_by: str
        :keyword created_by_type: The type of identity that created the resource. Known values are:
         "User", "Application", "ManagedIdentity", and "Key".
        :paramtype created_by_type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.CreatedByType
        :keyword created_at: The timestamp of resource creation (UTC).
        :paramtype created_at: ~datetime.datetime
        :keyword last_modified_by: The identity that last modified the resource.
        :paramtype last_modified_by: str
        :keyword last_modified_by_type: The type of identity that last modified the resource. Known
         values are: "User", "Application", "ManagedIdentity", and "Key".
        :paramtype last_modified_by_type: str or
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.CreatedByType
        :keyword last_modified_at: The timestamp of resource last modification (UTC).
        :paramtype last_modified_at: ~datetime.datetime
        """
        super().__init__(**kwargs)
        self.created_by = created_by
        self.created_by_type = created_by_type
        self.created_at = created_at
        self.last_modified_by = last_modified_by
        self.last_modified_by_type = last_modified_by_type
        self.last_modified_at = last_modified_at


class UpdateGroup(_serialization.Model):
    """A group to be updated.

    All required parameters must be populated in order to send to server.

    :ivar name: Name of the group.
     It must match a group name of an existing fleet member. Required.
    :vartype name: str
    :ivar before_gates: A list of Gates that will be created before this Group is executed.
    :vartype before_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
    :ivar after_gates: A list of Gates that will be created after this Group is executed.
    :vartype after_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
    """

    _validation = {
        "name": {"required": True, "max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "before_gates": {"key": "beforeGates", "type": "[GateConfiguration]"},
        "after_gates": {"key": "afterGates", "type": "[GateConfiguration]"},
    }

    def __init__(
        self,
        *,
        name: str,
        before_gates: Optional[List["_models.GateConfiguration"]] = None,
        after_gates: Optional[List["_models.GateConfiguration"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: Name of the group.
         It must match a group name of an existing fleet member. Required.
        :paramtype name: str
        :keyword before_gates: A list of Gates that will be created before this Group is executed.
        :paramtype before_gates:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
        :keyword after_gates: A list of Gates that will be created after this Group is executed.
        :paramtype after_gates:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
        """
        super().__init__(**kwargs)
        self.name = name
        self.before_gates = before_gates
        self.after_gates = after_gates


class UpdateGroupStatus(_serialization.Model):
    """The status of a UpdateGroup.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the UpdateGroup.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    :ivar name: The name of the UpdateGroup.
    :vartype name: str
    :ivar members: The list of member this UpdateGroup updates.
    :vartype members:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.MemberUpdateStatus]
    :ivar before_gates: The list of Gates that will run before this UpdateGroup.
    :vartype before_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateStatus]
    :ivar after_gates: The list of Gates that will run after this UpdateGroup.
    :vartype after_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateStatus]
    """

    _validation = {
        "status": {"readonly": True},
        "name": {"readonly": True},
        "members": {"readonly": True},
        "before_gates": {"readonly": True},
        "after_gates": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "UpdateStatus"},
        "name": {"key": "name", "type": "str"},
        "members": {"key": "members", "type": "[MemberUpdateStatus]"},
        "before_gates": {"key": "beforeGates", "type": "[UpdateRunGateStatus]"},
        "after_gates": {"key": "afterGates", "type": "[UpdateRunGateStatus]"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status: Optional["_models.UpdateStatus"] = None
        self.name: Optional[str] = None
        self.members: Optional[List["_models.MemberUpdateStatus"]] = None
        self.before_gates: Optional[List["_models.UpdateRunGateStatus"]] = None
        self.after_gates: Optional[List["_models.UpdateRunGateStatus"]] = None


class UpdateRun(ProxyResource):
    """A multi-stage process to perform update operations across members of a Fleet.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar id: Fully qualified resource ID for the resource. E.g.
     "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}".
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or
     "Microsoft.Storage/storageAccounts".
    :vartype type: str
    :ivar system_data: Azure Resource Manager metadata containing createdBy and modifiedBy
     information.
    :vartype system_data: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.SystemData
    :ivar e_tag: If eTag is provided in the response body, it may also be provided as a header per
     the normal etag convention.  Entity tags are used for comparing two or more entities from the
     same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match
     (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields.
    :vartype e_tag: str
    :ivar provisioning_state: The provisioning state of the UpdateRun resource. Known values are:
     "Succeeded", "Failed", and "Canceled".
    :vartype provisioning_state: str or
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunProvisioningState
    :ivar update_strategy_id: The resource id of the FleetUpdateStrategy resource to reference.

     When creating a new run, there are three ways to define a strategy for the run:


     #. Define a new strategy in place: Set the "strategy" field.
     #. Use an existing strategy: Set the "updateStrategyId" field. (since 2023-08-15-preview)
     #. Use the default strategy to update all the members one by one: Leave both "updateStrategyId"
     and "strategy" unset. (since 2023-08-15-preview)

     Setting both "updateStrategyId" and "strategy" is invalid.

     UpdateRuns created by "updateStrategyId" snapshot the referenced UpdateStrategy at the time of
     creation and store it in the "strategy" field.
     Subsequent changes to the referenced FleetUpdateStrategy resource do not propagate.
     UpdateRunStrategy changes can be made directly on the "strategy" field before launching the
     UpdateRun.
    :vartype update_strategy_id: str
    :ivar strategy: The strategy defines the order in which the clusters will be updated.
     If not set, all members will be updated sequentially. The UpdateRun status will show a single
     UpdateStage and a single UpdateGroup targeting all members.
     The strategy of the UpdateRun can be modified until the run is started.
    :vartype strategy:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunStrategy
    :ivar managed_cluster_update: The update to be applied to all clusters in the UpdateRun. The
     managedClusterUpdate can be modified until the run is started.
    :vartype managed_cluster_update:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpdate
    :ivar status: The status of the UpdateRun.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunStatus
    :ivar auto_upgrade_profile_id: AutoUpgradeProfileId is the id of an auto upgrade profile
     resource.
    :vartype auto_upgrade_profile_id: str
    """

    _validation = {
        "id": {"readonly": True},
        "name": {"readonly": True},
        "type": {"readonly": True},
        "system_data": {"readonly": True},
        "e_tag": {"readonly": True},
        "provisioning_state": {"readonly": True},
        "status": {"readonly": True},
        "auto_upgrade_profile_id": {"readonly": True},
    }

    _attribute_map = {
        "id": {"key": "id", "type": "str"},
        "name": {"key": "name", "type": "str"},
        "type": {"key": "type", "type": "str"},
        "system_data": {"key": "systemData", "type": "SystemData"},
        "e_tag": {"key": "eTag", "type": "str"},
        "provisioning_state": {"key": "properties.provisioningState", "type": "str"},
        "update_strategy_id": {"key": "properties.updateStrategyId", "type": "str"},
        "strategy": {"key": "properties.strategy", "type": "UpdateRunStrategy"},
        "managed_cluster_update": {"key": "properties.managedClusterUpdate", "type": "ManagedClusterUpdate"},
        "status": {"key": "properties.status", "type": "UpdateRunStatus"},
        "auto_upgrade_profile_id": {"key": "properties.autoUpgradeProfileId", "type": "str"},
    }

    def __init__(
        self,
        *,
        update_strategy_id: Optional[str] = None,
        strategy: Optional["_models.UpdateRunStrategy"] = None,
        managed_cluster_update: Optional["_models.ManagedClusterUpdate"] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword update_strategy_id: The resource id of the FleetUpdateStrategy resource to reference.

         When creating a new run, there are three ways to define a strategy for the run:


         #. Define a new strategy in place: Set the "strategy" field.
         #. Use an existing strategy: Set the "updateStrategyId" field. (since 2023-08-15-preview)
         #. Use the default strategy to update all the members one by one: Leave both "updateStrategyId"
         and "strategy" unset. (since 2023-08-15-preview)

         Setting both "updateStrategyId" and "strategy" is invalid.

         UpdateRuns created by "updateStrategyId" snapshot the referenced UpdateStrategy at the time of
         creation and store it in the "strategy" field.
         Subsequent changes to the referenced FleetUpdateStrategy resource do not propagate.
         UpdateRunStrategy changes can be made directly on the "strategy" field before launching the
         UpdateRun.
        :paramtype update_strategy_id: str
        :keyword strategy: The strategy defines the order in which the clusters will be updated.
         If not set, all members will be updated sequentially. The UpdateRun status will show a single
         UpdateStage and a single UpdateGroup targeting all members.
         The strategy of the UpdateRun can be modified until the run is started.
        :paramtype strategy:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunStrategy
        :keyword managed_cluster_update: The update to be applied to all clusters in the UpdateRun. The
         managedClusterUpdate can be modified until the run is started.
        :paramtype managed_cluster_update:
         ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ManagedClusterUpdate
        """
        super().__init__(**kwargs)
        self.e_tag: Optional[str] = None
        self.provisioning_state: Optional[Union[str, "_models.UpdateRunProvisioningState"]] = None
        self.update_strategy_id = update_strategy_id
        self.strategy = strategy
        self.managed_cluster_update = managed_cluster_update
        self.status: Optional["_models.UpdateRunStatus"] = None
        self.auto_upgrade_profile_id: Optional[str] = None


class UpdateRunGateStatus(_serialization.Model):
    """The status of the Gate, as represented in the Update Run.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar display_name: The human-readable display name of the Gate.
    :vartype display_name: str
    :ivar gate_id: The resource id of the Gate.
    :vartype gate_id: str
    :ivar status: The status of the Gate.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    """

    _validation = {
        "display_name": {"readonly": True, "max_length": 100, "min_length": 1},
        "gate_id": {"readonly": True},
        "status": {"readonly": True},
    }

    _attribute_map = {
        "display_name": {"key": "displayName", "type": "str"},
        "gate_id": {"key": "gateId", "type": "str"},
        "status": {"key": "status", "type": "UpdateStatus"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.display_name: Optional[str] = None
        self.gate_id: Optional[str] = None
        self.status: Optional["_models.UpdateStatus"] = None


class UpdateRunGateTargetProperties(_serialization.Model):
    """The properties of the Update Run that the Gate is targeting.

    Variables are only populated by the server, and will be ignored when sending a request.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the Update Run. Required.
    :vartype name: str
    :ivar stage: The Update Stage of the Update Run.
    :vartype stage: str
    :ivar group: The Update Group of the Update Run.
    :vartype group: str
    :ivar timing: Whether the Gate is placed before or after the update itself. Required. Known
     values are: "Before" and "After".
    :vartype timing: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Timing
    """

    _validation = {
        "name": {
            "required": True,
            "readonly": True,
            "max_length": 50,
            "min_length": 1,
            "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$",
        },
        "stage": {"readonly": True, "max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
        "group": {"readonly": True, "max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
        "timing": {"required": True},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "stage": {"key": "stage", "type": "str"},
        "group": {"key": "group", "type": "str"},
        "timing": {"key": "timing", "type": "str"},
    }

    def __init__(self, *, timing: Union[str, "_models.Timing"], **kwargs: Any) -> None:
        """
        :keyword timing: Whether the Gate is placed before or after the update itself. Required. Known
         values are: "Before" and "After".
        :paramtype timing: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.Timing
        """
        super().__init__(**kwargs)
        self.name: Optional[str] = None
        self.stage: Optional[str] = None
        self.group: Optional[str] = None
        self.timing = timing


class UpdateRunListResult(_serialization.Model):
    """The response of a UpdateRun list operation.

    All required parameters must be populated in order to send to server.

    :ivar value: The UpdateRun items on this page. Required.
    :vartype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRun]
    :ivar next_link: The link to the next page of items.
    :vartype next_link: str
    """

    _validation = {
        "value": {"required": True},
    }

    _attribute_map = {
        "value": {"key": "value", "type": "[UpdateRun]"},
        "next_link": {"key": "nextLink", "type": "str"},
    }

    def __init__(self, *, value: List["_models.UpdateRun"], next_link: Optional[str] = None, **kwargs: Any) -> None:
        """
        :keyword value: The UpdateRun items on this page. Required.
        :paramtype value: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRun]
        :keyword next_link: The link to the next page of items.
        :paramtype next_link: str
        """
        super().__init__(**kwargs)
        self.value = value
        self.next_link = next_link


class UpdateRunStatus(_serialization.Model):
    """The status of a UpdateRun.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the UpdateRun.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    :ivar stages: The stages composing an update run. Stages are run sequentially withing an
     UpdateRun.
    :vartype stages:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStageStatus]
    :ivar node_image_selection: The node image upgrade specs for the update run. It is only set in
     update run when ``NodeImageSelection.type`` is ``Consistent``.
    :vartype node_image_selection:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.NodeImageSelectionStatus
    """

    _validation = {
        "status": {"readonly": True},
        "stages": {"readonly": True},
        "node_image_selection": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "UpdateStatus"},
        "stages": {"key": "stages", "type": "[UpdateStageStatus]"},
        "node_image_selection": {"key": "nodeImageSelection", "type": "NodeImageSelectionStatus"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status: Optional["_models.UpdateStatus"] = None
        self.stages: Optional[List["_models.UpdateStageStatus"]] = None
        self.node_image_selection: Optional["_models.NodeImageSelectionStatus"] = None


class UpdateRunStrategy(_serialization.Model):
    """Defines the update sequence of the clusters via stages and groups.

    Stages within a run are executed sequentially one after another.
    Groups within a stage are executed in parallel.
    Member clusters within a group are updated sequentially one after another.

    A valid strategy contains no duplicate groups within or across stages.

    All required parameters must be populated in order to send to server.

    :ivar stages: The list of stages that compose this update run. Min size: 1. Required.
    :vartype stages: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStage]
    """

    _validation = {
        "stages": {"required": True},
    }

    _attribute_map = {
        "stages": {"key": "stages", "type": "[UpdateStage]"},
    }

    def __init__(self, *, stages: List["_models.UpdateStage"], **kwargs: Any) -> None:
        """
        :keyword stages: The list of stages that compose this update run. Min size: 1. Required.
        :paramtype stages:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStage]
        """
        super().__init__(**kwargs)
        self.stages = stages


class UpdateStage(_serialization.Model):
    """Defines a stage which contains the groups to update and the steps to take (e.g., wait for a
    time period) before starting the next stage.

    All required parameters must be populated in order to send to server.

    :ivar name: The name of the stage. Must be unique within the UpdateRun. Required.
    :vartype name: str
    :ivar groups: Defines the groups to be executed in parallel in this stage. Duplicate groups are
     not allowed. Min size: 1.
    :vartype groups: list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateGroup]
    :ivar after_stage_wait_in_seconds: The time in seconds to wait at the end of this stage before
     starting the next one. Defaults to 0 seconds if unspecified.
    :vartype after_stage_wait_in_seconds: int
    :ivar before_gates: A list of Gates that will be created before this Stage is executed.
    :vartype before_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
    :ivar after_gates: A list of Gates that will be created after this Stage is executed.
    :vartype after_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
    """

    _validation = {
        "name": {"required": True, "max_length": 50, "min_length": 1, "pattern": r"^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"},
    }

    _attribute_map = {
        "name": {"key": "name", "type": "str"},
        "groups": {"key": "groups", "type": "[UpdateGroup]"},
        "after_stage_wait_in_seconds": {"key": "afterStageWaitInSeconds", "type": "int"},
        "before_gates": {"key": "beforeGates", "type": "[GateConfiguration]"},
        "after_gates": {"key": "afterGates", "type": "[GateConfiguration]"},
    }

    def __init__(
        self,
        *,
        name: str,
        groups: Optional[List["_models.UpdateGroup"]] = None,
        after_stage_wait_in_seconds: Optional[int] = None,
        before_gates: Optional[List["_models.GateConfiguration"]] = None,
        after_gates: Optional[List["_models.GateConfiguration"]] = None,
        **kwargs: Any
    ) -> None:
        """
        :keyword name: The name of the stage. Must be unique within the UpdateRun. Required.
        :paramtype name: str
        :keyword groups: Defines the groups to be executed in parallel in this stage. Duplicate groups
         are not allowed. Min size: 1.
        :paramtype groups:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateGroup]
        :keyword after_stage_wait_in_seconds: The time in seconds to wait at the end of this stage
         before starting the next one. Defaults to 0 seconds if unspecified.
        :paramtype after_stage_wait_in_seconds: int
        :keyword before_gates: A list of Gates that will be created before this Stage is executed.
        :paramtype before_gates:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
        :keyword after_gates: A list of Gates that will be created after this Stage is executed.
        :paramtype after_gates:
         list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.GateConfiguration]
        """
        super().__init__(**kwargs)
        self.name = name
        self.groups = groups
        self.after_stage_wait_in_seconds = after_stage_wait_in_seconds
        self.before_gates = before_gates
        self.after_gates = after_gates


class UpdateStageStatus(_serialization.Model):
    """The status of a UpdateStage.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the UpdateStage.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    :ivar name: The name of the UpdateStage.
    :vartype name: str
    :ivar groups: The list of groups to be updated as part of this UpdateStage.
    :vartype groups:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateGroupStatus]
    :ivar before_gates: The list of Gates that will run before this UpdateStage.
    :vartype before_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateStatus]
    :ivar after_gates: The list of Gates that will run after this UpdateStage.
    :vartype after_gates:
     list[~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateRunGateStatus]
    :ivar after_stage_wait_status: The status of the wait period configured on the UpdateStage.
    :vartype after_stage_wait_status:
     ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.WaitStatus
    """

    _validation = {
        "status": {"readonly": True},
        "name": {"readonly": True},
        "groups": {"readonly": True},
        "before_gates": {"readonly": True},
        "after_gates": {"readonly": True},
        "after_stage_wait_status": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "UpdateStatus"},
        "name": {"key": "name", "type": "str"},
        "groups": {"key": "groups", "type": "[UpdateGroupStatus]"},
        "before_gates": {"key": "beforeGates", "type": "[UpdateRunGateStatus]"},
        "after_gates": {"key": "afterGates", "type": "[UpdateRunGateStatus]"},
        "after_stage_wait_status": {"key": "afterStageWaitStatus", "type": "WaitStatus"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status: Optional["_models.UpdateStatus"] = None
        self.name: Optional[str] = None
        self.groups: Optional[List["_models.UpdateGroupStatus"]] = None
        self.before_gates: Optional[List["_models.UpdateRunGateStatus"]] = None
        self.after_gates: Optional[List["_models.UpdateRunGateStatus"]] = None
        self.after_stage_wait_status: Optional["_models.WaitStatus"] = None


class UpdateStatus(_serialization.Model):
    """The status for an operation or group of operations.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar start_time: The time the operation or group was started.
    :vartype start_time: ~datetime.datetime
    :ivar completed_time: The time the operation or group was completed.
    :vartype completed_time: ~datetime.datetime
    :ivar state: The State of the operation or group. Known values are: "NotStarted", "Running",
     "Stopping", "Stopped", "Skipped", "Failed", "Pending", and "Completed".
    :vartype state: str or ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateState
    :ivar error: The error details when a failure is encountered.
    :vartype error: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.ErrorDetail
    """

    _validation = {
        "start_time": {"readonly": True},
        "completed_time": {"readonly": True},
        "state": {"readonly": True},
        "error": {"readonly": True},
    }

    _attribute_map = {
        "start_time": {"key": "startTime", "type": "iso-8601"},
        "completed_time": {"key": "completedTime", "type": "iso-8601"},
        "state": {"key": "state", "type": "str"},
        "error": {"key": "error", "type": "ErrorDetail"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.start_time: Optional[datetime.datetime] = None
        self.completed_time: Optional[datetime.datetime] = None
        self.state: Optional[Union[str, "_models.UpdateState"]] = None
        self.error: Optional["_models.ErrorDetail"] = None


class UserAssignedIdentity(_serialization.Model):
    """User assigned identity properties.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar principal_id: The principal ID of the assigned identity.
    :vartype principal_id: str
    :ivar client_id: The client ID of the assigned identity.
    :vartype client_id: str
    """

    _validation = {
        "principal_id": {"readonly": True},
        "client_id": {"readonly": True},
    }

    _attribute_map = {
        "principal_id": {"key": "principalId", "type": "str"},
        "client_id": {"key": "clientId", "type": "str"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.principal_id: Optional[str] = None
        self.client_id: Optional[str] = None


class WaitStatus(_serialization.Model):
    """The status of the wait duration.

    Variables are only populated by the server, and will be ignored when sending a request.

    :ivar status: The status of the wait duration.
    :vartype status: ~azure.mgmt.containerservicefleet.v2025_08_01_preview.models.UpdateStatus
    :ivar wait_duration_in_seconds: The wait duration configured in seconds.
    :vartype wait_duration_in_seconds: int
    """

    _validation = {
        "status": {"readonly": True},
        "wait_duration_in_seconds": {"readonly": True},
    }

    _attribute_map = {
        "status": {"key": "status", "type": "UpdateStatus"},
        "wait_duration_in_seconds": {"key": "waitDurationInSeconds", "type": "int"},
    }

    def __init__(self, **kwargs: Any) -> None:
        """ """
        super().__init__(**kwargs)
        self.status: Optional["_models.UpdateStatus"] = None
        self.wait_duration_in_seconds: Optional[int] = None
