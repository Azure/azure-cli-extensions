# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import TYPE_CHECKING

from msrest import Serializer

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.paging import ItemPaged
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import HttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace

from .. import models as _models
from .._vendor import _convert_request, _format_url_section

if TYPE_CHECKING:
    # pylint: disable=unused-import,ungrouped-imports
    from typing import Any, Callable, Dict, Iterable, Optional, TypeVar
    T = TypeVar('T')
    ClsType = Optional[Callable[[PipelineResponse[HttpRequest, HttpResponse], T, Dict[str, Any]], Any]]

_SERIALIZER = Serializer()
# fmt: off

def build_list_by_environment_request(
    project_name,  # type: str
    environment_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    top = kwargs.pop('top', None)  # type: Optional[int]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/projects/{projectName}/environments/{environmentName}/actions")
    path_format_arguments = {
        "projectName": _SERIALIZER.url("project_name", project_name, 'str'),
        "environmentName": _SERIALIZER.url("environment_name", environment_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct parameters
    _query_parameters = kwargs.pop("params", {})  # type: Dict[str, Any]
    if top is not None:
        _query_parameters['$top'] = _SERIALIZER.query("top", top, 'int')

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        params=_query_parameters,
        headers=_header_parameters,
        **kwargs
    )


def build_create_request(
    project_name,  # type: str
    environment_name,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    content_type = kwargs.pop('content_type', None)  # type: Optional[str]

    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/projects/{projectName}/environments/{environmentName}/actions")
    path_format_arguments = {
        "projectName": _SERIALIZER.url("project_name", project_name, 'str'),
        "environmentName": _SERIALIZER.url("environment_name", environment_name, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    if content_type is not None:
        _header_parameters['Content-Type'] = _SERIALIZER.header("content_type", content_type, 'str')
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="POST",
        url=_url,
        headers=_header_parameters,
        **kwargs
    )


def build_get_request(
    project_name,  # type: str
    environment_name,  # type: str
    action_id,  # type: str
    **kwargs  # type: Any
):
    # type: (...) -> HttpRequest
    accept = "application/json"
    # Construct URL
    _url = kwargs.pop("template_url", "/projects/{projectName}/environments/{environmentName}/actions/{actionId}")
    path_format_arguments = {
        "projectName": _SERIALIZER.url("project_name", project_name, 'str'),
        "environmentName": _SERIALIZER.url("environment_name", environment_name, 'str'),
        "actionId": _SERIALIZER.url("action_id", action_id, 'str'),
    }

    _url = _format_url_section(_url, **path_format_arguments)

    # Construct headers
    _header_parameters = kwargs.pop("headers", {})  # type: Dict[str, Any]
    _header_parameters['Accept'] = _SERIALIZER.header("accept", accept, 'str')

    return HttpRequest(
        method="GET",
        url=_url,
        headers=_header_parameters,
        **kwargs
    )

# fmt: on
class ActionsOperations(object):
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.fidalgo.FidalgoDataplaneClient`'s
        :attr:`actions` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs):
        args = list(args)
        self._client = args.pop(0) if args else kwargs.pop("client")
        self._config = args.pop(0) if args else kwargs.pop("config")
        self._serialize = args.pop(0) if args else kwargs.pop("serializer")
        self._deserialize = args.pop(0) if args else kwargs.pop("deserializer")


    @distributed_trace
    def list_by_environment(
        self,
        dev_center,  # type: str
        project_name,  # type: str
        environment_name,  # type: str
        fidalgo_dns_suffix="devcenters.fidalgo.azure.com",  # type: str
        top=None,  # type: Optional[int]
        **kwargs  # type: Any
    ):
        # type: (...) -> Iterable["_models.ActionListResult"]
        """Gets an environment's actions.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param environment_name: The name of the environment.
        :type environment_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests. Default
         value is "devcenters.fidalgo.azure.com".
        :type fidalgo_dns_suffix: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'.
         Default value is None.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either ActionListResult or the result of cls(response)
        :rtype: ~azure.core.paging.ItemPaged[~azure.fidalgo.models.ActionListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ActionListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_environment_request(
                    project_name=project_name,
                    environment_name=environment_name,
                    top=top,
                    template_url=self.list_by_environment.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_by_environment_request(
                    project_name=project_name,
                    environment_name=environment_name,
                    top=top,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        def extract_data(pipeline_response):
            deserialized = self._deserialize("ActionListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, iter(list_of_elem)

        def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
                request,
                stream=False,
                **kwargs
            )
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return ItemPaged(
            get_next, extract_data
        )
    list_by_environment.metadata = {'url': "/projects/{projectName}/environments/{environmentName}/actions"}  # type: ignore

    @distributed_trace
    def create(  # pylint: disable=inconsistent-return-statements
        self,
        dev_center,  # type: str
        project_name,  # type: str
        environment_name,  # type: str
        action,  # type: "_models.ActionRequest"
        fidalgo_dns_suffix="devcenters.fidalgo.azure.com",  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> None
        """Creates and executes an action.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param environment_name: The name of the environment.
        :type environment_name: str
        :param action: Action properties overriding the environment's default values.
        :type action: ~azure.fidalgo.models.ActionRequest
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests. Default
         value is "devcenters.fidalgo.azure.com".
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        _json = self._serialize.body(action, 'ActionRequest')

        request = build_create_request(
            project_name=project_name,
            environment_name=environment_name,
            content_type=content_type,
            json=_json,
            template_url=self.create.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    create.metadata = {'url': "/projects/{projectName}/environments/{environmentName}/actions"}  # type: ignore


    @distributed_trace
    def get(
        self,
        dev_center,  # type: str
        project_name,  # type: str
        environment_name,  # type: str
        action_id,  # type: str
        fidalgo_dns_suffix="devcenters.fidalgo.azure.com",  # type: str
        **kwargs  # type: Any
    ):
        # type: (...) -> "_models.Action"
        """Gets an environment's deployment history.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param environment_name: The name of the environment.
        :type environment_name: str
        :param action_id: The unique id of the action.
        :type action_id: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests. Default
         value is "devcenters.fidalgo.azure.com".
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: Action, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.Action
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.Action"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            project_name=project_name,
            environment_name=environment_name,
            action_id=action_id,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('Action', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/projects/{projectName}/environments/{environmentName}/actions/{actionId}"}  # type: ignore

