# pylint: disable=too-many-lines
# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
from typing import Any, Callable, Dict, Optional, TypeVar

from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._artifacts_operations import build_get_request, build_list_by_environment_request
T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class ArtifactsOperations:
    """
    .. warning::
        **DO NOT** instantiate this class directly.

        Instead, you should access the following operations through
        :class:`~azure.fidalgo.aio.FidalgoDataplaneClient`'s
        :attr:`artifacts` attribute.
    """

    models = _models

    def __init__(self, *args, **kwargs) -> None:
        args = list(args)
        self._client = args.pop(0) if args else kwargs.pop("client")
        self._config = args.pop(0) if args else kwargs.pop("config")
        self._serialize = args.pop(0) if args else kwargs.pop("serializer")
        self._deserialize = args.pop(0) if args else kwargs.pop("deserializer")


    @distributed_trace_async
    async def list_by_environment(
        self,
        dev_center: str,
        project_name: str,
        environment_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.ArtifactListResult":
        """Lists the artifacts for an environment.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param environment_name: The name of the environment.
        :type environment_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests. Default
         value is "devcenters.fidalgo.azure.com".
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ArtifactListResult, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.ArtifactListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ArtifactListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-09-01-privatepreview")  # type: str

        
        request = build_list_by_environment_request(
            project_name=project_name,
            environment_name=environment_name,
            api_version=api_version,
            template_url=self.list_by_environment.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ArtifactListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    list_by_environment.metadata = {'url': "/projects/{projectName}/environments/{environmentName}/artifacts"}  # type: ignore


    @distributed_trace_async
    async def get(
        self,
        dev_center: str,
        project_name: str,
        environment_name: str,
        artifact_path: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.ArtifactListResult":
        """Lists the artifacts for an environment at a specified path, or returns the file at the path.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param environment_name: The name of the environment.
        :type environment_name: str
        :param artifact_path: The path of the artifact.
        :type artifact_path: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests. Default
         value is "devcenters.fidalgo.azure.com".
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: ArtifactListResult, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.ArtifactListResult
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.ArtifactListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        api_version = kwargs.pop('api_version', "2021-09-01-privatepreview")  # type: str

        
        request = build_get_request(
            project_name=project_name,
            environment_name=environment_name,
            artifact_path=artifact_path,
            api_version=api_version,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client._pipeline.run(  # pylint: disable=protected-access
            request,
            stream=False,
            **kwargs
        )
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('ArtifactListResult', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': "/projects/{projectName}/environments/{environmentName}/artifacts/{artifactPath}"}  # type: ignore

