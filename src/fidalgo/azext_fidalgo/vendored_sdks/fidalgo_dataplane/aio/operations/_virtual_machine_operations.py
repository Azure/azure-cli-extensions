# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------
import functools
from typing import Any, AsyncIterable, Callable, Dict, Generic, Optional, TypeVar
import warnings

from azure.core.async_paging import AsyncItemPaged, AsyncList
from azure.core.exceptions import ClientAuthenticationError, HttpResponseError, ResourceExistsError, ResourceNotFoundError, map_error
from azure.core.pipeline import PipelineResponse
from azure.core.pipeline.transport import AsyncHttpResponse
from azure.core.rest import HttpRequest
from azure.core.tracing.decorator import distributed_trace
from azure.core.tracing.decorator_async import distributed_trace_async

from ... import models as _models
from ..._vendor import _convert_request
from ...operations._virtual_machine_operations import build_assign_request, build_create_request, build_delete_request, build_get_rdp_file_contents_request, build_get_request, build_list_by_project_request, build_list_request, build_start_request, build_stop_request

T = TypeVar('T')
ClsType = Optional[Callable[[PipelineResponse[HttpRequest, AsyncHttpResponse], T, Dict[str, Any]], Any]]

class VirtualMachineOperations:
    """VirtualMachineOperations async operations.

    You should not instantiate this class directly. Instead, you should create a Client instance that
    instantiates it for you and attaches it as an attribute.

    :ivar models: Alias to model classes used in this operation group.
    :type models: ~azure.fidalgo.models
    :param client: Client for service requests.
    :param config: Configuration of service client.
    :param serializer: An object model serializer.
    :param deserializer: An object model deserializer.
    """

    models = _models

    def __init__(self, client, config, serializer, deserializer) -> None:
        self._client = client
        self._serialize = serializer
        self._deserialize = deserializer
        self._config = config

    @distributed_trace
    def list(
        self,
        dev_center: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        filter: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.VirtualMachineListResult"]:
        """Lists Virtual Machines that the caller has access to in the DevCenter.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :param filter: An OData $filter clause to apply to the operation.
        :type filter: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either VirtualMachineListResult or the result of
         cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.fidalgo.models.VirtualMachineListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.VirtualMachineListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_request(
                    filter=filter,
                    top=top,
                    template_url=self.list.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_request(
                    filter=filter,
                    top=top,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("VirtualMachineListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list.metadata = {'url': '/virtualmachines'}  # type: ignore

    @distributed_trace
    def list_by_project(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        filter: Optional[str] = None,
        top: Optional[int] = None,
        **kwargs: Any
    ) -> AsyncIterable["_models.VirtualMachineListResult"]:
        """Lists Virtual Machines in the project for a particular user.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :param filter: An OData $filter clause to apply to the operation.
        :type filter: str
        :param top: The maximum number of resources to return from the operation. Example: '$top=10'.
        :type top: int
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: An iterator like instance of either VirtualMachineListResult or the result of
         cls(response)
        :rtype: ~azure.core.async_paging.AsyncItemPaged[~azure.fidalgo.models.VirtualMachineListResult]
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.VirtualMachineListResult"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))
        def prepare_request(next_link=None):
            if not next_link:
                
                request = build_list_by_project_request(
                    project_name=project_name,
                    user_id=user_id,
                    filter=filter,
                    top=top,
                    template_url=self.list_by_project.metadata['url'],
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

            else:
                
                request = build_list_by_project_request(
                    project_name=project_name,
                    user_id=user_id,
                    filter=filter,
                    top=top,
                    template_url=next_link,
                )
                request = _convert_request(request)
                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.url = self._client.format_url(request.url, **path_format_arguments)

                path_format_arguments = {
                    "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
                    "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
                }
                request.method = "GET"
            return request

        async def extract_data(pipeline_response):
            deserialized = self._deserialize("VirtualMachineListResult", pipeline_response)
            list_of_elem = deserialized.value
            if cls:
                list_of_elem = cls(list_of_elem)
            return deserialized.next_link or None, AsyncList(list_of_elem)

        async def get_next(next_link=None):
            request = prepare_request(next_link)

            pipeline_response = await self._client._pipeline.run(request, stream=False, **kwargs)
            response = pipeline_response.http_response

            if response.status_code not in [200]:
                map_error(status_code=response.status_code, response=response, error_map=error_map)
                error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
                raise HttpResponseError(response=response, model=error)

            return pipeline_response


        return AsyncItemPaged(
            get_next, extract_data
        )
    list_by_project.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines'}  # type: ignore

    @distributed_trace_async
    async def get(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.VirtualMachine":
        """Gets a virtual machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VirtualMachine, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.VirtualMachine
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.VirtualMachine"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            template_url=self.get.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('VirtualMachine', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}'}  # type: ignore


    @distributed_trace_async
    async def create(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        body: "_models.VirtualMachine",
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.VirtualMachine":
        """Creates or updates a virtual machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param body: Represents a environment.
        :type body: ~azure.fidalgo.models.VirtualMachine
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VirtualMachine, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.VirtualMachine
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.VirtualMachine"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(body, 'VirtualMachine')

        request = build_create_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            content_type=content_type,
            json=json,
            template_url=self.create.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [201]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('VirtualMachine', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    create.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}'}  # type: ignore


    @distributed_trace_async
    async def delete(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.VirtualMachine":
        """Deletes a virtual machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: VirtualMachine, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.VirtualMachine
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.VirtualMachine"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_delete_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            template_url=self.delete.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('VirtualMachine', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    delete.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}'}  # type: ignore


    @distributed_trace_async
    async def start(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> None:
        """Starts a Virtual Machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_start_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            template_url=self.start.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    start.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}/start'}  # type: ignore


    @distributed_trace_async
    async def stop(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> None:
        """Stops a Virtual Machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_stop_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            template_url=self.stop.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    stop.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}/stop'}  # type: ignore


    @distributed_trace_async
    async def assign(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        body: "_models.Assignment",
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> None:
        """Assigns a Virtual Machine to a different user.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param body: Assignment request.
        :type body: ~azure.fidalgo.models.Assignment
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: None, or the result of cls(response)
        :rtype: None
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType[None]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        content_type = kwargs.pop('content_type', "application/json")  # type: Optional[str]

        json = self._serialize.body(body, 'Assignment')

        request = build_assign_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            content_type=content_type,
            json=json,
            template_url=self.assign.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [202]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        if cls:
            return cls(pipeline_response, None, {})

    assign.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}/assign'}  # type: ignore


    @distributed_trace_async
    async def get_rdp_file_contents(
        self,
        dev_center: str,
        project_name: str,
        user_id: str,
        virtual_machine_name: str,
        fidalgo_dns_suffix: str = "devcenters.fidalgo.azure.com",
        **kwargs: Any
    ) -> "_models.RdpConnection":
        """Gets a string that represents the contents of the RDP file for the virtual machine.

        :param dev_center: The DevCenter to operate on.
        :type dev_center: str
        :param project_name: The Fidalgo Project upon which to execute operations.
        :type project_name: str
        :param user_id: The id of the user. If value is 'me', the identity is taken from the
         authentication context.
        :type user_id: str
        :param virtual_machine_name: The name of a virtual machine.
        :type virtual_machine_name: str
        :param fidalgo_dns_suffix: The DNS suffix used as the base for all fidalgo requests.
        :type fidalgo_dns_suffix: str
        :keyword callable cls: A custom type or function that will be passed the direct response
        :return: RdpConnection, or the result of cls(response)
        :rtype: ~azure.fidalgo.models.RdpConnection
        :raises: ~azure.core.exceptions.HttpResponseError
        """
        cls = kwargs.pop('cls', None)  # type: ClsType["_models.RdpConnection"]
        error_map = {
            401: ClientAuthenticationError, 404: ResourceNotFoundError, 409: ResourceExistsError
        }
        error_map.update(kwargs.pop('error_map', {}))

        
        request = build_get_rdp_file_contents_request(
            project_name=project_name,
            user_id=user_id,
            virtual_machine_name=virtual_machine_name,
            template_url=self.get_rdp_file_contents.metadata['url'],
        )
        request = _convert_request(request)
        path_format_arguments = {
            "devCenter": self._serialize.url("dev_center", dev_center, 'str', skip_quote=True),
            "fidalgoDnsSuffix": self._serialize.url("fidalgo_dns_suffix", fidalgo_dns_suffix, 'str', skip_quote=True),
        }
        request.url = self._client.format_url(request.url, **path_format_arguments)

        pipeline_response = await self._client.send_request(request, stream=False, _return_pipeline_response=True, **kwargs)
        response = pipeline_response.http_response

        if response.status_code not in [200]:
            map_error(status_code=response.status_code, response=response, error_map=error_map)
            error = self._deserialize.failsafe_deserialize(_models.CloudError, pipeline_response)
            raise HttpResponseError(response=response, model=error)

        deserialized = self._deserialize('RdpConnection', pipeline_response)

        if cls:
            return cls(pipeline_response, deserialized, {})

        return deserialized

    get_rdp_file_contents.metadata = {'url': '/projects/{projectName}/users/{userId}/virtualmachines/{virtualMachineName}/getRdpFileContents'}  # type: ignore

