# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *


class GalleryServiceArtifactScenario(ScenarioTest):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self._target_locations = [
            {
                "name": "eastus2euap"
            },
            {
                "name": "centraluseuap"
            },
            {
                "name": "westcentralus"
            },
            {
                "name": "westus"
            }
        ]

        self._vm_artifacts_profile = [
            {
                "artifactProfiles": [
                    {
                        "description": "Using a SIG Image for testing",
                        "imageReference": {
                            "id": "/subscriptions/d0382b75-92e7-4da3-8e63-0ed4bd4c3d5e/resourceGroups/"
                                  "robhoopa_validate_arco_changes/providers/Microsoft.Compute/galleries"
                                  "/ArcoBugBashGallery1/images/Windows2022Gen2ImageGeneralized1",
                            "initialVersion": "0.0.1"
                        }
                    }
                ],
                "description": "VM Artifact profile with default upgrade window",
                "name": "vmArtifactsProfile",
                "upgradeSdpPolicy": {
                    "schedulingPolicy": {
                        "disableRegularUpgrades": False,
                        "maxConcurrentResourceCountPerRegion": 5,
                        "upgradeWindow": "Default"
                    },
                    "type": "PlatformOrchestratedForNewAndExistingResources"
                }
            }
        ]

        self._location = "eastus2euap"
        self._resource_group = "cli_extension_test_rg"
        self._gallery_name = "cli_extension_test_gallery"
        self._service_artifact_name = "ArcoCreatedWithCLIExtensionTest"
        self._initial_service_artifact_description = "Test Arco created using cli extension test"
        self._updated_service_artifact_description = "Test Arco updated using cli extension test"

        self.kwargs.update({
            'target_locations': self._target_locations,
            'vm_artifacts_profile': self._vm_artifacts_profile,
            'location': self._location,
            'resource_group': self._resource_group,
            'gallery_name': self._gallery_name,
            'service_artifact_name': self._service_artifact_name,
            'initial_service_artifact_description': self._initial_service_artifact_description,
            'updated_service_artifact_description': self._updated_service_artifact_description
        })

    def test_service_artifact_list(self):
        command_to_run = 'az gallery service-artifact list ' \
                         '--gallery-name {gallery_name} ' \
                         '--resource-group {resource_group}'
        service_artifacts_list = self.cmd(command_to_run).get_output_in_json()
        assert len(service_artifacts_list) > 0

    def test_service_artifact_get(self):
        command_to_run = 'az gallery service-artifact get ' \
                         '--gallery-name {gallery_name} ' \
                         '--resource-group {resource_group} ' \
                         '--service-artifact-name {service_artifact_name}'

        service_artifacts_get = self.cmd(command_to_run).get_output_in_json()

        assert service_artifacts_get["name"] == self._service_artifact_name

    def test_service_artifact_get_with_expand(self):
        command_to_run = 'az gallery service-artifact get ' \
                         '--gallery-name {gallery_name} ' \
                         '--resource-group {resource_group} ' \
                         '--service-artifact-name {service_artifact_name} ' \
                         '--expand latestVersion'

        service_artifacts_get = self.cmd(command_to_run).get_output_in_json()

        assert service_artifacts_get["name"] == self._service_artifact_name
        assert len(service_artifacts_get["properties"]["targetLocations"]) > 0
        for each_location_dict in service_artifacts_get["properties"]["targetLocations"]:
            assert "name" in each_location_dict
            assert "vmArtifactsProfiles" in each_location_dict

    def test_service_artifact_create(self):
        command_to_run = 'az gallery service-artifact create ' \
                         '--gallery-name {gallery_name} ' \
                         '--resource-group {resource_group} ' \
                         '--service-artifact-name {service_artifact_name} ' \
                         '--location {location}  ' \
                         '--target-locations "{target_locations}" ' \
                         '--vm-artifacts-profiles "{vm_artifacts_profile}" ' \
                         '--description "{initial_service_artifact_description}"'

        service_artifacts_create = self.cmd(command_to_run).get_output_in_json()
        assert service_artifacts_create["name"] == self._service_artifact_name

    def test_service_artifact_update(self):
        command_to_run = 'az gallery service-artifact update ' \
                         '--gallery-name {gallery_name} ' \
                         '--resource-group {resource_group} ' \
                         '--service-artifact-name {service_artifact_name} ' \
                         '--location {location}  ' \
                         '--target-locations "{target_locations}" ' \
                         '--vm-artifacts-profiles "{vm_artifacts_profile}" ' \
                         '--description "{updated_service_artifact_description}"'

        service_artifacts_update = self.cmd(command_to_run).get_output_in_json()

        assert service_artifacts_update["name"] == self._service_artifact_name
        assert service_artifacts_update["properties"]["description"] == self._updated_service_artifact_description
