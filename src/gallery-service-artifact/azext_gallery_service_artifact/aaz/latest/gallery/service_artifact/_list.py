# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "gallery service-artifact list",
)
class List(AAZCommand):
    """List a list of Service Artifacts in a gallery.
    """

    _aaz_info = {
        "version": "2023-07-03",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.compute/galleries/{}/serviceartifacts", "2023-07-03"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.gallery_name = AAZStrArg(
            options=["--gallery-name"],
            help="The name of the Gallery under which the Service Artifact is created",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            help="The name of the resource group. The name is case insensitive.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GalleryServiceArtifactList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GalleryServiceArtifactList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/galleries/{galleryName}/serviceArtifacts",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "galleryName", self.ctx.args.gallery_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-07-03",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType()
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.properties = AAZObjectType(
                flags={"required": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType()

            properties = cls._schema_on_200.value.Element.properties
            properties.description = AAZStrType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.target_locations = AAZListType(
                serialized_name="targetLocations",
                flags={"required": True},
            )
            properties.vm_artifacts_profiles = AAZListType(
                serialized_name="vmArtifactsProfiles",
                flags={"required": True},
            )

            target_locations = cls._schema_on_200.value.Element.properties.target_locations
            target_locations.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.target_locations.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )
            _element.vm_artifacts_profiles = AAZListType(
                serialized_name="vmArtifactsProfiles",
            )

            vm_artifacts_profiles = cls._schema_on_200.value.Element.properties.target_locations.Element.vm_artifacts_profiles
            vm_artifacts_profiles.Element = AAZObjectType()
            _ListHelper._build_schema_vm_artifacts_profile_read(vm_artifacts_profiles.Element)

            vm_artifacts_profiles = cls._schema_on_200.value.Element.properties.vm_artifacts_profiles
            vm_artifacts_profiles.Element = AAZObjectType()
            _ListHelper._build_schema_vm_artifacts_profile_read(vm_artifacts_profiles.Element)

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_vm_artifacts_profile_read = None

    @classmethod
    def _build_schema_vm_artifacts_profile_read(cls, _schema):
        if cls._schema_vm_artifacts_profile_read is not None:
            _schema.artifact_profiles = cls._schema_vm_artifacts_profile_read.artifact_profiles
            _schema.description = cls._schema_vm_artifacts_profile_read.description
            _schema.name = cls._schema_vm_artifacts_profile_read.name
            _schema.upgrade_provider_info = cls._schema_vm_artifacts_profile_read.upgrade_provider_info
            _schema.upgrade_sdp_policy = cls._schema_vm_artifacts_profile_read.upgrade_sdp_policy
            return

        cls._schema_vm_artifacts_profile_read = _schema_vm_artifacts_profile_read = AAZObjectType()

        vm_artifacts_profile_read = _schema_vm_artifacts_profile_read
        vm_artifacts_profile_read.artifact_profiles = AAZListType(
            serialized_name="artifactProfiles",
            flags={"required": True},
        )
        vm_artifacts_profile_read.description = AAZStrType()
        vm_artifacts_profile_read.name = AAZStrType(
            flags={"required": True},
        )
        vm_artifacts_profile_read.upgrade_provider_info = AAZObjectType(
            serialized_name="upgradeProviderInfo",
        )
        vm_artifacts_profile_read.upgrade_sdp_policy = AAZObjectType(
            serialized_name="upgradeSdpPolicy",
            flags={"required": True},
        )

        artifact_profiles = _schema_vm_artifacts_profile_read.artifact_profiles
        artifact_profiles.Element = AAZObjectType()

        _element = _schema_vm_artifacts_profile_read.artifact_profiles.Element
        _element.description = AAZStrType()
        _element.image_reference = AAZObjectType(
            serialized_name="imageReference",
        )

        image_reference = _schema_vm_artifacts_profile_read.artifact_profiles.Element.image_reference
        image_reference.current_version = AAZStrType(
            serialized_name="currentVersion",
        )
        image_reference.id = AAZStrType()
        image_reference.initial_version = AAZStrType(
            serialized_name="initialVersion",
        )
        image_reference.offer = AAZStrType()
        image_reference.publisher = AAZStrType()
        image_reference.shared_gallery_image_id = AAZStrType(
            serialized_name="sharedGalleryImageId",
        )
        image_reference.sku = AAZStrType()

        upgrade_provider_info = _schema_vm_artifacts_profile_read.upgrade_provider_info
        upgrade_provider_info.enable_auto_trigger = AAZBoolType(
            serialized_name="enableAutoTrigger",
        )
        upgrade_provider_info.upgrade_provider_parameters = AAZObjectType(
            serialized_name="upgradeProviderParameters",
        )

        upgrade_provider_parameters = _schema_vm_artifacts_profile_read.upgrade_provider_info.upgrade_provider_parameters
        upgrade_provider_parameters.service_group = AAZStrType(
            serialized_name="ServiceGroup",
        )
        upgrade_provider_parameters.service_identifier = AAZStrType(
            serialized_name="ServiceIdentifier",
        )

        upgrade_sdp_policy = _schema_vm_artifacts_profile_read.upgrade_sdp_policy
        upgrade_sdp_policy.scheduling_policy = AAZObjectType(
            serialized_name="schedulingPolicy",
        )
        upgrade_sdp_policy.type = AAZStrType()

        scheduling_policy = _schema_vm_artifacts_profile_read.upgrade_sdp_policy.scheduling_policy
        scheduling_policy.disable_regular_upgrades = AAZBoolType(
            serialized_name="disableRegularUpgrades",
        )
        scheduling_policy.max_concurrent_resource_count_per_region = AAZIntType(
            serialized_name="maxConcurrentResourceCountPerRegion",
        )
        scheduling_policy.upgrade_window = AAZStrType(
            serialized_name="upgradeWindow",
        )

        _schema.artifact_profiles = cls._schema_vm_artifacts_profile_read.artifact_profiles
        _schema.description = cls._schema_vm_artifacts_profile_read.description
        _schema.name = cls._schema_vm_artifacts_profile_read.name
        _schema.upgrade_provider_info = cls._schema_vm_artifacts_profile_read.upgrade_provider_info
        _schema.upgrade_sdp_policy = cls._schema_vm_artifacts_profile_read.upgrade_sdp_policy


__all__ = ["List"]
