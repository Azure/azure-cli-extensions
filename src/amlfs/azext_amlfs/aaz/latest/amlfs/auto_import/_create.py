# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "amlfs auto-import create",
)
class Create(AAZCommand):
    """Create an auto import job.

    :example: autoImportJobs_CreateOrUpdate
        az amlfs auto-import create --resource-group scgroup --aml-filesystem-name fs1 --auto-import-job-name autojob1 --tags "{Dept:ContosoAds}" --location eastus --auto-import-prefixes "[/]" --conflict-resolution-mode Skip --enable-deletions False --maximum-errors 0
        az amlfs auto-import create --resource-group scgroup --aml-filesystem-name fs1 --auto-import-job-name autojob1 --tags "{Dept:ContosoAds}" --location eastus --auto-import-prefixes "[/a,/b]" --conflict-resolution-mode Skip --enable-deletions False --maximum-errors 0 --admin-status Enable
    """

    _aaz_info = {
        "version": "2025-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storagecache/amlfilesystems/{}/autoimportjobs/{}", "2025-07-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.aml_filesystem_name = AAZStrArg(
            options=["--aml-filesystem-name"],
            help="Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.auto_import_job_name = AAZStrArg(
            options=["-n", "--name", "--auto-import-job-name"],
            help="Name for the auto import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "AutoImportJob"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="AutoImportJob",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="AutoImportJob",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.admin_status = AAZStrArg(
            options=["--admin-status"],
            arg_group="Properties",
            help="The administrative status of the auto import job. Possible values: 'Enable', 'Disable'. Passing in a value of 'Disable' will disable the current active auto import job. By default it is set to 'Enable'.",
            default="Enable",
            enum={"Disable": "Disable", "Enable": "Enable"},
        )
        _args_schema.auto_import_prefixes = AAZListArg(
            options=["--auto-import-prefixes"],
            arg_group="Properties",
            help="An array of blob paths/prefixes that get auto imported to the cluster namespace. It has '/' as the default value. Number of maximum allowed paths is 100.",
        )
        _args_schema.conflict_resolution_mode = AAZStrArg(
            options=["--conflict-mode", "--conflict-resolution-mode"],
            arg_group="Properties",
            help="How the auto import job will handle conflicts. For example, if the auto import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the auto import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the auto import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or is currently released. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/blob-integration#conflict-resolution-mode for a thorough explanation of these resolution modes.",
            default="Skip",
            enum={"Fail": "Fail", "OverwriteAlways": "OverwriteAlways", "OverwriteIfDirty": "OverwriteIfDirty", "Skip": "Skip"},
        )
        _args_schema.enable_deletions = AAZBoolArg(
            options=["--enable-deletions"],
            arg_group="Properties",
            help="Whether or not to enable deletions during auto import. This only affects overwrite-dirty.",
            default=False,
        )
        _args_schema.maximum_errors = AAZIntArg(
            options=["--maximum-errors"],
            arg_group="Properties",
            help="Total non-conflict-oriented errors (e.g., OS errors) Import will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately on any error.",
        )

        auto_import_prefixes = cls._args_schema.auto_import_prefixes
        auto_import_prefixes.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.AutoImportJobsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AutoImportJobsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "amlFilesystemName", self.ctx.args.aml_filesystem_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "autoImportJobName", self.ctx.args.auto_import_job_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("adminStatus", AAZStrType, ".admin_status")
                properties.set_prop("autoImportPrefixes", AAZListType, ".auto_import_prefixes")
                properties.set_prop("conflictResolutionMode", AAZStrType, ".conflict_resolution_mode")
                properties.set_prop("enableDeletions", AAZBoolType, ".enable_deletions")
                properties.set_prop("maximumErrors", AAZIntType, ".maximum_errors")

            auto_import_prefixes = _builder.get(".properties.autoImportPrefixes")
            if auto_import_prefixes is not None:
                auto_import_prefixes.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.admin_status = AAZStrType(
                serialized_name="adminStatus",
            )
            properties.auto_import_prefixes = AAZListType(
                serialized_name="autoImportPrefixes",
            )
            properties.conflict_resolution_mode = AAZStrType(
                serialized_name="conflictResolutionMode",
            )
            properties.enable_deletions = AAZBoolType(
                serialized_name="enableDeletions",
            )
            properties.maximum_errors = AAZIntType(
                serialized_name="maximumErrors",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZObjectType(
                flags={"client_flatten": True, "read_only": True},
            )

            auto_import_prefixes = cls._schema_on_200_201.properties.auto_import_prefixes
            auto_import_prefixes.Element = AAZStrType()

            status = cls._schema_on_200_201.properties.status
            status.blob_sync_events = AAZObjectType(
                serialized_name="blobSyncEvents",
                flags={"read_only": True},
            )
            status.imported_directories = AAZIntType(
                serialized_name="importedDirectories",
                flags={"read_only": True},
            )
            status.imported_files = AAZIntType(
                serialized_name="importedFiles",
                flags={"read_only": True},
            )
            status.imported_symlinks = AAZIntType(
                serialized_name="importedSymlinks",
                flags={"read_only": True},
            )
            status.last_completion_time_utc = AAZStrType(
                serialized_name="lastCompletionTimeUTC",
                flags={"read_only": True},
            )
            status.last_started_time_utc = AAZStrType(
                serialized_name="lastStartedTimeUTC",
                flags={"read_only": True},
            )
            status.preexisting_directories = AAZIntType(
                serialized_name="preexistingDirectories",
                flags={"read_only": True},
            )
            status.preexisting_files = AAZIntType(
                serialized_name="preexistingFiles",
                flags={"read_only": True},
            )
            status.preexisting_symlinks = AAZIntType(
                serialized_name="preexistingSymlinks",
                flags={"read_only": True},
            )
            status.rate_of_blob_import = AAZIntType(
                serialized_name="rateOfBlobImport",
                flags={"read_only": True},
            )
            status.rate_of_blob_walk = AAZIntType(
                serialized_name="rateOfBlobWalk",
                flags={"read_only": True},
            )
            status.scan_end_time = AAZStrType(
                serialized_name="scanEndTime",
                flags={"read_only": True},
            )
            status.scan_start_time = AAZStrType(
                serialized_name="scanStartTime",
                flags={"read_only": True},
            )
            status.state = AAZStrType(
                flags={"read_only": True},
            )
            status.status_code = AAZStrType(
                serialized_name="statusCode",
                flags={"read_only": True},
            )
            status.status_message = AAZStrType(
                serialized_name="statusMessage",
                flags={"read_only": True},
            )
            status.total_blobs_imported = AAZIntType(
                serialized_name="totalBlobsImported",
                flags={"read_only": True},
            )
            status.total_blobs_walked = AAZIntType(
                serialized_name="totalBlobsWalked",
                flags={"read_only": True},
            )
            status.total_conflicts = AAZIntType(
                serialized_name="totalConflicts",
                flags={"read_only": True},
            )
            status.total_errors = AAZIntType(
                serialized_name="totalErrors",
                flags={"read_only": True},
            )

            blob_sync_events = cls._schema_on_200_201.properties.status.blob_sync_events
            blob_sync_events.deletions = AAZIntType(
                flags={"read_only": True},
            )
            blob_sync_events.imported_directories = AAZIntType(
                serialized_name="importedDirectories",
                flags={"read_only": True},
            )
            blob_sync_events.imported_files = AAZIntType(
                serialized_name="importedFiles",
                flags={"read_only": True},
            )
            blob_sync_events.imported_symlinks = AAZIntType(
                serialized_name="importedSymlinks",
                flags={"read_only": True},
            )
            blob_sync_events.last_change_feed_event_consumed_time = AAZStrType(
                serialized_name="lastChangeFeedEventConsumedTime",
                flags={"read_only": True},
            )
            blob_sync_events.last_time_fully_synchronized = AAZStrType(
                serialized_name="lastTimeFullySynchronized",
                flags={"read_only": True},
            )
            blob_sync_events.preexisting_directories = AAZIntType(
                serialized_name="preexistingDirectories",
                flags={"read_only": True},
            )
            blob_sync_events.preexisting_files = AAZIntType(
                serialized_name="preexistingFiles",
                flags={"read_only": True},
            )
            blob_sync_events.preexisting_symlinks = AAZIntType(
                serialized_name="preexistingSymlinks",
                flags={"read_only": True},
            )
            blob_sync_events.rate_of_blob_import = AAZIntType(
                serialized_name="rateOfBlobImport",
                flags={"read_only": True},
            )
            blob_sync_events.total_blobs_imported = AAZIntType(
                serialized_name="totalBlobsImported",
                flags={"read_only": True},
            )
            blob_sync_events.total_conflicts = AAZIntType(
                serialized_name="totalConflicts",
                flags={"read_only": True},
            )
            blob_sync_events.total_errors = AAZIntType(
                serialized_name="totalErrors",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
