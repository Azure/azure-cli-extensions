# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "amlfs import show",
)
class Show(AAZCommand):
    """Get an import job.

    :example: importJobs_Get
        az amlfs import show --resource-group scgroup --aml-filesystem-name fs1 --import-job-name job1
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storagecache/amlfilesystems/{}/importjobs/{}", "2024-07-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.aml_filesystem_name = AAZStrArg(
            options=["--aml-filesystem-name"],
            help="Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.import_job_name = AAZStrArg(
            options=["-n", "--name", "--import-job-name"],
            help="Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ImportJobsGet(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ImportJobsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "amlFilesystemName", self.ctx.args.aml_filesystem_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "importJobName", self.ctx.args.import_job_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.tags = AAZDictType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.admin_status = AAZStrType(
                serialized_name="adminStatus",
            )
            properties.conflict_resolution_mode = AAZStrType(
                serialized_name="conflictResolutionMode",
            )
            properties.import_prefixes = AAZListType(
                serialized_name="importPrefixes",
            )
            properties.maximum_errors = AAZIntType(
                serialized_name="maximumErrors",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZObjectType(
                flags={"client_flatten": True, "read_only": True},
            )

            import_prefixes = cls._schema_on_200.properties.import_prefixes
            import_prefixes.Element = AAZStrType()

            status = cls._schema_on_200.properties.status
            status.blobs_imported_per_second = AAZIntType(
                serialized_name="blobsImportedPerSecond",
                flags={"read_only": True},
            )
            status.blobs_walked_per_second = AAZIntType(
                serialized_name="blobsWalkedPerSecond",
                flags={"read_only": True},
            )
            status.imported_directories = AAZIntType(
                serialized_name="importedDirectories",
                flags={"read_only": True},
            )
            status.imported_files = AAZIntType(
                serialized_name="importedFiles",
                flags={"read_only": True},
            )
            status.imported_symlinks = AAZIntType(
                serialized_name="importedSymlinks",
                flags={"read_only": True},
            )
            status.last_completion_time = AAZStrType(
                serialized_name="lastCompletionTime",
                flags={"read_only": True},
            )
            status.last_started_time = AAZStrType(
                serialized_name="lastStartedTime",
                flags={"read_only": True},
            )
            status.preexisting_directories = AAZIntType(
                serialized_name="preexistingDirectories",
                flags={"read_only": True},
            )
            status.preexisting_files = AAZIntType(
                serialized_name="preexistingFiles",
                flags={"read_only": True},
            )
            status.preexisting_symlinks = AAZIntType(
                serialized_name="preexistingSymlinks",
                flags={"read_only": True},
            )
            status.state = AAZStrType(
                flags={"read_only": True},
            )
            status.status_message = AAZStrType(
                serialized_name="statusMessage",
                flags={"read_only": True},
            )
            status.total_blobs_imported = AAZIntType(
                serialized_name="totalBlobsImported",
                flags={"read_only": True},
            )
            status.total_blobs_walked = AAZIntType(
                serialized_name="totalBlobsWalked",
                flags={"read_only": True},
            )
            status.total_conflicts = AAZIntType(
                serialized_name="totalConflicts",
                flags={"read_only": True},
            )
            status.total_errors = AAZIntType(
                serialized_name="totalErrors",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""


__all__ = ["Show"]
