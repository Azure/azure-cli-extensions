# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "amlfs import create",
)
class Create(AAZCommand):
    """Create an import job.

    :example: importJobs_CreateOrUpdate
        az amlfs import create --resource-group scgroup --aml-filesystem-name fs1 --import-job-name job1 --tags "{Dept:ContosoAds}" --location eastus --import-prefixes "[/]" --conflict-resolution-mode OverwriteAlways --maximum-errors 0
    """

    _aaz_info = {
        "version": "2024-07-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storagecache/amlfilesystems/{}/importjobs/{}", "2024-07-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.aml_filesystem_name = AAZStrArg(
            options=["--aml-filesystem-name"],
            help="Name for the AML file system. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.import_job_name = AAZStrArg(
            options=["-n", "--name", "--import-job-name"],
            help="Name for the import job. Allows alphanumerics, underscores, and hyphens. Start and end with alphanumeric.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern="^[0-9a-zA-Z][-0-9a-zA-Z_]{0,78}[0-9a-zA-Z]$",
                max_length=80,
                min_length=2,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "ImportJob"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="ImportJob",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="ImportJob",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.admin_status = AAZStrArg(
            options=["--admin-status"],
            arg_group="Properties",
            help="The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel' will cancel the current active import job. By default it is set to 'Active'.",
            default="Active",
            enum={"Active": "Active", "Cancel": "Cancel"},
        )
        _args_schema.conflict_resolution_mode = AAZStrArg(
            options=["--conflict-mode", "--conflict-resolution-mode"],
            arg_group="Properties",
            help="How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.",
            default="Fail",
            enum={"Fail": "Fail", "OverwriteAlways": "OverwriteAlways", "OverwriteIfDirty": "OverwriteIfDirty", "Skip": "Skip"},
        )
        _args_schema.import_prefixes = AAZListArg(
            options=["--import-prefixes"],
            arg_group="Properties",
            help="An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.",
        )
        _args_schema.maximum_errors = AAZIntArg(
            options=["--maximum-errors"],
            arg_group="Properties",
            help="Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.",
            default=0,
        )

        import_prefixes = cls._args_schema.import_prefixes
        import_prefixes.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ImportJobsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ImportJobsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "amlFilesystemName", self.ctx.args.aml_filesystem_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "importJobName", self.ctx.args.import_job_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2024-07-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("adminStatus", AAZStrType, ".admin_status")
                properties.set_prop("conflictResolutionMode", AAZStrType, ".conflict_resolution_mode")
                properties.set_prop("importPrefixes", AAZListType, ".import_prefixes")
                properties.set_prop("maximumErrors", AAZIntType, ".maximum_errors")

            import_prefixes = _builder.get(".properties.importPrefixes")
            if import_prefixes is not None:
                import_prefixes.set_elements(AAZStrType, ".")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.admin_status = AAZStrType(
                serialized_name="adminStatus",
            )
            properties.conflict_resolution_mode = AAZStrType(
                serialized_name="conflictResolutionMode",
            )
            properties.import_prefixes = AAZListType(
                serialized_name="importPrefixes",
            )
            properties.maximum_errors = AAZIntType(
                serialized_name="maximumErrors",
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.status = AAZObjectType(
                flags={"client_flatten": True, "read_only": True},
            )

            import_prefixes = cls._schema_on_200_201.properties.import_prefixes
            import_prefixes.Element = AAZStrType()

            status = cls._schema_on_200_201.properties.status
            status.blobs_imported_per_second = AAZIntType(
                serialized_name="blobsImportedPerSecond",
                flags={"read_only": True},
            )
            status.blobs_walked_per_second = AAZIntType(
                serialized_name="blobsWalkedPerSecond",
                flags={"read_only": True},
            )
            status.imported_directories = AAZIntType(
                serialized_name="importedDirectories",
                flags={"read_only": True},
            )
            status.imported_files = AAZIntType(
                serialized_name="importedFiles",
                flags={"read_only": True},
            )
            status.imported_symlinks = AAZIntType(
                serialized_name="importedSymlinks",
                flags={"read_only": True},
            )
            status.last_completion_time = AAZStrType(
                serialized_name="lastCompletionTime",
                flags={"read_only": True},
            )
            status.last_started_time = AAZStrType(
                serialized_name="lastStartedTime",
                flags={"read_only": True},
            )
            status.preexisting_directories = AAZIntType(
                serialized_name="preexistingDirectories",
                flags={"read_only": True},
            )
            status.preexisting_files = AAZIntType(
                serialized_name="preexistingFiles",
                flags={"read_only": True},
            )
            status.preexisting_symlinks = AAZIntType(
                serialized_name="preexistingSymlinks",
                flags={"read_only": True},
            )
            status.state = AAZStrType(
                flags={"read_only": True},
            )
            status.status_message = AAZStrType(
                serialized_name="statusMessage",
                flags={"read_only": True},
            )
            status.total_blobs_imported = AAZIntType(
                serialized_name="totalBlobsImported",
                flags={"read_only": True},
            )
            status.total_blobs_walked = AAZIntType(
                serialized_name="totalBlobsWalked",
                flags={"read_only": True},
            )
            status.total_conflicts = AAZIntType(
                serialized_name="totalConflicts",
                flags={"read_only": True},
            )
            status.total_errors = AAZIntType(
                serialized_name="totalErrors",
                flags={"read_only": True},
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
