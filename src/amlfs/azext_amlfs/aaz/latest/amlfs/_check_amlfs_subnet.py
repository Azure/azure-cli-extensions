# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "amlfs check-amlfs-subnet",
)
class CheckAmlfsSubnet(AAZCommand):
    """Check that subnets will be valid for AML file system create calls.

    :example: Amlfs check subnet
        az amlfs check-amlfs-subnet --filesystem-subnet subnet_id --sku AMLFS-Durable-Premium-250 --location eastus --storage-capacity-tb 16
    """

    _aaz_info = {
        "version": "2023-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.storagecache/checkamlfssubnets", "2023-05-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return None

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        # define Arg Group "AmlFilesystemSubnetInfo"

        _args_schema = cls._args_schema
        _args_schema.filesystem_subnet = AAZStrArg(
            options=["--filesystem-subnet"],
            arg_group="AmlFilesystemSubnetInfo",
            help="Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space.",
        )
        _args_schema.location = AAZStrArg(
            options=["--location"],
            arg_group="AmlFilesystemSubnetInfo",
            help="Region that the AML file system will be created in.",
        )
        _args_schema.storage_capacity = AAZFloatArg(
            options=["--storage-capacity"],
            arg_group="AmlFilesystemSubnetInfo",
            help="The size of the AML file system, in TiB.",
        )

        # define Arg Group "Sku"

        _args_schema = cls._args_schema
        _args_schema.sku = AAZStrArg(
            options=["--sku"],
            arg_group="Sku",
            help="SKU name for this resource.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CheckAmlFSSubnets(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    class CheckAmlFSSubnets(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/checkAmlFSSubnets",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("filesystemSubnet", AAZStrType, ".filesystem_subnet")
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("sku", AAZObjectType)
            _builder.set_prop("storageCapacityTiB", AAZFloatType, ".storage_capacity")

            sku = _builder.get(".sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            pass


class _CheckAmlfsSubnetHelper:
    """Helper class for CheckAmlfsSubnet"""


__all__ = ["CheckAmlfsSubnet"]
