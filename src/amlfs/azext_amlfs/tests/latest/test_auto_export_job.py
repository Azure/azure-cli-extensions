# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import time
from azure.cli.testsdk import *

class AmlfsAutoExportJobScenario(ScenarioTest):
    def _wait_for_auto_export_job_completion(self, amlfs_name, auto_export_job_name, max_attempts=60):
        """Helper method to poll for auto export job completion."""
        terminal_states = ['Disabled', 'Failed']
        for attempt in range(max_attempts):
            result = self.cmd(f'amlfs auto-export show -g {{rg}} --aml-filesystem-name {amlfs_name} --auto-export-job-name {auto_export_job_name}').get_output_in_json()
            if result.get('state', '') in terminal_states:
                break
            time.sleep(5)

    def _wait_for_auto_export_job_provisioning(self, amlfs_name, auto_export_job_name, target_state='Succeeded', max_attempts=60):
        """Helper method to poll for auto export job provisioning state."""
        for attempt in range(max_attempts):
            result = self.cmd(f'amlfs auto-export show -g {{rg}} --aml-filesystem-name {amlfs_name} --auto-export-job-name {auto_export_job_name}').get_output_in_json()
            current_state = result.get('provisioningState', '')
            if current_state == target_state:
                return True
            elif current_state in ['Failed', 'Canceled']:
                return False
            time.sleep(5)
        return False

    def _get_storage_account_id(self, resource_group, storage_account_name):
        """Helper method to get storage account resource ID"""
        return f"/subscriptions/{self.get_subscription_id()}/resourceGroups/{resource_group}/providers/Microsoft.Storage/storageAccounts/{storage_account_name}"

    def _get_container_id(self, resource_group, storage_account_name, container_name):
        """Helper method to get container resource ID"""
        return f"/subscriptions/{self.get_subscription_id()}/resourceGroups/{resource_group}/providers/Microsoft.Storage/storageAccounts/{storage_account_name}/blobServices/default/containers/{container_name}"
    
    @ResourceGroupPreparer(location='canadacentral')
    @StorageAccountPreparer(name_prefix='amlfsexportsa', kind='StorageV2', location='canadacentral')
    def test_auto_export_job_crud(self, resource_group, storage_account):
        """Test the full CRUD operations for AMLFS auto export jobs with HSM settings."""
        self.kwargs.update({
            'vnet': self.create_random_name('vnet', 10),
            'subnet': self.create_random_name('subnet', 15),
            'amlfs': self.create_random_name('sys', 10),
            'auto_export_job': self.create_random_name('aejob', 10),
            'storage_account': storage_account,
            'import_container': self.create_random_name('import', 15),
            'logging_container': self.create_random_name('logging', 15)
        })

        # Create prerequisites: identity, network
        self.cmd('az network vnet create -n {vnet} -g {rg} --address-prefix 20.0.0.0/24')
        subnet_id = self.cmd('az network vnet subnet create -n {subnet} -g {rg} --address-prefix 20.0.0.0/24 --vnet-name {vnet} ').get_output_in_json()['id']

        self.kwargs.update({
            'subnet_id': subnet_id
        })

        # Configure storage account with shared key access enabled (required for HSM settings)
        self.cmd('az storage account update --name {storage_account} --resource-group {rg} --allow-shared-key-access true')

        # Get storage account connection string
        connection_string_result = self.cmd('az storage account show-connection-string --name {storage_account} --resource-group {rg}').get_output_in_json()
        self.kwargs['connection_string'] = connection_string_result['connectionString']

        # Create containers for HSM settings
        self.cmd('az storage container create --name {import_container} --connection-string "{connection_string}"')
        self.cmd('az storage container create --name {logging_container} --connection-string "{connection_string}"')

        # Get container resource IDs for HSM settings
        import_container_id = self._get_container_id(resource_group, storage_account, self.kwargs['import_container'])
        logging_container_id = self._get_container_id(resource_group, storage_account, self.kwargs['logging_container'])
        self.kwargs.update({
            'import_container_id': import_container_id,
            'logging_container_id': logging_container_id
        })

        # Create AMLFS with HSM settings
        self.cmd('az amlfs create '
                 '--name {amlfs} '
                 '--resource-group {rg} '
                 '--sku AMLFS-Durable-Premium-250 '
                 '--storage-capacity 16 '
                 '--zones 1 '
                 '--maintenance-window dayOfWeek=friday timeOfDayUtc=22:00 '
                 '--filesystem-subnet {subnet_id} '
                 '--hsm-settings container="{import_container_id}" '
                 'logging-container="{logging_container_id}" '
                 'import-prefix="/"')

        # Wait for AMLFS to be ready
        self.cmd('az amlfs wait --name {amlfs} --resource-group {rg} --created --timeout 1800')

        current_auto_export_job_count = len(self.cmd('az amlfs auto-export list -g {rg} --aml-filesystem-name {amlfs}').get_output_in_json())
        self.kwargs['current_auto_export_job_count'] = current_auto_export_job_count

        # Test auto export job create
        self.cmd('az amlfs auto-export create -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job} --location canadacentral --auto-export-prefixes "[/]" --admin-status Enable', checks=[
            self.check('name', '{auto_export_job}'),
            self.check('location', 'canadacentral'),
            self.check('autoExportPrefixes', ['/']),
            self.check('adminStatus', 'Enable')
        ])
        current_auto_export_job_count += 1
        self.kwargs['current_auto_export_job_count'] = current_auto_export_job_count
        
        # Wait for auto export job provisioning to complete
        self._wait_for_auto_export_job_provisioning('{amlfs}', '{auto_export_job}')

        # Test auto export job show
        self.cmd('az amlfs auto-export show -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job}', checks=[
            self.check('name', '{auto_export_job}'),
            self.check('location', 'canadacentral'),
            self.check('autoExportPrefixes', ['/']),
            self.check('adminStatus', 'Enable')
        ])
        
        # Test auto export job list
        self.cmd('az amlfs auto-export list -g {rg} --aml-filesystem-name {amlfs}', checks=[
            self.check('length(@)', current_auto_export_job_count),
            self.check('[0].name', '{auto_export_job}'),
            self.check('[0].location', 'canadacentral')
        ])

        # Test auto export job update with tags
        self.cmd('az amlfs auto-export update -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job} --tags "Dept=ContosoAds" "Environment=Test"', checks=[
            self.check('name', '{auto_export_job}'),
            self.check('tags.Dept', 'ContosoAds'),
            self.check('tags.Environment', 'Test')
        ])
        
        # Test auto export job show with tags
        self.cmd('az amlfs auto-export show -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job}', checks=[
            self.check('name', '{auto_export_job}'),
            self.check('location', 'canadacentral'),
            self.check('autoExportPrefixes', ['/']),
            self.check('adminStatus', 'Enable'),
            self.check('tags.Dept', 'ContosoAds'),
            self.check('tags.Environment', 'Test')
        ])
        
        # Wait for a little while to ensure the job is in a stable state
        # and proper roles have been assigned and propagated
        time.sleep(120)

        # Test auto export job update (disable the job)
        self.cmd('az amlfs auto-export update -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job} --admin-status Disable', checks=[
            self.check('name', '{auto_export_job}'),
            self.check('adminStatus', 'Disable')
        ])
        
        # Test auto export job delete
        self.cmd('az amlfs auto-export delete -g {rg} --aml-filesystem-name {amlfs} --auto-export-job-name {auto_export_job} -y')
        
        # Poll until the auto export list returns an empty list
        # but not more than the expected count
        for _ in range(60):
            auto_exports = self.cmd('az amlfs auto-export list -g {rg} --aml-filesystem-name {amlfs}').get_output_in_json()
            if len(auto_exports) == 0:
                break
            time.sleep(5)

        # Cleanup AMLFS
        self.cmd('az amlfs delete -n {amlfs} -g {rg} -y')
