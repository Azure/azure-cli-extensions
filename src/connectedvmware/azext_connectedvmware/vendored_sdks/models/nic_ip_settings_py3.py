# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class NicIPSettings(Model):
    """Defines the network interface ip settings.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param allocation_method: Gets or sets the nic allocation method. Possible
     values include: 'unset', 'dynamic', 'static', 'linklayer', 'random',
     'other'
    :type allocation_method: str or
     ~azure.mgmt.vmware.v2020_10_01_preview.models.IPAddressAllocationMethod
    :param dns_servers: Gets or sets the dns servers.
    :type dns_servers: list[str]
    :param gateway: Gets or sets the gateway.
    :type gateway: list[str]
    :param ip_address: Gets or sets the ip address for the nic.
    :type ip_address: str
    :param subnet_mask: Gets or sets the mask.
    :type subnet_mask: str
    :ivar primary_wins_server: Gets or sets the primary server.
    :vartype primary_wins_server: str
    :ivar secondary_wins_server: Gets or sets the secondary server.
    :vartype secondary_wins_server: str
    :ivar ip_address_info: Gets or sets the IP address information being
     reported for this NIC. This contains the same IPv4 information above plus
     IPV6 information.
    :vartype ip_address_info:
     list[~azure.mgmt.vmware.v2020_10_01_preview.models.NicIPAddressSettings]
    """

    _validation = {
        'primary_wins_server': {'readonly': True},
        'secondary_wins_server': {'readonly': True},
        'ip_address_info': {'readonly': True},
    }

    _attribute_map = {
        'allocation_method': {'key': 'allocationMethod', 'type': 'str'},
        'dns_servers': {'key': 'dnsServers', 'type': '[str]'},
        'gateway': {'key': 'gateway', 'type': '[str]'},
        'ip_address': {'key': 'ipAddress', 'type': 'str'},
        'subnet_mask': {'key': 'subnetMask', 'type': 'str'},
        'primary_wins_server': {'key': 'primaryWinsServer', 'type': 'str'},
        'secondary_wins_server': {'key': 'secondaryWinsServer', 'type': 'str'},
        'ip_address_info': {'key': 'ipAddressInfo', 'type': '[NicIPAddressSettings]'},
    }

    def __init__(self, *, allocation_method=None, dns_servers=None, gateway=None, ip_address: str=None, subnet_mask: str=None, **kwargs) -> None:
        super(NicIPSettings, self).__init__(**kwargs)
        self.allocation_method = allocation_method
        self.dns_servers = dns_servers
        self.gateway = gateway
        self.ip_address = ip_address
        self.subnet_mask = subnet_mask
        self.primary_wins_server = None
        self.secondary_wins_server = None
        self.ip_address_info = None
