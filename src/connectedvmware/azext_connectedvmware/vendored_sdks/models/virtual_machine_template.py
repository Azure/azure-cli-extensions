# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VirtualMachineTemplate(Model):
    """Define the virtualMachineTemplate.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar uuid: Gets or sets a unique identifier for this resource.
    :vartype uuid: str
    :param v_center_id: Gets or sets the ARM Id of the vCenter resource in
     which this template resides.
    :type v_center_id: str
    :param mo_ref_id: Gets or sets the vCenter MoRef (Managed Object
     Reference) ID for the virtual machine
     template.
    :type mo_ref_id: str
    :param inventory_item_id: Gets or sets the inventory Item ID for the
     virtual machine template.
    :type inventory_item_id: str
    :ivar mo_name: Gets or sets the vCenter Managed Object name for the
     virtual machine template.
    :vartype mo_name: str
    :ivar memory_size_mb: Gets or sets memory size in MBs for the template.
    :vartype memory_size_mb: int
    :ivar num_cp_us: Gets or sets the number of vCPUs for the template.
    :vartype num_cp_us: int
    :ivar num_cores_per_socket: Gets or sets the number of cores per socket
     for the template.
     Defaults to 1 if unspecified.
    :vartype num_cores_per_socket: int
    :ivar os_type: Gets or sets the type of the os. Possible values include:
     'Windows', 'Linux', 'Other'
    :vartype os_type: str or
     ~azure.mgmt.vmware.v2020_10_01_preview.models.OsType
    :ivar os_name: Gets or sets os name.
    :vartype os_name: str
    :ivar folder_path: Gets or sets the folder path of the template.
    :vartype folder_path: str
    :ivar network_interfaces: Gets or sets the network interfaces of the
     template.
    :vartype network_interfaces:
     list[~azure.mgmt.vmware.v2020_10_01_preview.models.NetworkInterface]
    :ivar disks: Gets or sets the disks the template.
    :vartype disks:
     list[~azure.mgmt.vmware.v2020_10_01_preview.models.VirtualDisk]
    :ivar custom_resource_name: Gets the name of the corresponding resource in
     Kubernetes.
    :vartype custom_resource_name: str
    :ivar provisioning_state: Gets or sets the provisioning state.
    :vartype provisioning_state: str
    :param location: Required. Gets or sets the location.
    :type location: str
    :param extended_location: Gets or sets the extended location.
    :type extended_location:
     ~azure.mgmt.vmware.v2020_10_01_preview.models.ExtendedLocation
    :param system_data: The system data.
    :type system_data:
     ~azure.mgmt.vmware.v2020_10_01_preview.models.SystemData
    :param tags: Gets or sets the Resource tags.
    :type tags: dict[str, str]
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar id: Gets or sets the Id.
    :vartype id: str
    :ivar type: Gets or sets the type of the resource.
    :vartype type: str
    :param kind: Metadata used by portal/tooling/etc to render different UX
     experiences for resources of the same type; e.g. ApiApps are a kind of
     Microsoft.Web/sites type.  If supported, the resource provider must
     validate and persist this value.
    :type kind: str
    """

    _validation = {
        'uuid': {'readonly': True},
        'mo_name': {'readonly': True},
        'memory_size_mb': {'readonly': True},
        'num_cp_us': {'readonly': True},
        'num_cores_per_socket': {'readonly': True},
        'os_type': {'readonly': True},
        'os_name': {'readonly': True},
        'folder_path': {'readonly': True},
        'network_interfaces': {'readonly': True},
        'disks': {'readonly': True},
        'custom_resource_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'location': {'required': True},
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'v_center_id': {'key': 'properties.vCenterId', 'type': 'str'},
        'mo_ref_id': {'key': 'properties.moRefId', 'type': 'str'},
        'inventory_item_id': {'key': 'properties.inventoryItemId', 'type': 'str'},
        'mo_name': {'key': 'properties.moName', 'type': 'str'},
        'memory_size_mb': {'key': 'properties.memorySizeMB', 'type': 'int'},
        'num_cp_us': {'key': 'properties.numCPUs', 'type': 'int'},
        'num_cores_per_socket': {'key': 'properties.numCoresPerSocket', 'type': 'int'},
        'os_type': {'key': 'properties.osType', 'type': 'str'},
        'os_name': {'key': 'properties.osName', 'type': 'str'},
        'folder_path': {'key': 'properties.folderPath', 'type': 'str'},
        'network_interfaces': {'key': 'properties.networkInterfaces', 'type': '[NetworkInterface]'},
        'disks': {'key': 'properties.disks', 'type': '[VirtualDisk]'},
        'custom_resource_name': {'key': 'properties.customResourceName', 'type': 'str'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(VirtualMachineTemplate, self).__init__(**kwargs)
        self.uuid = None
        self.v_center_id = kwargs.get('v_center_id', None)
        self.mo_ref_id = kwargs.get('mo_ref_id', None)
        self.inventory_item_id = kwargs.get('inventory_item_id', None)
        self.mo_name = None
        self.memory_size_mb = None
        self.num_cp_us = None
        self.num_cores_per_socket = None
        self.os_type = None
        self.os_name = None
        self.folder_path = None
        self.network_interfaces = None
        self.disks = None
        self.custom_resource_name = None
        self.provisioning_state = None
        self.location = kwargs.get('location', None)
        self.extended_location = kwargs.get('extended_location', None)
        self.system_data = kwargs.get('system_data', None)
        self.tags = kwargs.get('tags', None)
        self.name = None
        self.id = None
        self.type = None
        self.kind = kwargs.get('kind', None)
