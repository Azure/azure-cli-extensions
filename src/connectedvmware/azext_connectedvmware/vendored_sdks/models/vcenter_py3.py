# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class VCenter(Model):
    """Defines the vCenter.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    All required parameters must be populated in order to send to Azure.

    :ivar uuid: Gets or sets a unique identifier for this resource.
    :vartype uuid: str
    :param fqdn: Required. Gets or sets the FQDN/IPAddress of the vCenter.
    :type fqdn: str
    :param port: Gets or sets the port of the vCenter.
    :type port: int
    :ivar version: Gets or sets the version of the vCenter.
    :vartype version: str
    :ivar instance_uuid: Gets or sets the instance UUID of the vCenter.
    :vartype instance_uuid: str
    :ivar connection_status: Gets or sets the connection status to the
     vCenter.
    :vartype connection_status: str
    :ivar custom_resource_name: Gets the name of the corresponding resource in
     Kubernetes.
    :vartype custom_resource_name: str
    :param credentials: Username / Password Credentials to connect to vcenter.
    :type credentials:
     ~azure.mgmt.vmware.v2020_10_01_preview.models.VICredential
    :ivar provisioning_state: Gets or sets the provisioning state.
    :vartype provisioning_state: str
    :param location: Required. Gets or sets the location.
    :type location: str
    :param extended_location: Gets or sets the extended location.
    :type extended_location:
     ~azure.mgmt.vmware.v2020_10_01_preview.models.ExtendedLocation
    :param system_data: The system data.
    :type system_data:
     ~azure.mgmt.vmware.v2020_10_01_preview.models.SystemData
    :param tags: Gets or sets the Resource tags.
    :type tags: dict[str, str]
    :ivar name: Gets or sets the name.
    :vartype name: str
    :ivar id: Gets or sets the Id.
    :vartype id: str
    :ivar type: Gets or sets the type of the resource.
    :vartype type: str
    :param kind: Metadata used by portal/tooling/etc to render different UX
     experiences for resources of the same type; e.g. ApiApps are a kind of
     Microsoft.Web/sites type.  If supported, the resource provider must
     validate and persist this value.
    :type kind: str
    """

    _validation = {
        'uuid': {'readonly': True},
        'fqdn': {'required': True},
        'port': {'maximum': 65535, 'minimum': 1},
        'version': {'readonly': True},
        'instance_uuid': {'readonly': True},
        'connection_status': {'readonly': True},
        'custom_resource_name': {'readonly': True},
        'provisioning_state': {'readonly': True},
        'location': {'required': True},
        'name': {'readonly': True},
        'id': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'uuid': {'key': 'properties.uuid', 'type': 'str'},
        'fqdn': {'key': 'properties.fqdn', 'type': 'str'},
        'port': {'key': 'properties.port', 'type': 'int'},
        'version': {'key': 'properties.version', 'type': 'str'},
        'instance_uuid': {'key': 'properties.instanceUuid', 'type': 'str'},
        'connection_status': {'key': 'properties.connectionStatus', 'type': 'str'},
        'custom_resource_name': {'key': 'properties.customResourceName', 'type': 'str'},
        'credentials': {'key': 'properties.credentials', 'type': 'VICredential'},
        'provisioning_state': {'key': 'properties.provisioningState', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'extended_location': {'key': 'extendedLocation', 'type': 'ExtendedLocation'},
        'system_data': {'key': 'systemData', 'type': 'SystemData'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'name': {'key': 'name', 'type': 'str'},
        'id': {'key': 'id', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'kind': {'key': 'kind', 'type': 'str'},
    }

    def __init__(self, *, fqdn: str, location: str, port: int=None, credentials=None, extended_location=None, system_data=None, tags=None, kind: str=None, **kwargs) -> None:
        super(VCenter, self).__init__(**kwargs)
        self.uuid = None
        self.fqdn = fqdn
        self.port = port
        self.version = None
        self.instance_uuid = None
        self.connection_status = None
        self.custom_resource_name = None
        self.credentials = credentials
        self.provisioning_state = None
        self.location = location
        self.extended_location = extended_location
        self.system_data = system_data
        self.tags = tags
        self.name = None
        self.id = None
        self.type = None
        self.kind = kind
