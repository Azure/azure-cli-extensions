# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.service_client import SDKClient
from msrest import Serializer, Deserializer
from msrestazure import AzureConfiguration
from .version import VERSION
from .operations.operations import Operations
from .operations.resource_pools_operations import ResourcePoolsOperations
from .operations.vcenters_operations import VCentersOperations
from .operations.virtual_machines_operations import VirtualMachinesOperations
from .operations.virtual_machine_templates_operations import VirtualMachineTemplatesOperations
from .operations.virtual_networks_operations import VirtualNetworksOperations
from .operations.inventory_items_operations import InventoryItemsOperations
from . import models


class AzureArcVMwareManagementServiceAPIConfiguration(AzureConfiguration):
    """Configuration for AzureArcVMwareManagementServiceAPI
    Note that all parameters used to create this instance are saved as instance
    attributes.

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: The Subscription ID.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        if credentials is None:
            raise ValueError("Parameter 'credentials' must not be None.")
        if subscription_id is None:
            raise ValueError("Parameter 'subscription_id' must not be None.")
        if not base_url:
            base_url = 'https://management.azure.com'

        super(AzureArcVMwareManagementServiceAPIConfiguration, self).__init__(base_url)

        self.add_user_agent('azure-mgmt-connectedvmware/{}'.format(VERSION))
        self.add_user_agent('Azure-SDK-For-Python')

        self.credentials = credentials
        self.subscription_id = subscription_id


class AzureArcVMwareManagementServiceAPI(SDKClient):
    """Self service experience for VMware.

    :ivar config: Configuration for client.
    :vartype config: AzureArcVMwareManagementServiceAPIConfiguration

    :ivar operations: Operations operations
    :vartype operations: azure.mgmt.vmware.v2020_10_01_preview.operations.Operations
    :ivar resource_pools: ResourcePools operations
    :vartype resource_pools: azure.mgmt.vmware.v2020_10_01_preview.operations.ResourcePoolsOperations
    :ivar vcenters: VCenters operations
    :vartype vcenters: azure.mgmt.vmware.v2020_10_01_preview.operations.VCentersOperations
    :ivar virtual_machines: VirtualMachines operations
    :vartype virtual_machines: azure.mgmt.vmware.v2020_10_01_preview.operations.VirtualMachinesOperations
    :ivar virtual_machine_templates: VirtualMachineTemplates operations
    :vartype virtual_machine_templates: azure.mgmt.vmware.v2020_10_01_preview.operations.VirtualMachineTemplatesOperations
    :ivar virtual_networks: VirtualNetworks operations
    :vartype virtual_networks: azure.mgmt.vmware.v2020_10_01_preview.operations.VirtualNetworksOperations
    :ivar inventory_items: InventoryItems operations
    :vartype inventory_items: azure.mgmt.vmware.v2020_10_01_preview.operations.InventoryItemsOperations

    :param credentials: Credentials needed for the client to connect to Azure.
    :type credentials: :mod:`A msrestazure Credentials
     object<msrestazure.azure_active_directory>`
    :param subscription_id: The Subscription ID.
    :type subscription_id: str
    :param str base_url: Service URL
    """

    def __init__(
            self, credentials, subscription_id, base_url=None):

        self.config = AzureArcVMwareManagementServiceAPIConfiguration(credentials, subscription_id, base_url)
        super(AzureArcVMwareManagementServiceAPI, self).__init__(self.config.credentials, self.config)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self.api_version = '2020-10-01-preview'
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)

        self.operations = Operations(
            self._client, self.config, self._serialize, self._deserialize)
        self.resource_pools = ResourcePoolsOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.vcenters = VCentersOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.virtual_machines = VirtualMachinesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.virtual_machine_templates = VirtualMachineTemplatesOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.virtual_networks = VirtualNetworksOperations(
            self._client, self.config, self._serialize, self._deserialize)
        self.inventory_items = InventoryItemsOperations(
            self._client, self.config, self._serialize, self._deserialize)
