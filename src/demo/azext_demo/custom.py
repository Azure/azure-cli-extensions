# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from email.policy import default
from multiprocessing import Value
from knack.log import get_logger
from .aaz.latest.redisenterprise.database import Flush as _DatabaseFlush
from .aaz.latest.redisenterprise.database import ForceUnlink as _DatabaseForceUnlink
from .aaz.latest.redisenterprise.database import Create as _DatabaseCreate
from .aaz.latest.redisenterprise.database import Delete as _DatabaseDelete
from .aaz.latest.redisenterprise.database import Export as _DatabaseExport
from .aaz.latest.redisenterprise.database import Import as _DatabaseImport
from .aaz.latest.redisenterprise.database import ListKey as _DatabaseListKey
from .aaz.latest.redisenterprise.database import RegenerateKey as _DatabaseRegenerateKey
from .aaz.latest.redisenterprise.database import ListKey as _DatabaseListKey
from .aaz.latest.redisenterprise.database import Show as _DatabaseShow
from .aaz.latest.redisenterprise.database import Update as _DatabaseUpdate
from .aaz.latest.redisenterprise.database import Wait as _DatabaseWait

logger = get_logger(__name__)

class DatabaseFlush(_DatabaseFlush):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseForceUnlink(_DatabaseForceUnlink):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseCreate(_DatabaseCreate):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["-n", "--name", "--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseDelete(_DatabaseDelete):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["-n", "--name", "--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseExport(_DatabaseExport):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseImport(_DatabaseImport):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseRegenerateKey(_DatabaseRegenerateKey):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseListKey(_DatabaseListKey):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseShow(_DatabaseShow):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["-n", "--name", "--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseUpdate(_DatabaseUpdate):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["-n", "--name", "--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema

class DatabaseWait(_DatabaseWait):

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZStrArg
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.database_name = AAZStrArg(
            options=["-n", "--name", "--database-name"],
            help="The name of the database.",
            required=False,
        )
        return args_schema


def redisenterprise_create(cmd,
                           resource_group_name,
                           cluster_name,
                           location,
                           sku,
                           tags=None,
                           capacity=None,
                           zones=None,
                           minimum_tls_version=None,
                           client_protocol=None,
                           port=None,
                           clustering_policy=None,
                           eviction_policy=None,
                           persistence=None,
                           modules=None,
                           no_database=False,
                           no_wait=False,
                           group_nickname=None,
                           linked_databases=None):
    if (no_database and any(x is not None for x in [client_protocol,
                                                    port,
                                                    clustering_policy,
                                                    eviction_policy,
                                                    persistence,
                                                    modules,
                                                    group_nickname,
                                                    linked_databases])):
        error_msg = ('--no-database conflicts with the specified database parameter(s): '
                     '{}'.format(', '.join(database_param_list_str)))
        recommendation = ('Try to use --no-database without specifying database parameters, '
                          'or else try removing --no-database')
        raise MutuallyExclusiveArgumentError(error_msg, recommendation)
    
    from .aaz.latest.redisenterprise import Create as CacheCreate
    from azure.cli.core.commands import LongRunningOperation
    if (no_database and all(x is None for x in [client_protocol,
                                                port,
                                                clustering_policy,
                                                eviction_policy,
                                                persistence,
                                                modules,
                                                group_nickname,
                                                linked_databases])):
        return LongRunningOperation(cmd.cli_ctx)(
            CacheCreate(cli_ctx=cmd.cli_ctx)(command_args={
                "tags": tags,
                "location": location,
                "sku": sku ,
                "capacity" : capacity,
                "zones": zones,
                "minimum_tls_version": minimum_tls_version
            })
        )
    LongRunningOperation(cmd.cli_ctx)(
            CacheCreate(cli_ctx=cmd.cli_ctx)(command_args={
                "tags": tags,
                "location": location,
                "sku": sku ,
                "capacity" : capacity,
                "zones": zones,
                "minimum_tls_version": minimum_tls_version
            })
        )

    return LongRunningOperation(cmd.cli_ctx)(
        DatabaseCreate(cli_ctx=cmd.cli_ctx)(command_args={
            "client_protocol": client_protocol,
            "port": port,
            "clustering_policy": clustering_policy,
            "eviction_policy": eviction_policy,
            "persistence": persistence,
            "group_nickname": group_nickname,
            "linked_databases": linked_databases,
            "modules": modules,
        })
    )

