# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

import os
from azure.cli.testsdk import ScenarioTest
from .. import try_manual, raise_if
from azure.cli.testsdk import ResourceGroupPreparer


TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


@try_manual
def setup(test, rg):
    pass


# EXAMPLE: /Factories/put/Factories_CreateOrUpdate
@try_manual
def step__factories_put_factories_createorupdate(test, rg):
    test.cmd('az datafactory factory create '
             '--location "East US" '
             '--name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Factories/get/Factories_Get
@try_manual
def step__factories_get_factories_get(test, rg):
    test.cmd('az datafactory factory show '
             '--name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Factories/get/Factories_List
@try_manual
def step__factories_get_factories_list(test, rg):
    test.cmd('az datafactory factory list '
             '-g ""',
             checks=[])


# EXAMPLE: /Factories/get/Factories_ListByResourceGroup
@try_manual
def step__factories_get_factories_listbyresourcegroup(test, rg):
    test.cmd('az datafactory factory list '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Factories/post/Factories_ConfigureFactoryRepo
@try_manual
def step__factories_post_factories_configurefactoryrepo(test, rg):
    test.cmd('az datafactory factory configure-factory-repo '
             '--factory-resource-id "/subscriptions/{subscription_id}/resourceGroups/{rg}/providers/Microsoft.DataFacto'
             'ry/factories/{exampleFactoryName}" '
             '--factory-vsts-configuration account-name="ADF" collaboration-branch="master" last-commit-id="" project-n'
             'ame="project" repository-name="repo" root-folder="/" tenant-id="" '
             '--location "East US"',
             checks=[])


# EXAMPLE: /Factories/post/Factories_GetDataPlaneAccess
@try_manual
def step__factories_post_factories_getdataplaneaccess(test, rg):
    test.cmd('az datafactory factory get-data-plane-access '
             '--name "{exampleFactoryName}" '
             '--access-resource-path "" '
             '--expire-time "2018-11-10T09:46:20.2659347Z" '
             '--permissions "r" '
             '--profile-name "DefaultProfile" '
             '--start-time "2018-11-10T02:46:20.2659347Z" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Factories/post/Factories_GetGitHubAccessToken
@try_manual
def step__factories_post_factories_getgithubaccesstoken(test, rg):
    test.cmd('az datafactory factory get-git-hub-access-token '
             '--name "{exampleFactoryName}" '
             '--git-hub-access-code "some" '
             '--git-hub-access-token-base-url "some" '
             '--git-hub-client-id "some" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Factories/patch/Factories_Update
@try_manual
def step__factories_patch_factories_update(test, rg):
    test.cmd('az datafactory factory update '
             '--name "{exampleFactoryName}" '
             '--tags exampleTag="exampleValue" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/put/IntegrationRuntimes_Create
@try_manual
def step__integrationruntimes_put_integrationruntimes_create(test, rg):
    test.cmd('az datafactory integration-runtime managed create '
             '--factory-name "{exampleFactoryName}" '
             '--description "A selfhosted integration runtime" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/put/DataFlows_Create
@try_manual
def step__dataflows_put_dataflows_create(test, rg):
    test.cmd('az datafactory data-flow create '
             '--properties "{{\\"type\\":\\"MappingDataFlow\\",\\"description\\":\\"Sample demo data flow to convert cu'
             'rrencies showing usage of union, derive and conditional split transformation.\\",\\"typeProperties\\":{{'
             '\\"script\\":\\"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,Curr'
             'entConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\\\\nsource(out'
             'put(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as doubl'
             'e),allowSchemaDrift: true,validateSchema: false) ~> CADSource\\\\nUSDCurrency, CADSource union(byName: tr'
             'ue)~> Union\\\\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\\'
             '\\nNewCurrencyColumn split(Country == \'USD\',Country == \'CAD\',disjoint: false) ~> ConditionalSplit1@(U'
             'SD, CAD)\\\\nConditionalSplit1@USD sink(saveMode:\'overwrite\' ) ~> USDSink\\\\nConditionalSplit1@CAD sin'
             'k(saveMode:\'overwrite\' ) ~> CADSink\\",\\"sinks\\":[{{\\"name\\":\\"USDSink\\",\\"dataset\\":{{\\"type'
             '\\":\\"DatasetReference\\",\\"referenceName\\":\\"USDOutput\\"}}}},{{\\"name\\":\\"CADSink\\",\\"dataset'
             '\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CADOutput\\"}}}}],\\"sources\\":[{{\\"name'
             '\\":\\"USDCurrency\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CurrencyDa'
             'tasetUSD\\"}}}},{{\\"name\\":\\"CADSource\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referen'
             'ceName\\":\\"CurrencyDatasetCAD\\"}}}}]}}}}" '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/put/DataFlows_Create
@try_manual
def step__dataflows_put_dataflows_create(test, rg):
    test.cmd('az datafactory data-flow create '
             '--properties "{{\\"type\\":\\"MappingDataFlow\\",\\"description\\":\\"Sample demo data flow to convert cu'
             'rrencies showing usage of union, derive and conditional split transformation.\\",\\"typeProperties\\":{{'
             '\\"script\\":\\"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,Curr'
             'entConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\\\\nsource(out'
             'put(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as doubl'
             'e),allowSchemaDrift: true,validateSchema: false) ~> CADSource\\\\nUSDCurrency, CADSource union(byName: tr'
             'ue)~> Union\\\\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\\'
             '\\nNewCurrencyColumn split(Country == \'USD\',Country == \'CAD\',disjoint: false) ~> ConditionalSplit1@(U'
             'SD, CAD)\\\\nConditionalSplit1@USD sink(saveMode:\'overwrite\' ) ~> USDSink\\\\nConditionalSplit1@CAD sin'
             'k(saveMode:\'overwrite\' ) ~> CADSink\\",\\"sinks\\":[{{\\"name\\":\\"USDSink\\",\\"dataset\\":{{\\"type'
             '\\":\\"DatasetReference\\",\\"referenceName\\":\\"USDOutput\\"}}}},{{\\"name\\":\\"CADSink\\",\\"dataset'
             '\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CADOutput\\"}}}}],\\"sources\\":[{{\\"name'
             '\\":\\"USDCurrency\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CurrencyDa'
             'tasetUSD\\"}}}},{{\\"name\\":\\"CADSource\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referen'
             'ceName\\":\\"CurrencyDatasetCAD\\"}}}}]}}}}" '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/put/LinkedServices_Create
@try_manual
def step__linkedservices_put_linkedservices_create(test, rg):
    test.cmd('az datafactory linked-service create '
             '--factory-name "{exampleFactoryName}" '
             '--properties "{{\\"type\\":\\"AzureStorage\\",\\"typeProperties\\":{{\\"connectionString\\":{{\\"type\\":'
             '\\"SecureString\\",\\"value\\":\\"DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;Accoun'
             'tKey=<storage key>\\"}}}}}}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/put/LinkedServices_Create
@try_manual
def step__linkedservices_put_linkedservices_create(test, rg):
    test.cmd('az datafactory linked-service create '
             '--factory-name "{exampleFactoryName}" '
             '--properties "{{\\"type\\":\\"AzureStorage\\",\\"typeProperties\\":{{\\"connectionString\\":{{\\"type\\":'
             '\\"SecureString\\",\\"value\\":\\"DefaultEndpointsProtocol=https;AccountName=examplestorageaccount;Accoun'
             'tKey=<storage key>\\"}}}}}}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/put/LinkedServices_Update
@try_manual
def step__linkedservices_put_linkedservices_update(test, rg):
    test.cmd('az datafactory linked-service create '
             '--factory-name "{exampleFactoryName}" '
             '--properties "{{\\"type\\":\\"AzureStorage\\",\\"description\\":\\"Example description\\",\\"typeProperti'
             'es\\":{{\\"connectionString\\":{{\\"type\\":\\"SecureString\\",\\"value\\":\\"DefaultEndpointsProtocol=ht'
             'tps;AccountName=examplestorageaccount;AccountKey=<storage key>\\"}}}}}}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/put/LinkedServices_Update
@try_manual
def step__linkedservices_put_linkedservices_update(test, rg):
    test.cmd('az datafactory linked-service create '
             '--factory-name "{exampleFactoryName}" '
             '--properties "{{\\"type\\":\\"AzureStorage\\",\\"description\\":\\"Example description\\",\\"typeProperti'
             'es\\":{{\\"connectionString\\":{{\\"type\\":\\"SecureString\\",\\"value\\":\\"DefaultEndpointsProtocol=ht'
             'tps;AccountName=examplestorageaccount;AccountKey=<storage key>\\"}}}}}}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Datasets/put/Datasets_Create
@try_manual
def step__datasets_put_datasets_create(test, rg):
    test.cmd('az datafactory dataset create '
             '--properties "{{\\"type\\":\\"AzureBlob\\",\\"linkedServiceName\\":{{\\"type\\":\\"LinkedServiceReference'
             '\\",\\"referenceName\\":\\"exampleLinkedService\\"}},\\"parameters\\":{{\\"MyFileName\\":{{\\"type\\":\\"'
             'String\\"}},\\"MyFolderPath\\":{{\\"type\\":\\"String\\"}}}},\\"typeProperties\\":{{\\"format\\":{{\\"typ'
             'e\\":\\"TextFormat\\"}},\\"fileName\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@dataset().MyFileName'
             '\\"}},\\"folderPath\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@dataset().MyFolderPath\\"}}}}}}" '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Datasets/put/Datasets_Create
@try_manual
def step__datasets_put_datasets_create(test, rg):
    test.cmd('az datafactory dataset create '
             '--properties "{{\\"type\\":\\"AzureBlob\\",\\"linkedServiceName\\":{{\\"type\\":\\"LinkedServiceReference'
             '\\",\\"referenceName\\":\\"exampleLinkedService\\"}},\\"parameters\\":{{\\"MyFileName\\":{{\\"type\\":\\"'
             'String\\"}},\\"MyFolderPath\\":{{\\"type\\":\\"String\\"}}}},\\"typeProperties\\":{{\\"format\\":{{\\"typ'
             'e\\":\\"TextFormat\\"}},\\"fileName\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@dataset().MyFileName'
             '\\"}},\\"folderPath\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@dataset().MyFolderPath\\"}}}}}}" '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /ActivityRuns/post/ActivityRuns_QueryByPipelineRun
@try_manual
def step__activityruns_post_activityruns_querybypipelinerun(test, rg):
    test.cmd('az datafactory activity-run query-by-pipeline-run '
             '--factory-name "{exampleFactoryName}" '
             '--last-updated-after "2018-06-16T00:36:44.3345758Z" '
             '--last-updated-before "2018-06-16T00:49:48.3686473Z" '
             '--resource-group "{rg}" '
             '--run-id "2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"',
             checks=[])


# EXAMPLE: /Datasets/put/Datasets_Update
@try_manual
def step__datasets_put_datasets_update(test, rg):
    test.cmd('az datafactory dataset create '
             '--properties "{{\\"type\\":\\"AzureBlob\\",\\"description\\":\\"Example description\\",\\"linkedServiceNa'
             'me\\":{{\\"type\\":\\"LinkedServiceReference\\",\\"referenceName\\":\\"exampleLinkedService\\"}},\\"param'
             'eters\\":{{\\"MyFileName\\":{{\\"type\\":\\"String\\"}},\\"MyFolderPath\\":{{\\"type\\":\\"String\\"}}}},'
             '\\"typeProperties\\":{{\\"format\\":{{\\"type\\":\\"TextFormat\\"}},\\"fileName\\":{{\\"type\\":\\"Expres'
             'sion\\",\\"value\\":\\"@dataset().MyFileName\\"}},\\"folderPath\\":{{\\"type\\":\\"Expression\\",\\"value'
             '\\":\\"@dataset().MyFolderPath\\"}}}}}}" '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Datasets/put/Datasets_Update
@try_manual
def step__datasets_put_datasets_update(test, rg):
    test.cmd('az datafactory dataset create '
             '--properties "{{\\"type\\":\\"AzureBlob\\",\\"description\\":\\"Example description\\",\\"linkedServiceNa'
             'me\\":{{\\"type\\":\\"LinkedServiceReference\\",\\"referenceName\\":\\"exampleLinkedService\\"}},\\"param'
             'eters\\":{{\\"MyFileName\\":{{\\"type\\":\\"String\\"}},\\"MyFolderPath\\":{{\\"type\\":\\"String\\"}}}},'
             '\\"typeProperties\\":{{\\"format\\":{{\\"type\\":\\"TextFormat\\"}},\\"fileName\\":{{\\"type\\":\\"Expres'
             'sion\\",\\"value\\":\\"@dataset().MyFileName\\"}},\\"folderPath\\":{{\\"type\\":\\"Expression\\",\\"value'
             '\\":\\"@dataset().MyFolderPath\\"}}}}}}" '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlowDebugSession/post/DataFlowDebugSession_ExecuteCommand
@try_manual
def step__dataflowdebugsession_post_dataflowdebugsession_executecommand(test, rg):
    test.cmd('az datafactory data-flow-debug-session execute-command '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--command "executePreviewQuery" '
             '--command-payload row-limits=100 stream-name="source1" '
             '--session-id "f06ed247-9d07-49b2-b05e-2cb4a2fc871e"',
             checks=[])


# EXAMPLE: /DataFlowDebugSession/post/DataFlowDebugSession_QueryByFactory
@try_manual
def step__dataflowdebugsession_post_dataflowdebugsession_querybyfactory(test, rg):
    test.cmd('az datafactory data-flow-debug-session query-by-factory '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/put/DataFlows_Update
@try_manual
def step__dataflows_put_dataflows_update(test, rg):
    test.cmd('az datafactory data-flow create '
             '--properties "{{\\"type\\":\\"MappingDataFlow\\",\\"description\\":\\"Sample demo data flow to convert cu'
             'rrencies showing usage of union, derive and conditional split transformation.\\",\\"typeProperties\\":{{'
             '\\"script\\":\\"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,Curr'
             'entConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\\\\nsource(out'
             'put(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as doubl'
             'e),allowSchemaDrift: true,validateSchema: false) ~> CADSource\\\\nUSDCurrency, CADSource union(byName: tr'
             'ue)~> Union\\\\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\\'
             '\\nNewCurrencyColumn split(Country == \'USD\',Country == \'CAD\',disjoint: false) ~> ConditionalSplit1@(U'
             'SD, CAD)\\\\nConditionalSplit1@USD sink(saveMode:\'overwrite\' ) ~> USDSink\\\\nConditionalSplit1@CAD sin'
             'k(saveMode:\'overwrite\' ) ~> CADSink\\",\\"sinks\\":[{{\\"name\\":\\"USDSink\\",\\"dataset\\":{{\\"type'
             '\\":\\"DatasetReference\\",\\"referenceName\\":\\"USDOutput\\"}}}},{{\\"name\\":\\"CADSink\\",\\"dataset'
             '\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CADOutput\\"}}}}],\\"sources\\":[{{\\"name'
             '\\":\\"USDCurrency\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CurrencyDa'
             'tasetUSD\\"}}}},{{\\"name\\":\\"CADSource\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referen'
             'ceName\\":\\"CurrencyDatasetCAD\\"}}}}]}}}}" '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/put/DataFlows_Update
@try_manual
def step__dataflows_put_dataflows_update(test, rg):
    test.cmd('az datafactory data-flow create '
             '--properties "{{\\"type\\":\\"MappingDataFlow\\",\\"description\\":\\"Sample demo data flow to convert cu'
             'rrencies showing usage of union, derive and conditional split transformation.\\",\\"typeProperties\\":{{'
             '\\"script\\":\\"source(output(PreviousConversionRate as double,Country as string,DateTime1 as string,Curr'
             'entConversionRate as double),allowSchemaDrift: false,validateSchema: false) ~> USDCurrency\\\\nsource(out'
             'put(PreviousConversionRate as double,Country as string,DateTime1 as string,CurrentConversionRate as doubl'
             'e),allowSchemaDrift: true,validateSchema: false) ~> CADSource\\\\nUSDCurrency, CADSource union(byName: tr'
             'ue)~> Union\\\\nUnion derive(NewCurrencyRate = round(CurrentConversionRate*1.25)) ~> NewCurrencyColumn\\'
             '\\nNewCurrencyColumn split(Country == \'USD\',Country == \'CAD\',disjoint: false) ~> ConditionalSplit1@(U'
             'SD, CAD)\\\\nConditionalSplit1@USD sink(saveMode:\'overwrite\' ) ~> USDSink\\\\nConditionalSplit1@CAD sin'
             'k(saveMode:\'overwrite\' ) ~> CADSink\\",\\"sinks\\":[{{\\"name\\":\\"USDSink\\",\\"dataset\\":{{\\"type'
             '\\":\\"DatasetReference\\",\\"referenceName\\":\\"USDOutput\\"}}}},{{\\"name\\":\\"CADSink\\",\\"dataset'
             '\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CADOutput\\"}}}}],\\"sources\\":[{{\\"name'
             '\\":\\"USDCurrency\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"CurrencyDa'
             'tasetUSD\\"}}}},{{\\"name\\":\\"CADSource\\",\\"dataset\\":{{\\"type\\":\\"DatasetReference\\",\\"referen'
             'ceName\\":\\"CurrencyDatasetCAD\\"}}}}]}}}}" '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/get/DataFlows_Get
@try_manual
def step__dataflows_get_dataflows_get(test, rg):
    test.cmd('az datafactory data-flow show '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/put/IntegrationRuntimes_Create
@try_manual
def step__integrationruntimes_put_integrationruntimes_create(test, rg):
    test.cmd('az datafactory integration-runtime managed create '
             '--factory-name "{exampleFactoryName}" '
             '--description "A selfhosted integration runtime" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/post/IntegrationRuntimeNodes_GetIpAddress
@try_manual
def step__integrationruntimenodes_post_integrationruntimenodes_getipaddress(test, rg):
    test.cmd('az datafactory integration-runtime-node get-ip-address '
             '--factory-name "{exampleFactoryName}" '
             '--integration-runtime-name "{exampleIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/patch/IntegrationRuntimeNodes_Update
@try_manual
def step__integrationruntimenodes_patch_integrationruntimenodes_update(test, rg):
    test.cmd('az datafactory integration-runtime-node update '
             '--factory-name "{exampleFactoryName}" '
             '--integration-runtime-name "{exampleIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg}" '
             '--concurrent-jobs-limit 2',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_SyncCredentials
@try_manual
def step__integrationruntimes_post_integrationruntimes_synccredentials(test, rg):
    test.cmd('az datafactory integration-runtime sync-credentials '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/get/IntegrationRuntimeNodes_Get
@try_manual
def step__integrationruntimenodes_get_integrationruntimenodes_get(test, rg):
    test.cmd('az datafactory integration-runtime-node show '
             '--factory-name "{exampleFactoryName}" '
             '--integration-runtime-name "{exampleIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/get/IntegrationRuntimes_Get
@try_manual
def step__integrationruntimes_get_integrationruntimes_get(test, rg):
    test.cmd('az datafactory integration-runtime show '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/get/IntegrationRuntimes_ListByFactory
@try_manual
def step__integrationruntimes_get_integrationruntimes_listbyfactory(test, rg):
    test.cmd('az datafactory integration-runtime list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_CreateLinkedIntegrationRuntime
@try_manual
def step__integrationruntimes_post_integrationruntimes_createlinkedintegrationruntime(test, rg):
    test.cmd('az datafactory integration-runtime linked-integration-runtime create '
             '--name "bfa92911-9fb6-4fbe-8f23-beae87bc1c83" '
             '--location "West US" '
             '--data-factory-name "e9955d6d-56ea-4be3-841c-52a12c1a9981" '
             '--subscription-id "061774c7-4b5a-4159-a55b-365581830283" '
             '--factory-name "{exampleFactoryName}" '
             '--integration-runtime-name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}" '
             '--subscription-id "12345678-1234-1234-1234-12345678abc"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_GetConnectionInfo
@try_manual
def step__integrationruntimes_post_integrationruntimes_getconnectioninfo(test, rg):
    test.cmd('az datafactory integration-runtime get-connection-info '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_GetMonitoringData
@try_manual
def step__integrationruntimes_post_integrationruntimes_getmonitoringdata(test, rg):
    test.cmd('az datafactory integration-runtime get-monitoring-data '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_GetStatus
@try_manual
def step__integrationruntimes_post_integrationruntimes_getstatus(test, rg):
    test.cmd('az datafactory integration-runtime get-status '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_ListAuthKeys
@try_manual
def step__integrationruntimes_post_integrationruntimes_listauthkeys(test, rg):
    test.cmd('az datafactory integration-runtime list-auth-key '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_RegenerateAuthKey
@try_manual
def step__integrationruntimes_post_integrationruntimes_regenerateauthkey(test, rg):
    test.cmd('az datafactory integration-runtime regenerate-auth-key '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--key-name "authKey2" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_Start
@try_manual
def step__integrationruntimes_post_integrationruntimes_start(test, rg):
    test.cmd('az datafactory integration-runtime start '
             '--factory-name "{exampleFactoryName}" '
             '--name "{IntegrationRuntimes_2}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_Stop
@try_manual
def step__integrationruntimes_post_integrationruntimes_stop(test, rg):
    test.cmd('az datafactory integration-runtime stop '
             '--factory-name "{exampleFactoryName}" '
             '--name "{IntegrationRuntimes_2}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlowDebugSession/post/DataFlowDebugSession_AddDataFlow
@try_manual
def step__dataflowdebugsession_post_dataflowdebugsession_adddataflow(test, rg):
    test.cmd('az datafactory data-flow-debug-session add-data-flow '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--data-flow-name "dataflow1" '
             '--data-flow-properties "{{\\"type\\":\\"MappingDataFlow\\",\\"typeProperties\\":{{\\"script\\":\\"\\\\n\\'
             '\\nsource(output(\\\\n\\\\t\\\\tColumn_1 as string\\\\n\\\\t),\\\\n\\\\tallowSchemaDrift: true,\\\\n\\\\t'
             'validateSchema: false) ~> source1\\",\\"sinks\\":[],\\"sources\\":[{{\\"name\\":\\"source1\\",\\"dataset'
             '\\":{{\\"type\\":\\"DatasetReference\\",\\"referenceName\\":\\"DelimitedText2\\"}}}}],\\"transformations'
             '\\":[]}}}}" '
             '--datasets "[{{\\"name\\":\\"dataset1\\",\\"properties\\":{{\\"type\\":\\"DelimitedText\\",\\"schema\\":['
             '{{\\"type\\":\\"String\\"}}],\\"annotations\\":[],\\"linkedServiceName\\":{{\\"type\\":\\"LinkedServiceRe'
             'ference\\",\\"referenceName\\":\\"linkedService5\\"}},\\"typeProperties\\":{{\\"columnDelimiter\\":\\",\\'
             '",\\"escapeChar\\":\\"\\\\\\\\\\",\\"firstRowAsHeader\\":true,\\"location\\":{{\\"type\\":\\"AzureBlobSto'
             'rageLocation\\",\\"container\\":\\"dataflow-sample-data\\",\\"fileName\\":\\"Ansiencoding.csv\\"}},\\"quo'
             'teChar\\":\\"\\\\\\"\\"}}}}}}]" '
             '--debug-settings-dataset-parameters "{{\\"Movies\\":{{\\"path\\":\\"abc\\"}},\\"Output\\":{{\\"time\\":\\'
             '"def\\"}}}}" '
             '--debug-settings-source-settings row-limit=1000 source-name="source1" '
             '--debug-settings-source-settings row-limit=222 source-name="source2" '
             '--linked-services "[{{\\"name\\":\\"linkedService1\\",\\"properties\\":{{\\"type\\":\\"AzureBlobStorage\\'
             '",\\"annotations\\":[],\\"typeProperties\\":{{\\"connectionString\\":\\"DefaultEndpointsProtocol=https;Ac'
             'countName=<storageName>;EndpointSuffix=core.windows.net;\\",\\"encryptedCredential\\":\\"<credential>\\"}'
             '}}}}}]" '
             '--session-id "f06ed247-9d07-49b2-b05e-2cb4a2fc871e"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_Upgrade
@try_manual
def step__integrationruntimes_post_integrationruntimes_upgrade(test, rg):
    test.cmd('az datafactory integration-runtime remove-link '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/post/IntegrationRuntimes_Upgrade
@try_manual
def step__integrationruntimes_post_integrationruntimes_upgrade(test, rg):
    test.cmd('az datafactory integration-runtime remove-link '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/patch/IntegrationRuntimes_Update
@try_manual
def step__integrationruntimes_patch_integrationruntimes_update(test, rg):
    test.cmd('az datafactory integration-runtime update '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}" '
             '--auto-update "Off" '
             '--update-delay-offset "\\"PT3H\\""',
             checks=[])


# EXAMPLE: /Datasets/get/Datasets_Get
@try_manual
def step__datasets_get_datasets_get(test, rg):
    test.cmd('az datafactory dataset show '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Datasets/get/Datasets_ListByFactory
@try_manual
def step__datasets_get_datasets_listbyfactory(test, rg):
    test.cmd('az datafactory dataset list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlowDebugSession/post/DataFlowDebugSession_Create
@try_manual
def step__dataflowdebugsession_post_dataflowdebugsession_create(test, rg):
    test.cmd('az datafactory data-flow-debug-session create '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--integration-runtime-name "ir1" '
             '--integration-runtime-properties "{{\\"type\\":\\"Managed\\",\\"typeProperties\\":{{\\"computeProperties'
             '\\":{{\\"dataFlowProperties\\":{{\\"computeType\\":\\"General\\",\\"coreCount\\":48,\\"timeToLive\\":10}}'
             ',\\"location\\":\\"AutoResolve\\"}}}}}}" '
             '--time-to-live 60',
             checks=[])


# EXAMPLE: /DataFlowDebugSession/post/DataFlowDebugSession_Delete
@try_manual
def step__dataflowdebugsession_post_dataflowdebugsession_delete(test, rg):
    test.cmd('az datafactory data-flow-debug-session delete '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--session-id "91fb57e0-8292-47be-89ff-c8f2d2bb2a7e"',
             checks=[])


# EXAMPLE: /LinkedServices/get/LinkedServices_Get
@try_manual
def step__linkedservices_get_linkedservices_get(test, rg):
    test.cmd('az datafactory linked-service show '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/get/LinkedServices_ListByFactory
@try_manual
def step__linkedservices_get_linkedservices_listbyfactory(test, rg):
    test.cmd('az datafactory linked-service list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /PipelineRuns/get/PipelineRuns_Get
@try_manual
def step__pipelineruns_get_pipelineruns_get(test, rg):
    test.cmd('az datafactory pipeline-run show '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--run-id "2f7fdb90-5df1-4b8e-ac2f-064cfa58202b"',
             checks=[])


# EXAMPLE: /PipelineRuns/post/PipelineRuns_Cancel
@try_manual
def step__pipelineruns_post_pipelineruns_cancel(test, rg):
    test.cmd('az datafactory pipeline-run cancel '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--run-id "16ac5348-ff82-4f95-a80d-638c1d47b721"',
             checks=[])


# EXAMPLE: /PipelineRuns/post/PipelineRuns_QueryByFactory
@try_manual
def step__pipelineruns_post_pipelineruns_querybyfactory(test, rg):
    test.cmd('az datafactory pipeline-run query-by-factory '
             '--factory-name "{exampleFactoryName}" '
             '--filters operand="PipelineName" operator="Equals" values="examplePipeline" '
             '--last-updated-after "2018-06-16T00:36:44.3345758Z" '
             '--last-updated-before "2018-06-16T00:49:48.3686473Z" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/put/Pipelines_Create
@try_manual
def step__pipelines_put_pipelines_create(test, rg):
    test.cmd('az datafactory pipeline create '
             '--factory-name "{exampleFactoryName}" '
             '--pipeline "{{\\"activities\\":[{{\\"name\\":\\"ExampleForeachActivity\\",\\"type\\":\\"ForEach\\",\\"typ'
             'eProperties\\":{{\\"activities\\":[{{\\"name\\":\\"ExampleCopyActivity\\",\\"type\\":\\"Copy\\",\\"inputs'
             '\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFileName\\":\\"examplecontainer.csv\\",'
             '\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName\\":\\"exampleDataset\\"}}],\\"outputs\\":[{{'
             '\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFileName\\":{{\\"type\\":\\"Expression\\",\\"va'
             'lue\\":\\"@item()\\"}},\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName\\":\\"exampleDataset'
             '\\"}}],\\"typeProperties\\":{{\\"dataIntegrationUnits\\":32,\\"sink\\":{{\\"type\\":\\"BlobSink\\"}},\\"s'
             'ource\\":{{\\"type\\":\\"BlobSource\\"}}}}}}],\\"isSequential\\":true,\\"items\\":{{\\"type\\":\\"Express'
             'ion\\",\\"value\\":\\"@pipeline().parameters.OutputBlobNameList\\"}}}}}}],\\"parameters\\":{{\\"JobId\\":'
             '{{\\"type\\":\\"String\\"}},\\"OutputBlobNameList\\":{{\\"type\\":\\"Array\\"}}}},\\"variables\\":{{\\"Te'
             'stVariableArray\\":{{\\"type\\":\\"Array\\"}}}},\\"runDimensions\\":{{\\"JobId\\":{{\\"type\\":\\"Express'
             'ion\\",\\"value\\":\\"@pipeline().parameters.JobId\\"}}}}}}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/put/Pipelines_Create
@try_manual
def step__pipelines_put_pipelines_create(test, rg):
    test.cmd('az datafactory pipeline create '
             '--factory-name "{exampleFactoryName}" '
             '--pipeline "{{\\"activities\\":[{{\\"name\\":\\"ExampleForeachActivity\\",\\"type\\":\\"ForEach\\",\\"typ'
             'eProperties\\":{{\\"activities\\":[{{\\"name\\":\\"ExampleCopyActivity\\",\\"type\\":\\"Copy\\",\\"inputs'
             '\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFileName\\":\\"examplecontainer.csv\\",'
             '\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName\\":\\"exampleDataset\\"}}],\\"outputs\\":[{{'
             '\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFileName\\":{{\\"type\\":\\"Expression\\",\\"va'
             'lue\\":\\"@item()\\"}},\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName\\":\\"exampleDataset'
             '\\"}}],\\"typeProperties\\":{{\\"dataIntegrationUnits\\":32,\\"sink\\":{{\\"type\\":\\"BlobSink\\"}},\\"s'
             'ource\\":{{\\"type\\":\\"BlobSource\\"}}}}}}],\\"isSequential\\":true,\\"items\\":{{\\"type\\":\\"Express'
             'ion\\",\\"value\\":\\"@pipeline().parameters.OutputBlobNameList\\"}}}}}}],\\"parameters\\":{{\\"JobId\\":'
             '{{\\"type\\":\\"String\\"}},\\"OutputBlobNameList\\":{{\\"type\\":\\"Array\\"}}}},\\"variables\\":{{\\"Te'
             'stVariableArray\\":{{\\"type\\":\\"Array\\"}}}},\\"runDimensions\\":{{\\"JobId\\":{{\\"type\\":\\"Express'
             'ion\\",\\"value\\":\\"@pipeline().parameters.JobId\\"}}}}}}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/put/Pipelines_Update
@try_manual
def step__pipelines_put_pipelines_update(test, rg):
    test.cmd('az datafactory pipeline create '
             '--factory-name "{exampleFactoryName}" '
             '--pipeline "{{\\"description\\":\\"Example description\\",\\"activities\\":[{{\\"name\\":\\"ExampleForeac'
             'hActivity\\",\\"type\\":\\"ForEach\\",\\"typeProperties\\":{{\\"activities\\":[{{\\"name\\":\\"ExampleCop'
             'yActivity\\",\\"type\\":\\"Copy\\",\\"inputs\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{'
             '\\"MyFileName\\":\\"examplecontainer.csv\\",\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName'
             '\\":\\"exampleDataset\\"}}],\\"outputs\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFi'
             'leName\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@item()\\"}},\\"MyFolderPath\\":\\"examplecontaine'
             'r\\"}},\\"referenceName\\":\\"exampleDataset\\"}}],\\"typeProperties\\":{{\\"dataIntegrationUnits\\":32,'
             '\\"sink\\":{{\\"type\\":\\"BlobSink\\"}},\\"source\\":{{\\"type\\":\\"BlobSource\\"}}}}}}],\\"isSequentia'
             'l\\":true,\\"items\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@pipeline().parameters.OutputBlobNameL'
             'ist\\"}}}}}}],\\"parameters\\":{{\\"OutputBlobNameList\\":{{\\"type\\":\\"Array\\"}}}}}}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/put/Pipelines_Update
@try_manual
def step__pipelines_put_pipelines_update(test, rg):
    test.cmd('az datafactory pipeline create '
             '--factory-name "{exampleFactoryName}" '
             '--pipeline "{{\\"description\\":\\"Example description\\",\\"activities\\":[{{\\"name\\":\\"ExampleForeac'
             'hActivity\\",\\"type\\":\\"ForEach\\",\\"typeProperties\\":{{\\"activities\\":[{{\\"name\\":\\"ExampleCop'
             'yActivity\\",\\"type\\":\\"Copy\\",\\"inputs\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{'
             '\\"MyFileName\\":\\"examplecontainer.csv\\",\\"MyFolderPath\\":\\"examplecontainer\\"}},\\"referenceName'
             '\\":\\"exampleDataset\\"}}],\\"outputs\\":[{{\\"type\\":\\"DatasetReference\\",\\"parameters\\":{{\\"MyFi'
             'leName\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@item()\\"}},\\"MyFolderPath\\":\\"examplecontaine'
             'r\\"}},\\"referenceName\\":\\"exampleDataset\\"}}],\\"typeProperties\\":{{\\"dataIntegrationUnits\\":32,'
             '\\"sink\\":{{\\"type\\":\\"BlobSink\\"}},\\"source\\":{{\\"type\\":\\"BlobSource\\"}}}}}}],\\"isSequentia'
             'l\\":true,\\"items\\":{{\\"type\\":\\"Expression\\",\\"value\\":\\"@pipeline().parameters.OutputBlobNameL'
             'ist\\"}}}}}}],\\"parameters\\":{{\\"OutputBlobNameList\\":{{\\"type\\":\\"Array\\"}}}}}}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/get/Pipelines_Get
@try_manual
def step__pipelines_get_pipelines_get(test, rg):
    test.cmd('az datafactory pipeline show '
             '--factory-name "{exampleFactoryName}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/get/Pipelines_ListByFactory
@try_manual
def step__pipelines_get_pipelines_listbyfactory(test, rg):
    test.cmd('az datafactory pipeline list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/post/Pipelines_CreateRun
@try_manual
def step__pipelines_post_pipelines_createrun(test, rg):
    test.cmd('az datafactory pipeline create-run '
             '--factory-name "{exampleFactoryName}" '
             '--parameters "{{\\"OutputBlobNameList\\":[\\"exampleoutput.csv\\"]}}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Triggers/put/Triggers_Create
@try_manual
def step__triggers_put_triggers_create(test, rg):
    test.cmd('az datafactory trigger create '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--properties "{{\\"type\\":\\"ScheduleTrigger\\",\\"pipelines\\":[{{\\"parameters\\":{{\\"OutputBlobNameL'
             'ist\\":[\\"exampleoutput.csv\\"]}},\\"pipelineReference\\":{{\\"type\\":\\"PipelineReference\\",\\"refere'
             'nceName\\":\\"examplePipeline\\"}}}}],\\"typeProperties\\":{{\\"recurrence\\":{{\\"endTime\\":\\"2018-06-'
             '16T00:55:13.8441801Z\\",\\"frequency\\":\\"Minute\\",\\"interval\\":4,\\"startTime\\":\\"2018-06-16T00:39'
             ':13.8441801Z\\",\\"timeZone\\":\\"UTC\\"}}}}}}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/put/Triggers_Create
@try_manual
def step__triggers_put_triggers_create(test, rg):
    test.cmd('az datafactory trigger create '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--properties "{{\\"type\\":\\"ScheduleTrigger\\",\\"pipelines\\":[{{\\"parameters\\":{{\\"OutputBlobNameL'
             'ist\\":[\\"exampleoutput.csv\\"]}},\\"pipelineReference\\":{{\\"type\\":\\"PipelineReference\\",\\"refere'
             'nceName\\":\\"examplePipeline\\"}}}}],\\"typeProperties\\":{{\\"recurrence\\":{{\\"endTime\\":\\"2018-06-'
             '16T00:55:13.8441801Z\\",\\"frequency\\":\\"Minute\\",\\"interval\\":4,\\"startTime\\":\\"2018-06-16T00:39'
             ':13.8441801Z\\",\\"timeZone\\":\\"UTC\\"}}}}}}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/put/Triggers_Update
@try_manual
def step__triggers_put_triggers_update(test, rg):
    test.cmd('az datafactory trigger create '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--properties "{{\\"type\\":\\"ScheduleTrigger\\",\\"description\\":\\"Example description\\",\\"pipelines'
             '\\":[{{\\"parameters\\":{{\\"OutputBlobNameList\\":[\\"exampleoutput.csv\\"]}},\\"pipelineReference\\":{{'
             '\\"type\\":\\"PipelineReference\\",\\"referenceName\\":\\"examplePipeline\\"}}}}],\\"typeProperties\\":{{'
             '\\"recurrence\\":{{\\"endTime\\":\\"2018-06-16T00:55:14.905167Z\\",\\"frequency\\":\\"Minute\\",\\"interv'
             'al\\":4,\\"startTime\\":\\"2018-06-16T00:39:14.905167Z\\",\\"timeZone\\":\\"UTC\\"}}}}}}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/put/Triggers_Update
@try_manual
def step__triggers_put_triggers_update(test, rg):
    test.cmd('az datafactory trigger create '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--properties "{{\\"type\\":\\"ScheduleTrigger\\",\\"description\\":\\"Example description\\",\\"pipelines'
             '\\":[{{\\"parameters\\":{{\\"OutputBlobNameList\\":[\\"exampleoutput.csv\\"]}},\\"pipelineReference\\":{{'
             '\\"type\\":\\"PipelineReference\\",\\"referenceName\\":\\"examplePipeline\\"}}}}],\\"typeProperties\\":{{'
             '\\"recurrence\\":{{\\"endTime\\":\\"2018-06-16T00:55:14.905167Z\\",\\"frequency\\":\\"Minute\\",\\"interv'
             'al\\":4,\\"startTime\\":\\"2018-06-16T00:39:14.905167Z\\",\\"timeZone\\":\\"UTC\\"}}}}}}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /TriggerRuns/post/TriggerRuns_QueryByFactory
@try_manual
def step__triggerruns_post_triggerruns_querybyfactory(test, rg):
    test.cmd('az datafactory trigger-run query-by-factory '
             '--factory-name "{exampleFactoryName}" '
             '--filters operand="TriggerName" operator="Equals" values="exampleTrigger" '
             '--last-updated-after "2018-06-16T00:36:44.3345758Z" '
             '--last-updated-before "2018-06-16T00:49:48.3686473Z" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /TriggerRuns/post/Triggers_Rerun
@try_manual
def step__triggerruns_post_triggers_rerun(test, rg):
    test.cmd('az datafactory trigger-run rerun '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--run-id "2f7fdb90-5df1-4b8e-ac2f-064cfa58202b" '
             '--trigger-name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/get/Triggers_Get
@try_manual
def step__triggers_get_triggers_get(test, rg):
    test.cmd('az datafactory trigger show '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/get/Triggers_ListByFactory
@try_manual
def step__triggers_get_triggers_listbyfactory(test, rg):
    test.cmd('az datafactory trigger list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_GetEventSubscriptionStatus
@try_manual
def step__triggers_post_triggers_geteventsubscriptionstatus(test, rg):
    test.cmd('az datafactory trigger get-event-subscription-status '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_QueryByFactory
@try_manual
def step__triggers_post_triggers_querybyfactory(test, rg):
    test.cmd('az datafactory trigger query-by-factory '
             '--factory-name "{exampleFactoryName}" '
             '--parent-trigger-name "exampleTrigger" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_Start
@try_manual
def step__triggers_post_triggers_start(test, rg):
    test.cmd('az datafactory trigger start '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_Stop
@try_manual
def step__triggers_post_triggers_stop(test, rg):
    test.cmd('az datafactory trigger stop '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_SubscribeToEvents
@try_manual
def step__triggers_post_triggers_subscribetoevents(test, rg):
    test.cmd('az datafactory trigger subscribe-to-event '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Triggers/post/Triggers_UnsubscribeFromEvents
@try_manual
def step__triggers_post_triggers_unsubscribefromevents(test, rg):
    test.cmd('az datafactory trigger unsubscribe-from-event '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /DataFlows/get/DataFlows_ListByFactory
@try_manual
def step__dataflows_get_dataflows_listbyfactory(test, rg):
    test.cmd('az datafactory data-flow list '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Datasets/delete/Datasets_Delete
@try_manual
def step__datasets_delete_datasets_delete(test, rg):
    test.cmd('az datafactory dataset delete '
             '--name "{exampleDataset}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /DataFlows/delete/DataFlows_Delete
@try_manual
def step__dataflows_delete_dataflows_delete(test, rg):
    test.cmd('az datafactory data-flow delete '
             '--name "{exampleDataFlow}" '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimeNodes/delete/IntegrationRuntimesNodes_Delete
@try_manual
def step__integrationruntimenodes_delete_integrationruntimesnodes_delete(test, rg):
    test.cmd('az datafactory integration-runtime-node delete '
             '--factory-name "{exampleFactoryName}" '
             '--integration-runtime-name "{exampleIntegrationRuntime}" '
             '--node-name "Node_1" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /IntegrationRuntimes/delete/IntegrationRuntimes_Delete
@try_manual
def step__integrationruntimes_delete_integrationruntimes_delete(test, rg):
    test.cmd('az datafactory integration-runtime delete '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleIntegrationRuntime}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /LinkedServices/delete/LinkedServices_Delete
@try_manual
def step__linkedservices_delete_linkedservices_delete(test, rg):
    test.cmd('az datafactory linked-service delete '
             '--factory-name "{exampleFactoryName}" '
             '--name "{exampleLinkedService}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Pipelines/delete/Pipelines_Delete
@try_manual
def step__pipelines_delete_pipelines_delete(test, rg):
    test.cmd('az datafactory pipeline delete '
             '--factory-name "{exampleFactoryName}" '
             '--name "{examplePipeline}" '
             '--resource-group "{rg}"',
             checks=[])


# EXAMPLE: /Triggers/delete/Triggers_Delete
@try_manual
def step__triggers_delete_triggers_delete(test, rg):
    test.cmd('az datafactory trigger delete '
             '--factory-name "{exampleFactoryName}" '
             '--resource-group "{rg}" '
             '--name "{exampleTrigger}"',
             checks=[])


# EXAMPLE: /Factories/delete/Factories_Delete
@try_manual
def step__factories_delete_factories_delete(test, rg):
    test.cmd('az datafactory factory delete '
             '--name "{exampleFactoryName}" '
             '--resource-group "{rg}"',
             checks=[])


@try_manual
def cleanup(test, rg):
    pass


@try_manual
def call_scenario(test, rg):
    setup(test, rg)
    step__factories_put_factories_createorupdate(test, rg)
    step__factories_get_factories_get(test, rg)
    step__factories_get_factories_list(test, rg)
    step__factories_get_factories_listbyresourcegroup(test, rg)
    step__factories_post_factories_configurefactoryrepo(test, rg)
    step__factories_post_factories_getdataplaneaccess(test, rg)
    step__factories_post_factories_getgithubaccesstoken(test, rg)
    step__factories_patch_factories_update(test, rg)
    step__integrationruntimes_put_integrationruntimes_create(test, rg)
    step__dataflows_put_dataflows_create(test, rg)
    step__dataflows_put_dataflows_create(test, rg)
    step__linkedservices_put_linkedservices_create(test, rg)
    step__linkedservices_put_linkedservices_create(test, rg)
    step__linkedservices_put_linkedservices_update(test, rg)
    step__linkedservices_put_linkedservices_update(test, rg)
    step__datasets_put_datasets_create(test, rg)
    step__datasets_put_datasets_create(test, rg)
    step__activityruns_post_activityruns_querybypipelinerun(test, rg)
    step__datasets_put_datasets_update(test, rg)
    step__datasets_put_datasets_update(test, rg)
    step__dataflowdebugsession_post_dataflowdebugsession_executecommand(test, rg)
    step__dataflowdebugsession_post_dataflowdebugsession_querybyfactory(test, rg)
    step__dataflows_put_dataflows_update(test, rg)
    step__dataflows_put_dataflows_update(test, rg)
    step__dataflows_get_dataflows_get(test, rg)
    step__integrationruntimes_put_integrationruntimes_create(test, rg)
    step__integrationruntimenodes_post_integrationruntimenodes_getipaddress(test, rg)
    step__integrationruntimenodes_patch_integrationruntimenodes_update(test, rg)
    step__integrationruntimes_post_integrationruntimes_synccredentials(test, rg)
    step__integrationruntimenodes_get_integrationruntimenodes_get(test, rg)
    step__integrationruntimes_get_integrationruntimes_get(test, rg)
    step__integrationruntimes_get_integrationruntimes_listbyfactory(test, rg)
    step__integrationruntimes_post_integrationruntimes_createlinkedintegrationruntime(test, rg)
    step__integrationruntimes_post_integrationruntimes_getconnectioninfo(test, rg)
    step__integrationruntimes_post_integrationruntimes_getmonitoringdata(test, rg)
    step__integrationruntimes_post_integrationruntimes_getstatus(test, rg)
    step__integrationruntimes_post_integrationruntimes_listauthkeys(test, rg)
    step__integrationruntimes_post_integrationruntimes_regenerateauthkey(test, rg)
    step__integrationruntimes_post_integrationruntimes_start(test, rg)
    step__integrationruntimes_post_integrationruntimes_stop(test, rg)
    step__dataflowdebugsession_post_dataflowdebugsession_adddataflow(test, rg)
    step__integrationruntimes_post_integrationruntimes_upgrade(test, rg)
    step__integrationruntimes_post_integrationruntimes_upgrade(test, rg)
    step__integrationruntimes_patch_integrationruntimes_update(test, rg)
    step__datasets_get_datasets_get(test, rg)
    step__datasets_get_datasets_listbyfactory(test, rg)
    step__dataflowdebugsession_post_dataflowdebugsession_create(test, rg)
    step__dataflowdebugsession_post_dataflowdebugsession_delete(test, rg)
    step__linkedservices_get_linkedservices_get(test, rg)
    step__linkedservices_get_linkedservices_listbyfactory(test, rg)
    step__pipelineruns_get_pipelineruns_get(test, rg)
    step__pipelineruns_post_pipelineruns_cancel(test, rg)
    step__pipelineruns_post_pipelineruns_querybyfactory(test, rg)
    step__pipelines_put_pipelines_create(test, rg)
    step__pipelines_put_pipelines_create(test, rg)
    step__pipelines_put_pipelines_update(test, rg)
    step__pipelines_put_pipelines_update(test, rg)
    step__pipelines_get_pipelines_get(test, rg)
    step__pipelines_get_pipelines_listbyfactory(test, rg)
    step__pipelines_post_pipelines_createrun(test, rg)
    step__triggers_put_triggers_create(test, rg)
    step__triggers_put_triggers_create(test, rg)
    step__triggers_put_triggers_update(test, rg)
    step__triggers_put_triggers_update(test, rg)
    step__triggerruns_post_triggerruns_querybyfactory(test, rg)
    step__triggerruns_post_triggers_rerun(test, rg)
    step__triggers_get_triggers_get(test, rg)
    step__triggers_get_triggers_listbyfactory(test, rg)
    step__triggers_post_triggers_geteventsubscriptionstatus(test, rg)
    step__triggers_post_triggers_querybyfactory(test, rg)
    step__triggers_post_triggers_start(test, rg)
    step__triggers_post_triggers_stop(test, rg)
    step__triggers_post_triggers_subscribetoevents(test, rg)
    step__triggers_post_triggers_unsubscribefromevents(test, rg)
    step__dataflows_get_dataflows_listbyfactory(test, rg)
    step__datasets_delete_datasets_delete(test, rg)
    step__dataflows_delete_dataflows_delete(test, rg)
    step__integrationruntimenodes_delete_integrationruntimesnodes_delete(test, rg)
    step__integrationruntimes_delete_integrationruntimes_delete(test, rg)
    step__linkedservices_delete_linkedservices_delete(test, rg)
    step__pipelines_delete_pipelines_delete(test, rg)
    step__triggers_delete_triggers_delete(test, rg)
    step__factories_delete_factories_delete(test, rg)
    cleanup(test, rg)


@try_manual
class DataFactoryManagementClientScenarioTest(ScenarioTest):

    @ResourceGroupPreparer(name_prefix='clitestdatafactory_exampleResourceGroup'[:7], key='rg', parameter_name='rg')
    def test_datafactory(self, rg):

        self.kwargs.update({
            'subscription_id': self.get_subscription_id()
        })

        self.kwargs.update({
            'exampleFactoryName': 'exampleFactoryName',
            'exampleIntegrationRuntime': 'exampleIntegrationRuntime',
            'IntegrationRuntimes_2': 'exampleManagedIntegrationRuntime',
            'exampleLinkedService': 'exampleLinkedService',
            'exampleDataset': 'exampleDataset',
            'examplePipeline': 'examplePipeline',
            'exampleTrigger': 'exampleTrigger',
            'exampleDataFlow': 'exampleDataFlow',
        })

        call_scenario(self, rg)
        raise_if()
