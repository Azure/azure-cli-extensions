# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from azure.cli.testsdk import *
class CarbonScenario(ScenarioTest):
    def test_get_emission_data_available_date_range(self):
        result = self.cmd('az carbon get-emission-data-available-date-range').get_output_in_json()

        # Assertions
        self.assertEqual(result['startDate'], '2024-03-01')
        self.assertEqual(result['endDate'], '2025-03-01')

    def test_get_emission_report_overall_summary_report(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'date_range': '{start:2024-03-01,end:2025-03-01}',
            'scope': '[Scope1,Scope2,Scope3]'
        })
        result = self.cmd(
            'az carbon get-emission-report --subscription-list [{subscription_id}] --date-range {date_range} --carbon-scope-list {scope} --overall-summary'
        ).get_output_in_json()

        # Assertions
        self.assertEqual(result['value'][0]['dataType'], 'OverallSummaryData')
        self.assertIsNotNone(result['value'][0]['latestMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['previousMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthOverMonthEmissionsChangeRatio'])
        self.assertIsNotNone(result['value'][0]['monthlyEmissionsChangeValue'])

    def test_get_emission_report_monthly_summary_report(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'date_range': '{start:2024-03-01,end:2025-03-01}',
            'scope': '[Scope1,Scope2,Scope3]'
        })
        result = self.cmd(
            'az carbon get-emission-report --subscription-list [{subscription_id}] --date-range {date_range} --carbon-scope-list {scope} --monthly-summary'
        ).get_output_in_json()

        # Assertions
        self.assertEqual(result['value'][0]['dataType'], 'MonthlySummaryData')
        self.assertIsNotNone(result['value'][0]['date'])
        self.assertIsNotNone(result['value'][0]['carbonIntensity'])
        self.assertIsNotNone(result['value'][0]['latestMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['previousMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthOverMonthEmissionsChangeRatio'])
        self.assertIsNotNone(result['value'][0]['monthlyEmissionsChangeValue'])

    def test_get_emission_report_item_details_report(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'date_range': '{start:2025-03-01,end:2025-03-01}',
            'scope': '[Scope1,Scope2,Scope3]',
            'category_type': 'ResourceType',
            'order_by': 'ItemName',
            'page_size': 10,
            'sort_direction': 'Asc'
        })
        result = self.cmd(
            'az carbon get-emission-report --subscription-list [{subscription_id}] --date-range {date_range} --carbon-scope-list {scope} --item-details "{{category-type:{category_type},order-by:{order_by},page-size:{page_size},sort-direction:{sort_direction}}}"'
        ).get_output_in_json()

        # Assertions
        self.assertEqual(result['value'][0]['dataType'], 'ItemDetailsData')
        self.assertIsNotNone(result['value'][0]['itemName'])
        self.assertIsNotNone(result['value'][0]['categoryType'])
        self.assertIsNotNone(result['value'][0]['latestMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['previousMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthOverMonthEmissionsChangeRatio'])
        self.assertIsNotNone(result['value'][0]['monthlyEmissionsChangeValue'])

    def test_get_emission_report_top_items_summary_report(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'date_range': '{start:2025-03-01,end:2025-03-01}',
            'scope': '[Scope1,Scope2,Scope3]',
            'category_type': 'ResourceType',
            'top_items': 5
        })
        result = self.cmd(
            'az carbon get-emission-report --subscription-list [{subscription_id}] --date-range {date_range} --carbon-scope-list {scope} --top-items-summary "{{category-type:{category_type},top-items:{top_items}}}"'
        ).get_output_in_json()

        # Assertions
        self.assertEqual(result['value'][0]['dataType'], 'TopItemsSummaryData')
        self.assertIsNotNone(result['value'][0]['itemName'])
        self.assertIsNotNone(result['value'][0]['categoryType'])
        self.assertIsNotNone(result['value'][0]['latestMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['previousMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthOverMonthEmissionsChangeRatio'])
        self.assertIsNotNone(result['value'][0]['monthlyEmissionsChangeValue'])

    def test_get_emission_report_top_items_monthly_summary_report(self):
        self.kwargs.update({
            'subscription_id': self.get_subscription_id(),
            'date_range': '{start:2024-03-01,end:2025-03-01}',
            'scope': '[Scope1,Scope2,Scope3]',
            'category_type': 'ResourceType',
            'top_items': 5
        })
        result = self.cmd(
            'az carbon get-emission-report --subscription-list {subscription_id} --date-range {date_range} --carbon-scope-list {scope} --top-items-monthly "{{category-type:{category_type},top-items:{top_items}}}"'
        ).get_output_in_json()

        # Assertions
        self.assertEqual(result['value'][0]['dataType'], 'TopItemsMonthlySummaryData')
        self.assertIsNotNone(result['value'][0]['itemName'])
        self.assertIsNotNone(result['value'][0]['categoryType'])
        self.assertIsNotNone(result['value'][0]['date'])
        self.assertIsNotNone(result['value'][0]['latestMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthOverMonthEmissionsChangeRatio'])
        self.assertIsNotNone(result['value'][0]['previousMonthEmissions'])
        self.assertIsNotNone(result['value'][0]['monthlyEmissionsChangeValue'])