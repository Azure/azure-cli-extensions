# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "carbon get-emission-report",
)
class GetEmissionReport(AAZCommand):
    """API for Carbon Emissions Reports

    :example: QueryCarbonEmission Overall Summary Report
        az carbon get-emission-report --subscription-list "[00000000-0000-0000-0000-000000000000]" --carbon-scope-list "[Scope1,Scope2,Scope3]" --date-range "{start:2024-03-01,end:2025-03-01}" --overall-summary

    :example: QueryCarbonEmission Monthly Summary Report
        az carbon get-emission-report --subscription-list "[00000000-0000-0000-0000-000000000000]" --carbon-scope-list "[Scope1,Scope2,Scope3]" --date-range "{start:2024-03-01,end:2025-03-01}" --monthly-summary

    :example: QueryCarbonEmission Item Details Report
        az carbon get-emission-report --subscription-list "[00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000001]" --carbon-scope-list "[Scope1,Scope2,Scope3]" --date-range "{start:2025-03-01,end:2025-03-01}" --item-details "{category-type:ResourceType,order-by:itemName,page-size:10,sort-direction:asc}"

    :example: QueryCarbonEmission Top Items Summary Report
        az carbon get-emission-report --subscription-list "[00000000-0000-0000-0000-000000000000,00000000-0000-0000-0000-000000000001]" --carbon-scope-list "[Scope1,Scope2,Scope3]" --date-range "{start:2025-03-01,end:2025-03-01}" --top-items-summary "{category-type:ResourceType,top-items:5}"

    :example: QueryCarbonEmission Top Items Monthly Summary Report
        az carbon get-emission-report --subscription-list "[00000000-0000-0000-0000-000000000000]" --carbon-scope-list "[Scope1,Scope2,Scope3]" --date-range "{start:2024-03-01,end:2025-03-01}" --top-items-monthly "{category-type:ResourceType,top-items:5}
    """

    _aaz_info = {
        "version": "2025-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.carbon/carbonemissionreports", "2025-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "QueryParameters"

        _args_schema = cls._args_schema
        _args_schema.item_details = AAZObjectArg(
            options=["--item-details"],
            arg_group="QueryParameters",
            help="Use this option to get the Item Details Report",
        )
        _args_schema.monthly_summary = AAZObjectArg(
            options=["--monthly-summary"],
            arg_group="QueryParameters",
            help="Use this option to get Monthly summary report",
            blank={},
        )
        _args_schema.overall_summary = AAZObjectArg(
            options=["--overall-summary"],
            arg_group="QueryParameters",
            help="Use this option to get overall summary report",
            blank={},
        )
        _args_schema.top_items_monthly = AAZObjectArg(
            options=["--top-items-monthly"],
            arg_group="QueryParameters",
            help="Use this option to get the Top Items Monthly Summary Report",
        )
        _args_schema.top_items_summary = AAZObjectArg(
            options=["--top-items-summary"],
            arg_group="QueryParameters",
            help="Use this option to get Top Items Summary Report",
        )
        _args_schema.carbon_scope_list = AAZListArg(
            options=["--carbon-scope-list"],
            arg_group="QueryParameters",
            help="List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3) in list form. The output will include the total emissions for the specified scopes.",
            required=True,
        )
        _args_schema.date_range = AAZObjectArg(
            options=["--date-range"],
            arg_group="QueryParameters",
            help="The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01 and end: 2024-06-01).",
            required=True,
        )
        _args_schema.location_list = AAZListArg(
            options=["--location-list"],
            arg_group="QueryParameters",
            help="List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g., 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names.",
        )
        _args_schema.resource_group_urls = AAZListArg(
            options=["--resource-group-urls"],
            arg_group="QueryParameters",
            help="List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}', and should be in all lowercase.",
        )
        _args_schema.resource_type_list = AAZListArg(
            options=["--resource-type-list"],
            arg_group="QueryParameters",
            help="List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'.",
        )
        _args_schema.subscription_list = AAZListArg(
            options=["--subscription-list"],
            arg_group="QueryParameters",
            help="List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase format. The max length of list is 100.",
            required=True,
        )

        item_details = cls._args_schema.item_details
        item_details.category_type = AAZStrArg(
            options=["category-type"],
            help="Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription.",
            required=True,
            enum={"Location": "Location", "Resource": "Resource", "ResourceGroup": "ResourceGroup", "ResourceType": "ResourceType", "Subscription": "Subscription"},
        )
        item_details.order_by = AAZStrArg(
            options=["order-by"],
            help="The column name to order the results by. Supported values: ItemName, LatestMonthEmissions, MonthOverMonthEmissionsChangeRatio, MonthlyEmissionsChangeValue, PreviousMonthEmissions, ResourceGroup.",
            required=True,
            enum={"ItemName": "ItemName", "LatestMonthEmissions": "LatestMonthEmissions", "MonthOverMonthEmissionsChangeRatio": "MonthOverMonthEmissionsChangeRatio", "MonthlyEmissionsChangeValue": "MonthlyEmissionsChangeValue", "PreviousMonthEmissions": "PreviousMonthEmissions", "ResourceGroup": "ResourceGroup"},
        )
        item_details.page_size = AAZIntArg(
            options=["page-size"],
            help="Number of items to return in one request, max value is 5000.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=5000,
                minimum=1,
            ),
        )
        item_details.skip_token = AAZStrArg(
            options=["skip-token"],
            help="Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response if additional data pages are available.",
        )
        item_details.sort_direction = AAZStrArg(
            options=["sort-direction"],
            help="Direction for sorting results. Supported Values: Asc, Desc.",
            required=True,
            enum={"Asc": "Asc", "Desc": "Desc"},
        )

        top_items_monthly = cls._args_schema.top_items_monthly
        top_items_monthly.category_type = AAZStrArg(
            options=["category-type"],
            help="Specifies the category type to retrieve top-emitting items, aggregated by month. Supported types: Location, Resource, ResourceGroup, ResourceType, Subscription.",
            required=True,
            enum={"Location": "Location", "Resource": "Resource", "ResourceGroup": "ResourceGroup", "ResourceType": "ResourceType", "Subscription": "Subscription"},
        )
        top_items_monthly.top_items = AAZIntArg(
            options=["top-items"],
            help="The number of top items to return, based on emissions. Must be between 1 and 10.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=10,
                minimum=1,
            ),
        )

        top_items_summary = cls._args_schema.top_items_summary
        top_items_summary.category_type = AAZStrArg(
            options=["category-type"],
            help="Specifies the category type for which to retrieve top-emitting items. Supported types: Location, Resource, ResourceGroup, ResourceType, Subscription.",
            required=True,
            enum={"Location": "Location", "Resource": "Resource", "ResourceGroup": "ResourceGroup", "ResourceType": "ResourceType", "Subscription": "Subscription"},
        )
        top_items_summary.top_items = AAZIntArg(
            options=["top-items"],
            help="The number of top items to return, based on emissions. This value must be between 1 and 10.",
            required=True,
            fmt=AAZIntArgFormat(
                maximum=10,
                minimum=1,
            ),
        )

        carbon_scope_list = cls._args_schema.carbon_scope_list
        carbon_scope_list.Element = AAZStrArg(
            enum={"Scope1": "Scope1", "Scope2": "Scope2", "Scope3": "Scope3"},
        )

        date_range = cls._args_schema.date_range
        date_range.end = AAZDateArg(
            options=["end"],
            help="End date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.",
            required=True,
        )
        date_range.start = AAZDateArg(
            options=["start"],
            help="Start date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.",
            required=True,
        )

        location_list = cls._args_schema.location_list
        location_list.Element = AAZStrArg()

        resource_group_urls = cls._args_schema.resource_group_urls
        resource_group_urls.Element = AAZStrArg()

        resource_type_list = cls._args_schema.resource_type_list
        resource_type_list.Element = AAZStrArg()

        subscription_list = cls._args_schema.subscription_list
        subscription_list.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.CarbonServiceQueryCarbonEmissionReports(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CarbonServiceQueryCarbonEmissionReports(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Carbon/carbonEmissionReports",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("carbonScopeList", AAZListType, ".carbon_scope_list", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("dateRange", AAZObjectType, ".date_range", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("locationList", AAZListType, ".location_list")
            _builder.set_const("reportType", "ItemDetailsReport", AAZStrType, ".item_details", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("reportType", "MonthlySummaryReport", AAZStrType, ".monthly_summary", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("reportType", "OverallSummaryReport", AAZStrType, ".overall_summary", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("reportType", "TopItemsMonthlySummaryReport", AAZStrType, ".top_items_monthly", typ_kwargs={"flags": {"required": True}})
            _builder.set_const("reportType", "TopItemsSummaryReport", AAZStrType, ".top_items_summary", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("resourceGroupUrlList", AAZListType, ".resource_group_urls")
            _builder.set_prop("resourceTypeList", AAZListType, ".resource_type_list")
            _builder.set_prop("subscriptionList", AAZListType, ".subscription_list", typ_kwargs={"flags": {"required": True}})
            _builder.discriminate_by("reportType", "ItemDetailsReport")
            _builder.discriminate_by("reportType", "MonthlySummaryReport")
            _builder.discriminate_by("reportType", "OverallSummaryReport")
            _builder.discriminate_by("reportType", "TopItemsMonthlySummaryReport")
            _builder.discriminate_by("reportType", "TopItemsSummaryReport")

            carbon_scope_list = _builder.get(".carbonScopeList")
            if carbon_scope_list is not None:
                carbon_scope_list.set_elements(AAZStrType, ".")

            date_range = _builder.get(".dateRange")
            if date_range is not None:
                date_range.set_prop("end", AAZStrType, ".end", typ_kwargs={"flags": {"required": True}})
                date_range.set_prop("start", AAZStrType, ".start", typ_kwargs={"flags": {"required": True}})

            location_list = _builder.get(".locationList")
            if location_list is not None:
                location_list.set_elements(AAZStrType, ".")

            resource_group_url_list = _builder.get(".resourceGroupUrlList")
            if resource_group_url_list is not None:
                resource_group_url_list.set_elements(AAZStrType, ".")

            resource_type_list = _builder.get(".resourceTypeList")
            if resource_type_list is not None:
                resource_type_list.set_elements(AAZStrType, ".")

            subscription_list = _builder.get(".subscriptionList")
            if subscription_list is not None:
                subscription_list.set_elements(AAZStrType, ".")

            disc_item_details_report = _builder.get("{reportType:ItemDetailsReport}")
            if disc_item_details_report is not None:
                disc_item_details_report.set_prop("categoryType", AAZStrType, ".item_details.category_type", typ_kwargs={"flags": {"required": True}})
                disc_item_details_report.set_prop("orderBy", AAZStrType, ".item_details.order_by", typ_kwargs={"flags": {"required": True}})
                disc_item_details_report.set_prop("pageSize", AAZIntType, ".item_details.page_size", typ_kwargs={"flags": {"required": True}})
                disc_item_details_report.set_prop("skipToken", AAZStrType, ".item_details.skip_token")
                disc_item_details_report.set_prop("sortDirection", AAZStrType, ".item_details.sort_direction", typ_kwargs={"flags": {"required": True}})

            disc_top_items_monthly_summary_report = _builder.get("{reportType:TopItemsMonthlySummaryReport}")
            if disc_top_items_monthly_summary_report is not None:
                disc_top_items_monthly_summary_report.set_prop("categoryType", AAZStrType, ".top_items_monthly.category_type", typ_kwargs={"flags": {"required": True}})
                disc_top_items_monthly_summary_report.set_prop("topItems", AAZIntType, ".top_items_monthly.top_items", typ_kwargs={"flags": {"required": True}})

            disc_top_items_summary_report = _builder.get("{reportType:TopItemsSummaryReport}")
            if disc_top_items_summary_report is not None:
                disc_top_items_summary_report.set_prop("categoryType", AAZStrType, ".top_items_summary.category_type", typ_kwargs={"flags": {"required": True}})
                disc_top_items_summary_report.set_prop("topItems", AAZIntType, ".top_items_summary.top_items", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.skip_token = AAZStrType(
                serialized_name="skipToken",
            )
            _schema_on_200.subscription_access_decision_list = AAZListType(
                serialized_name="subscriptionAccessDecisionList",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            subscription_access_decision_list = cls._schema_on_200.subscription_access_decision_list
            subscription_access_decision_list.Element = AAZObjectType()

            _element = cls._schema_on_200.subscription_access_decision_list.Element
            _element.decision = AAZStrType(
                flags={"required": True},
            )
            _element.denial_reason = AAZStrType(
                serialized_name="denialReason",
            )
            _element.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.data_type = AAZStrType(
                serialized_name="dataType",
                flags={"required": True},
            )
            _element.latest_month_emissions = AAZFloatType(
                serialized_name="latestMonthEmissions",
                flags={"required": True},
            )
            _element.month_over_month_emissions_change_ratio = AAZFloatType(
                serialized_name="monthOverMonthEmissionsChangeRatio",
            )
            _element.monthly_emissions_change_value = AAZFloatType(
                serialized_name="monthlyEmissionsChangeValue",
            )
            _element.previous_month_emissions = AAZFloatType(
                serialized_name="previousMonthEmissions",
                flags={"required": True},
            )

            disc_item_details_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ItemDetailsData")
            disc_item_details_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_item_details_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )

            disc_monthly_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "MonthlySummaryData")
            disc_monthly_summary_data.carbon_intensity = AAZFloatType(
                serialized_name="carbonIntensity",
                flags={"required": True},
            )
            disc_monthly_summary_data.date = AAZStrType(
                flags={"required": True},
            )

            disc_resource_group_item_details_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceGroupItemDetailsData")
            disc_resource_group_item_details_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_group_item_details_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_group_item_details_data.resource_group_url = AAZStrType(
                serialized_name="resourceGroupUrl",
                flags={"required": True},
            )
            disc_resource_group_item_details_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_resource_group_top_items_monthly_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceGroupTopItemsMonthlySummaryData")
            disc_resource_group_top_items_monthly_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_group_top_items_monthly_summary_data.date = AAZStrType(
                flags={"required": True},
            )
            disc_resource_group_top_items_monthly_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_group_top_items_monthly_summary_data.resource_group_url = AAZStrType(
                serialized_name="resourceGroupUrl",
                flags={"required": True},
            )
            disc_resource_group_top_items_monthly_summary_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_resource_group_top_items_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceGroupTopItemsSummaryData")
            disc_resource_group_top_items_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_group_top_items_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_group_top_items_summary_data.resource_group_url = AAZStrType(
                serialized_name="resourceGroupUrl",
                flags={"required": True},
            )
            disc_resource_group_top_items_summary_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_resource_item_details_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceItemDetailsData")
            disc_resource_item_details_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_item_details_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_item_details_data.location = AAZStrType()
            disc_resource_item_details_data.resource_group = AAZStrType(
                serialized_name="resourceGroup",
                flags={"required": True},
            )
            disc_resource_item_details_data.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )
            disc_resource_item_details_data.resource_type = AAZStrType(
                serialized_name="resourceType",
            )
            disc_resource_item_details_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_resource_top_items_monthly_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceTopItemsMonthlySummaryData")
            disc_resource_top_items_monthly_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_top_items_monthly_summary_data.date = AAZStrType(
                flags={"required": True},
            )
            disc_resource_top_items_monthly_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_top_items_monthly_summary_data.resource_group = AAZStrType(
                serialized_name="resourceGroup",
                flags={"required": True},
            )
            disc_resource_top_items_monthly_summary_data.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )
            disc_resource_top_items_monthly_summary_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_resource_top_items_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "ResourceTopItemsSummaryData")
            disc_resource_top_items_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_resource_top_items_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )
            disc_resource_top_items_summary_data.resource_group = AAZStrType(
                serialized_name="resourceGroup",
                flags={"required": True},
            )
            disc_resource_top_items_summary_data.resource_id = AAZStrType(
                serialized_name="resourceId",
                flags={"required": True},
            )
            disc_resource_top_items_summary_data.subscription_id = AAZStrType(
                serialized_name="subscriptionId",
                flags={"required": True},
            )

            disc_top_items_monthly_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "TopItemsMonthlySummaryData")
            disc_top_items_monthly_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_top_items_monthly_summary_data.date = AAZStrType(
                flags={"required": True},
            )
            disc_top_items_monthly_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )

            disc_top_items_summary_data = cls._schema_on_200.value.Element.discriminate_by("data_type", "TopItemsSummaryData")
            disc_top_items_summary_data.category_type = AAZStrType(
                serialized_name="categoryType",
                flags={"required": True},
            )
            disc_top_items_summary_data.item_name = AAZStrType(
                serialized_name="itemName",
                flags={"required": True},
            )

            return cls._schema_on_200


class _GetEmissionReportHelper:
    """Helper class for GetEmissionReport"""


__all__ = ["GetEmissionReport"]
