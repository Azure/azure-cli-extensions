# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "carbon get-emission-data-available-date-range",
)
class GetEmissionDataAvailableDateRange(AAZCommand):
    """API for query carbon emission data available date range

    :example: Query Carbon Emission Data Available Date Range
        az carbon get-emission-data-available-date-range
    """

    _aaz_info = {
        "version": "2025-04-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.carbon/querycarbonemissiondataavailabledaterange", "2025-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    def _execute_operations(self):
        self.pre_operations()
        self.CarbonServiceQueryCarbonEmissionDataAvailableDateRange(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CarbonServiceQueryCarbonEmissionDataAvailableDateRange(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Carbon/queryCarbonEmissionDataAvailableDateRange",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2025-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.end_date = AAZStrType(
                serialized_name="endDate",
                flags={"required": True},
            )
            _schema_on_200.start_date = AAZStrType(
                serialized_name="startDate",
                flags={"required": True},
            )

            return cls._schema_on_200


class _GetEmissionDataAvailableDateRangeHelper:
    """Helper class for GetEmissionDataAvailableDateRange"""


__all__ = ["GetEmissionDataAvailableDateRange"]
