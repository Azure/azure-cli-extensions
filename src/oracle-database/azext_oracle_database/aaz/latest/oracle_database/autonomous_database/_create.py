# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "oracle-database autonomous-database create",
)
class Create(AAZCommand):
    """Create a AutonomousDatabase

    :example: Create an Autonomous database
        az oracle-database autonomous-database create --location <location> --autonomousdatabasename <name> --resource-group <resource_group> --subnet-id /<subnet_id> --display-name <display_name> --compute-model ECPU --compute-count <compute_count> --data-storage-size-in-gbs <storage_size> --license-model <BringYourOwnLicense/LicenseIncluded> --db-workload <OLTP> --admin-password <password> --db-version 19c --character-set AL32UTF8 --ncharacter-set AL16UTF16 --vnet-id <virtual network id> --regular
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/oracle.database/autonomousdatabases/{}", "2023-09-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.autonomousdatabasename = AAZStrArg(
            options=["-n", "--name", "--autonomousdatabasename"],
            help="The database name.",
            required=True,
            fmt=AAZStrArgFormat(
                pattern=".*",
                max_length=30,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.clone = AAZObjectArg(
            options=["--clone"],
            arg_group="Properties",
        )
        _args_schema.regular = AAZObjectArg(
            options=["--regular"],
            arg_group="Properties",
            blank={},
        )
        _args_schema.admin_password = AAZPasswordArg(
            options=["--admin-password"],
            arg_group="Properties",
            help="Admin password.",
            fmt=AAZStrArgFormat(
                max_length=30,
                min_length=12,
            ),
            blank=AAZPromptPasswordInput(
                msg="Password:",
            ),
        )
        _args_schema.autonomous_database_id = AAZResourceIdArg(
            options=["--autonomous-database-id"],
            arg_group="Properties",
            help="Autonomous Database ID",
        )
        _args_schema.autonomous_maintenance_schedule_type = AAZStrArg(
            options=["--schedule-type", "--autonomous-maintenance-schedule-type"],
            arg_group="Properties",
            help="The maintenance schedule type of the Autonomous Database Serverless.",
            enum={"Early": "Early", "Regular": "Regular"},
        )
        _args_schema.backup_retention_period_in_days = AAZIntArg(
            options=["--retention-days", "--backup-retention-period-in-days"],
            arg_group="Properties",
            help="Retention period, in days, for long-term backups",
        )
        _args_schema.character_set = AAZStrArg(
            options=["--character-set"],
            arg_group="Properties",
            help="The character set for the autonomous database.",
            fmt=AAZStrArgFormat(
                max_length=255,
                min_length=1,
            ),
        )
        _args_schema.compute_count = AAZFloatArg(
            options=["--compute-count"],
            arg_group="Properties",
            help="The compute amount (CPUs) available to the database.",
            fmt=AAZFloatArgFormat(
                maximum=512.0,
                minimum=0.0,
            ),
        )
        _args_schema.compute_model = AAZStrArg(
            options=["--compute-model"],
            arg_group="Properties",
            help="The compute model of the Autonomous Database.",
            enum={"ECPU": "ECPU", "OCPU": "OCPU"},
        )
        _args_schema.cpu_core_count = AAZIntArg(
            options=["--cpu-core-count"],
            arg_group="Properties",
            help="The number of CPU cores to be made available to the database.",
            fmt=AAZIntArgFormat(
                maximum=128,
                minimum=1,
            ),
        )
        _args_schema.customer_contacts = AAZListArg(
            options=["--customer-contacts"],
            arg_group="Properties",
            help="Customer Contacts.",
        )
        _args_schema.data_storage_size_in_gbs = AAZIntArg(
            options=["--storage-gbs", "--data-storage-size-in-gbs"],
            arg_group="Properties",
            help="The size, in gigabytes, of the data volume that will be created and attached to the database.",
            fmt=AAZIntArgFormat(
                maximum=393216,
                minimum=20,
            ),
        )
        _args_schema.data_storage_size_in_tbs = AAZIntArg(
            options=["--storage-tbs", "--data-storage-size-in-tbs"],
            arg_group="Properties",
            help="The quantity of data in the database, in terabytes.",
            fmt=AAZIntArgFormat(
                maximum=384,
                minimum=1,
            ),
        )
        _args_schema.database_edition = AAZStrArg(
            options=["--database-edition"],
            arg_group="Properties",
            help="The Oracle Database Edition that applies to the Autonomous databases.",
            enum={"EnterpriseEdition": "EnterpriseEdition", "StandardEdition": "StandardEdition"},
        )
        _args_schema.db_version = AAZStrArg(
            options=["--db-version"],
            arg_group="Properties",
            help="A valid Oracle Database version for Autonomous Database.",
            fmt=AAZStrArgFormat(
                max_length=255,
                min_length=1,
            ),
        )
        _args_schema.db_workload = AAZStrArg(
            options=["--db-workload"],
            arg_group="Properties",
            help="The Autonomous Database workload type",
            enum={"AJD": "AJD", "APEX": "APEX", "DW": "DW", "OLTP": "OLTP"},
        )
        _args_schema.display_name = AAZStrArg(
            options=["--display-name"],
            arg_group="Properties",
            help="The user-friendly name for the Autonomous Database.",
            fmt=AAZStrArgFormat(
                max_length=255,
                min_length=1,
            ),
        )
        _args_schema.is_auto_scaling_enabled = AAZBoolArg(
            options=["--cpu-auto-scaling", "--is-auto-scaling-enabled"],
            arg_group="Properties",
            help="Indicates if auto scaling is enabled for the Autonomous Database CPU core count.",
        )
        _args_schema.is_auto_scaling_for_storage_enabled = AAZBoolArg(
            options=["--store-auto-scaling", "--is-auto-scaling-for-storage-enabled"],
            arg_group="Properties",
            help="Indicates if auto scaling is enabled for the Autonomous Database storage.",
        )
        _args_schema.is_local_data_guard_enabled = AAZBoolArg(
            options=["--local-data-guard", "--is-local-data-guard-enabled"],
            arg_group="Properties",
            help="Indicates whether the Autonomous Database has local or called in-region Data Guard enabled.",
        )
        _args_schema.is_mtls_connection_required = AAZBoolArg(
            options=["--mtls-reqd", "--is-mtls-connection-required"],
            arg_group="Properties",
            help="Specifies if the Autonomous Database requires mTLS connections.",
        )
        _args_schema.is_preview_version_with_service_terms_accepted = AAZBoolArg(
            options=["--preview-accepted", "--is-preview-version-with-service-terms-accepted"],
            arg_group="Properties",
            help="Specifies if the Autonomous Database preview version is being provisioned.",
        )
        _args_schema.license_model = AAZStrArg(
            options=["--license-model"],
            arg_group="Properties",
            help="The Oracle license model that applies to the Oracle Autonomous Database. The default is LICENSE_INCLUDED.",
            enum={"BringYourOwnLicense": "BringYourOwnLicense", "LicenseIncluded": "LicenseIncluded"},
        )
        _args_schema.ncharacter_set = AAZStrArg(
            options=["--ncharacter-set"],
            arg_group="Properties",
            help="The character set for the Autonomous Database.",
            fmt=AAZStrArgFormat(
                max_length=255,
                min_length=1,
            ),
        )
        _args_schema.private_endpoint_ip = AAZStrArg(
            options=["--private-endpoint-ip"],
            arg_group="Properties",
            help="The private endpoint Ip address for the resource.",
        )
        _args_schema.private_endpoint_label = AAZStrArg(
            options=["--private-endpoint-label"],
            arg_group="Properties",
            help="The resource's private endpoint label.",
        )
        _args_schema.scheduled_operations = AAZObjectArg(
            options=["--scheduled-operations"],
            arg_group="Properties",
            help="The list of scheduled operations.",
        )
        _args_schema.subnet_id = AAZResourceIdArg(
            options=["--subnet-id"],
            arg_group="Properties",
            help="Client subnet",
        )
        _args_schema.vnet_id = AAZResourceIdArg(
            options=["--vnet-id"],
            arg_group="Properties",
            help="VNET for network connectivity",
        )
        _args_schema.whitelisted_ips = AAZListArg(
            options=["--whitelisted-ips"],
            arg_group="Properties",
            help="The client IP access control list (ACL). This is an array of CIDR notations and/or IP addresses. Values should be separate strings, separated by commas. Example: ['1.1.1.1','1.1.1.0/24','1.1.2.25']",
        )

        clone = cls._args_schema.clone
        clone.clone_type = AAZStrArg(
            options=["clone-type"],
            help="The Autonomous Database clone type.",
            required=True,
            enum={"Full": "Full", "Metadata": "Metadata"},
        )
        clone.refreshable_model = AAZStrArg(
            options=["refreshable-model"],
            help="The refresh mode of the clone.",
            enum={"Automatic": "Automatic", "Manual": "Manual"},
        )
        clone.source = AAZStrArg(
            options=["source"],
            help="The source of the database.",
            enum={"BackupFromId": "BackupFromId", "BackupFromTimestamp": "BackupFromTimestamp", "CloneToRefreshable": "CloneToRefreshable", "CrossRegionDataguard": "CrossRegionDataguard", "CrossRegionDisasterRecovery": "CrossRegionDisasterRecovery", "Database": "Database", "None": "None"},
        )
        clone.source_id = AAZResourceIdArg(
            options=["source-id"],
            help="The Azure ID of the Autonomous Database that was cloned to create the current Autonomous Database.",
            required=True,
        )

        customer_contacts = cls._args_schema.customer_contacts
        customer_contacts.Element = AAZObjectArg()

        _element = cls._args_schema.customer_contacts.Element
        _element.email = AAZStrArg(
            options=["email"],
            help="The email address used by Oracle to send notifications regarding databases and infrastructure.",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=320,
                min_length=1,
            ),
        )

        scheduled_operations = cls._args_schema.scheduled_operations
        scheduled_operations.day_of_week = AAZObjectArg(
            options=["day-of-week"],
            help="Day of week",
            required=True,
        )
        scheduled_operations.scheduled_start_time = AAZStrArg(
            options=["scheduled-start-time"],
            help="auto start time. value must be of ISO-8601 format HH:mm",
            fmt=AAZStrArgFormat(
                max_length=50,
                min_length=1,
            ),
        )
        scheduled_operations.scheduled_stop_time = AAZStrArg(
            options=["scheduled-stop-time"],
            help="auto stop time. value must be of ISO-8601 format HH:mm",
            fmt=AAZStrArgFormat(
                max_length=50,
                min_length=1,
            ),
        )

        day_of_week = cls._args_schema.scheduled_operations.day_of_week
        day_of_week.name = AAZStrArg(
            options=["name"],
            help="Name of the day of the week.",
            required=True,
            enum={"Friday": "Friday", "Monday": "Monday", "Saturday": "Saturday", "Sunday": "Sunday", "Thursday": "Thursday", "Tuesday": "Tuesday", "Wednesday": "Wednesday"},
        )

        whitelisted_ips = cls._args_schema.whitelisted_ips
        whitelisted_ips.Element = AAZStrArg(
            fmt=AAZStrArgFormat(
                max_length=1024,
                min_length=1,
            ),
        )

        # define Arg Group "Resource"

        _args_schema = cls._args_schema
        _args_schema.location = AAZResourceLocationArg(
            arg_group="Resource",
            help="The geo-location where the resource lives",
            required=True,
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Resource",
            help="Resource tags.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.AutonomousDatabasesCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class AutonomousDatabasesCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/autonomousDatabases/{autonomousdatabasename}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "autonomousdatabasename", self.ctx.args.autonomousdatabasename,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("adminPassword", AAZStrType, ".admin_password", typ_kwargs={"flags": {"secret": True}})
                properties.set_prop("autonomousDatabaseId", AAZStrType, ".autonomous_database_id")
                properties.set_prop("autonomousMaintenanceScheduleType", AAZStrType, ".autonomous_maintenance_schedule_type")
                properties.set_prop("backupRetentionPeriodInDays", AAZIntType, ".backup_retention_period_in_days")
                properties.set_prop("characterSet", AAZStrType, ".character_set")
                properties.set_prop("computeCount", AAZFloatType, ".compute_count")
                properties.set_prop("computeModel", AAZStrType, ".compute_model")
                properties.set_prop("cpuCoreCount", AAZIntType, ".cpu_core_count")
                properties.set_prop("customerContacts", AAZListType, ".customer_contacts")
                properties.set_const("dataBaseType", "Clone", AAZStrType, ".clone", typ_kwargs={"flags": {"required": True}})
                properties.set_const("dataBaseType", "Regular", AAZStrType, ".regular", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("dataStorageSizeInGbs", AAZIntType, ".data_storage_size_in_gbs")
                properties.set_prop("dataStorageSizeInTbs", AAZIntType, ".data_storage_size_in_tbs")
                properties.set_prop("databaseEdition", AAZStrType, ".database_edition")
                properties.set_prop("dbVersion", AAZStrType, ".db_version")
                properties.set_prop("dbWorkload", AAZStrType, ".db_workload")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("isAutoScalingEnabled", AAZBoolType, ".is_auto_scaling_enabled")
                properties.set_prop("isAutoScalingForStorageEnabled", AAZBoolType, ".is_auto_scaling_for_storage_enabled")
                properties.set_prop("isLocalDataGuardEnabled", AAZBoolType, ".is_local_data_guard_enabled")
                properties.set_prop("isMtlsConnectionRequired", AAZBoolType, ".is_mtls_connection_required")
                properties.set_prop("isPreviewVersionWithServiceTermsAccepted", AAZBoolType, ".is_preview_version_with_service_terms_accepted")
                properties.set_prop("licenseModel", AAZStrType, ".license_model")
                properties.set_prop("ncharacterSet", AAZStrType, ".ncharacter_set")
                properties.set_prop("privateEndpointIp", AAZStrType, ".private_endpoint_ip")
                properties.set_prop("privateEndpointLabel", AAZStrType, ".private_endpoint_label")
                properties.set_prop("scheduledOperations", AAZObjectType, ".scheduled_operations")
                properties.set_prop("subnetId", AAZStrType, ".subnet_id")
                properties.set_prop("vnetId", AAZStrType, ".vnet_id")
                properties.set_prop("whitelistedIps", AAZListType, ".whitelisted_ips")
                properties.discriminate_by("dataBaseType", "Clone")
                properties.discriminate_by("dataBaseType", "Regular")

            customer_contacts = _builder.get(".properties.customerContacts")
            if customer_contacts is not None:
                customer_contacts.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.customerContacts[]")
            if _elements is not None:
                _elements.set_prop("email", AAZStrType, ".email", typ_kwargs={"flags": {"required": True}})

            scheduled_operations = _builder.get(".properties.scheduledOperations")
            if scheduled_operations is not None:
                scheduled_operations.set_prop("dayOfWeek", AAZObjectType, ".day_of_week", typ_kwargs={"flags": {"required": True}})
                scheduled_operations.set_prop("scheduledStartTime", AAZStrType, ".scheduled_start_time")
                scheduled_operations.set_prop("scheduledStopTime", AAZStrType, ".scheduled_stop_time")

            day_of_week = _builder.get(".properties.scheduledOperations.dayOfWeek")
            if day_of_week is not None:
                day_of_week.set_prop("name", AAZStrType, ".name", typ_kwargs={"flags": {"required": True}})

            whitelisted_ips = _builder.get(".properties.whitelistedIps")
            if whitelisted_ips is not None:
                whitelisted_ips.set_elements(AAZStrType, ".")

            disc_clone = _builder.get(".properties{dataBaseType:Clone}")
            if disc_clone is not None:
                disc_clone.set_prop("cloneType", AAZStrType, ".clone.clone_type", typ_kwargs={"flags": {"required": True}})
                disc_clone.set_prop("refreshableModel", AAZStrType, ".clone.refreshable_model")
                disc_clone.set_prop("source", AAZStrType, ".clone.source")
                disc_clone.set_prop("sourceId", AAZStrType, ".clone.source_id", typ_kwargs={"flags": {"required": True}})

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.location = AAZStrType(
                flags={"required": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.actual_used_data_storage_size_in_tbs = AAZFloatType(
                serialized_name="actualUsedDataStorageSizeInTbs",
                flags={"read_only": True},
            )
            properties.allocated_storage_size_in_tbs = AAZFloatType(
                serialized_name="allocatedStorageSizeInTbs",
                flags={"read_only": True},
            )
            properties.apex_details = AAZObjectType(
                serialized_name="apexDetails",
            )
            properties.autonomous_database_id = AAZStrType(
                serialized_name="autonomousDatabaseId",
            )
            properties.autonomous_maintenance_schedule_type = AAZStrType(
                serialized_name="autonomousMaintenanceScheduleType",
            )
            properties.available_upgrade_versions = AAZListType(
                serialized_name="availableUpgradeVersions",
                flags={"read_only": True},
            )
            properties.backup_retention_period_in_days = AAZIntType(
                serialized_name="backupRetentionPeriodInDays",
            )
            properties.character_set = AAZStrType(
                serialized_name="characterSet",
            )
            properties.compute_count = AAZFloatType(
                serialized_name="computeCount",
            )
            properties.compute_model = AAZStrType(
                serialized_name="computeModel",
            )
            properties.connection_strings = AAZObjectType(
                serialized_name="connectionStrings",
            )
            properties.connection_urls = AAZObjectType(
                serialized_name="connectionUrls",
            )
            properties.cpu_core_count = AAZIntType(
                serialized_name="cpuCoreCount",
            )
            properties.customer_contacts = AAZListType(
                serialized_name="customerContacts",
            )
            properties.data_base_type = AAZStrType(
                serialized_name="dataBaseType",
            )
            properties.data_safe_status = AAZStrType(
                serialized_name="dataSafeStatus",
            )
            properties.data_storage_size_in_gbs = AAZIntType(
                serialized_name="dataStorageSizeInGbs",
            )
            properties.data_storage_size_in_tbs = AAZIntType(
                serialized_name="dataStorageSizeInTbs",
            )
            properties.database_edition = AAZStrType(
                serialized_name="databaseEdition",
            )
            properties.db_version = AAZStrType(
                serialized_name="dbVersion",
            )
            properties.db_workload = AAZStrType(
                serialized_name="dbWorkload",
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.failed_data_recovery_in_seconds = AAZIntType(
                serialized_name="failedDataRecoveryInSeconds",
                flags={"read_only": True},
            )
            properties.in_memory_area_in_gbs = AAZIntType(
                serialized_name="inMemoryAreaInGbs",
                flags={"read_only": True},
            )
            properties.is_auto_scaling_enabled = AAZBoolType(
                serialized_name="isAutoScalingEnabled",
            )
            properties.is_auto_scaling_for_storage_enabled = AAZBoolType(
                serialized_name="isAutoScalingForStorageEnabled",
            )
            properties.is_local_data_guard_enabled = AAZBoolType(
                serialized_name="isLocalDataGuardEnabled",
            )
            properties.is_mtls_connection_required = AAZBoolType(
                serialized_name="isMtlsConnectionRequired",
            )
            properties.is_preview = AAZBoolType(
                serialized_name="isPreview",
                flags={"read_only": True},
            )
            properties.is_remote_data_guard_enabled = AAZBoolType(
                serialized_name="isRemoteDataGuardEnabled",
                flags={"read_only": True},
            )
            properties.license_model = AAZStrType(
                serialized_name="licenseModel",
            )
            properties.lifecycle_details = AAZStrType(
                serialized_name="lifecycleDetails",
                flags={"read_only": True},
            )
            properties.lifecycle_state = AAZStrType(
                serialized_name="lifecycleState",
            )
            properties.local_adg_auto_failover_max_data_loss_limit = AAZIntType(
                serialized_name="localAdgAutoFailoverMaxDataLossLimit",
            )
            properties.local_disaster_recovery_type = AAZStrType(
                serialized_name="localDisasterRecoveryType",
            )
            properties.local_standby_db = AAZObjectType(
                serialized_name="localStandbyDb",
            )
            properties.long_term_backup_schedule = AAZObjectType(
                serialized_name="longTermBackupSchedule",
            )
            properties.memory_per_oracle_compute_unit_in_gbs = AAZIntType(
                serialized_name="memoryPerOracleComputeUnitInGbs",
                flags={"read_only": True},
            )
            properties.ncharacter_set = AAZStrType(
                serialized_name="ncharacterSet",
            )
            properties.next_long_term_backup_time_stamp = AAZStrType(
                serialized_name="nextLongTermBackupTimeStamp",
                flags={"read_only": True},
            )
            properties.oci_url = AAZStrType(
                serialized_name="ociUrl",
                flags={"read_only": True},
            )
            properties.ocid = AAZStrType()
            properties.open_mode = AAZStrType(
                serialized_name="openMode",
            )
            properties.operations_insights_status = AAZStrType(
                serialized_name="operationsInsightsStatus",
            )
            properties.peer_db_ids = AAZListType(
                serialized_name="peerDbIds",
                flags={"read_only": True},
            )
            properties.permission_level = AAZStrType(
                serialized_name="permissionLevel",
            )
            properties.private_endpoint = AAZStrType(
                serialized_name="privateEndpoint",
                flags={"read_only": True},
            )
            properties.private_endpoint_ip = AAZStrType(
                serialized_name="privateEndpointIp",
            )
            properties.private_endpoint_label = AAZStrType(
                serialized_name="privateEndpointLabel",
            )
            properties.provisionable_cpus = AAZListType(
                serialized_name="provisionableCpus",
                flags={"read_only": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.role = AAZStrType()
            properties.scheduled_operations = AAZObjectType(
                serialized_name="scheduledOperations",
            )
            properties.service_console_url = AAZStrType(
                serialized_name="serviceConsoleUrl",
                flags={"read_only": True},
            )
            properties.sql_web_developer_url = AAZStrType(
                serialized_name="sqlWebDeveloperUrl",
                flags={"read_only": True},
            )
            properties.subnet_id = AAZStrType(
                serialized_name="subnetId",
            )
            properties.supported_regions_to_clone_to = AAZListType(
                serialized_name="supportedRegionsToCloneTo",
                flags={"read_only": True},
            )
            properties.time_created = AAZStrType(
                serialized_name="timeCreated",
                flags={"read_only": True},
            )
            properties.time_data_guard_role_changed = AAZStrType(
                serialized_name="timeDataGuardRoleChanged",
                flags={"read_only": True},
            )
            properties.time_deletion_of_free_autonomous_database = AAZStrType(
                serialized_name="timeDeletionOfFreeAutonomousDatabase",
                flags={"read_only": True},
            )
            properties.time_local_data_guard_enabled = AAZStrType(
                serialized_name="timeLocalDataGuardEnabled",
                flags={"read_only": True},
            )
            properties.time_maintenance_begin = AAZStrType(
                serialized_name="timeMaintenanceBegin",
                flags={"read_only": True},
            )
            properties.time_maintenance_end = AAZStrType(
                serialized_name="timeMaintenanceEnd",
                flags={"read_only": True},
            )
            properties.time_of_last_failover = AAZStrType(
                serialized_name="timeOfLastFailover",
                flags={"read_only": True},
            )
            properties.time_of_last_refresh = AAZStrType(
                serialized_name="timeOfLastRefresh",
                flags={"read_only": True},
            )
            properties.time_of_last_refresh_point = AAZStrType(
                serialized_name="timeOfLastRefreshPoint",
                flags={"read_only": True},
            )
            properties.time_of_last_switchover = AAZStrType(
                serialized_name="timeOfLastSwitchover",
                flags={"read_only": True},
            )
            properties.time_reclamation_of_free_autonomous_database = AAZStrType(
                serialized_name="timeReclamationOfFreeAutonomousDatabase",
                flags={"read_only": True},
            )
            properties.used_data_storage_size_in_gbs = AAZIntType(
                serialized_name="usedDataStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.used_data_storage_size_in_tbs = AAZIntType(
                serialized_name="usedDataStorageSizeInTbs",
                flags={"read_only": True},
            )
            properties.vnet_id = AAZStrType(
                serialized_name="vnetId",
            )
            properties.whitelisted_ips = AAZListType(
                serialized_name="whitelistedIps",
            )

            apex_details = cls._schema_on_200_201.properties.apex_details
            apex_details.apex_version = AAZStrType(
                serialized_name="apexVersion",
            )
            apex_details.ords_version = AAZStrType(
                serialized_name="ordsVersion",
            )

            available_upgrade_versions = cls._schema_on_200_201.properties.available_upgrade_versions
            available_upgrade_versions.Element = AAZStrType()

            connection_strings = cls._schema_on_200_201.properties.connection_strings
            connection_strings.all_connection_strings = AAZObjectType(
                serialized_name="allConnectionStrings",
            )
            connection_strings.dedicated = AAZStrType()
            connection_strings.high = AAZStrType()
            connection_strings.low = AAZStrType()
            connection_strings.medium = AAZStrType()
            connection_strings.profiles = AAZListType()

            all_connection_strings = cls._schema_on_200_201.properties.connection_strings.all_connection_strings
            all_connection_strings.high = AAZStrType()
            all_connection_strings.low = AAZStrType()
            all_connection_strings.medium = AAZStrType()

            profiles = cls._schema_on_200_201.properties.connection_strings.profiles
            profiles.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.connection_strings.profiles.Element
            _element.consumer_group = AAZStrType(
                serialized_name="consumerGroup",
            )
            _element.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            _element.host_format = AAZStrType(
                serialized_name="hostFormat",
                flags={"required": True},
            )
            _element.is_regional = AAZBoolType(
                serialized_name="isRegional",
            )
            _element.protocol = AAZStrType(
                flags={"required": True},
            )
            _element.session_mode = AAZStrType(
                serialized_name="sessionMode",
                flags={"required": True},
            )
            _element.syntax_format = AAZStrType(
                serialized_name="syntaxFormat",
                flags={"required": True},
            )
            _element.tls_authentication = AAZStrType(
                serialized_name="tlsAuthentication",
            )
            _element.value = AAZStrType(
                flags={"required": True},
            )

            connection_urls = cls._schema_on_200_201.properties.connection_urls
            connection_urls.apex_url = AAZStrType(
                serialized_name="apexUrl",
            )
            connection_urls.database_transforms_url = AAZStrType(
                serialized_name="databaseTransformsUrl",
            )
            connection_urls.graph_studio_url = AAZStrType(
                serialized_name="graphStudioUrl",
            )
            connection_urls.machine_learning_notebook_url = AAZStrType(
                serialized_name="machineLearningNotebookUrl",
            )
            connection_urls.mongo_db_url = AAZStrType(
                serialized_name="mongoDbUrl",
            )
            connection_urls.ords_url = AAZStrType(
                serialized_name="ordsUrl",
            )
            connection_urls.sql_dev_web_url = AAZStrType(
                serialized_name="sqlDevWebUrl",
            )

            customer_contacts = cls._schema_on_200_201.properties.customer_contacts
            customer_contacts.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.customer_contacts.Element
            _element.email = AAZStrType(
                flags={"required": True},
            )

            local_standby_db = cls._schema_on_200_201.properties.local_standby_db
            local_standby_db.lag_time_in_seconds = AAZIntType(
                serialized_name="lagTimeInSeconds",
            )
            local_standby_db.lifecycle_details = AAZStrType(
                serialized_name="lifecycleDetails",
            )
            local_standby_db.lifecycle_state = AAZStrType(
                serialized_name="lifecycleState",
            )
            local_standby_db.time_data_guard_role_changed = AAZStrType(
                serialized_name="timeDataGuardRoleChanged",
            )
            local_standby_db.time_disaster_recovery_role_changed = AAZStrType(
                serialized_name="timeDisasterRecoveryRoleChanged",
            )

            long_term_backup_schedule = cls._schema_on_200_201.properties.long_term_backup_schedule
            long_term_backup_schedule.is_disabled = AAZBoolType(
                serialized_name="isDisabled",
            )
            long_term_backup_schedule.repeat_cadence = AAZStrType(
                serialized_name="repeatCadence",
            )
            long_term_backup_schedule.retention_period_in_days = AAZIntType(
                serialized_name="retentionPeriodInDays",
            )
            long_term_backup_schedule.time_of_backup = AAZStrType(
                serialized_name="timeOfBackup",
            )

            peer_db_ids = cls._schema_on_200_201.properties.peer_db_ids
            peer_db_ids.Element = AAZStrType()

            provisionable_cpus = cls._schema_on_200_201.properties.provisionable_cpus
            provisionable_cpus.Element = AAZIntType()

            scheduled_operations = cls._schema_on_200_201.properties.scheduled_operations
            scheduled_operations.day_of_week = AAZObjectType(
                serialized_name="dayOfWeek",
                flags={"required": True},
            )
            scheduled_operations.scheduled_start_time = AAZStrType(
                serialized_name="scheduledStartTime",
            )
            scheduled_operations.scheduled_stop_time = AAZStrType(
                serialized_name="scheduledStopTime",
            )

            day_of_week = cls._schema_on_200_201.properties.scheduled_operations.day_of_week
            day_of_week.name = AAZStrType(
                flags={"required": True},
            )

            supported_regions_to_clone_to = cls._schema_on_200_201.properties.supported_regions_to_clone_to
            supported_regions_to_clone_to.Element = AAZStrType()

            whitelisted_ips = cls._schema_on_200_201.properties.whitelisted_ips
            whitelisted_ips.Element = AAZStrType()

            disc_clone = cls._schema_on_200_201.properties.discriminate_by("data_base_type", "Clone")
            disc_clone.is_reconnect_clone_enabled = AAZBoolType(
                serialized_name="isReconnectCloneEnabled",
                flags={"read_only": True},
            )
            disc_clone.is_refreshable_clone = AAZBoolType(
                serialized_name="isRefreshableClone",
                flags={"read_only": True},
            )
            disc_clone.refreshable_status = AAZStrType(
                serialized_name="refreshableStatus",
            )
            disc_clone.source_id = AAZStrType(
                serialized_name="sourceId",
                flags={"required": True},
            )
            disc_clone.time_until_reconnect_clone_enabled = AAZStrType(
                serialized_name="timeUntilReconnectCloneEnabled",
            )

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
