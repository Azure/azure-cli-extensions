# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "oracle-database cloud-vm-cluster database-node action",
)
class Action(AAZCommand):
    """VM actions on DbNode of VM Cluster by the provided filter

    :example: Action on Database Node - Start
        az oracle-database cloud-vm-cluster database-node action --cloudvmclustername <VM Cluster Name> --resource-group <resource group> --dbnodeocid <db node ocid> --action Start

    :example: Action on Database Node - Stop
        az oracle-database cloud-vm-cluster database-node action --cloudvmclustername <VM Cluster Name> --resource-group <resource group> --dbnodeocid <db node ocid> --action Stop
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/oracle.database/cloudvmclusters/{}/dbnodes/{}/action", "2023-09-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.cloudvmclustername = AAZStrArg(
            options=["--cloudvmclustername"],
            help="CloudVmCluster name",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern=".*",
            ),
        )
        _args_schema.dbnodeocid = AAZStrArg(
            options=["--dbnodeocid"],
            help="DbNode OCID.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern=".*",
                max_length=255,
                min_length=1,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.action = AAZStrArg(
            options=["--action"],
            arg_group="Body",
            help="Db action",
            required=True,
            enum={"Reset": "Reset", "SoftReset": "SoftReset", "Start": "Start", "Stop": "Stop"},
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.DbNodesAction(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class DbNodesAction(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudVmClusters/{cloudvmclustername}/dbNodes/{dbnodeocid}/action",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "cloudvmclustername", self.ctx.args.cloudvmclustername,
                    required=True,
                ),
                **self.serialize_url_param(
                    "dbnodeocid", self.ctx.args.dbnodeocid,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("action", AAZStrType, ".action", typ_kwargs={"flags": {"required": True}})

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.additional_details = AAZStrType(
                serialized_name="additionalDetails",
                flags={"read_only": True},
            )
            properties.backup_ip_id = AAZStrType(
                serialized_name="backupIpId",
            )
            properties.backup_vnic2_id = AAZStrType(
                serialized_name="backupVnic2Id",
            )
            properties.backup_vnic_id = AAZStrType(
                serialized_name="backupVnicId",
            )
            properties.cpu_core_count = AAZIntType(
                serialized_name="cpuCoreCount",
                flags={"read_only": True},
            )
            properties.db_node_storage_size_in_gbs = AAZIntType(
                serialized_name="dbNodeStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.db_server_id = AAZStrType(
                serialized_name="dbServerId",
            )
            properties.db_system_id = AAZStrType(
                serialized_name="dbSystemId",
                flags={"required": True},
            )
            properties.fault_domain = AAZStrType(
                serialized_name="faultDomain",
                flags={"read_only": True},
            )
            properties.host_ip_id = AAZStrType(
                serialized_name="hostIpId",
            )
            properties.hostname = AAZStrType(
                flags={"read_only": True},
            )
            properties.lifecycle_details = AAZStrType(
                serialized_name="lifecycleDetails",
                flags={"read_only": True},
            )
            properties.lifecycle_state = AAZStrType(
                serialized_name="lifecycleState",
            )
            properties.maintenance_type = AAZStrType(
                serialized_name="maintenanceType",
            )
            properties.memory_size_in_gbs = AAZIntType(
                serialized_name="memorySizeInGbs",
                flags={"read_only": True},
            )
            properties.ocid = AAZStrType(
                flags={"required": True},
            )
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.software_storage_size_in_gb = AAZIntType(
                serialized_name="softwareStorageSizeInGb",
                flags={"read_only": True},
            )
            properties.time_created = AAZStrType(
                serialized_name="timeCreated",
                flags={"read_only": True},
            )
            properties.time_maintenance_window_end = AAZStrType(
                serialized_name="timeMaintenanceWindowEnd",
                flags={"read_only": True},
            )
            properties.time_maintenance_window_start = AAZStrType(
                serialized_name="timeMaintenanceWindowStart",
                flags={"read_only": True},
            )
            properties.vnic2_id = AAZStrType(
                serialized_name="vnic2Id",
            )
            properties.vnic_id = AAZStrType(
                serialized_name="vnicId",
            )

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _ActionHelper:
    """Helper class for Action"""


__all__ = ["Action"]
