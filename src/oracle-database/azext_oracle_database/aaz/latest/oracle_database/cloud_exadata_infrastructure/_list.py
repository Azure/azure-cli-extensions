# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "oracle-database cloud-exadata-infrastructure list",
)
class List(AAZCommand):
    """List CloudExadataInfrastructure resources by subscription ID

    :example: List Exa Infra
        az oracle-database cloud-exadata-infrastructure list --resource-group <RG name>
    """

    _aaz_info = {
        "version": "2023-09-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/oracle.database/cloudexadatainfrastructures", "2023-09-01"],
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/oracle.database/cloudexadatainfrastructures", "2023-09-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        condition_0 = has_value(self.ctx.args.resource_group) and has_value(self.ctx.subscription_id)
        condition_1 = has_value(self.ctx.subscription_id) and has_value(self.ctx.args.resource_group) is not True
        if condition_0:
            self.CloudExadataInfrastructuresListByResourceGroup(ctx=self.ctx)()
        if condition_1:
            self.CloudExadataInfrastructuresListBySubscription(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class CloudExadataInfrastructuresListByResourceGroup(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Oracle.Database/cloudExadataInfrastructures",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )
            _element.zones = AAZListType(
                flags={"required": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.activated_storage_count = AAZIntType(
                serialized_name="activatedStorageCount",
                flags={"read_only": True},
            )
            properties.additional_storage_count = AAZIntType(
                serialized_name="additionalStorageCount",
                flags={"read_only": True},
            )
            properties.available_storage_size_in_gbs = AAZIntType(
                serialized_name="availableStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.compute_count = AAZIntType(
                serialized_name="computeCount",
            )
            properties.cpu_count = AAZIntType(
                serialized_name="cpuCount",
                flags={"read_only": True},
            )
            properties.customer_contacts = AAZListType(
                serialized_name="customerContacts",
            )
            properties.data_storage_size_in_tbs = AAZFloatType(
                serialized_name="dataStorageSizeInTbs",
                flags={"read_only": True},
            )
            properties.db_node_storage_size_in_gbs = AAZIntType(
                serialized_name="dbNodeStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.db_server_version = AAZStrType(
                serialized_name="dbServerVersion",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            properties.estimated_patching_time = AAZObjectType(
                serialized_name="estimatedPatchingTime",
            )
            properties.last_maintenance_run_id = AAZStrType(
                serialized_name="lastMaintenanceRunId",
            )
            properties.lifecycle_details = AAZStrType(
                serialized_name="lifecycleDetails",
                flags={"read_only": True},
            )
            properties.lifecycle_state = AAZStrType(
                serialized_name="lifecycleState",
            )
            properties.maintenance_window = AAZObjectType(
                serialized_name="maintenanceWindow",
            )
            properties.max_cpu_count = AAZIntType(
                serialized_name="maxCpuCount",
                flags={"read_only": True},
            )
            properties.max_data_storage_in_tbs = AAZFloatType(
                serialized_name="maxDataStorageInTbs",
                flags={"read_only": True},
            )
            properties.max_db_node_storage_size_in_gbs = AAZIntType(
                serialized_name="maxDbNodeStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.max_memory_in_gbs = AAZIntType(
                serialized_name="maxMemoryInGbs",
                flags={"read_only": True},
            )
            properties.memory_size_in_gbs = AAZIntType(
                serialized_name="memorySizeInGbs",
                flags={"read_only": True},
            )
            properties.monthly_db_server_version = AAZStrType(
                serialized_name="monthlyDbServerVersion",
                flags={"read_only": True},
            )
            properties.monthly_storage_server_version = AAZStrType(
                serialized_name="monthlyStorageServerVersion",
                flags={"read_only": True},
            )
            properties.next_maintenance_run_id = AAZStrType(
                serialized_name="nextMaintenanceRunId",
            )
            properties.oci_url = AAZStrType(
                serialized_name="ociUrl",
                flags={"read_only": True},
            )
            properties.ocid = AAZStrType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.shape = AAZStrType(
                flags={"required": True},
            )
            properties.storage_count = AAZIntType(
                serialized_name="storageCount",
            )
            properties.storage_server_version = AAZStrType(
                serialized_name="storageServerVersion",
                flags={"read_only": True},
            )
            properties.time_created = AAZStrType(
                serialized_name="timeCreated",
                flags={"read_only": True},
            )
            properties.total_storage_size_in_gbs = AAZIntType(
                serialized_name="totalStorageSizeInGbs",
                flags={"read_only": True},
            )

            customer_contacts = cls._schema_on_200.value.Element.properties.customer_contacts
            customer_contacts.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.customer_contacts.Element
            _element.email = AAZStrType(
                flags={"required": True},
            )

            estimated_patching_time = cls._schema_on_200.value.Element.properties.estimated_patching_time
            estimated_patching_time.estimated_db_server_patching_time = AAZIntType(
                serialized_name="estimatedDbServerPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.estimated_network_switches_patching_time = AAZIntType(
                serialized_name="estimatedNetworkSwitchesPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.estimated_storage_server_patching_time = AAZIntType(
                serialized_name="estimatedStorageServerPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.total_estimated_patching_time = AAZIntType(
                serialized_name="totalEstimatedPatchingTime",
                flags={"read_only": True},
            )

            maintenance_window = cls._schema_on_200.value.Element.properties.maintenance_window
            maintenance_window.custom_action_timeout_in_mins = AAZIntType(
                serialized_name="customActionTimeoutInMins",
            )
            maintenance_window.days_of_week = AAZListType(
                serialized_name="daysOfWeek",
            )
            maintenance_window.hours_of_day = AAZListType(
                serialized_name="hoursOfDay",
            )
            maintenance_window.is_custom_action_timeout_enabled = AAZBoolType(
                serialized_name="isCustomActionTimeoutEnabled",
            )
            maintenance_window.is_monthly_patching_enabled = AAZBoolType(
                serialized_name="isMonthlyPatchingEnabled",
            )
            maintenance_window.lead_time_in_weeks = AAZIntType(
                serialized_name="leadTimeInWeeks",
            )
            maintenance_window.months = AAZListType()
            maintenance_window.patching_mode = AAZStrType(
                serialized_name="patchingMode",
            )
            maintenance_window.preference = AAZStrType()
            maintenance_window.weeks_of_month = AAZListType(
                serialized_name="weeksOfMonth",
            )

            days_of_week = cls._schema_on_200.value.Element.properties.maintenance_window.days_of_week
            days_of_week.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.maintenance_window.days_of_week.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )

            hours_of_day = cls._schema_on_200.value.Element.properties.maintenance_window.hours_of_day
            hours_of_day.Element = AAZIntType()

            months = cls._schema_on_200.value.Element.properties.maintenance_window.months
            months.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.maintenance_window.months.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )

            weeks_of_month = cls._schema_on_200.value.Element.properties.maintenance_window.weeks_of_month
            weeks_of_month.Element = AAZIntType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.value.Element.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200

    class CloudExadataInfrastructuresListBySubscription(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Oracle.Database/cloudExadataInfrastructures",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-09-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType(
                flags={"required": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType(
                flags={"required": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _element.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _element.tags = AAZDictType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )
            _element.zones = AAZListType(
                flags={"required": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.activated_storage_count = AAZIntType(
                serialized_name="activatedStorageCount",
                flags={"read_only": True},
            )
            properties.additional_storage_count = AAZIntType(
                serialized_name="additionalStorageCount",
                flags={"read_only": True},
            )
            properties.available_storage_size_in_gbs = AAZIntType(
                serialized_name="availableStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.compute_count = AAZIntType(
                serialized_name="computeCount",
            )
            properties.cpu_count = AAZIntType(
                serialized_name="cpuCount",
                flags={"read_only": True},
            )
            properties.customer_contacts = AAZListType(
                serialized_name="customerContacts",
            )
            properties.data_storage_size_in_tbs = AAZFloatType(
                serialized_name="dataStorageSizeInTbs",
                flags={"read_only": True},
            )
            properties.db_node_storage_size_in_gbs = AAZIntType(
                serialized_name="dbNodeStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.db_server_version = AAZStrType(
                serialized_name="dbServerVersion",
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"required": True},
            )
            properties.estimated_patching_time = AAZObjectType(
                serialized_name="estimatedPatchingTime",
            )
            properties.last_maintenance_run_id = AAZStrType(
                serialized_name="lastMaintenanceRunId",
            )
            properties.lifecycle_details = AAZStrType(
                serialized_name="lifecycleDetails",
                flags={"read_only": True},
            )
            properties.lifecycle_state = AAZStrType(
                serialized_name="lifecycleState",
            )
            properties.maintenance_window = AAZObjectType(
                serialized_name="maintenanceWindow",
            )
            properties.max_cpu_count = AAZIntType(
                serialized_name="maxCpuCount",
                flags={"read_only": True},
            )
            properties.max_data_storage_in_tbs = AAZFloatType(
                serialized_name="maxDataStorageInTbs",
                flags={"read_only": True},
            )
            properties.max_db_node_storage_size_in_gbs = AAZIntType(
                serialized_name="maxDbNodeStorageSizeInGbs",
                flags={"read_only": True},
            )
            properties.max_memory_in_gbs = AAZIntType(
                serialized_name="maxMemoryInGbs",
                flags={"read_only": True},
            )
            properties.memory_size_in_gbs = AAZIntType(
                serialized_name="memorySizeInGbs",
                flags={"read_only": True},
            )
            properties.monthly_db_server_version = AAZStrType(
                serialized_name="monthlyDbServerVersion",
                flags={"read_only": True},
            )
            properties.monthly_storage_server_version = AAZStrType(
                serialized_name="monthlyStorageServerVersion",
                flags={"read_only": True},
            )
            properties.next_maintenance_run_id = AAZStrType(
                serialized_name="nextMaintenanceRunId",
            )
            properties.oci_url = AAZStrType(
                serialized_name="ociUrl",
                flags={"read_only": True},
            )
            properties.ocid = AAZStrType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.shape = AAZStrType(
                flags={"required": True},
            )
            properties.storage_count = AAZIntType(
                serialized_name="storageCount",
            )
            properties.storage_server_version = AAZStrType(
                serialized_name="storageServerVersion",
                flags={"read_only": True},
            )
            properties.time_created = AAZStrType(
                serialized_name="timeCreated",
                flags={"read_only": True},
            )
            properties.total_storage_size_in_gbs = AAZIntType(
                serialized_name="totalStorageSizeInGbs",
                flags={"read_only": True},
            )

            customer_contacts = cls._schema_on_200.value.Element.properties.customer_contacts
            customer_contacts.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.customer_contacts.Element
            _element.email = AAZStrType(
                flags={"required": True},
            )

            estimated_patching_time = cls._schema_on_200.value.Element.properties.estimated_patching_time
            estimated_patching_time.estimated_db_server_patching_time = AAZIntType(
                serialized_name="estimatedDbServerPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.estimated_network_switches_patching_time = AAZIntType(
                serialized_name="estimatedNetworkSwitchesPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.estimated_storage_server_patching_time = AAZIntType(
                serialized_name="estimatedStorageServerPatchingTime",
                flags={"read_only": True},
            )
            estimated_patching_time.total_estimated_patching_time = AAZIntType(
                serialized_name="totalEstimatedPatchingTime",
                flags={"read_only": True},
            )

            maintenance_window = cls._schema_on_200.value.Element.properties.maintenance_window
            maintenance_window.custom_action_timeout_in_mins = AAZIntType(
                serialized_name="customActionTimeoutInMins",
            )
            maintenance_window.days_of_week = AAZListType(
                serialized_name="daysOfWeek",
            )
            maintenance_window.hours_of_day = AAZListType(
                serialized_name="hoursOfDay",
            )
            maintenance_window.is_custom_action_timeout_enabled = AAZBoolType(
                serialized_name="isCustomActionTimeoutEnabled",
            )
            maintenance_window.is_monthly_patching_enabled = AAZBoolType(
                serialized_name="isMonthlyPatchingEnabled",
            )
            maintenance_window.lead_time_in_weeks = AAZIntType(
                serialized_name="leadTimeInWeeks",
            )
            maintenance_window.months = AAZListType()
            maintenance_window.patching_mode = AAZStrType(
                serialized_name="patchingMode",
            )
            maintenance_window.preference = AAZStrType()
            maintenance_window.weeks_of_month = AAZListType(
                serialized_name="weeksOfMonth",
            )

            days_of_week = cls._schema_on_200.value.Element.properties.maintenance_window.days_of_week
            days_of_week.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.maintenance_window.days_of_week.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )

            hours_of_day = cls._schema_on_200.value.Element.properties.maintenance_window.hours_of_day
            hours_of_day.Element = AAZIntType()

            months = cls._schema_on_200.value.Element.properties.maintenance_window.months
            months.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.maintenance_window.months.Element
            _element.name = AAZStrType(
                flags={"required": True},
            )

            weeks_of_month = cls._schema_on_200.value.Element.properties.maintenance_window.weeks_of_month
            weeks_of_month.Element = AAZIntType()

            system_data = cls._schema_on_200.value.Element.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            tags = cls._schema_on_200.value.Element.tags
            tags.Element = AAZStrType()

            zones = cls._schema_on_200.value.Element.zones
            zones.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
