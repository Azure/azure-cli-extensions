# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "storage account task-assignment update",
    is_preview=True,
)
class Update(AAZCommand):
    """Update creates a new storage task assignment sub-resource with the specified parameters. If a storage task assignment is already created and a subsequent create request is issued with different properties, the storage task assignment properties will be updated. If a storage task assignment is already created and a subsequent create or update request is issued with the exact same set of properties, the request will succeed.
    """

    _aaz_info = {
        "version": "2023-05-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.storage/storageaccounts/{}/storagetaskassignments/{}", "2023-05-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.account_name = AAZStrArg(
            options=["--account-name"],
            help="The name of the storage account within the specified resource group. Storage account names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
            required=True,
            id_part="name",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]+$",
                max_length=24,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.storage_task_assignment_name = AAZStrArg(
            options=["-n", "--name", "--storage-task-assignment-name"],
            help="The name of the storage task assignment within the specified resource group. Storage task assignment names must be between 3 and 24 characters in length and use numbers and lower-case letters only.",
            required=True,
            id_part="child_name_1",
            fmt=AAZStrArgFormat(
                pattern="^[a-z0-9]{3,24}$",
                max_length=24,
                min_length=3,
            ),
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.description = AAZStrArg(
            options=["--description"],
            arg_group="Properties",
            help="Text that describes the purpose of the storage task assignment",
        )
        _args_schema.enabled = AAZBoolArg(
            options=["--enabled"],
            arg_group="Properties",
            help="Whether the storage task assignment is enabled or not",
        )
        _args_schema.execution_context = AAZObjectArg(
            options=["--execution-context"],
            arg_group="Properties",
            help="The storage task assignment execution context",
        )
        _args_schema.report = AAZObjectArg(
            options=["--report"],
            arg_group="Properties",
            help="The storage task assignment report",
        )
        _args_schema.task_id = AAZResourceIdArg(
            options=["--task-id"],
            arg_group="Properties",
            help="Id of the corresponding storage task",
        )

        execution_context = cls._args_schema.execution_context
        execution_context.target = AAZObjectArg(
            options=["target"],
            help="Execution target of the storage task assignment",
            nullable=True,
        )
        execution_context.trigger = AAZObjectArg(
            options=["trigger"],
            help="Execution trigger of the storage task assignment",
        )

        target = cls._args_schema.execution_context.target
        target.exclude_prefix = AAZListArg(
            options=["exclude-prefix"],
            help="List of object prefixes to be excluded from task execution. If there is a conflict between include and exclude prefixes, the exclude prefix will be the determining factor",
            nullable=True,
        )
        target.prefix = AAZListArg(
            options=["prefix"],
            help="Required list of object prefixes to be included for task execution",
            nullable=True,
        )

        exclude_prefix = cls._args_schema.execution_context.target.exclude_prefix
        exclude_prefix.Element = AAZStrArg(
            nullable=True,
        )

        prefix = cls._args_schema.execution_context.target.prefix
        prefix.Element = AAZStrArg(
            nullable=True,
        )

        trigger = cls._args_schema.execution_context.trigger
        trigger.parameters = AAZObjectArg(
            options=["parameters"],
            help="The trigger parameters of the storage task assignment execution",
        )
        trigger.type = AAZStrArg(
            options=["type"],
            help="The trigger type of the storage task assignment execution",
            enum={"OnSchedule": "OnSchedule", "RunOnce": "RunOnce"},
        )

        parameters = cls._args_schema.execution_context.trigger.parameters
        parameters.end_by = AAZDateTimeArg(
            options=["end-by"],
            help="When to end task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'",
            nullable=True,
        )
        parameters.interval = AAZIntArg(
            options=["interval"],
            help="Run interval of task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'",
            nullable=True,
            fmt=AAZIntArgFormat(
                minimum=1,
            ),
        )
        parameters.interval_unit = AAZStrArg(
            options=["interval-unit"],
            help="Run interval unit of task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'",
            nullable=True,
            enum={"Days": "Days"},
        )
        parameters.start_from = AAZDateTimeArg(
            options=["start-from"],
            help="When to start task execution. This is a required field when ExecutionTrigger.properties.type is 'OnSchedule'; this property should not be present when ExecutionTrigger.properties.type is 'RunOnce'",
            nullable=True,
        )
        parameters.start_on = AAZDateTimeArg(
            options=["start-on"],
            help="When to start task execution. This is an optional field when ExecutionTrigger.properties.type is 'RunOnce'; this property should not be present when ExecutionTrigger.properties.type is 'OnSchedule'",
            nullable=True,
        )

        report = cls._args_schema.report
        report.prefix = AAZStrArg(
            options=["prefix"],
            help="The container prefix for the location of storage task assignment report",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.StorageTaskAssignmentsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.StorageTaskAssignmentsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class StorageTaskAssignmentsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/storageTaskAssignments/{storageTaskAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accountName", self.ctx.args.account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageTaskAssignmentName", self.ctx.args.storage_task_assignment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_storage_task_assignment_read(cls._schema_on_200)

            return cls._schema_on_200

    class StorageTaskAssignmentsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "location"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Storage/storageAccounts/{accountName}/storageTaskAssignments/{storageTaskAssignmentName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "accountName", self.ctx.args.account_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "storageTaskAssignmentName", self.ctx.args.storage_task_assignment_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-05-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_storage_task_assignment_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("description", AAZStrType, ".description", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("enabled", AAZBoolType, ".enabled", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("executionContext", AAZObjectType, ".execution_context", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("report", AAZObjectType, ".report", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("taskId", AAZStrType, ".task_id", typ_kwargs={"flags": {"required": True}})

            execution_context = _builder.get(".properties.executionContext")
            if execution_context is not None:
                execution_context.set_prop("target", AAZObjectType, ".target")
                execution_context.set_prop("trigger", AAZObjectType, ".trigger", typ_kwargs={"flags": {"required": True}})

            target = _builder.get(".properties.executionContext.target")
            if target is not None:
                target.set_prop("excludePrefix", AAZListType, ".exclude_prefix")
                target.set_prop("prefix", AAZListType, ".prefix")

            exclude_prefix = _builder.get(".properties.executionContext.target.excludePrefix")
            if exclude_prefix is not None:
                exclude_prefix.set_elements(AAZStrType, ".")

            prefix = _builder.get(".properties.executionContext.target.prefix")
            if prefix is not None:
                prefix.set_elements(AAZStrType, ".")

            trigger = _builder.get(".properties.executionContext.trigger")
            if trigger is not None:
                trigger.set_prop("parameters", AAZObjectType, ".parameters", typ_kwargs={"flags": {"required": True}})
                trigger.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})

            parameters = _builder.get(".properties.executionContext.trigger.parameters")
            if parameters is not None:
                parameters.set_prop("endBy", AAZStrType, ".end_by")
                parameters.set_prop("interval", AAZIntType, ".interval")
                parameters.set_prop("intervalUnit", AAZStrType, ".interval_unit")
                parameters.set_prop("startFrom", AAZStrType, ".start_from")
                parameters.set_prop("startOn", AAZStrType, ".start_on")

            report = _builder.get(".properties.report")
            if report is not None:
                report.set_prop("prefix", AAZStrType, ".prefix", typ_kwargs={"flags": {"required": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_storage_task_assignment_read = None

    @classmethod
    def _build_schema_storage_task_assignment_read(cls, _schema):
        if cls._schema_storage_task_assignment_read is not None:
            _schema.id = cls._schema_storage_task_assignment_read.id
            _schema.name = cls._schema_storage_task_assignment_read.name
            _schema.properties = cls._schema_storage_task_assignment_read.properties
            _schema.type = cls._schema_storage_task_assignment_read.type
            return

        cls._schema_storage_task_assignment_read = _schema_storage_task_assignment_read = AAZObjectType()

        storage_task_assignment_read = _schema_storage_task_assignment_read
        storage_task_assignment_read.id = AAZStrType(
            flags={"read_only": True},
        )
        storage_task_assignment_read.name = AAZStrType(
            flags={"read_only": True},
        )
        storage_task_assignment_read.properties = AAZObjectType(
            flags={"required": True},
        )
        storage_task_assignment_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_storage_task_assignment_read.properties
        properties.description = AAZStrType(
            flags={"required": True},
        )
        properties.enabled = AAZBoolType(
            flags={"required": True},
        )
        properties.execution_context = AAZObjectType(
            serialized_name="executionContext",
            flags={"required": True},
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.report = AAZObjectType(
            flags={"required": True},
        )
        properties.run_status = AAZObjectType(
            serialized_name="runStatus",
        )
        properties.task_id = AAZStrType(
            serialized_name="taskId",
            flags={"required": True},
        )

        execution_context = _schema_storage_task_assignment_read.properties.execution_context
        execution_context.target = AAZObjectType()
        execution_context.trigger = AAZObjectType(
            flags={"required": True},
        )

        target = _schema_storage_task_assignment_read.properties.execution_context.target
        target.exclude_prefix = AAZListType(
            serialized_name="excludePrefix",
        )
        target.prefix = AAZListType()

        exclude_prefix = _schema_storage_task_assignment_read.properties.execution_context.target.exclude_prefix
        exclude_prefix.Element = AAZStrType()

        prefix = _schema_storage_task_assignment_read.properties.execution_context.target.prefix
        prefix.Element = AAZStrType()

        trigger = _schema_storage_task_assignment_read.properties.execution_context.trigger
        trigger.parameters = AAZObjectType(
            flags={"required": True},
        )
        trigger.type = AAZStrType(
            flags={"required": True},
        )

        parameters = _schema_storage_task_assignment_read.properties.execution_context.trigger.parameters
        parameters.end_by = AAZStrType(
            serialized_name="endBy",
        )
        parameters.interval = AAZIntType()
        parameters.interval_unit = AAZStrType(
            serialized_name="intervalUnit",
        )
        parameters.start_from = AAZStrType(
            serialized_name="startFrom",
        )
        parameters.start_on = AAZStrType(
            serialized_name="startOn",
        )

        report = _schema_storage_task_assignment_read.properties.report
        report.prefix = AAZStrType(
            flags={"required": True},
        )

        run_status = _schema_storage_task_assignment_read.properties.run_status
        run_status.finish_time = AAZStrType(
            serialized_name="finishTime",
            flags={"read_only": True},
        )
        run_status.object_failed_count = AAZStrType(
            serialized_name="objectFailedCount",
            flags={"read_only": True},
        )
        run_status.objects_operated_on_count = AAZStrType(
            serialized_name="objectsOperatedOnCount",
            flags={"read_only": True},
        )
        run_status.objects_succeeded_count = AAZStrType(
            serialized_name="objectsSucceededCount",
            flags={"read_only": True},
        )
        run_status.objects_targeted_count = AAZStrType(
            serialized_name="objectsTargetedCount",
            flags={"read_only": True},
        )
        run_status.run_result = AAZStrType(
            serialized_name="runResult",
            flags={"read_only": True},
        )
        run_status.run_status_enum = AAZStrType(
            serialized_name="runStatusEnum",
            flags={"read_only": True},
        )
        run_status.run_status_error = AAZStrType(
            serialized_name="runStatusError",
            flags={"read_only": True},
        )
        run_status.start_time = AAZStrType(
            serialized_name="startTime",
            flags={"read_only": True},
        )
        run_status.storage_account_id = AAZStrType(
            serialized_name="storageAccountId",
            flags={"read_only": True},
        )
        run_status.summary_report_path = AAZStrType(
            serialized_name="summaryReportPath",
            flags={"read_only": True},
        )
        run_status.task_assignment_id = AAZStrType(
            serialized_name="taskAssignmentId",
            flags={"read_only": True},
        )
        run_status.task_id = AAZStrType(
            serialized_name="taskId",
            flags={"read_only": True},
        )
        run_status.task_version = AAZStrType(
            serialized_name="taskVersion",
            flags={"read_only": True},
        )

        _schema.id = cls._schema_storage_task_assignment_read.id
        _schema.name = cls._schema_storage_task_assignment_read.name
        _schema.properties = cls._schema_storage_task_assignment_read.properties
        _schema.type = cls._schema_storage_task_assignment_read.type


__all__ = ["Update"]
