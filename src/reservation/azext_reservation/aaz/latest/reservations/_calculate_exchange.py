# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "reservations calculate-exchange",
)
class CalculateExchange(AAZCommand):
    """Calculates price for exchanging `Reservations` if there are no policy errors.


    :example: Calculate exchange
        az reservations calculate-exchange --ris-to-exchange "[{reservation-id:/providers/microsoft.capacity/reservationOrders/40000000-aaaa-bbbb-cccc-200000000012/reservations/51000000-aaaa-bbbb-cccc-200000000012,quantity:1},{reservation-id:/providers/microsoft.capacity/reservationOrders/90000000-aaaa-bbbb-cccc-200000000012/reservations/36000000-aaaa-bbbb-cccc-200000000012,quantity:1}]" --ris-to-purchase "[{reserved-resource-type:VirtualMachines,applied-scope-type:Shared,billing-scope:12350000-aaaa-bbbb-cccc-200000000012,display-name:exchangeTest1,quantity:1,sku:Standard_B1s,term:P1Y,billing-plan:Monthly,location:eastus},{reserved-resource-type:VirtualMachines,applied-scope-type:Shared,billing-scope:12350000-aaaa-bbbb-cccc-200000000012,display-name:exchangeTest2,quantity:1,sku:Standard_B1s,term:P1Y,billing-plan:Monthly,location:eastus}]"
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.capacity/calculateexchange", "2022-11-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.ris_to_exchange = AAZListArg(
            options=["--ris-to-exchange"],
            arg_group="Properties",
            help="List of reservations that are being returned in this exchange.",
        )
        _args_schema.ris_to_purchase = AAZListArg(
            options=["--ris-to-purchase"],
            arg_group="Properties",
            help="List of reservations that are being purchased in this exchange.",
        )
        _args_schema.sp_to_purchase = AAZListArg(
            options=["--sp-to-purchase"],
            arg_group="Properties",
            help="List of savings plans that are being purchased in this exchange.",
        )

        ris_to_exchange = cls._args_schema.ris_to_exchange
        ris_to_exchange.Element = AAZObjectArg()

        _element = cls._args_schema.ris_to_exchange.Element
        _element.quantity = AAZIntArg(
            options=["quantity"],
            help="Quantity to be returned. Must be greater than zero.",
        )
        _element.reservation_id = AAZStrArg(
            options=["reservation-id"],
            help="Fully qualified identifier of the Reservation being returned",
        )

        ris_to_purchase = cls._args_schema.ris_to_purchase
        ris_to_purchase.Element = AAZObjectArg()

        _element = cls._args_schema.ris_to_purchase.Element
        _element.location = AAZStrArg(
            options=["location"],
            help="The Azure Region where the reserved resource lives.",
        )
        _element.applied_scope_properties = AAZObjectArg(
            options=["applied-scope-properties"],
            help="Properties specific to applied scope type. Not required if not applicable. Required and need to provide tenantId and managementGroupId if AppliedScopeType is ManagementGroup",
        )
        cls._build_args_applied_scope_properties_create(_element.applied_scope_properties)
        _element.applied_scope_type = AAZStrArg(
            options=["applied-scope-type"],
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        _element.applied_scope = AAZListArg(
            options=["applied-scope"],
            help="List of the subscriptions that the benefit will be applied. Do not specify if AppliedScopeType is Shared.",
        )
        _element.billing_plan = AAZStrArg(
            options=["billing-plan"],
            help="Represent the billing plans.",
            enum={"Monthly": "Monthly", "Upfront": "Upfront"},
        )
        _element.billing_scope = AAZStrArg(
            options=["billing-scope"],
            help="Subscription that will be charged for purchasing Reservation",
        )
        _element.display_name = AAZStrArg(
            options=["display-name"],
            help="Friendly name of the Reservation",
        )
        _element.quantity = AAZIntArg(
            options=["quantity"],
            help="Quantity of the SKUs that are part of the Reservation.",
        )
        _element.renew = AAZBoolArg(
            options=["renew"],
            help="Setting this to true will automatically purchase a new reservation on the expiration date time.",
            default=False,
        )
        _element.instance_flexibility = AAZStrArg(
            options=["instance-flexibility"],
            help="Turning this on will apply the reservation discount to other VMs in the same VM size group. Only specify for VirtualMachines reserved resource type.",
            enum={"Off": "Off", "On": "On"},
        )
        _element.reserved_resource_type = AAZStrArg(
            options=["reserved-resource-type"],
            help="The type of the resource that is being reserved.",
            enum={"AVS": "AVS", "AppService": "AppService", "AzureDataExplorer": "AzureDataExplorer", "AzureFiles": "AzureFiles", "BlockBlob": "BlockBlob", "CosmosDb": "CosmosDb", "DataFactory": "DataFactory", "Databricks": "Databricks", "DedicatedHost": "DedicatedHost", "ManagedDisk": "ManagedDisk", "MariaDb": "MariaDb", "MySql": "MySql", "NetAppStorage": "NetAppStorage", "PostgreSql": "PostgreSql", "RedHat": "RedHat", "RedHatOsa": "RedHatOsa", "RedisCache": "RedisCache", "SapHana": "SapHana", "SqlAzureHybridBenefit": "SqlAzureHybridBenefit", "SqlDataWarehouse": "SqlDataWarehouse", "SqlDatabases": "SqlDatabases", "SqlEdge": "SqlEdge", "SuseLinux": "SuseLinux", "VMwareCloudSimple": "VMwareCloudSimple", "VirtualMachineSoftware": "VirtualMachineSoftware", "VirtualMachines": "VirtualMachines"},
        )
        _element.review_date_time = AAZDateTimeArg(
            options=["review-date-time"],
            help="This is the date-time when the Azure hybrid benefit needs to be reviewed.",
        )
        _element.term = AAZStrArg(
            options=["term"],
            help="Represent the term of Reservation.",
            enum={"P1Y": "P1Y", "P3Y": "P3Y", "P5Y": "P5Y"},
        )
        _element.sku = AAZStrArg(
            options=["sku"],
            help="sku name",
        )

        applied_scope = cls._args_schema.ris_to_purchase.Element.applied_scope
        applied_scope.Element = AAZStrArg()

        sp_to_purchase = cls._args_schema.sp_to_purchase
        sp_to_purchase.Element = AAZObjectArg()

        _element = cls._args_schema.sp_to_purchase.Element
        _element.applied_scope_properties = AAZObjectArg(
            options=["applied-scope-properties"],
        )
        cls._build_args_applied_scope_properties_create(_element.applied_scope_properties)
        _element.applied_scope_type = AAZStrArg(
            options=["applied-scope-type"],
            help="Type of the Applied Scope.",
            enum={"ManagementGroup": "ManagementGroup", "Shared": "Shared", "Single": "Single"},
        )
        _element.billing_plan = AAZStrArg(
            options=["billing-plan"],
            help="Represents the billing plan in ISO 8601 format. Required only for monthly billing plans.",
            enum={"P1M": "P1M"},
        )
        _element.billing_scope_id = AAZStrArg(
            options=["billing-scope-id"],
            help="Subscription that will be charged for purchasing reservation or savings plan",
        )
        _element.commitment = AAZObjectArg(
            options=["commitment"],
            help="Commitment towards the benefit.",
        )
        _element.display_name = AAZStrArg(
            options=["display-name"],
            help="Friendly name of the savings plan",
        )
        _element.term = AAZStrArg(
            options=["term"],
            help="Represent savings plan term in ISO 8601 format.",
            enum={"P1Y": "P1Y", "P3Y": "P3Y"},
        )
        _element.sku = AAZObjectArg(
            options=["sku"],
        )
        cls._build_args_sku_name_create(_element.sku)

        commitment = cls._args_schema.sp_to_purchase.Element.commitment
        commitment.amount = AAZFloatArg(
            options=["amount"],
        )
        commitment.currency_code = AAZStrArg(
            options=["currency-code"],
            help="The ISO 4217 3-letter currency code for the currency used by this purchase record.",
        )
        commitment.grain = AAZStrArg(
            options=["grain"],
            help="Commitment grain.",
            enum={"Hourly": "Hourly"},
        )
        return cls._args_schema

    _args_applied_scope_properties_create = None

    @classmethod
    def _build_args_applied_scope_properties_create(cls, _schema):
        if cls._args_applied_scope_properties_create is not None:
            _schema.display_name = cls._args_applied_scope_properties_create.display_name
            _schema.management_group_id = cls._args_applied_scope_properties_create.management_group_id
            _schema.resource_group_id = cls._args_applied_scope_properties_create.resource_group_id
            _schema.subscription_id = cls._args_applied_scope_properties_create.subscription_id
            _schema.tenant_id = cls._args_applied_scope_properties_create.tenant_id
            return

        cls._args_applied_scope_properties_create = AAZObjectArg()

        applied_scope_properties_create = cls._args_applied_scope_properties_create
        applied_scope_properties_create.display_name = AAZStrArg(
            options=["display-name"],
            help="Display name",
        )
        applied_scope_properties_create.management_group_id = AAZStrArg(
            options=["management-group-id"],
            help="Fully-qualified identifier of the management group where the benefit must be applied.",
        )
        applied_scope_properties_create.resource_group_id = AAZStrArg(
            options=["resource-group-id"],
            help="Fully-qualified identifier of the resource group.",
        )
        applied_scope_properties_create.subscription_id = AAZStrArg(
            options=["subscription-id"],
            help="Fully-qualified identifier of the subscription.",
        )
        applied_scope_properties_create.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="Tenant ID where the savings plan should apply benefit.",
        )

        _schema.display_name = cls._args_applied_scope_properties_create.display_name
        _schema.management_group_id = cls._args_applied_scope_properties_create.management_group_id
        _schema.resource_group_id = cls._args_applied_scope_properties_create.resource_group_id
        _schema.subscription_id = cls._args_applied_scope_properties_create.subscription_id
        _schema.tenant_id = cls._args_applied_scope_properties_create.tenant_id

    _args_sku_name_create = None

    @classmethod
    def _build_args_sku_name_create(cls, _schema):
        if cls._args_sku_name_create is not None:
            _schema.name = cls._args_sku_name_create.name
            return

        cls._args_sku_name_create = AAZObjectArg()

        sku_name_create = cls._args_sku_name_create
        sku_name_create.name = AAZStrArg(
            options=["name"],
        )

        _schema.name = cls._args_sku_name_create.name

    def _execute_operations(self):
        self.pre_operations()
        yield self.CalculateExchangePost(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class CalculateExchangePost(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Capacity/calculateExchange",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("reservationsToExchange", AAZListType, ".ris_to_exchange")
                properties.set_prop("reservationsToPurchase", AAZListType, ".ris_to_purchase")
                properties.set_prop("savingsPlansToPurchase", AAZListType, ".sp_to_purchase")

            reservations_to_exchange = _builder.get(".properties.reservationsToExchange")
            if reservations_to_exchange is not None:
                reservations_to_exchange.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.reservationsToExchange[]")
            if _elements is not None:
                _elements.set_prop("quantity", AAZIntType, ".quantity")
                _elements.set_prop("reservationId", AAZStrType, ".reservation_id")

            reservations_to_purchase = _builder.get(".properties.reservationsToPurchase")
            if reservations_to_purchase is not None:
                reservations_to_purchase.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.reservationsToPurchase[]")
            if _elements is not None:
                _elements.set_prop("location", AAZStrType, ".location")
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                _elements.set_prop("sku", AAZObjectType)

            properties = _builder.get(".properties.reservationsToPurchase[].properties")
            if properties is not None:
                _CalculateExchangeHelper._build_schema_applied_scope_properties_create(properties.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                properties.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                properties.set_prop("appliedScopes", AAZListType, ".applied_scope")
                properties.set_prop("billingPlan", AAZStrType, ".billing_plan")
                properties.set_prop("billingScopeId", AAZStrType, ".billing_scope")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("quantity", AAZIntType, ".quantity")
                properties.set_prop("renew", AAZBoolType, ".renew")
                properties.set_prop("reservedResourceProperties", AAZObjectType)
                properties.set_prop("reservedResourceType", AAZStrType, ".reserved_resource_type")
                properties.set_prop("reviewDateTime", AAZStrType, ".review_date_time")
                properties.set_prop("term", AAZStrType, ".term")

            applied_scopes = _builder.get(".properties.reservationsToPurchase[].properties.appliedScopes")
            if applied_scopes is not None:
                applied_scopes.set_elements(AAZStrType, ".")

            reserved_resource_properties = _builder.get(".properties.reservationsToPurchase[].properties.reservedResourceProperties")
            if reserved_resource_properties is not None:
                reserved_resource_properties.set_prop("instanceFlexibility", AAZStrType, ".instance_flexibility")

            sku = _builder.get(".properties.reservationsToPurchase[].sku")
            if sku is not None:
                sku.set_prop("name", AAZStrType, ".sku")

            savings_plans_to_purchase = _builder.get(".properties.savingsPlansToPurchase")
            if savings_plans_to_purchase is not None:
                savings_plans_to_purchase.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.savingsPlansToPurchase[]")
            if _elements is not None:
                _elements.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})
                _CalculateExchangeHelper._build_schema_sku_name_create(_elements.set_prop("sku", AAZObjectType, ".sku"))

            properties = _builder.get(".properties.savingsPlansToPurchase[].properties")
            if properties is not None:
                _CalculateExchangeHelper._build_schema_applied_scope_properties_create(properties.set_prop("appliedScopeProperties", AAZObjectType, ".applied_scope_properties"))
                properties.set_prop("appliedScopeType", AAZStrType, ".applied_scope_type")
                properties.set_prop("billingPlan", AAZStrType, ".billing_plan")
                properties.set_prop("billingScopeId", AAZStrType, ".billing_scope_id")
                properties.set_prop("commitment", AAZObjectType, ".commitment")
                properties.set_prop("displayName", AAZStrType, ".display_name")
                properties.set_prop("term", AAZStrType, ".term")

            commitment = _builder.get(".properties.savingsPlansToPurchase[].properties.commitment")
            if commitment is not None:
                commitment.set_prop("amount", AAZFloatType, ".amount")
                commitment.set_prop("currencyCode", AAZStrType, ".currency_code")
                commitment.set_prop("grain", AAZStrType, ".grain")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.error = AAZObjectType()
            _schema_on_200.id = AAZStrType()
            _schema_on_200.name = AAZStrType()
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.status = AAZStrType()

            error = cls._schema_on_200.error
            error.code = AAZStrType()
            error.message = AAZStrType()

            properties = cls._schema_on_200.properties
            properties.net_payable = AAZObjectType(
                serialized_name="netPayable",
            )
            _CalculateExchangeHelper._build_schema_price_read(properties.net_payable)
            properties.policy_result = AAZObjectType(
                serialized_name="policyResult",
            )
            properties.purchases_total = AAZObjectType(
                serialized_name="purchasesTotal",
            )
            _CalculateExchangeHelper._build_schema_price_read(properties.purchases_total)
            properties.refunds_total = AAZObjectType(
                serialized_name="refundsTotal",
            )
            _CalculateExchangeHelper._build_schema_price_read(properties.refunds_total)
            properties.reservations_to_exchange = AAZListType(
                serialized_name="reservationsToExchange",
            )
            properties.reservations_to_purchase = AAZListType(
                serialized_name="reservationsToPurchase",
            )
            properties.savings_plans_to_purchase = AAZListType(
                serialized_name="savingsPlansToPurchase",
            )
            properties.session_id = AAZStrType(
                serialized_name="sessionId",
            )

            policy_result = cls._schema_on_200.properties.policy_result
            policy_result.policy_errors = AAZListType(
                serialized_name="policyErrors",
            )

            policy_errors = cls._schema_on_200.properties.policy_result.policy_errors
            policy_errors.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.policy_result.policy_errors.Element
            _element.code = AAZStrType()
            _element.message = AAZStrType()

            reservations_to_exchange = cls._schema_on_200.properties.reservations_to_exchange
            reservations_to_exchange.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.reservations_to_exchange.Element
            _element.billing_information = AAZObjectType(
                serialized_name="billingInformation",
            )
            _element.billing_refund_amount = AAZObjectType(
                serialized_name="billingRefundAmount",
            )
            _CalculateExchangeHelper._build_schema_price_read(_element.billing_refund_amount)
            _element.quantity = AAZIntType()
            _element.reservation_id = AAZStrType(
                serialized_name="reservationId",
            )

            billing_information = cls._schema_on_200.properties.reservations_to_exchange.Element.billing_information
            billing_information.billing_currency_prorated_amount = AAZObjectType(
                serialized_name="billingCurrencyProratedAmount",
            )
            _CalculateExchangeHelper._build_schema_price_read(billing_information.billing_currency_prorated_amount)
            billing_information.billing_currency_remaining_commitment_amount = AAZObjectType(
                serialized_name="billingCurrencyRemainingCommitmentAmount",
            )
            _CalculateExchangeHelper._build_schema_price_read(billing_information.billing_currency_remaining_commitment_amount)
            billing_information.billing_currency_total_paid_amount = AAZObjectType(
                serialized_name="billingCurrencyTotalPaidAmount",
            )
            _CalculateExchangeHelper._build_schema_price_read(billing_information.billing_currency_total_paid_amount)

            reservations_to_purchase = cls._schema_on_200.properties.reservations_to_purchase
            reservations_to_purchase.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.reservations_to_purchase.Element
            _element.billing_currency_total = AAZObjectType(
                serialized_name="billingCurrencyTotal",
            )
            _CalculateExchangeHelper._build_schema_price_read(_element.billing_currency_total)
            _element.properties = AAZObjectType()

            properties = cls._schema_on_200.properties.reservations_to_purchase.Element.properties
            properties.location = AAZStrType()
            properties.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            properties.sku = AAZObjectType()
            _CalculateExchangeHelper._build_schema_sku_name_read(properties.sku)

            properties = cls._schema_on_200.properties.reservations_to_purchase.Element.properties.properties
            properties.applied_scope_properties = AAZObjectType(
                serialized_name="appliedScopeProperties",
            )
            _CalculateExchangeHelper._build_schema_applied_scope_properties_read(properties.applied_scope_properties)
            properties.applied_scope_type = AAZStrType(
                serialized_name="appliedScopeType",
            )
            properties.applied_scopes = AAZListType(
                serialized_name="appliedScopes",
            )
            properties.billing_plan = AAZStrType(
                serialized_name="billingPlan",
            )
            properties.billing_scope_id = AAZStrType(
                serialized_name="billingScopeId",
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.quantity = AAZIntType()
            properties.renew = AAZBoolType()
            properties.reserved_resource_properties = AAZObjectType(
                serialized_name="reservedResourceProperties",
            )
            properties.reserved_resource_type = AAZStrType(
                serialized_name="reservedResourceType",
            )
            properties.review_date_time = AAZStrType(
                serialized_name="reviewDateTime",
            )
            properties.term = AAZStrType()

            applied_scopes = cls._schema_on_200.properties.reservations_to_purchase.Element.properties.properties.applied_scopes
            applied_scopes.Element = AAZStrType()

            reserved_resource_properties = cls._schema_on_200.properties.reservations_to_purchase.Element.properties.properties.reserved_resource_properties
            reserved_resource_properties.instance_flexibility = AAZStrType(
                serialized_name="instanceFlexibility",
            )

            savings_plans_to_purchase = cls._schema_on_200.properties.savings_plans_to_purchase
            savings_plans_to_purchase.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.savings_plans_to_purchase.Element
            _element.billing_currency_total = AAZObjectType(
                serialized_name="billingCurrencyTotal",
            )
            _CalculateExchangeHelper._build_schema_price_read(_element.billing_currency_total)
            _element.properties = AAZObjectType()

            properties = cls._schema_on_200.properties.savings_plans_to_purchase.Element.properties
            properties.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            properties.sku = AAZObjectType()
            _CalculateExchangeHelper._build_schema_sku_name_read(properties.sku)

            properties = cls._schema_on_200.properties.savings_plans_to_purchase.Element.properties.properties
            properties.applied_scope_properties = AAZObjectType(
                serialized_name="appliedScopeProperties",
            )
            _CalculateExchangeHelper._build_schema_applied_scope_properties_read(properties.applied_scope_properties)
            properties.applied_scope_type = AAZStrType(
                serialized_name="appliedScopeType",
            )
            properties.billing_plan = AAZStrType(
                serialized_name="billingPlan",
            )
            properties.billing_scope_id = AAZStrType(
                serialized_name="billingScopeId",
            )
            properties.commitment = AAZObjectType()
            properties.display_name = AAZStrType(
                serialized_name="displayName",
            )
            properties.term = AAZStrType()

            commitment = cls._schema_on_200.properties.savings_plans_to_purchase.Element.properties.properties.commitment
            commitment.amount = AAZFloatType()
            commitment.currency_code = AAZStrType(
                serialized_name="currencyCode",
            )
            commitment.grain = AAZStrType()

            return cls._schema_on_200


class _CalculateExchangeHelper:
    """Helper class for CalculateExchange"""

    @classmethod
    def _build_schema_applied_scope_properties_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("displayName", AAZStrType, ".display_name")
        _builder.set_prop("managementGroupId", AAZStrType, ".management_group_id")
        _builder.set_prop("resourceGroupId", AAZStrType, ".resource_group_id")
        _builder.set_prop("subscriptionId", AAZStrType, ".subscription_id")
        _builder.set_prop("tenantId", AAZStrType, ".tenant_id")

    @classmethod
    def _build_schema_sku_name_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name")

    _schema_applied_scope_properties_read = None

    @classmethod
    def _build_schema_applied_scope_properties_read(cls, _schema):
        if cls._schema_applied_scope_properties_read is not None:
            _schema.display_name = cls._schema_applied_scope_properties_read.display_name
            _schema.management_group_id = cls._schema_applied_scope_properties_read.management_group_id
            _schema.resource_group_id = cls._schema_applied_scope_properties_read.resource_group_id
            _schema.subscription_id = cls._schema_applied_scope_properties_read.subscription_id
            _schema.tenant_id = cls._schema_applied_scope_properties_read.tenant_id
            return

        cls._schema_applied_scope_properties_read = _schema_applied_scope_properties_read = AAZObjectType()

        applied_scope_properties_read = _schema_applied_scope_properties_read
        applied_scope_properties_read.display_name = AAZStrType(
            serialized_name="displayName",
        )
        applied_scope_properties_read.management_group_id = AAZStrType(
            serialized_name="managementGroupId",
        )
        applied_scope_properties_read.resource_group_id = AAZStrType(
            serialized_name="resourceGroupId",
        )
        applied_scope_properties_read.subscription_id = AAZStrType(
            serialized_name="subscriptionId",
        )
        applied_scope_properties_read.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )

        _schema.display_name = cls._schema_applied_scope_properties_read.display_name
        _schema.management_group_id = cls._schema_applied_scope_properties_read.management_group_id
        _schema.resource_group_id = cls._schema_applied_scope_properties_read.resource_group_id
        _schema.subscription_id = cls._schema_applied_scope_properties_read.subscription_id
        _schema.tenant_id = cls._schema_applied_scope_properties_read.tenant_id

    _schema_price_read = None

    @classmethod
    def _build_schema_price_read(cls, _schema):
        if cls._schema_price_read is not None:
            _schema.amount = cls._schema_price_read.amount
            _schema.currency_code = cls._schema_price_read.currency_code
            return

        cls._schema_price_read = _schema_price_read = AAZObjectType()

        price_read = _schema_price_read
        price_read.amount = AAZFloatType()
        price_read.currency_code = AAZStrType(
            serialized_name="currencyCode",
        )

        _schema.amount = cls._schema_price_read.amount
        _schema.currency_code = cls._schema_price_read.currency_code

    _schema_sku_name_read = None

    @classmethod
    def _build_schema_sku_name_read(cls, _schema):
        if cls._schema_sku_name_read is not None:
            _schema.name = cls._schema_sku_name_read.name
            return

        cls._schema_sku_name_read = _schema_sku_name_read = AAZObjectType()

        sku_name_read = _schema_sku_name_read
        sku_name_read.name = AAZStrType()

        _schema.name = cls._schema_sku_name_read.name


__all__ = ["CalculateExchange"]
