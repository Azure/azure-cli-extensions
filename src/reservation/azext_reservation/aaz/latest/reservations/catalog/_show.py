# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "reservations catalog show",
)
class Show(AAZCommand):
    """Get catalog of available reservation.

    :example: Get catalog of VM reservation skus
        az reservations catalog show --subscription-id 7a802e4f-129c-4574-9b46-638f17b60dd5 --location eastus --reserved-resource-type VirtualMachines
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.capacity/catalogs", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.subscription_id = AAZSubscriptionIdArg(
            options=["--subscription-id"],
            help="subscription id",
            required=True,
            id_part="subscription",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="May be used to filter by Catalog properties. The filter supports 'eq', 'or', and 'and'.",
        )
        _args_schema.location = AAZStrArg(
            options=["--location"],
            help="Filters the skus based on the location specified in this parameter. This can be an azure region or global",
        )
        _args_schema.offer_id = AAZStrArg(
            options=["--offer-id"],
            help="Offer id used to get the third party products",
        )
        _args_schema.plan_id = AAZStrArg(
            options=["--plan-id"],
            help="Plan id used to get the third party products",
        )
        _args_schema.publisher_id = AAZStrArg(
            options=["--publisher-id"],
            help="Publisher id used to get the third party products",
        )
        _args_schema.reserved_resource_type = AAZStrArg(
            options=["--reserved-resource-type"],
            help="The type of the resource for which the skus should be provided.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.GetCatalog(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class GetCatalog(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Capacity/catalogs",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.args.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "location", self.ctx.args.location,
                ),
                **self.serialize_query_param(
                    "offerId", self.ctx.args.offer_id,
                ),
                **self.serialize_query_param(
                    "planId", self.ctx.args.plan_id,
                ),
                **self.serialize_query_param(
                    "publisherId", self.ctx.args.publisher_id,
                ),
                **self.serialize_query_param(
                    "reservedResourceType", self.ctx.args.reserved_resource_type,
                ),
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.total_items = AAZIntType(
                serialized_name="totalItems",
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.billing_plans = AAZDictType(
                serialized_name="billingPlans",
            )
            _element.capabilities = AAZListType(
                flags={"read_only": True},
            )
            _element.locations = AAZListType(
                flags={"read_only": True},
            )
            _element.msrp = AAZObjectType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"read_only": True},
            )
            _element.restrictions = AAZListType(
                flags={"read_only": True},
            )
            _element.size = AAZStrType(
                flags={"read_only": True},
            )
            _element.sku_properties = AAZListType(
                serialized_name="skuProperties",
                flags={"read_only": True},
            )
            _element.terms = AAZListType(
                flags={"read_only": True},
            )
            _element.tier = AAZStrType(
                flags={"read_only": True},
            )

            billing_plans = cls._schema_on_200.value.Element.billing_plans
            billing_plans.Element = AAZListType()

            _element = cls._schema_on_200.value.Element.billing_plans.Element
            _element.Element = AAZStrType()

            capabilities = cls._schema_on_200.value.Element.capabilities
            capabilities.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.capabilities.Element
            _element.name = AAZStrType()
            _element.value = AAZStrType()

            locations = cls._schema_on_200.value.Element.locations
            locations.Element = AAZStrType()

            msrp = cls._schema_on_200.value.Element.msrp
            msrp.p1_y = AAZObjectType(
                serialized_name="p1Y",
            )
            _ShowHelper._build_schema_price_read(msrp.p1_y)
            msrp.p3_y = AAZObjectType(
                serialized_name="p3Y",
            )
            _ShowHelper._build_schema_price_read(msrp.p3_y)
            msrp.p5_y = AAZObjectType(
                serialized_name="p5Y",
            )
            _ShowHelper._build_schema_price_read(msrp.p5_y)

            restrictions = cls._schema_on_200.value.Element.restrictions
            restrictions.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.restrictions.Element
            _element.reason_code = AAZStrType(
                serialized_name="reasonCode",
            )
            _element.type = AAZStrType()
            _element.values = AAZListType()

            values = cls._schema_on_200.value.Element.restrictions.Element.values
            values.Element = AAZStrType()

            sku_properties = cls._schema_on_200.value.Element.sku_properties
            sku_properties.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.sku_properties.Element
            _element.name = AAZStrType()
            _element.value = AAZStrType()

            terms = cls._schema_on_200.value.Element.terms
            terms.Element = AAZStrType()

            return cls._schema_on_200


class _ShowHelper:
    """Helper class for Show"""

    _schema_price_read = None

    @classmethod
    def _build_schema_price_read(cls, _schema):
        if cls._schema_price_read is not None:
            _schema.amount = cls._schema_price_read.amount
            _schema.currency_code = cls._schema_price_read.currency_code
            return

        cls._schema_price_read = _schema_price_read = AAZObjectType()

        price_read = _schema_price_read
        price_read.amount = AAZFloatType()
        price_read.currency_code = AAZStrType(
            serialized_name="currencyCode",
        )

        _schema.amount = cls._schema_price_read.amount
        _schema.currency_code = cls._schema_price_read.currency_code


__all__ = ["Show"]
