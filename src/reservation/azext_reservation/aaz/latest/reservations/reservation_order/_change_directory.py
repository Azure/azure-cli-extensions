# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "reservations reservation-order change-directory",
)
class ChangeDirectory(AAZCommand):
    """Change directory (tenant) of `ReservationOrder` and all `Reservation` under it to specified tenant id

    :example: Change a reservation order to another tenant
        az reservations reservation-order change-directory --reservation-order-id 50000000-aaaa-bbbb-cccc-200000000000 --destination-tenant-id 10000000-aaaa-bbbb-cccc-200000000011
    """

    _aaz_info = {
        "version": "2022-11-01",
        "resources": [
            ["mgmt-plane", "/providers/microsoft.capacity/reservationorders/{}/changedirectory", "2022-11-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.reservation_order_id = AAZStrArg(
            options=["--reservation-order-id"],
            help="Order Id of the reservation",
            required=True,
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.destination_tenant_id = AAZStrArg(
            options=["--destination-tenant-id"],
            arg_group="Body",
            help="Tenant id GUID that reservation order is to be transferred to",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ReservationOrderChangeDirectory(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReservationOrderChangeDirectory(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/providers/Microsoft.Capacity/reservationOrders/{reservationOrderId}/changeDirectory",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "reservationOrderId", self.ctx.args.reservation_order_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-11-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("destinationTenantId", AAZStrType, ".destination_tenant_id")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.reservation_order = AAZObjectType(
                serialized_name="reservationOrder",
            )
            _ChangeDirectoryHelper._build_schema_change_directory_result_read(_schema_on_200.reservation_order)
            _schema_on_200.reservations = AAZListType()

            reservations = cls._schema_on_200.reservations
            reservations.Element = AAZObjectType()
            _ChangeDirectoryHelper._build_schema_change_directory_result_read(reservations.Element)

            return cls._schema_on_200


class _ChangeDirectoryHelper:
    """Helper class for ChangeDirectory"""

    _schema_change_directory_result_read = None

    @classmethod
    def _build_schema_change_directory_result_read(cls, _schema):
        if cls._schema_change_directory_result_read is not None:
            _schema.error = cls._schema_change_directory_result_read.error
            _schema.id = cls._schema_change_directory_result_read.id
            _schema.is_succeeded = cls._schema_change_directory_result_read.is_succeeded
            _schema.name = cls._schema_change_directory_result_read.name
            return

        cls._schema_change_directory_result_read = _schema_change_directory_result_read = AAZObjectType()

        change_directory_result_read = _schema_change_directory_result_read
        change_directory_result_read.error = AAZStrType()
        change_directory_result_read.id = AAZStrType()
        change_directory_result_read.is_succeeded = AAZBoolType(
            serialized_name="isSucceeded",
        )
        change_directory_result_read.name = AAZStrType()

        _schema.error = cls._schema_change_directory_result_read.error
        _schema.id = cls._schema_change_directory_result_read.id
        _schema.is_succeeded = cls._schema_change_directory_result_read.is_succeeded
        _schema.name = cls._schema_change_directory_result_read.name


__all__ = ["ChangeDirectory"]
