# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *
from .recording_processors import TokenReplacer


class DesktopvirtualizationScenario(ScenarioTest):
    def __init__(self, method_name):
        super().__init__(method_name, recording_processors=[
            TokenReplacer()
        ])

    @ResourceGroupPreparer(name_prefix='test_desktopvirtualization_hostpool_', location='centralus')
    def test_desktopvirtualization_hostpool(self):
        self.kwargs.update({
            'hostpool': self.create_random_name('hostpool_', 15)
        })
        self.cmd('desktopvirtualization hostpool create --name {hostpool} -g {rg} '
                 '--description test --friendly-name friendly --host-pool-type Pooled '
                 '--load-balancer-type BreadthFirst --max-session-limit 999999 '
                 '--personal-desktop-assignment-type Automatic --preferred-app-group-type Desktop '
                 '--registration-info expiration-time="2024-03-05T06:38:08.189Z" registration-token-operation=Update '
                 '--sso-client-id client '
                 '--sso-client-secret-key-vault-path https://keyvault/secret '
                 '--sso-secret-type SharedKey '
                 '--start-vm-on-connect false ', checks=[
            self.check('name', '{hostpool}'),
            self.check('friendlyName', 'friendly'),
            self.check('hostPoolType', 'Pooled'),
            self.check('loadBalancerType', 'BreadthFirst'),
            self.check('maxSessionLimit', 999999),
            self.check('preferredAppGroupType', 'Desktop'),
            self.check('registrationInfo.expirationTime', '2024-03-05T06:38:08.189Z'),
            self.check('ssoClientId', 'client'),
            self.check('ssoClientSecretKeyVaultPath', 'https://keyvault/secret'),
            self.check('ssoSecretType', 'SharedKey'),
            self.check('startVMOnConnect', False)
        ])
        self.cmd('desktopvirtualization hostpool update --name {hostpool} -g {rg} --tags tag=test ', checks=[
            self.check('name', '{hostpool}'),
            self.check('friendlyName', 'friendly'),
            self.check('hostPoolType', 'Pooled'),
            self.check('loadBalancerType', 'BreadthFirst'),
            self.check('maxSessionLimit', 999999),
            self.check('preferredAppGroupType', 'Desktop'),
            self.check('registrationInfo.expirationTime', '2024-03-05T06:38:08.189Z'),
            self.check('ssoClientId', 'client'),
            self.check('ssoClientSecretKeyVaultPath', 'https://keyvault/secret'),
            self.check('ssoSecretType', 'SharedKey'),
            self.check('startVMOnConnect', False),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization hostpool show --name {hostpool} -g {rg}', checks=[
            self.check('name', '{hostpool}'),
            self.check('friendlyName', 'friendly'),
            self.check('hostPoolType', 'Pooled'),
            self.check('loadBalancerType', 'BreadthFirst'),
            self.check('maxSessionLimit', 999999),
            self.check('preferredAppGroupType', 'Desktop'),
            self.check('ssoClientId', 'client'),
            self.check('ssoClientSecretKeyVaultPath', 'https://keyvault/secret'),
            self.check('ssoSecretType', 'SharedKey'),
            self.check('startVMOnConnect', False),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization hostpool list -g {rg}', checks=[
            self.check('[0].name', '{hostpool}'),
            self.check('[0].friendlyName', 'friendly'),
            self.check('[0].hostPoolType', 'Pooled'),
            self.check('[0].loadBalancerType', 'BreadthFirst'),
            self.check('[0].maxSessionLimit', 999999),
            self.check('[0].preferredAppGroupType', 'Desktop'),
            self.check('[0].ssoClientId', 'client'),
            self.check('[0].ssoClientSecretKeyVaultPath', 'https://keyvault/secret'),
            self.check('[0].ssoSecretType', 'SharedKey'),
            self.check('[0].startVMOnConnect', False),
            self.check('[0].tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization hostpool retrieve-registration-token --name {hostpool} -g {rg}', checks=[
            self.check('expirationTime', '2024-03-05T06:38:08.189Z')
        ])
        self.cmd('desktopvirtualization hostpool delete --name {hostpool} -g {rg} -y')

    @ResourceGroupPreparer(name_prefix='test_desktopvirtualization_applicationgroup_', location='centralus')
    def test_desktopvirtualization_applicationgroup(self):
        self.kwargs.update({
            'hostpool': self.create_random_name('hostpool_', 15),
            'applicationgroup': self.create_random_name('appgroup', 15)
        })
        hostpool = self.cmd('desktopvirtualization hostpool create --name {hostpool} -g {rg} '
                            '--description test --friendly-name friendly --host-pool-type Pooled '
                            '--load-balancer-type BreadthFirst --max-session-limit 999999 '
                            '--personal-desktop-assignment-type Automatic --preferred-app-group-type Desktop '
                            '--registration-info expiration-time="2024-03-05T06:38:08.189Z" registration-token-operation=Update '
                            '--sso-client-id client '
                            '--sso-client-secret-key-vault-path https://keyvault/secret '
                            '--sso-secret-type SharedKey '
                            '--start-vm-on-connect false ', checks=[
            self.check('name', '{hostpool}'),
            self.check('friendlyName', 'friendly'),
            self.check('hostPoolType', 'Pooled'),
            self.check('loadBalancerType', 'BreadthFirst'),
            self.check('maxSessionLimit', 999999),
            self.check('preferredAppGroupType', 'Desktop'),
            self.check('registrationInfo.expirationTime', '2024-03-05T06:38:08.189Z'),
            self.check('ssoClientId', 'client'),
            self.check('ssoClientSecretKeyVaultPath', 'https://keyvault/secret'),
            self.check('ssoSecretType', 'SharedKey'),
            self.check('startVMOnConnect', False)
        ]).get_output_in_json()
        self.kwargs.update({
            'hostpool_id': hostpool['id']
        })
        self.cmd('desktopvirtualization applicationgroup create -g {rg} -n {applicationgroup} --host-pool-arm-path {hostpool_id} --application-group-type remoteapp', checks=[
            self.check('name', '{applicationgroup}'),
            self.check('hostPoolArmPath', '{hostpool_id}'),
            self.check('applicationGroupType', 'RemoteApp')
        ])
        self.cmd('desktopvirtualization applicationgroup update -g {rg} -n {applicationgroup} --tags tag=test', checks=[
            self.check('name', '{applicationgroup}'),
            self.check('hostPoolArmPath', '{hostpool_id}'),
            self.check('applicationGroupType', 'RemoteApp'),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization applicationgroup show -g {rg} -n {applicationgroup}', checks=[
            self.check('name', '{applicationgroup}'),
            self.check('hostPoolArmPath', '{hostpool_id}'),
            self.check('applicationGroupType', 'RemoteApp'),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization applicationgroup list -g {rg}', checks=[
            self.check('[0].name', '{applicationgroup}'),
            self.check('[0].hostPoolArmPath', '{hostpool_id}'),
            self.check('[0].applicationGroupType', 'RemoteApp'),
            self.check('[0].tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization applicationgroup delete -g {rg} -n {applicationgroup} -y')

    @ResourceGroupPreparer(name_prefix='test_desktopvirtualization_workspace_', location='centralus')
    def test_desktopvirtualization_workspace(self):
        self.kwargs.update({
            'workspace': self.create_random_name('workspace_', 15)
        })
        self.cmd('desktopvirtualization workspace create -g {rg} -n {workspace} --friendly-name friendly', checks=[
            self.check('name', '{workspace}'),
            self.check('friendlyName', 'friendly')
        ])
        self.cmd('desktopvirtualization workspace update -g {rg} -n {workspace} --tags tag=test', checks=[
            self.check('name', '{workspace}'),
            self.check('friendlyName', 'friendly'),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization workspace show -g {rg} -n {workspace}', checks=[
            self.check('name', '{workspace}'),
            self.check('friendlyName', 'friendly'),
            self.check('tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization workspace list -g {rg}', checks=[
            self.check('[0].name', '{workspace}'),
            self.check('[0].friendlyName', 'friendly'),
            self.check('[0].tags.tag', 'test')
        ])
        self.cmd('desktopvirtualization workspace delete -g {rg} -n {workspace} -y')
