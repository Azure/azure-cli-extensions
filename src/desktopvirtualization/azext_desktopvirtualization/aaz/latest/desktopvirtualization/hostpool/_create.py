# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "desktopvirtualization hostpool create",
)
class Create(AAZCommand):
    """Create a host pool.

    :example: Create host pool
        az desktopvirtualization hostpool create -g rg -n hostpool-name --friendly-name friendly --host-pool-type Pooled --load-balancer-type BreadthFirst --max-session-limit 999999 --personal-desktop-assignment-type Automatic --preferred-app-group-type Desktop --registration-info expiration-time="yyyy-mm-ddT08:38:08.189Z" registration-token-operation=Update --sso-client-id client --sso-client-secret-key-vault-path https://keyvault/secret --sso-secret-type SharedKey --start-vm-on-connect false
    """

    _aaz_info = {
        "version": "2021-07-12",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.desktopvirtualization/hostpools/{}", "2021-07-12"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.name = AAZStrArg(
            options=["-n", "--name"],
            help="The name of the host pool within the specified resource group",
            required=True,
            fmt=AAZStrArgFormat(
                max_length=64,
                min_length=3,
            ),
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.location = AAZResourceLocationArg(
            help="The geo-location where the resource lives",
            fmt=AAZResourceLocationArgFormat(
                resource_group_arg="resource_group",
            ),
        )
        _args_schema.custom_rdp_property = AAZStrArg(
            options=["--custom-rdp-property"],
            help="Custom rdp property of host pool.",
        )
        _args_schema.description = AAZStrArg(
            options=["--description"],
            help="Description of HostPool.",
        )
        _args_schema.friendly_name = AAZStrArg(
            options=["--friendly-name"],
            help="Friendly name of HostPool.",
        )
        _args_schema.host_pool_type = AAZStrArg(
            options=["--host-pool-type"],
            help="Host pool type for desktop.",
            required=True,
            enum={"BYODesktop": "BYODesktop", "Personal": "Personal", "Pooled": "Pooled"},
        )
        _args_schema.load_balancer_type = AAZStrArg(
            options=["--load-balancer-type"],
            help="The type of the load balancer.",
            required=True,
            enum={"BreadthFirst": "BreadthFirst", "DepthFirst": "DepthFirst", "Persistent": "Persistent"},
        )
        _args_schema.max_session_limit = AAZIntArg(
            options=["--max-session-limit"],
            help="The max session limit of HostPool.",
        )
        _args_schema.personal_desktop_assignment_type = AAZStrArg(
            options=["--personal-desktop-assignment-type"],
            help="PersonalDesktopAssignment type for HostPool.",
            enum={"Automatic": "Automatic", "Direct": "Direct"},
        )
        _args_schema.preferred_app_group_type = AAZStrArg(
            options=["-t", "--preferred-app-group-type"],
            help="The type of preferred application group type, default to desktop application group",
            required=True,
            enum={"Desktop": "Desktop", "None": "None", "RailApplications": "RailApplications"},
        )
        _args_schema.registration_info = AAZObjectArg(
            options=["--registration-info"],
            help="The registration info of HostPool.",
        )
        _args_schema.ring = AAZIntArg(
            options=["--ring"],
            help="The ring number of HostPool.",
        )
        _args_schema.sso_client_id = AAZStrArg(
            options=["--sso-client-id"],
            help="ClientId for the registered Relying Party used to issue WVD SSO certificates.",
        )
        _args_schema.sso_client_secret_key_vault_path = AAZStrArg(
            options=["-p", "--sso-client-secret-key-vault-path"],
            help="Path to Azure KeyVault storing the secret used for communication to ADFS.",
        )
        _args_schema.sso_secret_type = AAZStrArg(
            options=["--sso-secret-type"],
            help="The type of single sign on Secret Type.",
            enum={"Certificate": "Certificate", "CertificateInKeyVault": "CertificateInKeyVault", "SharedKey": "SharedKey", "SharedKeyInKeyVault": "SharedKeyInKeyVault"},
        )
        _args_schema.ssoadfs_authority = AAZStrArg(
            options=["--ssoadfs-authority"],
            help="URL to customer ADFS server for signing WVD SSO certificates.",
        )
        _args_schema.start_vm_on_connect = AAZBoolArg(
            options=["--start-vm-on-connect"],
            help="The flag to turn on/off StartVMOnConnect feature.",
        )
        _args_schema.validation_environment = AAZBoolArg(
            options=["--validation-environment"],
            help="Is validation environment.",
        )
        _args_schema.vm_template = AAZStrArg(
            options=["--vm-template"],
            help="VM template for sessionhosts configuration within hostpool.",
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            help="Resource tags.",
        )

        registration_info = cls._args_schema.registration_info
        registration_info.expiration_time = AAZDateTimeArg(
            options=["expiration-time"],
            help="Expiration time of registration token.",
        )
        registration_info.registration_token_operation = AAZStrArg(
            options=["registration-token-operation"],
            help="The type of resetting the token.",
            enum={"Delete": "Delete", "None": "None", "Update": "Update"},
        )
        registration_info.token = AAZStrArg(
            options=["token"],
            help="The registration token base64 encoded string.",
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg()

        # define Arg Group "HostPool"

        # define Arg Group "Properties"
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.HostPoolsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class HostPoolsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DesktopVirtualization/hostPools/{hostPoolName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "hostPoolName", self.ctx.args.name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-07-12",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("location", AAZStrType, ".location")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("customRdpProperty", AAZStrType, ".custom_rdp_property")
                properties.set_prop("description", AAZStrType, ".description")
                properties.set_prop("friendlyName", AAZStrType, ".friendly_name")
                properties.set_prop("hostPoolType", AAZStrType, ".host_pool_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("loadBalancerType", AAZStrType, ".load_balancer_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("maxSessionLimit", AAZIntType, ".max_session_limit")
                properties.set_prop("personalDesktopAssignmentType", AAZStrType, ".personal_desktop_assignment_type")
                properties.set_prop("preferredAppGroupType", AAZStrType, ".preferred_app_group_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("registrationInfo", AAZObjectType, ".registration_info")
                properties.set_prop("ring", AAZIntType, ".ring")
                properties.set_prop("ssoClientId", AAZStrType, ".sso_client_id")
                properties.set_prop("ssoClientSecretKeyVaultPath", AAZStrType, ".sso_client_secret_key_vault_path")
                properties.set_prop("ssoSecretType", AAZStrType, ".sso_secret_type")
                properties.set_prop("ssoadfsAuthority", AAZStrType, ".ssoadfs_authority")
                properties.set_prop("startVMOnConnect", AAZBoolType, ".start_vm_on_connect")
                properties.set_prop("validationEnvironment", AAZBoolType, ".validation_environment")
                properties.set_prop("vmTemplate", AAZStrType, ".vm_template")

            registration_info = _builder.get(".properties.registrationInfo")
            if registration_info is not None:
                registration_info.set_prop("expirationTime", AAZStrType, ".expiration_time")
                registration_info.set_prop("registrationTokenOperation", AAZStrType, ".registration_token_operation")
                registration_info.set_prop("token", AAZStrType, ".token")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.etag = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.identity = AAZObjectType()
            _schema_on_200_201.kind = AAZStrType()
            _schema_on_200_201.location = AAZStrType()
            _schema_on_200_201.managed_by = AAZStrType(
                serialized_name="managedBy",
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.plan = AAZObjectType()
            _schema_on_200_201.properties = AAZObjectType(
                flags={"required": True, "client_flatten": True},
            )
            _schema_on_200_201.sku = AAZObjectType()
            _schema_on_200_201.tags = AAZDictType()
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            identity = cls._schema_on_200_201.identity
            identity.principal_id = AAZStrType(
                serialized_name="principalId",
                flags={"read_only": True},
            )
            identity.tenant_id = AAZStrType(
                serialized_name="tenantId",
                flags={"read_only": True},
            )
            identity.type = AAZStrType()

            plan = cls._schema_on_200_201.plan
            plan.name = AAZStrType(
                flags={"required": True},
            )
            plan.product = AAZStrType(
                flags={"required": True},
            )
            plan.promotion_code = AAZStrType(
                serialized_name="promotionCode",
            )
            plan.publisher = AAZStrType(
                flags={"required": True},
            )
            plan.version = AAZStrType()

            properties = cls._schema_on_200_201.properties
            properties.application_group_references = AAZListType(
                serialized_name="applicationGroupReferences",
                flags={"read_only": True},
            )
            properties.cloud_pc_resource = AAZBoolType(
                serialized_name="cloudPcResource",
                flags={"read_only": True},
            )
            properties.custom_rdp_property = AAZStrType(
                serialized_name="customRdpProperty",
            )
            properties.description = AAZStrType()
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.host_pool_type = AAZStrType(
                serialized_name="hostPoolType",
                flags={"required": True},
            )
            properties.load_balancer_type = AAZStrType(
                serialized_name="loadBalancerType",
                flags={"required": True},
            )
            properties.max_session_limit = AAZIntType(
                serialized_name="maxSessionLimit",
            )
            properties.migration_request = AAZObjectType(
                serialized_name="migrationRequest",
            )
            properties.object_id = AAZStrType(
                serialized_name="objectId",
                flags={"read_only": True},
            )
            properties.personal_desktop_assignment_type = AAZStrType(
                serialized_name="personalDesktopAssignmentType",
            )
            properties.preferred_app_group_type = AAZStrType(
                serialized_name="preferredAppGroupType",
                flags={"required": True},
            )
            properties.registration_info = AAZObjectType(
                serialized_name="registrationInfo",
            )
            properties.ring = AAZIntType()
            properties.sso_client_id = AAZStrType(
                serialized_name="ssoClientId",
            )
            properties.sso_client_secret_key_vault_path = AAZStrType(
                serialized_name="ssoClientSecretKeyVaultPath",
            )
            properties.sso_secret_type = AAZStrType(
                serialized_name="ssoSecretType",
            )
            properties.ssoadfs_authority = AAZStrType(
                serialized_name="ssoadfsAuthority",
            )
            properties.start_vm_on_connect = AAZBoolType(
                serialized_name="startVMOnConnect",
            )
            properties.validation_environment = AAZBoolType(
                serialized_name="validationEnvironment",
            )
            properties.vm_template = AAZStrType(
                serialized_name="vmTemplate",
            )

            application_group_references = cls._schema_on_200_201.properties.application_group_references
            application_group_references.Element = AAZStrType()

            migration_request = cls._schema_on_200_201.properties.migration_request
            migration_request.migration_path = AAZStrType(
                serialized_name="migrationPath",
            )
            migration_request.operation = AAZStrType()

            registration_info = cls._schema_on_200_201.properties.registration_info
            registration_info.expiration_time = AAZStrType(
                serialized_name="expirationTime",
            )
            registration_info.registration_token_operation = AAZStrType(
                serialized_name="registrationTokenOperation",
            )
            registration_info.token = AAZStrType()

            sku = cls._schema_on_200_201.sku
            sku.capacity = AAZIntType()
            sku.family = AAZStrType()
            sku.name = AAZStrType(
                flags={"required": True},
            )
            sku.size = AAZStrType()
            sku.tier = AAZStrType()

            tags = cls._schema_on_200_201.tags
            tags.Element = AAZStrType()

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
