# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from .aaz.latest.durabletask.retention_policy import Create as _Create
from azure.cli.core.aaz import AAZStrArg


class CreatePolicy(_Create):
    """Create a retention policy for a Durabletask scheduler."""

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        """Define custom arguments for the command."""
        # Call the parent class method to initialize the argument schema
        cls.args_schema = super()._build_arguments_schema(*args, **kwargs)

        # Remove the registration of the retention policies schema so it doesn't show up in the CLI help
        if hasattr(cls._args_schema.retention_policies, '_registered'):
            setattr(cls._args_schema.retention_policies, '_registered', False)
        _args_schema = cls._args_schema

        # Define retention policy arguments with their CLI options and descriptions
        retention_args = {
            "default_days": ("--default-days", "-d", "The number of days to retain orchestrations."),
            "canceled_days": ("--canceled-days", "-x", "The number of days to retain canceled orchestrations."),
            "completed_days": ("--completed-days", "-c", "The number of days to retain completed orchestrations."),
            "failed_days": ("--failed-days", "-f", "The number of days to retain failed orchestrations."),
            "terminated_days": ("--terminated-days", "-t", "The number of days to retain terminated orchestrations."),
        }

        # Add each retention argument to the schema
        for arg_name, (option, short_option, help_text) in retention_args.items():
            setattr(_args_schema, arg_name, AAZStrArg(
                arg_group="Properties",  # Group these arguments under "Properties"
                options=[option, short_option],  # CLI options for the argument
                help=help_text,  # Description of the argument
                required=False,  # These arguments are optional
            ))

        return _args_schema

    def pre_operations(self):
        """Prepare retention policies before executing the operation."""

        if not any([
            self.ctx.args.default_days,
            self.ctx.args.canceled_days,
            self.ctx.args.completed_days,
            self.ctx.args.failed_days,
            self.ctx.args.terminated_days
        ]):
            raise ValueError("At least one retention period (e.g., --default-days, --canceled-days) must be specified.")

        # Build the retention policies based on the provided arguments
        self.ctx.args.retention_policies = _build_retention_policies({
            key: value for key, value in {
                'default_days': self.ctx.args.default_days,
                'canceled_days': self.ctx.args.canceled_days,
                'completed_days': self.ctx.args.completed_days,
                'failed_days': self.ctx.args.failed_days,
                'terminated_days': self.ctx.args.terminated_days
            }.items() if value is not None  # Only include arguments that are not None
        })


def _build_retention_policies(args_dict):
    """Build a list of retention policies based on the provided arguments."""
    retention_policies = []

    def to_int(value):
        """Convert a value to an integer, handling serialization."""
        try:
            return int(value.to_serialized_data())  # Convert serialized data to an integer
        except (ValueError, TypeError):
            return None  # Return None if conversion fails

    # Add default retention policy if specified
    default_days = args_dict.get('default_days')
    if default_days is not None:
        days = to_int(default_days)
        if days is not None:
            # Add a default retention policy with the specified number of days
            retention_policies.append({"retentionPeriodInDays": days})

    # Define a mapping of argument keys to orchestration states
    state_mapping = {
        'canceled_days': 'Canceled',
        'completed_days': 'Completed',
        'failed_days': 'Failed',
        'terminated_days': 'Terminated',
    }

    # Add state-specific retention policies
    for arg_key, state in state_mapping.items():
        days_arg = args_dict.get(arg_key)
        if days_arg is not None:
            days = to_int(days_arg)
            if days is not None:
                # Add a retention policy for the specific orchestration state
                retention_policies.append({
                    "retentionPeriodInDays": days,
                    "orchestrationState": state
                })

    return retention_policies
