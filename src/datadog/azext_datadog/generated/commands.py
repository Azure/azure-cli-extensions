# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=too-many-statements
# pylint: disable=too-many-locals

from azure.cli.core.commands import CliCommandType


def load_command_table(self, _):

    from azext_datadog.generated._client_factory import cf_marketplace_agreement
    datadog_marketplace_agreement = CliCommandType(
        operations_tmpl='azext_datadog.vendored_sdks.datadog.operations._marketplace_agreements_operations#MarketplaceA'
        'greementsOperations.{}',
        client_factory=cf_marketplace_agreement)
    with self.command_group('datadog terms', datadog_marketplace_agreement,
                            client_factory=cf_marketplace_agreement, is_experimental=True) as g:
        g.custom_command('list', 'datadog_terms_list')
        g.custom_command('create', 'datadog_terms_create')
        g.custom_command('update', 'datadog_terms_update')

    from azext_datadog.generated._client_factory import cf_monitor
    datadog_monitor = CliCommandType(
        operations_tmpl='azext_datadog.vendored_sdks.datadog.operations._monitors_operations#MonitorsOperations.{}',
        client_factory=cf_monitor)
    with self.command_group('datadog monitor', datadog_monitor, client_factory=cf_monitor) as g:
        g.custom_command('list', 'datadog_monitor_list')
        g.custom_show_command('show', 'datadog_monitor_show')
        g.custom_command('create', 'datadog_monitor_create', supports_no_wait=True)
        g.custom_command('update', 'datadog_monitor_update', supports_no_wait=True)
        g.custom_command('delete', 'datadog_monitor_delete', supports_no_wait=True, confirmation=True)
        g.custom_command('get-default-key', 'datadog_monitor_get_default_key')
        g.custom_command('list-api-key', 'datadog_monitor_list_api_key')
        g.custom_command('list-host', 'datadog_monitor_list_host')
        g.custom_command('list-linked-resource', 'datadog_monitor_list_linked_resource')
        g.custom_command('list-monitored-resource', 'datadog_monitor_list_monitored_resource')
        g.custom_command('refresh-set-password-link', 'datadog_monitor_refresh_set_password_link')
        g.custom_command('set-default-key', 'datadog_monitor_set_default_key')
        g.custom_wait_command('wait', 'datadog_monitor_show')

    from azext_datadog.generated._client_factory import cf_tag_rule
    datadog_tag_rule = CliCommandType(
        operations_tmpl='azext_datadog.vendored_sdks.datadog.operations._tag_rules_operations#TagRulesOperations.{}',
        client_factory=cf_tag_rule)
    with self.command_group('datadog tag-rule', datadog_tag_rule, client_factory=cf_tag_rule) as g:
        g.custom_command('list', 'datadog_tag_rule_list')
        g.custom_show_command('show', 'datadog_tag_rule_show')
        g.custom_command('create', 'datadog_tag_rule_create')
        g.generic_update_command('update', setter_arg_name='body', custom_func_name='datadog_tag_rule_update')

    from azext_datadog.generated._client_factory import cf_single_sign_on_configuration
    datadog_single_sign_on_configuration = CliCommandType(
        operations_tmpl='azext_datadog.vendored_sdks.datadog.operations._single_sign_on_configurations_operations#Singl'
        'eSignOnConfigurationsOperations.{}',
        client_factory=cf_single_sign_on_configuration)
    with self.command_group('datadog sso-config', datadog_single_sign_on_configuration,
                            client_factory=cf_single_sign_on_configuration) as g:
        g.custom_command('list', 'datadog_sso_config_list')
        g.custom_show_command('show', 'datadog_sso_config_show')
        g.custom_command('create', 'datadog_sso_config_create', supports_no_wait=True)
        g.generic_update_command('update', setter_arg_name='body', setter_name='begin_create_or_update',
                                 custom_func_name='datadog_sso_config_update', supports_no_wait=True)
        g.custom_wait_command('wait', 'datadog_sso_config_show')

    with self.command_group('datadog'):
        pass
