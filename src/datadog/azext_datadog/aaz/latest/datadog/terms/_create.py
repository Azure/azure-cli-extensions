# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "datadog terms create",
    is_experimental=True,
)
class Create(AAZCommand):
    """Creates a new marketplace agreement for Datadog services in your Azure subscription, enabling you to subscribe to Datadog services through Azure Marketplace.

    :example: MarketplaceAgreements_CreateOrUpdate
        az datadog terms create --accepted True
    """

    _aaz_info = {
        "version": "2021-03-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/providers/microsoft.datadog/agreements/default", "2021-03-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.accepted = AAZBoolArg(
            options=["--accepted"],
            arg_group="Properties",
            help="If any version of the terms have been accepted, otherwise false.",
        )
        _args_schema.license_text_link = AAZStrArg(
            options=["--license-text-link"],
            arg_group="Properties",
            help="Link to HTML with Microsoft and Publisher terms.",
        )
        _args_schema.plan = AAZStrArg(
            options=["--plan"],
            arg_group="Properties",
            help="Plan identifier string.",
        )
        _args_schema.privacy_policy_link = AAZStrArg(
            options=["--privacy-policy-link"],
            arg_group="Properties",
            help="Link to the privacy policy of the publisher.",
        )
        _args_schema.product = AAZStrArg(
            options=["--product"],
            arg_group="Properties",
            help="Product identifier string.",
        )
        _args_schema.publisher = AAZStrArg(
            options=["--publisher"],
            arg_group="Properties",
            help="Publisher identifier string.",
        )
        _args_schema.retrieve_datetime = AAZDateTimeArg(
            options=["--retrieve-datetime"],
            arg_group="Properties",
            help="Date and time in UTC of when the terms were accepted. This is empty if Accepted is false.",
        )
        _args_schema.signature = AAZStrArg(
            options=["--signature"],
            arg_group="Properties",
            help="Terms signature.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MarketplaceAgreementsCreateOrUpdate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class MarketplaceAgreementsCreateOrUpdate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/providers/Microsoft.Datadog/agreements/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2021-03-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("accepted", AAZBoolType, ".accepted")
                properties.set_prop("licenseTextLink", AAZStrType, ".license_text_link")
                properties.set_prop("plan", AAZStrType, ".plan")
                properties.set_prop("privacyPolicyLink", AAZStrType, ".privacy_policy_link")
                properties.set_prop("product", AAZStrType, ".product")
                properties.set_prop("publisher", AAZStrType, ".publisher")
                properties.set_prop("retrieveDatetime", AAZStrType, ".retrieve_datetime")
                properties.set_prop("signature", AAZStrType, ".signature")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.accepted = AAZBoolType()
            properties.license_text_link = AAZStrType(
                serialized_name="licenseTextLink",
            )
            properties.plan = AAZStrType()
            properties.privacy_policy_link = AAZStrType(
                serialized_name="privacyPolicyLink",
            )
            properties.product = AAZStrType()
            properties.publisher = AAZStrType()
            properties.retrieve_datetime = AAZStrType(
                serialized_name="retrieveDatetime",
            )
            properties.signature = AAZStrType()

            system_data = cls._schema_on_200.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
