# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workloads sap-virtual-instance update",
)
class Update(AAZCommand):
    """Update a Virtual Instance for SAP solutions (VIS) resource
    """

    _aaz_info = {
        "version": "2023-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.workloads/sapvirtualinstances/{}", "2023-04-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.sap_virtual_instance_name = AAZStrArg(
            options=["-n", "--name", "--sap-virtual-instance-name"],
            help="The name of the Virtual Instances for SAP solutions resource",
            required=True,
            id_part="name",
        )

        # define Arg Group "Body"

        _args_schema = cls._args_schema
        _args_schema.identity = AAZObjectArg(
            options=["--identity"],
            arg_group="Body",
            help="A pre-created user assigned identity with appropriate roles assigned. To learn more on identity and roles required, visit the ACSS how-to-guide.",
            nullable=True,
        )
        _args_schema.tags = AAZDictArg(
            options=["--tags"],
            arg_group="Body",
            help="Resource tags.",
            nullable=True,
        )

        identity = cls._args_schema.identity
        identity.type = AAZStrArg(
            options=["type"],
            help="Type of manage identity",
            enum={"None": "None", "UserAssigned": "UserAssigned"},
        )
        identity.user_assigned_identities = AAZDictArg(
            options=["user-assigned-identities"],
            help="User assigned identities dictionary",
            nullable=True,
        )

        user_assigned_identities = cls._args_schema.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectArg(
            nullable=True,
            blank={},
        )

        tags = cls._args_schema.tags
        tags.Element = AAZStrArg(
            nullable=True,
        )

        # define Arg Group "ManagedResourceGroupConfiguration"

        _args_schema = cls._args_schema
        _args_schema.managed_rg_name = AAZStrArg(
            options=["--managed-rg-name"],
            arg_group="ManagedResourceGroupConfiguration",
            help="Managed resource group name",
            nullable=True,
        )

        # define Arg Group "Properties"
        return cls._args_schema

    _args_disk_configuration_update = None

    @classmethod
    def _build_args_disk_configuration_update(cls, _schema):
        if cls._args_disk_configuration_update is not None:
            _schema.disk_volume_configurations = cls._args_disk_configuration_update.disk_volume_configurations
            return

        cls._args_disk_configuration_update = AAZObjectArg(
            nullable=True,
        )

        disk_configuration_update = cls._args_disk_configuration_update
        disk_configuration_update.disk_volume_configurations = AAZDictArg(
            options=["disk-volume-configurations"],
            help="The disk configuration for the db volume. For HANA, Required volumes are: ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os'], Optional volume : ['backup'].",
            nullable=True,
        )

        disk_volume_configurations = cls._args_disk_configuration_update.disk_volume_configurations
        disk_volume_configurations.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_disk_configuration_update.disk_volume_configurations.Element
        _element.count = AAZIntArg(
            options=["count"],
            help="The total number of disks required for the concerned volume.",
            nullable=True,
        )
        _element.size_gb = AAZIntArg(
            options=["size-gb"],
            help="The disk size in GB.",
            nullable=True,
        )
        _element.sku = AAZObjectArg(
            options=["sku"],
            help="The disk SKU details.",
            nullable=True,
        )

        sku = cls._args_disk_configuration_update.disk_volume_configurations.Element.sku
        sku.name = AAZStrArg(
            options=["name"],
            help="Defines the disk sku name.",
            nullable=True,
            enum={"PremiumV2_LRS": "PremiumV2_LRS", "Premium_LRS": "Premium_LRS", "Premium_ZRS": "Premium_ZRS", "StandardSSD_LRS": "StandardSSD_LRS", "StandardSSD_ZRS": "StandardSSD_ZRS", "Standard_LRS": "Standard_LRS", "UltraSSD_LRS": "UltraSSD_LRS"},
        )

        _schema.disk_volume_configurations = cls._args_disk_configuration_update.disk_volume_configurations

    _args_high_availability_software_configuration_update = None

    @classmethod
    def _build_args_high_availability_software_configuration_update(cls, _schema):
        if cls._args_high_availability_software_configuration_update is not None:
            _schema.fencing_client_id = cls._args_high_availability_software_configuration_update.fencing_client_id
            _schema.fencing_client_password = cls._args_high_availability_software_configuration_update.fencing_client_password
            return

        cls._args_high_availability_software_configuration_update = AAZObjectArg(
            nullable=True,
        )

        high_availability_software_configuration_update = cls._args_high_availability_software_configuration_update
        high_availability_software_configuration_update.fencing_client_id = AAZStrArg(
            options=["fencing-client-id"],
            help="The fencing client id.",
        )
        high_availability_software_configuration_update.fencing_client_password = AAZStrArg(
            options=["fencing-client-password"],
            help="The fencing client id secret/password. The secret should never expire. This will be used pacemaker to start/stop the cluster VMs.",
        )

        _schema.fencing_client_id = cls._args_high_availability_software_configuration_update.fencing_client_id
        _schema.fencing_client_password = cls._args_high_availability_software_configuration_update.fencing_client_password

    _args_infrastructure_configuration_update = None

    @classmethod
    def _build_args_infrastructure_configuration_update(cls, _schema):
        if cls._args_infrastructure_configuration_update is not None:
            _schema.app_resource_group = cls._args_infrastructure_configuration_update.app_resource_group
            _schema.single_server = cls._args_infrastructure_configuration_update.single_server
            _schema.three_tier = cls._args_infrastructure_configuration_update.three_tier
            return

        cls._args_infrastructure_configuration_update = AAZObjectArg(
            nullable=True,
        )

        infrastructure_configuration_update = cls._args_infrastructure_configuration_update
        infrastructure_configuration_update.single_server = AAZObjectArg(
            options=["single-server"],
        )
        infrastructure_configuration_update.three_tier = AAZObjectArg(
            options=["three-tier"],
        )
        infrastructure_configuration_update.app_resource_group = AAZStrArg(
            options=["app-resource-group"],
            help="The application resource group where SAP system resources will be deployed.",
        )

        single_server = cls._args_infrastructure_configuration_update.single_server
        single_server.custom_resource_names = AAZObjectArg(
            options=["custom-resource-names"],
            help="The set of custom names to be used for underlying azure resources that are part of the SAP system.",
            nullable=True,
        )
        single_server.db_disk_configuration = AAZObjectArg(
            options=["db-disk-configuration"],
            help="Gets or sets the disk configuration.",
            nullable=True,
        )
        cls._build_args_disk_configuration_update(single_server.db_disk_configuration)
        single_server.network_configuration = AAZObjectArg(
            options=["network-configuration"],
            help="Network configuration for the server",
            nullable=True,
        )
        cls._build_args_network_configuration_update(single_server.network_configuration)
        single_server.subnet_id = AAZStrArg(
            options=["subnet-id"],
            help="The subnet id.",
        )
        single_server.virtual_machine_configuration = AAZObjectArg(
            options=["virtual-machine-configuration"],
            help="Gets or sets the virtual machine configuration.",
        )
        cls._build_args_virtual_machine_configuration_update(single_server.virtual_machine_configuration)

        custom_resource_names = cls._args_infrastructure_configuration_update.single_server.custom_resource_names
        custom_resource_names.full_resource_name = AAZObjectArg(
            options=["full-resource-name"],
        )

        full_resource_name = cls._args_infrastructure_configuration_update.single_server.custom_resource_names.full_resource_name
        full_resource_name.virtual_machine = AAZObjectArg(
            options=["virtual-machine"],
            help="The resource names object for virtual machine and related resources.",
            nullable=True,
        )
        cls._build_args_virtual_machine_resource_names_update(full_resource_name.virtual_machine)

        three_tier = cls._args_infrastructure_configuration_update.three_tier
        three_tier.application_server = AAZObjectArg(
            options=["application-server"],
            help="The application server configuration.",
        )
        three_tier.central_server = AAZObjectArg(
            options=["central-server"],
            help="The central server configuration.",
        )
        three_tier.custom_resource_names = AAZObjectArg(
            options=["custom-resource-names"],
            help="The set of custom names to be used for underlying azure resources that are part of the SAP system.",
            nullable=True,
        )
        three_tier.database_server = AAZObjectArg(
            options=["database-server"],
            help="The database configuration.",
        )
        three_tier.network_configuration = AAZObjectArg(
            options=["network-configuration"],
            help="Network configuration common to all servers",
            nullable=True,
        )
        cls._build_args_network_configuration_update(three_tier.network_configuration)
        three_tier.storage_configuration = AAZObjectArg(
            options=["storage-configuration"],
            help="The storage configuration.",
            nullable=True,
        )

        application_server = cls._args_infrastructure_configuration_update.three_tier.application_server
        application_server.instance_count = AAZIntArg(
            options=["instance-count"],
            help="The number of app server instances.",
        )
        application_server.subnet_id = AAZStrArg(
            options=["subnet-id"],
            help="The subnet id.",
        )
        application_server.virtual_machine_configuration = AAZObjectArg(
            options=["virtual-machine-configuration"],
            help="Gets or sets the virtual machine configuration.",
        )
        cls._build_args_virtual_machine_configuration_update(application_server.virtual_machine_configuration)

        central_server = cls._args_infrastructure_configuration_update.three_tier.central_server
        central_server.instance_count = AAZIntArg(
            options=["instance-count"],
            help="The number of central server VMs.",
        )
        central_server.subnet_id = AAZStrArg(
            options=["subnet-id"],
            help="The subnet id.",
        )
        central_server.virtual_machine_configuration = AAZObjectArg(
            options=["virtual-machine-configuration"],
            help="Gets or sets the virtual machine configuration.",
        )
        cls._build_args_virtual_machine_configuration_update(central_server.virtual_machine_configuration)

        custom_resource_names = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names
        custom_resource_names.full_resource_name = AAZObjectArg(
            options=["full-resource-name"],
        )

        full_resource_name = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name
        full_resource_name.application_server = AAZObjectArg(
            options=["application-server"],
            help="The full resource names object for application layer resources. The number of entries in this list should be equal to the number VMs to be created for application layer.",
            nullable=True,
        )
        full_resource_name.central_server = AAZObjectArg(
            options=["central-server"],
            help="The full resource names object for central server layer resources.",
            nullable=True,
        )
        full_resource_name.database_server = AAZObjectArg(
            options=["database-server"],
            help="The full resource names object for database layer resources. The number of entries in this list should be equal to the number VMs to be created for database layer.",
            nullable=True,
        )
        full_resource_name.shared_storage = AAZObjectArg(
            options=["shared-storage"],
            help="The resource names object for shared storage.",
            nullable=True,
        )

        application_server = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.application_server
        application_server.availability_set_name = AAZStrArg(
            options=["availability-set-name"],
            help="The full name for availability set. In case name is not provided, it will be defaulted to {SID}-App-AvSet.",
            nullable=True,
        )
        application_server.virtual_machines = AAZListArg(
            options=["virtual-machines"],
            help="The list of virtual machine naming details.",
            nullable=True,
        )

        virtual_machines = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.application_server.virtual_machines
        virtual_machines.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_virtual_machine_resource_names_update(virtual_machines.Element)

        central_server = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.central_server
        central_server.availability_set_name = AAZStrArg(
            options=["availability-set-name"],
            help="The full name for availability set. In case name is not provided, it will be defaulted to {SID}-ASCS-AvSet.",
            nullable=True,
        )
        central_server.load_balancer = AAZObjectArg(
            options=["load-balancer"],
            help="The resource names object for load balancer and related resources.",
            nullable=True,
        )
        cls._build_args_load_balancer_resource_names_update(central_server.load_balancer)
        central_server.virtual_machines = AAZListArg(
            options=["virtual-machines"],
            help="The list of names for all ASCS virtual machines to be deployed. The number of entries in this list should be equal to the number VMs to be created for ASCS layer. At maximum, there can be two virtual machines at this layer: ASCS and ERS.",
            nullable=True,
        )

        virtual_machines = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.central_server.virtual_machines
        virtual_machines.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_virtual_machine_resource_names_update(virtual_machines.Element)

        database_server = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.database_server
        database_server.availability_set_name = AAZStrArg(
            options=["availability-set-name"],
            help="The full name for availability set. In case name is not provided, it will be defaulted to {SID}-DB-AvSet.",
            nullable=True,
        )
        database_server.load_balancer = AAZObjectArg(
            options=["load-balancer"],
            nullable=True,
        )
        cls._build_args_load_balancer_resource_names_update(database_server.load_balancer)
        database_server.virtual_machines = AAZListArg(
            options=["virtual-machines"],
            help="The list of virtual machine naming details.",
            nullable=True,
        )

        virtual_machines = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.database_server.virtual_machines
        virtual_machines.Element = AAZObjectArg(
            nullable=True,
        )
        cls._build_args_virtual_machine_resource_names_update(virtual_machines.Element)

        shared_storage = cls._args_infrastructure_configuration_update.three_tier.custom_resource_names.full_resource_name.shared_storage
        shared_storage.shared_storage_account_name = AAZStrArg(
            options=["shared-storage-account-name"],
            help="The full name of the shared storage account. If it is not provided, it will be defaulted to {SID}nfs{guid of 15 chars}.",
            nullable=True,
        )
        shared_storage.shared_storage_account_private_end_point_name = AAZStrArg(
            options=["shared-storage-account-private-end-point-name"],
            help="The full name of private end point for the shared storage account. If it is not provided, it will be defaulted to {storageAccountName}_pe",
            nullable=True,
        )

        database_server = cls._args_infrastructure_configuration_update.three_tier.database_server
        database_server.disk_configuration = AAZObjectArg(
            options=["disk-configuration"],
            help="Gets or sets the disk configuration.",
            nullable=True,
        )
        cls._build_args_disk_configuration_update(database_server.disk_configuration)
        database_server.instance_count = AAZIntArg(
            options=["instance-count"],
            help="The number of database VMs.",
        )
        database_server.subnet_id = AAZStrArg(
            options=["subnet-id"],
            help="The subnet id.",
        )
        database_server.virtual_machine_configuration = AAZObjectArg(
            options=["virtual-machine-configuration"],
            help="Gets or sets the virtual machine configuration.",
        )
        cls._build_args_virtual_machine_configuration_update(database_server.virtual_machine_configuration)

        storage_configuration = cls._args_infrastructure_configuration_update.three_tier.storage_configuration
        storage_configuration.transport_file_share_configuration = AAZObjectArg(
            options=["transport-file-share-configuration"],
            help="The properties of the transport directory attached to the VIS. The default for transportFileShareConfiguration is the createAndMount flow if storage configuration is missing.",
            nullable=True,
        )

        transport_file_share_configuration = cls._args_infrastructure_configuration_update.three_tier.storage_configuration.transport_file_share_configuration
        transport_file_share_configuration.create_and_mount = AAZObjectArg(
            options=["create-and-mount"],
        )
        transport_file_share_configuration.mount = AAZObjectArg(
            options=["mount"],
        )

        create_and_mount = cls._args_infrastructure_configuration_update.three_tier.storage_configuration.transport_file_share_configuration.create_and_mount
        create_and_mount.resource_group = AAZStrArg(
            options=["resource-group"],
            help="The name of transport file share resource group. This should be pre created by the customer. The app rg is used in case of missing input.",
            nullable=True,
        )
        create_and_mount.storage_account_name = AAZStrArg(
            options=["storage-account-name"],
            help="The name of file share storage account name . A custom name is used in case of missing input.",
            nullable=True,
        )

        mount = cls._args_infrastructure_configuration_update.three_tier.storage_configuration.transport_file_share_configuration.mount
        mount.id = AAZStrArg(
            options=["id"],
            help="The fileshare resource ID",
        )
        mount.private_endpoint_id = AAZStrArg(
            options=["private-endpoint-id"],
            help="The private endpoint resource ID",
        )

        _schema.app_resource_group = cls._args_infrastructure_configuration_update.app_resource_group
        _schema.single_server = cls._args_infrastructure_configuration_update.single_server
        _schema.three_tier = cls._args_infrastructure_configuration_update.three_tier

    _args_load_balancer_resource_names_update = None

    @classmethod
    def _build_args_load_balancer_resource_names_update(cls, _schema):
        if cls._args_load_balancer_resource_names_update is not None:
            _schema.backend_pool_names = cls._args_load_balancer_resource_names_update.backend_pool_names
            _schema.frontend_ip_configuration_names = cls._args_load_balancer_resource_names_update.frontend_ip_configuration_names
            _schema.health_probe_names = cls._args_load_balancer_resource_names_update.health_probe_names
            _schema.load_balancer_name = cls._args_load_balancer_resource_names_update.load_balancer_name
            return

        cls._args_load_balancer_resource_names_update = AAZObjectArg(
            nullable=True,
        )

        load_balancer_resource_names_update = cls._args_load_balancer_resource_names_update
        load_balancer_resource_names_update.backend_pool_names = AAZListArg(
            options=["backend-pool-names"],
            help="The list of backend pool names. Currently, ACSS deploys only one backend pool and hence, size of this list should be 1",
            nullable=True,
        )
        load_balancer_resource_names_update.frontend_ip_configuration_names = AAZListArg(
            options=["frontend-ip-configuration-names"],
            help="The list of frontend IP configuration names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.",
            nullable=True,
        )
        load_balancer_resource_names_update.health_probe_names = AAZListArg(
            options=["health-probe-names"],
            help="The list of health probe names. If provided as input, size of this list should be 2 for cs layer and should be 1 for database layer.",
            nullable=True,
        )
        load_balancer_resource_names_update.load_balancer_name = AAZStrArg(
            options=["load-balancer-name"],
            help="The full resource name for load balancer. If this value is not provided, load balancer will be name as {ASCS/DB}-loadBalancer.",
            nullable=True,
        )

        backend_pool_names = cls._args_load_balancer_resource_names_update.backend_pool_names
        backend_pool_names.Element = AAZStrArg(
            nullable=True,
        )

        frontend_ip_configuration_names = cls._args_load_balancer_resource_names_update.frontend_ip_configuration_names
        frontend_ip_configuration_names.Element = AAZStrArg(
            nullable=True,
        )

        health_probe_names = cls._args_load_balancer_resource_names_update.health_probe_names
        health_probe_names.Element = AAZStrArg(
            nullable=True,
        )

        _schema.backend_pool_names = cls._args_load_balancer_resource_names_update.backend_pool_names
        _schema.frontend_ip_configuration_names = cls._args_load_balancer_resource_names_update.frontend_ip_configuration_names
        _schema.health_probe_names = cls._args_load_balancer_resource_names_update.health_probe_names
        _schema.load_balancer_name = cls._args_load_balancer_resource_names_update.load_balancer_name

    _args_network_configuration_update = None

    @classmethod
    def _build_args_network_configuration_update(cls, _schema):
        if cls._args_network_configuration_update is not None:
            _schema.is_secondary_ip_enabled = cls._args_network_configuration_update.is_secondary_ip_enabled
            return

        cls._args_network_configuration_update = AAZObjectArg(
            nullable=True,
        )

        network_configuration_update = cls._args_network_configuration_update
        network_configuration_update.is_secondary_ip_enabled = AAZBoolArg(
            options=["is-secondary-ip-enabled"],
            help="Specifies whether a secondary IP address should be added to the network interface on all VMs of the SAP system being deployed",
            nullable=True,
        )

        _schema.is_secondary_ip_enabled = cls._args_network_configuration_update.is_secondary_ip_enabled

    _args_software_configuration_update = None

    @classmethod
    def _build_args_software_configuration_update(cls, _schema):
        if cls._args_software_configuration_update is not None:
            _schema.external = cls._args_software_configuration_update.external
            _schema.sap_install_without_os_config = cls._args_software_configuration_update.sap_install_without_os_config
            _schema.service_initiated = cls._args_software_configuration_update.service_initiated
            return

        cls._args_software_configuration_update = AAZObjectArg(
            nullable=True,
        )

        software_configuration_update = cls._args_software_configuration_update
        software_configuration_update.external = AAZObjectArg(
            options=["external"],
        )
        software_configuration_update.sap_install_without_os_config = AAZObjectArg(
            options=["sap-install-without-os-config"],
        )
        software_configuration_update.service_initiated = AAZObjectArg(
            options=["service-initiated"],
        )

        external = cls._args_software_configuration_update.external
        external.central_server_vm_id = AAZStrArg(
            options=["central-server-vm-id"],
            help="The resource ID of the virtual machine containing the central server instance.",
            nullable=True,
        )

        sap_install_without_os_config = cls._args_software_configuration_update.sap_install_without_os_config
        sap_install_without_os_config.bom_url = AAZStrArg(
            options=["bom-url"],
            help="The URL to the SAP Build of Materials(BOM) file.",
        )
        sap_install_without_os_config.high_availability_software_configuration = AAZObjectArg(
            options=["high-availability-software-configuration"],
            nullable=True,
        )
        cls._build_args_high_availability_software_configuration_update(sap_install_without_os_config.high_availability_software_configuration)
        sap_install_without_os_config.sap_bits_storage_account_id = AAZStrArg(
            options=["sap-bits-storage-account-id"],
            help="The SAP bits storage account id.",
        )
        sap_install_without_os_config.software_version = AAZStrArg(
            options=["software-version"],
            help="The software version to install.",
        )

        service_initiated = cls._args_software_configuration_update.service_initiated
        service_initiated.bom_url = AAZStrArg(
            options=["bom-url"],
            help="The URL to the SAP Build of Materials(BOM) file.",
        )
        service_initiated.high_availability_software_configuration = AAZObjectArg(
            options=["high-availability-software-configuration"],
            help="Gets or sets the HA software configuration.",
            nullable=True,
        )
        cls._build_args_high_availability_software_configuration_update(service_initiated.high_availability_software_configuration)
        service_initiated.sap_bits_storage_account_id = AAZStrArg(
            options=["sap-bits-storage-account-id"],
            help="The SAP bits storage account id.",
        )
        service_initiated.sap_fqdn = AAZStrArg(
            options=["sap-fqdn"],
            help="The FQDN to set for the SAP system during install.",
        )
        service_initiated.software_version = AAZStrArg(
            options=["software-version"],
            help="The software version to install.",
        )
        service_initiated.ssh_private_key = AAZStrArg(
            options=["ssh-private-key"],
            help="The SSH private key.",
        )

        _schema.external = cls._args_software_configuration_update.external
        _schema.sap_install_without_os_config = cls._args_software_configuration_update.sap_install_without_os_config
        _schema.service_initiated = cls._args_software_configuration_update.service_initiated

    _args_virtual_machine_configuration_update = None

    @classmethod
    def _build_args_virtual_machine_configuration_update(cls, _schema):
        if cls._args_virtual_machine_configuration_update is not None:
            _schema.image_reference = cls._args_virtual_machine_configuration_update.image_reference
            _schema.os_profile = cls._args_virtual_machine_configuration_update.os_profile
            _schema.vm_size = cls._args_virtual_machine_configuration_update.vm_size
            return

        cls._args_virtual_machine_configuration_update = AAZObjectArg()

        virtual_machine_configuration_update = cls._args_virtual_machine_configuration_update
        virtual_machine_configuration_update.image_reference = AAZObjectArg(
            options=["image-reference"],
            help="The image reference.",
        )
        virtual_machine_configuration_update.os_profile = AAZObjectArg(
            options=["os-profile"],
            help="The OS profile.",
        )
        virtual_machine_configuration_update.vm_size = AAZStrArg(
            options=["vm-size"],
            help="The virtual machine size.",
        )

        image_reference = cls._args_virtual_machine_configuration_update.image_reference
        image_reference.offer = AAZStrArg(
            options=["offer"],
            help="Specifies the offer of the platform image or marketplace image used to create the virtual machine.",
            nullable=True,
        )
        image_reference.publisher = AAZStrArg(
            options=["publisher"],
            help="The image publisher.",
            nullable=True,
        )
        image_reference.sku = AAZStrArg(
            options=["sku"],
            help="The image SKU.",
            nullable=True,
        )
        image_reference.version = AAZStrArg(
            options=["version"],
            help="Specifies the version of the platform image or marketplace image used to create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest version of an image available at deploy time. Even if you use 'latest', the VM image will not automatically update after deploy time even if a new version becomes available.",
            nullable=True,
        )

        os_profile = cls._args_virtual_machine_configuration_update.os_profile
        os_profile.admin_password = AAZStrArg(
            options=["admin-password"],
            help="Specifies the password of the administrator account. <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper characters <br> Has a digit <br> Has a special character (Regex match [\W_]) <br><br> **Disallowed values:** \"abc@123\", \"P@$$w0rd\", \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \"pass@word1\", \"Password!\", \"Password1\", \"Password22\", \"iloveyou!\" <br><br> For resetting the password, see [How to reset the Remote Desktop service or its login password in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) <br><br> For resetting root password, see [Manage users, SSH, and check or repair disks on Azure Linux VMs using the VMAccess Extension](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)",
            nullable=True,
        )
        os_profile.admin_username = AAZStrArg(
            options=["admin-username"],
            help="Specifies the name of the administrator account. <br><br> This property cannot be updated after the VM is created. <br><br> **Windows-only restriction:** Cannot end in \".\" <br><br> **Disallowed values:** \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \"user2\", \"test1\", \"user3\", \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \"admin2\", \"aspnet\", \"backup\", \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \"server\", \"sql\", \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \"user5\". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** 64 characters <br><br> **Max-length (Windows):** 20 characters.",
            nullable=True,
        )
        os_profile.os_configuration = AAZObjectArg(
            options=["os-configuration"],
            help="Specifies Windows operating system settings on the virtual machine.",
            nullable=True,
        )

        os_configuration = cls._args_virtual_machine_configuration_update.os_profile.os_configuration
        os_configuration.linux = AAZObjectArg(
            options=["linux"],
        )

        linux = cls._args_virtual_machine_configuration_update.os_profile.os_configuration.linux
        linux.disable_password_authentication = AAZBoolArg(
            options=["disable-password-authentication"],
            help="Specifies whether password authentication should be disabled.",
            nullable=True,
        )
        linux.ssh = AAZObjectArg(
            options=["ssh"],
            help="Specifies the ssh key configuration for a Linux OS. (This property is deprecated, please use 'sshKeyPair' instead)",
            nullable=True,
        )
        linux.ssh_key_pair = AAZObjectArg(
            options=["ssh-key-pair"],
            help="The SSH Key-pair used to authenticate with the VM's.",
            nullable=True,
        )

        ssh = cls._args_virtual_machine_configuration_update.os_profile.os_configuration.linux.ssh
        ssh.public_keys = AAZListArg(
            options=["public-keys"],
            help="The list of SSH public keys used to authenticate with linux based VMs.",
            nullable=True,
        )

        public_keys = cls._args_virtual_machine_configuration_update.os_profile.os_configuration.linux.ssh.public_keys
        public_keys.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_virtual_machine_configuration_update.os_profile.os_configuration.linux.ssh.public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="SSH public key certificate used to authenticate with the VM through ssh. The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, see [Create SSH keys on Linux and Mac for Linux VMs in Azure](https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).",
            nullable=True,
        )

        ssh_key_pair = cls._args_virtual_machine_configuration_update.os_profile.os_configuration.linux.ssh_key_pair
        ssh_key_pair.private_key = AAZStrArg(
            options=["private-key"],
            help="SSH private key.",
            nullable=True,
        )
        ssh_key_pair.public_key = AAZStrArg(
            options=["public-key"],
            help="SSH public key",
            nullable=True,
        )

        _schema.image_reference = cls._args_virtual_machine_configuration_update.image_reference
        _schema.os_profile = cls._args_virtual_machine_configuration_update.os_profile
        _schema.vm_size = cls._args_virtual_machine_configuration_update.vm_size

    _args_virtual_machine_resource_names_update = None

    @classmethod
    def _build_args_virtual_machine_resource_names_update(cls, _schema):
        if cls._args_virtual_machine_resource_names_update is not None:
            _schema.data_disk_names = cls._args_virtual_machine_resource_names_update.data_disk_names
            _schema.host_name = cls._args_virtual_machine_resource_names_update.host_name
            _schema.network_interfaces = cls._args_virtual_machine_resource_names_update.network_interfaces
            _schema.os_disk_name = cls._args_virtual_machine_resource_names_update.os_disk_name
            _schema.vm_name = cls._args_virtual_machine_resource_names_update.vm_name
            return

        cls._args_virtual_machine_resource_names_update = AAZObjectArg(
            nullable=True,
        )

        virtual_machine_resource_names_update = cls._args_virtual_machine_resource_names_update
        virtual_machine_resource_names_update.data_disk_names = AAZDictArg(
            options=["data-disk-names"],
            help="The full resource names for virtual machine data disks. This is a dictionary containing list of names of data disks per volume. Currently supported volumes for database layer are ['hana/data', 'hana/log', hana/shared', 'usr/sap', 'os', 'backup']. For application and cs layers, only 'default' volume is supported",
            nullable=True,
        )
        virtual_machine_resource_names_update.host_name = AAZStrArg(
            options=["host-name"],
            help="The full name for virtual-machine's host (computer name). Currently, ACSS only supports host names which are less than or equal to 13 characters long. If this value is not provided, vmName will be used as host name.",
            nullable=True,
        )
        virtual_machine_resource_names_update.network_interfaces = AAZListArg(
            options=["network-interfaces"],
            help="The list of network interface name objects for the selected virtual machine. Currently, only one network interface is supported per virtual machine.",
            nullable=True,
        )
        virtual_machine_resource_names_update.os_disk_name = AAZStrArg(
            options=["os-disk-name"],
            help="The full name for OS disk attached to the VM. If this value is not provided, it will be named by ARM as per its default naming standards (prefixed with vm name). There is only one OS disk attached per Virtual Machine.",
            nullable=True,
        )
        virtual_machine_resource_names_update.vm_name = AAZStrArg(
            options=["vm-name"],
            help="The full name for virtual machine. The length of this field can be upto 64 characters. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}vm. In case of HA-AvZone systems, default name will be {SID}{app/ascs/db}z{a/b}vm with an incrementor at the end in case of more than 1 vm per layer. For distributed and HA-AvSet systems, default name will be {SID}{app/ascs/db}vm with an incrementor at the end in case of more than 1 vm per layer.",
            nullable=True,
        )

        data_disk_names = cls._args_virtual_machine_resource_names_update.data_disk_names
        data_disk_names.Element = AAZListArg(
            nullable=True,
        )

        _element = cls._args_virtual_machine_resource_names_update.data_disk_names.Element
        _element.Element = AAZStrArg(
            nullable=True,
        )

        network_interfaces = cls._args_virtual_machine_resource_names_update.network_interfaces
        network_interfaces.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_virtual_machine_resource_names_update.network_interfaces.Element
        _element.network_interface_name = AAZStrArg(
            options=["network-interface-name"],
            help="The full name for network interface. If name is not provided, service uses a default name based on the deployment type. For SingleServer, default name is {SID}-Nic. In case of HA-AvZone systems, default name will be {SID}-{App/ASCS/DB}-Zone{A/B}-Nic with an incrementor at the end in case of more than 1 instance per layer. For distributed and HA-AvSet systems, default name will be {SID}-{App/ASCS/DB}-Nic with an incrementor at the end in case of more than 1 instance per layer.",
            nullable=True,
        )

        _schema.data_disk_names = cls._args_virtual_machine_resource_names_update.data_disk_names
        _schema.host_name = cls._args_virtual_machine_resource_names_update.host_name
        _schema.network_interfaces = cls._args_virtual_machine_resource_names_update.network_interfaces
        _schema.os_disk_name = cls._args_virtual_machine_resource_names_update.os_disk_name
        _schema.vm_name = cls._args_virtual_machine_resource_names_update.vm_name

    def _execute_operations(self):
        self.pre_operations()
        self.SAPVirtualInstancesGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.SAPVirtualInstancesCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SAPVirtualInstancesGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sapVirtualInstanceName", self.ctx.args.sap_virtual_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_sap_virtual_instance_read(cls._schema_on_200)

            return cls._schema_on_200

    class SAPVirtualInstancesCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200, 201]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200_201,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/sapVirtualInstances/{sapVirtualInstanceName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "sapVirtualInstanceName", self.ctx.args.sap_virtual_instance_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()
            _UpdateHelper._build_schema_sap_virtual_instance_read(cls._schema_on_200_201)

            return cls._schema_on_200_201

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType)

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".managed_rg_name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_disk_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("diskVolumeConfigurations", AAZDictType, ".disk_volume_configurations")

        disk_volume_configurations = _builder.get(".diskVolumeConfigurations")
        if disk_volume_configurations is not None:
            disk_volume_configurations.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".diskVolumeConfigurations{}")
        if _elements is not None:
            _elements.set_prop("count", AAZIntType, "@DiskConfiguration_update.disk_volume_configurations.{}.count")
            _elements.set_prop("sizeGB", AAZIntType, "@DiskConfiguration_update.disk_volume_configurations.{}.size_gb")
            _elements.set_prop("sku", AAZObjectType, "@DiskConfiguration_update.disk_volume_configurations.{}.sku")

        sku = _builder.get(".diskVolumeConfigurations{}.sku")
        if sku is not None:
            sku.set_prop("name", AAZStrType, ".name")

    @classmethod
    def _build_schema_high_availability_software_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("fencingClientId", AAZStrType, ".fencing_client_id", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("fencingClientPassword", AAZStrType, ".fencing_client_password", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_infrastructure_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("appResourceGroup", AAZStrType, ".app_resource_group", typ_kwargs={"flags": {"required": True}})
        _builder.discriminate_by("deploymentType", "SingleServer")
        _builder.discriminate_by("deploymentType", "ThreeTier")

        disc_single_server = _builder.get("{deploymentType:SingleServer}")
        if disc_single_server is not None:
            disc_single_server.set_prop("customResourceNames", AAZObjectType, ".single_server.custom_resource_names")
            cls._build_schema_disk_configuration_update(disc_single_server.set_prop("dbDiskConfiguration", AAZObjectType, ".single_server.db_disk_configuration"))
            cls._build_schema_network_configuration_update(disc_single_server.set_prop("networkConfiguration", AAZObjectType, ".single_server.network_configuration"))
            disc_single_server.set_prop("subnetId", AAZStrType, ".single_server.subnet_id", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_virtual_machine_configuration_update(disc_single_server.set_prop("virtualMachineConfiguration", AAZObjectType, ".single_server.virtual_machine_configuration", typ_kwargs={"flags": {"required": True}}))

        custom_resource_names = _builder.get("{deploymentType:SingleServer}.customResourceNames")
        if custom_resource_names is not None:
            custom_resource_names.discriminate_by("namingPatternType", "FullResourceName")

        disc_full_resource_name = _builder.get("{deploymentType:SingleServer}.customResourceNames{namingPatternType:FullResourceName}")
        if disc_full_resource_name is not None:
            cls._build_schema_virtual_machine_resource_names_update(disc_full_resource_name.set_prop("virtualMachine", AAZObjectType, ".full_resource_name.virtual_machine"))

        disc_three_tier = _builder.get("{deploymentType:ThreeTier}")
        if disc_three_tier is not None:
            disc_three_tier.set_prop("applicationServer", AAZObjectType, ".three_tier.application_server", typ_kwargs={"flags": {"required": True}})
            disc_three_tier.set_prop("centralServer", AAZObjectType, ".three_tier.central_server", typ_kwargs={"flags": {"required": True}})
            disc_three_tier.set_prop("customResourceNames", AAZObjectType, ".three_tier.custom_resource_names")
            disc_three_tier.set_prop("databaseServer", AAZObjectType, ".three_tier.database_server", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_network_configuration_update(disc_three_tier.set_prop("networkConfiguration", AAZObjectType, ".three_tier.network_configuration"))
            disc_three_tier.set_prop("storageConfiguration", AAZObjectType, ".three_tier.storage_configuration")

        application_server = _builder.get("{deploymentType:ThreeTier}.applicationServer")
        if application_server is not None:
            application_server.set_prop("instanceCount", AAZIntType, ".instance_count", typ_kwargs={"flags": {"required": True}})
            application_server.set_prop("subnetId", AAZStrType, ".subnet_id", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_virtual_machine_configuration_update(application_server.set_prop("virtualMachineConfiguration", AAZObjectType, ".virtual_machine_configuration", typ_kwargs={"flags": {"required": True}}))

        central_server = _builder.get("{deploymentType:ThreeTier}.centralServer")
        if central_server is not None:
            central_server.set_prop("instanceCount", AAZIntType, ".instance_count", typ_kwargs={"flags": {"required": True}})
            central_server.set_prop("subnetId", AAZStrType, ".subnet_id", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_virtual_machine_configuration_update(central_server.set_prop("virtualMachineConfiguration", AAZObjectType, ".virtual_machine_configuration", typ_kwargs={"flags": {"required": True}}))

        custom_resource_names = _builder.get("{deploymentType:ThreeTier}.customResourceNames")
        if custom_resource_names is not None:
            custom_resource_names.discriminate_by("namingPatternType", "FullResourceName")

        disc_full_resource_name = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}")
        if disc_full_resource_name is not None:
            disc_full_resource_name.set_prop("applicationServer", AAZObjectType, ".full_resource_name.application_server")
            disc_full_resource_name.set_prop("centralServer", AAZObjectType, ".full_resource_name.central_server")
            disc_full_resource_name.set_prop("databaseServer", AAZObjectType, ".full_resource_name.database_server")
            disc_full_resource_name.set_prop("sharedStorage", AAZObjectType, ".full_resource_name.shared_storage")

        application_server = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.applicationServer")
        if application_server is not None:
            application_server.set_prop("availabilitySetName", AAZStrType, ".availability_set_name")
            application_server.set_prop("virtualMachines", AAZListType, ".virtual_machines")

        virtual_machines = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.applicationServer.virtualMachines")
        if virtual_machines is not None:
            cls._build_schema_virtual_machine_resource_names_update(virtual_machines.set_elements(AAZObjectType, "."))

        central_server = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.centralServer")
        if central_server is not None:
            central_server.set_prop("availabilitySetName", AAZStrType, ".availability_set_name")
            cls._build_schema_load_balancer_resource_names_update(central_server.set_prop("loadBalancer", AAZObjectType, ".load_balancer"))
            central_server.set_prop("virtualMachines", AAZListType, ".virtual_machines")

        virtual_machines = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.centralServer.virtualMachines")
        if virtual_machines is not None:
            cls._build_schema_virtual_machine_resource_names_update(virtual_machines.set_elements(AAZObjectType, "."))

        database_server = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.databaseServer")
        if database_server is not None:
            database_server.set_prop("availabilitySetName", AAZStrType, ".availability_set_name")
            cls._build_schema_load_balancer_resource_names_update(database_server.set_prop("loadBalancer", AAZObjectType, ".load_balancer"))
            database_server.set_prop("virtualMachines", AAZListType, ".virtual_machines")

        virtual_machines = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.databaseServer.virtualMachines")
        if virtual_machines is not None:
            cls._build_schema_virtual_machine_resource_names_update(virtual_machines.set_elements(AAZObjectType, "."))

        shared_storage = _builder.get("{deploymentType:ThreeTier}.customResourceNames{namingPatternType:FullResourceName}.sharedStorage")
        if shared_storage is not None:
            shared_storage.set_prop("sharedStorageAccountName", AAZStrType, ".shared_storage_account_name")
            shared_storage.set_prop("sharedStorageAccountPrivateEndPointName", AAZStrType, ".shared_storage_account_private_end_point_name")

        database_server = _builder.get("{deploymentType:ThreeTier}.databaseServer")
        if database_server is not None:
            cls._build_schema_disk_configuration_update(database_server.set_prop("diskConfiguration", AAZObjectType, ".disk_configuration"))
            database_server.set_prop("instanceCount", AAZIntType, ".instance_count", typ_kwargs={"flags": {"required": True}})
            database_server.set_prop("subnetId", AAZStrType, ".subnet_id", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_virtual_machine_configuration_update(database_server.set_prop("virtualMachineConfiguration", AAZObjectType, ".virtual_machine_configuration", typ_kwargs={"flags": {"required": True}}))

        storage_configuration = _builder.get("{deploymentType:ThreeTier}.storageConfiguration")
        if storage_configuration is not None:
            storage_configuration.set_prop("transportFileShareConfiguration", AAZObjectType, ".transport_file_share_configuration")

        transport_file_share_configuration = _builder.get("{deploymentType:ThreeTier}.storageConfiguration.transportFileShareConfiguration")
        if transport_file_share_configuration is not None:
            transport_file_share_configuration.discriminate_by("configurationType", "CreateAndMount")
            transport_file_share_configuration.discriminate_by("configurationType", "Mount")

        disc_create_and_mount = _builder.get("{deploymentType:ThreeTier}.storageConfiguration.transportFileShareConfiguration{configurationType:CreateAndMount}")
        if disc_create_and_mount is not None:
            disc_create_and_mount.set_prop("resourceGroup", AAZStrType, ".create_and_mount.resource_group")
            disc_create_and_mount.set_prop("storageAccountName", AAZStrType, ".create_and_mount.storage_account_name")

        disc_mount = _builder.get("{deploymentType:ThreeTier}.storageConfiguration.transportFileShareConfiguration{configurationType:Mount}")
        if disc_mount is not None:
            disc_mount.set_prop("id", AAZStrType, ".mount.id", typ_kwargs={"flags": {"required": True}})
            disc_mount.set_prop("privateEndpointId", AAZStrType, ".mount.private_endpoint_id", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_load_balancer_resource_names_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("backendPoolNames", AAZListType, ".backend_pool_names")
        _builder.set_prop("frontendIpConfigurationNames", AAZListType, ".frontend_ip_configuration_names")
        _builder.set_prop("healthProbeNames", AAZListType, ".health_probe_names")
        _builder.set_prop("loadBalancerName", AAZStrType, ".load_balancer_name")

        backend_pool_names = _builder.get(".backendPoolNames")
        if backend_pool_names is not None:
            backend_pool_names.set_elements(AAZStrType, ".")

        frontend_ip_configuration_names = _builder.get(".frontendIpConfigurationNames")
        if frontend_ip_configuration_names is not None:
            frontend_ip_configuration_names.set_elements(AAZStrType, ".")

        health_probe_names = _builder.get(".healthProbeNames")
        if health_probe_names is not None:
            health_probe_names.set_elements(AAZStrType, ".")

    @classmethod
    def _build_schema_network_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("isSecondaryIpEnabled", AAZBoolType, ".is_secondary_ip_enabled")

    @classmethod
    def _build_schema_software_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.discriminate_by("softwareInstallationType", "External")
        _builder.discriminate_by("softwareInstallationType", "SAPInstallWithoutOSConfig")
        _builder.discriminate_by("softwareInstallationType", "ServiceInitiated")

        disc_external = _builder.get("{softwareInstallationType:External}")
        if disc_external is not None:
            disc_external.set_prop("centralServerVmId", AAZStrType, ".external.central_server_vm_id")

        disc_sap_install_without_os_config = _builder.get("{softwareInstallationType:SAPInstallWithoutOSConfig}")
        if disc_sap_install_without_os_config is not None:
            disc_sap_install_without_os_config.set_prop("bomUrl", AAZStrType, ".sap_install_without_os_config.bom_url", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_high_availability_software_configuration_update(disc_sap_install_without_os_config.set_prop("highAvailabilitySoftwareConfiguration", AAZObjectType, ".sap_install_without_os_config.high_availability_software_configuration"))
            disc_sap_install_without_os_config.set_prop("sapBitsStorageAccountId", AAZStrType, ".sap_install_without_os_config.sap_bits_storage_account_id", typ_kwargs={"flags": {"required": True}})
            disc_sap_install_without_os_config.set_prop("softwareVersion", AAZStrType, ".sap_install_without_os_config.software_version", typ_kwargs={"flags": {"required": True}})

        disc_service_initiated = _builder.get("{softwareInstallationType:ServiceInitiated}")
        if disc_service_initiated is not None:
            disc_service_initiated.set_prop("bomUrl", AAZStrType, ".service_initiated.bom_url", typ_kwargs={"flags": {"required": True}})
            cls._build_schema_high_availability_software_configuration_update(disc_service_initiated.set_prop("highAvailabilitySoftwareConfiguration", AAZObjectType, ".service_initiated.high_availability_software_configuration"))
            disc_service_initiated.set_prop("sapBitsStorageAccountId", AAZStrType, ".service_initiated.sap_bits_storage_account_id", typ_kwargs={"flags": {"required": True}})
            disc_service_initiated.set_prop("sapFqdn", AAZStrType, ".service_initiated.sap_fqdn", typ_kwargs={"flags": {"required": True}})
            disc_service_initiated.set_prop("softwareVersion", AAZStrType, ".service_initiated.software_version", typ_kwargs={"flags": {"required": True}})
            disc_service_initiated.set_prop("sshPrivateKey", AAZStrType, ".service_initiated.ssh_private_key", typ_kwargs={"flags": {"required": True}})

    @classmethod
    def _build_schema_virtual_machine_configuration_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("imageReference", AAZObjectType, ".image_reference", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("osProfile", AAZObjectType, ".os_profile", typ_kwargs={"flags": {"required": True}})
        _builder.set_prop("vmSize", AAZStrType, ".vm_size", typ_kwargs={"flags": {"required": True}})

        image_reference = _builder.get(".imageReference")
        if image_reference is not None:
            image_reference.set_prop("offer", AAZStrType, ".offer")
            image_reference.set_prop("publisher", AAZStrType, ".publisher")
            image_reference.set_prop("sku", AAZStrType, ".sku")
            image_reference.set_prop("version", AAZStrType, ".version")

        os_profile = _builder.get(".osProfile")
        if os_profile is not None:
            os_profile.set_prop("adminPassword", AAZStrType, ".admin_password")
            os_profile.set_prop("adminUsername", AAZStrType, ".admin_username")
            os_profile.set_prop("osConfiguration", AAZObjectType, ".os_configuration")

        os_configuration = _builder.get(".osProfile.osConfiguration")
        if os_configuration is not None:
            os_configuration.discriminate_by("osType", "Linux")

        disc_linux = _builder.get(".osProfile.osConfiguration{osType:Linux}")
        if disc_linux is not None:
            disc_linux.set_prop("disablePasswordAuthentication", AAZBoolType, ".linux.disable_password_authentication")
            disc_linux.set_prop("ssh", AAZObjectType, ".linux.ssh")
            disc_linux.set_prop("sshKeyPair", AAZObjectType, ".linux.ssh_key_pair")

        ssh = _builder.get(".osProfile.osConfiguration{osType:Linux}.ssh")
        if ssh is not None:
            ssh.set_prop("publicKeys", AAZListType, ".public_keys")

        public_keys = _builder.get(".osProfile.osConfiguration{osType:Linux}.ssh.publicKeys")
        if public_keys is not None:
            public_keys.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".osProfile.osConfiguration{osType:Linux}.ssh.publicKeys[]")
        if _elements is not None:
            _elements.set_prop("keyData", AAZStrType, "@VirtualMachineConfiguration_update.os_profile.os_configuration.linux.ssh.public_keys.[].key_data")

        ssh_key_pair = _builder.get(".osProfile.osConfiguration{osType:Linux}.sshKeyPair")
        if ssh_key_pair is not None:
            ssh_key_pair.set_prop("privateKey", AAZStrType, ".private_key")
            ssh_key_pair.set_prop("publicKey", AAZStrType, ".public_key")

    @classmethod
    def _build_schema_virtual_machine_resource_names_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("dataDiskNames", AAZDictType, ".data_disk_names")
        _builder.set_prop("hostName", AAZStrType, ".host_name")
        _builder.set_prop("networkInterfaces", AAZListType, ".network_interfaces")
        _builder.set_prop("osDiskName", AAZStrType, ".os_disk_name")
        _builder.set_prop("vmName", AAZStrType, ".vm_name")

        data_disk_names = _builder.get(".dataDiskNames")
        if data_disk_names is not None:
            data_disk_names.set_elements(AAZListType, ".")

        _elements = _builder.get(".dataDiskNames{}")
        if _elements is not None:
            _elements.set_elements(AAZStrType, ".")

        network_interfaces = _builder.get(".networkInterfaces")
        if network_interfaces is not None:
            network_interfaces.set_elements(AAZObjectType, ".")

        _elements = _builder.get(".networkInterfaces[]")
        if _elements is not None:
            _elements.set_prop("networkInterfaceName", AAZStrType, "@VirtualMachineResourceNames_update.network_interfaces.[].network_interface_name")

    _schema_disk_configuration_read = None

    @classmethod
    def _build_schema_disk_configuration_read(cls, _schema):
        if cls._schema_disk_configuration_read is not None:
            _schema.disk_volume_configurations = cls._schema_disk_configuration_read.disk_volume_configurations
            return

        cls._schema_disk_configuration_read = _schema_disk_configuration_read = AAZObjectType()

        disk_configuration_read = _schema_disk_configuration_read
        disk_configuration_read.disk_volume_configurations = AAZDictType(
            serialized_name="diskVolumeConfigurations",
        )

        disk_volume_configurations = _schema_disk_configuration_read.disk_volume_configurations
        disk_volume_configurations.Element = AAZObjectType()

        _element = _schema_disk_configuration_read.disk_volume_configurations.Element
        _element.count = AAZIntType()
        _element.size_gb = AAZIntType(
            serialized_name="sizeGB",
        )
        _element.sku = AAZObjectType()

        sku = _schema_disk_configuration_read.disk_volume_configurations.Element.sku
        sku.name = AAZStrType()

        _schema.disk_volume_configurations = cls._schema_disk_configuration_read.disk_volume_configurations

    _schema_error_definition_read = None

    @classmethod
    def _build_schema_error_definition_read(cls, _schema):
        if cls._schema_error_definition_read is not None:
            _schema.code = cls._schema_error_definition_read.code
            _schema.details = cls._schema_error_definition_read.details
            _schema.message = cls._schema_error_definition_read.message
            return

        cls._schema_error_definition_read = _schema_error_definition_read = AAZObjectType()

        error_definition_read = _schema_error_definition_read
        error_definition_read.code = AAZStrType(
            flags={"read_only": True},
        )
        error_definition_read.details = AAZListType(
            flags={"read_only": True},
        )
        error_definition_read.message = AAZStrType(
            flags={"read_only": True},
        )

        details = _schema_error_definition_read.details
        details.Element = AAZObjectType()
        cls._build_schema_error_definition_read(details.Element)

        _schema.code = cls._schema_error_definition_read.code
        _schema.details = cls._schema_error_definition_read.details
        _schema.message = cls._schema_error_definition_read.message

    _schema_high_availability_software_configuration_read = None

    @classmethod
    def _build_schema_high_availability_software_configuration_read(cls, _schema):
        if cls._schema_high_availability_software_configuration_read is not None:
            _schema.fencing_client_id = cls._schema_high_availability_software_configuration_read.fencing_client_id
            _schema.fencing_client_password = cls._schema_high_availability_software_configuration_read.fencing_client_password
            return

        cls._schema_high_availability_software_configuration_read = _schema_high_availability_software_configuration_read = AAZObjectType()

        high_availability_software_configuration_read = _schema_high_availability_software_configuration_read
        high_availability_software_configuration_read.fencing_client_id = AAZStrType(
            serialized_name="fencingClientId",
            flags={"required": True},
        )
        high_availability_software_configuration_read.fencing_client_password = AAZStrType(
            serialized_name="fencingClientPassword",
            flags={"required": True},
        )

        _schema.fencing_client_id = cls._schema_high_availability_software_configuration_read.fencing_client_id
        _schema.fencing_client_password = cls._schema_high_availability_software_configuration_read.fencing_client_password

    _schema_infrastructure_configuration_read = None

    @classmethod
    def _build_schema_infrastructure_configuration_read(cls, _schema):
        if cls._schema_infrastructure_configuration_read is not None:
            _schema.app_resource_group = cls._schema_infrastructure_configuration_read.app_resource_group
            _schema.deployment_type = cls._schema_infrastructure_configuration_read.deployment_type
            _schema.discriminate_by(
                "deployment_type",
                "SingleServer",
                cls._schema_infrastructure_configuration_read.discriminate_by(
                    "deployment_type",
                    "SingleServer",
                )
            )
            _schema.discriminate_by(
                "deployment_type",
                "ThreeTier",
                cls._schema_infrastructure_configuration_read.discriminate_by(
                    "deployment_type",
                    "ThreeTier",
                )
            )
            return

        cls._schema_infrastructure_configuration_read = _schema_infrastructure_configuration_read = AAZObjectType()

        infrastructure_configuration_read = _schema_infrastructure_configuration_read
        infrastructure_configuration_read.app_resource_group = AAZStrType(
            serialized_name="appResourceGroup",
            flags={"required": True},
        )
        infrastructure_configuration_read.deployment_type = AAZStrType(
            serialized_name="deploymentType",
            flags={"required": True},
        )

        disc_single_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "SingleServer")
        disc_single_server.custom_resource_names = AAZObjectType(
            serialized_name="customResourceNames",
        )
        disc_single_server.database_type = AAZStrType(
            serialized_name="databaseType",
        )
        disc_single_server.db_disk_configuration = AAZObjectType(
            serialized_name="dbDiskConfiguration",
        )
        cls._build_schema_disk_configuration_read(disc_single_server.db_disk_configuration)
        disc_single_server.network_configuration = AAZObjectType(
            serialized_name="networkConfiguration",
        )
        cls._build_schema_network_configuration_read(disc_single_server.network_configuration)
        disc_single_server.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )
        disc_single_server.virtual_machine_configuration = AAZObjectType(
            serialized_name="virtualMachineConfiguration",
            flags={"required": True},
        )
        cls._build_schema_virtual_machine_configuration_read(disc_single_server.virtual_machine_configuration)

        custom_resource_names = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "SingleServer").custom_resource_names
        custom_resource_names.naming_pattern_type = AAZStrType(
            serialized_name="namingPatternType",
            flags={"required": True},
        )

        disc_full_resource_name = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "SingleServer").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName")
        disc_full_resource_name.virtual_machine = AAZObjectType(
            serialized_name="virtualMachine",
        )
        cls._build_schema_virtual_machine_resource_names_read(disc_full_resource_name.virtual_machine)

        disc_three_tier = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier")
        disc_three_tier.application_server = AAZObjectType(
            serialized_name="applicationServer",
            flags={"required": True},
        )
        disc_three_tier.central_server = AAZObjectType(
            serialized_name="centralServer",
            flags={"required": True},
        )
        disc_three_tier.custom_resource_names = AAZObjectType(
            serialized_name="customResourceNames",
        )
        disc_three_tier.database_server = AAZObjectType(
            serialized_name="databaseServer",
            flags={"required": True},
        )
        disc_three_tier.high_availability_config = AAZObjectType(
            serialized_name="highAvailabilityConfig",
        )
        disc_three_tier.network_configuration = AAZObjectType(
            serialized_name="networkConfiguration",
        )
        cls._build_schema_network_configuration_read(disc_three_tier.network_configuration)
        disc_three_tier.storage_configuration = AAZObjectType(
            serialized_name="storageConfiguration",
        )

        application_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").application_server
        application_server.instance_count = AAZIntType(
            serialized_name="instanceCount",
            flags={"required": True},
        )
        application_server.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )
        application_server.virtual_machine_configuration = AAZObjectType(
            serialized_name="virtualMachineConfiguration",
            flags={"required": True},
        )
        cls._build_schema_virtual_machine_configuration_read(application_server.virtual_machine_configuration)

        central_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").central_server
        central_server.instance_count = AAZIntType(
            serialized_name="instanceCount",
            flags={"required": True},
        )
        central_server.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )
        central_server.virtual_machine_configuration = AAZObjectType(
            serialized_name="virtualMachineConfiguration",
            flags={"required": True},
        )
        cls._build_schema_virtual_machine_configuration_read(central_server.virtual_machine_configuration)

        custom_resource_names = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names
        custom_resource_names.naming_pattern_type = AAZStrType(
            serialized_name="namingPatternType",
            flags={"required": True},
        )

        disc_full_resource_name = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName")
        disc_full_resource_name.application_server = AAZObjectType(
            serialized_name="applicationServer",
        )
        disc_full_resource_name.central_server = AAZObjectType(
            serialized_name="centralServer",
        )
        disc_full_resource_name.database_server = AAZObjectType(
            serialized_name="databaseServer",
        )
        disc_full_resource_name.shared_storage = AAZObjectType(
            serialized_name="sharedStorage",
        )

        application_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").application_server
        application_server.availability_set_name = AAZStrType(
            serialized_name="availabilitySetName",
        )
        application_server.virtual_machines = AAZListType(
            serialized_name="virtualMachines",
        )

        virtual_machines = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").application_server.virtual_machines
        virtual_machines.Element = AAZObjectType()
        cls._build_schema_virtual_machine_resource_names_read(virtual_machines.Element)

        central_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").central_server
        central_server.availability_set_name = AAZStrType(
            serialized_name="availabilitySetName",
        )
        central_server.load_balancer = AAZObjectType(
            serialized_name="loadBalancer",
        )
        cls._build_schema_load_balancer_resource_names_read(central_server.load_balancer)
        central_server.virtual_machines = AAZListType(
            serialized_name="virtualMachines",
        )

        virtual_machines = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").central_server.virtual_machines
        virtual_machines.Element = AAZObjectType()
        cls._build_schema_virtual_machine_resource_names_read(virtual_machines.Element)

        database_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").database_server
        database_server.availability_set_name = AAZStrType(
            serialized_name="availabilitySetName",
        )
        database_server.load_balancer = AAZObjectType(
            serialized_name="loadBalancer",
        )
        cls._build_schema_load_balancer_resource_names_read(database_server.load_balancer)
        database_server.virtual_machines = AAZListType(
            serialized_name="virtualMachines",
        )

        virtual_machines = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").database_server.virtual_machines
        virtual_machines.Element = AAZObjectType()
        cls._build_schema_virtual_machine_resource_names_read(virtual_machines.Element)

        shared_storage = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").custom_resource_names.discriminate_by("naming_pattern_type", "FullResourceName").shared_storage
        shared_storage.shared_storage_account_name = AAZStrType(
            serialized_name="sharedStorageAccountName",
        )
        shared_storage.shared_storage_account_private_end_point_name = AAZStrType(
            serialized_name="sharedStorageAccountPrivateEndPointName",
        )

        database_server = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").database_server
        database_server.database_type = AAZStrType(
            serialized_name="databaseType",
        )
        database_server.disk_configuration = AAZObjectType(
            serialized_name="diskConfiguration",
        )
        cls._build_schema_disk_configuration_read(database_server.disk_configuration)
        database_server.instance_count = AAZIntType(
            serialized_name="instanceCount",
            flags={"required": True},
        )
        database_server.subnet_id = AAZStrType(
            serialized_name="subnetId",
            flags={"required": True},
        )
        database_server.virtual_machine_configuration = AAZObjectType(
            serialized_name="virtualMachineConfiguration",
            flags={"required": True},
        )
        cls._build_schema_virtual_machine_configuration_read(database_server.virtual_machine_configuration)

        high_availability_config = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").high_availability_config
        high_availability_config.high_availability_type = AAZStrType(
            serialized_name="highAvailabilityType",
            flags={"required": True},
        )

        storage_configuration = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").storage_configuration
        storage_configuration.transport_file_share_configuration = AAZObjectType(
            serialized_name="transportFileShareConfiguration",
        )

        transport_file_share_configuration = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").storage_configuration.transport_file_share_configuration
        transport_file_share_configuration.configuration_type = AAZStrType(
            serialized_name="configurationType",
            flags={"required": True},
        )

        disc_create_and_mount = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").storage_configuration.transport_file_share_configuration.discriminate_by("configuration_type", "CreateAndMount")
        disc_create_and_mount.resource_group = AAZStrType(
            serialized_name="resourceGroup",
        )
        disc_create_and_mount.storage_account_name = AAZStrType(
            serialized_name="storageAccountName",
        )

        disc_mount = _schema_infrastructure_configuration_read.discriminate_by("deployment_type", "ThreeTier").storage_configuration.transport_file_share_configuration.discriminate_by("configuration_type", "Mount")
        disc_mount.id = AAZStrType(
            flags={"required": True},
        )
        disc_mount.private_endpoint_id = AAZStrType(
            serialized_name="privateEndpointId",
            flags={"required": True},
        )

        _schema.app_resource_group = cls._schema_infrastructure_configuration_read.app_resource_group
        _schema.deployment_type = cls._schema_infrastructure_configuration_read.deployment_type
        _schema.discriminate_by(
                "deployment_type",
                "SingleServer",
                cls._schema_infrastructure_configuration_read.discriminate_by(
                    "deployment_type",
                    "SingleServer",
                )
            )
        _schema.discriminate_by(
                "deployment_type",
                "ThreeTier",
                cls._schema_infrastructure_configuration_read.discriminate_by(
                    "deployment_type",
                    "ThreeTier",
                )
            )

    _schema_load_balancer_resource_names_read = None

    @classmethod
    def _build_schema_load_balancer_resource_names_read(cls, _schema):
        if cls._schema_load_balancer_resource_names_read is not None:
            _schema.backend_pool_names = cls._schema_load_balancer_resource_names_read.backend_pool_names
            _schema.frontend_ip_configuration_names = cls._schema_load_balancer_resource_names_read.frontend_ip_configuration_names
            _schema.health_probe_names = cls._schema_load_balancer_resource_names_read.health_probe_names
            _schema.load_balancer_name = cls._schema_load_balancer_resource_names_read.load_balancer_name
            return

        cls._schema_load_balancer_resource_names_read = _schema_load_balancer_resource_names_read = AAZObjectType()

        load_balancer_resource_names_read = _schema_load_balancer_resource_names_read
        load_balancer_resource_names_read.backend_pool_names = AAZListType(
            serialized_name="backendPoolNames",
        )
        load_balancer_resource_names_read.frontend_ip_configuration_names = AAZListType(
            serialized_name="frontendIpConfigurationNames",
        )
        load_balancer_resource_names_read.health_probe_names = AAZListType(
            serialized_name="healthProbeNames",
        )
        load_balancer_resource_names_read.load_balancer_name = AAZStrType(
            serialized_name="loadBalancerName",
        )

        backend_pool_names = _schema_load_balancer_resource_names_read.backend_pool_names
        backend_pool_names.Element = AAZStrType()

        frontend_ip_configuration_names = _schema_load_balancer_resource_names_read.frontend_ip_configuration_names
        frontend_ip_configuration_names.Element = AAZStrType()

        health_probe_names = _schema_load_balancer_resource_names_read.health_probe_names
        health_probe_names.Element = AAZStrType()

        _schema.backend_pool_names = cls._schema_load_balancer_resource_names_read.backend_pool_names
        _schema.frontend_ip_configuration_names = cls._schema_load_balancer_resource_names_read.frontend_ip_configuration_names
        _schema.health_probe_names = cls._schema_load_balancer_resource_names_read.health_probe_names
        _schema.load_balancer_name = cls._schema_load_balancer_resource_names_read.load_balancer_name

    _schema_network_configuration_read = None

    @classmethod
    def _build_schema_network_configuration_read(cls, _schema):
        if cls._schema_network_configuration_read is not None:
            _schema.is_secondary_ip_enabled = cls._schema_network_configuration_read.is_secondary_ip_enabled
            return

        cls._schema_network_configuration_read = _schema_network_configuration_read = AAZObjectType()

        network_configuration_read = _schema_network_configuration_read
        network_configuration_read.is_secondary_ip_enabled = AAZBoolType(
            serialized_name="isSecondaryIpEnabled",
        )

        _schema.is_secondary_ip_enabled = cls._schema_network_configuration_read.is_secondary_ip_enabled

    _schema_sap_virtual_instance_read = None

    @classmethod
    def _build_schema_sap_virtual_instance_read(cls, _schema):
        if cls._schema_sap_virtual_instance_read is not None:
            _schema.id = cls._schema_sap_virtual_instance_read.id
            _schema.identity = cls._schema_sap_virtual_instance_read.identity
            _schema.location = cls._schema_sap_virtual_instance_read.location
            _schema.name = cls._schema_sap_virtual_instance_read.name
            _schema.properties = cls._schema_sap_virtual_instance_read.properties
            _schema.system_data = cls._schema_sap_virtual_instance_read.system_data
            _schema.tags = cls._schema_sap_virtual_instance_read.tags
            _schema.type = cls._schema_sap_virtual_instance_read.type
            return

        cls._schema_sap_virtual_instance_read = _schema_sap_virtual_instance_read = AAZObjectType()

        sap_virtual_instance_read = _schema_sap_virtual_instance_read
        sap_virtual_instance_read.id = AAZStrType(
            flags={"read_only": True},
        )
        sap_virtual_instance_read.identity = AAZObjectType()
        sap_virtual_instance_read.location = AAZStrType(
            flags={"required": True},
        )
        sap_virtual_instance_read.name = AAZStrType(
            flags={"read_only": True},
        )
        sap_virtual_instance_read.properties = AAZObjectType(
            flags={"required": True, "client_flatten": True},
        )
        sap_virtual_instance_read.system_data = AAZObjectType(
            serialized_name="systemData",
            flags={"read_only": True},
        )
        sap_virtual_instance_read.tags = AAZDictType()
        sap_virtual_instance_read.type = AAZStrType(
            flags={"read_only": True},
        )

        identity = _schema_sap_virtual_instance_read.identity
        identity.type = AAZStrType(
            flags={"required": True},
        )
        identity.user_assigned_identities = AAZDictType(
            serialized_name="userAssignedIdentities",
        )

        user_assigned_identities = _schema_sap_virtual_instance_read.identity.user_assigned_identities
        user_assigned_identities.Element = AAZObjectType()

        _element = _schema_sap_virtual_instance_read.identity.user_assigned_identities.Element
        _element.client_id = AAZStrType(
            serialized_name="clientId",
            flags={"read_only": True},
        )
        _element.principal_id = AAZStrType(
            serialized_name="principalId",
            flags={"read_only": True},
        )

        properties = _schema_sap_virtual_instance_read.properties
        properties.configuration = AAZObjectType(
            flags={"required": True},
        )
        properties.environment = AAZStrType(
            flags={"required": True},
        )
        properties.errors = AAZObjectType()
        properties.health = AAZStrType()
        properties.managed_resource_group_configuration = AAZObjectType(
            serialized_name="managedResourceGroupConfiguration",
        )
        properties.provisioning_state = AAZStrType(
            serialized_name="provisioningState",
            flags={"read_only": True},
        )
        properties.sap_product = AAZStrType(
            serialized_name="sapProduct",
            flags={"required": True},
        )
        properties.state = AAZStrType()
        properties.status = AAZStrType()

        configuration = _schema_sap_virtual_instance_read.properties.configuration
        configuration.configuration_type = AAZStrType(
            serialized_name="configurationType",
            flags={"required": True},
        )

        disc_deployment = _schema_sap_virtual_instance_read.properties.configuration.discriminate_by("configuration_type", "Deployment")
        disc_deployment.app_location = AAZStrType(
            serialized_name="appLocation",
        )
        disc_deployment.infrastructure_configuration = AAZObjectType(
            serialized_name="infrastructureConfiguration",
        )
        cls._build_schema_infrastructure_configuration_read(disc_deployment.infrastructure_configuration)
        disc_deployment.software_configuration = AAZObjectType(
            serialized_name="softwareConfiguration",
        )
        cls._build_schema_software_configuration_read(disc_deployment.software_configuration)

        disc_deployment_with_os_config = _schema_sap_virtual_instance_read.properties.configuration.discriminate_by("configuration_type", "DeploymentWithOSConfig")
        disc_deployment_with_os_config.app_location = AAZStrType(
            serialized_name="appLocation",
        )
        disc_deployment_with_os_config.infrastructure_configuration = AAZObjectType(
            serialized_name="infrastructureConfiguration",
        )
        cls._build_schema_infrastructure_configuration_read(disc_deployment_with_os_config.infrastructure_configuration)
        disc_deployment_with_os_config.os_sap_configuration = AAZObjectType(
            serialized_name="osSapConfiguration",
        )
        disc_deployment_with_os_config.software_configuration = AAZObjectType(
            serialized_name="softwareConfiguration",
        )
        cls._build_schema_software_configuration_read(disc_deployment_with_os_config.software_configuration)

        os_sap_configuration = _schema_sap_virtual_instance_read.properties.configuration.discriminate_by("configuration_type", "DeploymentWithOSConfig").os_sap_configuration
        os_sap_configuration.deployer_vm_packages = AAZObjectType(
            serialized_name="deployerVmPackages",
        )
        os_sap_configuration.sap_fqdn = AAZStrType(
            serialized_name="sapFqdn",
        )

        deployer_vm_packages = _schema_sap_virtual_instance_read.properties.configuration.discriminate_by("configuration_type", "DeploymentWithOSConfig").os_sap_configuration.deployer_vm_packages
        deployer_vm_packages.storage_account_id = AAZStrType(
            serialized_name="storageAccountId",
        )
        deployer_vm_packages.url = AAZStrType()

        disc_discovery = _schema_sap_virtual_instance_read.properties.configuration.discriminate_by("configuration_type", "Discovery")
        disc_discovery.app_location = AAZStrType(
            serialized_name="appLocation",
            flags={"read_only": True},
        )
        disc_discovery.central_server_vm_id = AAZStrType(
            serialized_name="centralServerVmId",
        )
        disc_discovery.managed_rg_storage_account_name = AAZStrType(
            serialized_name="managedRgStorageAccountName",
        )

        errors = _schema_sap_virtual_instance_read.properties.errors
        errors.properties = AAZObjectType()
        cls._build_schema_error_definition_read(errors.properties)

        managed_resource_group_configuration = _schema_sap_virtual_instance_read.properties.managed_resource_group_configuration
        managed_resource_group_configuration.name = AAZStrType()

        system_data = _schema_sap_virtual_instance_read.system_data
        system_data.created_at = AAZStrType(
            serialized_name="createdAt",
        )
        system_data.created_by = AAZStrType(
            serialized_name="createdBy",
        )
        system_data.created_by_type = AAZStrType(
            serialized_name="createdByType",
        )
        system_data.last_modified_at = AAZStrType(
            serialized_name="lastModifiedAt",
        )
        system_data.last_modified_by = AAZStrType(
            serialized_name="lastModifiedBy",
        )
        system_data.last_modified_by_type = AAZStrType(
            serialized_name="lastModifiedByType",
        )

        tags = _schema_sap_virtual_instance_read.tags
        tags.Element = AAZStrType()

        _schema.id = cls._schema_sap_virtual_instance_read.id
        _schema.identity = cls._schema_sap_virtual_instance_read.identity
        _schema.location = cls._schema_sap_virtual_instance_read.location
        _schema.name = cls._schema_sap_virtual_instance_read.name
        _schema.properties = cls._schema_sap_virtual_instance_read.properties
        _schema.system_data = cls._schema_sap_virtual_instance_read.system_data
        _schema.tags = cls._schema_sap_virtual_instance_read.tags
        _schema.type = cls._schema_sap_virtual_instance_read.type

    _schema_software_configuration_read = None

    @classmethod
    def _build_schema_software_configuration_read(cls, _schema):
        if cls._schema_software_configuration_read is not None:
            _schema.software_installation_type = cls._schema_software_configuration_read.software_installation_type
            _schema.discriminate_by(
                "software_installation_type",
                "External",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "External",
                )
            )
            _schema.discriminate_by(
                "software_installation_type",
                "SAPInstallWithoutOSConfig",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "SAPInstallWithoutOSConfig",
                )
            )
            _schema.discriminate_by(
                "software_installation_type",
                "ServiceInitiated",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "ServiceInitiated",
                )
            )
            return

        cls._schema_software_configuration_read = _schema_software_configuration_read = AAZObjectType()

        software_configuration_read = _schema_software_configuration_read
        software_configuration_read.software_installation_type = AAZStrType(
            serialized_name="softwareInstallationType",
            flags={"required": True},
        )

        disc_external = _schema_software_configuration_read.discriminate_by("software_installation_type", "External")
        disc_external.central_server_vm_id = AAZStrType(
            serialized_name="centralServerVmId",
        )

        disc_sap_install_without_os_config = _schema_software_configuration_read.discriminate_by("software_installation_type", "SAPInstallWithoutOSConfig")
        disc_sap_install_without_os_config.bom_url = AAZStrType(
            serialized_name="bomUrl",
            flags={"required": True},
        )
        disc_sap_install_without_os_config.high_availability_software_configuration = AAZObjectType(
            serialized_name="highAvailabilitySoftwareConfiguration",
        )
        cls._build_schema_high_availability_software_configuration_read(disc_sap_install_without_os_config.high_availability_software_configuration)
        disc_sap_install_without_os_config.sap_bits_storage_account_id = AAZStrType(
            serialized_name="sapBitsStorageAccountId",
            flags={"required": True},
        )
        disc_sap_install_without_os_config.software_version = AAZStrType(
            serialized_name="softwareVersion",
            flags={"required": True},
        )

        disc_service_initiated = _schema_software_configuration_read.discriminate_by("software_installation_type", "ServiceInitiated")
        disc_service_initiated.bom_url = AAZStrType(
            serialized_name="bomUrl",
            flags={"required": True},
        )
        disc_service_initiated.high_availability_software_configuration = AAZObjectType(
            serialized_name="highAvailabilitySoftwareConfiguration",
        )
        cls._build_schema_high_availability_software_configuration_read(disc_service_initiated.high_availability_software_configuration)
        disc_service_initiated.sap_bits_storage_account_id = AAZStrType(
            serialized_name="sapBitsStorageAccountId",
            flags={"required": True},
        )
        disc_service_initiated.sap_fqdn = AAZStrType(
            serialized_name="sapFqdn",
            flags={"required": True},
        )
        disc_service_initiated.software_version = AAZStrType(
            serialized_name="softwareVersion",
            flags={"required": True},
        )
        disc_service_initiated.ssh_private_key = AAZStrType(
            serialized_name="sshPrivateKey",
            flags={"required": True},
        )

        _schema.software_installation_type = cls._schema_software_configuration_read.software_installation_type
        _schema.discriminate_by(
                "software_installation_type",
                "External",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "External",
                )
            )
        _schema.discriminate_by(
                "software_installation_type",
                "SAPInstallWithoutOSConfig",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "SAPInstallWithoutOSConfig",
                )
            )
        _schema.discriminate_by(
                "software_installation_type",
                "ServiceInitiated",
                cls._schema_software_configuration_read.discriminate_by(
                    "software_installation_type",
                    "ServiceInitiated",
                )
            )

    _schema_virtual_machine_configuration_read = None

    @classmethod
    def _build_schema_virtual_machine_configuration_read(cls, _schema):
        if cls._schema_virtual_machine_configuration_read is not None:
            _schema.image_reference = cls._schema_virtual_machine_configuration_read.image_reference
            _schema.os_profile = cls._schema_virtual_machine_configuration_read.os_profile
            _schema.vm_size = cls._schema_virtual_machine_configuration_read.vm_size
            return

        cls._schema_virtual_machine_configuration_read = _schema_virtual_machine_configuration_read = AAZObjectType()

        virtual_machine_configuration_read = _schema_virtual_machine_configuration_read
        virtual_machine_configuration_read.image_reference = AAZObjectType(
            serialized_name="imageReference",
            flags={"required": True},
        )
        virtual_machine_configuration_read.os_profile = AAZObjectType(
            serialized_name="osProfile",
            flags={"required": True},
        )
        virtual_machine_configuration_read.vm_size = AAZStrType(
            serialized_name="vmSize",
            flags={"required": True},
        )

        image_reference = _schema_virtual_machine_configuration_read.image_reference
        image_reference.offer = AAZStrType()
        image_reference.publisher = AAZStrType()
        image_reference.sku = AAZStrType()
        image_reference.version = AAZStrType()

        os_profile = _schema_virtual_machine_configuration_read.os_profile
        os_profile.admin_password = AAZStrType(
            serialized_name="adminPassword",
        )
        os_profile.admin_username = AAZStrType(
            serialized_name="adminUsername",
        )
        os_profile.os_configuration = AAZObjectType(
            serialized_name="osConfiguration",
        )

        os_configuration = _schema_virtual_machine_configuration_read.os_profile.os_configuration
        os_configuration.os_type = AAZStrType(
            serialized_name="osType",
            flags={"required": True},
        )

        disc_linux = _schema_virtual_machine_configuration_read.os_profile.os_configuration.discriminate_by("os_type", "Linux")
        disc_linux.disable_password_authentication = AAZBoolType(
            serialized_name="disablePasswordAuthentication",
        )
        disc_linux.ssh = AAZObjectType()
        disc_linux.ssh_key_pair = AAZObjectType(
            serialized_name="sshKeyPair",
        )

        ssh = _schema_virtual_machine_configuration_read.os_profile.os_configuration.discriminate_by("os_type", "Linux").ssh
        ssh.public_keys = AAZListType(
            serialized_name="publicKeys",
        )

        public_keys = _schema_virtual_machine_configuration_read.os_profile.os_configuration.discriminate_by("os_type", "Linux").ssh.public_keys
        public_keys.Element = AAZObjectType()

        _element = _schema_virtual_machine_configuration_read.os_profile.os_configuration.discriminate_by("os_type", "Linux").ssh.public_keys.Element
        _element.key_data = AAZStrType(
            serialized_name="keyData",
        )

        ssh_key_pair = _schema_virtual_machine_configuration_read.os_profile.os_configuration.discriminate_by("os_type", "Linux").ssh_key_pair
        ssh_key_pair.private_key = AAZStrType(
            serialized_name="privateKey",
        )
        ssh_key_pair.public_key = AAZStrType(
            serialized_name="publicKey",
        )

        _schema.image_reference = cls._schema_virtual_machine_configuration_read.image_reference
        _schema.os_profile = cls._schema_virtual_machine_configuration_read.os_profile
        _schema.vm_size = cls._schema_virtual_machine_configuration_read.vm_size

    _schema_virtual_machine_resource_names_read = None

    @classmethod
    def _build_schema_virtual_machine_resource_names_read(cls, _schema):
        if cls._schema_virtual_machine_resource_names_read is not None:
            _schema.data_disk_names = cls._schema_virtual_machine_resource_names_read.data_disk_names
            _schema.host_name = cls._schema_virtual_machine_resource_names_read.host_name
            _schema.network_interfaces = cls._schema_virtual_machine_resource_names_read.network_interfaces
            _schema.os_disk_name = cls._schema_virtual_machine_resource_names_read.os_disk_name
            _schema.vm_name = cls._schema_virtual_machine_resource_names_read.vm_name
            return

        cls._schema_virtual_machine_resource_names_read = _schema_virtual_machine_resource_names_read = AAZObjectType()

        virtual_machine_resource_names_read = _schema_virtual_machine_resource_names_read
        virtual_machine_resource_names_read.data_disk_names = AAZDictType(
            serialized_name="dataDiskNames",
        )
        virtual_machine_resource_names_read.host_name = AAZStrType(
            serialized_name="hostName",
        )
        virtual_machine_resource_names_read.network_interfaces = AAZListType(
            serialized_name="networkInterfaces",
        )
        virtual_machine_resource_names_read.os_disk_name = AAZStrType(
            serialized_name="osDiskName",
        )
        virtual_machine_resource_names_read.vm_name = AAZStrType(
            serialized_name="vmName",
        )

        data_disk_names = _schema_virtual_machine_resource_names_read.data_disk_names
        data_disk_names.Element = AAZListType()

        _element = _schema_virtual_machine_resource_names_read.data_disk_names.Element
        _element.Element = AAZStrType()

        network_interfaces = _schema_virtual_machine_resource_names_read.network_interfaces
        network_interfaces.Element = AAZObjectType()

        _element = _schema_virtual_machine_resource_names_read.network_interfaces.Element
        _element.network_interface_name = AAZStrType(
            serialized_name="networkInterfaceName",
        )

        _schema.data_disk_names = cls._schema_virtual_machine_resource_names_read.data_disk_names
        _schema.host_name = cls._schema_virtual_machine_resource_names_read.host_name
        _schema.network_interfaces = cls._schema_virtual_machine_resource_names_read.network_interfaces
        _schema.os_disk_name = cls._schema_virtual_machine_resource_names_read.os_disk_name
        _schema.vm_name = cls._schema_virtual_machine_resource_names_read.vm_name


__all__ = ["Update"]
