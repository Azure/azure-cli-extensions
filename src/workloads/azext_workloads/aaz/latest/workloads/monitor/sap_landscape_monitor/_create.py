# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "workloads monitor sap-landscape-monitor create",
    is_preview=True,
)
class Create(AAZCommand):
    """Create a SAP Landscape Monitor Dashboard for the specified subscription, resource group, and resource name.

    :example: Create a SAP Landscape Monitor Dashboard for the specified subscription, resource group, and resource name.
        az workloads monitor sap-landscape-monitor create -g <RG-NAME> --monitor-name <monitor-name> --grouping <grouping- details>
    """

    _aaz_info = {
        "version": "2023-04-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.workloads/monitors/{}/saplandscapemonitor/default", "2023-04-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.monitor_name = AAZStrArg(
            options=["--monitor-name"],
            help="Name of the SAP monitor resource.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.grouping = AAZObjectArg(
            options=["--grouping"],
            arg_group="Properties",
            help="Gets or sets the SID groupings by landscape and Environment.",
        )
        _args_schema.top_metrics_thresholds = AAZListArg(
            options=["--top-metrics-thresholds"],
            arg_group="Properties",
            help="Gets or sets the list Top Metric Thresholds for SAP Landscape Monitor Dashboard",
            fmt=AAZListArgFormat(
                max_length=50,
            ),
        )

        grouping = cls._args_schema.grouping
        grouping.landscape = AAZListArg(
            options=["landscape"],
            help="Gets or sets the list of landscape to SID mappings.",
            fmt=AAZListArgFormat(
                max_length=50,
            ),
        )
        grouping.sap_application = AAZListArg(
            options=["sap-application"],
            help="Gets or sets the list of Sap Applications to SID mappings.",
            fmt=AAZListArgFormat(
                max_length=50,
            ),
        )

        landscape = cls._args_schema.grouping.landscape
        landscape.Element = AAZObjectArg()
        cls._build_args_sap_landscape_monitor_sid_mapping_create(landscape.Element)

        sap_application = cls._args_schema.grouping.sap_application
        sap_application.Element = AAZObjectArg()
        cls._build_args_sap_landscape_monitor_sid_mapping_create(sap_application.Element)

        top_metrics_thresholds = cls._args_schema.top_metrics_thresholds
        top_metrics_thresholds.Element = AAZObjectArg()

        _element = cls._args_schema.top_metrics_thresholds.Element
        _element.green = AAZFloatArg(
            options=["green"],
            help="Gets or sets the threshold value for Green.",
        )
        _element.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the name of the threshold.",
        )
        _element.red = AAZFloatArg(
            options=["red"],
            help="Gets or sets the threshold value for Red.",
        )
        _element.yellow = AAZFloatArg(
            options=["yellow"],
            help="Gets or sets the threshold value for Yellow.",
        )
        return cls._args_schema

    _args_sap_landscape_monitor_sid_mapping_create = None

    @classmethod
    def _build_args_sap_landscape_monitor_sid_mapping_create(cls, _schema):
        if cls._args_sap_landscape_monitor_sid_mapping_create is not None:
            _schema.name = cls._args_sap_landscape_monitor_sid_mapping_create.name
            _schema.top_sid = cls._args_sap_landscape_monitor_sid_mapping_create.top_sid
            return

        cls._args_sap_landscape_monitor_sid_mapping_create = AAZObjectArg()

        sap_landscape_monitor_sid_mapping_create = cls._args_sap_landscape_monitor_sid_mapping_create
        sap_landscape_monitor_sid_mapping_create.name = AAZStrArg(
            options=["name"],
            help="Gets or sets the name of the grouping.",
        )
        sap_landscape_monitor_sid_mapping_create.top_sid = AAZListArg(
            options=["top-sid"],
            help="Gets or sets the list of SID's.",
            fmt=AAZListArgFormat(
                max_length=50,
            ),
        )

        top_sid = cls._args_sap_landscape_monitor_sid_mapping_create.top_sid
        top_sid.Element = AAZStrArg()

        _schema.name = cls._args_sap_landscape_monitor_sid_mapping_create.name
        _schema.top_sid = cls._args_sap_landscape_monitor_sid_mapping_create.top_sid

    def _execute_operations(self):
        self.pre_operations()
        self.SapLandscapeMonitorCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class SapLandscapeMonitorCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200, 201]:
                return self.on_200_201(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/monitors/{monitorName}/sapLandscapeMonitor/default",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "monitorName", self.ctx.args.monitor_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2023-04-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, typ_kwargs={"flags": {"client_flatten": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("grouping", AAZObjectType, ".grouping")
                properties.set_prop("topMetricsThresholds", AAZListType, ".top_metrics_thresholds")

            grouping = _builder.get(".properties.grouping")
            if grouping is not None:
                grouping.set_prop("landscape", AAZListType, ".landscape")
                grouping.set_prop("sapApplication", AAZListType, ".sap_application")

            landscape = _builder.get(".properties.grouping.landscape")
            if landscape is not None:
                _CreateHelper._build_schema_sap_landscape_monitor_sid_mapping_create(landscape.set_elements(AAZObjectType, "."))

            sap_application = _builder.get(".properties.grouping.sapApplication")
            if sap_application is not None:
                _CreateHelper._build_schema_sap_landscape_monitor_sid_mapping_create(sap_application.set_elements(AAZObjectType, "."))

            top_metrics_thresholds = _builder.get(".properties.topMetricsThresholds")
            if top_metrics_thresholds is not None:
                top_metrics_thresholds.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.topMetricsThresholds[]")
            if _elements is not None:
                _elements.set_prop("green", AAZFloatType, ".green")
                _elements.set_prop("name", AAZStrType, ".name")
                _elements.set_prop("red", AAZFloatType, ".red")
                _elements.set_prop("yellow", AAZFloatType, ".yellow")

            return self.serialize_content(_content_value)

        def on_200_201(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200_201
            )

        _schema_on_200_201 = None

        @classmethod
        def _build_schema_on_200_201(cls):
            if cls._schema_on_200_201 is not None:
                return cls._schema_on_200_201

            cls._schema_on_200_201 = AAZObjectType()

            _schema_on_200_201 = cls._schema_on_200_201
            _schema_on_200_201.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200_201.properties = AAZObjectType(
                flags={"client_flatten": True},
            )
            _schema_on_200_201.system_data = AAZObjectType(
                serialized_name="systemData",
                flags={"read_only": True},
            )
            _schema_on_200_201.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200_201.properties
            properties.grouping = AAZObjectType()
            properties.provisioning_state = AAZStrType(
                serialized_name="provisioningState",
                flags={"read_only": True},
            )
            properties.top_metrics_thresholds = AAZListType(
                serialized_name="topMetricsThresholds",
            )

            grouping = cls._schema_on_200_201.properties.grouping
            grouping.landscape = AAZListType()
            grouping.sap_application = AAZListType(
                serialized_name="sapApplication",
            )

            landscape = cls._schema_on_200_201.properties.grouping.landscape
            landscape.Element = AAZObjectType()
            _CreateHelper._build_schema_sap_landscape_monitor_sid_mapping_read(landscape.Element)

            sap_application = cls._schema_on_200_201.properties.grouping.sap_application
            sap_application.Element = AAZObjectType()
            _CreateHelper._build_schema_sap_landscape_monitor_sid_mapping_read(sap_application.Element)

            top_metrics_thresholds = cls._schema_on_200_201.properties.top_metrics_thresholds
            top_metrics_thresholds.Element = AAZObjectType()

            _element = cls._schema_on_200_201.properties.top_metrics_thresholds.Element
            _element.green = AAZFloatType()
            _element.name = AAZStrType()
            _element.red = AAZFloatType()
            _element.yellow = AAZFloatType()

            system_data = cls._schema_on_200_201.system_data
            system_data.created_at = AAZStrType(
                serialized_name="createdAt",
            )
            system_data.created_by = AAZStrType(
                serialized_name="createdBy",
            )
            system_data.created_by_type = AAZStrType(
                serialized_name="createdByType",
            )
            system_data.last_modified_at = AAZStrType(
                serialized_name="lastModifiedAt",
            )
            system_data.last_modified_by = AAZStrType(
                serialized_name="lastModifiedBy",
            )
            system_data.last_modified_by_type = AAZStrType(
                serialized_name="lastModifiedByType",
            )

            return cls._schema_on_200_201


class _CreateHelper:
    """Helper class for Create"""

    @classmethod
    def _build_schema_sap_landscape_monitor_sid_mapping_create(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("name", AAZStrType, ".name")
        _builder.set_prop("topSid", AAZListType, ".top_sid")

        top_sid = _builder.get(".topSid")
        if top_sid is not None:
            top_sid.set_elements(AAZStrType, ".")

    _schema_sap_landscape_monitor_sid_mapping_read = None

    @classmethod
    def _build_schema_sap_landscape_monitor_sid_mapping_read(cls, _schema):
        if cls._schema_sap_landscape_monitor_sid_mapping_read is not None:
            _schema.name = cls._schema_sap_landscape_monitor_sid_mapping_read.name
            _schema.top_sid = cls._schema_sap_landscape_monitor_sid_mapping_read.top_sid
            return

        cls._schema_sap_landscape_monitor_sid_mapping_read = _schema_sap_landscape_monitor_sid_mapping_read = AAZObjectType()

        sap_landscape_monitor_sid_mapping_read = _schema_sap_landscape_monitor_sid_mapping_read
        sap_landscape_monitor_sid_mapping_read.name = AAZStrType()
        sap_landscape_monitor_sid_mapping_read.top_sid = AAZListType(
            serialized_name="topSid",
        )

        top_sid = _schema_sap_landscape_monitor_sid_mapping_read.top_sid
        top_sid.Element = AAZStrType()

        _schema.name = cls._schema_sap_landscape_monitor_sid_mapping_read.name
        _schema.top_sid = cls._schema_sap_landscape_monitor_sid_mapping_read.top_sid


__all__ = ["Create"]
