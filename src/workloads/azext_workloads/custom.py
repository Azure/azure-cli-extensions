# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements, protected-access

from knack.log import get_logger

from azure.cli.core.aaz import has_value
from azext_workloads.aaz.latest.workloads.sap_virtual_instance import Create as _SVICreate

logger = get_logger(__name__)


class SVICreate(_SVICreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFreeFormDictArg, AAZFreeFormDictArgFormat, \
            AAZResourceIdArg, AAZResourceIdArgFormat, AAZStrArg, AAZStrArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.configuration = AAZFreeFormDictArg(
            options=["--configuration"],
            help="Path to the configuration file.",
            fmt=AAZFreeFormDictArgFormat()
        )
        args_schema.discovery = AAZResourceIdArg(
            options=["--central-server-vm"],
            help="The virtual machine ID or name of the Central Server.",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.Compute/virtualMachines/{}")
        )
        args_schema.mrgstracc = AAZStrArg(
            options=["--managed-rg-sa-name"],
            help="The custom storage account name for the storage account created by the service " +
                 "in the managed resource group created as part of VIS deployment.",
            fmt=AAZStrArgFormat()
        )
        args_schema.configuration_org._registered = False
        args_schema.discovery_org._registered = False
        return args_schema

    @classmethod
    def _build_args_virtual_machine_configuration_create(cls, _schema):
        from azure.cli.core.aaz import AAZObjectArg, AAZStrArg, AAZResourceIdArg, \
            AAZPasswordArg, AAZBoolArg, AAZListArg, AAZPromptPasswordInput
        if cls._args_virtual_machine_configuration_create is not None:
            _schema.image_reference = cls._args_virtual_machine_configuration_create.image_reference
            _schema.os_profile = cls._args_virtual_machine_configuration_create.os_profile
            _schema.vm_size = cls._args_virtual_machine_configuration_create.vm_size
            return

        cls._args_virtual_machine_configuration_create = AAZObjectArg()

        virtual_machine_configuration_create = cls._args_virtual_machine_configuration_create
        virtual_machine_configuration_create.image_reference = AAZObjectArg(
            options=["image-reference"],
            help="The image reference.",
            required=True,
        )
        virtual_machine_configuration_create.os_profile = AAZObjectArg(
            options=["os-profile"],
            help="The OS profile.",
            required=True,
        )
        virtual_machine_configuration_create.vm_size = AAZStrArg(
            options=["vm-size"],
            help="The virtual machine size.",
            required=True,
        )

        image_reference = cls._args_virtual_machine_configuration_create.image_reference
        image_reference.id = AAZResourceIdArg(
            options=["id"],
            help="Specifies the ARM resource ID of the Azure Compute Gallery image version \
                used for creating ACSS VMs. You will need to provide this input when you \
                choose to deploy virtual machines in ACSS with OS image from the Azure Compute gallery.",
        )
        image_reference.offer = AAZStrArg(
            options=["offer"],
            help="Specifies the offer of the platform image or marketplace image used to create the virtual machine.",
        )
        image_reference.publisher = AAZStrArg(
            options=["publisher"],
            help="The image publisher.",
        )
        image_reference.sku = AAZStrArg(
            options=["sku"],
            help="The image SKU.",
        )
        image_reference.version = AAZStrArg(
            options=["version"],
            help="Specifies the version of the platform image or marketplace image used to \
                create the virtual machine. The allowed formats are Major.Minor.Build or 'latest'. \
                Major, Minor, and Build are decimal numbers. Specify 'latest' to use the latest \
                version of an image available at deploy time. Even if you use 'latest', \
                the VM image will not automatically update after deploy time even if a \
                new version becomes available.",
        )

        os_profile = cls._args_virtual_machine_configuration_create.os_profile
        os_profile.admin_password = AAZPasswordArg(
            options=["admin-password"],
            help="Specifies the password of the administrator account. \
                <br><br> **Minimum-length (Windows):** 8 characters <br><br> **Minimum-length \
                (Linux):** 6 characters <br><br> **Max-length (Windows):** 123 characters <br><br> \
                **Max-length (Linux):** 72 characters <br><br> **Complexity requirements:** 3 out \
                of 4 conditions below need to be fulfilled <br> Has lower characters <br>Has upper \
                characters <br> Has a digit <br> Has a special character (Regex match [\\W_]) <br><br> \
                **Disallowed values:** \"abc@123\", \"P@$$w0rd\", \"P@ssw0rd\", \"P@ssword123\", \"Pa$$word\", \
                \"pass@word1\", \"Password!\", \"Password1\", \"Password22\", \"iloveyou!\" <br><br> \
                For resetting the password, see [How to reset the Remote Desktop service or its login password \
                in a Windows VM](https://docs.microsoft.com/troubleshoot/azure/virtual-machines/reset-rdp) \
                <br><br> For resetting root password, see [Manage users, SSH, and \
                check or repair disks on Azure Linux VMs using the VMAccess Extension]\
                (https://docs.microsoft.com/troubleshoot/azure/virtual-machines/troubleshoot-ssh-connection)",
            blank=AAZPromptPasswordInput(
                msg="Password:",
                confirm=True,
            )
        )
        os_profile.admin_username = AAZStrArg(
            options=["admin-username"],
            help="Specifies the name of the administrator account. <br><br> This property cannot be updated \
                after the VM is created. <br><br> **Windows-only restriction:** Cannot end in \".\" \
                <br><br> **Disallowed values:** \"administrator\", \"admin\", \"user\", \"user1\", \"test\", \
                \"user2\", \"test1\", \"user3\", \"admin1\", \"1\", \"123\", \"a\", \"actuser\", \"adm\", \
                \"admin2\", \"aspnet\", \"backup\", \"console\", \"david\", \"guest\", \"john\", \"owner\", \"root\", \
                \"server\", \"sql\", \"support\", \"support_388945a0\", \"sys\", \"test2\", \"test3\", \"user4\", \
                \"user5\". <br><br> **Minimum-length (Linux):** 1  character <br><br> **Max-length (Linux):** \
                64 characters <br><br> **Max-length (Windows):** 20 characters.",
        )
        os_profile.os_configuration = AAZObjectArg(
            options=["os-configuration"],
            help="Specifies Windows operating system settings on the virtual machine.",
        )

        os_configuration = cls._args_virtual_machine_configuration_create.os_profile.os_configuration
        os_configuration.linux = AAZObjectArg(
            options=["linux"],
        )

        linux = cls._args_virtual_machine_configuration_create.os_profile.os_configuration.linux
        linux.disable_password_authentication = AAZBoolArg(
            options=["disable-password-authentication"],
            help="Specifies whether password authentication should be disabled.",
        )
        linux.ssh = AAZObjectArg(
            options=["ssh"],
            help="Specifies the ssh key configuration for a Linux OS. (This property is deprecated, \
                please use 'sshKeyPair' instead)",
        )
        linux.ssh_key_pair = AAZObjectArg(
            options=["ssh-key-pair"],
            help="The SSH Key-pair used to authenticate with the VM's.",
        )

        ssh = cls._args_virtual_machine_configuration_create.os_profile.os_configuration.linux.ssh
        ssh.public_keys = AAZListArg(
            options=["public-keys"],
            help="The list of SSH public keys used to authenticate with linux based VMs.",
        )

        public_keys = cls._args_virtual_machine_configuration_create.os_profile.os_configuration.linux.ssh.public_keys
        public_keys.Element = AAZObjectArg()

        _element = cls._args_virtual_machine_configuration_create.\
            os_profile.os_configuration.linux.ssh.public_keys.Element
        _element.key_data = AAZStrArg(
            options=["key-data"],
            help="SSH public key certificate used to authenticate with the VM through ssh. \
                The key needs to be at least 2048-bit and in ssh-rsa format. <br><br> For creating ssh keys, \
                see [Create SSH keys on Linux and Mac for Linux VMs in Azure]\
                (https://docs.microsoft.com/azure/virtual-machines/linux/create-ssh-keys-detailed).",
        )

        ssh_key_pair = cls._args_virtual_machine_configuration_create.os_profile.os_configuration.linux.ssh_key_pair
        ssh_key_pair.private_key = AAZPasswordArg(
            options=["private-key"],
            help="SSH private key.",
            blank=AAZPromptPasswordInput(
                msg="SSH Private key:",
                confirm=True,
            )
        )
        ssh_key_pair.public_key = AAZStrArg(
            options=["public-key"],
            help="SSH public key",
        )

        _schema.image_reference = cls._args_virtual_machine_configuration_create.image_reference
        _schema.os_profile = cls._args_virtual_machine_configuration_create.os_profile
        _schema.vm_size = cls._args_virtual_machine_configuration_create.vm_size

    @classmethod
    def _build_args_high_availability_software_configuration_create(cls, _schema):
        from azure.cli.core.aaz import AAZObjectArg, AAZStrArg, AAZPasswordArg, AAZPromptPasswordInput
        if cls._args_high_availability_software_configuration_create is not None:
            _schema.fencing_client_id = cls._args_high_availability_software_configuration_create.fencing_client_id
            _schema.fencing_client_password = cls._args_high_availability_software_configuration_create.\
                fencing_client_password
            return

        cls._args_high_availability_software_configuration_create = AAZObjectArg()

        high_availability_software_configuration_create = cls._args_high_availability_software_configuration_create
        high_availability_software_configuration_create.fencing_client_id = AAZStrArg(
            options=["fencing-client-id"],
            help="The fencing client id.",
            required=True,
        )
        high_availability_software_configuration_create.fencing_client_password = AAZPasswordArg(
            options=["fencing-client-password"],
            help="The fencing client id secret/password. The secret should never expire. \
                This will be used pacemaker to start/stop the cluster VMs.",
            required=True,
            blank=AAZPromptPasswordInput(
                msg="Fencing client password:",
                confirm=True,
            )
        )

        _schema.fencing_client_id = cls._args_high_availability_software_configuration_create.fencing_client_id
        _schema.fencing_client_password = cls._args_high_availability_software_configuration_create.\
            fencing_client_password

    @classmethod
    def _build_args_software_configuration_create(cls, _schema):
        from azure.cli.core.aaz import AAZObjectArg, AAZStrArg, AAZPasswordArg, AAZPromptPasswordInput
        if cls._args_software_configuration_create is not None:
            _schema.external = cls._args_software_configuration_create.external
            _schema.sap_install_without_os_config = cls._args_software_configuration_create.\
                sap_install_without_os_config
            _schema.service_initiated = cls._args_software_configuration_create.service_initiated
            return

        cls._args_software_configuration_create = AAZObjectArg()

        software_configuration_create = cls._args_software_configuration_create
        software_configuration_create.external = AAZObjectArg(
            options=["external"],
        )
        software_configuration_create.sap_install_without_os_config = AAZObjectArg(
            options=["sap-install-without-os-config"],
        )
        software_configuration_create.service_initiated = AAZObjectArg(
            options=["service-initiated"],
        )

        external = cls._args_software_configuration_create.external
        external.central_server_vm_id = AAZStrArg(
            options=["central-server-vm-id"],
            help="The resource ID of the virtual machine containing the central server instance.",
        )

        sap_install_without_os_config = cls._args_software_configuration_create.sap_install_without_os_config
        sap_install_without_os_config.bom_url = AAZStrArg(
            options=["bom-url"],
            help="The URL to the SAP Build of Materials(BOM) file.",
            required=True,
        )
        sap_install_without_os_config.high_availability_software_configuration = AAZObjectArg(
            options=["high-availability-software-configuration"],
            help="Gets or sets the HA software configuration.",
        )
        cls._build_args_high_availability_software_configuration_create(
            sap_install_without_os_config.high_availability_software_configuration
        )
        sap_install_without_os_config.sap_bits_storage_account_id = AAZStrArg(
            options=["sap-bits-storage-account-id"],
            help="The SAP bits storage account id.",
            required=True,
        )
        sap_install_without_os_config.software_version = AAZStrArg(
            options=["software-version"],
            help="The software version to install.",
            required=True,
        )

        service_initiated = cls._args_software_configuration_create.service_initiated
        service_initiated.bom_url = AAZStrArg(
            options=["bom-url"],
            help="The URL to the SAP Build of Materials(BOM) file.",
            required=True,
        )
        service_initiated.high_availability_software_configuration = AAZObjectArg(
            options=["high-availability-software-configuration"],
            help="Gets or sets the HA software configuration.",
        )
        cls._build_args_high_availability_software_configuration_create(
            service_initiated.high_availability_software_configuration
        )
        service_initiated.sap_bits_storage_account_id = AAZStrArg(
            options=["sap-bits-storage-account-id"],
            help="The SAP bits storage account id.",
            required=True,
        )
        service_initiated.sap_fqdn = AAZStrArg(
            options=["sap-fqdn"],
            help="The FQDN to set for the SAP system during install.",
            required=True,
        )
        service_initiated.software_version = AAZStrArg(
            options=["software-version"],
            help="The software version to install.",
            required=True,
        )
        service_initiated.ssh_private_key = AAZPasswordArg(
            options=["ssh-private-key"],
            help="The SSH private key.",
            required=True,
            blank=AAZPromptPasswordInput(
                msg="SSH Private key:",
                confirm=True,
            )
        )

        _schema.external = cls._args_software_configuration_create.external
        _schema.sap_install_without_os_config = cls._args_software_configuration_create.sap_install_without_os_config
        _schema.service_initiated = cls._args_software_configuration_create.service_initiated

    def pre_operations(self):
        args = self.ctx.args
        if has_value(args.configuration):
            args.configuration_org = args.configuration.to_serialized_data()

    class SapVirtualInstancesCreate(_SVICreate.SapVirtualInstancesCreate):
        @property
        def content(self):
            from azure.cli.core.aaz import AAZObjectType, AAZStrType, AAZDictType
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".",
                              typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")

            if properties is not None:
                properties.set_prop("configuration", AAZObjectType, ".configuration_org",
                                    typ_kwargs={"flags": {"required": True}})
                properties.set_prop("discovery", AAZObjectType, ".properties.discovery_org",
                                    typ_kwargs={"flags": {"required": True}})
                properties.set_prop("environment", AAZStrType, ".environment", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType)
                properties.set_prop("sapProduct", AAZStrType, ".sap_product", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedResourcesNetworkAccessType", AAZStrType,
                                    ".managed_resources_network_access_type")

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".managed_rg_name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            output = self.serialize_content(_content_value)
            if has_value(self.ctx.args.configuration):
                output['properties']["configuration"] = self.ctx.args.configuration.to_serialized_data()
                return output
            if has_value(self.ctx.args.discovery):
                if has_value(self.ctx.args.mrgstracc):
                    output['properties'].update({
                        "configuration": {
                            'centralServerVmId': self.ctx.args.discovery.to_serialized_data(),
                            'configurationType': 'Discovery',
                            'managedRgStorageAccountName': self.ctx.args.mrgstracc.to_serialized_data()
                        }
                    })
                else:
                    output['properties'].update({
                        "configuration": {
                            'centralServerVmId': self.ctx.args.discovery.to_serialized_data(),
                            'configurationType': 'Discovery'
                        }
                    })
            return output
