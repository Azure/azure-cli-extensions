# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: disable=too-many-lines
# pylint: disable=too-many-statements, protected-access

from knack.log import get_logger

from azure.cli.core.aaz import has_value
from azext_workloads.aaz.latest.workloads.sap_virtual_instance import Create as _SVICreate

logger = get_logger(__name__)


class SVICreate(_SVICreate):
    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        from azure.cli.core.aaz import AAZFreeFormDictArg, AAZFreeFormDictArgFormat, \
            AAZResourceIdArg, AAZResourceIdArgFormat
        args_schema = super()._build_arguments_schema(*args, **kwargs)
        args_schema.configuration = AAZFreeFormDictArg(
            options=["--configuration"],
            help="Path to the configuration file.",
            fmt=AAZFreeFormDictArgFormat()
        )
        args_schema.discovery = AAZResourceIdArg(
            options=["--central-server-vm"],
            help="The virtual machine ID or name of the Central Server.",
            fmt=AAZResourceIdArgFormat(template="/subscriptions/{subscription}/resourceGroups/{resource_group}"
                                                "/providers/Microsoft.Compute/virtualMachines/{}")
        )
        args_schema.configuration_org._registered = False
        args_schema.discovery_org._registered = False
        return args_schema

    def pre_operations(self):
        args = self.ctx.args
        if has_value(args.configuration):
            args.configuration_org = args.configuration.to_serialized_data()

    class SAPVirtualInstancesCreate(_SVICreate.SAPVirtualInstancesCreate):
        @property
        def content(self):
            from azure.cli.core.aaz import AAZObjectType, AAZStrType, AAZDictType
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"client_flatten": True}}
            )
            _builder.set_prop("identity", AAZObjectType, ".identity")
            _builder.set_prop("location", AAZStrType, ".location", typ_kwargs={"flags": {"required": True}})
            _builder.set_prop("properties", AAZObjectType, ".",
                              typ_kwargs={"flags": {"required": True, "client_flatten": True}})
            _builder.set_prop("tags", AAZDictType, ".tags")

            identity = _builder.get(".identity")
            if identity is not None:
                identity.set_prop("type", AAZStrType, ".type", typ_kwargs={"flags": {"required": True}})
                identity.set_prop("userAssignedIdentities", AAZDictType, ".user_assigned_identities")

            user_assigned_identities = _builder.get(".identity.userAssignedIdentities")
            if user_assigned_identities is not None:
                user_assigned_identities.set_elements(AAZObjectType, ".")

            properties = _builder.get(".properties")

            if properties is not None:
                properties.set_prop("configuration", AAZObjectType, ".configuration_org",
                                    typ_kwargs={"flags": {"required": True}})
                properties.set_prop("discovery", AAZObjectType, ".properties.discovery_org",
                                    typ_kwargs={"flags": {"required": True}})
                properties.set_prop("environment", AAZStrType, ".environment", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("managedResourceGroupConfiguration", AAZObjectType)
                properties.set_prop("sapProduct", AAZStrType, ".sap_product", typ_kwargs={"flags": {"required": True}})

            managed_resource_group_configuration = _builder.get(".properties.managedResourceGroupConfiguration")
            if managed_resource_group_configuration is not None:
                managed_resource_group_configuration.set_prop("name", AAZStrType, ".managed_rg_name")

            tags = _builder.get(".tags")
            if tags is not None:
                tags.set_elements(AAZStrType, ".")

            output = self.serialize_content(_content_value)
            if has_value(self.ctx.args.configuration):
                output['properties']["configuration"] = self.ctx.args.configuration.to_serialized_data()
                return output
            if has_value(self.ctx.args.discovery):
                output['properties'].update({
                    "configuration": {
                        'centralServerVmId': self.ctx.args.discovery.to_serialized_data(),
                        'configurationType': 'Discovery'
                    }
                })
            return output
