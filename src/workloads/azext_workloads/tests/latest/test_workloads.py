# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import unittest

from azure.cli.testsdk import *

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))


class WorkloadsScenario(ScenarioTest):
    def test_workloads_svi(self):
        self.kwargs.update({
            'name': 'C36',
            'configuration': os.path.join(TEST_DIR, 'create_infra_distributed_non_ha_config.json'),
            'msi': os.path.join(TEST_DIR, 'MSI.json')
        })

        self.cmd('az workloads sap-virtual-instance create -g CLI-TESTING -n {name} --environment NonProd --sap-product S4HANA --configuration "{configuration}" --identity "{msi}"', checks=[
            self.check('name', '{name}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('sapProduct', 'S4HANA'),
            self.check('environment', 'NonProd'),
            self.check('provisioningState', 'Succeeded'),
            self.check('configuration.configurationType', 'DeploymentWithOSConfig'),
            self.check('configuration.infrastructureConfiguration.deploymentType', 'ThreeTier')
        ])

    def test_workloads_svi_install(self):
        self.kwargs.update({
            'name': 'C36',
            'configuration': os.path.join(TEST_DIR, 'InstallPayload.json'),
            'msi': os.path.join(TEST_DIR, 'MSI.json')
        })

        self.cmd('az workloads sap-virtual-instance create -g CLI-TESTING -n {name} --environment NonProd --sap-product S4HANA --configuration "{configuration}" --identity "{msi}"', checks=[
            self.check('name', '{name}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('sapProduct', 'S4HANA'),
            self.check('environment', 'NonProd'),
            self.check('provisioningState', 'Succeeded')
        ])

    def test_workloads_svi_show(self):
        self.kwargs.update({
            'name': 'C36',
            'appservername': 'c36appvm0-0',
            'csservername': 'c36ascsvm-0',
            'dbservername': 'C36'
        })
        self.cmd('workloads sap-virtual-instance show -g CLI-TESTING -n {name}', checks=[
            self.check('name', '{name}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('sapProduct', 'S4HANA'),
            self.check('environment', 'NonProd'),
            self.check('provisioningState', 'Succeeded'),
            self.check('status', 'Running'),
            self.check('health', 'Healthy')
        ])

        self.cmd('workloads sap-virtual-instance list -g CLI-TESTING', checks=[
            self.check('[0].name', '{name}'),
            self.check('[0].resourceGroup', 'CLI-TESTING'),
            self.check('[0].sapProduct', 'S4HANA'),
            self.check('[0].environment', 'NonProd'),
            self.check('[0].provisioningState', 'Succeeded'),
            self.check('[0].status', 'Running'),
            self.check('[0].health', 'Healthy')
        ])

        self.cmd('workloads sap-central-instance show --sap-virtual-instance-name {name} -g CLI-TESTING -n {csservername}', checks=[
            self.check('name', '{csservername}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('provisioningState', 'Succeeded'),
            self.check('status', 'Running'),
            self.check('health', 'Healthy')
        ])

        self.cmd('workloads sap-application-server-instance show --sap-virtual-instance-name {name} -g CLI-TESTING -n {appservername}', checks=[
            self.check('name', '{appservername}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('provisioningState', 'Succeeded'),
            self.check('status', 'Running'),
            self.check('health', 'Healthy')
        ])

        self.cmd('workloads sap-database-instance show --sap-virtual-instance-name {name} -g CLI-TESTING -n {dbservername}', checks=[
            self.check('name', '{dbservername}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('provisioningState', 'Succeeded'),
            self.check('status', 'Running')
        ])

    def test_workloads_svi_childinstances_stop(self):
        self.kwargs.update({
            'name': 'C36',
            'appservername': 'c36appvm0-0',
            'csservername': 'c36ascsvm-0',
            'dbservername': 'C36'
        })
        self.cmd('workloads sap-central-instance stop --sap-virtual-instance-name {name} -g CLI-TESTING --central-instance-name {csservername}', checks=[
            self.check('status', 'Succeeded')
        ])

        self.cmd('workloads sap-application-server-instance stop --sap-virtual-instance-name {name} -g CLI-TESTING --application-instance-name {appservername}', checks=[
            self.check('status', 'Succeeded')
        ])

        self.cmd('workloads sap-database-instance stop --sap-virtual-instance-name {name} -g CLI-TESTING --database-instance-name {dbservername}', checks=[
            self.check('status', 'Succeeded')
        ])

    def test_workloads_svi_childinstances_start(self):
        self.kwargs.update({
            'name': 'C36',
            'appservername': 'c36appvm0-0',
            'csservername': 'c36ascsvm-0',
            'dbservername': 'C36'
        })
        self.cmd('workloads sap-central-instance start --sap-virtual-instance-name {name} -g CLI-TESTING --central-instance-name {csservername}', checks=[
            self.check('status', 'Succeeded')
        ])

        self.cmd('workloads sap-application-server-instance start --sap-virtual-instance-name {name} -g CLI-TESTING --application-instance-name {appservername}', checks=[
            self.check('status', 'Succeeded')
        ])

        self.cmd('workloads sap-database-instance start --sap-virtual-instance-name {name} -g CLI-TESTING --database-instance-name {dbservername}', checks=[
            self.check('status', 'Succeeded')
        ])

    def test_workloads_svi_stop_start(self):
        self.kwargs.update({
            'name': 'C36',
        })
        self.cmd('workloads sap-virtual-instance stop --sap-virtual-instance-name {name} -g CLI-TESTING', checks=[
            self.check('status', 'Succeeded')
        ])

        self.cmd('workloads sap-virtual-instance start --sap-virtual-instance-name {name} -g CLI-TESTING', checks=[
            self.check('status', 'Succeeded')
        ])

    def test_workloads_svi_update_tags(self):
        self.kwargs.update({
            'name': 'U77',
            'appservername': 'u77appzavm0-0',
            'csservername': 'u77scs00cl1-0',
            'dbservername': 'U77'
        })
        self.cmd('workloads sap-virtual-instance update -g U77-rg -n {name} --tags tag=test tag2=test2', checks=[
            self.check('name', '{name}'),
            self.check('resourceGroup', 'U77-rg'),
            self.check('provisioningState', 'Succeeded'),
            self.check('tags.tag', 'test'),
            self.check('tags.tag2', 'test2')
        ])

        self.cmd('workloads sap-central-instance update --sap-virtual-instance-name {name} -g U77-rg -n {csservername} --tags tag=test3 tag2=test4', checks=[
            self.check('name', '{csservername}'),
            self.check('resourceGroup', 'U77-rg'),
            self.check('provisioningState', 'Succeeded'),
            self.check('tags.tag', 'test3'),
            self.check('tags.tag2', 'test4')
        ])

        self.cmd('workloads sap-application-server-instance update --sap-virtual-instance-name {name} -g U77-rg -n {appservername} --tags tag=test5 tag2=test6', checks=[
            self.check('name', '{appservername}'),
            self.check('resourceGroup', 'U77-rg'),
            self.check('provisioningState', 'Succeeded'),
            self.check('tags.tag', 'test5'),
            self.check('tags.tag2', 'test6')
        ])

        self.cmd('workloads sap-database-instance update --sap-virtual-instance-name {name} -g U77-rg -n {dbservername} --tags tag=test7 tag2=test8', checks=[
            self.check('name', '{dbservername}'),
            self.check('resourceGroup', 'U77-rg'),
            self.check('provisioningState', 'Succeeded'),
            self.check('tags.tag', 'test7'),
            self.check('tags.tag2', 'test8')
        ])

    @unittest.skip('recording file not getting generted properly throwing Subscription not found')
    def test_workloads_svi_discover(self):
        self.kwargs.update({
            'name': 'C36',
            'msi': os.path.join(TEST_DIR, 'MSI.json'),
            'centralservervmid': '/subscriptions/49d64d54-e966-4c46-a868-1999802b762c/resourceGroups/CLI-TestRG/providers/Microsoft.Compute/virtualMachines/c36ascsvm'
        })

        self.cmd('workloads sap-virtual-instance create -g CLI-TESTING -n {name} --environment NonProd --sap-product S4HANA --central-server-vm {centralservervmid} --identity "{msi}"', checks=[
            self.check('name', '{name}'),
            self.check('resourceGroup', 'CLI-TESTING'),
            self.check('sapProduct', 'S4HANA'),
            self.check('environment', 'NonProd'),
            self.check('provisioningState', 'Succeeded'),
            self.check('configuration.configurationType', 'Discovery')
        ])

    def test_invoke_commands(self):
        self.kwargs.update({
            'databasetype': 'HANA',
            'sapproduct': 'S4HANA'
        })
        count = len(self.cmd('workloads sap-disk-configuration --app-location eastus --database-type {databasetype} --db-vm-sku Standard_M32ts --deployment-type SingleServer --environment NonProd --sap-product {sapproduct} --location eastus').get_output_in_json())
        self.assertTrue(count >= 1)

        self.cmd('workloads sap-sizing-recommendation --database-type {databasetype} --app-location eastus --location eastus --sap-product {sapproduct} --deployment-type SingleServer --environment NonProd --saps 10000 --db-memory 256 --db-scale-method ScaleUp', checks=[
            self.check('deploymentType', 'SingleServer')
        ])

        count = len(self.cmd('workloads sap-supported-sku --database-type {databasetype} --app-location eastus --location eastus --sap-product {sapproduct} --deployment-type ThreeTier --environment Prod').get_output_in_json())
        self.assertTrue(count >= 1)

    def test_workloads_svi_remove(self):
        self.kwargs.update({
            'name': 'C36'
        })

        self.cmd('workloads sap-virtual-instance delete -g CLI-TESTING -n {name} --yes')



