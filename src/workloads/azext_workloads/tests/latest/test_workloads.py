# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

import os
import json
import time

from azure.cli.testsdk import ScenarioTest

TEST_DIR = os.path.abspath(os.path.join(os.path.abspath(__file__), '..'))
ENV_FILE = os.path.join(TEST_DIR, 'data', 'env.json')


class WorkloadsSapVirtualInstanceScenario(ScenarioTest):
    # Function to load parameters from JSON file
    def load_env(self, LOAD_ENV_FILE):
        with open(LOAD_ENV_FILE, 'r') as f:
            envs = json.load(f)
        return envs

    # Common function to load parameters and update kwargs
    def load_and_update_kwargs(self, env_file):
        envs = self.load_env(env_file)
        for key, value in envs.items():
            self.kwargs[key] = os.path.join(TEST_DIR, 'data', value) if 'Path' in key else value

    def test_workloads_distributed_ha_avset_difftransrgShare(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateDistributedHAAvSetDiffTransRgShareSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{CreateDistributedHAAvSetDiffTransRgShareConfigPath}" --identity "{MsiPath}"', checks=[
            self.check('name', '{CreateDistributedHAAvSetDiffTransRgShareSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}')
        ])
        
    def test_workloads_distributed_ha_avzone_cusrestrustedtransshare(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Create Distributed HA AvZone with Custom Resource Trusted Access TransShare
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{CreateDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareConfigPath}" --identity "{MsiPath}" --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{CreateDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPrvt}'),
            self.check('configuration.infrastructureConfiguration.storageConfiguration.transportFileShareConfiguration.configurationType', '{MountTransShareConfigType}')
        ])

        # Install Distributed HA AvZone with Custom Resource Trusted Access TransShare
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{InstallDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareConfigPath}" --identity "{MsiPath}" --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{CreateDistributedHAAvZoneWithCustomResourceTrustedAccessTransShareSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}')
        ])

    def test_workloads_distributed_trustedaccessnotransshare(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Create Distributed System with Trusted Access NoTransShare
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateDistributedSystemWithTrustedAccessNoTransShareSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{CreateDistributedSystemWithTrustedAccessNoTransShareConfigPath}" --identity "{MsiPath}" --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{CreateDistributedSystemWithTrustedAccessNoTransShareSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPrvt}')
        ])

    def test_workloads_singlesystem_cusrestrusted(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Create Single System with Custom Resource Trusted Access
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateSingleSystemWithCustomResourceTrustedAccessSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{CreateSingleSystemWithCustomResourceTrustedAccessConfigPath}" --tags {TestType}={TestTypeValue} --identity "{MsiPath}" --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{CreateSingleSystemWithCustomResourceTrustedAccessSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPrvt}'),
            self.check('tags.{TestType}', '{TestTypeValue}')
        ])

        # Install Single System with Custom Resource Trusted Access
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateSingleSystemWithCustomResourceTrustedAccessSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{InstallSingleSystemWithCustomResourceTrustedAccessConfigPath}" --identity "{MsiPath}" --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{CreateSingleSystemWithCustomResourceTrustedAccessSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}')
        ])
    
    def test_workloads_singlesystem_notrusted(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Create Single System with No Trusted Access
        self.cmd('az workloads sap-virtual-instance create -g {ResourceGroupCreateSVI} -n {CreateSingleSystemWithNoTrustedAccessSID} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location} --configuration "{CreateSingleSystemWithNoTrustedAccessConfigPath}" --identity "{MsiPath}"', checks=[
            self.check('name', '{CreateSingleSystemWithNoTrustedAccessSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}')
        ])

    def test_workloads_svi_show(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Show the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance show -g {ResourceGroupCreateSVI} -n {ShowVISID}', checks=[
            self.check('name', '{ShowVISID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('status', '{VisStatusRunning}'),
            self.check('health', '{VishealthHealthy}')
        ])

        # List the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance list -g {ResourceGroupCreateSVI}', checks=[
            self.exists('[0].name'),
            self.check('[0].resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('[0].sapProduct', '{SapProduct}'),
            self.check('[0].environment', '{EnviornmentNonProd}'),
            self.check('[0].provisioningState', '{ProvisioningStateSucceeded}')
        ])

        # Show the SAP Central Instance
        self.cmd('workloads sap-central-instance show --sap-virtual-instance-name {ShowVISID} -g {ResourceGroupCreateSVI} -n {ShowCSID}', checks=[
            self.check('name', '{ShowCSID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('status', '{VisStatusRunning}'),
            self.check('health', '{VishealthHealthy}')
        ])

        # Show the SAP Application Server Instance
        self.cmd('workloads sap-application-server-instance show --sap-virtual-instance-name {ShowVISID} -g {ResourceGroupCreateSVI} -n {ShowAppID}', checks=[
            self.check('name', '{ShowAppID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('status', '{VisStatusRunning}'),
            self.check('health', '{VishealthHealthy}')
        ])

        # Show the SAP Database Instance
        self.cmd('workloads sap-database-instance show --sap-virtual-instance-name {ShowVISID} -g {ResourceGroupCreateSVI} -n {ShowDBID}', checks=[
            self.check('name', '{ShowDBID}'),
            self.check('resourceGroup', '{ResourceGroupCreateSVI}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('status', '{VisStatusRunning}')
        ])

    def test_workloads_svi_childinstances_stop(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Stop the SAP Application Server Instance
        self.cmd('workloads sap-application-server-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --application-instance-name {OpsAppID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Stop the SAP Central Instance
        self.cmd('workloads sap-central-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --central-instance-name {OpsCSID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Stop the SAP Database Instance
        self.cmd('workloads sap-database-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --database-instance-name {OpsDBID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_childinstances_soft_stop(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Soft Stop the SAP Application Server Instance
        self.cmd('workloads sap-application-server-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --application-instance-name {OpsAppID} --soft-stop-timeout-seconds {SoftStopTimeoutSecond}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Stop the SAP Central Instance
        self.cmd('workloads sap-central-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --central-instance-name {OpsCSID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Soft Stop the SAP Database Instance
        self.cmd('workloads sap-database-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --database-instance-name {OpsDBID} --soft-stop-timeout-seconds {SoftStopTimeoutSecond}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_childinstances_stop_with_infra(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Stop the SAP Application Server Instance with Deallocate VM
        self.cmd('workloads sap-application-server-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --application-instance-name {OpsAppID} --deallocate-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Wait for 5 minutes
        time.sleep(300)
        
        # Stop the SAP Database Instance with Deallocate VM
        self.cmd('workloads sap-database-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --database-instance-name {OpsDBID} --deallocate-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Stop the SAP Central Instance with Deallocate VM
        self.cmd('workloads sap-central-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --central-instance-name {OpsCSID} --deallocate-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_childinstances_start_with_infra(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Start the SAP Central Instance with Start VM
        self.cmd('workloads sap-central-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --central-instance-name {OpsCSID} --start-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])
        
        # Start the SAP Database Instance with Start VM
        self.cmd('workloads sap-database-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --database-instance-name {OpsDBID} --start-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Start the SAP Application Server Instance with Start VM
        self.cmd('workloads sap-application-server-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --application-instance-name {OpsAppID} --start-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_childinstances_start(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Start the SAP Database Instance
        self.cmd('workloads sap-database-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --database-instance-name {OpsDBID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Wait for 2 minutes
        time.sleep(120)

        # Start the SAP Central Instance
        self.cmd('workloads sap-central-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --central-instance-name {OpsCSID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Start the SAP Application Server Instance
        self.cmd('workloads sap-application-server-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --application-instance-name {OpsAppID}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_stop_start(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)
        
        # Stop the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

        # Start the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_soft_stop(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Soft Stop the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --soft-stop-timeout-seconds {SoftStopTimeoutSecond}', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_stop_with_infra(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Stop the SAP Virtual Instance with Deallocate VM
        self.cmd('workloads sap-virtual-instance stop --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --deallocate-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_start_with_infra(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Start the SAP Virtual Instance with Start VM
        self.cmd('workloads sap-virtual-instance start --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} --start-vm', checks=[
            self.check('status', '{OperationStatusSucceeded}')
        ])

    def test_workloads_svi_update_tags(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)
        
        # Update tags for SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance update -g {OpsVISRG} -n {OpsVISID} --tags {TestType}={TestTypeValue}', checks=[
            self.check('name', '{OpsVISID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('tags.{TestType}', '{TestTypeValue}')
        ])

        # Update tags for SAP Central Instance
        self.cmd('workloads sap-central-instance update --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} -n {OpsCSID} --tags {TestType}={TestTypeValue}', checks=[
            self.check('name', '{OpsCSID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('tags.{TestType}', '{TestTypeValue}')
        ])

        # Update tags for SAP Application Server Instance
        self.cmd('workloads sap-application-server-instance update --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} -n {OpsAppID} --tags {TestType}={TestTypeValue}', checks=[
            self.check('name', '{OpsAppID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('tags.{TestType}', '{TestTypeValue}')
        ])

        # Update tags for SAP Database Instance
        self.cmd('workloads sap-database-instance update --sap-virtual-instance-name {OpsVISID} -g {OpsVISRG} -n {OpsDBID} --tags {TestType}={TestTypeValue}', checks=[
            self.check('name', '{OpsDBID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('tags.{TestType}', '{TestTypeValue}')
        ])

    def test_workloads_svi_update_trustedaccess(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)
        
        # Update Trusted Access for SAP Virtual Instance to Private
        self.cmd('workloads sap-virtual-instance update -g {OpsVISRG} -n {OpsVISID} --managed-resources-network-access-type {MrgNetAccTypPrvt}')

        # Get the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance show -g {OpsVISRG} -n {OpsVISID}', checks=[
            self.check('name', '{OpsVISID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPrvt}')
        ])

        # Update Trusted Access for SAP Central Instance to Public
        self.cmd('workloads sap-virtual-instance update -g {OpsVISRG} -n {OpsVISID} --managed-resources-network-access-type {MrgNetAccTypPub}')

        # Get the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance show -g {OpsVISRG} -n {OpsVISID}', checks=[
            self.check('name', '{OpsVISID}'),
            self.check('resourceGroup', '{OpsVISRG}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPub}')
        ])

    def test_workloads_svi_discover(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Get Central Server VM ID
        result = self.cmd('workloads sap-central-instance show --sap-virtual-instance-name {DiscoverVIS} -g {DiscoverRG} -n {DiscoverCSID}').get_output_in_json()
        centralservervmid = result['vmDetails'][0]['virtualMachineId']

        # Update kwargs with the centralservervmid
        self.kwargs.update({
            'centralservervmid': centralservervmid
        })
        
        # Delete the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance delete -g {DiscoverRG} -n {DiscoverVIS} --yes')

        # Run the get command and expect it to fail
        result = self.cmd('workloads sap-virtual-instance show -g {DiscoverRG} -n {DiscoverVIS}', expect_failure=True).output

        # Check if the output is empty
        if not result:
            print("Command failed but no output was returned")
        else:
            # Parse the output as JSON
            result_json = json.loads(result)

            # Check if the error code is 'ResourceNotFound'
            assert result_json['error']['code'] == 'ResourceNotFound', f"Expected 'ResourceNotFound', but got {result_json['error']['code']}"

        # Create SAP Virtual Instance with Discovery Configuration
        self.cmd('workloads sap-virtual-instance create -g {DiscoverRG} -n {DiscoverVIS} --location {Location} --environment {EnviornmentNonProd} --sap-product {SapProduct} --central-server-vm {centralservervmid} --identity "{MsiPath}"', checks=[
            self.check('name', '{DiscoverVIS}'),
            self.check('resourceGroup', '{DiscoverRG}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('configuration.configurationType', 'Discovery')
        ])
    
    def test_workloads_svi_discover_custom(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)

        # Get Central Server VM ID
        result = self.cmd('workloads sap-central-instance show --sap-virtual-instance-name {DiscoverVIS} -g {DiscoverRG} -n {DiscoverCSID}').get_output_in_json()
        centralservervmid = result['vmDetails'][0]['virtualMachineId']

        # Update kwargs with the centralservervmid
        self.kwargs.update({
            'centralservervmid': centralservervmid
        })
        
        # Delete the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance delete -g {DiscoverRG} -n {DiscoverVIS} --yes')

        # Run the get command and expect it to fail
        result = self.cmd('workloads sap-virtual-instance show -g {DiscoverRG} -n {DiscoverVIS}', expect_failure=True).output

        # Check if the output is empty
        if not result:
            print("Command failed but no output was returned")
        else:
            # Parse the output as JSON
            result_json = json.loads(result)

            # Check if the error code is 'ResourceNotFound'
            assert result_json['error']['code'] == 'ResourceNotFound', f"Expected 'ResourceNotFound', but got {result_json['error']['code']}"

        # Create SAP Virtual Instance with Discovery Configuration
        self.cmd('workloads sap-virtual-instance create -g {DiscoverRG} -n {DiscoverVIS} --location {Location} --environment {EnviornmentNonProd} --sap-product {SapProduct} --central-server-vm {centralservervmid} --identity "{MsiPath}" --managed-rg-name {ManagedRG} --managed-rg-sa-name {ManagedRGSAName} --managed-resources-network-access-type {MrgNetAccTypPrvt}', checks=[
            self.check('name', '{DiscoverVIS}'),
            self.check('resourceGroup', '{DiscoverRG}'),
            self.check('sapProduct', '{SapProduct}'),
            self.check('environment', '{EnviornmentNonProd}'),
            self.check('managedResourceGroupConfiguration.name', '{ManagedRG}'),
            self.check('configuration.managedRgStorageAccountName', '{ManagedRGSAName}'),
            self.check('managedResourcesNetworkAccessType', '{MrgNetAccTypPrvt}'),
            self.check('provisioningState', '{ProvisioningStateSucceeded}'),
            self.check('configuration.configurationType', 'Discovery')
        ])

    def test_invoke_commands(self):
        # Load parameters from JSON file
        self.load_and_update_kwargs(ENV_FILE)
        
        # Count of SAP Disk Configuration entries
        count = len(self.cmd('workloads sap-disk-configuration --app-location eastus --database-type {DatabaseType} --db-vm-sku {DbVMSku} --deployment-type {DeploymentTypeSingleServer} --environment {EnviornmentNonProd} --sap-product {SapProduct} --location {Location}').get_output_in_json())
        self.assertTrue(count >= 1)

        # Check for deployment type for SAP Sizing Recommendation
        self.cmd('workloads sap-sizing-recommendation --database-type {DatabaseType} --app-location eastus --location {Location} --sap-product {SapProduct} --deployment-type {DeploymentTypeSingleServer} --environment {EnviornmentNonProd} --saps {Saps} --db-memory {DbMemory} --db-scale-method ScaleUp', checks=[
            self.check('deploymentType', 'SingleServer')
        ])

        # Count of SAP Supported SKU entries
        count = len(self.cmd('workloads sap-supported-sku --database-type {DatabaseType} --app-location eastus --location {Location} --sap-product {SapProduct} --deployment-type {DeploymentTypeThreeTier} --environment {EnviornmentProd}').get_output_in_json())
        self.assertTrue(count >= 1)

    def test_workloads_svi_remove(self):
        # Load parameters from JSON
        self.load_and_update_kwargs(ENV_FILE)

        # Delete the SAP Virtual Instance
        self.cmd('workloads sap-virtual-instance delete -g {OpsVISRG} -n {OpsVISID} --yes')
