# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

from azure.cli.testsdk import *


class SiteRecoveryScenario(ScenarioTest):
    @ResourceGroupPreparer(location='eastus2euap', name_prefix='clitest.rg.siterecovery.')
    def test_siterecovery_scenarios(self):
        self.kwargs.update({'vm_name': self.create_random_name(prefix='vm', length=16)})
        self.cmd('az vm create -n {vm_name} -g {rg} --image UbuntuLTS --size Standard_DS2_v2')

        # replication-eligibility
        self.cmd('az site-recovery replication-eligibility list -g {rg} --virtual-machine-name {vm_name}')
        self.cmd('az site-recovery replication-eligibility show-default -g {rg} --virtual-machine-name {vm_name}')

    @ResourceGroupPreparer(location='eastus2euap', name_prefix='clitest.rg.siterecovery.vault.')
    def test_siterecovery_vault_scenarios(self):
        self.kwargs.update({
            'vault_name': self.create_random_name(prefix='vault', length=20),
            'alert_setting_name': self.create_random_name(prefix='alert', length=20),
            'policy_name_rcm': self.create_random_name(prefix='policy', length=20),
            'policy_name_rcm_failback': self.create_random_name(prefix='policy', length=20),
            'intent_name': self.create_random_name(prefix='intent', length=20),
        })
        self.cmd('az backup vault create -n {vault_name} -g {rg} -l eastus2euap')

        # vault top-level commands
        self.cmd('az site-recovery vault list-appliance -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-migration-item -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-network -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-network-mapping -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-protected-item -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-protection-container -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-protection-container-mapping -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-recovery-services-provider -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-storage-classification -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-storage-classification-mapping -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault list-v-center -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault show-supported-operating-system -g {rg} --vault-name {vault_name}')

        # alert setting
        self.cmd('az site-recovery vault alert-setting create -n defaultAlertSetting -g {rg} '
                 '--vault-name {vault_name} --custom-email-addresses email@address.com --locale en_US '
                 '--send-to-owners Send')
        self.cmd('az site-recovery vault alert-setting show -n defaultAlertSetting -g {rg} '
                 '--vault-name {vault_name}',
                 checks=[
                     self.check('name', 'defaultAlertSetting'),
                     self.check('properties.locale', 'en_US'),
                     self.check('properties.customEmailAddresses', ['email@address.com']),
                     self.check('properties.sendToOwners', 'Send')])
        self.cmd('az site-recovery vault alert-setting update -n defaultAlertSetting -g {rg} '
                 '--vault-name {vault_name} --custom-email-addresses email2@address.com --locale fr_FR '
                 '--send-to-owners DoNotSend',
                 checks=[
                     self.check('properties.locale', 'fr_FR'),
                     self.check('properties.customEmailAddresses', ['email2@address.com']),
                     self.check('properties.sendToOwners', 'DoNotSend')])
        self.cmd('az site-recovery vault alert-setting list -g {rg} --vault-name {vault_name}',
                 checks=[self.check('length(@)', 1)])

        # event
        events = self.cmd('az site-recovery vault event list -g {rg} --vault-name {vault_name}').\
            get_output_in_json()
        if events is not None and len(events) > 0:
            self.cmd('az site-recovery vault event show -g {rg} --vault-name {vault_name} -n '+events[0]["name"])

        # health
        self.cmd('az site-recovery vault health refresh-default -g {rg} --vault-name {vault_name}')
        self.cmd('az site-recovery vault health show -g {rg} --vault-name {vault_name}')

        # job
        jobs = self.cmd('az site-recovery vault job list -g {rg} --vault-name {vault_name}').get_output_in_json()
        if jobs is not None and len(jobs) > 0:
            self.cmd('az site-recovery vault job show -g {rg} --vault-name {vault_name} --job-name '+jobs[0]["name"])
            # TODO need to test with actual jobs
            # self.cmd('az site-recovery vault job restart -g {rg} --vault-name {vault_name} --job-name ' + jobs[0]["name"])
            # self.cmd('az site-recovery vault job cancel -g {rg} --vault-name {vault_name} --job-name ' + jobs[0]["name"])
            # self.cmd('az site-recovery vault job resume -g {rg} --vault-name {vault_name} --job-name ' + jobs[0]["name"])
        self.cmd('az site-recovery vault job export -g {rg} --vault-name {vault_name}')

        # policy
        # in-mage-rcm
        self.cmd('az site-recovery vault policy create -g {rg} --vault-name {vault_name} -n {policy_name_rcm} '
                 '--provider-specific-input {{in-mage-rcm:{{'
                 'app-consistent-frequency-in-minutes:0,crash-consistent-frequency-in-minutes:5,'
                 'enable-multi-vm-sync:true,recovery-point-history-in-minutes:2880}}}}')
        self.cmd('az site-recovery vault policy show -g {rg} --vault-name {vault_name} -n {policy_name_rcm}',
                 checks=[self.check('properties.providerSpecificDetails.instanceType', 'InMageRcm'),
                         self.check('properties.providerSpecificDetails.appConsistentFrequencyInMinutes', 0),
                         self.check('properties.providerSpecificDetails.crashConsistentFrequencyInMinutes', 5),
                         self.check('properties.providerSpecificDetails.enableMultiVmSync', 'true'),
                         self.check('properties.providerSpecificDetails.recoveryPointHistoryInMinutes', 2880)
                         ])
        self.cmd('az site-recovery vault policy list -g {rg} --vault-name {vault_name}',
                 checks=[self.check('length(@)', 1)])
        self.cmd('az site-recovery vault policy update --debug -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm} '
                 '--provider-specific-input {{in-mage-rcm:{{'
                 'app-consistent-frequency-in-minutes:0,crash-consistent-frequency-in-minutes:5,'
                 'enable-multi-vm-sync:true,recovery-point-history-in-minutes:1440}}}}',
                 checks=[self.check('properties.providerSpecificDetails.appConsistentFrequencyInMinutes', 0),
                         self.check('properties.providerSpecificDetails.crashConsistentFrequencyInMinutes', 5),
                         self.check('properties.providerSpecificDetails.enableMultiVmSync', 'true'),
                         self.check('properties.providerSpecificDetails.recoveryPointHistoryInMinutes', 1440)])
        self.cmd('az site-recovery vault policy delete -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm} -y')
        self.cmd('az site-recovery vault policy list -g {rg} --vault-name {vault_name}',
                 checks=[self.check('length(@)', 0)])

        # in-mage-rcm-failback
        self.cmd('az site-recovery vault policy create -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm_failback} '
                 '--provider-specific-input {{in-mage-rcm-failback:{{'
                 'app-consistent-frequency-in-minutes:60,crash-consistent-frequency-in-minutes:5}}}}')
        self.cmd('az site-recovery vault policy show -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm_failback}',
                 checks=[self.check('properties.providerSpecificDetails.instanceType', 'InMageRcmFailback'),
                         self.check('properties.providerSpecificDetails.appConsistentFrequencyInMinutes', 60),
                         self.check('properties.providerSpecificDetails.crashConsistentFrequencyInMinutes', 5)])
        self.cmd('az site-recovery vault policy list -g {rg} --vault-name {vault_name}',
                 checks=[self.check('length(@)', 1)])
        self.cmd('az site-recovery vault policy update -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm_failback} '
                 '--provider-specific-input {{in-mage-rcm-failback:{{'
                 'app-consistent-frequency-in-minutes:0,crash-consistent-frequency-in-minutes:10}}}}',
                 checks=[self.check('properties.providerSpecificDetails.appConsistentFrequencyInMinutes', 0),
                         self.check('properties.providerSpecificDetails.crashConsistentFrequencyInMinutes', 10)])
        self.cmd('az site-recovery vault policy delete -g {rg} --vault-name {vault_name} '
                 '-n {policy_name_rcm_failback} -y')
        self.cmd('az site-recovery vault policy list -g {rg} --vault-name {vault_name}',
                 checks=[self.check('length(@)', 0)])

        # protection-intent
        # recovery-plan
        # vault-setting

    # @record_only()
    def test_siterecovery_A2A_scenarios(self):
        self.kwargs.update({
            'rg': 'CliTeraformVaultRG',
            'subscription': '7c943c1b-5122-4097-90c8-861411bdd574',
            'vault_name': 'CliTerraformVault',
            'vm_name': 'CliTerraformVM',
            'vm_rg': 'CliTerraformVMRG',
            'fabric1_name': 'cli-test-fabric-A2A-1',
            'fabric2_name': 'cli-test-fabric-A2A-2',
            'policy_name': 'cli-test-vault-policy-A2A-1',
            'container1_name': 'cli-test-container-A2A-1',
            'container2_name': 'cli-test-container-A2A-2',
            'container_mapping_name': 'cli-test-container-mapping-A2A-1',
            'vnet1_name': 'cli-test-vnet-A2A-1',
            'vnet2_name': 'cli-test-vnet-A2A-2',
            'network_mapping_name': 'cli-test-network-mapping-A2A-1',
            'protected_item_name': 'cli-test-protected-item-A2A-1',
            'storage1_name': 'cliteststoragea2a1',
            'storage2_name': 'cliteststoragea2a2',
        })
        # create two fabrics and one container in each, create a policy
        # self.cmd('az account set -n {subscription}')
        # self.cmd('az site-recovery fabric create -n {fabric1_name} -g {rg} '
        #          '--vault-name {vault_name} --custom-details {{azure:{{location:eastus}}}}')
        # self.cmd('az site-recovery fabric create -n {fabric2_name} -g {rg} '
        #          '--vault-name {vault_name} --custom-details {{azure:{{location:eastus2}}}}')
        # self.cmd('az site-recovery vault policy create -g {rg} '
        #          '--vault-name {vault_name} -n {policy_name} '
        #          '--provider-specific-input {{a2-a:{{multi-vm-sync-status:Enable}}}}')
        policy_id = self.cmd('az site-recovery vault policy show -g {rg} '
                             '--vault-name {vault_name} -n {policy_name}').get_output_in_json()["id"]
        self.kwargs.update({"policy_id": policy_id})
        # self.cmd('az site-recovery fabric protection-container create -g {rg} '
        #          '--fabric-name {fabric1_name} -n {container1_name} --vault-name {vault_name} '
        #          '--provider-input [{{instance-type:A2A}}]')
        # self.cmd('az site-recovery fabric protection-container create -g {rg} '
        #          '--fabric-name {fabric2_name} -n {container2_name} --vault-name {vault_name} '
        #          '--provider-input [{{instance-type:A2A}}]')
        container2_id = self.cmd('az site-recovery fabric protection-container show '
                                 '-g {rg} --fabric-name {fabric2_name} -n {container2_name} '
                                 '--vault-name {vault_name}').get_output_in_json()["id"]
        self.kwargs.update({"container2_id": container2_id})

        # create container mapping
        # self.cmd('az site-recovery protection-container-mapping create -g {rg} '
        #          '--fabric-name {fabric1_name} -n {container_mapping_name} --protection-container {container1_name} '
        #          '--vault-name {vault_name} '
        #          '--policy-id {policy_id} --provider-input {{a2-a:{{agent-auto-update-status:Disabled}}}} '
        #          '--target-container {container2_id}')

        # create two vnets and network mapping
        vnet1_id = self.cmd('az network vnet create -g {rg} -n {vnet1_name} '
                            '-l eastus').get_output_in_json()["newVNet"]["id"]
        vnet2 = self.cmd('az network vnet create -g {rg} -n {vnet2_name} '
                            '-l eastus2 --subnet-name MySubnet '
                            '--subnet-prefix 10.0.0.0/24').get_output_in_json()

        self.kwargs.update({"vnet1_id": vnet1_id, "vnet2_id": vnet2["newVNet"]["id"],
                            "vnet2_subnet": vnet2["newVNet"]["subnets"][0]["id"]})
        # self.cmd('az site-recovery fabric network network-mapping create -g {rg} --fabric-name {fabric1_name} '
        #          '-n {network_mapping_name} --network-name {vnet1_name} --vault-name {vault_name} '
        #          '--recovery-network-id {vnet2_id} '
        #          '--fabric-details {{azure-to-azure:{{primary-network-id:{vnet1_id}}}}} '
        #          '--recovery-fabric-name {fabric2_name}')

        storage1_id = self.cmd('az storage account create -n {storage1_name} -g {rg} '
                               '--sku Standard_LRS -l eastus').get_output_in_json()["id"]
        storage2_id = self.cmd('az storage account create -n {storage2_name} -g {rg} '
                               '--sku Standard_LRS -l eastus2').get_output_in_json()["id"]
        self.kwargs.update({"storage1_id": storage1_id, "storage2_id": storage2_id})

        vm = self.cmd('az vm show -n {vm_name} -g {vm_rg}').get_output_in_json()
        self.kwargs.update({"vm_id": vm["id"],
                            "data_disk": vm["storageProfile"]["dataDisks"][0]["managedDisk"]["id"],
                            "os_disk": vm["storageProfile"]["osDisk"]["managedDisk"]["id"]})

        rg_id = self.cmd('az group show -n {rg}').get_output_in_json()["id"]
        self.kwargs.update({"rg_id": rg_id})

        # enable protection
        # self.cmd('az site-recovery fabric protection-container protected-item create -g {rg} '
        #          '--fabric-name {fabric1_name} -n {protected_item_name} --protection-container {container1_name} '
        #          '--vault-name {vault_name} --policy-id {policy_id} '
        #          '--provider-details {{a2-a:{{fabric-object-id:{vm_id},'
        #          'vm-managed-disks:[{{disk-id:{data_disk},'
        #          'primary-staging-azure-storage-account-id:{storage1_id},'
        #          'recovery-resource-group-id:{rg_id}}},'
        #          '{{disk-id:{os_disk},'
        #          'primary-staging-azure-storage-account-id:{storage1_id},'
        #          'recovery-resource-group-id:{rg_id}}}],recovery-azure-network-id:{vnet2_id},'
        #          'recovery-container-id:{container2_id},'
        #          'recovery-resource-group-id:{rg_id},'
        #          'recovery-subnet-name:{vnet2_subnet}}}}}')

        # failover
        self.cmd('az site-recovery fabric protection-container protected-item unplanned-failover')




    # @ResourceGroupPreparer(location='eastus2euap', name_prefix='clitest.rg.siterecovery.fabric.')
    # def test_siterecovery_fabric_scenarios(self):
    #     self.kwargs.update({
    #         'vault_name': self.create_random_name(prefix='vault', length=20),
    #         'fabric_name': self.create_random_name(prefix='fabric', length=20),
    #         'intent_name': self.create_random_name(prefix='intent', length=20),
    #     })
    #     self.cmd('az backup vault create -n {vault_name} -g {rg} -l eastus2euap')
    #
    #     # fabric
    #     # self.cmd('az site-recovery fabric create -n {fabric_name} -g {rg} --vault-name {vault_name} '
    #     #          '--custom-details {{in-mage-rcm:')
    #     self.cmd('az site-recovery fabric list -g {rg} --vault-name {vault_name')
    #
    #
    #     # protection intent
    #     # self.cmd('az site-recovery vault protection-intent create -g {rg} --vault-name {vault_name} '
    #     #          '-n {intent_name} --provider-specific-details {{a2-a:{{fabric-object-id')