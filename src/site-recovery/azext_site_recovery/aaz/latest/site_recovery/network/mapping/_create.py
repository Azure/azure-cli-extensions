# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery network mapping create",
)
class Create(AAZCommand):
    """Create operation to create an ASR network mapping.

    :example: network mapping create for A2A fabric
        az site-recovery network mapping create -g rg --fabric-name fabric1_name -n network_mapping1_name --network-name azureNetwork --vault-name vault_name --recovery-network-id vnet2_id --fabric-details '{azure-to-azure:{primary-network-id:vnetvm_id}}' --recovery-fabric-name fabric2_name

    :example: network mapping create for H2A E2A (VMM)
        az site-recovery network mapping create -g "rg" --fabric-name "fabric_name" -n "network_mapping_name" --network-name "vnet_source_name" --vault-name "vault_name" --recovery-network-id "vnet_recovery_id" --fabric-details '{vmm-to-azure:""}'
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationnetworks/{}/replicationnetworkmappings/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric-name"],
            help="Primary fabric name.",
            required=True,
        )
        _args_schema.network_mapping_name = AAZStrArg(
            options=["-n", "--name", "--network-mapping-name"],
            help="Network mapping name.",
            required=True,
        )
        _args_schema.network_name = AAZStrArg(
            options=["--network-name"],
            help="Primary network name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["--vault-name"],
            help="The name of the recovery services vault.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.fabric_specific_details = AAZObjectArg(
            options=["--fabric-details", "--fabric-specific-details"],
            arg_group="Properties",
            help="Fabric specific input properties.",
        )
        _args_schema.recovery_fabric_name = AAZStrArg(
            options=["--recovery-fabric-name"],
            arg_group="Properties",
            help="Recovery fabric Name.",
        )
        _args_schema.recovery_network_id = AAZStrArg(
            options=["--recovery-network-id"],
            arg_group="Properties",
            help="Recovery network Id.",
            required=True,
        )

        fabric_specific_details = cls._args_schema.fabric_specific_details
        fabric_specific_details.azure_to_azure = AAZObjectArg(
            options=["azure-to-azure"],
        )
        fabric_specific_details.vmm_to_azure = AAZObjectArg(
            options=["vmm-to-azure"],
        )

        azure_to_azure = cls._args_schema.fabric_specific_details.azure_to_azure
        azure_to_azure.primary_network_id = AAZStrArg(
            options=["primary-network-id"],
            help="The primary azure vnet Id.",
            required=True,
        )

        vmm_to_azure = cls._args_schema.fabric_specific_details.vmm_to_azure
        vmm_to_azure.location = AAZStrArg(
            options=["location"],
            help="The Location.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReplicationNetworkMappingsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationNetworkMappingsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationNetworks/{networkName}/replicationNetworkMappings/{networkMappingName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkMappingName", self.ctx.args.network_mapping_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "networkName", self.ctx.args.network_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("fabricSpecificDetails", AAZObjectType, ".fabric_specific_details")
                properties.set_prop("recoveryFabricName", AAZStrType, ".recovery_fabric_name")
                properties.set_prop("recoveryNetworkId", AAZStrType, ".recovery_network_id", typ_kwargs={"flags": {"required": True}})

            fabric_specific_details = _builder.get(".properties.fabricSpecificDetails")
            if fabric_specific_details is not None:
                fabric_specific_details.set_const("instanceType", "AzureToAzure", AAZStrType, ".azure_to_azure", typ_kwargs={"flags": {"required": True}})
                fabric_specific_details.set_const("instanceType", "VmmToAzure", AAZStrType, ".vmm_to_azure", typ_kwargs={"flags": {"required": True}})
                fabric_specific_details.discriminate_by("instanceType", "AzureToAzure")
                fabric_specific_details.discriminate_by("instanceType", "VmmToAzure")

            disc_azure_to_azure = _builder.get(".properties.fabricSpecificDetails{instanceType:AzureToAzure}")
            if disc_azure_to_azure is not None:
                disc_azure_to_azure.set_prop("primaryNetworkId", AAZStrType, ".azure_to_azure.primary_network_id", typ_kwargs={"flags": {"required": True}})

            disc_vmm_to_azure = _builder.get(".properties.fabricSpecificDetails{instanceType:VmmToAzure}")
            if disc_vmm_to_azure is not None:
                disc_vmm_to_azure.set_prop("location", AAZStrType, ".vmm_to_azure.location")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.fabric_specific_settings = AAZObjectType(
                serialized_name="fabricSpecificSettings",
            )
            properties.primary_fabric_friendly_name = AAZStrType(
                serialized_name="primaryFabricFriendlyName",
            )
            properties.primary_network_friendly_name = AAZStrType(
                serialized_name="primaryNetworkFriendlyName",
            )
            properties.primary_network_id = AAZStrType(
                serialized_name="primaryNetworkId",
            )
            properties.recovery_fabric_arm_id = AAZStrType(
                serialized_name="recoveryFabricArmId",
            )
            properties.recovery_fabric_friendly_name = AAZStrType(
                serialized_name="recoveryFabricFriendlyName",
            )
            properties.recovery_network_friendly_name = AAZStrType(
                serialized_name="recoveryNetworkFriendlyName",
            )
            properties.recovery_network_id = AAZStrType(
                serialized_name="recoveryNetworkId",
            )
            properties.state = AAZStrType()

            fabric_specific_settings = cls._schema_on_200.properties.fabric_specific_settings
            fabric_specific_settings.instance_type = AAZStrType(
                serialized_name="instanceType",
                flags={"required": True},
            )

            disc_azure_to_azure = cls._schema_on_200.properties.fabric_specific_settings.discriminate_by("instance_type", "AzureToAzure")
            disc_azure_to_azure.primary_fabric_location = AAZStrType(
                serialized_name="primaryFabricLocation",
            )
            disc_azure_to_azure.recovery_fabric_location = AAZStrType(
                serialized_name="recoveryFabricLocation",
            )

            disc_vmm_to_azure = cls._schema_on_200.properties.fabric_specific_settings.discriminate_by("instance_type", "VmmToAzure")
            disc_vmm_to_azure.location = AAZStrType()

            return cls._schema_on_200


class _CreateHelper:
    """Helper class for Create"""


__all__ = ["Create"]
