# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery recovery-plan list",
)
class List(AAZCommand):
    """List the recovery plans in the vault.

    :example: recovery-plan list
        az site-recovery recovery-plan list -g rg --vault-name vault_name
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationrecoveryplans", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["--vault-name"],
            help="The name of the recovery services vault.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ReplicationRecoveryPlansList(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class ReplicationRecoveryPlansList(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.location = AAZStrType()
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.allowed_operations = AAZListType(
                serialized_name="allowedOperations",
            )
            properties.current_scenario = AAZObjectType(
                serialized_name="currentScenario",
            )
            properties.current_scenario_status = AAZStrType(
                serialized_name="currentScenarioStatus",
            )
            properties.current_scenario_status_description = AAZStrType(
                serialized_name="currentScenarioStatusDescription",
            )
            properties.failover_deployment_model = AAZStrType(
                serialized_name="failoverDeploymentModel",
            )
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.groups = AAZListType()
            properties.last_planned_failover_time = AAZStrType(
                serialized_name="lastPlannedFailoverTime",
            )
            properties.last_test_failover_time = AAZStrType(
                serialized_name="lastTestFailoverTime",
            )
            properties.last_unplanned_failover_time = AAZStrType(
                serialized_name="lastUnplannedFailoverTime",
            )
            properties.primary_fabric_friendly_name = AAZStrType(
                serialized_name="primaryFabricFriendlyName",
            )
            properties.primary_fabric_id = AAZStrType(
                serialized_name="primaryFabricId",
            )
            properties.provider_specific_details = AAZListType(
                serialized_name="providerSpecificDetails",
            )
            properties.recovery_fabric_friendly_name = AAZStrType(
                serialized_name="recoveryFabricFriendlyName",
            )
            properties.recovery_fabric_id = AAZStrType(
                serialized_name="recoveryFabricId",
            )
            properties.replication_providers = AAZListType(
                serialized_name="replicationProviders",
            )

            allowed_operations = cls._schema_on_200.value.Element.properties.allowed_operations
            allowed_operations.Element = AAZStrType()

            current_scenario = cls._schema_on_200.value.Element.properties.current_scenario
            current_scenario.job_id = AAZStrType(
                serialized_name="jobId",
            )
            current_scenario.scenario_name = AAZStrType(
                serialized_name="scenarioName",
            )
            current_scenario.start_time = AAZStrType(
                serialized_name="startTime",
            )

            groups = cls._schema_on_200.value.Element.properties.groups
            groups.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.groups.Element
            _element.end_group_actions = AAZListType(
                serialized_name="endGroupActions",
            )
            _element.group_type = AAZStrType(
                serialized_name="groupType",
                flags={"required": True},
            )
            _element.replication_protected_items = AAZListType(
                serialized_name="replicationProtectedItems",
            )
            _element.start_group_actions = AAZListType(
                serialized_name="startGroupActions",
            )

            end_group_actions = cls._schema_on_200.value.Element.properties.groups.Element.end_group_actions
            end_group_actions.Element = AAZObjectType()
            _ListHelper._build_schema_recovery_plan_action_read(end_group_actions.Element)

            replication_protected_items = cls._schema_on_200.value.Element.properties.groups.Element.replication_protected_items
            replication_protected_items.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.groups.Element.replication_protected_items.Element
            _element.id = AAZStrType()
            _element.virtual_machine_id = AAZStrType(
                serialized_name="virtualMachineId",
            )

            start_group_actions = cls._schema_on_200.value.Element.properties.groups.Element.start_group_actions
            start_group_actions.Element = AAZObjectType()
            _ListHelper._build_schema_recovery_plan_action_read(start_group_actions.Element)

            provider_specific_details = cls._schema_on_200.value.Element.properties.provider_specific_details
            provider_specific_details.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.provider_specific_details.Element
            _element.instance_type = AAZStrType(
                serialized_name="instanceType",
                flags={"required": True},
            )

            disc_a2_a = cls._schema_on_200.value.Element.properties.provider_specific_details.Element.discriminate_by("instance_type", "A2A")
            disc_a2_a.primary_zone = AAZStrType(
                serialized_name="primaryZone",
            )
            disc_a2_a.recovery_zone = AAZStrType(
                serialized_name="recoveryZone",
            )

            replication_providers = cls._schema_on_200.value.Element.properties.replication_providers
            replication_providers.Element = AAZStrType()

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""

    _schema_recovery_plan_action_read = None

    @classmethod
    def _build_schema_recovery_plan_action_read(cls, _schema):
        if cls._schema_recovery_plan_action_read is not None:
            _schema.action_name = cls._schema_recovery_plan_action_read.action_name
            _schema.custom_details = cls._schema_recovery_plan_action_read.custom_details
            _schema.failover_directions = cls._schema_recovery_plan_action_read.failover_directions
            _schema.failover_types = cls._schema_recovery_plan_action_read.failover_types
            return

        cls._schema_recovery_plan_action_read = _schema_recovery_plan_action_read = AAZObjectType()

        recovery_plan_action_read = _schema_recovery_plan_action_read
        recovery_plan_action_read.action_name = AAZStrType(
            serialized_name="actionName",
            flags={"required": True},
        )
        recovery_plan_action_read.custom_details = AAZObjectType(
            serialized_name="customDetails",
            flags={"required": True},
        )
        recovery_plan_action_read.failover_directions = AAZListType(
            serialized_name="failoverDirections",
            flags={"required": True},
        )
        recovery_plan_action_read.failover_types = AAZListType(
            serialized_name="failoverTypes",
            flags={"required": True},
        )

        custom_details = _schema_recovery_plan_action_read.custom_details
        custom_details.instance_type = AAZStrType(
            serialized_name="instanceType",
            flags={"required": True},
        )

        disc_automation_runbook_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "AutomationRunbookActionDetails")
        disc_automation_runbook_action_details.fabric_location = AAZStrType(
            serialized_name="fabricLocation",
            flags={"required": True},
        )
        disc_automation_runbook_action_details.runbook_id = AAZStrType(
            serialized_name="runbookId",
        )
        disc_automation_runbook_action_details.timeout = AAZStrType()

        disc_manual_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "ManualActionDetails")
        disc_manual_action_details.description = AAZStrType()

        disc_script_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "ScriptActionDetails")
        disc_script_action_details.fabric_location = AAZStrType(
            serialized_name="fabricLocation",
            flags={"required": True},
        )
        disc_script_action_details.path = AAZStrType(
            flags={"required": True},
        )
        disc_script_action_details.timeout = AAZStrType()

        failover_directions = _schema_recovery_plan_action_read.failover_directions
        failover_directions.Element = AAZStrType()

        failover_types = _schema_recovery_plan_action_read.failover_types
        failover_types.Element = AAZStrType()

        _schema.action_name = cls._schema_recovery_plan_action_read.action_name
        _schema.custom_details = cls._schema_recovery_plan_action_read.custom_details
        _schema.failover_directions = cls._schema_recovery_plan_action_read.failover_directions
        _schema.failover_types = cls._schema_recovery_plan_action_read.failover_types


__all__ = ["List"]
