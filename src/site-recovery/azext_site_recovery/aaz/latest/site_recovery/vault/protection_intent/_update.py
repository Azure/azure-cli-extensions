# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault protection-intent update",
)
class Update(AAZCommand):
    """Update operation to create an ASR replication protection intent item.
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationprotectionintents/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.intent_object_name = AAZStrArg(
            options=["-n", "--name", "--intent-object-name"],
            help="Replication protection intent name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.provider_specific_details = AAZObjectArg(
            options=["--provider-details", "--provider-specific-details"],
            arg_group="Properties",
            help="The ReplicationProviderInput. For A2A provider, it will be A2ACreateProtectionIntentInput object.",
            nullable=True,
        )

        provider_specific_details = cls._args_schema.provider_specific_details
        provider_specific_details.a2_a = AAZObjectArg(
            options=["a2-a"],
        )

        a2_a = cls._args_schema.provider_specific_details.a2_a
        a2_a.agent_auto_update_status = AAZStrArg(
            options=["agent-auto-update-status"],
            help="A value indicating whether the auto update is enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        a2_a.auto_protection_of_data_disk = AAZStrArg(
            options=["auto-protection-of-data-disk"],
            help="A value indicating whether the auto protection is enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        a2_a.automation_account_arm_id = AAZStrArg(
            options=["automation-account-arm-id"],
            help="The automation account arm id.",
            nullable=True,
        )
        a2_a.automation_account_authentication_type = AAZStrArg(
            options=["automation-account-authentication-type"],
            help="A value indicating the authentication type for automation account. The default value is \"RunAsAccount\".",
            nullable=True,
            enum={"RunAsAccount": "RunAsAccount", "SystemAssignedIdentity": "SystemAssignedIdentity"},
        )
        a2_a.disk_encryption_info = AAZObjectArg(
            options=["disk-encryption-info"],
            help="The recovery disk encryption information (for two pass flows).",
            nullable=True,
        )
        cls._build_args_disk_encryption_info_update(a2_a.disk_encryption_info)
        a2_a.fabric_object_id = AAZStrArg(
            options=["fabric-object-id"],
            help="The fabric specific object Id of the virtual machine.",
        )
        a2_a.multi_vm_group_id = AAZStrArg(
            options=["multi-vm-group-id"],
            help="The multi vm group id.",
            nullable=True,
        )
        a2_a.multi_vm_group_name = AAZStrArg(
            options=["multi-vm-group-name"],
            help="The multi vm group name.",
            nullable=True,
        )
        a2_a.primary_location = AAZStrArg(
            options=["primary-location"],
            help="The primary location for the virtual machine.",
        )
        a2_a.primary_staging_storage_account_custom_input = AAZObjectArg(
            options=["primary-staging-storage-account-custom-input"],
            help="The primary staging storage account input.",
            nullable=True,
        )
        cls._build_args_storage_account_custom_details_update(a2_a.primary_staging_storage_account_custom_input)
        a2_a.protection_profile_custom_input = AAZObjectArg(
            options=["protection-profile-custom-input"],
            help="The protection profile custom inputs.",
            nullable=True,
        )
        a2_a.recovery_availability_set_custom_input = AAZObjectArg(
            options=["recovery-availability-set-custom-input"],
            help="The recovery availability set input.",
            nullable=True,
        )
        a2_a.recovery_availability_type = AAZStrArg(
            options=["recovery-availability-type"],
            help="The recovery availability type of the virtual machine.",
            enum={"AvailabilitySet": "AvailabilitySet", "AvailabilityZone": "AvailabilityZone", "Single": "Single"},
        )
        a2_a.recovery_availability_zone = AAZStrArg(
            options=["recovery-availability-zone"],
            help="The recovery availability zone.",
            nullable=True,
        )
        a2_a.recovery_boot_diag_storage_account = AAZObjectArg(
            options=["recovery-boot-diag-storage-account"],
            help="The boot diagnostic storage account.",
            nullable=True,
        )
        cls._build_args_storage_account_custom_details_update(a2_a.recovery_boot_diag_storage_account)
        a2_a.recovery_location = AAZStrArg(
            options=["recovery-location"],
            help="The recovery location for the virtual machine.",
        )
        a2_a.recovery_proximity_placement_group_custom_input = AAZObjectArg(
            options=["recovery-proximity-placement-group-custom-input"],
            help="The recovery proximity placement group custom input.",
            nullable=True,
        )
        a2_a.recovery_resource_group_id = AAZStrArg(
            options=["recovery-resource-group-id"],
            help="The recovery resource group Id. Valid for V2 scenarios.",
        )
        a2_a.recovery_subscription_id = AAZStrArg(
            options=["recovery-subscription-id"],
            help="The recovery subscription Id of the virtual machine.",
        )
        a2_a.recovery_virtual_network_custom_input = AAZObjectArg(
            options=["recovery-virtual-network-custom-input"],
            help="The recovery virtual network input.",
            nullable=True,
        )
        a2_a.vm_disks = AAZListArg(
            options=["vm-disks"],
            help="The list of vm disk inputs.",
            nullable=True,
        )
        a2_a.vm_managed_disks = AAZListArg(
            options=["vm-managed-disks"],
            help="The list of vm managed disk inputs.",
            nullable=True,
        )

        protection_profile_custom_input = cls._args_schema.provider_specific_details.a2_a.protection_profile_custom_input
        protection_profile_custom_input.existing = AAZObjectArg(
            options=["existing"],
        )
        protection_profile_custom_input.new = AAZObjectArg(
            options=["new"],
        )

        existing = cls._args_schema.provider_specific_details.a2_a.protection_profile_custom_input.existing
        existing.protection_profile_id = AAZStrArg(
            options=["protection-profile-id"],
            help="The protection profile Arm Id. Throw error, if resource does not exists.",
        )

        new = cls._args_schema.provider_specific_details.a2_a.protection_profile_custom_input.new
        new.app_consistent_frequency_in_minutes = AAZIntArg(
            options=["app-consistent-frequency-in-minutes"],
            help="The app consistent snapshot frequency (in minutes).",
            nullable=True,
        )
        new.crash_consistent_frequency_in_minutes = AAZIntArg(
            options=["crash-consistent-frequency-in-minutes"],
            help="The crash consistent snapshot frequency (in minutes).",
            nullable=True,
        )
        new.multi_vm_sync_status = AAZStrArg(
            options=["multi-vm-sync-status"],
            help="A value indicating whether multi-VM sync has to be enabled. Value should be 'Enabled' or 'Disabled'.",
            enum={"Disable": "Disable", "Enable": "Enable"},
        )
        new.policy_name = AAZStrArg(
            options=["policy-name"],
            help="The protection profile input.",
        )
        new.recovery_point_history = AAZIntArg(
            options=["recovery-point-history"],
            help="The duration in minutes until which the recovery points need to be stored.",
            nullable=True,
        )

        recovery_availability_set_custom_input = cls._args_schema.provider_specific_details.a2_a.recovery_availability_set_custom_input
        recovery_availability_set_custom_input.existing = AAZObjectArg(
            options=["existing"],
        )

        existing = cls._args_schema.provider_specific_details.a2_a.recovery_availability_set_custom_input.existing
        existing.recovery_availability_set_id = AAZStrArg(
            options=["recovery-availability-set-id"],
            help="The recovery availability set Id. Will throw error, if resource does not exist.",
            nullable=True,
        )

        recovery_proximity_placement_group_custom_input = cls._args_schema.provider_specific_details.a2_a.recovery_proximity_placement_group_custom_input
        recovery_proximity_placement_group_custom_input.existing = AAZObjectArg(
            options=["existing"],
        )

        existing = cls._args_schema.provider_specific_details.a2_a.recovery_proximity_placement_group_custom_input.existing
        existing.recovery_proximity_placement_group_id = AAZStrArg(
            options=["recovery-proximity-placement-group-id"],
            help="The recovery proximity placement group Id. Will throw error, if resource does not exist.",
            nullable=True,
        )

        recovery_virtual_network_custom_input = cls._args_schema.provider_specific_details.a2_a.recovery_virtual_network_custom_input
        recovery_virtual_network_custom_input.existing = AAZObjectArg(
            options=["existing"],
        )
        recovery_virtual_network_custom_input.new = AAZObjectArg(
            options=["new"],
        )

        existing = cls._args_schema.provider_specific_details.a2_a.recovery_virtual_network_custom_input.existing
        existing.recovery_subnet_name = AAZStrArg(
            options=["recovery-subnet-name"],
            help="The recovery subnet name.",
            nullable=True,
        )
        existing.recovery_virtual_network_id = AAZStrArg(
            options=["recovery-virtual-network-id"],
            help="The recovery virtual network Id. Will throw error, if resource does not exist.",
        )

        new = cls._args_schema.provider_specific_details.a2_a.recovery_virtual_network_custom_input.new
        new.recovery_virtual_network_name = AAZStrArg(
            options=["recovery-virtual-network-name"],
            help="The recovery virtual network name.",
            nullable=True,
        )
        new.recovery_virtual_network_resource_group_name = AAZStrArg(
            options=["recovery-virtual-network-resource-group-name"],
            help="The name of the resource group to be used to create the recovery virtual network. If absent, target network would be created in the same resource group as target VM.",
            nullable=True,
        )

        vm_disks = cls._args_schema.provider_specific_details.a2_a.vm_disks
        vm_disks.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.provider_specific_details.a2_a.vm_disks.Element
        _element.disk_uri = AAZStrArg(
            options=["disk-uri"],
            help="The disk Uri.",
        )
        _element.primary_staging_storage_account_custom_input = AAZObjectArg(
            options=["primary-staging-storage-account-custom-input"],
            help="The primary staging storage account input.",
            nullable=True,
        )
        cls._build_args_storage_account_custom_details_update(_element.primary_staging_storage_account_custom_input)
        _element.recovery_azure_storage_account_custom_input = AAZObjectArg(
            options=["recovery-azure-storage-account-custom-input"],
            help="The recovery VHD storage account input.",
            nullable=True,
        )
        cls._build_args_storage_account_custom_details_update(_element.recovery_azure_storage_account_custom_input)

        vm_managed_disks = cls._args_schema.provider_specific_details.a2_a.vm_managed_disks
        vm_managed_disks.Element = AAZObjectArg(
            nullable=True,
        )

        _element = cls._args_schema.provider_specific_details.a2_a.vm_managed_disks.Element
        _element.disk_encryption_info = AAZObjectArg(
            options=["disk-encryption-info"],
            help="The recovery disk encryption information (for one / single pass flows).",
            nullable=True,
        )
        cls._build_args_disk_encryption_info_update(_element.disk_encryption_info)
        _element.disk_id = AAZStrArg(
            options=["disk-id"],
            help="The disk Id.",
        )
        _element.primary_staging_storage_account_custom_input = AAZObjectArg(
            options=["primary-staging-storage-account-custom-input"],
            help="The primary staging storage account input.",
            nullable=True,
        )
        cls._build_args_storage_account_custom_details_update(_element.primary_staging_storage_account_custom_input)
        _element.recovery_disk_encryption_set_id = AAZStrArg(
            options=["recovery-disk-encryption-set-id"],
            help="The recovery disk encryption set Id.",
            nullable=True,
        )
        _element.recovery_replica_disk_account_type = AAZStrArg(
            options=["recovery-replica-disk-account-type"],
            help="The replica disk type. Its an optional value and will be same as source disk type if not user provided.",
            nullable=True,
        )
        _element.recovery_resource_group_custom_input = AAZObjectArg(
            options=["recovery-resource-group-custom-input"],
            help="The recovery resource group input.",
            nullable=True,
        )
        _element.recovery_target_disk_account_type = AAZStrArg(
            options=["recovery-target-disk-account-type"],
            help="The target disk type after failover. Its an optional value and will be same as source disk type if not user provided.",
            nullable=True,
        )

        recovery_resource_group_custom_input = cls._args_schema.provider_specific_details.a2_a.vm_managed_disks.Element.recovery_resource_group_custom_input
        recovery_resource_group_custom_input.existing = AAZObjectArg(
            options=["existing"],
        )

        existing = cls._args_schema.provider_specific_details.a2_a.vm_managed_disks.Element.recovery_resource_group_custom_input.existing
        existing.recovery_resource_group_id = AAZStrArg(
            options=["recovery-resource-group-id"],
            help="The recovery resource group Id. Valid for V2 scenarios.",
            nullable=True,
        )
        return cls._args_schema

    _args_disk_encryption_info_update = None

    @classmethod
    def _build_args_disk_encryption_info_update(cls, _schema):
        if cls._args_disk_encryption_info_update is not None:
            _schema.disk_encryption_key_info = cls._args_disk_encryption_info_update.disk_encryption_key_info
            _schema.key_encryption_key_info = cls._args_disk_encryption_info_update.key_encryption_key_info
            return

        cls._args_disk_encryption_info_update = AAZObjectArg(
            nullable=True,
        )

        disk_encryption_info_update = cls._args_disk_encryption_info_update
        disk_encryption_info_update.disk_encryption_key_info = AAZObjectArg(
            options=["disk-encryption-key-info"],
            help="The recovery KeyVault reference for secret.",
            nullable=True,
        )
        disk_encryption_info_update.key_encryption_key_info = AAZObjectArg(
            options=["key-encryption-key-info"],
            help="The recovery KeyVault reference for key.",
            nullable=True,
        )

        disk_encryption_key_info = cls._args_disk_encryption_info_update.disk_encryption_key_info
        disk_encryption_key_info.key_vault_resource_arm_id = AAZStrArg(
            options=["key-vault-resource-arm-id"],
            help="The KeyVault resource ARM id for secret.",
            nullable=True,
        )
        disk_encryption_key_info.secret_identifier = AAZStrArg(
            options=["secret-identifier"],
            help="The secret url / identifier.",
            nullable=True,
        )

        key_encryption_key_info = cls._args_disk_encryption_info_update.key_encryption_key_info
        key_encryption_key_info.key_identifier = AAZStrArg(
            options=["key-identifier"],
            help="The key URL / identifier.",
            nullable=True,
        )
        key_encryption_key_info.key_vault_resource_arm_id = AAZStrArg(
            options=["key-vault-resource-arm-id"],
            help="The KeyVault resource ARM Id for key.",
            nullable=True,
        )

        _schema.disk_encryption_key_info = cls._args_disk_encryption_info_update.disk_encryption_key_info
        _schema.key_encryption_key_info = cls._args_disk_encryption_info_update.key_encryption_key_info

    _args_storage_account_custom_details_update = None

    @classmethod
    def _build_args_storage_account_custom_details_update(cls, _schema):
        if cls._args_storage_account_custom_details_update is not None:
            _schema.existing = cls._args_storage_account_custom_details_update.existing
            return

        cls._args_storage_account_custom_details_update = AAZObjectArg(
            nullable=True,
        )

        storage_account_custom_details_update = cls._args_storage_account_custom_details_update
        storage_account_custom_details_update.existing = AAZObjectArg(
            options=["existing"],
        )

        existing = cls._args_storage_account_custom_details_update.existing
        existing.azure_storage_account_id = AAZStrArg(
            options=["azure-storage-account-id"],
            help="The storage account Arm Id. Throw error, if resource does not exists.",
        )

        _schema.existing = cls._args_storage_account_custom_details_update.existing

    def _execute_operations(self):
        self.pre_operations()
        self.ReplicationProtectionIntentsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        self.ReplicationProtectionIntentsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationProtectionIntentsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents/{intentObjectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "intentObjectName", self.ctx.args.intent_object_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_replication_protection_intent_read(cls._schema_on_200)

            return cls._schema_on_200

    class ReplicationProtectionIntentsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents/{intentObjectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "intentObjectName", self.ctx.args.intent_object_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_replication_protection_intent_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("providerSpecificDetails", AAZObjectType, ".provider_specific_details")

            provider_specific_details = _builder.get(".properties.providerSpecificDetails")
            if provider_specific_details is not None:
                provider_specific_details.set_const("instanceType", "A2A", AAZStrType, ".a2_a", typ_kwargs={"flags": {"required": True}})
                provider_specific_details.discriminate_by("instanceType", "A2A")

            disc_a2_a = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}")
            if disc_a2_a is not None:
                disc_a2_a.set_prop("agentAutoUpdateStatus", AAZStrType, ".a2_a.agent_auto_update_status")
                disc_a2_a.set_prop("autoProtectionOfDataDisk", AAZStrType, ".a2_a.auto_protection_of_data_disk")
                disc_a2_a.set_prop("automationAccountArmId", AAZStrType, ".a2_a.automation_account_arm_id")
                disc_a2_a.set_prop("automationAccountAuthenticationType", AAZStrType, ".a2_a.automation_account_authentication_type")
                _UpdateHelper._build_schema_disk_encryption_info_update(disc_a2_a.set_prop("diskEncryptionInfo", AAZObjectType, ".a2_a.disk_encryption_info"))
                disc_a2_a.set_prop("fabricObjectId", AAZStrType, ".a2_a.fabric_object_id", typ_kwargs={"flags": {"required": True}})
                disc_a2_a.set_prop("multiVmGroupId", AAZStrType, ".a2_a.multi_vm_group_id")
                disc_a2_a.set_prop("multiVmGroupName", AAZStrType, ".a2_a.multi_vm_group_name")
                disc_a2_a.set_prop("primaryLocation", AAZStrType, ".a2_a.primary_location", typ_kwargs={"flags": {"required": True}})
                _UpdateHelper._build_schema_storage_account_custom_details_update(disc_a2_a.set_prop("primaryStagingStorageAccountCustomInput", AAZObjectType, ".a2_a.primary_staging_storage_account_custom_input"))
                disc_a2_a.set_prop("protectionProfileCustomInput", AAZObjectType, ".a2_a.protection_profile_custom_input")
                disc_a2_a.set_prop("recoveryAvailabilitySetCustomInput", AAZObjectType, ".a2_a.recovery_availability_set_custom_input")
                disc_a2_a.set_prop("recoveryAvailabilityType", AAZStrType, ".a2_a.recovery_availability_type", typ_kwargs={"flags": {"required": True}})
                disc_a2_a.set_prop("recoveryAvailabilityZone", AAZStrType, ".a2_a.recovery_availability_zone")
                _UpdateHelper._build_schema_storage_account_custom_details_update(disc_a2_a.set_prop("recoveryBootDiagStorageAccount", AAZObjectType, ".a2_a.recovery_boot_diag_storage_account"))
                disc_a2_a.set_prop("recoveryLocation", AAZStrType, ".a2_a.recovery_location", typ_kwargs={"flags": {"required": True}})
                disc_a2_a.set_prop("recoveryProximityPlacementGroupCustomInput", AAZObjectType, ".a2_a.recovery_proximity_placement_group_custom_input")
                disc_a2_a.set_prop("recoveryResourceGroupId", AAZStrType, ".a2_a.recovery_resource_group_id", typ_kwargs={"flags": {"required": True}})
                disc_a2_a.set_prop("recoverySubscriptionId", AAZStrType, ".a2_a.recovery_subscription_id", typ_kwargs={"flags": {"required": True}})
                disc_a2_a.set_prop("recoveryVirtualNetworkCustomInput", AAZObjectType, ".a2_a.recovery_virtual_network_custom_input")
                disc_a2_a.set_prop("vmDisks", AAZListType, ".a2_a.vm_disks")
                disc_a2_a.set_prop("vmManagedDisks", AAZListType, ".a2_a.vm_managed_disks")

            protection_profile_custom_input = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.protectionProfileCustomInput")
            if protection_profile_custom_input is not None:
                protection_profile_custom_input.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
                protection_profile_custom_input.set_const("resourceType", "New", AAZStrType, ".new", typ_kwargs={"flags": {"required": True}})
                protection_profile_custom_input.discriminate_by("resourceType", "Existing")
                protection_profile_custom_input.discriminate_by("resourceType", "New")

            disc_existing = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.protectionProfileCustomInput{resourceType:Existing}")
            if disc_existing is not None:
                disc_existing.set_prop("protectionProfileId", AAZStrType, ".existing.protection_profile_id", typ_kwargs={"flags": {"required": True}})

            disc_new = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.protectionProfileCustomInput{resourceType:New}")
            if disc_new is not None:
                disc_new.set_prop("appConsistentFrequencyInMinutes", AAZIntType, ".new.app_consistent_frequency_in_minutes")
                disc_new.set_prop("crashConsistentFrequencyInMinutes", AAZIntType, ".new.crash_consistent_frequency_in_minutes")
                disc_new.set_prop("multiVmSyncStatus", AAZStrType, ".new.multi_vm_sync_status", typ_kwargs={"flags": {"required": True}})
                disc_new.set_prop("policyName", AAZStrType, ".new.policy_name", typ_kwargs={"flags": {"required": True}})
                disc_new.set_prop("recoveryPointHistory", AAZIntType, ".new.recovery_point_history")

            recovery_availability_set_custom_input = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryAvailabilitySetCustomInput")
            if recovery_availability_set_custom_input is not None:
                recovery_availability_set_custom_input.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
                recovery_availability_set_custom_input.discriminate_by("resourceType", "Existing")

            disc_existing = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryAvailabilitySetCustomInput{resourceType:Existing}")
            if disc_existing is not None:
                disc_existing.set_prop("recoveryAvailabilitySetId", AAZStrType, ".existing.recovery_availability_set_id")

            recovery_proximity_placement_group_custom_input = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryProximityPlacementGroupCustomInput")
            if recovery_proximity_placement_group_custom_input is not None:
                recovery_proximity_placement_group_custom_input.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
                recovery_proximity_placement_group_custom_input.discriminate_by("resourceType", "Existing")

            disc_existing = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryProximityPlacementGroupCustomInput{resourceType:Existing}")
            if disc_existing is not None:
                disc_existing.set_prop("recoveryProximityPlacementGroupId", AAZStrType, ".existing.recovery_proximity_placement_group_id")

            recovery_virtual_network_custom_input = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryVirtualNetworkCustomInput")
            if recovery_virtual_network_custom_input is not None:
                recovery_virtual_network_custom_input.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
                recovery_virtual_network_custom_input.set_const("resourceType", "New", AAZStrType, ".new", typ_kwargs={"flags": {"required": True}})
                recovery_virtual_network_custom_input.discriminate_by("resourceType", "Existing")
                recovery_virtual_network_custom_input.discriminate_by("resourceType", "New")

            disc_existing = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryVirtualNetworkCustomInput{resourceType:Existing}")
            if disc_existing is not None:
                disc_existing.set_prop("recoverySubnetName", AAZStrType, ".existing.recovery_subnet_name")
                disc_existing.set_prop("recoveryVirtualNetworkId", AAZStrType, ".existing.recovery_virtual_network_id", typ_kwargs={"flags": {"required": True}})

            disc_new = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.recoveryVirtualNetworkCustomInput{resourceType:New}")
            if disc_new is not None:
                disc_new.set_prop("recoveryVirtualNetworkName", AAZStrType, ".new.recovery_virtual_network_name")
                disc_new.set_prop("recoveryVirtualNetworkResourceGroupName", AAZStrType, ".new.recovery_virtual_network_resource_group_name")

            vm_disks = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmDisks")
            if vm_disks is not None:
                vm_disks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmDisks[]")
            if _elements is not None:
                _elements.set_prop("diskUri", AAZStrType, ".disk_uri", typ_kwargs={"flags": {"required": True}})
                _UpdateHelper._build_schema_storage_account_custom_details_update(_elements.set_prop("primaryStagingStorageAccountCustomInput", AAZObjectType, ".primary_staging_storage_account_custom_input"))
                _UpdateHelper._build_schema_storage_account_custom_details_update(_elements.set_prop("recoveryAzureStorageAccountCustomInput", AAZObjectType, ".recovery_azure_storage_account_custom_input"))

            vm_managed_disks = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmManagedDisks")
            if vm_managed_disks is not None:
                vm_managed_disks.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmManagedDisks[]")
            if _elements is not None:
                _UpdateHelper._build_schema_disk_encryption_info_update(_elements.set_prop("diskEncryptionInfo", AAZObjectType, ".disk_encryption_info"))
                _elements.set_prop("diskId", AAZStrType, ".disk_id", typ_kwargs={"flags": {"required": True}})
                _UpdateHelper._build_schema_storage_account_custom_details_update(_elements.set_prop("primaryStagingStorageAccountCustomInput", AAZObjectType, ".primary_staging_storage_account_custom_input"))
                _elements.set_prop("recoveryDiskEncryptionSetId", AAZStrType, ".recovery_disk_encryption_set_id")
                _elements.set_prop("recoveryReplicaDiskAccountType", AAZStrType, ".recovery_replica_disk_account_type")
                _elements.set_prop("recoveryResourceGroupCustomInput", AAZObjectType, ".recovery_resource_group_custom_input")
                _elements.set_prop("recoveryTargetDiskAccountType", AAZStrType, ".recovery_target_disk_account_type")

            recovery_resource_group_custom_input = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmManagedDisks[].recoveryResourceGroupCustomInput")
            if recovery_resource_group_custom_input is not None:
                recovery_resource_group_custom_input.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
                recovery_resource_group_custom_input.discriminate_by("resourceType", "Existing")

            disc_existing = _builder.get(".properties.providerSpecificDetails{instanceType:A2A}.vmManagedDisks[].recoveryResourceGroupCustomInput{resourceType:Existing}")
            if disc_existing is not None:
                disc_existing.set_prop("recoveryResourceGroupId", AAZStrType, ".existing.recovery_resource_group_id")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    @classmethod
    def _build_schema_disk_encryption_info_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_prop("diskEncryptionKeyInfo", AAZObjectType, ".disk_encryption_key_info")
        _builder.set_prop("keyEncryptionKeyInfo", AAZObjectType, ".key_encryption_key_info")

        disk_encryption_key_info = _builder.get(".diskEncryptionKeyInfo")
        if disk_encryption_key_info is not None:
            disk_encryption_key_info.set_prop("keyVaultResourceArmId", AAZStrType, ".key_vault_resource_arm_id")
            disk_encryption_key_info.set_prop("secretIdentifier", AAZStrType, ".secret_identifier")

        key_encryption_key_info = _builder.get(".keyEncryptionKeyInfo")
        if key_encryption_key_info is not None:
            key_encryption_key_info.set_prop("keyIdentifier", AAZStrType, ".key_identifier")
            key_encryption_key_info.set_prop("keyVaultResourceArmId", AAZStrType, ".key_vault_resource_arm_id")

    @classmethod
    def _build_schema_storage_account_custom_details_update(cls, _builder):
        if _builder is None:
            return
        _builder.set_const("resourceType", "Existing", AAZStrType, ".existing", typ_kwargs={"flags": {"required": True}})
        _builder.discriminate_by("resourceType", "Existing")

        disc_existing = _builder.get("{resourceType:Existing}")
        if disc_existing is not None:
            disc_existing.set_prop("azureStorageAccountId", AAZStrType, ".existing.azure_storage_account_id", typ_kwargs={"flags": {"required": True}})

    _schema_disk_encryption_info_read = None

    @classmethod
    def _build_schema_disk_encryption_info_read(cls, _schema):
        if cls._schema_disk_encryption_info_read is not None:
            _schema.disk_encryption_key_info = cls._schema_disk_encryption_info_read.disk_encryption_key_info
            _schema.key_encryption_key_info = cls._schema_disk_encryption_info_read.key_encryption_key_info
            return

        cls._schema_disk_encryption_info_read = _schema_disk_encryption_info_read = AAZObjectType()

        disk_encryption_info_read = _schema_disk_encryption_info_read
        disk_encryption_info_read.disk_encryption_key_info = AAZObjectType(
            serialized_name="diskEncryptionKeyInfo",
        )
        disk_encryption_info_read.key_encryption_key_info = AAZObjectType(
            serialized_name="keyEncryptionKeyInfo",
        )

        disk_encryption_key_info = _schema_disk_encryption_info_read.disk_encryption_key_info
        disk_encryption_key_info.key_vault_resource_arm_id = AAZStrType(
            serialized_name="keyVaultResourceArmId",
        )
        disk_encryption_key_info.secret_identifier = AAZStrType(
            serialized_name="secretIdentifier",
        )

        key_encryption_key_info = _schema_disk_encryption_info_read.key_encryption_key_info
        key_encryption_key_info.key_identifier = AAZStrType(
            serialized_name="keyIdentifier",
        )
        key_encryption_key_info.key_vault_resource_arm_id = AAZStrType(
            serialized_name="keyVaultResourceArmId",
        )

        _schema.disk_encryption_key_info = cls._schema_disk_encryption_info_read.disk_encryption_key_info
        _schema.key_encryption_key_info = cls._schema_disk_encryption_info_read.key_encryption_key_info

    _schema_replication_protection_intent_read = None

    @classmethod
    def _build_schema_replication_protection_intent_read(cls, _schema):
        if cls._schema_replication_protection_intent_read is not None:
            _schema.id = cls._schema_replication_protection_intent_read.id
            _schema.location = cls._schema_replication_protection_intent_read.location
            _schema.name = cls._schema_replication_protection_intent_read.name
            _schema.properties = cls._schema_replication_protection_intent_read.properties
            _schema.type = cls._schema_replication_protection_intent_read.type
            return

        cls._schema_replication_protection_intent_read = _schema_replication_protection_intent_read = AAZObjectType()

        replication_protection_intent_read = _schema_replication_protection_intent_read
        replication_protection_intent_read.id = AAZStrType(
            flags={"read_only": True},
        )
        replication_protection_intent_read.location = AAZStrType()
        replication_protection_intent_read.name = AAZStrType(
            flags={"read_only": True},
        )
        replication_protection_intent_read.properties = AAZObjectType()
        replication_protection_intent_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_replication_protection_intent_read.properties
        properties.creation_time_utc = AAZStrType(
            serialized_name="creationTimeUTC",
            flags={"read_only": True},
        )
        properties.friendly_name = AAZStrType(
            serialized_name="friendlyName",
        )
        properties.is_active = AAZBoolType(
            serialized_name="isActive",
            flags={"read_only": True},
        )
        properties.job_id = AAZStrType(
            serialized_name="jobId",
            flags={"read_only": True},
        )
        properties.job_state = AAZStrType(
            serialized_name="jobState",
            flags={"read_only": True},
        )
        properties.provider_specific_details = AAZObjectType(
            serialized_name="providerSpecificDetails",
        )

        provider_specific_details = _schema_replication_protection_intent_read.properties.provider_specific_details
        provider_specific_details.instance_type = AAZStrType(
            serialized_name="instanceType",
            flags={"required": True},
        )

        disc_a2_a = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A")
        disc_a2_a.agent_auto_update_status = AAZStrType(
            serialized_name="agentAutoUpdateStatus",
        )
        disc_a2_a.auto_protection_of_data_disk = AAZStrType(
            serialized_name="autoProtectionOfDataDisk",
        )
        disc_a2_a.automation_account_arm_id = AAZStrType(
            serialized_name="automationAccountArmId",
        )
        disc_a2_a.automation_account_authentication_type = AAZStrType(
            serialized_name="automationAccountAuthenticationType",
        )
        disc_a2_a.disk_encryption_info = AAZObjectType(
            serialized_name="diskEncryptionInfo",
        )
        cls._build_schema_disk_encryption_info_read(disc_a2_a.disk_encryption_info)
        disc_a2_a.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
        )
        disc_a2_a.multi_vm_group_id = AAZStrType(
            serialized_name="multiVmGroupId",
        )
        disc_a2_a.multi_vm_group_name = AAZStrType(
            serialized_name="multiVmGroupName",
        )
        disc_a2_a.primary_location = AAZStrType(
            serialized_name="primaryLocation",
        )
        disc_a2_a.primary_staging_storage_account = AAZObjectType(
            serialized_name="primaryStagingStorageAccount",
        )
        cls._build_schema_storage_account_custom_details_read(disc_a2_a.primary_staging_storage_account)
        disc_a2_a.protection_profile = AAZObjectType(
            serialized_name="protectionProfile",
        )
        disc_a2_a.recovery_availability_set = AAZObjectType(
            serialized_name="recoveryAvailabilitySet",
        )
        disc_a2_a.recovery_availability_type = AAZStrType(
            serialized_name="recoveryAvailabilityType",
            flags={"required": True},
        )
        disc_a2_a.recovery_availability_zone = AAZStrType(
            serialized_name="recoveryAvailabilityZone",
        )
        disc_a2_a.recovery_boot_diag_storage_account = AAZObjectType(
            serialized_name="recoveryBootDiagStorageAccount",
        )
        cls._build_schema_storage_account_custom_details_read(disc_a2_a.recovery_boot_diag_storage_account)
        disc_a2_a.recovery_location = AAZStrType(
            serialized_name="recoveryLocation",
        )
        disc_a2_a.recovery_proximity_placement_group = AAZObjectType(
            serialized_name="recoveryProximityPlacementGroup",
        )
        disc_a2_a.recovery_resource_group_id = AAZStrType(
            serialized_name="recoveryResourceGroupId",
        )
        disc_a2_a.recovery_subscription_id = AAZStrType(
            serialized_name="recoverySubscriptionId",
        )
        disc_a2_a.recovery_virtual_network = AAZObjectType(
            serialized_name="recoveryVirtualNetwork",
        )
        disc_a2_a.vm_disks = AAZListType(
            serialized_name="vmDisks",
        )
        disc_a2_a.vm_managed_disks = AAZListType(
            serialized_name="vmManagedDisks",
        )

        protection_profile = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile
        protection_profile.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile.discriminate_by("resource_type", "Existing")
        disc_existing.protection_profile_id = AAZStrType(
            serialized_name="protectionProfileId",
            flags={"required": True},
        )

        disc_new = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile.discriminate_by("resource_type", "New")
        disc_new.app_consistent_frequency_in_minutes = AAZIntType(
            serialized_name="appConsistentFrequencyInMinutes",
        )
        disc_new.crash_consistent_frequency_in_minutes = AAZIntType(
            serialized_name="crashConsistentFrequencyInMinutes",
        )
        disc_new.multi_vm_sync_status = AAZStrType(
            serialized_name="multiVmSyncStatus",
            flags={"required": True},
        )
        disc_new.policy_name = AAZStrType(
            serialized_name="policyName",
            flags={"required": True},
        )
        disc_new.recovery_point_history = AAZIntType(
            serialized_name="recoveryPointHistory",
        )

        recovery_availability_set = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_availability_set
        recovery_availability_set.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_availability_set.discriminate_by("resource_type", "Existing")
        disc_existing.recovery_availability_set_id = AAZStrType(
            serialized_name="recoveryAvailabilitySetId",
        )

        recovery_proximity_placement_group = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_proximity_placement_group
        recovery_proximity_placement_group.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_proximity_placement_group.discriminate_by("resource_type", "Existing")
        disc_existing.recovery_proximity_placement_group_id = AAZStrType(
            serialized_name="recoveryProximityPlacementGroupId",
        )

        recovery_virtual_network = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network
        recovery_virtual_network.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network.discriminate_by("resource_type", "Existing")
        disc_existing.recovery_subnet_name = AAZStrType(
            serialized_name="recoverySubnetName",
        )
        disc_existing.recovery_virtual_network_id = AAZStrType(
            serialized_name="recoveryVirtualNetworkId",
            flags={"required": True},
        )

        disc_new = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network.discriminate_by("resource_type", "New")
        disc_new.recovery_virtual_network_name = AAZStrType(
            serialized_name="recoveryVirtualNetworkName",
        )
        disc_new.recovery_virtual_network_resource_group_name = AAZStrType(
            serialized_name="recoveryVirtualNetworkResourceGroupName",
        )

        vm_disks = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_disks
        vm_disks.Element = AAZObjectType()

        _element = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_disks.Element
        _element.disk_uri = AAZStrType(
            serialized_name="diskUri",
            flags={"required": True},
        )
        _element.primary_staging_storage_account_custom_input = AAZObjectType(
            serialized_name="primaryStagingStorageAccountCustomInput",
        )
        cls._build_schema_storage_account_custom_details_read(_element.primary_staging_storage_account_custom_input)
        _element.recovery_azure_storage_account_custom_input = AAZObjectType(
            serialized_name="recoveryAzureStorageAccountCustomInput",
        )
        cls._build_schema_storage_account_custom_details_read(_element.recovery_azure_storage_account_custom_input)

        vm_managed_disks = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks
        vm_managed_disks.Element = AAZObjectType()

        _element = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element
        _element.disk_encryption_info = AAZObjectType(
            serialized_name="diskEncryptionInfo",
        )
        cls._build_schema_disk_encryption_info_read(_element.disk_encryption_info)
        _element.disk_id = AAZStrType(
            serialized_name="diskId",
            flags={"required": True},
        )
        _element.primary_staging_storage_account_custom_input = AAZObjectType(
            serialized_name="primaryStagingStorageAccountCustomInput",
        )
        cls._build_schema_storage_account_custom_details_read(_element.primary_staging_storage_account_custom_input)
        _element.recovery_disk_encryption_set_id = AAZStrType(
            serialized_name="recoveryDiskEncryptionSetId",
        )
        _element.recovery_replica_disk_account_type = AAZStrType(
            serialized_name="recoveryReplicaDiskAccountType",
        )
        _element.recovery_resource_group_custom_input = AAZObjectType(
            serialized_name="recoveryResourceGroupCustomInput",
        )
        _element.recovery_target_disk_account_type = AAZStrType(
            serialized_name="recoveryTargetDiskAccountType",
        )

        recovery_resource_group_custom_input = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element.recovery_resource_group_custom_input
        recovery_resource_group_custom_input.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_replication_protection_intent_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element.recovery_resource_group_custom_input.discriminate_by("resource_type", "Existing")
        disc_existing.recovery_resource_group_id = AAZStrType(
            serialized_name="recoveryResourceGroupId",
        )

        _schema.id = cls._schema_replication_protection_intent_read.id
        _schema.location = cls._schema_replication_protection_intent_read.location
        _schema.name = cls._schema_replication_protection_intent_read.name
        _schema.properties = cls._schema_replication_protection_intent_read.properties
        _schema.type = cls._schema_replication_protection_intent_read.type

    _schema_storage_account_custom_details_read = None

    @classmethod
    def _build_schema_storage_account_custom_details_read(cls, _schema):
        if cls._schema_storage_account_custom_details_read is not None:
            _schema.resource_type = cls._schema_storage_account_custom_details_read.resource_type
            _schema.discriminate_by(
                "resource_type",
                "Existing",
                cls._schema_storage_account_custom_details_read.discriminate_by(
                    "resource_type",
                    "Existing",
                )
            )
            return

        cls._schema_storage_account_custom_details_read = _schema_storage_account_custom_details_read = AAZObjectType()

        storage_account_custom_details_read = _schema_storage_account_custom_details_read
        storage_account_custom_details_read.resource_type = AAZStrType(
            serialized_name="resourceType",
            flags={"required": True},
        )

        disc_existing = _schema_storage_account_custom_details_read.discriminate_by("resource_type", "Existing")
        disc_existing.azure_storage_account_id = AAZStrType(
            serialized_name="azureStorageAccountId",
            flags={"required": True},
        )

        _schema.resource_type = cls._schema_storage_account_custom_details_read.resource_type
        _schema.discriminate_by(
                "resource_type",
                "Existing",
                cls._schema_storage_account_custom_details_read.discriminate_by(
                    "resource_type",
                    "Existing",
                )
            )


__all__ = ["Update"]
