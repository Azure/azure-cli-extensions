# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault protection-intent show",
)
class Show(AAZCommand):
    """Get the details of an ASR replication protection intent.
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationprotectionintents/{}", "2022-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        self._execute_operations()
        return self._output()

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.intent_object_name = AAZStrArg(
            options=["-n", "--name", "--intent-object-name"],
            help="Replication protection intent name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.ReplicationProtectionIntentsGet(ctx=self.ctx)()

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationProtectionIntentsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationProtectionIntents/{intentObjectName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "intentObjectName", self.ctx.args.intent_object_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.creation_time_utc = AAZStrType(
                serialized_name="creationTimeUTC",
                flags={"read_only": True},
            )
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.is_active = AAZBoolType(
                serialized_name="isActive",
                flags={"read_only": True},
            )
            properties.job_id = AAZStrType(
                serialized_name="jobId",
                flags={"read_only": True},
            )
            properties.job_state = AAZStrType(
                serialized_name="jobState",
                flags={"read_only": True},
            )
            properties.provider_specific_details = AAZObjectType(
                serialized_name="providerSpecificDetails",
            )

            provider_specific_details = cls._schema_on_200.properties.provider_specific_details
            provider_specific_details.instance_type = AAZStrType(
                serialized_name="instanceType",
                flags={"required": True},
            )

            disc_a2_a = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A")
            disc_a2_a.agent_auto_update_status = AAZStrType(
                serialized_name="agentAutoUpdateStatus",
            )
            disc_a2_a.auto_protection_of_data_disk = AAZStrType(
                serialized_name="autoProtectionOfDataDisk",
            )
            disc_a2_a.automation_account_arm_id = AAZStrType(
                serialized_name="automationAccountArmId",
            )
            disc_a2_a.automation_account_authentication_type = AAZStrType(
                serialized_name="automationAccountAuthenticationType",
            )
            disc_a2_a.disk_encryption_info = AAZObjectType(
                serialized_name="diskEncryptionInfo",
            )
            _build_schema_disk_encryption_info_read(disc_a2_a.disk_encryption_info)
            disc_a2_a.fabric_object_id = AAZStrType(
                serialized_name="fabricObjectId",
            )
            disc_a2_a.multi_vm_group_id = AAZStrType(
                serialized_name="multiVmGroupId",
            )
            disc_a2_a.multi_vm_group_name = AAZStrType(
                serialized_name="multiVmGroupName",
            )
            disc_a2_a.primary_location = AAZStrType(
                serialized_name="primaryLocation",
            )
            disc_a2_a.primary_staging_storage_account = AAZObjectType(
                serialized_name="primaryStagingStorageAccount",
            )
            _build_schema_storage_account_custom_details_read(disc_a2_a.primary_staging_storage_account)
            disc_a2_a.protection_profile = AAZObjectType(
                serialized_name="protectionProfile",
            )
            disc_a2_a.recovery_availability_set = AAZObjectType(
                serialized_name="recoveryAvailabilitySet",
            )
            disc_a2_a.recovery_availability_type = AAZStrType(
                serialized_name="recoveryAvailabilityType",
                flags={"required": True},
            )
            disc_a2_a.recovery_availability_zone = AAZStrType(
                serialized_name="recoveryAvailabilityZone",
            )
            disc_a2_a.recovery_boot_diag_storage_account = AAZObjectType(
                serialized_name="recoveryBootDiagStorageAccount",
            )
            _build_schema_storage_account_custom_details_read(disc_a2_a.recovery_boot_diag_storage_account)
            disc_a2_a.recovery_location = AAZStrType(
                serialized_name="recoveryLocation",
            )
            disc_a2_a.recovery_proximity_placement_group = AAZObjectType(
                serialized_name="recoveryProximityPlacementGroup",
            )
            disc_a2_a.recovery_resource_group_id = AAZStrType(
                serialized_name="recoveryResourceGroupId",
            )
            disc_a2_a.recovery_subscription_id = AAZStrType(
                serialized_name="recoverySubscriptionId",
            )
            disc_a2_a.recovery_virtual_network = AAZObjectType(
                serialized_name="recoveryVirtualNetwork",
            )
            disc_a2_a.vm_disks = AAZListType(
                serialized_name="vmDisks",
            )
            disc_a2_a.vm_managed_disks = AAZListType(
                serialized_name="vmManagedDisks",
            )

            protection_profile = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile
            protection_profile.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"required": True},
            )

            disc_existing = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile.discriminate_by("resource_type", "Existing")
            disc_existing.protection_profile_id = AAZStrType(
                serialized_name="protectionProfileId",
                flags={"required": True},
            )

            disc_new = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").protection_profile.discriminate_by("resource_type", "New")
            disc_new.app_consistent_frequency_in_minutes = AAZIntType(
                serialized_name="appConsistentFrequencyInMinutes",
            )
            disc_new.crash_consistent_frequency_in_minutes = AAZIntType(
                serialized_name="crashConsistentFrequencyInMinutes",
            )
            disc_new.multi_vm_sync_status = AAZStrType(
                serialized_name="multiVmSyncStatus",
                flags={"required": True},
            )
            disc_new.policy_name = AAZStrType(
                serialized_name="policyName",
                flags={"required": True},
            )
            disc_new.recovery_point_history = AAZIntType(
                serialized_name="recoveryPointHistory",
            )

            recovery_availability_set = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_availability_set
            recovery_availability_set.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"required": True},
            )

            disc_existing = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_availability_set.discriminate_by("resource_type", "Existing")
            disc_existing.recovery_availability_set_id = AAZStrType(
                serialized_name="recoveryAvailabilitySetId",
            )

            recovery_proximity_placement_group = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_proximity_placement_group
            recovery_proximity_placement_group.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"required": True},
            )

            disc_existing = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_proximity_placement_group.discriminate_by("resource_type", "Existing")
            disc_existing.recovery_proximity_placement_group_id = AAZStrType(
                serialized_name="recoveryProximityPlacementGroupId",
            )

            recovery_virtual_network = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network
            recovery_virtual_network.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"required": True},
            )

            disc_existing = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network.discriminate_by("resource_type", "Existing")
            disc_existing.recovery_subnet_name = AAZStrType(
                serialized_name="recoverySubnetName",
            )
            disc_existing.recovery_virtual_network_id = AAZStrType(
                serialized_name="recoveryVirtualNetworkId",
                flags={"required": True},
            )

            disc_new = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").recovery_virtual_network.discriminate_by("resource_type", "New")
            disc_new.recovery_virtual_network_name = AAZStrType(
                serialized_name="recoveryVirtualNetworkName",
            )
            disc_new.recovery_virtual_network_resource_group_name = AAZStrType(
                serialized_name="recoveryVirtualNetworkResourceGroupName",
            )

            vm_disks = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_disks
            vm_disks.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_disks.Element
            _element.disk_uri = AAZStrType(
                serialized_name="diskUri",
                flags={"required": True},
            )
            _element.primary_staging_storage_account_custom_input = AAZObjectType(
                serialized_name="primaryStagingStorageAccountCustomInput",
            )
            _build_schema_storage_account_custom_details_read(_element.primary_staging_storage_account_custom_input)
            _element.recovery_azure_storage_account_custom_input = AAZObjectType(
                serialized_name="recoveryAzureStorageAccountCustomInput",
            )
            _build_schema_storage_account_custom_details_read(_element.recovery_azure_storage_account_custom_input)

            vm_managed_disks = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks
            vm_managed_disks.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element
            _element.disk_encryption_info = AAZObjectType(
                serialized_name="diskEncryptionInfo",
            )
            _build_schema_disk_encryption_info_read(_element.disk_encryption_info)
            _element.disk_id = AAZStrType(
                serialized_name="diskId",
                flags={"required": True},
            )
            _element.primary_staging_storage_account_custom_input = AAZObjectType(
                serialized_name="primaryStagingStorageAccountCustomInput",
            )
            _build_schema_storage_account_custom_details_read(_element.primary_staging_storage_account_custom_input)
            _element.recovery_disk_encryption_set_id = AAZStrType(
                serialized_name="recoveryDiskEncryptionSetId",
            )
            _element.recovery_replica_disk_account_type = AAZStrType(
                serialized_name="recoveryReplicaDiskAccountType",
            )
            _element.recovery_resource_group_custom_input = AAZObjectType(
                serialized_name="recoveryResourceGroupCustomInput",
            )
            _element.recovery_target_disk_account_type = AAZStrType(
                serialized_name="recoveryTargetDiskAccountType",
            )

            recovery_resource_group_custom_input = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element.recovery_resource_group_custom_input
            recovery_resource_group_custom_input.resource_type = AAZStrType(
                serialized_name="resourceType",
                flags={"required": True},
            )

            disc_existing = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "A2A").vm_managed_disks.Element.recovery_resource_group_custom_input.discriminate_by("resource_type", "Existing")
            disc_existing.recovery_resource_group_id = AAZStrType(
                serialized_name="recoveryResourceGroupId",
            )

            return cls._schema_on_200


_schema_disk_encryption_info_read = None


def _build_schema_disk_encryption_info_read(_schema):
    global _schema_disk_encryption_info_read
    if _schema_disk_encryption_info_read is not None:
        _schema.disk_encryption_key_info = _schema_disk_encryption_info_read.disk_encryption_key_info
        _schema.key_encryption_key_info = _schema_disk_encryption_info_read.key_encryption_key_info
        return

    _schema_disk_encryption_info_read = AAZObjectType()

    disk_encryption_info_read = _schema_disk_encryption_info_read
    disk_encryption_info_read.disk_encryption_key_info = AAZObjectType(
        serialized_name="diskEncryptionKeyInfo",
    )
    disk_encryption_info_read.key_encryption_key_info = AAZObjectType(
        serialized_name="keyEncryptionKeyInfo",
    )

    disk_encryption_key_info = _schema_disk_encryption_info_read.disk_encryption_key_info
    disk_encryption_key_info.key_vault_resource_arm_id = AAZStrType(
        serialized_name="keyVaultResourceArmId",
    )
    disk_encryption_key_info.secret_identifier = AAZStrType(
        serialized_name="secretIdentifier",
    )

    key_encryption_key_info = _schema_disk_encryption_info_read.key_encryption_key_info
    key_encryption_key_info.key_identifier = AAZStrType(
        serialized_name="keyIdentifier",
    )
    key_encryption_key_info.key_vault_resource_arm_id = AAZStrType(
        serialized_name="keyVaultResourceArmId",
    )

    _schema.disk_encryption_key_info = _schema_disk_encryption_info_read.disk_encryption_key_info
    _schema.key_encryption_key_info = _schema_disk_encryption_info_read.key_encryption_key_info


_schema_storage_account_custom_details_read = None


def _build_schema_storage_account_custom_details_read(_schema):
    global _schema_storage_account_custom_details_read
    if _schema_storage_account_custom_details_read is not None:
        _schema.resource_type = _schema_storage_account_custom_details_read.resource_type
        _schema.discriminate_by(
            "resource_type",
            "Existing",
            _schema_storage_account_custom_details_read.discriminate_by(
                "resource_type",
                "Existing",
            )
        )
        return

    _schema_storage_account_custom_details_read = AAZObjectType()

    storage_account_custom_details_read = _schema_storage_account_custom_details_read
    storage_account_custom_details_read.resource_type = AAZStrType(
        serialized_name="resourceType",
        flags={"required": True},
    )

    disc_existing = _schema_storage_account_custom_details_read.discriminate_by("resource_type", "Existing")
    disc_existing.azure_storage_account_id = AAZStrType(
        serialized_name="azureStorageAccountId",
        flags={"required": True},
    )

    _schema.resource_type = _schema_storage_account_custom_details_read.resource_type
    _schema.discriminate_by(
            "resource_type",
            "Existing",
            _schema_storage_account_custom_details_read.discriminate_by(
                "resource_type",
                "Existing",
            )
        )


__all__ = ["Show"]
