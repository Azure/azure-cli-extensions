# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault recovery-plan test-failover",
)
class TestFailover(AAZCommand):
    """The operation to start the test failover of a recovery plan.
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationrecoveryplans/{}/testfailover", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.recovery_plan_name = AAZStrArg(
            options=["--recovery-plan-name"],
            help="Recovery plan name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.failover_direction = AAZStrArg(
            options=["--failover-direction"],
            arg_group="Properties",
            help="The failover direction.",
            required=True,
            enum={"PrimaryToRecovery": "PrimaryToRecovery", "RecoveryToPrimary": "RecoveryToPrimary"},
        )
        _args_schema.network_id = AAZStrArg(
            options=["--network-id"],
            arg_group="Properties",
            help="The Id of the network to be used for test failover.",
        )
        _args_schema.network_type = AAZStrArg(
            options=["--network-type"],
            arg_group="Properties",
            help="The network type to be used for test failover.",
            required=True,
        )
        _args_schema.provider_specific_details = AAZListArg(
            options=["--provider-details", "--provider-specific-details"],
            arg_group="Properties",
            help="The provider specific properties.",
            fmt=AAZListArgFormat(
                max_length=1,
            ),
        )

        provider_specific_details = cls._args_schema.provider_specific_details
        provider_specific_details.Element = AAZObjectArg()

        _element = cls._args_schema.provider_specific_details.Element
        _element.a2_a = AAZObjectArg(
            options=["a2-a"],
        )
        _element.hyper_v_replica_azure = AAZObjectArg(
            options=["hyper-v-replica-azure"],
        )
        _element.hyper_v_replica_azure_failback = AAZObjectArg(
            options=["hyper-v-replica-azure-failback"],
        )
        _element.in_mage = AAZObjectArg(
            options=["in-mage"],
        )
        _element.in_mage_azure_v2 = AAZObjectArg(
            options=["in-mage-azure-v2"],
        )
        _element.in_mage_rcm = AAZObjectArg(
            options=["in-mage-rcm"],
        )
        _element.in_mage_rcm_failback = AAZObjectArg(
            options=["in-mage-rcm-failback"],
        )

        a2_a = cls._args_schema.provider_specific_details.Element.a2_a
        a2_a.cloud_service_creation_option = AAZStrArg(
            options=["cloud-service-creation-option"],
            help="A value indicating whether to use recovery cloud service for TFO or not.",
        )
        a2_a.multi_vm_sync_point_option = AAZStrArg(
            options=["multi-vm-sync-point-option"],
            help="A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.",
            enum={"UseMultiVmSyncRecoveryPoint": "UseMultiVmSyncRecoveryPoint", "UsePerVmRecoveryPoint": "UsePerVmRecoveryPoint"},
        )
        a2_a.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            required=True,
            enum={"Latest": "Latest", "LatestApplicationConsistent": "LatestApplicationConsistent", "LatestCrashConsistent": "LatestCrashConsistent", "LatestProcessed": "LatestProcessed"},
        )

        hyper_v_replica_azure = cls._args_schema.provider_specific_details.Element.hyper_v_replica_azure
        hyper_v_replica_azure.primary_kek_certificate_pfx = AAZStrArg(
            options=["primary-kek-certificate-pfx"],
            help="The primary KEK certificate PFX.",
        )
        hyper_v_replica_azure.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            enum={"Latest": "Latest", "LatestApplicationConsistent": "LatestApplicationConsistent", "LatestProcessed": "LatestProcessed"},
        )
        hyper_v_replica_azure.secondary_kek_certificate_pfx = AAZStrArg(
            options=["secondary-kek-certificate-pfx"],
            help="The secondary KEK certificate PFX.",
        )

        hyper_v_replica_azure_failback = cls._args_schema.provider_specific_details.Element.hyper_v_replica_azure_failback
        hyper_v_replica_azure_failback.data_sync_option = AAZStrArg(
            options=["data-sync-option"],
            help="The data sync option.",
            required=True,
            enum={"ForDownTime": "ForDownTime", "ForSynchronization": "ForSynchronization"},
        )
        hyper_v_replica_azure_failback.recovery_vm_creation_option = AAZStrArg(
            options=["recovery-vm-creation-option"],
            help="The ALR option.",
            required=True,
            enum={"CreateVmIfNotFound": "CreateVmIfNotFound", "NoAction": "NoAction"},
        )

        in_mage = cls._args_schema.provider_specific_details.Element.in_mage
        in_mage.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            required=True,
            enum={"Custom": "Custom", "LatestTag": "LatestTag", "LatestTime": "LatestTime"},
        )

        in_mage_azure_v2 = cls._args_schema.provider_specific_details.Element.in_mage_azure_v2
        in_mage_azure_v2.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            required=True,
            enum={"Latest": "Latest", "LatestApplicationConsistent": "LatestApplicationConsistent", "LatestCrashConsistent": "LatestCrashConsistent", "LatestProcessed": "LatestProcessed"},
        )
        in_mage_azure_v2.use_multi_vm_sync_point = AAZStrArg(
            options=["use-multi-vm-sync-point"],
            help="A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.",
        )

        in_mage_rcm = cls._args_schema.provider_specific_details.Element.in_mage_rcm
        in_mage_rcm.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            required=True,
            enum={"Latest": "Latest", "LatestApplicationConsistent": "LatestApplicationConsistent", "LatestCrashConsistent": "LatestCrashConsistent", "LatestProcessed": "LatestProcessed"},
        )
        in_mage_rcm.use_multi_vm_sync_point = AAZStrArg(
            options=["use-multi-vm-sync-point"],
            help="A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.",
        )

        in_mage_rcm_failback = cls._args_schema.provider_specific_details.Element.in_mage_rcm_failback
        in_mage_rcm_failback.recovery_point_type = AAZStrArg(
            options=["recovery-point-type"],
            help="The recovery point type.",
            required=True,
            enum={"ApplicationConsistent": "ApplicationConsistent", "CrashConsistent": "CrashConsistent"},
        )
        in_mage_rcm_failback.use_multi_vm_sync_point = AAZStrArg(
            options=["use-multi-vm-sync-point"],
            help="A value indicating whether multi VM sync enabled VMs should use multi VM sync points for failover.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReplicationRecoveryPlansTestFailover(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationRecoveryPlansTestFailover(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationRecoveryPlans/{recoveryPlanName}/testFailover",
                **self.url_parameters
            )

        @property
        def method(self):
            return "POST"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "recoveryPlanName", self.ctx.args.recovery_plan_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("failoverDirection", AAZStrType, ".failover_direction", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("networkId", AAZStrType, ".network_id")
                properties.set_prop("networkType", AAZStrType, ".network_type", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("providerSpecificDetails", AAZListType, ".provider_specific_details")

            provider_specific_details = _builder.get(".properties.providerSpecificDetails")
            if provider_specific_details is not None:
                provider_specific_details.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.providerSpecificDetails[]")
            if _elements is not None:
                _elements.set_const("instanceType", "A2A", AAZStrType, ".a2_a", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "HyperVReplicaAzure", AAZStrType, ".hyper_v_replica_azure", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "HyperVReplicaAzureFailback", AAZStrType, ".hyper_v_replica_azure_failback", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "InMage", AAZStrType, ".in_mage", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "InMageAzureV2", AAZStrType, ".in_mage_azure_v2", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "InMageRcm", AAZStrType, ".in_mage_rcm", typ_kwargs={"flags": {"required": True}})
                _elements.set_const("instanceType", "InMageRcmFailback", AAZStrType, ".in_mage_rcm_failback", typ_kwargs={"flags": {"required": True}})
                _elements.discriminate_by("instanceType", "A2A")
                _elements.discriminate_by("instanceType", "HyperVReplicaAzure")
                _elements.discriminate_by("instanceType", "HyperVReplicaAzureFailback")
                _elements.discriminate_by("instanceType", "InMage")
                _elements.discriminate_by("instanceType", "InMageAzureV2")
                _elements.discriminate_by("instanceType", "InMageRcm")
                _elements.discriminate_by("instanceType", "InMageRcmFailback")

            disc_a2_a = _builder.get(".properties.providerSpecificDetails[]{instanceType:A2A}")
            if disc_a2_a is not None:
                disc_a2_a.set_prop("cloudServiceCreationOption", AAZStrType, ".a2_a.cloud_service_creation_option")
                disc_a2_a.set_prop("multiVmSyncPointOption", AAZStrType, ".a2_a.multi_vm_sync_point_option")
                disc_a2_a.set_prop("recoveryPointType", AAZStrType, ".a2_a.recovery_point_type", typ_kwargs={"flags": {"required": True}})

            disc_hyper_v_replica_azure = _builder.get(".properties.providerSpecificDetails[]{instanceType:HyperVReplicaAzure}")
            if disc_hyper_v_replica_azure is not None:
                disc_hyper_v_replica_azure.set_prop("primaryKekCertificatePfx", AAZStrType, ".hyper_v_replica_azure.primary_kek_certificate_pfx")
                disc_hyper_v_replica_azure.set_prop("recoveryPointType", AAZStrType, ".hyper_v_replica_azure.recovery_point_type")
                disc_hyper_v_replica_azure.set_prop("secondaryKekCertificatePfx", AAZStrType, ".hyper_v_replica_azure.secondary_kek_certificate_pfx")

            disc_hyper_v_replica_azure_failback = _builder.get(".properties.providerSpecificDetails[]{instanceType:HyperVReplicaAzureFailback}")
            if disc_hyper_v_replica_azure_failback is not None:
                disc_hyper_v_replica_azure_failback.set_prop("dataSyncOption", AAZStrType, ".hyper_v_replica_azure_failback.data_sync_option", typ_kwargs={"flags": {"required": True}})
                disc_hyper_v_replica_azure_failback.set_prop("recoveryVmCreationOption", AAZStrType, ".hyper_v_replica_azure_failback.recovery_vm_creation_option", typ_kwargs={"flags": {"required": True}})

            disc_in_mage = _builder.get(".properties.providerSpecificDetails[]{instanceType:InMage}")
            if disc_in_mage is not None:
                disc_in_mage.set_prop("recoveryPointType", AAZStrType, ".in_mage.recovery_point_type", typ_kwargs={"flags": {"required": True}})

            disc_in_mage_azure_v2 = _builder.get(".properties.providerSpecificDetails[]{instanceType:InMageAzureV2}")
            if disc_in_mage_azure_v2 is not None:
                disc_in_mage_azure_v2.set_prop("recoveryPointType", AAZStrType, ".in_mage_azure_v2.recovery_point_type", typ_kwargs={"flags": {"required": True}})
                disc_in_mage_azure_v2.set_prop("useMultiVmSyncPoint", AAZStrType, ".in_mage_azure_v2.use_multi_vm_sync_point")

            disc_in_mage_rcm = _builder.get(".properties.providerSpecificDetails[]{instanceType:InMageRcm}")
            if disc_in_mage_rcm is not None:
                disc_in_mage_rcm.set_prop("recoveryPointType", AAZStrType, ".in_mage_rcm.recovery_point_type", typ_kwargs={"flags": {"required": True}})
                disc_in_mage_rcm.set_prop("useMultiVmSyncPoint", AAZStrType, ".in_mage_rcm.use_multi_vm_sync_point")

            disc_in_mage_rcm_failback = _builder.get(".properties.providerSpecificDetails[]{instanceType:InMageRcmFailback}")
            if disc_in_mage_rcm_failback is not None:
                disc_in_mage_rcm_failback.set_prop("recoveryPointType", AAZStrType, ".in_mage_rcm_failback.recovery_point_type", typ_kwargs={"flags": {"required": True}})
                disc_in_mage_rcm_failback.set_prop("useMultiVmSyncPoint", AAZStrType, ".in_mage_rcm_failback.use_multi_vm_sync_point")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.allowed_operations = AAZListType(
                serialized_name="allowedOperations",
            )
            properties.current_scenario = AAZObjectType(
                serialized_name="currentScenario",
            )
            properties.current_scenario_status = AAZStrType(
                serialized_name="currentScenarioStatus",
            )
            properties.current_scenario_status_description = AAZStrType(
                serialized_name="currentScenarioStatusDescription",
            )
            properties.failover_deployment_model = AAZStrType(
                serialized_name="failoverDeploymentModel",
            )
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.groups = AAZListType()
            properties.last_planned_failover_time = AAZStrType(
                serialized_name="lastPlannedFailoverTime",
            )
            properties.last_test_failover_time = AAZStrType(
                serialized_name="lastTestFailoverTime",
            )
            properties.last_unplanned_failover_time = AAZStrType(
                serialized_name="lastUnplannedFailoverTime",
            )
            properties.primary_fabric_friendly_name = AAZStrType(
                serialized_name="primaryFabricFriendlyName",
            )
            properties.primary_fabric_id = AAZStrType(
                serialized_name="primaryFabricId",
            )
            properties.provider_specific_details = AAZListType(
                serialized_name="providerSpecificDetails",
            )
            properties.recovery_fabric_friendly_name = AAZStrType(
                serialized_name="recoveryFabricFriendlyName",
            )
            properties.recovery_fabric_id = AAZStrType(
                serialized_name="recoveryFabricId",
            )
            properties.replication_providers = AAZListType(
                serialized_name="replicationProviders",
            )

            allowed_operations = cls._schema_on_200.properties.allowed_operations
            allowed_operations.Element = AAZStrType()

            current_scenario = cls._schema_on_200.properties.current_scenario
            current_scenario.job_id = AAZStrType(
                serialized_name="jobId",
            )
            current_scenario.scenario_name = AAZStrType(
                serialized_name="scenarioName",
            )
            current_scenario.start_time = AAZStrType(
                serialized_name="startTime",
            )

            groups = cls._schema_on_200.properties.groups
            groups.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.groups.Element
            _element.end_group_actions = AAZListType(
                serialized_name="endGroupActions",
            )
            _element.group_type = AAZStrType(
                serialized_name="groupType",
                flags={"required": True},
            )
            _element.replication_protected_items = AAZListType(
                serialized_name="replicationProtectedItems",
            )
            _element.start_group_actions = AAZListType(
                serialized_name="startGroupActions",
            )

            end_group_actions = cls._schema_on_200.properties.groups.Element.end_group_actions
            end_group_actions.Element = AAZObjectType()
            _TestFailoverHelper._build_schema_recovery_plan_action_read(end_group_actions.Element)

            replication_protected_items = cls._schema_on_200.properties.groups.Element.replication_protected_items
            replication_protected_items.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.groups.Element.replication_protected_items.Element
            _element.id = AAZStrType()
            _element.virtual_machine_id = AAZStrType(
                serialized_name="virtualMachineId",
            )

            start_group_actions = cls._schema_on_200.properties.groups.Element.start_group_actions
            start_group_actions.Element = AAZObjectType()
            _TestFailoverHelper._build_schema_recovery_plan_action_read(start_group_actions.Element)

            provider_specific_details = cls._schema_on_200.properties.provider_specific_details
            provider_specific_details.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_specific_details.Element
            _element.instance_type = AAZStrType(
                serialized_name="instanceType",
                flags={"required": True},
            )

            disc_a2_a = cls._schema_on_200.properties.provider_specific_details.Element.discriminate_by("instance_type", "A2A")
            disc_a2_a.primary_zone = AAZStrType(
                serialized_name="primaryZone",
            )
            disc_a2_a.recovery_zone = AAZStrType(
                serialized_name="recoveryZone",
            )

            replication_providers = cls._schema_on_200.properties.replication_providers
            replication_providers.Element = AAZStrType()

            return cls._schema_on_200


class _TestFailoverHelper:
    """Helper class for TestFailover"""

    _schema_recovery_plan_action_read = None

    @classmethod
    def _build_schema_recovery_plan_action_read(cls, _schema):
        if cls._schema_recovery_plan_action_read is not None:
            _schema.action_name = cls._schema_recovery_plan_action_read.action_name
            _schema.custom_details = cls._schema_recovery_plan_action_read.custom_details
            _schema.failover_directions = cls._schema_recovery_plan_action_read.failover_directions
            _schema.failover_types = cls._schema_recovery_plan_action_read.failover_types
            return

        cls._schema_recovery_plan_action_read = _schema_recovery_plan_action_read = AAZObjectType()

        recovery_plan_action_read = _schema_recovery_plan_action_read
        recovery_plan_action_read.action_name = AAZStrType(
            serialized_name="actionName",
            flags={"required": True},
        )
        recovery_plan_action_read.custom_details = AAZObjectType(
            serialized_name="customDetails",
            flags={"required": True},
        )
        recovery_plan_action_read.failover_directions = AAZListType(
            serialized_name="failoverDirections",
            flags={"required": True},
        )
        recovery_plan_action_read.failover_types = AAZListType(
            serialized_name="failoverTypes",
            flags={"required": True},
        )

        custom_details = _schema_recovery_plan_action_read.custom_details
        custom_details.instance_type = AAZStrType(
            serialized_name="instanceType",
            flags={"required": True},
        )

        disc_automation_runbook_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "AutomationRunbookActionDetails")
        disc_automation_runbook_action_details.fabric_location = AAZStrType(
            serialized_name="fabricLocation",
            flags={"required": True},
        )
        disc_automation_runbook_action_details.runbook_id = AAZStrType(
            serialized_name="runbookId",
        )
        disc_automation_runbook_action_details.timeout = AAZStrType()

        disc_manual_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "ManualActionDetails")
        disc_manual_action_details.description = AAZStrType()

        disc_script_action_details = _schema_recovery_plan_action_read.custom_details.discriminate_by("instance_type", "ScriptActionDetails")
        disc_script_action_details.fabric_location = AAZStrType(
            serialized_name="fabricLocation",
            flags={"required": True},
        )
        disc_script_action_details.path = AAZStrType(
            flags={"required": True},
        )
        disc_script_action_details.timeout = AAZStrType()

        failover_directions = _schema_recovery_plan_action_read.failover_directions
        failover_directions.Element = AAZStrType()

        failover_types = _schema_recovery_plan_action_read.failover_types
        failover_types.Element = AAZStrType()

        _schema.action_name = cls._schema_recovery_plan_action_read.action_name
        _schema.custom_details = cls._schema_recovery_plan_action_read.custom_details
        _schema.failover_directions = cls._schema_recovery_plan_action_read.failover_directions
        _schema.failover_types = cls._schema_recovery_plan_action_read.failover_types


__all__ = ["TestFailover"]
