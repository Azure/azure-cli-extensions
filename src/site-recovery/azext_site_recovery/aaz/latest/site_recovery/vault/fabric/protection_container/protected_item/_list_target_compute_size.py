# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault fabric protection-container protected-item list-target-compute-size",
)
class ListTargetComputeSize(AAZCommand):
    """List the available target compute sizes for a replication protected item.
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationprotecteditems/{}/targetcomputesizes", "2022-08-01"],
        ]
    }

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric-name"],
            help="Fabric name.",
            required=True,
        )
        _args_schema.protection_container_name = AAZStrArg(
            options=["--protection-container", "--protection-container-name"],
            help="Protection container name.",
            required=True,
        )
        _args_schema.replicated_protected_item_name = AAZStrArg(
            options=["-n", "--replicated-protected-item-name"],
            help="Replication protected item name.",
            required=True,
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.TargetComputeSizesListByReplicationProtectedItems(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class TargetComputeSizesListByReplicationProtectedItems(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectedItems/{replicatedProtectedItemName}/targetComputeSizes",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "protectionContainerName", self.ctx.args.protection_container_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "replicatedProtectedItemName", self.ctx.args.replicated_protected_item_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
            )
            _schema_on_200.value = AAZListType()

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType()
            _element.name = AAZStrType()
            _element.properties = AAZObjectType()
            _element.type = AAZStrType()

            properties = cls._schema_on_200.value.Element.properties
            properties.cpu_cores_count = AAZIntType(
                serialized_name="cpuCoresCount",
            )
            properties.errors = AAZListType()
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.high_iops_supported = AAZStrType(
                serialized_name="highIopsSupported",
            )
            properties.hyper_v_generations = AAZListType(
                serialized_name="hyperVGenerations",
            )
            properties.max_data_disk_count = AAZIntType(
                serialized_name="maxDataDiskCount",
            )
            properties.max_nics_count = AAZIntType(
                serialized_name="maxNicsCount",
            )
            properties.memory_in_gb = AAZFloatType(
                serialized_name="memoryInGB",
            )
            properties.name = AAZStrType()
            properties.v_cp_us_available = AAZIntType(
                serialized_name="vCPUsAvailable",
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.value.Element.properties.errors
            errors.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.errors.Element
            _element.message = AAZStrType()
            _element.severity = AAZStrType()

            hyper_v_generations = cls._schema_on_200.value.Element.properties.hyper_v_generations
            hyper_v_generations.Element = AAZStrType()

            return cls._schema_on_200


__all__ = ["ListTargetComputeSize"]
