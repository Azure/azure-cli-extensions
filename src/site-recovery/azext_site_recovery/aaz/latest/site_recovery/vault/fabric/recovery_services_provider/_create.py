# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault fabric recovery-services-provider create",
)
class Create(AAZCommand):
    """Create operation to add a recovery services provider.
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationrecoveryservicesproviders/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric-name"],
            help="Fabric name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.provider_name = AAZStrArg(
            options=["-n", "--name", "--provider-name"],
            help="Recovery services provider name.",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.authentication_identity_input = AAZObjectArg(
            options=["--auth-identity", "--authentication-identity-input"],
            arg_group="Properties",
            help="The identity provider input for DRA authentication.",
            required=True,
        )
        cls._build_args_identity_provider_input_create(_args_schema.authentication_identity_input)
        _args_schema.bios_id = AAZStrArg(
            options=["--bios-id"],
            arg_group="Properties",
            help="The Bios Id of the machine.",
        )
        _args_schema.data_plane_authentication_identity_input = AAZObjectArg(
            options=["--data-plane-auth-id", "--data-plane-authentication-identity-input"],
            arg_group="Properties",
            help="The identity provider input for data plane authentication.",
        )
        cls._build_args_identity_provider_input_create(_args_schema.data_plane_authentication_identity_input)
        _args_schema.machine_id = AAZStrArg(
            options=["--machine-id"],
            arg_group="Properties",
            help="The Id of the machine where the provider is getting added.",
        )
        _args_schema.machine_name = AAZStrArg(
            options=["--machine-name"],
            arg_group="Properties",
            help="The name of the machine where the provider is getting added.",
            required=True,
        )
        _args_schema.resource_access_identity_input = AAZObjectArg(
            options=["--resource-access-id", "--resource-access-identity-input"],
            arg_group="Properties",
            help="The identity provider input for resource access.",
            required=True,
        )
        cls._build_args_identity_provider_input_create(_args_schema.resource_access_identity_input)
        return cls._args_schema

    _args_identity_provider_input_create = None

    @classmethod
    def _build_args_identity_provider_input_create(cls, _schema):
        if cls._args_identity_provider_input_create is not None:
            _schema.aad_authority = cls._args_identity_provider_input_create.aad_authority
            _schema.application_id = cls._args_identity_provider_input_create.application_id
            _schema.audience = cls._args_identity_provider_input_create.audience
            _schema.object_id = cls._args_identity_provider_input_create.object_id
            _schema.tenant_id = cls._args_identity_provider_input_create.tenant_id
            return

        cls._args_identity_provider_input_create = AAZObjectArg()

        identity_provider_input_create = cls._args_identity_provider_input_create
        identity_provider_input_create.aad_authority = AAZStrArg(
            options=["aad-authority"],
            help="The base authority for Azure Active Directory authentication.",
            required=True,
        )
        identity_provider_input_create.application_id = AAZStrArg(
            options=["application-id"],
            help="The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
            required=True,
        )
        identity_provider_input_create.audience = AAZStrArg(
            options=["audience"],
            help="The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
            required=True,
        )
        identity_provider_input_create.object_id = AAZStrArg(
            options=["object-id"],
            help="The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
            required=True,
        )
        identity_provider_input_create.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
            required=True,
        )

        _schema.aad_authority = cls._args_identity_provider_input_create.aad_authority
        _schema.application_id = cls._args_identity_provider_input_create.application_id
        _schema.audience = cls._args_identity_provider_input_create.audience
        _schema.object_id = cls._args_identity_provider_input_create.object_id
        _schema.tenant_id = cls._args_identity_provider_input_create.tenant_id

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReplicationRecoveryServicesProvidersCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationRecoveryServicesProvidersCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationRecoveryServicesProviders/{providerName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "providerName", self.ctx.args.provider_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                _build_schema_identity_provider_input_create(properties.set_prop("authenticationIdentityInput", AAZObjectType, ".authentication_identity_input", typ_kwargs={"flags": {"required": True}}))
                properties.set_prop("biosId", AAZStrType, ".bios_id")
                _build_schema_identity_provider_input_create(properties.set_prop("dataPlaneAuthenticationIdentityInput", AAZObjectType, ".data_plane_authentication_identity_input"))
                properties.set_prop("machineId", AAZStrType, ".machine_id")
                properties.set_prop("machineName", AAZStrType, ".machine_name", typ_kwargs={"flags": {"required": True}})
                _build_schema_identity_provider_input_create(properties.set_prop("resourceAccessIdentityInput", AAZObjectType, ".resource_access_identity_input", typ_kwargs={"flags": {"required": True}}))

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.allowed_scenarios = AAZListType(
                serialized_name="allowedScenarios",
            )
            properties.authentication_identity_details = AAZObjectType(
                serialized_name="authenticationIdentityDetails",
            )
            _build_schema_identity_provider_details_read(properties.authentication_identity_details)
            properties.bios_id = AAZStrType(
                serialized_name="biosId",
            )
            properties.connection_status = AAZStrType(
                serialized_name="connectionStatus",
            )
            properties.data_plane_authentication_identity_details = AAZObjectType(
                serialized_name="dataPlaneAuthenticationIdentityDetails",
            )
            _build_schema_identity_provider_details_read(properties.data_plane_authentication_identity_details)
            properties.dra_identifier = AAZStrType(
                serialized_name="draIdentifier",
            )
            properties.fabric_friendly_name = AAZStrType(
                serialized_name="fabricFriendlyName",
            )
            properties.fabric_type = AAZStrType(
                serialized_name="fabricType",
            )
            properties.friendly_name = AAZStrType(
                serialized_name="friendlyName",
            )
            properties.health_error_details = AAZListType(
                serialized_name="healthErrorDetails",
            )
            properties.last_heart_beat = AAZStrType(
                serialized_name="lastHeartBeat",
            )
            properties.machine_id = AAZStrType(
                serialized_name="machineId",
            )
            properties.machine_name = AAZStrType(
                serialized_name="machineName",
            )
            properties.protected_item_count = AAZIntType(
                serialized_name="protectedItemCount",
            )
            properties.provider_version = AAZStrType(
                serialized_name="providerVersion",
            )
            properties.provider_version_details = AAZObjectType(
                serialized_name="providerVersionDetails",
            )
            properties.provider_version_expiry_date = AAZStrType(
                serialized_name="providerVersionExpiryDate",
            )
            properties.provider_version_state = AAZStrType(
                serialized_name="providerVersionState",
            )
            properties.resource_access_identity_details = AAZObjectType(
                serialized_name="resourceAccessIdentityDetails",
            )
            _build_schema_identity_provider_details_read(properties.resource_access_identity_details)
            properties.server_version = AAZStrType(
                serialized_name="serverVersion",
            )

            allowed_scenarios = cls._schema_on_200.properties.allowed_scenarios
            allowed_scenarios.Element = AAZStrType()

            health_error_details = cls._schema_on_200.properties.health_error_details
            health_error_details.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.health_error_details.Element
            _element.creation_time_utc = AAZStrType(
                serialized_name="creationTimeUtc",
            )
            _element.customer_resolvability = AAZStrType(
                serialized_name="customerResolvability",
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
            )
            _element.error_category = AAZStrType(
                serialized_name="errorCategory",
            )
            _element.error_code = AAZStrType(
                serialized_name="errorCode",
            )
            _element.error_id = AAZStrType(
                serialized_name="errorId",
            )
            _element.error_level = AAZStrType(
                serialized_name="errorLevel",
            )
            _element.error_message = AAZStrType(
                serialized_name="errorMessage",
            )
            _element.error_source = AAZStrType(
                serialized_name="errorSource",
            )
            _element.error_type = AAZStrType(
                serialized_name="errorType",
            )
            _element.inner_health_errors = AAZListType(
                serialized_name="innerHealthErrors",
            )
            _element.possible_causes = AAZStrType(
                serialized_name="possibleCauses",
            )
            _element.recommended_action = AAZStrType(
                serialized_name="recommendedAction",
            )
            _element.recovery_provider_error_message = AAZStrType(
                serialized_name="recoveryProviderErrorMessage",
            )
            _element.summary_message = AAZStrType(
                serialized_name="summaryMessage",
            )

            inner_health_errors = cls._schema_on_200.properties.health_error_details.Element.inner_health_errors
            inner_health_errors.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.health_error_details.Element.inner_health_errors.Element
            _element.creation_time_utc = AAZStrType(
                serialized_name="creationTimeUtc",
            )
            _element.customer_resolvability = AAZStrType(
                serialized_name="customerResolvability",
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
            )
            _element.error_category = AAZStrType(
                serialized_name="errorCategory",
            )
            _element.error_code = AAZStrType(
                serialized_name="errorCode",
            )
            _element.error_id = AAZStrType(
                serialized_name="errorId",
            )
            _element.error_level = AAZStrType(
                serialized_name="errorLevel",
            )
            _element.error_message = AAZStrType(
                serialized_name="errorMessage",
            )
            _element.error_source = AAZStrType(
                serialized_name="errorSource",
            )
            _element.error_type = AAZStrType(
                serialized_name="errorType",
            )
            _element.possible_causes = AAZStrType(
                serialized_name="possibleCauses",
            )
            _element.recommended_action = AAZStrType(
                serialized_name="recommendedAction",
            )
            _element.recovery_provider_error_message = AAZStrType(
                serialized_name="recoveryProviderErrorMessage",
            )
            _element.summary_message = AAZStrType(
                serialized_name="summaryMessage",
            )

            provider_version_details = cls._schema_on_200.properties.provider_version_details
            provider_version_details.expiry_date = AAZStrType(
                serialized_name="expiryDate",
            )
            provider_version_details.status = AAZStrType()
            provider_version_details.version = AAZStrType()

            return cls._schema_on_200


def _build_schema_identity_provider_input_create(_builder):
    if _builder is None:
        return
    _builder.set_prop("aadAuthority", AAZStrType, ".aad_authority", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("applicationId", AAZStrType, ".application_id", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("audience", AAZStrType, ".audience", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("objectId", AAZStrType, ".object_id", typ_kwargs={"flags": {"required": True}})
    _builder.set_prop("tenantId", AAZStrType, ".tenant_id", typ_kwargs={"flags": {"required": True}})


_schema_identity_provider_details_read = None


def _build_schema_identity_provider_details_read(_schema):
    global _schema_identity_provider_details_read
    if _schema_identity_provider_details_read is not None:
        _schema.aad_authority = _schema_identity_provider_details_read.aad_authority
        _schema.application_id = _schema_identity_provider_details_read.application_id
        _schema.audience = _schema_identity_provider_details_read.audience
        _schema.object_id = _schema_identity_provider_details_read.object_id
        _schema.tenant_id = _schema_identity_provider_details_read.tenant_id
        return

    _schema_identity_provider_details_read = AAZObjectType()

    identity_provider_details_read = _schema_identity_provider_details_read
    identity_provider_details_read.aad_authority = AAZStrType(
        serialized_name="aadAuthority",
    )
    identity_provider_details_read.application_id = AAZStrType(
        serialized_name="applicationId",
    )
    identity_provider_details_read.audience = AAZStrType()
    identity_provider_details_read.object_id = AAZStrType(
        serialized_name="objectId",
    )
    identity_provider_details_read.tenant_id = AAZStrType(
        serialized_name="tenantId",
    )

    _schema.aad_authority = _schema_identity_provider_details_read.aad_authority
    _schema.application_id = _schema_identity_provider_details_read.application_id
    _schema.audience = _schema_identity_provider_details_read.audience
    _schema.object_id = _schema_identity_provider_details_read.object_id
    _schema.tenant_id = _schema_identity_provider_details_read.tenant_id


__all__ = ["Create"]
