# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vault fabric protection-container migration-item create",
)
class Create(AAZCommand):
    """Create operation to create an ASR migration item (enable migration).
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationmigrationitems/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric-name"],
            help="Fabric name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.migration_item_name = AAZStrArg(
            options=["-n", "--name", "--migration-item-name"],
            help="Migration item name.",
            required=True,
            id_part="child_name_3",
        )
        _args_schema.protection_container_name = AAZStrArg(
            options=["--protection-container", "--protection-container-name"],
            help="Protection container name.",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.resource_name = AAZStrArg(
            options=["--resource-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.policy_id = AAZStrArg(
            options=["--policy-id"],
            arg_group="Properties",
            help="The policy Id.",
            required=True,
        )
        _args_schema.provider_specific_details = AAZObjectArg(
            options=["--provider-details", "--provider-specific-details"],
            arg_group="Properties",
            help="The provider specific details.",
            required=True,
        )

        provider_specific_details = cls._args_schema.provider_specific_details
        provider_specific_details.v_mware_cbt = AAZObjectArg(
            options=["v-mware-cbt"],
        )

        v_mware_cbt = cls._args_schema.provider_specific_details.v_mware_cbt
        v_mware_cbt.data_mover_run_as_account_id = AAZStrArg(
            options=["data-mover-run-as-account-id"],
            help="The data mover run as account Id.",
            required=True,
        )
        v_mware_cbt.disks_to_include = AAZListArg(
            options=["disks-to-include"],
            help="The disks to include list.",
            required=True,
            fmt=AAZListArgFormat(
                min_length=1,
            ),
        )
        v_mware_cbt.license_type = AAZStrArg(
            options=["license-type"],
            help="License type.",
            enum={"NoLicenseType": "NoLicenseType", "NotSpecified": "NotSpecified", "WindowsServer": "WindowsServer"},
        )
        v_mware_cbt.perform_auto_resync = AAZStrArg(
            options=["perform-auto-resync"],
            help="A value indicating whether auto resync is to be done.",
        )
        v_mware_cbt.seed_disk_tags = AAZDictArg(
            options=["seed-disk-tags"],
            help="The tags for the seed disks.",
        )
        v_mware_cbt.snapshot_run_as_account_id = AAZStrArg(
            options=["snapshot-run-as-account-id"],
            help="The snapshot run as account Id.",
            required=True,
        )
        v_mware_cbt.sql_server_license_type = AAZStrArg(
            options=["sql-server-license-type"],
            help="The SQL Server license type.",
            enum={"AHUB": "AHUB", "NoLicenseType": "NoLicenseType", "NotSpecified": "NotSpecified", "PAYG": "PAYG"},
        )
        v_mware_cbt.target_availability_set_id = AAZStrArg(
            options=["target-availability-set-id"],
            help="The target availability set ARM Id.",
        )
        v_mware_cbt.target_availability_zone = AAZStrArg(
            options=["target-availability-zone"],
            help="The target availability zone.",
        )
        v_mware_cbt.target_boot_diagnostics_storage_account_id = AAZStrArg(
            options=["target-boot-diagnostics-storage-account-id"],
            help="The target boot diagnostics storage account ARM Id.",
        )
        v_mware_cbt.target_disk_tags = AAZDictArg(
            options=["target-disk-tags"],
            help="The tags for the target disks.",
        )
        v_mware_cbt.target_network_id = AAZStrArg(
            options=["target-network-id"],
            help="The target network ARM Id.",
            required=True,
        )
        v_mware_cbt.target_nic_tags = AAZDictArg(
            options=["target-nic-tags"],
            help="The tags for the target NICs.",
        )
        v_mware_cbt.target_proximity_placement_group_id = AAZStrArg(
            options=["target-proximity-placement-group-id"],
            help="The target proximity placement group ARM Id.",
        )
        v_mware_cbt.target_resource_group_id = AAZStrArg(
            options=["target-resource-group-id"],
            help="The target resource group ARM Id.",
            required=True,
        )
        v_mware_cbt.target_subnet_name = AAZStrArg(
            options=["target-subnet-name"],
            help="The target subnet name.",
        )
        v_mware_cbt.target_vm_name = AAZStrArg(
            options=["target-vm-name"],
            help="The target VM name.",
        )
        v_mware_cbt.target_vm_size = AAZStrArg(
            options=["target-vm-size"],
            help="The target VM size.",
        )
        v_mware_cbt.target_vm_tags = AAZDictArg(
            options=["target-vm-tags"],
            help="The target VM tags.",
        )
        v_mware_cbt.test_network_id = AAZStrArg(
            options=["test-network-id"],
            help="The selected test network ARM Id.",
        )
        v_mware_cbt.test_subnet_name = AAZStrArg(
            options=["test-subnet-name"],
            help="The selected test subnet name.",
        )
        v_mware_cbt.vmware_machine_id = AAZStrArg(
            options=["vmware-machine-id"],
            help="The ARM Id of the VM discovered in VMware.",
            required=True,
        )

        disks_to_include = cls._args_schema.provider_specific_details.v_mware_cbt.disks_to_include
        disks_to_include.Element = AAZObjectArg()

        _element = cls._args_schema.provider_specific_details.v_mware_cbt.disks_to_include.Element
        _element.disk_encryption_set_id = AAZStrArg(
            options=["disk-encryption-set-id"],
            help="The DiskEncryptionSet ARM Id.",
        )
        _element.disk_id = AAZStrArg(
            options=["disk-id"],
            help="The disk Id.",
            required=True,
        )
        _element.disk_type = AAZStrArg(
            options=["disk-type"],
            help="The disk type.",
            enum={"Premium_LRS": "Premium_LRS", "StandardSSD_LRS": "StandardSSD_LRS", "Standard_LRS": "Standard_LRS"},
        )
        _element.is_os_disk = AAZStrArg(
            options=["is-os-disk"],
            help="A value indicating whether the disk is the OS disk.",
            required=True,
        )
        _element.log_storage_account_id = AAZStrArg(
            options=["log-storage-account-id"],
            help="The log storage account ARM Id.",
            required=True,
        )
        _element.log_storage_account_sas_secret_name = AAZStrArg(
            options=["log-storage-account-sas-secret-name"],
            help="The key vault secret name of the log storage account.",
            required=True,
        )

        seed_disk_tags = cls._args_schema.provider_specific_details.v_mware_cbt.seed_disk_tags
        seed_disk_tags.Element = AAZStrArg()

        target_disk_tags = cls._args_schema.provider_specific_details.v_mware_cbt.target_disk_tags
        target_disk_tags.Element = AAZStrArg()

        target_nic_tags = cls._args_schema.provider_specific_details.v_mware_cbt.target_nic_tags
        target_nic_tags.Element = AAZStrArg()

        target_vm_tags = cls._args_schema.provider_specific_details.v_mware_cbt.target_vm_tags
        target_vm_tags.Element = AAZStrArg()
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        yield self.ReplicationMigrationItemsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationMigrationItemsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationMigrationItems/{migrationItemName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "migrationItemName", self.ctx.args.migration_item_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "protectionContainerName", self.ctx.args.protection_container_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.resource_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                typ=AAZObjectType,
                typ_kwargs={"flags": {"required": True, "client_flatten": True}}
            )
            _builder.set_prop("properties", AAZObjectType, ".", typ_kwargs={"flags": {"required": True}})

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("policyId", AAZStrType, ".policy_id", typ_kwargs={"flags": {"required": True}})
                properties.set_prop("providerSpecificDetails", AAZObjectType, ".provider_specific_details", typ_kwargs={"flags": {"required": True}})

            provider_specific_details = _builder.get(".properties.providerSpecificDetails")
            if provider_specific_details is not None:
                provider_specific_details.set_const("instanceType", "VMwareCbt", AAZStrType, ".v_mware_cbt", typ_kwargs={"flags": {"required": True}})
                provider_specific_details.discriminate_by("instanceType", "VMwareCbt")

            disc_v_mware_cbt = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}")
            if disc_v_mware_cbt is not None:
                disc_v_mware_cbt.set_prop("dataMoverRunAsAccountId", AAZStrType, ".v_mware_cbt.data_mover_run_as_account_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("disksToInclude", AAZListType, ".v_mware_cbt.disks_to_include", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("licenseType", AAZStrType, ".v_mware_cbt.license_type")
                disc_v_mware_cbt.set_prop("performAutoResync", AAZStrType, ".v_mware_cbt.perform_auto_resync")
                disc_v_mware_cbt.set_prop("seedDiskTags", AAZDictType, ".v_mware_cbt.seed_disk_tags")
                disc_v_mware_cbt.set_prop("snapshotRunAsAccountId", AAZStrType, ".v_mware_cbt.snapshot_run_as_account_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("sqlServerLicenseType", AAZStrType, ".v_mware_cbt.sql_server_license_type")
                disc_v_mware_cbt.set_prop("targetAvailabilitySetId", AAZStrType, ".v_mware_cbt.target_availability_set_id")
                disc_v_mware_cbt.set_prop("targetAvailabilityZone", AAZStrType, ".v_mware_cbt.target_availability_zone")
                disc_v_mware_cbt.set_prop("targetBootDiagnosticsStorageAccountId", AAZStrType, ".v_mware_cbt.target_boot_diagnostics_storage_account_id")
                disc_v_mware_cbt.set_prop("targetDiskTags", AAZDictType, ".v_mware_cbt.target_disk_tags")
                disc_v_mware_cbt.set_prop("targetNetworkId", AAZStrType, ".v_mware_cbt.target_network_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("targetNicTags", AAZDictType, ".v_mware_cbt.target_nic_tags")
                disc_v_mware_cbt.set_prop("targetProximityPlacementGroupId", AAZStrType, ".v_mware_cbt.target_proximity_placement_group_id")
                disc_v_mware_cbt.set_prop("targetResourceGroupId", AAZStrType, ".v_mware_cbt.target_resource_group_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("targetSubnetName", AAZStrType, ".v_mware_cbt.target_subnet_name")
                disc_v_mware_cbt.set_prop("targetVmName", AAZStrType, ".v_mware_cbt.target_vm_name")
                disc_v_mware_cbt.set_prop("targetVmSize", AAZStrType, ".v_mware_cbt.target_vm_size")
                disc_v_mware_cbt.set_prop("targetVmTags", AAZDictType, ".v_mware_cbt.target_vm_tags")
                disc_v_mware_cbt.set_prop("testNetworkId", AAZStrType, ".v_mware_cbt.test_network_id")
                disc_v_mware_cbt.set_prop("testSubnetName", AAZStrType, ".v_mware_cbt.test_subnet_name")
                disc_v_mware_cbt.set_prop("vmwareMachineId", AAZStrType, ".v_mware_cbt.vmware_machine_id", typ_kwargs={"flags": {"required": True}})

            disks_to_include = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.disksToInclude")
            if disks_to_include is not None:
                disks_to_include.set_elements(AAZObjectType, ".")

            _elements = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.disksToInclude[]")
            if _elements is not None:
                _elements.set_prop("diskEncryptionSetId", AAZStrType, ".disk_encryption_set_id")
                _elements.set_prop("diskId", AAZStrType, ".disk_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("diskType", AAZStrType, ".disk_type")
                _elements.set_prop("isOSDisk", AAZStrType, ".is_os_disk", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("logStorageAccountId", AAZStrType, ".log_storage_account_id", typ_kwargs={"flags": {"required": True}})
                _elements.set_prop("logStorageAccountSasSecretName", AAZStrType, ".log_storage_account_sas_secret_name", typ_kwargs={"flags": {"required": True}})

            seed_disk_tags = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.seedDiskTags")
            if seed_disk_tags is not None:
                seed_disk_tags.set_elements(AAZStrType, ".")

            target_disk_tags = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.targetDiskTags")
            if target_disk_tags is not None:
                target_disk_tags.set_elements(AAZStrType, ".")

            target_nic_tags = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.targetNicTags")
            if target_nic_tags is not None:
                target_nic_tags.set_elements(AAZStrType, ".")

            target_vm_tags = _builder.get(".properties.providerSpecificDetails{instanceType:VMwareCbt}.targetVmTags")
            if target_vm_tags is not None:
                target_vm_tags.set_elements(AAZStrType, ".")

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.id = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.location = AAZStrType()
            _schema_on_200.name = AAZStrType(
                flags={"read_only": True},
            )
            _schema_on_200.properties = AAZObjectType()
            _schema_on_200.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.properties
            properties.allowed_operations = AAZListType(
                serialized_name="allowedOperations",
                flags={"read_only": True},
            )
            properties.critical_job_history = AAZListType(
                serialized_name="criticalJobHistory",
                flags={"read_only": True},
            )
            properties.current_job = AAZObjectType(
                serialized_name="currentJob",
            )
            properties.event_correlation_id = AAZStrType(
                serialized_name="eventCorrelationId",
                flags={"read_only": True},
            )
            properties.health = AAZStrType(
                flags={"read_only": True},
            )
            properties.health_errors = AAZListType(
                serialized_name="healthErrors",
                flags={"read_only": True},
            )
            properties.last_migration_status = AAZStrType(
                serialized_name="lastMigrationStatus",
                flags={"read_only": True},
            )
            properties.last_migration_time = AAZStrType(
                serialized_name="lastMigrationTime",
                flags={"read_only": True},
            )
            properties.last_test_migration_status = AAZStrType(
                serialized_name="lastTestMigrationStatus",
                flags={"read_only": True},
            )
            properties.last_test_migration_time = AAZStrType(
                serialized_name="lastTestMigrationTime",
                flags={"read_only": True},
            )
            properties.machine_name = AAZStrType(
                serialized_name="machineName",
                flags={"read_only": True},
            )
            properties.migration_state = AAZStrType(
                serialized_name="migrationState",
                flags={"read_only": True},
            )
            properties.migration_state_description = AAZStrType(
                serialized_name="migrationStateDescription",
                flags={"read_only": True},
            )
            properties.policy_friendly_name = AAZStrType(
                serialized_name="policyFriendlyName",
                flags={"read_only": True},
            )
            properties.policy_id = AAZStrType(
                serialized_name="policyId",
                flags={"read_only": True},
            )
            properties.provider_specific_details = AAZObjectType(
                serialized_name="providerSpecificDetails",
            )
            properties.recovery_services_provider_id = AAZStrType(
                serialized_name="recoveryServicesProviderId",
                flags={"read_only": True},
            )
            properties.replication_status = AAZStrType(
                serialized_name="replicationStatus",
                flags={"read_only": True},
            )
            properties.test_migrate_state = AAZStrType(
                serialized_name="testMigrateState",
                flags={"read_only": True},
            )
            properties.test_migrate_state_description = AAZStrType(
                serialized_name="testMigrateStateDescription",
                flags={"read_only": True},
            )

            allowed_operations = cls._schema_on_200.properties.allowed_operations
            allowed_operations.Element = AAZStrType()

            critical_job_history = cls._schema_on_200.properties.critical_job_history
            critical_job_history.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.critical_job_history.Element
            _element.job_id = AAZStrType(
                serialized_name="jobId",
                flags={"read_only": True},
            )
            _element.job_name = AAZStrType(
                serialized_name="jobName",
                flags={"read_only": True},
            )
            _element.job_status = AAZStrType(
                serialized_name="jobStatus",
                flags={"read_only": True},
            )
            _element.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True},
            )

            current_job = cls._schema_on_200.properties.current_job
            current_job.job_id = AAZStrType(
                serialized_name="jobId",
                flags={"read_only": True},
            )
            current_job.job_name = AAZStrType(
                serialized_name="jobName",
                flags={"read_only": True},
            )
            current_job.start_time = AAZStrType(
                serialized_name="startTime",
                flags={"read_only": True},
            )

            health_errors = cls._schema_on_200.properties.health_errors
            health_errors.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.health_errors.Element
            _element.creation_time_utc = AAZStrType(
                serialized_name="creationTimeUtc",
            )
            _element.customer_resolvability = AAZStrType(
                serialized_name="customerResolvability",
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
            )
            _element.error_category = AAZStrType(
                serialized_name="errorCategory",
            )
            _element.error_code = AAZStrType(
                serialized_name="errorCode",
            )
            _element.error_id = AAZStrType(
                serialized_name="errorId",
            )
            _element.error_level = AAZStrType(
                serialized_name="errorLevel",
            )
            _element.error_message = AAZStrType(
                serialized_name="errorMessage",
            )
            _element.error_source = AAZStrType(
                serialized_name="errorSource",
            )
            _element.error_type = AAZStrType(
                serialized_name="errorType",
            )
            _element.inner_health_errors = AAZListType(
                serialized_name="innerHealthErrors",
            )
            _element.possible_causes = AAZStrType(
                serialized_name="possibleCauses",
            )
            _element.recommended_action = AAZStrType(
                serialized_name="recommendedAction",
            )
            _element.recovery_provider_error_message = AAZStrType(
                serialized_name="recoveryProviderErrorMessage",
            )
            _element.summary_message = AAZStrType(
                serialized_name="summaryMessage",
            )

            inner_health_errors = cls._schema_on_200.properties.health_errors.Element.inner_health_errors
            inner_health_errors.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.health_errors.Element.inner_health_errors.Element
            _element.creation_time_utc = AAZStrType(
                serialized_name="creationTimeUtc",
            )
            _element.customer_resolvability = AAZStrType(
                serialized_name="customerResolvability",
            )
            _element.entity_id = AAZStrType(
                serialized_name="entityId",
            )
            _element.error_category = AAZStrType(
                serialized_name="errorCategory",
            )
            _element.error_code = AAZStrType(
                serialized_name="errorCode",
            )
            _element.error_id = AAZStrType(
                serialized_name="errorId",
            )
            _element.error_level = AAZStrType(
                serialized_name="errorLevel",
            )
            _element.error_message = AAZStrType(
                serialized_name="errorMessage",
            )
            _element.error_source = AAZStrType(
                serialized_name="errorSource",
            )
            _element.error_type = AAZStrType(
                serialized_name="errorType",
            )
            _element.possible_causes = AAZStrType(
                serialized_name="possibleCauses",
            )
            _element.recommended_action = AAZStrType(
                serialized_name="recommendedAction",
            )
            _element.recovery_provider_error_message = AAZStrType(
                serialized_name="recoveryProviderErrorMessage",
            )
            _element.summary_message = AAZStrType(
                serialized_name="summaryMessage",
            )

            provider_specific_details = cls._schema_on_200.properties.provider_specific_details
            provider_specific_details.instance_type = AAZStrType(
                serialized_name="instanceType",
                flags={"required": True},
            )

            disc_v_mware_cbt = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt")
            disc_v_mware_cbt.data_mover_run_as_account_id = AAZStrType(
                serialized_name="dataMoverRunAsAccountId",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.firmware_type = AAZStrType(
                serialized_name="firmwareType",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.initial_seeding_progress_percentage = AAZIntType(
                serialized_name="initialSeedingProgressPercentage",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.initial_seeding_retry_count = AAZIntType(
                serialized_name="initialSeedingRetryCount",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.last_recovery_point_id = AAZStrType(
                serialized_name="lastRecoveryPointId",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.last_recovery_point_received = AAZStrType(
                serialized_name="lastRecoveryPointReceived",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.license_type = AAZStrType(
                serialized_name="licenseType",
            )
            disc_v_mware_cbt.migration_progress_percentage = AAZIntType(
                serialized_name="migrationProgressPercentage",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.migration_recovery_point_id = AAZStrType(
                serialized_name="migrationRecoveryPointId",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.os_type = AAZStrType(
                serialized_name="osType",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.perform_auto_resync = AAZStrType(
                serialized_name="performAutoResync",
            )
            disc_v_mware_cbt.protected_disks = AAZListType(
                serialized_name="protectedDisks",
            )
            disc_v_mware_cbt.resume_progress_percentage = AAZIntType(
                serialized_name="resumeProgressPercentage",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.resume_retry_count = AAZIntType(
                serialized_name="resumeRetryCount",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.resync_progress_percentage = AAZIntType(
                serialized_name="resyncProgressPercentage",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.resync_required = AAZStrType(
                serialized_name="resyncRequired",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.resync_retry_count = AAZIntType(
                serialized_name="resyncRetryCount",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.resync_state = AAZStrType(
                serialized_name="resyncState",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.seed_disk_tags = AAZDictType(
                serialized_name="seedDiskTags",
            )
            disc_v_mware_cbt.snapshot_run_as_account_id = AAZStrType(
                serialized_name="snapshotRunAsAccountId",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.sql_server_license_type = AAZStrType(
                serialized_name="sqlServerLicenseType",
            )
            disc_v_mware_cbt.storage_account_id = AAZStrType(
                serialized_name="storageAccountId",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.target_availability_set_id = AAZStrType(
                serialized_name="targetAvailabilitySetId",
            )
            disc_v_mware_cbt.target_availability_zone = AAZStrType(
                serialized_name="targetAvailabilityZone",
            )
            disc_v_mware_cbt.target_boot_diagnostics_storage_account_id = AAZStrType(
                serialized_name="targetBootDiagnosticsStorageAccountId",
            )
            disc_v_mware_cbt.target_disk_tags = AAZDictType(
                serialized_name="targetDiskTags",
            )
            disc_v_mware_cbt.target_generation = AAZStrType(
                serialized_name="targetGeneration",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.target_location = AAZStrType(
                serialized_name="targetLocation",
                flags={"read_only": True},
            )
            disc_v_mware_cbt.target_network_id = AAZStrType(
                serialized_name="targetNetworkId",
            )
            disc_v_mware_cbt.target_nic_tags = AAZDictType(
                serialized_name="targetNicTags",
            )
            disc_v_mware_cbt.target_proximity_placement_group_id = AAZStrType(
                serialized_name="targetProximityPlacementGroupId",
            )
            disc_v_mware_cbt.target_resource_group_id = AAZStrType(
                serialized_name="targetResourceGroupId",
            )
            disc_v_mware_cbt.target_vm_name = AAZStrType(
                serialized_name="targetVmName",
            )
            disc_v_mware_cbt.target_vm_size = AAZStrType(
                serialized_name="targetVmSize",
            )
            disc_v_mware_cbt.target_vm_tags = AAZDictType(
                serialized_name="targetVmTags",
            )
            disc_v_mware_cbt.test_network_id = AAZStrType(
                serialized_name="testNetworkId",
            )
            disc_v_mware_cbt.vm_nics = AAZListType(
                serialized_name="vmNics",
            )
            disc_v_mware_cbt.vmware_machine_id = AAZStrType(
                serialized_name="vmwareMachineId",
                flags={"read_only": True},
            )

            protected_disks = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").protected_disks
            protected_disks.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").protected_disks.Element
            _element.capacity_in_bytes = AAZIntType(
                serialized_name="capacityInBytes",
                flags={"read_only": True},
            )
            _element.disk_encryption_set_id = AAZStrType(
                serialized_name="diskEncryptionSetId",
                flags={"read_only": True},
            )
            _element.disk_id = AAZStrType(
                serialized_name="diskId",
                flags={"read_only": True},
            )
            _element.disk_name = AAZStrType(
                serialized_name="diskName",
                flags={"read_only": True},
            )
            _element.disk_path = AAZStrType(
                serialized_name="diskPath",
                flags={"read_only": True},
            )
            _element.disk_type = AAZStrType(
                serialized_name="diskType",
            )
            _element.is_os_disk = AAZStrType(
                serialized_name="isOSDisk",
                flags={"read_only": True},
            )
            _element.log_storage_account_id = AAZStrType(
                serialized_name="logStorageAccountId",
                flags={"read_only": True},
            )
            _element.log_storage_account_sas_secret_name = AAZStrType(
                serialized_name="logStorageAccountSasSecretName",
                flags={"read_only": True},
            )
            _element.seed_blob_uri = AAZStrType(
                serialized_name="seedBlobUri",
                flags={"read_only": True},
            )
            _element.seed_managed_disk_id = AAZStrType(
                serialized_name="seedManagedDiskId",
                flags={"read_only": True},
            )
            _element.target_blob_uri = AAZStrType(
                serialized_name="targetBlobUri",
                flags={"read_only": True},
            )
            _element.target_disk_name = AAZStrType(
                serialized_name="targetDiskName",
            )
            _element.target_managed_disk_id = AAZStrType(
                serialized_name="targetManagedDiskId",
                flags={"read_only": True},
            )

            seed_disk_tags = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").seed_disk_tags
            seed_disk_tags.Element = AAZStrType()

            target_disk_tags = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").target_disk_tags
            target_disk_tags.Element = AAZStrType()

            target_nic_tags = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").target_nic_tags
            target_nic_tags.Element = AAZStrType()

            target_vm_tags = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").target_vm_tags
            target_vm_tags.Element = AAZStrType()

            vm_nics = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").vm_nics
            vm_nics.Element = AAZObjectType()

            _element = cls._schema_on_200.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").vm_nics.Element
            _element.is_primary_nic = AAZStrType(
                serialized_name="isPrimaryNic",
            )
            _element.is_selected_for_migration = AAZStrType(
                serialized_name="isSelectedForMigration",
            )
            _element.nic_id = AAZStrType(
                serialized_name="nicId",
                flags={"read_only": True},
            )
            _element.source_ip_address = AAZStrType(
                serialized_name="sourceIPAddress",
                flags={"read_only": True},
            )
            _element.source_ip_address_type = AAZStrType(
                serialized_name="sourceIPAddressType",
                flags={"read_only": True},
            )
            _element.source_network_id = AAZStrType(
                serialized_name="sourceNetworkId",
                flags={"read_only": True},
            )
            _element.target_ip_address = AAZStrType(
                serialized_name="targetIPAddress",
            )
            _element.target_ip_address_type = AAZStrType(
                serialized_name="targetIPAddressType",
            )
            _element.target_nic_name = AAZStrType(
                serialized_name="targetNicName",
            )
            _element.target_subnet_name = AAZStrType(
                serialized_name="targetSubnetName",
            )
            _element.test_ip_address = AAZStrType(
                serialized_name="testIPAddress",
            )
            _element.test_ip_address_type = AAZStrType(
                serialized_name="testIPAddressType",
            )
            _element.test_network_id = AAZStrType(
                serialized_name="testNetworkId",
            )
            _element.test_subnet_name = AAZStrType(
                serialized_name="testSubnetName",
            )

            return cls._schema_on_200


__all__ = ["Create"]
