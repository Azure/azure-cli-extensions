# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery vmware-site machine list",
)
class List(AAZCommand):
    """List to get machine.

    :example: vmware-site machine list for v2arcm
        az site-recovery vmware-site machine list -g "rg" --site-name "site_name"
    """

    _aaz_info = {
        "version": "2020-01-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.offazure/vmwaresites/{}/machines", "2020-01-01"],
        ]
    }

    AZ_SUPPORT_PAGINATION = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_paging(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.site_name = AAZStrArg(
            options=["--site-name"],
            help="Site name.",
            required=True,
        )
        _args_schema.continuation_token = AAZStrArg(
            options=["--continuation-token"],
            help="Optional parameter for continuation token.",
        )
        _args_schema.filter = AAZStrArg(
            options=["--filter"],
            help="filter",
        )
        _args_schema.top = AAZIntArg(
            options=["--top"],
            help="list a set number of machines",
        )
        _args_schema.total_record_count = AAZIntArg(
            options=["--total-record-count"],
            help="Total count of machines in the given site.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.MachinesGetAllMachinesInSite(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance.value, client_flatten=True)
        next_link = self.deserialize_output(self.ctx.vars.instance.next_link)
        return result, next_link

    class MachinesGetAllMachinesInSite(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.OffAzure/VMwareSites/{siteName}/machines",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "MgmtErrorFormat"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "siteName", self.ctx.args.site_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "$filter", self.ctx.args.filter,
                ),
                **self.serialize_query_param(
                    "$top", self.ctx.args.top,
                ),
                **self.serialize_query_param(
                    "continuationToken", self.ctx.args.continuation_token,
                ),
                **self.serialize_query_param(
                    "totalRecordCount", self.ctx.args.total_record_count,
                ),
                **self.serialize_query_param(
                    "api-version", "2020-01-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()

            _schema_on_200 = cls._schema_on_200
            _schema_on_200.next_link = AAZStrType(
                serialized_name="nextLink",
                flags={"read_only": True},
            )
            _schema_on_200.value = AAZListType(
                flags={"read_only": True},
            )

            value = cls._schema_on_200.value
            value.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element
            _element.id = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.properties = AAZObjectType()
            _element.type = AAZStrType(
                flags={"read_only": True},
            )

            properties = cls._schema_on_200.value.Element.properties
            properties.allocated_memory_in_mb = AAZFloatType(
                serialized_name="allocatedMemoryInMB",
                flags={"read_only": True},
            )
            properties.apps_and_roles = AAZObjectType(
                serialized_name="appsAndRoles",
            )
            properties.bios_guid = AAZStrType(
                serialized_name="biosGuid",
                flags={"read_only": True},
            )
            properties.bios_serial_number = AAZStrType(
                serialized_name="biosSerialNumber",
                flags={"read_only": True},
            )
            properties.change_tracking_enabled = AAZBoolType(
                serialized_name="changeTrackingEnabled",
                flags={"read_only": True},
            )
            properties.change_tracking_supported = AAZBoolType(
                serialized_name="changeTrackingSupported",
                flags={"read_only": True},
            )
            properties.created_timestamp = AAZStrType(
                serialized_name="createdTimestamp",
                flags={"read_only": True},
            )
            properties.data_center_scope = AAZStrType(
                serialized_name="dataCenterScope",
                flags={"read_only": True},
            )
            properties.dependency_mapping = AAZStrType(
                serialized_name="dependencyMapping",
                flags={"read_only": True},
            )
            properties.dependency_mapping_start_time = AAZStrType(
                serialized_name="dependencyMappingStartTime",
                flags={"read_only": True},
            )
            properties.description = AAZStrType(
                flags={"read_only": True},
            )
            properties.disks = AAZListType(
                flags={"read_only": True},
            )
            properties.display_name = AAZStrType(
                serialized_name="displayName",
                flags={"read_only": True},
            )
            properties.errors = AAZListType(
                flags={"read_only": True},
            )
            properties.firmware = AAZStrType(
                flags={"read_only": True},
            )
            properties.guest_details_discovery_timestamp = AAZStrType(
                serialized_name="guestDetailsDiscoveryTimestamp",
                flags={"read_only": True},
            )
            properties.guest_os_details = AAZObjectType(
                serialized_name="guestOSDetails",
            )
            properties.host_in_maintenance_mode = AAZBoolType(
                serialized_name="hostInMaintenanceMode",
                flags={"read_only": True},
            )
            properties.host_name = AAZStrType(
                serialized_name="hostName",
                flags={"read_only": True},
            )
            properties.host_power_state = AAZStrType(
                serialized_name="hostPowerState",
                flags={"read_only": True},
            )
            properties.host_version = AAZStrType(
                serialized_name="hostVersion",
                flags={"read_only": True},
            )
            properties.instance_uuid = AAZStrType(
                serialized_name="instanceUuid",
                flags={"read_only": True},
            )
            properties.is_deleted = AAZBoolType(
                serialized_name="isDeleted",
                flags={"read_only": True},
            )
            properties.is_guest_details_discovery_in_progress = AAZBoolType(
                serialized_name="isGuestDetailsDiscoveryInProgress",
                flags={"read_only": True},
            )
            properties.max_snapshots = AAZIntType(
                serialized_name="maxSnapshots",
                flags={"read_only": True},
            )
            properties.network_adapters = AAZListType(
                serialized_name="networkAdapters",
                flags={"read_only": True},
            )
            properties.number_of_applications = AAZIntType(
                serialized_name="numberOfApplications",
                flags={"read_only": True},
            )
            properties.number_of_processor_core = AAZIntType(
                serialized_name="numberOfProcessorCore",
                flags={"read_only": True},
            )
            properties.operating_system_details = AAZObjectType(
                serialized_name="operatingSystemDetails",
            )
            properties.power_status = AAZStrType(
                serialized_name="powerStatus",
                flags={"read_only": True},
            )
            properties.updated_timestamp = AAZStrType(
                serialized_name="updatedTimestamp",
                flags={"read_only": True},
            )
            properties.v_center_fqdn = AAZStrType(
                serialized_name="vCenterFQDN",
                flags={"read_only": True},
            )
            properties.v_center_id = AAZStrType(
                serialized_name="vCenterId",
                flags={"read_only": True},
            )
            properties.v_mware_tools_status = AAZStrType(
                serialized_name="vMwareToolsStatus",
                flags={"read_only": True},
            )
            properties.vm_configuration_file_location = AAZStrType(
                serialized_name="vmConfigurationFileLocation",
                flags={"read_only": True},
            )
            properties.vm_fqdn = AAZStrType(
                serialized_name="vmFqdn",
                flags={"read_only": True},
            )

            apps_and_roles = cls._schema_on_200.value.Element.properties.apps_and_roles
            apps_and_roles.applications = AAZListType(
                flags={"read_only": True},
            )
            apps_and_roles.biz_talk_servers = AAZListType(
                serialized_name="bizTalkServers",
                flags={"read_only": True},
            )
            apps_and_roles.exchange_servers = AAZListType(
                serialized_name="exchangeServers",
                flags={"read_only": True},
            )
            apps_and_roles.features = AAZListType(
                flags={"read_only": True},
            )
            apps_and_roles.other_databases = AAZListType(
                serialized_name="otherDatabases",
                flags={"read_only": True},
            )
            apps_and_roles.share_point_servers = AAZListType(
                serialized_name="sharePointServers",
                flags={"read_only": True},
            )
            apps_and_roles.sql_servers = AAZListType(
                serialized_name="sqlServers",
                flags={"read_only": True},
            )
            apps_and_roles.system_centers = AAZListType(
                serialized_name="systemCenters",
                flags={"read_only": True},
            )
            apps_and_roles.web_applications = AAZListType(
                serialized_name="webApplications",
                flags={"read_only": True},
            )

            applications = cls._schema_on_200.value.Element.properties.apps_and_roles.applications
            applications.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.applications.Element
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.provider = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            biz_talk_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.biz_talk_servers
            biz_talk_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.biz_talk_servers.Element
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )

            exchange_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.exchange_servers
            exchange_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.exchange_servers.Element
            _element.edition = AAZStrType(
                flags={"read_only": True},
            )
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.roles = AAZStrType(
                flags={"read_only": True},
            )
            _element.service_pack = AAZStrType(
                serialized_name="servicePack",
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            features = cls._schema_on_200.value.Element.properties.apps_and_roles.features
            features.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.features.Element
            _element.feature_type = AAZStrType(
                serialized_name="featureType",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.parent = AAZStrType(
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )

            other_databases = cls._schema_on_200.value.Element.properties.apps_and_roles.other_databases
            other_databases.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.other_databases.Element
            _element.database_type = AAZStrType(
                serialized_name="databaseType",
                flags={"read_only": True},
            )
            _element.instance = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            share_point_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.share_point_servers
            share_point_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.share_point_servers.Element
            _element.is_enterprise = AAZBoolType(
                serialized_name="isEnterprise",
                flags={"read_only": True},
            )
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            sql_servers = cls._schema_on_200.value.Element.properties.apps_and_roles.sql_servers
            sql_servers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.sql_servers.Element
            _element.cluster_name = AAZStrType(
                serialized_name="clusterName",
                flags={"read_only": True},
            )
            _element.clustered = AAZStrType(
                flags={"read_only": True},
            )
            _element.edition = AAZStrType(
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.service_pack = AAZStrType(
                serialized_name="servicePack",
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            system_centers = cls._schema_on_200.value.Element.properties.apps_and_roles.system_centers
            system_centers.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.system_centers.Element
            _element.product_name = AAZStrType(
                serialized_name="productName",
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.version = AAZStrType(
                flags={"read_only": True},
            )

            web_applications = cls._schema_on_200.value.Element.properties.apps_and_roles.web_applications
            web_applications.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.apps_and_roles.web_applications.Element
            _element.application_pool = AAZStrType(
                serialized_name="applicationPool",
                flags={"read_only": True},
            )
            _element.group_name = AAZStrType(
                serialized_name="groupName",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.platform = AAZStrType(
                flags={"read_only": True},
            )
            _element.status = AAZStrType(
                flags={"read_only": True},
            )
            _element.web_server = AAZStrType(
                serialized_name="webServer",
                flags={"read_only": True},
            )

            disks = cls._schema_on_200.value.Element.properties.disks
            disks.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.disks.Element
            _element.disk_mode = AAZStrType(
                serialized_name="diskMode",
                flags={"read_only": True},
            )
            _element.disk_provisioning_policy = AAZStrType(
                serialized_name="diskProvisioningPolicy",
                flags={"read_only": True},
            )
            _element.disk_scrubbing_policy = AAZStrType(
                serialized_name="diskScrubbingPolicy",
                flags={"read_only": True},
            )
            _element.disk_type = AAZStrType(
                serialized_name="diskType",
                flags={"read_only": True},
            )
            _element.label = AAZStrType(
                flags={"read_only": True},
            )
            _element.lun = AAZIntType(
                flags={"read_only": True},
            )
            _element.max_size_in_bytes = AAZIntType(
                serialized_name="maxSizeInBytes",
                flags={"read_only": True},
            )
            _element.name = AAZStrType(
                flags={"read_only": True},
            )
            _element.path = AAZStrType(
                flags={"read_only": True},
            )
            _element.uuid = AAZStrType(
                flags={"read_only": True},
            )

            errors = cls._schema_on_200.value.Element.properties.errors
            errors.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.errors.Element
            _element.code = AAZStrType(
                flags={"read_only": True},
            )
            _element.id = AAZIntType(
                flags={"read_only": True},
            )
            _element.message = AAZStrType(
                flags={"read_only": True},
            )
            _element.message_parameters = AAZDictType(
                serialized_name="messageParameters",
                flags={"read_only": True},
            )
            _element.possible_causes = AAZStrType(
                serialized_name="possibleCauses",
                flags={"read_only": True},
            )
            _element.recommended_action = AAZStrType(
                serialized_name="recommendedAction",
                flags={"read_only": True},
            )
            _element.severity = AAZStrType(
                flags={"read_only": True},
            )
            _element.source = AAZStrType(
                flags={"read_only": True},
            )
            _element.summary_message = AAZStrType(
                serialized_name="summaryMessage",
                flags={"read_only": True},
            )

            message_parameters = cls._schema_on_200.value.Element.properties.errors.Element.message_parameters
            message_parameters.Element = AAZStrType()

            guest_os_details = cls._schema_on_200.value.Element.properties.guest_os_details
            guest_os_details.os_name = AAZStrType(
                serialized_name="osName",
                flags={"read_only": True},
            )
            guest_os_details.os_type = AAZStrType(
                serialized_name="osType",
            )
            guest_os_details.os_version = AAZStrType(
                serialized_name="osVersion",
                flags={"read_only": True},
            )

            network_adapters = cls._schema_on_200.value.Element.properties.network_adapters
            network_adapters.Element = AAZObjectType()

            _element = cls._schema_on_200.value.Element.properties.network_adapters.Element
            _element.ip_address_list = AAZListType(
                serialized_name="ipAddressList",
                flags={"read_only": True},
            )
            _element.ip_address_type = AAZStrType(
                serialized_name="ipAddressType",
                flags={"read_only": True},
            )
            _element.label = AAZStrType(
                flags={"read_only": True},
            )
            _element.mac_address = AAZStrType(
                serialized_name="macAddress",
                flags={"read_only": True},
            )
            _element.network_name = AAZStrType(
                serialized_name="networkName",
                flags={"read_only": True},
            )
            _element.nic_id = AAZStrType(
                serialized_name="nicId",
                flags={"read_only": True},
            )

            ip_address_list = cls._schema_on_200.value.Element.properties.network_adapters.Element.ip_address_list
            ip_address_list.Element = AAZStrType()

            operating_system_details = cls._schema_on_200.value.Element.properties.operating_system_details
            operating_system_details.os_name = AAZStrType(
                serialized_name="osName",
                flags={"read_only": True},
            )
            operating_system_details.os_type = AAZStrType(
                serialized_name="osType",
                flags={"read_only": True},
            )
            operating_system_details.os_version = AAZStrType(
                serialized_name="osVersion",
                flags={"read_only": True},
            )

            return cls._schema_on_200


class _ListHelper:
    """Helper class for List"""


__all__ = ["List"]
