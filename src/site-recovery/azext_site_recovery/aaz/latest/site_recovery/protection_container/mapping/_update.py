# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery protection-container mapping update",
)
class Update(AAZCommand):
    """Update operation to create a protection container mapping.

    :example: protection-container mapping update
        az site-recovery protection-container mapping update -g rg --fabric-name fabric_source_name -n container_mapping_source_name --protection-container container_source_name --vault-name vault_name --policy-id policy_id --provider-input '{a2a:{agent-auto-update-status:Enabled}}' --target-container container_recovery_id
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}/replicationprotectioncontainers/{}/replicationprotectioncontainermappings/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["--fabric-name"],
            help="Fabric name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.mapping_name = AAZStrArg(
            options=["-n", "--name", "--mapping-name"],
            help="Protection Container mapping name.",
            required=True,
            id_part="child_name_3",
        )
        _args_schema.protection_container_name = AAZStrArg(
            options=["--protection-container", "--protection-container-name"],
            help="Protection container name.",
            required=True,
            id_part="child_name_2",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["--vault-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.policy_id = AAZStrArg(
            options=["--policy-id"],
            arg_group="Properties",
            help="Applicable policy.",
            nullable=True,
        )
        _args_schema.provider_specific_input = AAZObjectArg(
            options=["--provider-input", "--provider-specific-input"],
            arg_group="Properties",
            help="Provider specific input for pairing.",
            nullable=True,
        )
        _args_schema.target_protection_container_id = AAZStrArg(
            options=["--target-container", "--target-protection-container-id"],
            arg_group="Properties",
            help="The target unique protection container name.",
            nullable=True,
        )

        provider_specific_input = cls._args_schema.provider_specific_input
        provider_specific_input.a2a = AAZObjectArg(
            options=["a2a"],
            help="A2A",
        )
        provider_specific_input.hyper_v_replica_azure = AAZObjectArg(
            options=["hyper-v-replica-azure"],
        )
        provider_specific_input.in_mage_rcm = AAZObjectArg(
            options=["in-mage-rcm"],
        )
        provider_specific_input.vmware_cbt = AAZObjectArg(
            options=["vmware-cbt"],
            help="vmware-cbt",
        )

        a2a = cls._args_schema.provider_specific_input.a2a
        a2a.agent_auto_update_status = AAZStrArg(
            options=["agent-auto-update-status"],
            help="A value indicating whether the auto update is enabled.",
            nullable=True,
            enum={"Disabled": "Disabled", "Enabled": "Enabled"},
        )
        a2a.automation_account_arm_id = AAZStrArg(
            options=["automation-account-arm-id"],
            help="The automation account arm id.",
            nullable=True,
        )
        a2a.automation_account_authentication_type = AAZStrArg(
            options=["automation-account-authentication-type"],
            help="A value indicating the type authentication to use for automation Account.",
            nullable=True,
            enum={"RunAsAccount": "RunAsAccount", "SystemAssignedIdentity": "SystemAssignedIdentity"},
        )

        hyper_v_replica_azure = cls._args_schema.provider_specific_input.hyper_v_replica_azure
        hyper_v_replica_azure.location = AAZStrArg(
            options=["location"],
            help="The Location.",
            nullable=True,
        )

        in_mage_rcm = cls._args_schema.provider_specific_input.in_mage_rcm
        in_mage_rcm.enable_agent_auto_upgrade = AAZStrArg(
            options=["enable-agent-auto-upgrade"],
            help="A value indicating whether agent auto upgrade has to be enabled.",
        )

        vmware_cbt = cls._args_schema.provider_specific_input.vmware_cbt
        vmware_cbt.key_vault_id = AAZStrArg(
            options=["key-vault-id"],
            help="The target key vault ARM Id.",
            nullable=True,
        )
        vmware_cbt.key_vault_uri = AAZStrArg(
            options=["key-vault-uri"],
            help="The target key vault URL.",
            nullable=True,
        )
        vmware_cbt.service_bus_connection_string_secret_name = AAZStrArg(
            options=["service-bus-connection-string-secret-name"],
            help="The secret name of the service bus connection string.",
            nullable=True,
        )
        vmware_cbt.storage_account_id = AAZStrArg(
            options=["storage-account-id"],
            help="The storage account ARM Id.",
        )
        vmware_cbt.storage_account_sas_secret_name = AAZStrArg(
            options=["storage-account-sas-secret-name"],
            help="The secret name of the storage account.",
            nullable=True,
        )
        vmware_cbt.target_location = AAZStrArg(
            options=["target-location"],
            help="The target location.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ReplicationProtectionContainerMappingsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ReplicationProtectionContainerMappingsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationProtectionContainerMappingsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "mappingName", self.ctx.args.mapping_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "protectionContainerName", self.ctx.args.protection_container_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_protection_container_mapping_read(cls._schema_on_200)

            return cls._schema_on_200

    class ReplicationProtectionContainerMappingsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}/replicationProtectionContainers/{protectionContainerName}/replicationProtectionContainerMappings/{mappingName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "mappingName", self.ctx.args.mapping_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "protectionContainerName", self.ctx.args.protection_container_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_protection_container_mapping_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("policyId", AAZStrType, ".policy_id")
                properties.set_prop("providerSpecificInput", AAZObjectType, ".provider_specific_input")
                properties.set_prop("targetProtectionContainerId", AAZStrType, ".target_protection_container_id")

            provider_specific_input = _builder.get(".properties.providerSpecificInput")
            if provider_specific_input is not None:
                provider_specific_input.set_const("instanceType", "A2A", AAZStrType, ".a2a", typ_kwargs={"flags": {"required": True}})
                provider_specific_input.set_const("instanceType", "HyperVReplicaAzure", AAZStrType, ".hyper_v_replica_azure", typ_kwargs={"flags": {"required": True}})
                provider_specific_input.set_const("instanceType", "InMageRcm", AAZStrType, ".in_mage_rcm", typ_kwargs={"flags": {"required": True}})
                provider_specific_input.set_const("instanceType", "VMwareCbt", AAZStrType, ".vmware_cbt", typ_kwargs={"flags": {"required": True}})
                provider_specific_input.discriminate_by("instanceType", "A2A")
                provider_specific_input.discriminate_by("instanceType", "HyperVReplicaAzure")
                provider_specific_input.discriminate_by("instanceType", "InMageRcm")
                provider_specific_input.discriminate_by("instanceType", "VMwareCbt")

            disc_a2_a = _builder.get(".properties.providerSpecificInput{instanceType:A2A}")
            if disc_a2_a is not None:
                disc_a2_a.set_prop("agentAutoUpdateStatus", AAZStrType, ".a2a.agent_auto_update_status")
                disc_a2_a.set_prop("automationAccountArmId", AAZStrType, ".a2a.automation_account_arm_id")
                disc_a2_a.set_prop("automationAccountAuthenticationType", AAZStrType, ".a2a.automation_account_authentication_type")

            disc_hyper_v_replica_azure = _builder.get(".properties.providerSpecificInput{instanceType:HyperVReplicaAzure}")
            if disc_hyper_v_replica_azure is not None:
                disc_hyper_v_replica_azure.set_prop("location", AAZStrType, ".hyper_v_replica_azure.location")

            disc_in_mage_rcm = _builder.get(".properties.providerSpecificInput{instanceType:InMageRcm}")
            if disc_in_mage_rcm is not None:
                disc_in_mage_rcm.set_prop("enableAgentAutoUpgrade", AAZStrType, ".in_mage_rcm.enable_agent_auto_upgrade", typ_kwargs={"flags": {"required": True}})

            disc_v_mware_cbt = _builder.get(".properties.providerSpecificInput{instanceType:VMwareCbt}")
            if disc_v_mware_cbt is not None:
                disc_v_mware_cbt.set_prop("keyVaultId", AAZStrType, ".vmware_cbt.key_vault_id")
                disc_v_mware_cbt.set_prop("keyVaultUri", AAZStrType, ".vmware_cbt.key_vault_uri")
                disc_v_mware_cbt.set_prop("serviceBusConnectionStringSecretName", AAZStrType, ".vmware_cbt.service_bus_connection_string_secret_name")
                disc_v_mware_cbt.set_prop("storageAccountId", AAZStrType, ".vmware_cbt.storage_account_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_cbt.set_prop("storageAccountSasSecretName", AAZStrType, ".vmware_cbt.storage_account_sas_secret_name")
                disc_v_mware_cbt.set_prop("targetLocation", AAZStrType, ".vmware_cbt.target_location", typ_kwargs={"flags": {"required": True}})

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_protection_container_mapping_read = None

    @classmethod
    def _build_schema_protection_container_mapping_read(cls, _schema):
        if cls._schema_protection_container_mapping_read is not None:
            _schema.id = cls._schema_protection_container_mapping_read.id
            _schema.location = cls._schema_protection_container_mapping_read.location
            _schema.name = cls._schema_protection_container_mapping_read.name
            _schema.properties = cls._schema_protection_container_mapping_read.properties
            _schema.type = cls._schema_protection_container_mapping_read.type
            return

        cls._schema_protection_container_mapping_read = _schema_protection_container_mapping_read = AAZObjectType()

        protection_container_mapping_read = _schema_protection_container_mapping_read
        protection_container_mapping_read.id = AAZStrType(
            flags={"read_only": True},
        )
        protection_container_mapping_read.location = AAZStrType()
        protection_container_mapping_read.name = AAZStrType(
            flags={"read_only": True},
        )
        protection_container_mapping_read.properties = AAZObjectType()
        protection_container_mapping_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_protection_container_mapping_read.properties
        properties.health = AAZStrType()
        properties.health_error_details = AAZListType(
            serialized_name="healthErrorDetails",
        )
        properties.policy_friendly_name = AAZStrType(
            serialized_name="policyFriendlyName",
        )
        properties.policy_id = AAZStrType(
            serialized_name="policyId",
        )
        properties.provider_specific_details = AAZObjectType(
            serialized_name="providerSpecificDetails",
        )
        properties.source_fabric_friendly_name = AAZStrType(
            serialized_name="sourceFabricFriendlyName",
        )
        properties.source_protection_container_friendly_name = AAZStrType(
            serialized_name="sourceProtectionContainerFriendlyName",
        )
        properties.state = AAZStrType()
        properties.target_fabric_friendly_name = AAZStrType(
            serialized_name="targetFabricFriendlyName",
        )
        properties.target_protection_container_friendly_name = AAZStrType(
            serialized_name="targetProtectionContainerFriendlyName",
        )
        properties.target_protection_container_id = AAZStrType(
            serialized_name="targetProtectionContainerId",
        )

        health_error_details = _schema_protection_container_mapping_read.properties.health_error_details
        health_error_details.Element = AAZObjectType()

        _element = _schema_protection_container_mapping_read.properties.health_error_details.Element
        _element.creation_time_utc = AAZStrType(
            serialized_name="creationTimeUtc",
        )
        _element.customer_resolvability = AAZStrType(
            serialized_name="customerResolvability",
        )
        _element.entity_id = AAZStrType(
            serialized_name="entityId",
        )
        _element.error_category = AAZStrType(
            serialized_name="errorCategory",
        )
        _element.error_code = AAZStrType(
            serialized_name="errorCode",
        )
        _element.error_id = AAZStrType(
            serialized_name="errorId",
        )
        _element.error_level = AAZStrType(
            serialized_name="errorLevel",
        )
        _element.error_message = AAZStrType(
            serialized_name="errorMessage",
        )
        _element.error_source = AAZStrType(
            serialized_name="errorSource",
        )
        _element.error_type = AAZStrType(
            serialized_name="errorType",
        )
        _element.inner_health_errors = AAZListType(
            serialized_name="innerHealthErrors",
        )
        _element.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
        )
        _element.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
        )
        _element.recovery_provider_error_message = AAZStrType(
            serialized_name="recoveryProviderErrorMessage",
        )
        _element.summary_message = AAZStrType(
            serialized_name="summaryMessage",
        )

        inner_health_errors = _schema_protection_container_mapping_read.properties.health_error_details.Element.inner_health_errors
        inner_health_errors.Element = AAZObjectType()

        _element = _schema_protection_container_mapping_read.properties.health_error_details.Element.inner_health_errors.Element
        _element.creation_time_utc = AAZStrType(
            serialized_name="creationTimeUtc",
        )
        _element.customer_resolvability = AAZStrType(
            serialized_name="customerResolvability",
        )
        _element.entity_id = AAZStrType(
            serialized_name="entityId",
        )
        _element.error_category = AAZStrType(
            serialized_name="errorCategory",
        )
        _element.error_code = AAZStrType(
            serialized_name="errorCode",
        )
        _element.error_id = AAZStrType(
            serialized_name="errorId",
        )
        _element.error_level = AAZStrType(
            serialized_name="errorLevel",
        )
        _element.error_message = AAZStrType(
            serialized_name="errorMessage",
        )
        _element.error_source = AAZStrType(
            serialized_name="errorSource",
        )
        _element.error_type = AAZStrType(
            serialized_name="errorType",
        )
        _element.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
        )
        _element.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
        )
        _element.recovery_provider_error_message = AAZStrType(
            serialized_name="recoveryProviderErrorMessage",
        )
        _element.summary_message = AAZStrType(
            serialized_name="summaryMessage",
        )

        provider_specific_details = _schema_protection_container_mapping_read.properties.provider_specific_details
        provider_specific_details.instance_type = AAZStrType(
            serialized_name="instanceType",
            flags={"required": True},
        )

        disc_a2_a = _schema_protection_container_mapping_read.properties.provider_specific_details.discriminate_by("instance_type", "A2A")
        disc_a2_a.agent_auto_update_status = AAZStrType(
            serialized_name="agentAutoUpdateStatus",
        )
        disc_a2_a.automation_account_arm_id = AAZStrType(
            serialized_name="automationAccountArmId",
        )
        disc_a2_a.automation_account_authentication_type = AAZStrType(
            serialized_name="automationAccountAuthenticationType",
        )
        disc_a2_a.job_schedule_name = AAZStrType(
            serialized_name="jobScheduleName",
        )
        disc_a2_a.schedule_name = AAZStrType(
            serialized_name="scheduleName",
        )

        disc_in_mage_rcm = _schema_protection_container_mapping_read.properties.provider_specific_details.discriminate_by("instance_type", "InMageRcm")
        disc_in_mage_rcm.enable_agent_auto_upgrade = AAZStrType(
            serialized_name="enableAgentAutoUpgrade",
            flags={"read_only": True},
        )

        disc_v_mware_cbt = _schema_protection_container_mapping_read.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt")
        disc_v_mware_cbt.key_vault_id = AAZStrType(
            serialized_name="keyVaultId",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.key_vault_uri = AAZStrType(
            serialized_name="keyVaultUri",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.role_size_to_nic_count_map = AAZDictType(
            serialized_name="roleSizeToNicCountMap",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.service_bus_connection_string_secret_name = AAZStrType(
            serialized_name="serviceBusConnectionStringSecretName",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.storage_account_id = AAZStrType(
            serialized_name="storageAccountId",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.storage_account_sas_secret_name = AAZStrType(
            serialized_name="storageAccountSasSecretName",
            flags={"read_only": True},
        )
        disc_v_mware_cbt.target_location = AAZStrType(
            serialized_name="targetLocation",
            flags={"read_only": True},
        )

        role_size_to_nic_count_map = _schema_protection_container_mapping_read.properties.provider_specific_details.discriminate_by("instance_type", "VMwareCbt").role_size_to_nic_count_map
        role_size_to_nic_count_map.Element = AAZIntType()

        _schema.id = cls._schema_protection_container_mapping_read.id
        _schema.location = cls._schema_protection_container_mapping_read.location
        _schema.name = cls._schema_protection_container_mapping_read.name
        _schema.properties = cls._schema_protection_container_mapping_read.properties
        _schema.type = cls._schema_protection_container_mapping_read.type


__all__ = ["Update"]
