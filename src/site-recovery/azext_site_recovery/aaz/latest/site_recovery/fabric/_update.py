# --------------------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
#
# Code generated by aaz-dev-tools
# --------------------------------------------------------------------------------------------

# pylint: skip-file
# flake8: noqa

from azure.cli.core.aaz import *


@register_command(
    "site-recovery fabric update",
)
class Update(AAZCommand):
    """Update operation to create an Azure Site Recovery fabric (for e.g. Hyper-V site).

    :example: fabric update
        az site-recovery fabric update -n fabric_source_name -g rg --vault-name vault_name --custom-details '{azure:{location:eastus}}'
    """

    _aaz_info = {
        "version": "2022-08-01",
        "resources": [
            ["mgmt-plane", "/subscriptions/{}/resourcegroups/{}/providers/microsoft.recoveryservices/vaults/{}/replicationfabrics/{}", "2022-08-01"],
        ]
    }

    AZ_SUPPORT_NO_WAIT = True

    AZ_SUPPORT_GENERIC_UPDATE = True

    def _handler(self, command_args):
        super()._handler(command_args)
        return self.build_lro_poller(self._execute_operations, self._output)

    _args_schema = None

    @classmethod
    def _build_arguments_schema(cls, *args, **kwargs):
        if cls._args_schema is not None:
            return cls._args_schema
        cls._args_schema = super()._build_arguments_schema(*args, **kwargs)

        # define Arg Group ""

        _args_schema = cls._args_schema
        _args_schema.fabric_name = AAZStrArg(
            options=["-n", "--name", "--fabric-name"],
            help="Fabric name.",
            required=True,
            id_part="child_name_1",
        )
        _args_schema.resource_group = AAZResourceGroupNameArg(
            required=True,
        )
        _args_schema.vault_name = AAZStrArg(
            options=["--vault-name"],
            help="The name of the recovery services vault.",
            required=True,
            id_part="name",
        )

        # define Arg Group "Properties"

        _args_schema = cls._args_schema
        _args_schema.custom_details = AAZObjectArg(
            options=["--custom-details"],
            arg_group="Properties",
            help="Fabric provider specific creation input.",
            nullable=True,
        )

        custom_details = cls._args_schema.custom_details
        custom_details.azure = AAZObjectArg(
            options=["azure"],
        )
        custom_details.hyper_v_site = AAZObjectArg(
            options=["hyper-v-site"],
        )
        custom_details.in_mage_rcm = AAZObjectArg(
            options=["in-mage-rcm"],
        )

        azure = cls._args_schema.custom_details.azure
        azure.location = AAZStrArg(
            options=["location"],
            help="The Location.",
            nullable=True,
        )

        hyper_v_site = cls._args_schema.custom_details.hyper_v_site
        hyper_v_site.location = AAZStrArg(
            options=["location"],
            help="The Location.",
            nullable=True,
        )

        in_mage_rcm = cls._args_schema.custom_details.in_mage_rcm
        in_mage_rcm.physical_site_id = AAZStrArg(
            options=["physical-site-id"],
            help="The ARM Id of the physical site.",
        )
        in_mage_rcm.source_agent_identity = AAZObjectArg(
            options=["source-agent-identity"],
            help="The identity provider input for source agent authentication.",
        )
        in_mage_rcm.vmware_site_id = AAZStrArg(
            options=["vmware-site-id"],
            help="The ARM Id of the VMware site.",
        )

        source_agent_identity = cls._args_schema.custom_details.in_mage_rcm.source_agent_identity
        source_agent_identity.aad_authority = AAZStrArg(
            options=["aad-authority"],
            help="The base authority for Azure Active Directory authentication.",
        )
        source_agent_identity.application_id = AAZStrArg(
            options=["application-id"],
            help="The application/client Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
        )
        source_agent_identity.audience = AAZStrArg(
            options=["audience"],
            help="The intended Audience of the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
        )
        source_agent_identity.object_id = AAZStrArg(
            options=["object-id"],
            help="The object Id of the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
        )
        source_agent_identity.tenant_id = AAZStrArg(
            options=["tenant-id"],
            help="The tenant Id for the service principal with which the on-premise management/data plane components would communicate with our Azure services.",
        )
        return cls._args_schema

    def _execute_operations(self):
        self.pre_operations()
        self.ReplicationFabricsGet(ctx=self.ctx)()
        self.pre_instance_update(self.ctx.vars.instance)
        self.InstanceUpdateByJson(ctx=self.ctx)()
        self.InstanceUpdateByGeneric(ctx=self.ctx)()
        self.post_instance_update(self.ctx.vars.instance)
        yield self.ReplicationFabricsCreate(ctx=self.ctx)()
        self.post_operations()

    @register_callback
    def pre_operations(self):
        pass

    @register_callback
    def post_operations(self):
        pass

    @register_callback
    def pre_instance_update(self, instance):
        pass

    @register_callback
    def post_instance_update(self, instance):
        pass

    def _output(self, *args, **kwargs):
        result = self.deserialize_output(self.ctx.vars.instance, client_flatten=True)
        return result

    class ReplicationFabricsGet(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [200]:
                return self.on_200(session)

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "GET"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_fabric_read(cls._schema_on_200)

            return cls._schema_on_200

    class ReplicationFabricsCreate(AAZHttpOperation):
        CLIENT_TYPE = "MgmtClient"

        def __call__(self, *args, **kwargs):
            request = self.make_request()
            session = self.client.send_request(request=request, stream=False, **kwargs)
            if session.http_response.status_code in [202]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )
            if session.http_response.status_code in [200]:
                return self.client.build_lro_polling(
                    self.ctx.args.no_wait,
                    session,
                    self.on_200,
                    self.on_error,
                    lro_options={"final-state-via": "azure-async-operation"},
                    path_format_arguments=self.url_parameters,
                )

            return self.on_error(session.http_response)

        @property
        def url(self):
            return self.client.format_url(
                "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.RecoveryServices/vaults/{resourceName}/replicationFabrics/{fabricName}",
                **self.url_parameters
            )

        @property
        def method(self):
            return "PUT"

        @property
        def error_format(self):
            return "ODataV4Format"

        @property
        def url_parameters(self):
            parameters = {
                **self.serialize_url_param(
                    "fabricName", self.ctx.args.fabric_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceGroupName", self.ctx.args.resource_group,
                    required=True,
                ),
                **self.serialize_url_param(
                    "resourceName", self.ctx.args.vault_name,
                    required=True,
                ),
                **self.serialize_url_param(
                    "subscriptionId", self.ctx.subscription_id,
                    required=True,
                ),
            }
            return parameters

        @property
        def query_parameters(self):
            parameters = {
                **self.serialize_query_param(
                    "api-version", "2022-08-01",
                    required=True,
                ),
            }
            return parameters

        @property
        def header_parameters(self):
            parameters = {
                **self.serialize_header_param(
                    "Content-Type", "application/json",
                ),
                **self.serialize_header_param(
                    "Accept", "application/json",
                ),
            }
            return parameters

        @property
        def content(self):
            _content_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=self.ctx.vars.instance,
            )

            return self.serialize_content(_content_value)

        def on_200(self, session):
            data = self.deserialize_http_content(session)
            self.ctx.set_var(
                "instance",
                data,
                schema_builder=self._build_schema_on_200
            )

        _schema_on_200 = None

        @classmethod
        def _build_schema_on_200(cls):
            if cls._schema_on_200 is not None:
                return cls._schema_on_200

            cls._schema_on_200 = AAZObjectType()
            _UpdateHelper._build_schema_fabric_read(cls._schema_on_200)

            return cls._schema_on_200

    class InstanceUpdateByJson(AAZJsonInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance(self.ctx.vars.instance)

        def _update_instance(self, instance):
            _instance_value, _builder = self.new_content_builder(
                self.ctx.args,
                value=instance,
                typ=AAZObjectType
            )
            _builder.set_prop("properties", AAZObjectType)

            properties = _builder.get(".properties")
            if properties is not None:
                properties.set_prop("customDetails", AAZObjectType, ".custom_details")

            custom_details = _builder.get(".properties.customDetails")
            if custom_details is not None:
                custom_details.set_const("instanceType", "Azure", AAZStrType, ".azure", typ_kwargs={"flags": {"required": True}})
                custom_details.set_const("instanceType", "HyperVSite", AAZStrType, ".hyper_v_site", typ_kwargs={"flags": {"required": True}})
                custom_details.set_const("instanceType", "InMageRcm", AAZStrType, ".in_mage_rcm", typ_kwargs={"flags": {"required": True}})
                custom_details.discriminate_by("instanceType", "Azure")
                custom_details.discriminate_by("instanceType", "HyperVSite")
                custom_details.discriminate_by("instanceType", "InMageRcm")
                custom_details.discriminate_by("instanceType", "VMwareV2")

            disc_azure = _builder.get(".properties.customDetails{instanceType:Azure}")
            if disc_azure is not None:
                disc_azure.set_prop("location", AAZStrType, ".azure.location")

            disc_hyper_v_site = _builder.get(".properties.customDetails{instanceType:HyperVSite}")
            if disc_hyper_v_site is not None:
                disc_hyper_v_site.set_prop("location", AAZStrType, ".hyper_v_site.location")

            disc_in_mage_rcm = _builder.get(".properties.customDetails{instanceType:InMageRcm}")
            if disc_in_mage_rcm is not None:
                disc_in_mage_rcm.set_prop("physicalSiteId", AAZStrType, ".in_mage_rcm.physical_site_id", typ_kwargs={"flags": {"required": True}})
                disc_in_mage_rcm.set_prop("sourceAgentIdentity", AAZObjectType, ".in_mage_rcm.source_agent_identity", typ_kwargs={"flags": {"required": True}})
                disc_in_mage_rcm.set_prop("vmwareSiteId", AAZStrType, ".in_mage_rcm.vmware_site_id", typ_kwargs={"flags": {"required": True}})

            source_agent_identity = _builder.get(".properties.customDetails{instanceType:InMageRcm}.sourceAgentIdentity")
            if source_agent_identity is not None:
                source_agent_identity.set_prop("aadAuthority", AAZStrType, ".aad_authority", typ_kwargs={"flags": {"required": True}})
                source_agent_identity.set_prop("applicationId", AAZStrType, ".application_id", typ_kwargs={"flags": {"required": True}})
                source_agent_identity.set_prop("audience", AAZStrType, ".audience", typ_kwargs={"flags": {"required": True}})
                source_agent_identity.set_prop("objectId", AAZStrType, ".object_id", typ_kwargs={"flags": {"required": True}})
                source_agent_identity.set_prop("tenantId", AAZStrType, ".tenant_id", typ_kwargs={"flags": {"required": True}})

            disc_v_mware_v2 = _builder.get(".properties.customDetails{instanceType:VMwareV2}")
            if disc_v_mware_v2 is not None:
                disc_v_mware_v2.set_prop("migrationSolutionId", AAZStrType, ".vmware_v2.migration_solution_id", typ_kwargs={"flags": {"required": True}})
                disc_v_mware_v2.set_prop("physicalSiteId", AAZStrType, ".vmware_v2.physical_site_id")
                disc_v_mware_v2.set_prop("vmwareSiteId", AAZStrType, ".vmware_v2.vmware_site_id")

            return _instance_value

    class InstanceUpdateByGeneric(AAZGenericInstanceUpdateOperation):

        def __call__(self, *args, **kwargs):
            self._update_instance_by_generic(
                self.ctx.vars.instance,
                self.ctx.generic_update_args
            )


class _UpdateHelper:
    """Helper class for Update"""

    _schema_encryption_details_read = None

    @classmethod
    def _build_schema_encryption_details_read(cls, _schema):
        if cls._schema_encryption_details_read is not None:
            _schema.kek_cert_expiry_date = cls._schema_encryption_details_read.kek_cert_expiry_date
            _schema.kek_cert_thumbprint = cls._schema_encryption_details_read.kek_cert_thumbprint
            _schema.kek_state = cls._schema_encryption_details_read.kek_state
            return

        cls._schema_encryption_details_read = _schema_encryption_details_read = AAZObjectType()

        encryption_details_read = _schema_encryption_details_read
        encryption_details_read.kek_cert_expiry_date = AAZStrType(
            serialized_name="kekCertExpiryDate",
        )
        encryption_details_read.kek_cert_thumbprint = AAZStrType(
            serialized_name="kekCertThumbprint",
        )
        encryption_details_read.kek_state = AAZStrType(
            serialized_name="kekState",
        )

        _schema.kek_cert_expiry_date = cls._schema_encryption_details_read.kek_cert_expiry_date
        _schema.kek_cert_thumbprint = cls._schema_encryption_details_read.kek_cert_thumbprint
        _schema.kek_state = cls._schema_encryption_details_read.kek_state

    _schema_fabric_read = None

    @classmethod
    def _build_schema_fabric_read(cls, _schema):
        if cls._schema_fabric_read is not None:
            _schema.id = cls._schema_fabric_read.id
            _schema.location = cls._schema_fabric_read.location
            _schema.name = cls._schema_fabric_read.name
            _schema.properties = cls._schema_fabric_read.properties
            _schema.type = cls._schema_fabric_read.type
            return

        cls._schema_fabric_read = _schema_fabric_read = AAZObjectType()

        fabric_read = _schema_fabric_read
        fabric_read.id = AAZStrType(
            flags={"read_only": True},
        )
        fabric_read.location = AAZStrType()
        fabric_read.name = AAZStrType(
            flags={"read_only": True},
        )
        fabric_read.properties = AAZObjectType()
        fabric_read.type = AAZStrType(
            flags={"read_only": True},
        )

        properties = _schema_fabric_read.properties
        properties.bcdr_state = AAZStrType(
            serialized_name="bcdrState",
        )
        properties.custom_details = AAZObjectType(
            serialized_name="customDetails",
        )
        properties.encryption_details = AAZObjectType(
            serialized_name="encryptionDetails",
        )
        cls._build_schema_encryption_details_read(properties.encryption_details)
        properties.friendly_name = AAZStrType(
            serialized_name="friendlyName",
        )
        properties.health = AAZStrType()
        properties.health_error_details = AAZListType(
            serialized_name="healthErrorDetails",
        )
        properties.internal_identifier = AAZStrType(
            serialized_name="internalIdentifier",
        )
        properties.rollover_encryption_details = AAZObjectType(
            serialized_name="rolloverEncryptionDetails",
        )
        cls._build_schema_encryption_details_read(properties.rollover_encryption_details)

        custom_details = _schema_fabric_read.properties.custom_details
        custom_details.instance_type = AAZStrType(
            serialized_name="instanceType",
            flags={"required": True},
        )

        disc_azure = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "Azure")
        disc_azure.container_ids = AAZListType(
            serialized_name="containerIds",
        )
        disc_azure.location = AAZStrType()
        disc_azure.zones = AAZListType()

        container_ids = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "Azure").container_ids
        container_ids.Element = AAZStrType()

        zones = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "Azure").zones
        zones.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "Azure").zones.Element
        _element.source = AAZStrType()
        _element.target = AAZStrType()

        disc_hyper_v_site = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "HyperVSite")
        disc_hyper_v_site.hyper_v_hosts = AAZListType(
            serialized_name="hyperVHosts",
        )

        hyper_v_hosts = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "HyperVSite").hyper_v_hosts
        hyper_v_hosts.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "HyperVSite").hyper_v_hosts.Element
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.mars_agent_version = AAZStrType(
            serialized_name="marsAgentVersion",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )

        disc_in_mage_rcm = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm")
        disc_in_mage_rcm.agent_details = AAZListType(
            serialized_name="agentDetails",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.control_plane_uri = AAZStrType(
            serialized_name="controlPlaneUri",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.data_plane_uri = AAZStrType(
            serialized_name="dataPlaneUri",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.dras = AAZListType(
            flags={"read_only": True},
        )
        disc_in_mage_rcm.mars_agents = AAZListType(
            serialized_name="marsAgents",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.physical_site_id = AAZStrType(
            serialized_name="physicalSiteId",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.process_servers = AAZListType(
            serialized_name="processServers",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.push_installers = AAZListType(
            serialized_name="pushInstallers",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.rcm_proxies = AAZListType(
            serialized_name="rcmProxies",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.replication_agents = AAZListType(
            serialized_name="replicationAgents",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.reprotect_agents = AAZListType(
            serialized_name="reprotectAgents",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.service_container_id = AAZStrType(
            serialized_name="serviceContainerId",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.service_endpoint = AAZStrType(
            serialized_name="serviceEndpoint",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.service_resource_id = AAZStrType(
            serialized_name="serviceResourceId",
            flags={"read_only": True},
        )
        disc_in_mage_rcm.source_agent_identity_details = AAZObjectType(
            serialized_name="sourceAgentIdentityDetails",
        )
        disc_in_mage_rcm.vmware_site_id = AAZStrType(
            serialized_name="vmwareSiteId",
            flags={"read_only": True},
        )

        agent_details = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").agent_details
        agent_details.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").agent_details.Element
        _element.agent_id = AAZStrType(
            serialized_name="agentId",
            flags={"read_only": True},
        )
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.disks = AAZListType(
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.machine_id = AAZStrType(
            serialized_name="machineId",
            flags={"read_only": True},
        )

        disks = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").agent_details.Element.disks
        disks.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").agent_details.Element.disks.Element
        _element.capacity_in_bytes = AAZIntType(
            serialized_name="capacityInBytes",
            flags={"read_only": True},
        )
        _element.disk_id = AAZStrType(
            serialized_name="diskId",
            flags={"read_only": True},
        )
        _element.disk_name = AAZStrType(
            serialized_name="diskName",
            flags={"read_only": True},
        )
        _element.is_os_disk = AAZStrType(
            serialized_name="isOSDisk",
            flags={"read_only": True},
        )
        _element.lun_id = AAZIntType(
            serialized_name="lunId",
            flags={"read_only": True},
        )

        dras = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").dras
        dras.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").dras.Element
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.forward_protected_item_count = AAZIntType(
            serialized_name="forwardProtectedItemCount",
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.reverse_protected_item_count = AAZIntType(
            serialized_name="reverseProtectedItemCount",
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").dras.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        mars_agents = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").mars_agents
        mars_agents.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").mars_agents.Element
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").mars_agents.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        process_servers = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").process_servers
        process_servers.Element = AAZObjectType()
        cls._build_schema_process_server_details_read(process_servers.Element)

        push_installers = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").push_installers
        push_installers.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").push_installers.Element
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").push_installers.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        rcm_proxies = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").rcm_proxies
        rcm_proxies.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").rcm_proxies.Element
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.client_authentication_type = AAZStrType(
            serialized_name="clientAuthenticationType",
            flags={"read_only": True},
        )
        _element.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").rcm_proxies.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        replication_agents = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").replication_agents
        replication_agents.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").replication_agents.Element
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").replication_agents.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        reprotect_agents = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").reprotect_agents
        reprotect_agents.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").reprotect_agents.Element
        _element.accessible_datastores = AAZListType(
            serialized_name="accessibleDatastores",
            flags={"read_only": True},
        )
        _element.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        _element.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        _element.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        _element.id = AAZStrType(
            flags={"read_only": True},
        )
        _element.last_discovery_in_utc = AAZStrType(
            serialized_name="lastDiscoveryInUtc",
            flags={"read_only": True},
        )
        _element.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        _element.name = AAZStrType(
            flags={"read_only": True},
        )
        _element.protected_item_count = AAZIntType(
            serialized_name="protectedItemCount",
            flags={"read_only": True},
        )
        _element.vcenter_id = AAZStrType(
            serialized_name="vcenterId",
            flags={"read_only": True},
        )
        _element.version = AAZStrType(
            flags={"read_only": True},
        )

        accessible_datastores = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").reprotect_agents.Element.accessible_datastores
        accessible_datastores.Element = AAZStrType()

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").reprotect_agents.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        source_agent_identity_details = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "InMageRcm").source_agent_identity_details
        source_agent_identity_details.aad_authority = AAZStrType(
            serialized_name="aadAuthority",
        )
        source_agent_identity_details.application_id = AAZStrType(
            serialized_name="applicationId",
        )
        source_agent_identity_details.audience = AAZStrType()
        source_agent_identity_details.object_id = AAZStrType(
            serialized_name="objectId",
        )
        source_agent_identity_details.tenant_id = AAZStrType(
            serialized_name="tenantId",
        )

        disc_v_mware = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware")
        disc_v_mware.agent_count = AAZStrType(
            serialized_name="agentCount",
        )
        disc_v_mware.agent_expiry_date = AAZStrType(
            serialized_name="agentExpiryDate",
        )
        disc_v_mware.agent_version = AAZStrType(
            serialized_name="agentVersion",
        )
        disc_v_mware.agent_version_details = AAZObjectType(
            serialized_name="agentVersionDetails",
        )
        cls._build_schema_version_details_read(disc_v_mware.agent_version_details)
        disc_v_mware.available_memory_in_bytes = AAZIntType(
            serialized_name="availableMemoryInBytes",
        )
        disc_v_mware.available_space_in_bytes = AAZIntType(
            serialized_name="availableSpaceInBytes",
        )
        disc_v_mware.cpu_load = AAZStrType(
            serialized_name="cpuLoad",
        )
        disc_v_mware.cpu_load_status = AAZStrType(
            serialized_name="cpuLoadStatus",
        )
        disc_v_mware.cs_service_status = AAZStrType(
            serialized_name="csServiceStatus",
        )
        disc_v_mware.database_server_load = AAZStrType(
            serialized_name="databaseServerLoad",
        )
        disc_v_mware.database_server_load_status = AAZStrType(
            serialized_name="databaseServerLoadStatus",
        )
        disc_v_mware.host_name = AAZStrType(
            serialized_name="hostName",
        )
        disc_v_mware.ip_address = AAZStrType(
            serialized_name="ipAddress",
        )
        disc_v_mware.last_heartbeat = AAZStrType(
            serialized_name="lastHeartbeat",
        )
        disc_v_mware.master_target_servers = AAZListType(
            serialized_name="masterTargetServers",
        )
        disc_v_mware.memory_usage_status = AAZStrType(
            serialized_name="memoryUsageStatus",
        )
        disc_v_mware.process_server_count = AAZStrType(
            serialized_name="processServerCount",
        )
        disc_v_mware.process_servers = AAZListType(
            serialized_name="processServers",
        )
        disc_v_mware.protected_servers = AAZStrType(
            serialized_name="protectedServers",
        )
        disc_v_mware.ps_template_version = AAZStrType(
            serialized_name="psTemplateVersion",
        )
        disc_v_mware.replication_pair_count = AAZStrType(
            serialized_name="replicationPairCount",
        )
        disc_v_mware.run_as_accounts = AAZListType(
            serialized_name="runAsAccounts",
        )
        disc_v_mware.space_usage_status = AAZStrType(
            serialized_name="spaceUsageStatus",
        )
        disc_v_mware.ssl_cert_expiry_date = AAZStrType(
            serialized_name="sslCertExpiryDate",
        )
        disc_v_mware.ssl_cert_expiry_remaining_days = AAZIntType(
            serialized_name="sslCertExpiryRemainingDays",
        )
        disc_v_mware.switch_provider_blocking_error_details = AAZListType(
            serialized_name="switchProviderBlockingErrorDetails",
        )
        disc_v_mware.system_load = AAZStrType(
            serialized_name="systemLoad",
        )
        disc_v_mware.system_load_status = AAZStrType(
            serialized_name="systemLoadStatus",
        )
        disc_v_mware.total_memory_in_bytes = AAZIntType(
            serialized_name="totalMemoryInBytes",
        )
        disc_v_mware.total_space_in_bytes = AAZIntType(
            serialized_name="totalSpaceInBytes",
        )
        disc_v_mware.version_status = AAZStrType(
            serialized_name="versionStatus",
        )
        disc_v_mware.web_load = AAZStrType(
            serialized_name="webLoad",
        )
        disc_v_mware.web_load_status = AAZStrType(
            serialized_name="webLoadStatus",
        )

        master_target_servers = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers
        master_target_servers.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element
        _element.agent_expiry_date = AAZStrType(
            serialized_name="agentExpiryDate",
        )
        _element.agent_version = AAZStrType(
            serialized_name="agentVersion",
        )
        _element.agent_version_details = AAZObjectType(
            serialized_name="agentVersionDetails",
        )
        cls._build_schema_version_details_read(_element.agent_version_details)
        _element.data_stores = AAZListType(
            serialized_name="dataStores",
        )
        _element.disk_count = AAZIntType(
            serialized_name="diskCount",
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
        )
        _element.id = AAZStrType()
        _element.ip_address = AAZStrType(
            serialized_name="ipAddress",
        )
        _element.last_heartbeat = AAZStrType(
            serialized_name="lastHeartbeat",
        )
        _element.mars_agent_expiry_date = AAZStrType(
            serialized_name="marsAgentExpiryDate",
        )
        _element.mars_agent_version = AAZStrType(
            serialized_name="marsAgentVersion",
        )
        _element.mars_agent_version_details = AAZObjectType(
            serialized_name="marsAgentVersionDetails",
        )
        cls._build_schema_version_details_read(_element.mars_agent_version_details)
        _element.name = AAZStrType()
        _element.os_type = AAZStrType(
            serialized_name="osType",
        )
        _element.os_version = AAZStrType(
            serialized_name="osVersion",
        )
        _element.retention_volumes = AAZListType(
            serialized_name="retentionVolumes",
        )
        _element.validation_errors = AAZListType(
            serialized_name="validationErrors",
        )
        _element.version_status = AAZStrType(
            serialized_name="versionStatus",
        )

        data_stores = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.data_stores
        data_stores.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.data_stores.Element
        _element.capacity = AAZStrType()
        _element.free_space = AAZStrType(
            serialized_name="freeSpace",
        )
        _element.symbolic_name = AAZStrType(
            serialized_name="symbolicName",
        )
        _element.type = AAZStrType()
        _element.uuid = AAZStrType()

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        retention_volumes = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.retention_volumes
        retention_volumes.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.retention_volumes.Element
        _element.capacity_in_bytes = AAZIntType(
            serialized_name="capacityInBytes",
        )
        _element.free_space_in_bytes = AAZIntType(
            serialized_name="freeSpaceInBytes",
        )
        _element.threshold_percentage = AAZIntType(
            serialized_name="thresholdPercentage",
        )
        _element.volume_name = AAZStrType(
            serialized_name="volumeName",
        )

        validation_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").master_target_servers.Element.validation_errors
        validation_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(validation_errors.Element)

        process_servers = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").process_servers
        process_servers.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").process_servers.Element
        _element.agent_expiry_date = AAZStrType(
            serialized_name="agentExpiryDate",
        )
        _element.agent_version = AAZStrType(
            serialized_name="agentVersion",
        )
        _element.agent_version_details = AAZObjectType(
            serialized_name="agentVersionDetails",
        )
        cls._build_schema_version_details_read(_element.agent_version_details)
        _element.available_memory_in_bytes = AAZIntType(
            serialized_name="availableMemoryInBytes",
        )
        _element.available_space_in_bytes = AAZIntType(
            serialized_name="availableSpaceInBytes",
        )
        _element.cpu_load = AAZStrType(
            serialized_name="cpuLoad",
        )
        _element.cpu_load_status = AAZStrType(
            serialized_name="cpuLoadStatus",
        )
        _element.friendly_name = AAZStrType(
            serialized_name="friendlyName",
        )
        _element.health = AAZStrType(
            flags={"read_only": True},
        )
        _element.health_errors = AAZListType(
            serialized_name="healthErrors",
        )
        _element.host_id = AAZStrType(
            serialized_name="hostId",
        )
        _element.id = AAZStrType()
        _element.ip_address = AAZStrType(
            serialized_name="ipAddress",
        )
        _element.last_heartbeat = AAZStrType(
            serialized_name="lastHeartbeat",
        )
        _element.machine_count = AAZStrType(
            serialized_name="machineCount",
        )
        _element.mars_communication_status = AAZStrType(
            serialized_name="marsCommunicationStatus",
            flags={"read_only": True},
        )
        _element.mars_registration_status = AAZStrType(
            serialized_name="marsRegistrationStatus",
            flags={"read_only": True},
        )
        _element.memory_usage_status = AAZStrType(
            serialized_name="memoryUsageStatus",
        )
        _element.mobility_service_updates = AAZListType(
            serialized_name="mobilityServiceUpdates",
        )
        _element.os_type = AAZStrType(
            serialized_name="osType",
        )
        _element.os_version = AAZStrType(
            serialized_name="osVersion",
        )
        _element.ps_service_status = AAZStrType(
            serialized_name="psServiceStatus",
        )
        _element.ps_stats_refresh_time = AAZStrType(
            serialized_name="psStatsRefreshTime",
            flags={"read_only": True},
        )
        _element.replication_pair_count = AAZStrType(
            serialized_name="replicationPairCount",
        )
        _element.space_usage_status = AAZStrType(
            serialized_name="spaceUsageStatus",
        )
        _element.ssl_cert_expiry_date = AAZStrType(
            serialized_name="sslCertExpiryDate",
        )
        _element.ssl_cert_expiry_remaining_days = AAZIntType(
            serialized_name="sslCertExpiryRemainingDays",
        )
        _element.system_load = AAZStrType(
            serialized_name="systemLoad",
        )
        _element.system_load_status = AAZStrType(
            serialized_name="systemLoadStatus",
        )
        _element.throughput_in_bytes = AAZIntType(
            serialized_name="throughputInBytes",
            flags={"read_only": True},
        )
        _element.throughput_in_m_bps = AAZIntType(
            serialized_name="throughputInMBps",
            flags={"read_only": True},
        )
        _element.throughput_status = AAZStrType(
            serialized_name="throughputStatus",
            flags={"read_only": True},
        )
        _element.throughput_upload_pending_data_in_bytes = AAZIntType(
            serialized_name="throughputUploadPendingDataInBytes",
            flags={"read_only": True},
        )
        _element.total_memory_in_bytes = AAZIntType(
            serialized_name="totalMemoryInBytes",
        )
        _element.total_space_in_bytes = AAZIntType(
            serialized_name="totalSpaceInBytes",
        )
        _element.version_status = AAZStrType(
            serialized_name="versionStatus",
        )

        health_errors = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").process_servers.Element.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        mobility_service_updates = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").process_servers.Element.mobility_service_updates
        mobility_service_updates.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").process_servers.Element.mobility_service_updates.Element
        _element.os_type = AAZStrType(
            serialized_name="osType",
        )
        _element.reboot_status = AAZStrType(
            serialized_name="rebootStatus",
        )
        _element.version = AAZStrType()

        run_as_accounts = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").run_as_accounts
        run_as_accounts.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").run_as_accounts.Element
        _element.account_id = AAZStrType(
            serialized_name="accountId",
        )
        _element.account_name = AAZStrType(
            serialized_name="accountName",
        )

        switch_provider_blocking_error_details = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").switch_provider_blocking_error_details
        switch_provider_blocking_error_details.Element = AAZObjectType()

        _element = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").switch_provider_blocking_error_details.Element
        _element.error_code = AAZStrType(
            serialized_name="errorCode",
            flags={"read_only": True},
        )
        _element.error_message = AAZStrType(
            serialized_name="errorMessage",
            flags={"read_only": True},
        )
        _element.error_message_parameters = AAZDictType(
            serialized_name="errorMessageParameters",
            flags={"read_only": True},
        )
        _element.error_tags = AAZDictType(
            serialized_name="errorTags",
            flags={"read_only": True},
        )
        _element.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
            flags={"read_only": True},
        )
        _element.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
            flags={"read_only": True},
        )

        error_message_parameters = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").switch_provider_blocking_error_details.Element.error_message_parameters
        error_message_parameters.Element = AAZStrType()

        error_tags = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMware").switch_provider_blocking_error_details.Element.error_tags
        error_tags.Element = AAZStrType()

        disc_v_mware_v2 = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMwareV2")
        disc_v_mware_v2.migration_solution_id = AAZStrType(
            serialized_name="migrationSolutionId",
            flags={"read_only": True},
        )
        disc_v_mware_v2.physical_site_id = AAZStrType(
            serialized_name="physicalSiteId",
            flags={"read_only": True},
        )
        disc_v_mware_v2.process_servers = AAZListType(
            serialized_name="processServers",
            flags={"read_only": True},
        )
        disc_v_mware_v2.service_container_id = AAZStrType(
            serialized_name="serviceContainerId",
            flags={"read_only": True},
        )
        disc_v_mware_v2.service_endpoint = AAZStrType(
            serialized_name="serviceEndpoint",
            flags={"read_only": True},
        )
        disc_v_mware_v2.service_resource_id = AAZStrType(
            serialized_name="serviceResourceId",
            flags={"read_only": True},
        )
        disc_v_mware_v2.vmware_site_id = AAZStrType(
            serialized_name="vmwareSiteId",
            flags={"read_only": True},
        )

        process_servers = _schema_fabric_read.properties.custom_details.discriminate_by("instance_type", "VMwareV2").process_servers
        process_servers.Element = AAZObjectType()
        cls._build_schema_process_server_details_read(process_servers.Element)

        health_error_details = _schema_fabric_read.properties.health_error_details
        health_error_details.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_error_details.Element)

        _schema.id = cls._schema_fabric_read.id
        _schema.location = cls._schema_fabric_read.location
        _schema.name = cls._schema_fabric_read.name
        _schema.properties = cls._schema_fabric_read.properties
        _schema.type = cls._schema_fabric_read.type

    _schema_health_error_read = None

    @classmethod
    def _build_schema_health_error_read(cls, _schema):
        if cls._schema_health_error_read is not None:
            _schema.creation_time_utc = cls._schema_health_error_read.creation_time_utc
            _schema.customer_resolvability = cls._schema_health_error_read.customer_resolvability
            _schema.entity_id = cls._schema_health_error_read.entity_id
            _schema.error_category = cls._schema_health_error_read.error_category
            _schema.error_code = cls._schema_health_error_read.error_code
            _schema.error_id = cls._schema_health_error_read.error_id
            _schema.error_level = cls._schema_health_error_read.error_level
            _schema.error_message = cls._schema_health_error_read.error_message
            _schema.error_source = cls._schema_health_error_read.error_source
            _schema.error_type = cls._schema_health_error_read.error_type
            _schema.inner_health_errors = cls._schema_health_error_read.inner_health_errors
            _schema.possible_causes = cls._schema_health_error_read.possible_causes
            _schema.recommended_action = cls._schema_health_error_read.recommended_action
            _schema.recovery_provider_error_message = cls._schema_health_error_read.recovery_provider_error_message
            _schema.summary_message = cls._schema_health_error_read.summary_message
            return

        cls._schema_health_error_read = _schema_health_error_read = AAZObjectType()

        health_error_read = _schema_health_error_read
        health_error_read.creation_time_utc = AAZStrType(
            serialized_name="creationTimeUtc",
        )
        health_error_read.customer_resolvability = AAZStrType(
            serialized_name="customerResolvability",
        )
        health_error_read.entity_id = AAZStrType(
            serialized_name="entityId",
        )
        health_error_read.error_category = AAZStrType(
            serialized_name="errorCategory",
        )
        health_error_read.error_code = AAZStrType(
            serialized_name="errorCode",
        )
        health_error_read.error_id = AAZStrType(
            serialized_name="errorId",
        )
        health_error_read.error_level = AAZStrType(
            serialized_name="errorLevel",
        )
        health_error_read.error_message = AAZStrType(
            serialized_name="errorMessage",
        )
        health_error_read.error_source = AAZStrType(
            serialized_name="errorSource",
        )
        health_error_read.error_type = AAZStrType(
            serialized_name="errorType",
        )
        health_error_read.inner_health_errors = AAZListType(
            serialized_name="innerHealthErrors",
        )
        health_error_read.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
        )
        health_error_read.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
        )
        health_error_read.recovery_provider_error_message = AAZStrType(
            serialized_name="recoveryProviderErrorMessage",
        )
        health_error_read.summary_message = AAZStrType(
            serialized_name="summaryMessage",
        )

        inner_health_errors = _schema_health_error_read.inner_health_errors
        inner_health_errors.Element = AAZObjectType()

        _element = _schema_health_error_read.inner_health_errors.Element
        _element.creation_time_utc = AAZStrType(
            serialized_name="creationTimeUtc",
        )
        _element.customer_resolvability = AAZStrType(
            serialized_name="customerResolvability",
        )
        _element.entity_id = AAZStrType(
            serialized_name="entityId",
        )
        _element.error_category = AAZStrType(
            serialized_name="errorCategory",
        )
        _element.error_code = AAZStrType(
            serialized_name="errorCode",
        )
        _element.error_id = AAZStrType(
            serialized_name="errorId",
        )
        _element.error_level = AAZStrType(
            serialized_name="errorLevel",
        )
        _element.error_message = AAZStrType(
            serialized_name="errorMessage",
        )
        _element.error_source = AAZStrType(
            serialized_name="errorSource",
        )
        _element.error_type = AAZStrType(
            serialized_name="errorType",
        )
        _element.possible_causes = AAZStrType(
            serialized_name="possibleCauses",
        )
        _element.recommended_action = AAZStrType(
            serialized_name="recommendedAction",
        )
        _element.recovery_provider_error_message = AAZStrType(
            serialized_name="recoveryProviderErrorMessage",
        )
        _element.summary_message = AAZStrType(
            serialized_name="summaryMessage",
        )

        _schema.creation_time_utc = cls._schema_health_error_read.creation_time_utc
        _schema.customer_resolvability = cls._schema_health_error_read.customer_resolvability
        _schema.entity_id = cls._schema_health_error_read.entity_id
        _schema.error_category = cls._schema_health_error_read.error_category
        _schema.error_code = cls._schema_health_error_read.error_code
        _schema.error_id = cls._schema_health_error_read.error_id
        _schema.error_level = cls._schema_health_error_read.error_level
        _schema.error_message = cls._schema_health_error_read.error_message
        _schema.error_source = cls._schema_health_error_read.error_source
        _schema.error_type = cls._schema_health_error_read.error_type
        _schema.inner_health_errors = cls._schema_health_error_read.inner_health_errors
        _schema.possible_causes = cls._schema_health_error_read.possible_causes
        _schema.recommended_action = cls._schema_health_error_read.recommended_action
        _schema.recovery_provider_error_message = cls._schema_health_error_read.recovery_provider_error_message
        _schema.summary_message = cls._schema_health_error_read.summary_message

    _schema_process_server_details_read = None

    @classmethod
    def _build_schema_process_server_details_read(cls, _schema):
        if cls._schema_process_server_details_read is not None:
            _schema.available_memory_in_bytes = cls._schema_process_server_details_read.available_memory_in_bytes
            _schema.available_space_in_bytes = cls._schema_process_server_details_read.available_space_in_bytes
            _schema.bios_id = cls._schema_process_server_details_read.bios_id
            _schema.disk_usage_status = cls._schema_process_server_details_read.disk_usage_status
            _schema.fabric_object_id = cls._schema_process_server_details_read.fabric_object_id
            _schema.fqdn = cls._schema_process_server_details_read.fqdn
            _schema.free_space_percentage = cls._schema_process_server_details_read.free_space_percentage
            _schema.health = cls._schema_process_server_details_read.health
            _schema.health_errors = cls._schema_process_server_details_read.health_errors
            _schema.historic_health = cls._schema_process_server_details_read.historic_health
            _schema.id = cls._schema_process_server_details_read.id
            _schema.ip_addresses = cls._schema_process_server_details_read.ip_addresses
            _schema.last_heartbeat_utc = cls._schema_process_server_details_read.last_heartbeat_utc
            _schema.memory_usage_percentage = cls._schema_process_server_details_read.memory_usage_percentage
            _schema.memory_usage_status = cls._schema_process_server_details_read.memory_usage_status
            _schema.name = cls._schema_process_server_details_read.name
            _schema.processor_usage_percentage = cls._schema_process_server_details_read.processor_usage_percentage
            _schema.processor_usage_status = cls._schema_process_server_details_read.processor_usage_status
            _schema.protected_item_count = cls._schema_process_server_details_read.protected_item_count
            _schema.system_load = cls._schema_process_server_details_read.system_load
            _schema.system_load_status = cls._schema_process_server_details_read.system_load_status
            _schema.throughput_in_bytes = cls._schema_process_server_details_read.throughput_in_bytes
            _schema.throughput_status = cls._schema_process_server_details_read.throughput_status
            _schema.throughput_upload_pending_data_in_bytes = cls._schema_process_server_details_read.throughput_upload_pending_data_in_bytes
            _schema.total_memory_in_bytes = cls._schema_process_server_details_read.total_memory_in_bytes
            _schema.total_space_in_bytes = cls._schema_process_server_details_read.total_space_in_bytes
            _schema.used_memory_in_bytes = cls._schema_process_server_details_read.used_memory_in_bytes
            _schema.used_space_in_bytes = cls._schema_process_server_details_read.used_space_in_bytes
            _schema.version = cls._schema_process_server_details_read.version
            return

        cls._schema_process_server_details_read = _schema_process_server_details_read = AAZObjectType()

        process_server_details_read = _schema_process_server_details_read
        process_server_details_read.available_memory_in_bytes = AAZIntType(
            serialized_name="availableMemoryInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.available_space_in_bytes = AAZIntType(
            serialized_name="availableSpaceInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.bios_id = AAZStrType(
            serialized_name="biosId",
            flags={"read_only": True},
        )
        process_server_details_read.disk_usage_status = AAZStrType(
            serialized_name="diskUsageStatus",
            flags={"read_only": True},
        )
        process_server_details_read.fabric_object_id = AAZStrType(
            serialized_name="fabricObjectId",
            flags={"read_only": True},
        )
        process_server_details_read.fqdn = AAZStrType(
            flags={"read_only": True},
        )
        process_server_details_read.free_space_percentage = AAZFloatType(
            serialized_name="freeSpacePercentage",
            flags={"read_only": True},
        )
        process_server_details_read.health = AAZStrType(
            flags={"read_only": True},
        )
        process_server_details_read.health_errors = AAZListType(
            serialized_name="healthErrors",
            flags={"read_only": True},
        )
        process_server_details_read.historic_health = AAZStrType(
            serialized_name="historicHealth",
            flags={"read_only": True},
        )
        process_server_details_read.id = AAZStrType(
            flags={"read_only": True},
        )
        process_server_details_read.ip_addresses = AAZListType(
            serialized_name="ipAddresses",
            flags={"read_only": True},
        )
        process_server_details_read.last_heartbeat_utc = AAZStrType(
            serialized_name="lastHeartbeatUtc",
            flags={"read_only": True},
        )
        process_server_details_read.memory_usage_percentage = AAZFloatType(
            serialized_name="memoryUsagePercentage",
            flags={"read_only": True},
        )
        process_server_details_read.memory_usage_status = AAZStrType(
            serialized_name="memoryUsageStatus",
            flags={"read_only": True},
        )
        process_server_details_read.name = AAZStrType(
            flags={"read_only": True},
        )
        process_server_details_read.processor_usage_percentage = AAZFloatType(
            serialized_name="processorUsagePercentage",
            flags={"read_only": True},
        )
        process_server_details_read.processor_usage_status = AAZStrType(
            serialized_name="processorUsageStatus",
            flags={"read_only": True},
        )
        process_server_details_read.protected_item_count = AAZIntType(
            serialized_name="protectedItemCount",
            flags={"read_only": True},
        )
        process_server_details_read.system_load = AAZIntType(
            serialized_name="systemLoad",
            flags={"read_only": True},
        )
        process_server_details_read.system_load_status = AAZStrType(
            serialized_name="systemLoadStatus",
            flags={"read_only": True},
        )
        process_server_details_read.throughput_in_bytes = AAZIntType(
            serialized_name="throughputInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.throughput_status = AAZStrType(
            serialized_name="throughputStatus",
            flags={"read_only": True},
        )
        process_server_details_read.throughput_upload_pending_data_in_bytes = AAZIntType(
            serialized_name="throughputUploadPendingDataInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.total_memory_in_bytes = AAZIntType(
            serialized_name="totalMemoryInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.total_space_in_bytes = AAZIntType(
            serialized_name="totalSpaceInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.used_memory_in_bytes = AAZIntType(
            serialized_name="usedMemoryInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.used_space_in_bytes = AAZIntType(
            serialized_name="usedSpaceInBytes",
            flags={"read_only": True},
        )
        process_server_details_read.version = AAZStrType(
            flags={"read_only": True},
        )

        health_errors = _schema_process_server_details_read.health_errors
        health_errors.Element = AAZObjectType()
        cls._build_schema_health_error_read(health_errors.Element)

        ip_addresses = _schema_process_server_details_read.ip_addresses
        ip_addresses.Element = AAZStrType()

        _schema.available_memory_in_bytes = cls._schema_process_server_details_read.available_memory_in_bytes
        _schema.available_space_in_bytes = cls._schema_process_server_details_read.available_space_in_bytes
        _schema.bios_id = cls._schema_process_server_details_read.bios_id
        _schema.disk_usage_status = cls._schema_process_server_details_read.disk_usage_status
        _schema.fabric_object_id = cls._schema_process_server_details_read.fabric_object_id
        _schema.fqdn = cls._schema_process_server_details_read.fqdn
        _schema.free_space_percentage = cls._schema_process_server_details_read.free_space_percentage
        _schema.health = cls._schema_process_server_details_read.health
        _schema.health_errors = cls._schema_process_server_details_read.health_errors
        _schema.historic_health = cls._schema_process_server_details_read.historic_health
        _schema.id = cls._schema_process_server_details_read.id
        _schema.ip_addresses = cls._schema_process_server_details_read.ip_addresses
        _schema.last_heartbeat_utc = cls._schema_process_server_details_read.last_heartbeat_utc
        _schema.memory_usage_percentage = cls._schema_process_server_details_read.memory_usage_percentage
        _schema.memory_usage_status = cls._schema_process_server_details_read.memory_usage_status
        _schema.name = cls._schema_process_server_details_read.name
        _schema.processor_usage_percentage = cls._schema_process_server_details_read.processor_usage_percentage
        _schema.processor_usage_status = cls._schema_process_server_details_read.processor_usage_status
        _schema.protected_item_count = cls._schema_process_server_details_read.protected_item_count
        _schema.system_load = cls._schema_process_server_details_read.system_load
        _schema.system_load_status = cls._schema_process_server_details_read.system_load_status
        _schema.throughput_in_bytes = cls._schema_process_server_details_read.throughput_in_bytes
        _schema.throughput_status = cls._schema_process_server_details_read.throughput_status
        _schema.throughput_upload_pending_data_in_bytes = cls._schema_process_server_details_read.throughput_upload_pending_data_in_bytes
        _schema.total_memory_in_bytes = cls._schema_process_server_details_read.total_memory_in_bytes
        _schema.total_space_in_bytes = cls._schema_process_server_details_read.total_space_in_bytes
        _schema.used_memory_in_bytes = cls._schema_process_server_details_read.used_memory_in_bytes
        _schema.used_space_in_bytes = cls._schema_process_server_details_read.used_space_in_bytes
        _schema.version = cls._schema_process_server_details_read.version

    _schema_version_details_read = None

    @classmethod
    def _build_schema_version_details_read(cls, _schema):
        if cls._schema_version_details_read is not None:
            _schema.expiry_date = cls._schema_version_details_read.expiry_date
            _schema.status = cls._schema_version_details_read.status
            _schema.version = cls._schema_version_details_read.version
            return

        cls._schema_version_details_read = _schema_version_details_read = AAZObjectType()

        version_details_read = _schema_version_details_read
        version_details_read.expiry_date = AAZStrType(
            serialized_name="expiryDate",
        )
        version_details_read.status = AAZStrType()
        version_details_read.version = AAZStrType()

        _schema.expiry_date = cls._schema_version_details_read.expiry_date
        _schema.status = cls._schema_version_details_read.status
        _schema.version = cls._schema_version_details_read.version


__all__ = ["Update"]
