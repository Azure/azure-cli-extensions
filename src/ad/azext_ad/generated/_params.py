# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines
# pylint: disable=too-many-statements

from azure.cli.core.commands.parameters import (
    tags_type,
    get_enum_type,
    resource_group_name_type
)
from azext_ad.action import (
    AddReplicaSets,
    AddSettings
)


def load_arguments(self, _):

    with self.argument_context('ad ds list') as c:
        c.argument('resource_group_name', resource_group_name_type)

    with self.argument_context('ad ds show') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('domain_service_name', options_list=['--name', '-n'], type=str, help='The name of the domain '
                   'service.', id_part='name')

    with self.argument_context('ad ds create') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('domain_service_name', options_list=['--name', '-n'], type=str, help='The name of the domain '
                   'service.')
        c.argument('tags', tags_type)
        c.argument('domain_name', options_list=['--domain'], type=str, help='The name of the Azure domain that the '
                   'user would like to deploy Domain Services to.')
        c.argument('replica_sets', action=AddReplicaSets, nargs='+', help='List of ReplicaSets')
        c.argument('domain_configuration_type', options_list=['--domain-config-type'],
                   arg_type=get_enum_type(['FullySynced', 'ResourceTrusting']),
                   help='Domain Configuration Type')
        c.argument('sku', arg_type=get_enum_type(['Standard', 'Enterprise', 'Premium']), help='Sku Type')
        c.argument('filtered_sync', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Enabled or Disabled flag to '
                   'turn on Group-based filtered sync')
        c.argument('notify_global_admins', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Should global admins '
                   'be notified', arg_group='Notification Settings')
        c.argument('notify_dc_admins', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Should domain controller '
                   'admins be notified', arg_group='Notification Settings')
        c.argument('additional_recipients', options_list=['--notify-others'], nargs='+', help='The list of additional '
                   'recipients', arg_group='Notification Settings')
        c.argument('ntlm_v1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or '
                   'not NtlmV1 is enabled or disabled.', arg_group='Domain Security Settings')
        c.argument('tls_v1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or not '
                   'TlsV1 is enabled or disabled.', arg_group='Domain Security Settings')
        c.argument('sync_ntlm_passwords', options_list=['--sync-ntlm-pwd'], arg_type=get_enum_type(['Enabled',
                                                                                                    'Disabled']),
                   help='A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.',
                   arg_group='Domain Security Settings')
        c.argument('sync_kerberos_passwords', options_list=['--sync-kerberos-pwd'],
                   arg_type=get_enum_type(['Enabled', 'Disabled']), help='A '
                   'flag to determine whether or not SyncKerberosPasswords is enabled or disabled.', arg_group='Domain '
                   'Security Settings')
        c.argument('sync_on_prem_passwords', options_list=['--sync-on-prem-pwd'], arg_type=get_enum_type(['Enabled',
                                                                                                          'Disabled']),
                   help='A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.',
                   arg_group='Domain Security Settings')
        c.argument('settings', action=AddSettings, nargs='+', help='List of settings for Resource Forest',
                   arg_group='Resource Forest Settings')
        c.argument('resource_forest', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Resource Forest',
                   arg_group='Resource Forest Settings')
        c.argument('ldaps', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or not '
                   'Secure LDAP is enabled or disabled.', arg_group='Ldaps Settings')
        c.argument('pfx_certificate', options_list=['--pfx-cert'], type=str, help='The certificate required to '
                   'configure Secure LDAP. The parameter passed here should be a base64encoded representation of the '
                   'certificate pfx file.', arg_group='Ldaps Settings')
        c.argument('pfx_certificate_password', options_list=['--pfx-cert-pwd'], type=str, help='The password to '
                   'decrypt the provided Secure LDAP certificate pfx file.', arg_group='Ldaps Settings')
        c.argument('external_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine '
                   'whether or not Secure LDAP access over the internet is enabled or disabled.', arg_group='Ldaps '
                   'Settings')

    with self.argument_context('ad ds update') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('domain_service_name', options_list=['--name', '-n'], type=str, help='The name of the domain '
                   'service.', id_part='name')
        c.argument('tags', tags_type)
        c.argument('replica_sets', action=AddReplicaSets, nargs='+', help='List of ReplicaSets')
        c.argument('domain_configuration_type', options_list=['--domain-config-type'],
                   arg_type=get_enum_type(['FullySynced', 'ResourceTrusting']),
                   help='Domain Configuration Type')
        c.argument('sku', arg_type=get_enum_type(['Standard', 'Enterprise', 'Premium']), help='Sku Type')
        c.argument('filtered_sync', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Enabled or Disabled flag to '
                   'turn on Group-based filtered sync')
        c.argument('notify_global_admins', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Should global admins '
                   'be notified', arg_group='Notification Settings')
        c.argument('notify_dc_admins', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Should domain controller '
                   'admins be notified', arg_group='Notification Settings')
        c.argument('additional_recipients', options_list=['--notify-others'], nargs='+', help='The list of additional '
                   'recipients', arg_group='Notification Settings')
        c.argument('ntlm_v1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or '
                   'not NtlmV1 is enabled or disabled.', arg_group='Domain Security Settings')
        c.argument('tls_v1', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or not '
                   'TlsV1 is enabled or disabled.', arg_group='Domain Security Settings')
        c.argument('sync_ntlm_passwords', options_list=['--sync-ntlm-pwd'], arg_type=get_enum_type(['Enabled',
                                                                                                    'Disabled']),
                   help='A flag to determine whether or not SyncNtlmPasswords is enabled or disabled.',
                   arg_group='Domain Security Settings')
        c.argument('sync_kerberos_passwords', options_list=['--sync-kerberos-pwd'],
                   arg_type=get_enum_type(['Enabled', 'Disabled']), help='A '
                   'flag to determine whether or not SyncKerberosPasswords is enabled or disabled.', arg_group='Domain '
                   'Security Settings')
        c.argument('sync_on_prem_passwords', options_list=['--sync-on-prem-pwd'], arg_type=get_enum_type(['Enabled',
                                                                                                          'Disabled']),
                   help='A flag to determine whether or not SyncOnPremPasswords is enabled or disabled.',
                   arg_group='Domain Security Settings')
        c.argument('settings', action=AddSettings, nargs='+', help='List of settings for Resource Forest',
                   arg_group='Resource Forest Settings')
        c.argument('resource_forest', arg_type=get_enum_type(['Enabled', 'Disabled']), help='Resource Forest',
                   arg_group='Resource Forest Settings')
        c.argument('ldaps', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine whether or not '
                   'Secure LDAP is enabled or disabled.', arg_group='Ldaps Settings')
        c.argument('pfx_certificate', options_list=['--pfx-cert'], type=str, help='The certificate required to '
                   'configure Secure LDAP. The parameter passed here should be a base64encoded representation of the '
                   'certificate pfx file.', arg_group='Ldaps Settings')
        c.argument('pfx_certificate_password', options_list=['--pfx-cert-pwd'], type=str, help='The password to '
                   'decrypt the provided Secure LDAP certificate pfx file.', arg_group='Ldaps Settings')
        c.argument('external_access', arg_type=get_enum_type(['Enabled', 'Disabled']), help='A flag to determine '
                   'whether or not Secure LDAP access over the internet is enabled or disabled.', arg_group='Ldaps '
                   'Settings')

    with self.argument_context('ad ds delete') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('domain_service_name', options_list=['--name', '-n'], type=str, help='The name of the domain '
                   'service.', id_part='name')

    with self.argument_context('ad ds wait') as c:
        c.argument('resource_group_name', resource_group_name_type)
        c.argument('domain_service_name', options_list=['--name', '-n'], type=str, help='The name of the domain '
                   'service.', id_part='name')
