# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------
# pylint: disable=line-too-long
# pylint: disable=too-many-lines

from azure.cli.core.util import sdk_no_wait


def ad_ds_list(client,
               resource_group_name=None):
    if resource_group_name:
        return client.list_by_resource_group(resource_group_name=resource_group_name)
    return client.list()


def ad_ds_show(client,
               resource_group_name,
               domain_service_name):
    return client.get(resource_group_name=resource_group_name,
                      domain_service_name=domain_service_name)


def ad_ds_create(client,
                 resource_group_name,
                 domain_service_name,
                 domain_name,
                 replica_sets,
                 tags=None,
                 domain_configuration_type=None,
                 sku=None,
                 filtered_sync=None,
                 notify_global_admins=None,
                 notify_dc_admins=None,
                 additional_recipients=None,
                 ntlm_v1=None,
                 tls_v1=None,
                 sync_ntlm_passwords=None,
                 sync_kerberos_passwords=None,
                 sync_on_prem_passwords=None,
                 settings=None,
                 resource_forest=None,
                 ldaps=None,
                 pfx_certificate=None,
                 pfx_certificate_password=None,
                 external_access=None,
                 no_wait=False):
    if ntlm_v1 is None:
        ntlm_v1 = "Enabled"
    if tls_v1 is None:
        tls_v1 = "Enabled"
    if sync_ntlm_passwords is None:
        sync_ntlm_passwords = "Enabled"
    if sync_kerberos_passwords is None:
        sync_kerberos_passwords = "Enabled"
    if sync_on_prem_passwords is None:
        sync_on_prem_passwords = "Enabled"
    if ldaps is None:
        ldaps = "Disabled"
    if external_access is None:
        external_access = "Disabled"
    domain_service = {}
    domain_service['tags'] = tags
    domain_service['domain_name'] = domain_name
    domain_service['replica_sets'] = replica_sets
    domain_service['domain_configuration_type'] = domain_configuration_type
    domain_service['sku'] = sku
    domain_service['filtered_sync'] = filtered_sync
    domain_service['notification_settings'] = {}
    domain_service['notification_settings']['notify_global_admins'] = notify_global_admins
    domain_service['notification_settings']['notify_dc_admins'] = notify_dc_admins
    domain_service['notification_settings']['additional_recipients'] = additional_recipients
    domain_service['domain_security_settings'] = {}
    domain_service['domain_security_settings']['ntlm_v1'] = "Enabled" if ntlm_v1 is None else ntlm_v1
    domain_service['domain_security_settings']['tls_v1'] = "Enabled" if tls_v1 is None else tls_v1
    domain_service['domain_security_settings']['sync_ntlm_passwords'] = "Enabled" if sync_ntlm_passwords is None else sync_ntlm_passwords
    domain_service['domain_security_settings']['sync_kerberos_passwords'] = "Enabled" if sync_kerberos_passwords is None else sync_kerberos_passwords
    domain_service['domain_security_settings']['sync_on_prem_passwords'] = "Enabled" if sync_on_prem_passwords is None else sync_on_prem_passwords
    domain_service['resource_forest_settings'] = {}
    domain_service['resource_forest_settings']['settings'] = settings
    domain_service['resource_forest_settings']['resource_forest'] = resource_forest
    domain_service['ldaps_settings'] = {}
    domain_service['ldaps_settings']['ldaps'] = "Disabled" if ldaps is None else ldaps
    domain_service['ldaps_settings']['pfx_certificate'] = pfx_certificate
    domain_service['ldaps_settings']['pfx_certificate_password'] = pfx_certificate_password
    domain_service['ldaps_settings']['external_access'] = "Disabled" if external_access is None else external_access
    return sdk_no_wait(no_wait,
                       client.begin_create_or_update,
                       resource_group_name=resource_group_name,
                       domain_service_name=domain_service_name,
                       domain_service=domain_service)


def ad_ds_update(client,
                 resource_group_name,
                 domain_service_name,
                 tags=None,
                 replica_sets=None,
                 domain_configuration_type=None,
                 sku=None,
                 filtered_sync=None,
                 notify_global_admins=None,
                 notify_dc_admins=None,
                 additional_recipients=None,
                 ntlm_v1=None,
                 tls_v1=None,
                 sync_ntlm_passwords=None,
                 sync_kerberos_passwords=None,
                 sync_on_prem_passwords=None,
                 settings=None,
                 resource_forest=None,
                 ldaps=None,
                 pfx_certificate=None,
                 pfx_certificate_password=None,
                 external_access=None,
                 no_wait=False):
    if ntlm_v1 is None:
        ntlm_v1 = "Enabled"
    if tls_v1 is None:
        tls_v1 = "Enabled"
    if sync_ntlm_passwords is None:
        sync_ntlm_passwords = "Enabled"
    if sync_kerberos_passwords is None:
        sync_kerberos_passwords = "Enabled"
    if sync_on_prem_passwords is None:
        sync_on_prem_passwords = "Enabled"
    if ldaps is None:
        ldaps = "Disabled"
    if external_access is None:
        external_access = "Disabled"
    domain_service = {}
    domain_service['tags'] = tags
    domain_service['replica_sets'] = replica_sets
    domain_service['domain_configuration_type'] = domain_configuration_type
    domain_service['sku'] = sku
    domain_service['filtered_sync'] = filtered_sync
    domain_service['notification_settings'] = {}
    domain_service['notification_settings']['notify_global_admins'] = notify_global_admins
    domain_service['notification_settings']['notify_dc_admins'] = notify_dc_admins
    domain_service['notification_settings']['additional_recipients'] = additional_recipients
    domain_service['domain_security_settings'] = {}
    domain_service['domain_security_settings']['ntlm_v1'] = "Enabled" if ntlm_v1 is None else ntlm_v1
    domain_service['domain_security_settings']['tls_v1'] = "Enabled" if tls_v1 is None else tls_v1
    domain_service['domain_security_settings']['sync_ntlm_passwords'] = "Enabled" if sync_ntlm_passwords is None else sync_ntlm_passwords
    domain_service['domain_security_settings']['sync_kerberos_passwords'] = "Enabled" if sync_kerberos_passwords is None else sync_kerberos_passwords
    domain_service['domain_security_settings']['sync_on_prem_passwords'] = "Enabled" if sync_on_prem_passwords is None else sync_on_prem_passwords
    domain_service['resource_forest_settings'] = {}
    domain_service['resource_forest_settings']['settings'] = settings
    domain_service['resource_forest_settings']['resource_forest'] = resource_forest
    domain_service['ldaps_settings'] = {}
    domain_service['ldaps_settings']['ldaps'] = "Disabled" if ldaps is None else ldaps
    domain_service['ldaps_settings']['pfx_certificate'] = pfx_certificate
    domain_service['ldaps_settings']['pfx_certificate_password'] = pfx_certificate_password
    domain_service['ldaps_settings']['external_access'] = "Disabled" if external_access is None else external_access
    return sdk_no_wait(no_wait,
                       client.begin_update,
                       resource_group_name=resource_group_name,
                       domain_service_name=domain_service_name,
                       domain_service=domain_service)


def ad_ds_delete(client,
                 resource_group_name,
                 domain_service_name,
                 no_wait=False):
    return sdk_no_wait(no_wait,
                       client.begin_delete,
                       resource_group_name=resource_group_name,
                       domain_service_name=domain_service_name)
